3967||||||false||||||
<P>Most of us at one time or another have used a circular combination lock (think back to those glorious days in high school and your gym locker). Most combination locks consist of a dial with the numbers 0 through <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> printed on it in clockwise order. The dial can be turned either clockwise or counterclockwise, bringing one of the numbers to the top of the dial (if 0 is at the top of the dial, a turn of 1 in the counterclockwise direction would bring 1 to the top). Each lock has a three number code <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> and can only be opened after the following series of steps:<P><OL><LI>The lock dial must first be spun clockwise at least one full rotation, ending with the number <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> at the top (with no intervening counterclockwise turns). Note this could be accomplished with consecutive clockwise turns. </LI><LI>The lock must be turned counterclockwise until the number <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> appears at the top for the second time. Note this could be accomplished with consecutive counterclockwise turns (but no intervening clockwise turns). </LI><LI>The lock must then be turned clockwise until the number <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> appears on top, without going more than one full rotation. Note this could be accomplished with consecutive clockwise turns (but no intervening counterclockwise turns). </LI></OL><P>Any rotation after this last step will cause the lock to be closed again.<P>For this problem, you will be given a lock and a series of turns and you must determine at the end whether or not the lock is open. You should assume prior to the first turn that the lock has just been closed, and the dial spun counterclockwise until 0 is on top.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of each test case will contain four integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark>, indicating the number of digits on the lock's dial and the three-number combination (<SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> will all be different and <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3967img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). The next line(s) will consist of a series of dial rotations of the form <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is either <TT>C</TT> or <TT>CC</TT> (for clockwise or counterclockwise) and <SPAN CLASS="MATH"><I>s</I>( &gt; 0)</SPAN> <tex2html_verbatim_mark> indicates how many numbers to spin through at the top of the dial. For example, if <SPAN CLASS="MATH"><I>n</I> = 50</SPAN> <tex2html_verbatim_mark> and the current number on top of the dial is 4, the rotation <TT>CC 6</TT> would bring the number 10 to the top, while a rotation of <TT>C 6</TT> would bring 48 to the top. The series of dial rotations may extend over multiple lines, ending with the character `<TT>?</TT>'. A line with a single `<TT>0</TT>' on it will follow the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output a single line containing either the word Open or Closed, prefaced by the test case number as shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
60 6 1 58 
C 114 CC 115 C 3 ? 
60 6 1 58 
C 54 CC 115 C 3 ? 
60 6 1 58 
C 54 C 60 CC 115 C 3 ? 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Open 
Case 2: Closed 
Case 3: Open
</PRE><P>
______________________________________________________
3968||||||false||||||
<P>Anna Graham is a puzzle maker who prides herself in the quality and complexity of her work. She makes puzzles of all kinds - crosswords, logic problems, acrostics, and word search puzzles, to name but a few. For each puzzle, she has developed a set of rules which she constrains herself to follow. For word search puzzles, she insists not only that all the words be connected to one another (as in most word search puzzles), but also that removing any word from the word list will not cause one or more words to become disconnected from the rest. (Two words are connected if they contain a common letter in the grid.) The example word search puzzle on the left satisfies this condition, but the one on the right does not (removing the word Pascal from the word list disconnects Java from the other two words).<P><DIV ALIGN="CENTER"><IMG WIDTH="510" HEIGHT="163" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3968.png ALT="\epsfbox{p3968.eps}"> <tex2html_verbatim_mark></DIV><P>Your job is to write a program that checks to see if Anna's word search problems are up to snuff.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of each test case contains 3 integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> are the number of rows and columns in the puzzle and <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> is the number of words. Following this are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines containing <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> uppercase characters each (the puzzle) followed by <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> lines containing one word each (the word list, in mixed case). Each word in the word list will appear in the puzzle exactly once. There will be no more than 100 rows and 100 columns in the puzzle and no more than 100 words to search for. There will be no spaces in the input words.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each problem instance, output the word <TT>Yes</TT> or <TT>No</TT> depending on whether the puzzle satisfies Anna's constraints.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN><P>Bonus Puzzle (For those of you with a little extra time.)<P><PRE>
A D N E R H E B E T W E S T M I N S T E R T H
Y E G R A V E M E U D R U P O B E R L I N D E
E C M I C H I G A N W A T E R L O O I G I N T
L G E M R C U N T D I V E L L I V R A D E C A
L E U A H R W S E I E B T T Y S N T H R E S T
A R E I I I B N V Y O R K O S A A G A L N O S
V K G M N T O A I W H F T R G G G Z A E R I T
D A R D O M U D L E I H T O N I A D E R N B H
N R S O A Y E I O D O A T N N N K U D D B I G
A O L R N N N R G R W S I T N A Q E I S E O I
R A I R C G C E H G E I P O O W I A N N G N R
G H P O G I N H H N S I N F T V N T B H E A W
M S P R T U N S O G L R D W E A O N O T S G M
U A E N F D A C L R E I R U A L D I R F L I W
G E R O L B U E I V Y L H M E L I A O N C H D
N T Y I H O O Q T N A U L D G E L H Y H T C H
I E R H E T Y M U M N A O A A Y Y A I T E I B
K W O O S T E R N E W A H S N A F G C D O M R
S U C P I A T N A B S I T M C M A S T E R N O
U G K H O W L A U R E N T I A N O T E L R A C
M A S H L A N D Y T I C E V O R G L E J P B K
</PRE><P><PRE>
ALMA                    DAYTON                 MICHIGAN                SHERIDAN 
AKRON                   DUQUESNE               MT VERNON NAZARENE      SLIPPERY ROCK 
ALLEGHENY               EDINBORO               MUSKINGUM               SPRING ARBOR 
ASHLAND                 E(astern) MICHIGAN     N(orthern) MICHIGAN     THIEL 
BALDWIN-WALLACE         FANSHAWE               NOTRE DAME              TOLEDO 
BEHREND                 GRAND VALLEY           OBERLIN                 TORONTO 
BOWLING GREEN           GROVE CITY             OHIO N(orthern)         WATERLOO 
BROCK                   HIRAM                  OHIO WESLEYAN           WESTMINSTER 
CARLETON                IIT                    OLIVET                  WILFRID LAURIER 
CEDARVILLE              INDIANA                OTTAWA                  WINDSOR 
CINCINNATI              LAURENTIAN             PITT                    WOOSTER 
C(entral) MICHIGAN      MARIETTA               PURDUE                  WRIGHT STATE 
CMU                     MCMASTER               QUEENS                  YORK
CONESTOGA               MIAMI                  SAGINAW VALLEY
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 6 3 
PBROGR 
PASCAL 
ASMMIN 
GIICON 
TCELST 
BASIC 
LISP 
Pascal 
5 6 4 
PBROJR 
PASCAL
ASMMVN 
GIICAN 
TCELST 
BASIC 
Java 
LISP 
Pascal 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes 
No
</PRE><P>
______________________________________________________
3969||||||false||||||
<P>IBM has decided that all messages sent to and from teams competing in the ACM programming contest should be encoded. They have decided that instead of sending the letters of a message, they will transmit their remainders relative to some secret keys which are four, two-digit integers that are pairwise relatively prime. For example, consider the message ``<TT>THE CAT IN THE HAT</TT>". The letters of this message are first converted into numeric equivalents, where <TT>A</TT>=01, <TT>B</TT>=02, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, <TT>Z</TT>=26 and a <SPAN CLASS="textit">blank</SPAN>=27. Each group of 3 letters is then combined to create a 6 digit number. (If the last group does not contain 3 letters it is padded on the right with blanks and then transformed into a 6 digit number.) For example<P><P><BR><TT>THE CAT IN THE HAT</TT> <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/3969img1.png ALT="$ \rightarrow$"></SPAN> <tex2html_verbatim_mark> <TT>200805 270301 202709 142720 080527 080120</TT><P><P><BR>Each six-digit integer is then encoded by replacing it with the remainders modulo the secret keys as follows: Each remainder should be padded with leading 0's, if necessary, to make it two digits long. After this, the remainders are concatenated together and then any leading 0's are removed. For example, if the secret keys are 34, 81, 65, and 43, then the first integer 200805 would have remainders 1, 6, 20 and 38. Following the rules above, these combine to get the encoding 1062038. The entire sample message above would be encoded as<P><P><BR><TT>1062038 1043103 1473907 22794503 15135731 16114011</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of input consists of a single positive integer n indicating the number of test cases. The next <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> lines of the input consist of the test cases. The first line of each test case contains a positive integer <SPAN CLASS="MATH">( &lt; 50)</SPAN> <tex2html_verbatim_mark> giving the number of groups in the encoded message. The second line of each test case consists of the four keys followed by the encoded message. Each message group is separated with a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case write the decoded message. You should not print any trailing blanks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 
34 81 65 43 1062038 1043103 1473907 22794503 15135731 16114011 
3 
20 31 53 39 5184133 14080210 7090922
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
THE CAT IN THE HAT 
THE END
</PRE><P>
______________________________________________________
3970||||||false||||||
<P>There are many forms of contests where the contestants (shooters) try to hit targets, either moving or still. In this version there are a number of small balloons sitting on the tops of poles that are in turn stuck in the ground at various points in a large field. These poles are not all the same height. The shooter circles the field and fires at the balloons, the goal being to burst all the balloons with as few shots as possible. Since the balloons offer almost no resistance to a bullet, the bullet will pass right through and possibly hit one or more other balloons. So, by judiciously taking shots, the shooter might need only a very few shots to hit all the targets (provided the shooter is a good marksman, which we will assume is the case).<P>For example, the following field of 10 targets can be covered in only four shots, as shown. (The first two numbers at each position indicate the position of the balloon, and the third number the height.)<P><DIV ALIGN="CENTER"><IMG WIDTH="361" HEIGHT="217" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3970.png ALT="\epsfbox{p3970.eps}"> <tex2html_verbatim_mark></DIV><P>Your job is to determine the fewest number of shots necessary to hit all the targets in a given field.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple test cases. Each test case will consist of an integer <SPAN CLASS="MATH"><I>n</I>(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3970.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> indicating the number of target positions to follow. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> indicates end of input. There will follow <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integer triples, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, indicating a balloon at position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> in the field at height <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>. (There will be at most one balloon at any position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>.) All integers are greater than 0 and no greater than 100. Furthermore assume that the shooter can take shots from anywhere on the field at any height. For simplification, assume here that the balloons are points and that the bullets can pass through the poles on which the balloons are perched.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case should produce one line of output of the form:<P><P><BR><TT>Target set <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> can be cleared using only <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> shots.</TT><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the number of the test case, starting at 1, and the value of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the minimum number of shots needed to hit all the targets in the set.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
5 15 4 10 60 52 17 27 4 33 20 10 33 85 31 42 52 4 70 70 22 
78 88 4 85 40 58 100 75 7 
9 
5 15 4 10 60 52 17 27 4 33 20 10 33 85 31 42 52 4 70 70 22 
78 88 4 100 75 7 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Target set 1 can be cleared using only 4 shots. 
Target set 2 can be cleared using only 3 shots.

______________________________________________________
3971||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>A - Assemble</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem A - Assemble</h1><h3>Time limit: 2 seconds</h3><p>Recently your team noticed that the computer you use to practice for programming contests is not good enough anymore. Therefore, you decide to buy a new computer.</p><p>To make the ideal computer for your needs, you decide to buy separate components and assemble the computer yourself. You need to buy exactly one of each type of component.</p><p>The problem is which components to buy. As you all know, the quality of a computer is equal to the quality of its weakest component. Therefore, you want to maximize the quality of the component with the lowest quality, while not exceeding your budget.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with two integers: 1 &le; <em>n</em> &le; 1000, the number of available components and 1 &le; <em>b</em> &le; 1000000000, your budget. <li><em>n</em> lines in the following format: ``<tt>type name price quality</tt>'', where <tt>type</tt> is a string with the type of the component, <tt>name</tt> is a string with the unique name of the component, <tt>price</tt> is an integer (0 &le; <tt>price</tt> &lt; 1000000) which represents the price of the component and <tt>quality</tt> is an integer (0 &le; <tt>quality</tt> &le; 1000000000) which represents the quality of the component (higher is better). The strings contain only letters, digits and underscores and have a maximal length of 20 characters.</ul><p>It will always possible to construct a computer with your budget.</p><h2>Output</h2><p>Per testcase:</p><ul><li>One line with one integer: the maximal possible quality.</ul><div class="sample"><h2>Sample Input</h2><pre>
1
18 800
processor 3500_MHz 66 5
processor 4200_MHz 103 7
processor 5000_MHz 156 9
processor 6000_MHz 219 12
memory 1_GB 35 3
memory 2_GB 88 6
memory 4_GB 170 12
mainbord all_onboard 52 10
harddisk 250_GB 54 10
harddisk 500_FB 99 12
casing midi 36 10
monitor 17_inch 157 5
monitor 19_inch 175 7
monitor 20_inch 210 9
monitor 22_inch 293 12
mouse cordless_optical 18 12
mouse microsoft 30 9
keyboard office 4 10
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
9
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3972||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>B - March of the Penguins</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem B - March of the Penguins</h1><h3>Time limit: 4 seconds</h3><p>Somewhere near the south pole, a number of penguins are standing on a number of ice floes. Being social animals, the penguins would like to get together, all on the same floe. The penguins do not want to get wet, so they have use their limited jump distance to get together by jumping from piece to piece. However, temperatures have been high lately, and the floes are showing cracks, and they get damaged further by the force needed to jump to another floe. Fortunately the penguins are real experts on cracking ice floes, and know exactly how many times a penguin can jump off each floe before it disintegrates and disappears. Landing on an ice floe does not damage it. You have to help the penguins find all floes where they can meet.</p><p><center><img src="http://livearchive.onlinejudge.org/external/39/p3972.png><br/> A sample layout of ice floes with 3 penguins on them.</center></p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with the integer <em>N</em> (1 &le; <em>N</em> &le; 100) and a floating-point number <em>D</em> (0 &le; <em>D</em> &le; 100000), denoting the number of ice pieces and the maximum distance a penguin can jump. <li><em>N</em> lines, each line containing <em>x<sub>i</sub></em>, <em>y<sub>i</sub></em>, <em>n<sub>i</sub></em> and <em>m<sub>i</sub></em>, denoting for each ice piece its <em>X</em> and <em>Y</em> coordinate, the number of penguins on it and the maximum number of times a penguin can jump off this piece before it disappears (-10000 &le; <em>x<sub>i</sub></em>, <em>y<sub>i</sub></em> &le; 10000, 0 &le; <em>n<sub>i</sub></em> &le; 10, 1 &le; <em>m<sub>i</sub></em> &le; 200).</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line containing a space-separated list of 0-based indices of the pieces on which all penguins can meet. If no such piece exists, output a line with the single number -1.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
5 3.5
1 1 1 1
2 3 0 1
3 5 1 1
5 1 1 1
5 4 0 1
3 1.1
-1 0 5 10
0 0 3 9
2 0 1 1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1 2 4
-1
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3973||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>C - Containers</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem C - Containers</h1><h3>Time limit: 1 seconds</h3><p>At a container terminal, containers arrive from the hinterland, one by one, by rail, by road, or by small ships. The containers are piled up as they arrive. Then the huge cargo ships arrive, each one capable of carrying thousands of containers. The containers are loaded into the ships that will bring them to far away shores. Or the other way round, containers are brought in over sea, piled up, and transported to the hinterland one by one. Anyway, a huge parking lot is needed, to store the containers waiting for further transportation.</p><p>Building the new container terminal at the mouth of the river was a good choice. But there are disadvantages as well. The ground is very muddy, and building on firm ground would have been substantially cheaper. It will be important to build the parking lot not larger than necessary.</p><p>A container is 40 feet long and 8 feet wide. Containers are stacked, but a stack will be at most five containers high. The stacks are organized in rows. Next to a container stack, and between two container stacks (along the long side of the containers) a space of 2 feet is needed for catching the containers. Next to a row of stacks, and between two stacks (along the short side of the containers) a space of 4 feet is needed for the crane that lifts the containers. All containers are placed in the same direction, as the cranes can not make turns on the parking lot.</p><p>The parking lot should be rectangular. Given the required capacity of the parking lot, what will be the best dimension for the parking lot? In the first place the area should be minimal. The second condition is that the parking lot should be as square as possible.</p><p>Below you see a plan for a parking lot with a capacity of 8 stacks. Two rows of four containers each turns out to be the best solution here, with a total area of 92 &times; 42 = 3864.</p><p><center><img src="http://livearchive.onlinejudge.org/external/39/p3973.jpg><br/> A parking lot with 8 container stacks.</center></p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>A single positive integer <em>n</em> (<em>n</em> &le; 10<sup>12</sup>) on a single line: the required capacity (number of containers) for the parking lot.</ul><h2>Output</h2>Per testcase:<ul><li>A single line, containing the length, width (length &ge; width) and area of the optimal solution. The optimal solution has the least possible area, and if there are multiple solutions having the same area, the difference length - width should be minimal.</ul>Use the sample format.<div class="sample"><h2>Sample Input</h2><pre>
6
1
15
22
29
36
43
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
48 X 12 = 576
48 X 32 = 1536
52 X 48 = 2496
92 X 32 = 2944
92 X 42 = 3864
136 X 32 = 4352
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3974||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>D - Youth Hostel Dorm</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem D - Youth Hostel Dorm</h1><h3>Time limit: 1 seconds</h3><p>The Utrecht Youth Hostel has a giant dorm which usually accommodates all customers easily. With NWERC in town, however, lots of people would like to stay there and all the space available in the dorm should be used as efficiently as possible. You are assigned to provide the dorm layout.</p><p>The size of the dorm is given and the layout should consist of a map of that particular size. The map should display one `<tt>E</tt>', the point of entrance of the dorm, and furthermore `<tt>B</tt>'s and `<tt>.</tt>'s, indicating beds and empty spaces. The entrance should be located somewhere on the boundary of the dorm and every single bed should be reachable by starting at the entrance and walking through empty squares only. You can only walk in vertical and horizontal directions.</p><p>The provided layout should contain as many beds as possible.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with two integers <em>l</em> and <em>w</em> with 1 &le; <em>l</em>, <em>w</em> &le; 8: the size of the dorm.</ul><h2>Output</h2><p>Per testcase:</p><ul><li><em>l</em> lines with <em>w</em> characters: the dorm layout. Any layout with the maximum number of beds is correct.</ul><div class="sample"><h2>Sample Input</h2><pre>
3
1 1
4 7
3 8
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
E
B.B.BEB
B.BBB.B
B.....B
B.BBB.B
BBBBBBBB
.......E
BBBBBBBB
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3975||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>E - Escape from Enemy Territory</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem E - Escape from Enemy Territory</h1><h3>Time limit: 4 seconds</h3><p>A small group of commandos has infiltrated deep into enemy territory. They have just accomplished their mission and now have to return to their rendezvouz point. Of course they don't want to get caught even if the mission is already over. Therefore they decide to take the route that will keep them as far away from any enemy base as possible.</p><p>Being well prepared for the mission, they have a detailed map of the area which marks all (known) enemy bases, their current position and the rendezvouz point. For simplicity, we view the the map as a rectangular grid with integer coordinates (<em>x</em>, <em>y</em>) where 0 &le; <em>x</em> &lt; <em>X</em>, 0 &le; <em>y</em> &lt; <em>Y</em>. Furthermore, we approximate movements as horizontal and vertical steps on this grid, so we use Manhattan distance: dist((<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>),(<em>x</em><sub>2</sub>, <em>y</em><sub>2</sub>)) = |<em>x</em><sub>2</sub>-<em>x</em><sub>1</sub>|+|<em>y</em><sub>2</sub>-<em>y</em><sub>1</sub>| and also the commandos can only travel in vertical and horizontal directions at each step.</p><p>Can you help them find the best route? Of course, in case that there are multiple routes that keep the same minimum distance to enemy bases, the commandos want to take a shortest route that does so. Furthermore, they don't want to take a route off their map as it could take them in unknown, dangerous areas, but you don't have to worry about unknown enemy bases off the map.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with three positive numbers <em>N</em>, <em>X</em>, <em>Y</em>. 1 &le; <em>N</em> &le; 10000 is the number of enemy bases and 1 &le; <em>X</em>, <em>Y</em> &le; 1000 the size of the map: coordinates <em>x</em>, <em>y</em> are on the map if 0 &le; <em>x</em> &lt; <em>X</em>, 0 &le; <em>y</em> &lt; <em>Y</em>. <li>One line containing two pairs of coordinates <em>x</em><sub>i</sub>, <em>y</em><sub>i</sub> and <em>x</em><sub>r</sub>, <em>y</em><sub>r</sub>: the initial position of the commandos and the rendezvouz point. <li><em>N</em> lines each containing one pair of coordinates <em>x</em>, <em>y</em> of an enemy base.</ul>All pairs of coordinates are on the map and different from each other.<h2>Output</h2><p>Per testcase:</p><ul><li>One line with two numbers separated by one space: the minimum separation from an enemy base and the length of the route.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
1 2 2
0 0 1 1
0 1
2 5 6
0 0 4 0
2 1
2 3
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1 2
2 14
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3976||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>F - Flight Safety</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem F - Flight Safety</h1><h3>Time limit: 4 seconds</h3><p>Safety is an important issue when planning flights. First and foremost, one should of course take every possible measure to make sure that the trip is uneventful and that no incidents occur. But even then, one should always be prepared for the worst and try to make sure that if an incident does happen, people's chances of surviving are as high as possible.</p><p>When making an emergency landing over water, the distance to the nearest land is a critical factor. In general, the further out on open waters, the worse are the odds of survival. Thus, one important safety parameter of a flight is how far away from the nearest land that any part of the flight will take you. Your job is to write a program which, given a flight route, will determine this distance.</p>To simplify matters, we model the world as a 2-dimensional plane rather than a sphere. We model continents as polygons, and a flight route as a sequence of key points connected by straight line segments. Flight routes always start and end strictly inside a continent, but intermediate key points may be located over water. Continents do not intersect themselves or touch each other.</p><p><center><img src="http://livearchive.onlinejudge.org/external/39/p3976.png><br/> Second sample case (furthest point marked with a square).</center></p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line containing two integers <em>C</em> (1 &le; <em>C</em> &le; 20) and <em>N</em> (2 &le; <em>N</em> &le; 20), where <em>C</em> is the number of continents and <em>N</em> is the number of key points in the flight route. <li><em>N</em> lines each containing two integers <em>X</em>, <em>Y</em> giving the coordinates of the key points, from first to last. <li>The descriptions of the <em>C</em> continents. Each continent description starts with a line containing an integer <em>M</em> (3 &le; <em>M</em> &le; 30) giving the number of vertices of this continent. It is followed by <em>M</em> lines, each containing a pair of integers <em>X</em>, <em>Y</em> giving the coordinates of the <em>M</em> vertices, in either clockwise or counter-clockwise order.</ul>Every coordinate in the input is between -10000 and 10000.<h2>Output</h2><p>For each test case:</p><ul><li>One line with the furthest distance from land that the flight route will go. The answer should be given with an absolute or relative error of at most 10<sup>-3</sup>.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
1 2
-9 -6
5 1
3
0 16
-16 -12
17 -6
2 3
12 4
16 17
3 9
4
1 0
4 19
19 14
6 12
3
10 10
5 3
18 2
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
0.000000
2.942685
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3977||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>G - Summits</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem G - Summits</h1><h3>Time limit: 8 seconds</h3><p>You recently started working for the largest map drawing company in the Netherlands. Part of your job is to determine what the summits in a particular landscape are. Unfortunately, it is not so easy to determine which points are summits and which are not, because we do not want to call a small hump a summit. For example look at the landscape given by the sample input.</p><p>We call the points of height 3 summits, since there are no higher points. But although the points of height 2, which are to the left of the summit of height 3, are all higher than or equal to their immediate neighbours, we do not want to call them summits, because we can reach a higher point from them without going to low (the summits of height 3). In contrast, we do want to call the area of height 2 on the right a summit, since if we would want to walk to the summit of height 3, we first have to descend to a point with height 0.</p><p>After the above example, we introduce the concept of a <em>d</em>-summit. A point, with height <em>h</em>, is a <em>d</em>-summit if and only if it is impossible to reach a higher point without going through an area with height smaller than or equal to <em>h</em>-<em>d</em>.</p><p>The problem is, given a rectangular grid of integer heights and an integer <em>d</em>, to find the number of <em>d</em>-summits.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with three integers 1 &le; <em>h</em> &le; 500, 1 &le w &le; 500 and 1 &le; <em>d</em> &le; 1000000000. <em>h</em> and <em>w</em> are the dimensions of the map. <em>d</em> is as defined in the text. <li><em>h</em> lines with <em>w</em> integers, where the <em>x</em>th integer on the <em>y</em>th line denotes the height 0 &le; <em>h</em> &le; 1000000000 of the point (<em>x</em>, <em>y</em>).</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line with the number of summits.</ul><div class="sample"><h2>Sample Input</h2><pre>
1
6 10 2
0 0 0 0 0 0 0 0 0 0
0 1 2 1 1 1 1 0 1 0
0 2 1 2 1 3 1 0 0 0
0 1 2 1 3 3 1 1 0 0
0 2 1 2 1 1 1 0 2 0
0 0 0 0 0 0 0 0 0 0
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
4
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3978||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>H - Obfuscation</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem H - Obfuscation</h1><h3>Time limit: 5 seconds</h3><p>It is a well-known fact that if you mix up the letters of a word, while leaving the first and last letters in their places, words still remain readable. For example, the sentence ``tihs snetncee mkaes prfecet sesne'', makes perfect sense to most people.</p><p>If you remove all spaces from a sentence, it still remains perfectly readable, see for example: ``thissentencemakesperfectsense'', however if you combine these two things, first shuffling, then removing spaces, things get hard. The following sentence is harder to decypher: ``tihssnetnceemkaesprfecetsesne''.</p><p>You're given a sentence in the last form, together with a dictionary of valid words and are asked to decypher the text.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with a string <em>s</em>: the sentence to decypher. The sentence consists of lowercase letters and has a length of at least 1 and at most 1000 characters. <li>One line with an integer <em>n</em> with 1 &le; <em>n</em> &le; 10000: the number of words in the dictionary. <li><em>n</em> lines with one word each. A word consists of lowercase letters and has a length of at least 1 and at most 100 characters. All the words are unique.</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line with the decyphered sentence, if it is possible to uniquely decypher it. Otherwise ``<tt>impossible</tt>'' or ``<tt>ambiguous</tt>'', depending on which is the case.</ul><div class="sample"><h2>Sample Input</h2><pre>
3
tihssnetnceemkaesprfecetsesne
5
makes
perfect
sense
sentence
this
hitehre
2
there
hello
hitehre
3
hi
there
three
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
this sentence makes perfect sense
impossible
ambiguous
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3979||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>I - Tower Parking</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem I - Tower Parking</h1><h3>Time limit: 1 seconds</h3><p>There is a new revolution in the parking lot business: the parking tower. The concept is simple: you drive your car into the elevator at the entrance of the tower, and the elevator and conveyor belts drag the car to an empty parking spot, where the car remains until you pick it up. When you return, the elevator and conveyor belts move your car back to the entrance and you're done.</p><p>The layout of the tower is simple. There is one central elevator that transports the cars between the different floors. On each floor there is one giant circular conveyor belt on which the cars stand. This belt can move in clockwise and counterclockwise direction. When the elevator arrives on a floor, it becomes part of the belt so that cars can move through it.</p><p>At the end of the day the tower is usually packed with cars and a lot of people come to pick them up. Customers are processed in a first come first serve order: the elevator is moved to the floor of the first car, the conveyor belt moves the car on the elevator, the elevator is moved down again, and so on. We like to know how long it takes before the last customer gets his car. Moving the elevator one floor up- or downwards takes 10 seconds and moving a conveyor belt one car in either direction takes 5 seconds.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with two integers <em>h</em> and <em>l</em> with 1 &le; <em>h</em> &le; 50 and 2 &le; <em>l</em> &le; 50: the height of the parking tower and the length of the conveyor belts. <li><em>h</em> lines with <em>l</em> integers: the initial placement of the cars. The <em>j</em>th number on the <em>i</em>th line describes the <em>j</em>th position on the <em>i</em>th floor. This number is -1 if the position is empty, and <em>r</em> if the position is occupied by the <em>r</em>th car to pick up. The positive numbers form a consecutive sequence from 1 to the number of cars. The entrance is on the first floor and the elevator (which is initially empty) is in the first position. There is at least one car in the parking tower.</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line with the number of seconds before the last customer is served.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
1 5
-1 2 1 -1 3
3 6
-1 5 6 -1 -1 3
-1 -1 7 -1 2 9
-1 10 4 1 8 -1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
25
320
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3980||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>J - Walk</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem J - Walk</h1><h3>Time limit: 4 seconds</h3><p>Alice would like to visit Bob. However, they live in a hilly landscape, and Alice doesn't like to walk in hills. She has a map of the area, showing the height curves. You have to calculate the total altitude climbed, and the total altitude descended, for the route which minimizes these numbers. It does not matter how far she has to walk to achieve this.</p><p>Since you don't know what the landscape looks like in between the height curves, you cannot know exactly how much climb and descent she will actually get in practice, but you should calculate the minimum possible under optimal conditions based on what you can deduce from the map.</p><p>The map is represented as an xy grid. Alice lives in (0, 0), and Bob lives in (100000, 0). The height curves are represented as polygons, where a polygon cannot intersect itself or another polygon. Furthermore, neither Alice nor Bob lives exactly on a height curve.</p><p><center><img src="http://livearchive.onlinejudge.org/external/39/p3980.png><br/> Second test case from sample input (compressed).</center></p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with 0 &le; <em>N</em> &le; 2500, the number of height curves. <li>One line for each height curve, with 1 &le; <em>H<sub>i</sub></em> &le; 1000 being the height of the curve, 3 &le; <em>P<sub>i</sub></em> &le; 2000 the number of vertices in the polygon, and the vertices <em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>, ..., <em>x<sub>P<sub>i</sub></sub></em>, <em>y<sub>P<sub>i</sub></sub></em> having integral values -300000 &le; <em>x<sub>i</sub></em>, <em>y<sub>i</sub></em> &le; 300000.</ul><p>There will be no more than 200000 polygon vertices in total in all test cases.</p><h2>Output</h2><p>Per testcase:</p><ul><li>One line with two numbers; the total altitude climbed and the total altitude descended.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
2
20 3 10 10 0 -10 -10 10
25 3 20 20 0 -20 -20 20
3
100 4 -1 1 1 1 1 -1 -1 -1
300 8 -2 2 2 2 2 -2 5 -2 5 1 6 1 6 -3 -2 -3
50 8 3 3 100001 3 100001 -1 7 -1 7 2 4 2 4 -1 3 -1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
5 0
200 250
</pre></div><div class="source">The 2007 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
3981||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem A - BEATBIT"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20A_files/filelist.xml"><title>Problem A - BEATBIT</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>0</o:TotalTime>  <o:Created>2007-11-16T17:06:00Z</o:Created>  <o:LastSaved>2007-11-16T17:07:00Z</o:LastSaved>  <o:Pages>2</o:Pages>  <o:Words>345</o:Words>  <o:Characters>1971</o:Characters>  <o:Lines>16</o:Lines>  <o:Paragraphs>3</o:Paragraphs>  <o:CharactersWithSpaces>2420</o:CharactersWithSpaces>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776683"><span lang=EN-GB>Problem A - BEATBIT</span></a><span lang=EN-GB><o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>A software company is very much concerned that its software engineers do not write equivalent procedures into the new version of its main product BEATBIT. The BEATBIT system is written in the assembly language BITE, recently introduced by MacroSoft, in its .DOT Framework. So far, no one has invented a more powerful language to program complex digital circuits. The BITE assembly language operates on a stack of bits, and is defined by the following four kinds of instructions:<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><i>label</i></span><span lang=EN-GB> <b>BRTRUE</b></span><span lang=EN-GB> <i>destlabel</i></span><span lang=EN-GB><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB>Pops a bit from the top of the stack, and tests it. If the value is <b>1</b></span><span lang=EN-GB> continues execution at the instruction with label <i>destlabel</i></span><span lang=EN-GB>. If the value is <b>0</b></span><span lang=EN-GB> continues at the next program instruction.<o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><i>label</i></span><span lang=EN-GB> <b>JMP</b></span><span lang=EN-GB> <i>destlabel</i></span><span lang=EN-GB><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB>Continues execution at the instruction with label <i>destlabel</i></span><span lang=EN-GB>.<o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><i>label</i></span><span lang=EN-GB> <b>RET1</b></span><span lang=EN-GB><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB>Stops execution and returns <b>1</b></span><span lang=EN-GB>.<o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB><i>label</i></span><span lang=EN-GB> <b>RET0</b></span><span lang=EN-GB><o:p></o:p></span></p><p class=MsoBodyText style='margin-left:.5in'><span lang=EN-GB>Stops execution and returns <b>0</b></span><span lang=EN-GB>.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Here, <i>label</i></span><span lang=EN-GB> and <i>destlabel</i></span><span lang=EN-GB> are positive integers. A <i>n-ary</i></span><span lang=EN-GB> procedure of BITE is a sequence of instructions that expects <b>N</b></span><span lang=EN-GB> bit values on the stack as input, and produces one bit value, as the result of a <b>RET0</b></span><span lang=EN-GB> or <b>RET1</b></span><span lang=EN-GB> instruction. The instructions in the sequence are always labelled in increasing label sequence, and it is known that, for every possible input, the procedures always terminate. The program starts at the instruction with the lowest label.<o:p></o:p></span></p><h2><span lang=EN-GB>Problem<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Write a program that checks whether two BITE procedures compute the same boolean function for any sequence of the values, stored in the stack, provided as input.<o:p></o:p></span></p><h2><a name="_Toc56649666"><span lang=EN-GB>Input</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset.<p>A positive integer <b>P</b> in a single line followed by a sequence of <b>P</b> pairs of BITE procedures. Each pair of BITE procedures is preceded by the number of bits expected in the stack (the arity of the procedures), represented by a positive integer, not greater than 128, in a single line. Next, for each BITE procedure there is a sequence of lines, each one containing a BITE instruction, and terminated by a single line containing </span><span lang=EN-GB style='font-family:"Courier New"'><b>END</b>. Programs do not have more than 10,000 lines of code.<o:p></o:p></span></p><h2><a name="_Toc56649667"><span lang=EN-GB>Output</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>For each dataset, a sequence of lines, the <i>i-th</i></span><span lang=EN-GB> line containing either <b>1</b></span><span lang=EN-GB> or <b>0</b></span><span lang=EN-GB> depending on whether the <i>i&#8209;th</i></span><span lang=EN-GB> pair of BITE procedures in the input compute the same boolean function or not. Print a blank line between datasets.<o:p></o:p></span></p><span lang=EN-GB style='font-size:16.0pt;font-family:"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:EN-US'><b><br clear=ALL style='page-break-before:always'></b></span><h2><a name="_Toc56649668"><span lang=EN-GB>Sample Input</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>&nbsp;<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>10 BRTRUE 30<o:p></o:p></span></p><p class=Code><span lang=EN-GB>20 RET0<o:p></o:p></span></p><p class=Code><span lang=EN-GB>30 BRTRUE 50<o:p></o:p></span></p><p class=Code><span lang=EN-GB>40 RET0<o:p></o:p></span></p><p class=Code><span lang=EN-GB>50 RET1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>END<o:p></o:p></span></p><p class=Code><span lang=EN-GB>20 BRTRUE 50<o:p></o:p></span></p><p class=Code><span lang=EN-GB>30 BRTRUE 40<o:p></o:p></span></p><p class=Code><span lang=EN-GB>40 RET0<o:p></o:p></span></p><p class=Code><span lang=EN-GB>50 BRTRUE 70<o:p></o:p></span></p><p class=Code><span lang=EN-GB>60 JMP 40<o:p></o:p></span></p><p class=Code><span lang=EN-GB>70 RET1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>END<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>10 BRTRUE 30<o:p></o:p></span></p><p class=Code><span lang=EN-GB>20 RET0<o:p></o:p></span></p><p class=Code><span lang=EN-GB>30 RET1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>END<o:p></o:p></span></p><p class=Code><span lang=EN-GB>50 RET0<o:p></o:p></span></p><p class=Code><span lang=EN-GB>END<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><h2><a name="_Toc56649669"><span lang=EN-GB>Sample Output</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>0<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3982||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem B - Prester John"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20B_files/filelist.xml"><title>Problem B - Prester John</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>1</o:TotalTime>  <o:Created>2007-11-16T17:07:00Z</o:Created>  <o:LastSaved>2007-11-16T17:08:00Z</o:LastSaved>  <o:Pages>2</o:Pages>  <o:Words>292</o:Words>  <o:Characters>1665</o:Characters>  <o:Lines>13</o:Lines>  <o:Paragraphs>3</o:Paragraphs>  <o:CharactersWithSpaces>2044</o:CharactersWithSpaces>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776684"><span lang=EN-GB>Problem B - Prester John</span></a><span lang=EN-GB><o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Where was the Kingdom of Prester John? There are many maps showing the way to it, but unfortunately it seems hard to establish a sensible agreement. India? Ethiopia? Mongolia? Syria? PuzzlingÉ Well, what would one expect from the descendant of the Three Wise Men?<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>An idea is to follow the directions in two maps at the same time, and if the directions lead to the same place, we can find Prester. Well, Òinformation technologyÓ may help here. Write a program that, given two medieval maps of the world indicating the location of the Mythical Kingdom, finds the length of the common shortest path to the location where the Prester was seen.<o:p></o:p></span></p><h2><span lang=EN-GB>Problem<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Given two maps, compute the minimum length of a common path to the Prester location.<o:p></o:p></span></p><h2><a name="_Toc56649670"><span lang=EN-GB>Input</span></a><span lang=EN-GB><o:p></o:p></span></h2>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset.<p class=MsoBodyText><span lang=EN-GB>The input for each dataset contains the description of a pair of maps, in sequence. Each map is given by a positive integer <b>L</b></span><span lang=EN-GB>, not greater than 1,000, in a single line, indicating the number of locations in the map. Next, there is an integer in the range <b>[0, L-1]</b></span><span lang=EN-GB> indicating the location, in a single line, where the Prester was seen. Next, there is a positive integer <b>P</b></span><span lang=EN-GB>, not greater than 10,000, in a single line, indicating the number of paths in the description of the map. Then, the description of the map follows. Each path in the map is listed in a separate line, and has the form<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB><i>L1 description L2<o:p></o:p></i></span></p><p class=MsoBodyText><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>where <i>L1</i></span><span lang=EN-GB> and <i>L2</i></span><span lang=EN-GB> are integers in the range <b>[0, L-1]</b></span><span lang=EN-GB> indicating a location, and <i>description</i></span><span lang=EN-GB> is a string with no more than 8 characters, indicating the name of a path from location <i>L1</i></span><span lang=EN-GB> to location <i>L2</i></span><span lang=EN-GB>. It is known that location <b>0</b></span><span lang=EN-GB> represents the same place in all maps.<o:p></o:p></span></p><h2><a name="_Toc56649671"><span lang=EN-GB>Output</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>An integer in a single line indicating the length of the shortest sequence of path descriptions that is common to both maps, and that, in both maps, lead to a location of the Prester. If there is no common path leading to the Prester location, your program should write <b>-1</b></span><span lang=EN-GB> as result. Print a blank line between datasets.<o:p></o:p></span></p><span lang=EN-GB style='font-size:16.0pt;font-family:"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:EN-US'><b><br clear=ALL style='page-break-before:always'></b></span><h2><span lang=EN-GB>Sample Input<o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>&nbsp;<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>0 tunnel 1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1 bridge 1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>3<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>3<o:p></o:p></span></p><p class=Code><span lang=EN-GB>0 tunnel 1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1 bridge 2<o:p></o:p></span></p><p class=Code><span lang=EN-GB>2 river 2<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoNormal style='margin-top:6.0pt'><span lang=EN-GB style='font-size:16.0pt'><b>Sample Output<o:p></o:p></b></span></p><p class=Code><span lang=EN-GB>2<o:p></o:p></span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3983||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem C - Robotruck"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20C_files/filelist.xml"><title>Problem C - Robotruck</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>2</o:Revision>  <o:TotalTime>1</o:TotalTime>  <o:Created>2007-11-16T17:08:00Z</o:Created>  <o:LastSaved>2007-11-16T17:09:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:Wingdings;	panose-1:0 5 2 1 2 1 8 4 8 7;	mso-font-charset:2;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:0 0 256 0 -2147483648 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;} /* List Definitions */@list l0	{mso-list-id:-227;	mso-list-template-ids:-2141005632;}@list l0:level1	{mso-level-number-format:bullet;	mso-level-text:"";	mso-level-tab-stop:0in;	mso-level-number-position:left;	margin-left:0in;	text-indent:0in;	font-family:Symbol;}@list l0:level2	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:.5in;	mso-level-number-position:left;	margin-left:.75in;	text-indent:-.25in;	font-family:Symbol;}@list l0:level3	{mso-level-number-format:bullet;	mso-level-text:o;	mso-level-tab-stop:1.0in;	mso-level-number-position:left;	margin-left:1.25in;	text-indent:-.25in;	font-family:"Courier New";}@list l0:level4	{mso-level-number-format:bullet;	mso-level-text:\F0A7;	mso-level-tab-stop:1.5in;	mso-level-number-position:left;	margin-left:1.75in;	text-indent:-.25in;	font-family:Wingdings;}@list l0:level5	{mso-level-number-format:bullet;	mso-level-text:\F0FA;	mso-level-tab-stop:2.0in;	mso-level-number-position:left;	margin-left:2.25in;	text-indent:-.25in;	font-family:Wingdings;}@list l0:level6	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:2.5in;	mso-level-number-position:left;	margin-left:2.75in;	text-indent:-.25in;	font-family:Symbol;}@list l0:level7	{mso-level-number-format:bullet;	mso-level-text:o;	mso-level-tab-stop:3.0in;	mso-level-number-position:left;	margin-left:3.25in;	text-indent:-.25in;	font-family:"Courier New";}@list l0:level8	{mso-level-number-format:bullet;	mso-level-text:\F0A7;	mso-level-tab-stop:3.5in;	mso-level-number-position:left;	margin-left:3.75in;	text-indent:-.25in;	font-family:Wingdings;}@list l0:level9	{mso-level-number-format:bullet;	mso-level-text:\F0FA;	mso-level-tab-stop:4.0in;	mso-level-number-position:left;	margin-left:4.25in;	text-indent:-.25in;	font-family:Wingdings;}@list l1	{mso-list-id:-132;	mso-list-type:simple;	mso-list-template-ids:352768468;}@list l1:level1	{mso-level-tab-stop:1.25in;	mso-level-number-position:left;	margin-left:1.25in;	text-indent:-.25in;}@list l2	{mso-list-id:-131;	mso-list-type:simple;	mso-list-template-ids:-1770224560;}@list l2:level1	{mso-level-tab-stop:1.0in;	mso-level-number-position:left;	margin-left:1.0in;	text-indent:-.25in;}@list l3	{mso-list-id:-130;	mso-list-type:simple;	mso-list-template-ids:1735047178;}@list l3:level1	{mso-level-tab-stop:.75in;	mso-level-number-position:left;	margin-left:.75in;	text-indent:-.25in;}@list l4	{mso-list-id:-129;	mso-list-type:simple;	mso-list-template-ids:550129718;}@list l5	{mso-list-id:-128;	mso-list-type:simple;	mso-list-template-ids:-952616016;}@list l5:level1	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:1.25in;	mso-level-number-position:left;	margin-left:1.25in;	text-indent:-.25in;	font-family:Symbol;}@list l6	{mso-list-id:-127;	mso-list-type:simple;	mso-list-template-ids:-5354068;}@list l6:level1	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:1.0in;	mso-level-number-position:left;	margin-left:1.0in;	text-indent:-.25in;	font-family:Symbol;}@list l7	{mso-list-id:-126;	mso-list-type:simple;	mso-list-template-ids:1024751372;}@list l7:level1	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:.75in;	mso-level-number-position:left;	margin-left:.75in;	text-indent:-.25in;	font-family:Symbol;}@list l8	{mso-list-id:-125;	mso-list-type:simple;	mso-list-template-ids:-203247186;}@list l8:level1	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:.5in;	mso-level-number-position:left;	text-indent:-.25in;	font-family:Symbol;}@list l9	{mso-list-id:-120;	mso-list-type:simple;	mso-list-template-ids:827344252;}@list l9:level1	{mso-level-tab-stop:.25in;	mso-level-number-position:left;	margin-left:.25in;	text-indent:-.25in;}@list l10	{mso-list-id:-119;	mso-list-type:simple;	mso-list-template-ids:-999105300;}@list l10:level1	{mso-level-number-format:bullet;	mso-level-text:\F0B7;	mso-level-tab-stop:.25in;	mso-level-number-position:left;	margin-left:.25in;	text-indent:-.25in;	font-family:Symbol;}ol	{margin-bottom:0in;}ul	{margin-bottom:0in;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776685"><span lang=EN-GB>Problem C - Robotruck</span></a><span lang=EN-GB><o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>This problem is about a robotic truck that distributes mail packages to several locations in a factory. The robot sits at the end of a conveyer at the mail office and waits for packages to be loaded into its cargo area. The robot has a maximum load capacity, which means that it may have to perform several round trips to complete its task. Provided that the maximum capacity is not exceeded, the robot can stop the conveyer at any time and start a round trip distributing the already collected packages. The packages must be delivered in the incoming order.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>The distance of a round trip is computed in a grid by measuring the number of robot moves from the mail office, at location (0,0), to the location of delivery of the first package, the number of moves between package delivery locations, until the last package, and then the number of moves from the last location back to the mail office. The robot moves a cell at a time either horizontally or vertically in the factory plant grid. For example, consider four packages, to be delivered at the locations (1,2), (1,0), (3,1), and (3,1). By dividing these packages into two round trips of two packages each, the number of moves in the first trip is 3+2+1=6, and 4+0+4=8 in the second trip. Notice that the two last packages are delivered at the same location and thus the number of moves between them is 0.<o:p></o:p></span></p><h2><span lang=EN-GB>Problem<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Given a sequence of packages, compute the minimum distance the robot must travel to deliver all packages.<o:p></o:p></span></p><h2><a name="_Toc56649673"><span lang=EN-GB>Input</span></a></h2><p class=MsoBodyText><span lang=EN-GB>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. The input for each dataset consists of a line containing one positive integer C, not greater then 100, indicating the maximum capacity of the robot, a line containing one positive integer <b>N</b></span><span lang=EN-GB>, not greater than 100,000, which is the number of packages to be loaded from the conveyer. Next, there are <b>N</b></span><span lang=EN-GB> lines containing, for each package, two non-negative integers to indicate its delivery location in the grid, and a positive integer to indicate its weight. The weight of the packages is always smaller than the robotÕs maximum load capacity. The order of the input is the order of appearance in the conveyer. <o:p></o:p></span></p><h2><a name="_Toc56649674"><span lang=EN-GB>Output</span></a></h2><p class=MsoBodyText><span lang=EN-GB>One line containing one integer representing the minimum number of moves the robot must travel to deliver all the packages. Print a blank line between datasets.<o:p></o:p></span></p><h2><span lang=EN-GB>Sample Input </span></h2><p class=Code><span lang=EN-GB>1<o:p></o:p></span></p><p class=Code><span lang=EN-GB>&nbsp;<o:p></o:p></span></p><p class=Code><span lang=EN-GB>10<o:p></o:p></span></p><p class=Code><span lang=EN-GB>4<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1 2 3<o:p></o:p></span></p><p class=Code><span lang=EN-GB>1 0 3<o:p></o:p></span></p><p class=Code><span lang=EN-GB>3 1 4<o:p></o:p></span></p><p class=Code><span lang=EN-GB>3 1 4<o:p></o:p></span></p><h2><a name="_Toc56649676"><span lang=EN-GB>Sample Output</span></a><span lang=EN-GB> </span></h2><p class=Code><span lang=EN-GB>14</span></p></div></body></html>
______________________________________________________
3984||||||false||||||
<html>
<body>
<h1>Problem D - Jumping Hero</h1>
<h2>Background</h2>A software house has decided to create a computer game, where the hero must find its 
way from a start position to the end position, through a labyrinth. In the labyrinth, 
some cells contain magic fountains that can be used to get super-powers an infinite 
number of times. Whenever the hero enters a cell with a magic fountain, he gets 
super-powers.
<p> 
Usually, our hero moves in the labyrinth one cell left/right/up/down at a time (to an 
empty cell). With super-powers, the hero jumps to an empty cell N positions to the 
left/right/up/down. The super-power lasts for M jumps, and the hero can change its 
jumping direction after each jump. A jump is allowed if the end cell of the jump is 
within the map and it is not a wall â thus, the hero can jump over walls. If the hero 
jumps to a cell with a new magic fountain, the hero gets the super-powers of the new 
magic fountain, and the remaining effect of the previous magic fountain is cancelled. 
If the hero jumps to the cell where he obtained its current super-powers, no effect 
occurs (i.e., the hero gets no additional super-powers). When the current super-power 
ends, the hero proceeds its normal one-cell movement. If, after getting super-powers 
in some fountain, the hero cannot move to any cell, he looses his super-powers and 
returns to his previous cell. To reach the end position, the hero must move to the end cell or finish one jump in the end cell. <h2>Problem</h2>Given the labyrinth map compute the minimum number of moves/jumps from the 
start position to the end position. <h2>Input</h2>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. The first line of each dataset contains two positive integers, L and C, separated by a 
empty space, with L the number of lines and C the number of columns in the map. 
L and C are both lesser than 300. The following L lines of the input contain C 
integers each that define the cells of the map (separated by a empty space). Each 
integer, i, must be interpreted as follows: i = 0 represents a wall; i = 1 represents an empty cell (where the hero can move into); i = M*10+N represents an empty cell with a magic fountain that makes the hero jump M times to the cell that is N positions to 
the left/right/up/down of the current cell. M ranges from 1 to 5 and N ranges from 2 
to 6. The maximum number of magic fountains in a map is 5,000. 
The two last lines of the input define the coordinates of the start position and end 
position (coordinates consist of two integers, denoting the line and column 
respectively, starting from 0). 
<h2>Output</h2>The output consists of one single line that contains an integer with the minimum 
number of moves/jumps, from the start position to the end position. If it is impossible 
to reach the end position, the output should be a single line containing <tt>IMPOSSIBLE</tt>. Print a blank line between datasets.<h2>Sample Input</h2><pre>1

8 8 
0 1 1 1 1 1 1 1  
0 1 0 0 1 13 1 1 
0 1 32 1 1 1 0 0 
0 1 1 0 1 1 1 0  
0 1 1 0 0 0 0 0 
0 1 1 1 1 1 1 0 
0 1 0 0 1 1 1 0 
0 1 1 1 1 1 1 0 
1 7 
5 4</pre><h2>Sample Output</h2><pre>14</pre>
</body>
</html>

______________________________________________________
3985||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem E - Board Games "><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20E_files/filelist.xml"><title>Problem E - Board Games </title><!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>0</o:TotalTime>  <o:Created>2007-11-16T17:10:00Z</o:Created>  <o:LastSaved>2007-11-16T17:11:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776687"><span style='mso-ansi-language:EN-US'>Problem E - Board Games</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>You have been hired by the quality control division of a world famous board game company. Their creative and design division comes up, on a daily basis, with great ideas for board games, but sometimes the scoring of the proposed games does not match the storyboard or leads the player to impossible or undesirable situations.<o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>Most of the games this company produces can be described loosely as race games. Race games are games where the players need to go from an initial square to a final square, performing along the way, a series of moves, gaining or losing score points for each of those moves. Moves can be influenced by playerÕs decisions, drawing of cards, rolling of dices, etc..<o:p></o:p></span></p><h2><span lang=EN-GB>Problem<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Your task is to check the description of a given game, stating the lowest possible score, or if it can lead to an infinitely high (thereÕs no way the player can win the game), or to an infinitely low score. <o:p></o:p></span></p><h2><a name="_Toc56649682"><span lang=EN-GB>Input</span></a><span lang=EN-GB> <o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. Each dataset consists of one game description. The first line of the input contains a positive integer <b>N </b></span><span lang=EN-GB>not greater than 300, indicating the number of squares in the game. The second line contains two non-negative integers, <b>I</b></span><span lang=EN-GB> and <b>F</b></span><span lang=EN-GB>, defining the initial and final squares for this game, where <b>I</b></span><span lang=EN-GB> and <b>F</b></span><span lang=EN-GB> are lesser than <b>N</b></span><span lang=EN-GB>. The third line contains an integer <b>M</b></span><span lang=EN-GB>, indicating the number of possible moves of the game. The following <b>M</b></span><span lang=EN-GB> lines describe all the possible moves of the game. Each line, describing one possible move, consists of three integers, respectively, the initial square and final square of the move, in the range <b>[0, N-1]</b></span><span lang=EN-GB>, and the corresponding score.<o:p></o:p></span></p><h2><a name="_Toc56649683"><span style='mso-ansi-language:EN-US'>Output</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>The output for each dataset consists of a single line with an integer, indicating the lowest possible score for the proposed game. If the scores are infinitely high or low then your program should output </span><span lang=EN-GB style='font-family:"Courier New"'><b>infinity</b></span><span lang=EN-GB>. Print a blank line between datasets.<o:p></o:p></span></p><h2><a name="_Toc56649684"><span style='mso-ansi-language:EN-US'>Sample Input 1</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></h2><p class=Code><span style='mso-ansi-language:EN-US'>1<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>&nbsp;<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>4 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 3 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>4 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 1 5 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 2 7 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>2 1 -3 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>1 3 2 <o:p></o:p></span></p><h2><a name="_Toc56649685"><span style='mso-ansi-language:EN-US'>Sample Output 1</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></h2><p class=Code><span lang=EN-GB>6<o:p></o:p></span></p><h2><a name="_Toc56649686"><span style='mso-ansi-language:EN-US'>Sample Input 2</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></h2><p class=Code><span style='mso-ansi-language:EN-US'>4 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 3 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>3 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 1 5 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>0 2 7 <o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>2 1 -3 <o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p><h2><a name="_Toc56649687"><span style='mso-ansi-language:EN-US'>Sample Output 2</span></a><span style='mso-ansi-language:EN-US'> <o:p></o:p></span></h2><p class=Code><span lang=EN-GB>infinity<o:p></o:p></span></p></div></body></html>
______________________________________________________
3986||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem F - The Bridges of Klsberg"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20F_files/filelist.xml"><link rel=Edit-Time-Data href="Problem%20F_files/editdata.mso"><!--[if !mso]><style>v\:* {behavior:url(#default#VML);}o\:* {behavior:url(#default#VML);}w\:* {behavior:url(#default#VML);}.shape {behavior:url(#default#VML);}</style> <![endif]--><title>Problem F - The Bridges of Klsberg</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>1</o:TotalTime>  <o:Created>2007-11-16T17:11:00Z</o:Created>  <o:LastSaved>2007-11-16T17:12:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> <!--[if gte mso 9]><xml> <o:shapedefaults v:ext="edit" spidmax="1060"/></xml><![endif]--><!--[if gte mso 9]><xml> <o:shapelayout v:ext="edit">  <o:idmap v:ext="edit" data="1"/> </o:shapelayout></xml><![endif]--> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776688"><span lang=EN-GB>Problem F - The Bridges of Klsberg</span></a></p><h2><a name="_Toc56649688"><span lang=EN-GB>Background</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>King Beer has a very hard region to rule, consisting of lots of cities with very sectarian operating system beliefs and high levels of trade. These cities are placed along a river, the Klsberg, along its Northern and Southern banks. The cities are economically separated from each other, since the river is wide and dangerous.<o:p></o:p></span></p><p class=MsoBodyText><!--[if gte vml 1]><o:wrapblock><v:group id="_x0000_s1026" style='position:absolute;left:0;text-align:left;margin-left:9.1pt;  margin-top:90.55pt;width:396pt;height:78.4pt;z-index:1' coordorigin="1800,5040" coordsize="7920,1568"><v:shape id="_x0000_s1027" style='position:absolute;left:1800;top:5220;   width:7920;height:626;mso-position-horizontal:absolute;   mso-position-vertical:absolute' coordsize="7920,840" path="m0,390c345,225,690,60,900,30,1110,,1080,150,1260,210,1440,270,1770,390,1980,390,2190,390,2250,210,2520,210,2790,210,3270,300,3600,390,3930,480,4260,690,4500,750,4740,810,4830,810,5040,750,5250,690,5460,480,5760,390,6060,300,6540,150,6840,210,7140,270,7380,660,7560,750,7740,840,7830,795,7920,750e" filled="f"><v:path arrowok="t"/></v:shape><v:shape id="_x0000_s1028" style='position:absolute;left:1800;   top:5751;width:7920;height:677' coordsize="7740,780" path="m0,210c345,105,690,,1080,30,1470,60,1920,330,2340,390,2760,450,3270,390,3600,390,3930,390,4020,330,4320,390,4620,450,5100,780,5400,750,5700,720,5910,300,6120,210,6330,120,6600,150,6660,210,6720,270,6420,510,6480,570,6540,630,6810,600,7020,570,7230,540,7485,465,7740,390e" filled="f"><v:path arrowok="t"/></v:shape><v:shapetype id="_x0000_t23" coordsize="21600,21600" o:spt="23" adj="5400" path="m0,10800qy10800,,21600,10800,10800,21600,,10800xm@0,10800qy10800@2@1,10800,10800@0@0,10800xe"><v:formulas><v:f eqn="val #0"/><v:f eqn="sum width 0 #0"/><v:f eqn="sum height 0 #0"/><v:f eqn="prod @0 2929 10000"/><v:f eqn="sum width 0 @3"/><v:f eqn="sum height 0 @3"/></v:formulas><v:path o:connecttype="custom" o:connectlocs="10800,0;3163,3163;0,10800;3163,18437;10800,21600;18437,18437;21600,10800;18437,3163" textboxrect="3163,3163,18437,18437"/><v:handles><v:h position="#0,center" xrange="0,10800"/></v:handles></v:shapetype><v:shape id="_x0000_s1029" type="#_x0000_t23" style='position:absolute;   left:2340;top:5767;width:180;height:134'/><v:shape id="_x0000_s1030" type="#_x0000_t23" style='position:absolute;   left:3060;top:5776;width:180;height:134'/><v:shape id="_x0000_s1031" type="#_x0000_t23" style='position:absolute;   left:3780;top:5996;width:180;height:134'/><v:shape id="_x0000_s1032" type="#_x0000_t23" style='position:absolute;   left:4680;top:6074;width:180;height:134'/><v:shape id="_x0000_s1033" type="#_x0000_t23" style='position:absolute;   left:5760;top:6045;width:180;height:134'/><v:shape id="_x0000_s1034" type="#_x0000_t23" style='position:absolute;   left:3600;top:5374;width:180;height:134'/><v:shape id="_x0000_s1035" type="#_x0000_t23" style='position:absolute;   left:5040;top:5345;width:180;height:134'/><v:shape id="_x0000_s1036" type="#_x0000_t23" style='position:absolute;   left:6300;top:5661;width:180;height:135'/><v:shape id="_x0000_s1037" type="#_x0000_t23" style='position:absolute;   left:6905;top:5613;width:180;height:134'/><v:shape id="_x0000_s1038" type="#_x0000_t23" style='position:absolute;   left:7560;top:5354;width:180;height:134'/><v:shape id="_x0000_s1039" type="#_x0000_t23" style='position:absolute;   left:6725;top:6284;width:180;height:134'/><v:shape id="_x0000_s1040" type="#_x0000_t23" style='position:absolute;   left:7792;top:6035;width:180;height:134'/><v:shapetype id="_x0000_t202" coordsize="21600,21600" o:spt="202" path="m0,0l0,21600,21600,21600,21600,0xe"><v:stroke joinstyle="miter"/><v:path gradientshapeok="t" o:connecttype="rect"/></v:shapetype><v:shape id="_x0000_s1041" type="#_x0000_t202" style='position:absolute;   left:2058;top:5851;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1041'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Mac<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1042" type="#_x0000_t202" style='position:absolute;   left:3420;top:6120;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1042'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Mac<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1043" type="#_x0000_t202" style='position:absolute;   left:5155;top:5118;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1043'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Mac<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1044" type="#_x0000_t202" style='position:absolute;   left:6211;top:6248;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1044'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Mac<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1045" type="#_x0000_t202" style='position:absolute;   left:7380;top:5040;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1045'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Mac<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1046" type="#_x0000_t202" style='position:absolute;   left:3420;top:5040;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1046'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>OS/2<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1047" type="#_x0000_t202" style='position:absolute;   left:4346;top:6159;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1047'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>OS/2<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1048" type="#_x0000_t202" style='position:absolute;   left:7599;top:6120;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1048'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>OS/2<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1049" type="#_x0000_t202" style='position:absolute;   left:6660;top:5220;width:720;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1049'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>OS/2<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1050" type="#_x0000_t202" style='position:absolute;   left:6068;top:5324;width:900;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1050'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Linux<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1051" type="#_x0000_t202" style='position:absolute;   left:2700;top:5875;width:900;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1051'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Linux<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:shape id="_x0000_s1052" type="#_x0000_t202" style='position:absolute;   left:5426;top:6146;width:900;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1052'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'>Vista<o:p></o:p></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:line id="_x0000_s1053" style='position:absolute;flip:x' from="6903,5480" to="7585,6274" strokeweight="1.5pt"/><v:line id="_x0000_s1054" style='position:absolute;flip:x y' from="7065,5710" to="7797,6080" strokeweight="1.5pt"/><v:line id="_x0000_s1055" style='position:absolute;flip:x' from="7426,5746" to="8576,5760"><v:stroke endarrow="block"/></v:line><v:shape id="_x0000_s1056" type="#_x0000_t202" style='position:absolute;   left:8476;top:5598;width:900;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1056'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'><i>invalid<o:p></o:p></i></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><v:line id="_x0000_s1057" style='position:absolute;flip:x' from="3245,5494" to="3615,5760" strokeweight="1.5pt"/><v:line id="_x0000_s1058" style='position:absolute' from="2842,5521" to="3306,5598"><v:stroke endarrow="block"/></v:line><v:shape id="_x0000_s1059" type="#_x0000_t202" style='position:absolute;   left:2117;top:5305;width:900;height:360' filled="f" stroked="f"><v:textbox style='mso-next-textbox:#_x0000_s1059'><![if !mso]><table cellpadding=0 cellspacing=0 width="100%"><tr><td><![endif]><div><p class=MsoNormal><span lang=PT style='font-size:10.0pt;mso-ansi-language:      PT'><i>invalid<o:p></o:p></i></span></p></div><![if !mso]></td></tr></table><![endif]></v:textbox></v:shape><w:wrap type="topAndBottom"/></v:group><![endif]--><![if !vml]><span style='mso-ignore:vglayout'><table cellpadding=0 cellspacing=0><tr><td width=8 height=0></td></tr><tr><td></td><td><img width=400 height=80 src="http://livearchive.onlinejudge.org/external/39/p3986.png v:shapes="_x0000_s1026 _x0000_s1027 _x0000_s1028 _x0000_s1029 _x0000_s1030 _x0000_s1031 _x0000_s1032 _x0000_s1033 _x0000_s1034 _x0000_s1035 _x0000_s1036 _x0000_s1037 _x0000_s1038 _x0000_s1039 _x0000_s1040 _x0000_s1041 _x0000_s1042 _x0000_s1043 _x0000_s1044 _x0000_s1045 _x0000_s1046 _x0000_s1047 _x0000_s1048 _x0000_s1049 _x0000_s1050 _x0000_s1051 _x0000_s1052 _x0000_s1053 _x0000_s1054 _x0000_s1055 _x0000_s1056 _x0000_s1057 _x0000_s1058 _x0000_s1059"></td></tr></table></span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br style='mso-ignore:vglayout' clear=ALL><p class=MsoBodyText align=left style='margin-top:.25in;margin-right:0in;margin-bottom:6.0pt;margin-left:0in;text-align:left'><span lang=EN-GB style='font-size:10.0pt'><i>A section of the Klsberg showing some <u>invalid</u> bridges<o:p></o:p></i></span></p><span lang=EN-GB>King Beer would like to build some bridges connecting opposite banks of the river.<span style="mso-spacerun: yes">&nbsp; </span>He was strongly advised against making bridges between cities with different operating systems beliefs (those guys really hate each other). So, he is just going to build bridges between cities sharing the same operating system belief (even if the resulting bridges are quite long and strangely shaped). However, it is technical impossible to build bridges that cross other bridges. <o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>The economical value of a bridge is the sum of the trade values the two cities it connects. The King wants to maximize the sum of all possible bridge values while minimizing the number of bridges to build. <o:p></o:p></span></p><h2><a name="_Toc56649689"><span lang=EN-GB>Problem</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Given two sets of cities, return the maximum possible sum of all bridge values and the smallest number of valid bridges necessary to achieve it.<o:p></o:p></span></p><h2><a name="_Toc56649690"><span lang=EN-GB>Input</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>The first line is an integer with the number of samples. For each sample, the next line has a non-negative integer, not greater than 1,000, indicating the number of cities on the Northern riverbank. Then, on each line, comes the city information with the form</span></p><p class=MsoBodyText align=center style='text-align:center'><span lang=EN-GB><i><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></i></span></p><p class=MsoBodyText align=left style='text-align:left'><span lang=EN-GB><i>cityname ostype tradevalue<o:p></o:p></i></span></p><p class=MsoBodyText align=center style='text-align:center'><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p><p class=MsoBodyText><span lang=EN-GB>where, separated by empty spaces, there are two strings, <i>cityname</i></span><span lang=EN-GB> and <i>ostype</i></span><span lang=EN-GB>, with no more than 10 characters each, and <i>tradevalue</i></span><span lang=EN-GB> which is a non-negative integer not greater than 10<sup>6</sup>. The sequence of lines represents the cities from left to right along the riverbank. Next, there is the same kind of information to describe the Southern riverbank.</span></p><h2><a name="_Toc56649691"><span lang=EN-GB>Output</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=MsoBodyText style='margin-top:6.0pt'><span lang=EN-GB>For each sample, a line consisting of the maximum possible sum of all bridge values, one empty space, the number of bridges.</span></p><h2><a name="_Toc56649692"><span lang=EN-GB>Sample Input</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=Code><span lang=EN-GB style='font-size:10.0pt'>1<br>3<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>mordor Vista 1000000<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>xanadu Mac 1000<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>shangrila OS2 400<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>4<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>atlantis Mac 5000<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>hell Vista 1200<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>rivendell OS2 100<o:p></o:p></span></p><p class=Code><span lang=EN-GB style='font-size:10.0pt'>appleTree Mac 50<o:p></o:p></span></p><h2><a name="_Toc56649693"><span lang=EN-GB>Sample Output</span></a><span lang=EN-GB><o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1002250 2</span></p><p class=MsoNormal><span lang=EN-GB><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p></div></body></html>
______________________________________________________
3987||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem G - The Finest Chef"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20G_files/filelist.xml"><title>Problem G - The Finest Chef</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>0</o:TotalTime>  <o:Created>2007-11-16T17:12:00Z</o:Created>  <o:LastSaved>2007-11-16T17:13:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:Arial;	panose-1:0 2 11 6 4 2 2 2 2 2;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776689"><span lang=EN-GB>Problem G - The Finest Chef</span></a><span lang=EN-GB><o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>The World Finest Young Chef Competition welcomes young chefs from around the world. Making resources available for them to work is a very difficult job, because we cannot know, beforehand, what kind of equipment they are going to need. Each chef will be aiming to cook his best dish, but this can involve a stove, a fridge, a freezer, a microwave oven, etc. Each dish will only need one of these equipments once, for a limited period of time, but this period will vary, depending on the equipment used. For example, it is possible that one dish can be accomplished either using a fridge (using 30 minutes of the fridgeÕs time) or a freezer (using only 5 minutes). Moreover, each equipment can only be used by one chef, for the duration of the competition, as after being used, it will need cleaning. </span></p><h2><span lang=EN-GB>Problem</span></h2><p class=MsoBodyText><span lang=EN-GB>The aim is to find, for each chef, an equipment that will suit their dish, minimizing the sum of the cooking times of all of the dishes in competition.</span></p><h2><span lang=EN-GB>Input<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. The input for each dataset begins with a line containing two positive integers to indicate the number of chefs in the competition, not greater than 250, and the number of facilities available to cook, not greater than 350. The next line contains a single integer, the number of lines to be read next. The following lines describe how long one chefÕs dish takes to cook in a specific facility, in the following way: one non-negative integer identifying the chef, one non-negative integer identifying the facility and a third positive integer for the cooking time. It is guarantied that there are enough facilities to cook all dishes.</span></p><h2><span lang=EN-GB>Output<o:p></o:p></span></h2><p class=MsoNormal><span lang=EN-GB>The output for each dataset is one single line, which contains an integer with the sum of the cooking times for all the dishes in the competition. Print a blank line between datasets.</span></p><h2><span lang=EN-GB>Sample input<o:p></o:p></span></h2><p class=Code><span lang=EN-GB>2</span></p><p class=Code><span lang=EN-GB>&nbsp;</span></p><p class=Code><span lang=EN-GB>4 5</span></p><p class=Code><span lang=EN-GB>9</span></p><p class=Code><span lang=EN-GB>0 2 5</span></p><p class=Code><span lang=EN-GB>0 3 3</span></p><p class=Code><span lang=EN-GB>1 1 20</span></p><p class=Code><span lang=EN-GB>1 4 10</span></p><p class=Code><span lang=EN-GB>2 1 25</span></p><p class=Code><span lang=EN-GB>2 4 30</span></p><p class=Code><span lang=EN-GB>3 0 2</span></p><p class=Code><span lang=EN-GB>3 2 10</span></p><p class=Code><span lang=EN-GB>3 3 12</span></p><p class=Code><span lang=EN-GB>&nbsp;</span></p><p class=Code><span lang=EN-GB>3 3</span></p><p class=Code><span lang=EN-GB>9</span></p><p class=Code><span lang=EN-GB>0 0 3</span></p><p class=Code><span lang=EN-GB>0 1 2</span></p><p class=Code><span lang=EN-GB>0 2 1</span></p><p class=Code><span lang=EN-GB>1 0 1</span></p><p class=Code><span lang=EN-GB>1 1 7</span></p><p class=Code><span lang=EN-GB>1 2 9</span></p><p class=Code><span lang=EN-GB>2 0 3</span></p><p class=Code><span lang=EN-GB>2 1 7</span></p><p class=Code><span lang=EN-GB>2 2 5</span></p><h2><span lang=EN-GB>Sample output<o:p></o:p></span></h2><p class=Code><span lang=EN-GB>40<o:p></o:p></span></p><p class=Code><span lang=EN-GB>&nbsp;<o:p></o:p></span></p><p class=Code><span lang=EN-GB>8<o:p></o:p></span></p></div></body></html>
______________________________________________________
3988||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem H - IP-TV"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20H_files/filelist.xml"><title>Problem H - IP-TV</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>0</o:TotalTime>  <o:Created>2007-11-16T17:13:00Z</o:Created>  <o:LastSaved>2007-11-16T17:13:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776690"><span style='mso-ansi-language:EN-US'>Problem H - IP-TV</span></a><span style='mso-ansi-language:EN-US'><o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Background<o:p></o:p></span></h2><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>A consortium of European Internet providers manages a large backbone network, with direct links (connections) between a large number of European cities. A link between a pair of cities is bidirectional. The transmission of a message in a link has an associated cost.&nbsp;As it is common in the Internet, it is possible to use a (unbounded) sequence of direct links to indirectly transfer data between any pair of cities.<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>For allowing the broadcast of TV programs using this backbone, it is necessary to continuously send data to all nodes in the network. For helping to minimize costs, it is necessary to select the network links that will be used for transmitting data. The set of selected links must be connected and include all nodes in the network.<o:p></o:p></span></p><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>For helping the consortium to manage its network, you have been asked to create a program that computes the minimum cost for transmitting data to all cities of the backbone.<o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Problem<o:p></o:p></span></h2><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>Given a set of network links, compute the minimum transmission cost for reaching all nodes.<o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Input<o:p></o:p></span></h2><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. The first line of each dataset contains a positive integer <b>M</b></span><span style='mso-ansi-language:EN-US'>, not greater than 2,000, with the number of cities that have network connections. The second line contains an integer <b>N</b></span><span style='mso-ansi-language:EN-US'> not greater than 50,000, with the number of existing links. Each of the following <b>N</b></span><span style='mso-ansi-language:EN-US'> lines contains the representation of a link. Each line contains two strings and one integer, separated by empty spaces, <b>B</b></span><span style='mso-ansi-language:EN-US'> <b>E</b></span><span style='mso-ansi-language:EN-US'> <b>C</b></span><span style='mso-ansi-language:EN-US'>, where <b>B</b></span><span style='mso-ansi-language:EN-US'> and <b>E</b></span><span style='mso-ansi-language:EN-US'> are the city names of the endpoints of the network link, with no more than 8 characters, and <b>C</b></span><span style='mso-ansi-language:EN-US'> is a positive integer, not greater than 30, representing the cost of transmitting in the link.<o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Output<o:p></o:p></span></h2><p class=MsoBodyText><span style='mso-ansi-language:EN-US'>The output consists of one single line that contains an integer with the minimum transmission cost for sending data to all cities. Print a blank line between datasets.<o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Sample Input<o:p></o:p></span></h2><p class=Code><span style='mso-ansi-language:EN-US'>1<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>&nbsp;<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>4<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>5<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>lisbon london 6<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>lisbon paris 5<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>london paris 1<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>london berlin 2<o:p></o:p></span></p><p class=Code><span style='mso-ansi-language:EN-US'>paris berlin 10<o:p></o:p></span></p><h2><span style='mso-ansi-language:EN-US'>Sample Output<o:p></o:p></span></h2><p class=Code><span style='mso-ansi-language:EN-US'>8<o:p></o:p></span></p><p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p></div></body></html>
______________________________________________________
3989||||||false||||||
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta name=Title content="Problem I &#8211; LadiesÕ Choice"><meta http-equiv=Content-Type content="text/html; charset=macintosh"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="Problem%20I_files/filelist.xml"><title>Problem I &#8211; LadiesÕ Choice</title> <!--[if gte mso 9]><xml> <o:DocumentProperties>  <o:Author>Office 2004 Test Drive User</o:Author>  <o:Template>Normal</o:Template>  <o:LastAuthor>Office 2004 Test Drive User</o:LastAuthor>  <o:Revision>1</o:Revision>  <o:TotalTime>1</o:TotalTime>  <o:Created>2007-11-16T17:13:00Z</o:Created>  <o:LastSaved>2007-11-16T17:14:00Z</o:LastSaved>  <o:Pages>1</o:Pages>  <o:Lines>1</o:Lines>  <o:Paragraphs>1</o:Paragraphs>  <o:Version>11.773</o:Version> </o:DocumentProperties> <o:OfficeDocumentSettings>  <o:AllowPNG/> </o:OfficeDocumentSettings></xml><![endif]--><!--[if gte mso 9]><xml> <w:WordDocument>  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>  <w:UseMarginsForDrawingGridOrigin/> </w:WordDocument></xml><![endif]--> <style><!-- /* Font Definitions */@font-face	{font-family:"Times New Roman";	panose-1:0 2 2 6 3 5 4 5 2 3;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;}@font-face	{font-family:"Courier New";	panose-1:0 2 7 3 9 2 2 5 2 4;	mso-font-charset:0;	mso-generic-font-family:auto;	mso-font-pitch:variable;	mso-font-signature:50331648 0 0 0 1 0;} /* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal	{mso-style-parent:"";	margin:0in;	margin-bottom:.0001pt;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}h2	{mso-style-next:Normal;	margin-top:6.0pt;	margin-right:0in;	margin-bottom:6.0pt;	margin-left:0in;	mso-pagination:widow-orphan;	mso-outline-level:2;	font-size:16.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}p.MsoTitle, li.MsoTitle, div.MsoTitle	{margin-top:.25in;	margin-right:0in;	margin-bottom:24.0pt;	margin-left:0in;	text-align:center;	mso-pagination:widow-orphan;	font-size:20.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;	font-weight:bold;}p.MsoBodyText, li.MsoBodyText, div.MsoBodyText	{margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Times New Roman";	mso-ansi-language:EN-GB;}table.MsoNormalTable	{mso-style-parent:"";	font-size:10.0pt;	font-family:"Times New Roman";}p.Code, li.Code, div.Code	{mso-style-name:Code;	mso-style-parent:"Body Text";	mso-style-next:Normal;	margin:0in;	margin-bottom:.0001pt;	text-align:justify;	mso-pagination:widow-orphan;	font-size:12.0pt;	font-family:"Courier New";	mso-ansi-language:EN-GB;	font-weight:bold;}@page Section1	{size:595.0pt 842.0pt;	margin:1.0in 1.25in 1.0in 1.25in;	mso-header-margin:.5in;	mso-footer-margin:.5in;	mso-paper-source:0;}div.Section1	{page:Section1;}--></style> </head><body bgcolor=white lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoTitle><a name="_Toc56776691"><span lang=EN-GB>Problem I &#8211; LadiesÕ Choice</span></a><span lang=EN-GB><o:p></o:p></span></p><h2><span lang=EN-GB>Background<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Teenagers from the local high school have asked you to help them with the organization of next yearÕs Prom. The idea is to find a suitable date for everyone in the class in a fair and civilized way. So, they have organized a web site where all students, boys and girls, state their preferences among the class members, by ordering all the possible candidates. Your mission is to keep everyone as happy as possible. Assume that there are equal numbers of boys and girls.<o:p></o:p></span></p><h2><span lang=EN-GB>Problem<o:p></o:p></span></h2><p class=MsoNormal style='text-align:justify'><span lang=EN-GB>Given a set of preferences, set up the blind dates such that there are no other two people of opposite sex who would both rather have each other than their current partners. Since it was decided that the Prom was Ladies' Choice, we want to produce the best possible choice for the girls.<o:p></o:p></span></p><h2><span lang=EN-GB>Input<o:p></o:p></span></h2><p class=MsoBodyText><span lang=EN-GB>Input consists of multiple test cases the first line of the input contains the number of test cases. There is a blank line before each dataset. The input for each dataset consists of a positive integer <b>N</b></span><span lang=EN-GB>, not greater than 1,000, indicating the number of couples in the class. Next, there are <b>N</b></span><span lang=EN-GB> lines, each one containing the all the integers from 1 to <b>N</b></span><span lang=EN-GB>, ordered according to the girlÕs preferences. Next, there are <b>N</b></span><span lang=EN-GB> lines, each one containing all the integers from 1 to <b>N</b></span><span lang=EN-GB>, ordered according to the boyÕs preferences.<o:p></o:p></span></p><h2><span lang=EN-GB>Output<o:p></o:p></span></h2><p class=MsoNormal><span lang=EN-GB>The output for each dataset consists of a sequence of <b>N</b></span><span lang=EN-GB> lines, where the <i>i-th</i></span><span lang=EN-GB> line contains the number of the boy assigned to the <i>i-th</i></span><span lang=EN-GB> girl (from 1 to <b>N</b></span><span lang=EN-GB>). Print a blank line between datasets.<o:p></o:p></span></p><h2><span lang=EN-GB>Sample Input<o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1</span></p><p class=Code><span lang=EN-GB>&nbsp;</span></p><p class=Code><span lang=EN-GB>5</span></p><p class=Code><span lang=EN-GB>1 2 3 5 4</span></p><p class=Code><span lang=EN-GB>5 2 4 3 1</span></p><p class=Code><span lang=EN-GB>3 5 1 2 4</span></p><p class=Code><span lang=EN-GB>3 4 2 1 5</span></p><p class=Code><span lang=EN-GB>4 5 1 2 3</span></p><p class=Code><span lang=EN-GB>2 5 4 1 3</span></p><p class=Code><span lang=EN-GB>3 2 4 1 5</span></p><p class=Code><span lang=EN-GB>1 2 4 3 5</span></p><p class=Code><span lang=EN-GB>4 1 2 5 3</span></p><p class=Code><span lang=EN-GB>5 3 2 4 1<o:p></o:p></span></p><h2><span lang=EN-GB>Sample Output<o:p></o:p></span></h2><p class=Code><span lang=EN-GB>1</span></p><p class=Code><span lang=EN-GB>2</span></p><p class=Code><span lang=EN-GB>5</span></p><p class=Code><span lang=EN-GB>3</span></p><p class=Code><span lang=EN-GB>4</span></p></div></body></html>
______________________________________________________
3990||||||false||||||
<body><h1 style="text-align: center;">Problem A -- Toy Cube<br></h1><p>My kid loves to play with this toy cube. The cube consists of 6 faces, each of them divided into a 3x3 grid (9 cells). Each cell is painted one of the six possible colors (RGBYWO). My kid loves his cube a lot, but he has lost it. He is asleep now and I want to surprise him by giving him back a cube that is identical to his own. Two cubes are said to be identical if the second one can be rotated to exactly resemble the first when viewed from any angle. Having said that, the trouble now is that I have a cube that might not really be identical to his. But before he wakes up, I want to repaint some of the cells of the cube to match his own. Can you tell me the minimal number of cells I need to repaint?</p><p><b>Input Format</b>:<br>The first line contains the number of testcases.<br>Each test case consists of two cube descriptions, one followed by the other.<br>Each cube description consists of exactly 10 lines; the 10 th line is empty.<br>The first three lines describe the TOP face, the next three describing the faces in LEFT, FRONT, RIGHT, BACK face order, and the next three lines describe the BOTTOM face. The cube is described as if the outer paper was cut and rolled out. If you stick the leftmost column of the LEFT face with the rightmost column of the RIGHT face, and stick the topmost row of the TOP face with the bottom-most row of the BOTTOM face, you get the cube. Follow the sample input for more clarity.<br></p><p><b>Output Format</b>:<br>For each test case, print "Case #&lt;case-number&gt;:" (sans quotes) followed by the minimal number of cells to be repainted to match the two cubes.</p><p><b>Sample Input</b>:<br></p><pre>2<img title="First sample input illustration"

 alt="First sample input illustration" src="http://livearchive.onlinejudge.org/external/39/p3990.jpg

 style="width: 202px; height: 214px;" align="right" hspace="400"><br>      W W W<br>      W W W<br>      W W W<br>R R R G G G B B B Y Y Y<br>R R R G G G B B B Y Y Y<br>R R R G G G B B B Y Y Y<br>      O O O<br>      O O O<br>      O O O<br><br>      Y Y Y<br>      Y Y Y<br>      Y Y Y<br>W W W B B B O O O R R R<br>W W W B B B O O O R R R<br>W W W B B B O O O R R R<br>      G G G<br>      G G G<br>      G G G<br><br>      O G G<br>      R O Y<br>      B Y Y<br>O O W B O O Y R Y B B O<br>W O W G Y G R B Y O R O<br>R R W O G B W W Y R Y W<br>      B Y G<br>      O W O<br>      B W Y<br><br>      O B B<br>      G Y O<br>      B G O<br>B Y G W R Y Y Y B W W W<br>O W O W B R Y O R O O R<br>B W Y Y Y Y G G O O W R<br>      R O B<br>      Y R R<br>      W O O<br><br></pre><p></p><p><b>Sample Output</b>:<br></p><pre>Case #1: 0<br>Case #2: 2<br></pre><p></p></body>
______________________________________________________
3991||||||false||||||
<div class="p"></div>You work for an insurance company and your group handles the saving and archiving of all customer correspondence. Each piece of correspondence (letter, FAX, e-mail message, etc.) is scanned and/or saved into a scanning system that archives the document into a database. Because your company has so many saved documents, an index of saved documents was created to find each document quickly.<div class="p"></div>The layout of the index file is as follows. Fields are separated from each other by single colons, lines are separated by newline characters, and the file is stored as simple text.<div class="p"></div>&lt; Document ID &gt; : &lt; Document Type &gt; : &lt; Participant ID &gt; : &lt; Size of document in bytes &gt; : &lt; Saved Date &gt;<div class="p"></div>Where:<div class="p"></div>&lt; Document ID &gt; = a 15 digit number (possibly including leading zeroes)<div class="p"></div>&lt; Document Type &gt; = a 3 digit number representing the type of document (possibly including leading zeroes)<div class="p"></div>&lt; Participant ID &gt; = a 9 digit number to identify the participant (possibly including leading zeroes)<div class="p"></div>&lt; Size of document in bytes &gt; = size of the document in bytes, with a maximum size of 100,000 bytes<div class="p"></div>&lt; Saved Date &gt; = date document was saved in the database, in the following format: <i>dd-mm-yyyy,</i> where <i>dd</i> is 01-31, <i>mm</i> is 01-12, and <i>yyyy</i> is a four-digit year<div class="p"></div>It is possible for the same document to be scanned multiple times; therefore a given Document ID may appear more than once in the index. Each such instance is to be treated as a separate document.<div class="p"></div>Your team is to write a program to read this index file from standard input and produce a summary report containing the the number of documents of each Document Type per Participant ID.  There will be no more than 1000 lines in the index.<div class="p"></div>The report is to contain one line per Participant ID and Document Type. Each line is to contain the Participant ID, a single space, the Document Type, a single space, and the number of documents. There should be no leading or trailing whitespace. The Participant ID and Document Type are to appear as they do in the input. The number of documents is to be printed as an unsigned integer without leading zeroes. The report is to be sorted by Participant ID in ascending order, and within Participant ID by Document Type in ascending order.<br><br /><br /><table align="center" border="0"><tr><td><i>Sample Input</i></td></tr></table><tt><br />&nbsp;765543897654321:019:887341154:54389:05-07-2007<br>&nbsp;817264098334611:188:899123345:76555:01-01-2006<br>&nbsp;234871243098738:019:887341154:77489:02-05-2007<br>&nbsp;282349823498234:288:887341154:98344:02-09-2007<br><br /><br /></tt><table align="center" border="0"><tr><td><i>Output for the Sample Input</i></td></tr></table><tt><br />&nbsp;887341154 019 2<br>&nbsp;887341154 288 1<br>&nbsp;899123345 188 1<br></tt><div class="p"></div><div class="p"></div></font>
______________________________________________________
3992||||||false||||||
<div class="p"></div>The various departments of Swamp County College are working on their instructor schedules for the upcoming semester. As part of this planning process, the college administrators want to make sure that the instructor assignments for class days and times are spread equitably among the faculty. The college has the instructor and course section data for the past several semesters, and the administrators want to be able to query this information to see which instructors have taught on given days or times.<div class="p"></div>The past course section data are in a file named <i>sections.csv</i> with one course section per line. Each line consists of a number of fields, with the field values separated from each other by commas. The fields appear in the following order:<div class="p"></div><dl><dd><br /><i>Term:</i> A string consisting of "Fall" or "Sprng" followed by a single space and the four-digit year<div class="p"></div><i>Class Num:</i> The number of the course, an unsigned integer in the range 1-99999<div class="p"></div><i>Class Section Cd:</i> The section number for this class, an unsigned integer in the range 1-99999<div class="p"></div><i>Mon, Tue, Wed, Thu, Fri, Sat, Sun:</i> Days when the class meets (Y or N for each day of the week)<div class="p"></div><i>Meeting Time Start:</i> Time of day when the class starts, as hh:mm AM/PM<div class="p"></div><i>Meeting Time End:</i> Time of day when the class ends, as hh:mm AM/PM<div class="p"></div><i>Instructor ID:</i> Instructor's employee ID (nine digit unsigned integer, may include leading zeroes)<div class="p"></div><br /></dd></dl>It is possible for the same class to have multiple instructors assigned. Each instructor receives credit for teaching during the specified times. Instructors do not teach multiple classes concurrently, nor do any instructor class times overlap-there are therefore no duplicate entries in the <i>sections.csv</i> file.<div class="p"></div>Your team has been asked to write a utility that administrators can use to query this data. Each query will appear on a separate line of not more than 80 columns. Elements within a query are separated from each other by one or more spaces. Queries contain three parts: a function, a range limit, and a day/time range specification.<div class="p"></div>The function will be "LIST" (list the IDs of the instructors that meet the selection criteria) or "COUNT" (count the instructors that meet the selection criteria). Any requested list is to be produced in ascending instructor ID order.<div class="p"></div>The limit will be "ANY", "ALL", or an inequality character ( &lt; or &gt; ) immediately followed by a percentage. "ANY" means that the instructor is selected if any of the time he or she spent teaching (in any term) falls in the desired range. "ALL" means that the instructor is selected if all the time he or she spent teaching in all terms falls in the desired range. A less than or greater than sign followed by a percentage means that the instructor is selected if less (or more) than the specified percentage of the instructor's total time spent teaching in all terms falls in the desired range.<div class="p"></div>The day/time range specification will contain a day list, a time specification, or both. A day list begins with the word "ON", followed by an optional "NOT" and one or more days of the week in any order. The days of the week are represented by their three letter abbreviations: "MON", "TUE", "WED", "THU", "FRI", "SAT", and "SUN". The selection criteria then include (or exclude, if "NOT" is specified) the given days of the week. No weekday will appear more than once in a given query.<div class="p"></div>The time specification will contain the word "BEFORE" or "AFTER" followed by a time (hh:mm) followed by "AM" or "PM". The selection criteria then include all time spent teaching before or after the specified time (inclusive). Note that a "NOT" in the query only affects the day list, not the time specification.<div class="p"></div>Here are descriptions of the queries in the sample input:<div class="p"></div><dl><dd><br /><tt>LIST ANY ON SAT</tt><div class="p"></div>List the instructors who taught at any time on Saturday.<div class="p"></div><br /><tt>COUNT ALL ON NOT FRI SAT SUN</tt><div class="p"></div>Count the number of instructors who did not teach at any time on Friday, Saturday, or Sunday.<div class="p"></div><br /><tt>LIST &#62;75% ON TUE THU&nbsp;&nbsp;AFTER 7:00 PM</tt><div class="p"></div>List the instructors who taught 75% or more of their total teaching time on Tuesdays and/or Thursdays at 7 PM or later.<div class="p"></div><br /><tt>COUNT ALL BEFORE 11:30 AM</tt><div class="p"></div>Count the number of instructors whose classes always finished no later than 11:30 AM.<div class="p"></div><br /><tt>LIST ALL ON SUN</tt><div class="p"></div>List the instructors who only taught on Sunday.<div class="p"></div><br /></dd></dl>A sample <i>sections.csv</i> file is available with the "getdata" command. <i>sections.csv</i> will be available to your submission in your execution current working directory. The judges' version of <i>sections.csv</i> may differ from the sample version. There will no more than 10 terms in the file, and there will be no more than 3,000 course sections in any given term.<div class="p"></div>Your program is to echo each query as it appears in the input on a separate line, followed by the result of the query. Lists should appear in instructor ID order, one instructor ID per line, beginning in the first column without trailing whitespace. Counts should appear as unsigned integers beginning in the first column without trailing whitespace. Print an empty line after the results of each query (including the last). Should a list query return no results, print a line with the message "No instructors found." as the result.<br /><br /><table align="center" border="0"><tr><td><i>Sample Input</i></td></tr></table><tt><br />&nbsp;LIST ANY ON SAT<br>&nbsp;COUNT ALL ON NOT FRI SAT SUN<br>&nbsp;LIST &#62;75% ON TUE THU AFTER 7:00 PM<br>&nbsp;COUNT ALL BEFORE 11:30 AM<br>&nbsp;LIST ALL ON SUN<br></tt><div class="p"></div><table align="center" border="0"><tr><td><i>Output for the Sample Input</i></td></tr></table><tt><br />&nbsp;LIST ANY ON SAT<br>&nbsp;000002925<br>&nbsp;000005499<br>&nbsp;000012103<br>&nbsp;000014547<br>&nbsp;000014976<br>&nbsp;000018148<br>&nbsp;000021814<br>&nbsp;000022321<br>&nbsp;000027885<br>&nbsp;000760180<br>&nbsp;001650797<br>&nbsp;002174437<br>&nbsp;002403107<br>&nbsp;<br>&nbsp;COUNT ALL ON NOT FRI SAT SUN<br>&nbsp;499<br>&nbsp;<br>&nbsp;LIST &#62;75% ON TUE THU&nbsp;&nbsp;AFTER 7:00 PM<br>&nbsp;000002587<br>&nbsp;000004069<br>&nbsp;000020488<br>&nbsp;000027326<br>&nbsp;000032786<br>&nbsp;000063796<br>&nbsp;000480342<br>&nbsp;000551088<br>&nbsp;002144680<br>&nbsp;002397582<br>&nbsp;002486840<br>&nbsp;<br>&nbsp;COUNT ALL BEFORE 11:30 AM<br>&nbsp;25<br>&nbsp;<br>&nbsp;LIST ALL ON SUN<br>&nbsp;No instructors found.<br>&nbsp;<br></tt><div class="p"></div><div class="p"></div></font>
______________________________________________________
3993||||||false||||||
<div class="p"><!----></div>
                          With the explosion of Internet access and commerce over the past
decade, there has been a huge demand for organization domain names.
Several words are often strung together to form a second-level domain
name (the name to the left of the top-level .edu, .com, .org,
<font face="symbol">¼</font
> domain).  Names are limited to 63 characters, and although
hyphens are allowed, most domain name owners avoid them so the names
are shorter and easier to type.  However, since domain names are
case-insensitive, alternate readings of such names are sometimes
possible, and there have been occasional cases where an alternate
reading was embarassing for the domain owner.  This has happened even
when the name was not initially seen as a word sequence strung
together.

<div class="p"><!----></div>
Your team has been commissioned to develop a program that will take
suggested domain names and compare them against the words in a
dictionary.  The program is to determine if a domain name can be
split entirely into words that exist in the dictionary, and make
particular note if such a split includes "questionable" words.  The
potential domain owner can then decide if (s)he wants to change the
name, perhaps by inserting hyphens at desired points or even
rewording the name entirely.  Note that a domain owner is interested in every
possible word split, regardless of whether or not the result makes
sense as a phrase.

<div class="p"><!----></div>
Input to your program will be in two sections.  The first section
contains the word dictionary, one word per line.  
Any word that is considered "questionable" 
will be listed with a question mark in the first column.  Words that are not
questionable will have a space in the first column.
Each word in the dictionary will
appear in lower case (letters a-z) starting in
the second column.  Variations of a word (such
as "run," "runs," and "runner") will be listed separately.  
Words will each be unique and will appear in no
particular order.  No word is longer than 32 characters.  The word
list could contain up to 20,000 words.  The dictionary will end with
an empty line.

<div class="p"><!----></div>
The remaining input will be a list of proposed second-level domain
names in all lower case, one per line, each starting in the first
column.  This list will end with the end-of-file.

<div class="p"><!----></div>
For each proposed second-level domain name, your program is to print
a list of all the possible word sequences that make up the domain
name.  The proposed name should appear on a line
by itself, starting in the first column, immediately followed by a
colon.  The word sequences should appear in alphabetical (ASCII)
order, one per line.  If a given word sequence contains a
questionable word, the first column is to contain a question mark; if
no word in the sequence is questionable, the first column is to
contain a space.  The word sequence is to be printed starting in the
second column, with hyphens separating the words from each other.

<div class="p"><!----></div>
If a given domain name cannot be split into a sequence of dictionary
words, print an exclamation mark in the first column, followed by the
message "No word sequence found." starting in the second column.

<div class="p"><!----></div>
No output line is to include trailing whitespace.

<div class="p"><!----></div>
Print an empty line after the results for each domain name (including
the last).
 
<div class="p"><!----></div>
<br />
<table align="center" border="0"><tr><td>
<i>Sample Input</i></td></tr></table><!--hboxt-->
<tt><br />
&nbsp;&nbsp;word<br>
&nbsp;&nbsp;words<br>
&nbsp;&nbsp;together<br>
&nbsp;&nbsp;and<br>
&nbsp;&nbsp;a<br>
&nbsp;?darn<br>
&nbsp;?swear<br>
&nbsp;&nbsp;strung<br>
&nbsp;&nbsp;the<br>
&nbsp;&nbsp;an<br>
&nbsp;&nbsp;wear<br>
&nbsp;&nbsp;boys<br>
&nbsp;&nbsp;boy<br>
&nbsp;<br>
&nbsp;wordsstrungtogether<br>
&nbsp;boyswear<br>
&nbsp;notindictionary<br>
</tt><br /><br />

<table align="center" border="0"><tr><td>
<i>Output for the Sample Input</i></td></tr></table><!--hboxt-->
<tt><br />
&nbsp;wordsstrungtogether:<br>
&nbsp;&nbsp;words-strung-together<br>
&nbsp;<br>
&nbsp;boyswear:<br>
&nbsp;?boy-swear<br>
&nbsp;&nbsp;boys-wear<br>
&nbsp;<br>
&nbsp;notindictionary:<br>
&nbsp;!No word sequence found.<br>
</tt>
<div class="p"><!----></div>

<div class="p"><!----></div>
</font>


______________________________________________________
3994||||||false||||||
<div class="p"></div>Swamp County has historically poor transportation infrastructure, and many residents lack automobiles. Public transportation serving Swamp County is incomplete and often inconvenient. As a result, citizens have been forced to improvise unique combinations of transportation to get where they need to go. Locals call this off-beat tradition "Swamp Trompin'."<div class="p"></div>For example, the daily routine of one inventive resident consists of: biking from home to the edge of nearby Lake Swampy, standing on a log and poling across the shallow lake, hiking to the bus stop on Bog Street and waiting for the Route 32 bus, riding that bus to the Crayfish Avenue stop, waiting there for the Dragonfly Trolley, riding the trolley to the Broken Oak Street stop, cutting through the Broken Oak Bait and Feed shopping mall, roller-blading from the mall parking lot across the traffic intersection crosswalk at Weeping Willow Lane, and finally arriving at work with eight minutes to spare.<div class="p"></div>Given an origin, a destination, a needed arrival time, and a list of available route segments, your team is to develop a program that will find a route that allows the traveler to start at the latest possible time and still reach the destination by the needed arrival time.<div class="p"></div>Input to your program will begin with three lines containing the name of the origin, the name of the destination, and the needed arrival time in that order. Each of these values will begin in the first column and will not contain trailing whitespace.<div class="p"></div>The remaining input will be a list of route segments. Each route segment consists of an action description, a start point name, end point name, an integer traversal time in minutes, and an availability specification that describes the times at which that segment may be used. The availability specification consists a start time and end time (both inclusive), and an integer number of minutes indicating the interval between possible departures. All fields are separated by commas. All times are written as HH:MM in a 24-hour format. For example, if a bus's availability is "09:00,12:00,40" that means that the bus departs the segment starting point at 09:00, 09:40, 10:20, 11:00, and 11:40. An interval value of 1 is used for all pedestrian segments to indicate that the traveler may start walking at any minute of the day. The input will contain between 1 and 100 route segments and is terminated by end-of-file. Route segments may appear in any order.<div class="p"></div>You may assume that the traveler has enough money to pay for any fares, and that he or she carries any equipment needed for any route segment (e.g., a bicycle) and can use it without delay (e.g., no time is needed to put on roller-blades). The shortest duration needed to traverse any segment is 1 minute. The traveler may wait at any location for any number of minutes. Buses and other public transportation always run on time, are never full, and follow the same schedule every day. All traveling takes place between the hours of 6 AM and noon. Availability specifications may cover any time of day, but times do not span midnight.<div class="p"></div>Your program should print step-by-step directions giving the start time of each action, as shown in the sample output. Times are to be printed in the same format as used in the input. Waiting time is implied-do not print waiting time in the directions. The last step should be the time of arrival at the destination. If there is no way for the traveler to begin at 6 AM or later and reach the destination by the needed arrival time, your program should print "Just stay home". If there are multiple routes that require the traveler to begin at the same time, print the route that reaches the destination soonest. If there are multiple routes that start and end at the same times, print any one of them.<br><div class="p"></div><table align="center" border="0"><tr><td><i>Sample Input</i></td></tr></table><tt><br />&nbsp;Home<br>&nbsp;Work<br>&nbsp;10:00<br>&nbsp;Bike,Home,Lake Swampy East Shore,15,00:00,23:59,1<br>&nbsp;Push a log,Lake Swampy East Shore,Lake Swampy West Shore,6,00:00,11:59,1<br>&nbsp;Push a log,Lake Swampy West Shore,Lake Swampy East Shore,8,00:00,11:59,1<br>&nbsp;Hike,Lake Swampy West Shore,Bog Street,19,00:00,23:59,1<br>&nbsp;Ride Route 32 Bus,Gater Gully,Bog Street,15,06:30,18:15,20<br>&nbsp;Ride Route 32 Bus,Bog Street,Crayfish Avenue,10,06:45,18:15,20<br>&nbsp;Ride Dragonfly Trolley,Crayfish Avenue,Broken Oak Street,12,08:00,18:00,30<br>&nbsp;Ride Dragonfly Trolley,Broken Oak Street,Motorsport arena,23,08:12,17:12,30<br>&nbsp;Mall Walk,Broken Oak Street,Parking lot,5,09:00,18:00,1<br>&nbsp;Roller-blade across crosswalk,Parking lot,Weeping Willow Lane,1,00:00,23:59,2<br>&nbsp;Walk,Weeping Willow Lane,Work,3,00:00,23:59,1<br>&nbsp;Hike,Home,Work,240,00:00,23:59,1<br>&nbsp;Roller-blade,Home,Work,300,00:00,23:59,1<br></tt><br /><br /><table align="center" border="0"><tr><td><i>Output for the Sample Input</i></td></tr></table><tt><br />&nbsp;08:25 Bike from Home to Lake Swampy East Shore<br>&nbsp;08:40 Push a log from Lake Swampy East Shore to Lake Swampy West Shore<br>&nbsp;08:46 Hike from Lake Swampy West Shore to Bog Street<br>&nbsp;09:05 Ride Route 32 Bus from Bog Street to Crayfish Avenue<br>&nbsp;09:30 Ride Dragonfly Trolley from Crayfish Avenue to Broken Oak Street<br>&nbsp;09:42 Mall Walk from Broken Oak Street to Parking lot<br>&nbsp;09:48 Roller-blade across crosswalk from Parking lot to Weeping Willow Lane<br>&nbsp;09:49 Walk from Weeping Willow Lane to Work<br>&nbsp;09:52 Arrive at Work<br></tt><div class="p"></div><div class="p"></div></font>
______________________________________________________
3995||||||false||||||

<P>
You're given an unlimited number of pebbles to distribute across an <!-- MATH
 $N \times N$
 -->
<SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN>
<tex2html_verbatim_mark> game board (<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> drawn from [1, 15]), where each square on the board contains some positive point value between 10 and 99, inclusive. A <!-- MATH
 $6 \times 6$
 -->
<SPAN CLASS="MATH">6&#215;6</SPAN>
<tex2html_verbatim_mark> board might look like this:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<B>33</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 74 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 26 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>55</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 79 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 54 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>67 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 56 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 91 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 72 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 44 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><B>44</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 64 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 22 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 91 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 29 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>61</B> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>61 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 76 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 32 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>81 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 65 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 56 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 38 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 96 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 36 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>38 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 78 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 50 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>92</B> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 90 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <B>75</B> </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
The player distributes pebbles across the board so that: 

<P>

<UL>
<LI>At most one pebble resides in any given square. 
</LI>
<LI>No two pebbles are placed on adjacent squares. Two squares are considered adjacent if they are horizontal, vertical, or even diagonal neighbors. There's no board wrap, so 44 and 61 of row three aren't neighbors. Neither are 33 and 75 nor 55 and 92.
</LI>
</UL>

<P>
The goal is to maximize the number of points claimed by your placement of pebbles. 

<P>
Write a program that reads in a sequence of boards from an input file and prints to stdout the maximum number of points attainable by an optimal pebble placement for each. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Each board is expressed as a series of lines, where each line is a space-delimited series of numbers. A blank line marks the end of each board (including the last one) 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Then your program would print the maximum number of points one can get by optimally distributing pebbles while respecting the two rules, which would be this (each output should be printed on a single line and followed with a newline).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
71 24 95 56 54 
85 50 74 94 28 
92 96 23 71 10 
23 61 31 30 46 
64 33 32 95 89 

78 78 11 55 20 11 
98 54 81 43 39 97 
12 15 79 99 58 10 
13 79 83 65 34 17 
85 59 61 12 58 97 
40 63 97 85 66 90 

33 49 78 79 30 16 34 88 54 39 26 
80 21 32 71 89 63 39 52 90 14 89 
49 66 33 19 45 61 31 29 84 98 58 
36 53 35 33 88 90 19 23 76 23 76 
77 27 25 42 70 36 35 91 17 79 43 
33 85 33 59 47 46 63 75 98 96 55 
75 88 10 57 85 71 34 10 59 84 45 
29 34 43 46 75 28 47 63 48 16 19 
62 57 91 85 89 70 80 30 19 38 14 
61 35 36 20 38 18 89 64 63 88 83 
45 46 89 53 83 59 48 45 87 98 21 

15 95 24 35 79 35 55 66 91 95 86 87
94 15 84 42 88 83 64 50 22 99 13 32
85 12 43 39 41 23 35 97 54 98 18 85
84 61 77 96 49 38 75 95 16 71 22 14
18 72 97 94 43 18 59 78 33 80 68 59
26 94 78 87 78 92 59 83 26 88 91 91
34 84 53 98 83 49 60 11 55 17 51 75
29 80 14 79 15 18 94 39 69 24 93 41
66 64 88 82 21 56 16 41 57 74 51 79
49 15 59 21 37 27 78 41 38 82 19 62
54 91 47 29 38 67 52 92 81 99 11 27
31 62 32 97 42 93 43 79 88 44 54 48
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
572 
683 
2096 
2755
</PRE>

<P>

______________________________________________________
3996||||||false||||||
<P>Trung is bored with his mathematics homeworks. He takes a piece of chalk and starts writing a sequence of consecutive integers starting with 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < N < 10000)$
 --><SPAN CLASS="MATH">(1 &lt; <I>N</I> &lt; 10000)</SPAN> <tex2html_verbatim_mark>. After that, he counts the number of times each digit (0 to 9) appears in the sequence. For example, with <SPAN CLASS="MATH"><I>N</I> = 13</SPAN> <tex2html_verbatim_mark>, the sequence is:<P>12345678910111213<P>In this sequence, 0 appears once, 1 appears 6 times, 2 appears 2 times, 3 appears 3 times, and each digit from 4 to 9 appears once. After playing for a while, Trung gets bored again. He now wants to write a program to do this for him. Your task is to help him with writing this program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each test case, there is one single line containing the number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write sequentially in one line the number of digit <SPAN CLASS="MATH">0, 1,...9</SPAN> <tex2html_verbatim_mark> separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
13
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 1 1 1 0 0 0 0 0 0 
1 6 2 2 1 1 1 1 1 1
</PRE><P>
______________________________________________________
3997||||||false||||||
<P>We suspect that for every positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> there exists an integer of the form <SPAN CLASS="MATH">11...10...0</SPAN> <tex2html_verbatim_mark> (a sequence of 1's followed by 0 or more 0's) that is divisible by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. For example, with <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark>, 111 is divisible by 3, with <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark>, 100 is divisible by 4, with <SPAN CLASS="MATH"><I>N</I> = 7</SPAN> <tex2html_verbatim_mark>, 11111 is divisible by 7. We want to verify this for some integers. The solution to this problem is to find two different numbers <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> in the form of <SPAN CLASS="MATH">11...1</SPAN> <tex2html_verbatim_mark> (a sequence of 1's) that have the same remainder when dividing by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The difference <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> between <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> will be in the form of <SPAN CLASS="MATH">11...10...0</SPAN> <tex2html_verbatim_mark> and divisible by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>In order to solve this problem, we have to start with finding the remainder when dividing a number in the form of <SPAN CLASS="MATH">11...1</SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Your task is to write a program to do this.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>Each data set is described by two lines. The first line contains the integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < N < 10^{9})$
 --><SPAN CLASS="MATH">(1 &lt; <I>N</I> &lt; 10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>. The second line contains the integer number <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> contains at least one digit and at most 2000 digits).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the remainder when dividing <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4 
11 
5 
111
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1
</PRE><P>
______________________________________________________
3998||||||false||||||
<P><!-- MATH
 $\{p_{1} ,\ldots, p_{k} : p_{1} < p_{2} < \ldots < p_{k} \}$
 --><SPAN CLASS="MATH">{<I>p</I><SUB>1</SUB>,..., <I>p</I><SUB>k</SUB> : <I>p</I><SUB>1</SUB> &lt; <I>p</I><SUB>2</SUB> &lt;...&lt; <I>p</I><SUB>k</SUB>}</SPAN> <tex2html_verbatim_mark> is called a prime <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-tuple of distance <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> are consecutive prime numbers and <SPAN CLASS="MATH"><I>p</I><SUB>k</SUB> - <I>p</I><SUB>1</SUB> = <I>s</I></SPAN> <tex2html_verbatim_mark>. For example, with <SPAN CLASS="MATH"><I>k</I> = 4</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I> = 8</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{11, 13, 17, 19}</SPAN> <tex2html_verbatim_mark> is a prime 4-tuple of distance 8.<P>Given an interval <SPAN CLASS="MATH">[<I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, your task is to write a program to find the number of prime <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-tuples of distance <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> in the interval <SPAN CLASS="MATH">[<I>a</I>, <I>b</I>]</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, there is only one line containing 4 numbers, <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(a, b <2 \ast 10^{9}, k < 10, s < 40)$
 --><SPAN CLASS="MATH">(<I>a</I>, <I>b</I> &lt; 2 <TT>*</TT> 10<SUP>9</SUP>, <I>k</I> &lt; 10, <I>s</I> &lt; 40)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the numbers of prime <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-tuples of distance <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
100 200 4 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
3999||||||false||||||
<P>Thousands of genomes, from virus to human, are available in public databases. Each genome is presented as a string of nucleotides: ``<TT>A</TT>", ``<TT>C</TT>", ``<TT>G</TT>", and ``<TT>T</TT>". To study the relationship among organisms, their genomes are analyzed. A sequence of nucleotides is called a <SPAN CLASS="textit">constant gene</SPAN> if it appears in all genomes.<P><DIV ALIGN="CENTER"><IMG WIDTH="484" HEIGHT="404" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/39/p3999.png ALT="\epsfbox{p3999.eps}"> <tex2html_verbatim_mark></DIV><P>Given <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> genomes, your task is to write a program to find the longest constant gene among these genomes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains the integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < N < 7)$
 --><SPAN CLASS="MATH">(1 &lt; <I>N</I> &lt; 7)</SPAN> <tex2html_verbatim_mark> indicating the number of genomes. Each line in the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> following lines contains one genome (the length of each genome is limited to one million).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line an integer number indicating the length of the longest constant genome.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
ACGGGCGTCGTCCCCGTCGTCGTATC 
CTCGTCGTCCCCGTCGTCGTGTC 
3 
ACGACGGCTGCGGTAACCC 
TTACGGCTGCGGTCCCCTT 
CCCCCCGTTTACGGCTGCGGTGG
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
18 
11
</PRE><P>
______________________________________________________
4000||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> marbles, which are labeled <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> marbles are put in a circular track in an arbitrary order. In the top part of the track there is a ``lazy Susan", which is a tray that can hold exactly 4 marbles. The tray can be rotated, reversing the orientation of the four marbles. The tray can also be moved around the track in both directions.<P>For example, 9 marbles 1, 9, 8, 3, 7, 6, 5, 4, 2 are put in the circular track in clockwise order as shown in the following figure. This figure also shows how the tray is moved and rotated.<P><DIV ALIGN="CENTER"><IMG WIDTH="857" HEIGHT="372" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4000.png ALT="\epsfbox{p4000.eps}"> <tex2html_verbatim_mark></DIV><P>Trung wants you to arrange the marbles by moving and rotating the tray so that when listing the marbles from some position in the track in clockwise order, we get <SPAN CLASS="MATH">(1, 2,..., <I>N</I>)</SPAN> <tex2html_verbatim_mark>. Your task is to write a program to tell Trung that either this can be done or not.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 100. The following lines describe the data sets.<P>For each data set, the first line contains the integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(8<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4000.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4000.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>. The second line describes the initial state of the track. It contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> numbers which are the labels of the marbles when listing in clockwise order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line ``<TT>possible</TT>" if there exists a solution to arrange the marbles. If not so, write ``<TT>impossible</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
9 
1 9 8 3 7 6 5 4 2 
11  
1 3 2 4 5 6 7 8 9 10 11
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
possible 
impossible
</PRE><P>
______________________________________________________
4001||||||false||||||
<P>Given a <SPAN CLASS="MATH">10000&#215;10000</SPAN> <tex2html_verbatim_mark>-square in the Cartesian plane with 4 corners (0,0) (0,10000) (10000,10000) (10000,0). We consecutively draw <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, which are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. These lines subdivide the given square into <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> pieces, of which all edges are longer than 1. Suppose that each line intersects exactly two edges of the given square and each line does not pass any square corner.<P>The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line divides the square into two parts: <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> containing (0,0), and <SPAN CLASS="MATH"><I>Q</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> not containing (0, 0). After all the subdivisions, each resulted piece is labeled by a nonnegative integer, which has binary representation <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB><I>b</I><SUB>2</SUB>...<I>b</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> = 1</SPAN> <tex2html_verbatim_mark> if the piece lies in <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> = 0</SPAN> <tex2html_verbatim_mark> if the piece lies in <SPAN CLASS="MATH"><I>Q</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. For example, the two lines in the figure subdivide the square into 4 pieces.<P><DIV ALIGN="CENTER"><IMG WIDTH="445" HEIGHT="410" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4001.png ALT="\epsfbox{p4001.eps}"> <tex2html_verbatim_mark></DIV><P>Now they want to paint all the pieces with <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> colors denoted by integers from 1 to <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> such that:<P><UL><LI>Each piece is painted with only one color; </LI><LI>Two adjacent pieces (having a common edge) must be painted with two different colors. </LI><LI>The piece with the smallest label must be painted with color 1. </LI></UL><P>Your task is to write a program that determines the solution to paint the pieces with the minimum number of colors <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains a single positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4001.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> -- the number of lines. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains 4 <SPAN CLASS="textbf">integers</SPAN> <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB>, <I>t</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> -- the coordinates of the intersections of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line with two square edges.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the solution in a number of lines. In the first line, write the minimum number of colors <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> needed for painting. The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines described how each piece is painted in increasing order of the label of all the pieces. In each line, write two numbers separated by a space, the former is the label of the piece and the latter is the color used to paint that piece.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 
0 5000 10000 5000 
2 
0 5000 10000 5000 
5000 0 5000 10000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
0 1 
1 2 
2 
0 1 
1 2 
2 2 
3 1
</PRE><P>
______________________________________________________
4002||||||false||||||
<P>A ``<SPAN CLASS="textit">letter</SPAN>" lock is a circle, in which we mark some positions equidistant from one another. The positions are numbered clockwise by a zero-based index and there is exactly one English capital letter put in each position. The state of the lock is given by a string, which contains all letters enumerated from position 0 to the end. The lock can change its state by performing rotations: After a rotation, every letter in the circle will move clockwise to the next position. If the lock received a password in form of a string, it will step by step rotate to change its state and verify whether its current state matches the prefix of the password. Whenever it matches, the lock will be unlocked, and the verification process will stop successfully. If the lock moves around and there has been no matched state found, it will delete the first character in the password and retry with the new password, and so on. This process repeats until the lock is unlocked or the password has b! een completely deleted (verification fails).<P><DIV ALIGN="CENTER"><IMG WIDTH="492" HEIGHT="226" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4002.png ALT="\epsfbox{p4002.eps}"> <tex2html_verbatim_mark></DIV><P>Given a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> locks, in which the state of any lock is not shorter than the state of its previous lock, one may want to unlock all of them in succession by only one password. The process is as follows: the password is first applied to the first lock in the sequence; the remaining password after unlocking the first lock will be applied again to the second lock, the remaining password after unlocking the second lock will be applied again to the third lock, etc. The process continues until the last lock is unlocked.<P>Your task is to write a program to find the shortest password (in terms of the number of characters) that can be used to unlock all these <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> locks in succession. If there is more than one solution, just find the first one in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, there is only one line containing a string that lists all states of the locks separated by one semicolon (``<TT>;</TT>"). In each test case, the number of locks is not greater than 200, the state of every lock is not empty and consists of less than 101 letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the shortest password to unlock all the locks in succession.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
TOPO;POFTTO;THEPOF;HEWOOFT;HEWORLDT 
WELC;COMEEL;METLCO;TOCOME 
HEACMT;PROGRAMCM;RAMMINGCON;CONTESTING
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
TOPOFTHEWORLD 
WELCOMETO 
THEACMPROGRAMMINGCONTEST
</PRE><P>
______________________________________________________
4003||||||false||||||
<P>A local school has noticed an increasing number of cases where electronic essays submitted by students are very similar. The teachers come up with an effective method to automatically detect similar documents using <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-grams as the building block. An <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-gram is a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> consecutive words. Two <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-grams are considered equal if their contents are exactly the same (case sensitive).<P>A word is a sequence of consecutive characters delimited by one or more whitespaces, punctuations or boundaries of email addresses. A whitespace can take the following ASCII codes: 9 (horizontal tab), 10 (new line), 11 (vertical tab), 12 (new page), 13 (carriage return) or 32 (space). A punctuation character can be any character with the following ASCII codes: 33 (exclamation mark), 44 (comma), 46 (period), 58 (colon), 59 (semicolon) and 63 (question mark). But when the period is part of an email address, the whole email address is considered to be a word.<P>An email address has the format: <SPAN CLASS="textit"><SPAN CLASS="textbf">local-part@domain-part</SPAN></SPAN>. Both the local part and the domain part may only contain the following ASCII characters:<P><UL><LI>Uppercase and lowercase letters </LI><LI>The digits 0 through 9 </LI><LI>The characters with ASCII codes 45(-) or 95 (_) </LI><LI>The period (.) provided that it is not the first nor the last character in the local part or the domain part, nor may it appear two or more times consecutively. </LI></UL><P>Additionally, the domain part must contain at least one period and an email address is the longest string of characters satisfying the above-mentioned conditions.<P><P><BR>For example, the following document:<P><P><BR><SPAN CLASS="textit">Email address</SPAN>, <SPAN CLASS="textit">Email address:</SPAN> <SPAN CLASS="textit"><SPAN ID="txt53">admin.team@company.com.vn</SPAN></SPAN>.<P><P><BR>has three unique 2-grams namely:<P><P><BR>``<SPAN CLASS="textit">Email address</SPAN>", ``<SPAN CLASS="textit">address Email</SPAN>" and ``<SPAN CLASS="textit">address <SPAN ID="txt56">admin.team@company.com.vn</SPAN></SPAN>".<P><P><BR>Notice that this document has only one email address, which is <SPAN CLASS="textit"><SPAN ID="txt57">admin.team@company.com.vn</SPAN></SPAN>, and its substring <SPAN ID="txt80"><SPAN CLASS="textit">team@company.com</SPAN></SPAN> is not a valid email address.<P>For a given value of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, suppose document <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> has <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> unique <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-grams, document <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> has <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> unique <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-grams and the two documents have <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> unique <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-grams in common. The similarity between two documents is calculated with the following formula:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>similarity</I>(<I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>) = <I>min</I><IMG WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$\displaystyle \left(\vphantom{\frac{s}{m}, \frac{s}{l} }\right.$"><IMG WIDTH="24" HEIGHT="47" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$\displaystyle {\frac{{s}}{{m}}}$">,<IMG WIDTH="16" HEIGHT="47" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$\displaystyle {\frac{{s}}{{l}}}$"><IMG WIDTH="18" HEIGHT="55" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$\displaystyle \left.\vphantom{\frac{s}{m}, \frac{s}{l} }\right)$"> <TT>*</TT> 100</DIV><P><tex2html_verbatim_mark></P><P>Your task is to write a program to compute the similarity percentage between two given documents for a given value of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line of each data set contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4003img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> denotes which <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-gram to use. The second line contains two integers <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>, which are the number of lines the first and second documents contain respectively. The next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines contain the content of the first document. The next <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> lines contain the content of the second document.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the similarity percentage, truncated to 2 decimal places, between the two input documents.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
21 
John, my friend, is a 
good programmer. 
My friend John is a good programmer!
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
50.00
</PRE><P>
______________________________________________________
4004||||||false||||||
<P>In order to discover all the planets of the solar system, we want to develop techniques to travel safely through an asteroid belt between Mars and Jupiter. We plan to drop automatic-signaling devices into large asteroids of the belt, which will act as space beacons to guide the ships. They will assist autopilots to track the location of the ships to adjust the orbit. Each signal sent by each beacon contains a sequence of pulses, and is characterized by a sequence <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>T</I> = <I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>k</SUB>,(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$\displaystyle \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$\displaystyle \le$">18),</DIV><P><tex2html_verbatim_mark></P><P>where <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the duration of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th pulse (<SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is integer and is in the range of 1..9).<P><DIV ALIGN="CENTER"><IMG WIDTH="479" HEIGHT="434" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="\epsfbox{p4004.eps}"> <tex2html_verbatim_mark></DIV><P>In order to simplify the technical checking process and to increase the signal recognition ability, the sequence <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> of each beacon is designed with the following criteria:<P>With <SPAN CLASS="MATH">1 &lt; <I>i</I> &lt; <I>k</I></SPAN> <tex2html_verbatim_mark>, either:<P><P><BR><!-- MATH
 $\left\{ \begin{array}{l}
t_{i-1} < t_{i} ,t_{i} > t_{i+1} \mbox{for i mod} \ 2 = 0 \\
t_{i-1} > t_{i} ,t_{i} < t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array} \right.$
 --><SPAN CLASS="MATH"><IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$ \left\{\vphantom{ \begin{array}{l}
t_{i-1} &lt; t_{i} ,t_{i} &gt; t_{i+1} \mbox{for...
...
t_{i-1} &gt; t_{i} ,t_{i} &lt; t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array} }\right.$"><IMG WIDTH="273" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$ \begin{array}{l}
t_{i-1} &lt; t_{i} ,t_{i} &gt; t_{i+1} \mbox{for i mod} \ 2 = 0 \\
t_{i-1} &gt; t_{i} ,t_{i} &lt; t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array}$"></SPAN> <tex2html_verbatim_mark><P><P><BR>or<P><P><BR><!-- MATH
 $\left\{ \begin{array}{l}
t_{i-1} > t_{i} ,t_{i} < t_{i+1} \mbox{for i mod} \ 2 = 0 \\
t_{i-1} < t_{i} ,t_{i} > t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array} \right.$
 --><SPAN CLASS="MATH"><IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$ \left\{\vphantom{ \begin{array}{l}
t_{i-1} &gt; t_{i} ,t_{i} &lt; t_{i+1} \mbox{for ...
...t_{i-1} &lt; t_{i} ,t_{i} &gt; t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array} }\right.$"><IMG WIDTH="273" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4004img1.png ALT="$ \begin{array}{l}
t_{i-1} &gt; t_{i} ,t_{i} &lt; t_{i+1} \mbox{for i mod} \ 2 = 0 \\
t_{i-1} &lt; t_{i} ,t_{i} &gt; t_{i+1} \mbox{for i mod} \ 2 = 1
\end{array}$"></SPAN> <tex2html_verbatim_mark><P><P><BR>All possible <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> sequences are sorted in lexicographic order and labeled by consecutive integers starting with 1. The label of the sequence <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> of each beacon is used as the identifier of the beacon.<P>Given the sequence <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> of a beacon, your task is to write a program to find the identifier of that beacon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, there is only one single line containing <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB>, <I>t</I><SUB>2</SUB>,..., <I>t</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> separated by space describing the <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> sequence of a beacon.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line the ID of the beacon with the given <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 2 1 2 
1 2 1 2 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
4
</PRE><P>
______________________________________________________
4005||||||false||||||
<P>One of the scientific research projects was almost chosen to the shortlist of the Ig Nobel. It was rejected because the author stated that the analyzed data is not sufficient, and that it will be studied further in the future. The research is to investigate the shape of ink drops left by grade 1 students in their notebooks. The author chose a point in the ink drop to act as the center. A line starting from that point rotates 360<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>; and whenever it hits an angle of 360<SPAN CLASS="MATH"><SUP>o</SUP></SPAN> <tex2html_verbatim_mark>/<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the intersection of the line and the border of the drop will be marked. At the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th mark, we get the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th intersection ( <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark>). Thus, after the <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark>-th is the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th, and after the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th is the 1-st one. The author recorded the length <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> from the center to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th intersection by <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4005img1.png ALT="$ \le$"><I>r</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4005img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>. However, at the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>-th marking of the intersection, he accidentally made a hole in the paper. Therefore, he didn't have the exact <SPAN CLASS="MATH"><I>r</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark>. With the honesty of a scientist, he left <SPAN CLASS="MATH"><I>r</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> blank, recorded as a value of 0. One of the research goals is to find a rain drop which has a shape closest to that of the ink drop. In order to find it, the author planned to eliminate a minimal number of intersections so that the <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> of the remaining intersections can form a <SPAN CLASS="textbf">descending order</SPAN> of values starting from a certain intersection by either directions (in a circular way). In this process, the unknown value <SPAN CLASS="MATH"><I>r</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark> is assigned by a value <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> in the range from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="483" HEIGHT="378" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4005img1.png ALT="\epsfbox{p4005.eps}"> <tex2html_verbatim_mark></DIV><P>Given <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 1&#247;<I>n</I>)</SPAN> <tex2html_verbatim_mark>, your task is to write a program to find the value of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> in order that the number of the eliminated intersections is minimal. In the case that there is more than one value of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, find the smallest one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each test case, the first line contains the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < n \le 10 000)$
 --><SPAN CLASS="MATH">(1 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4005img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. The second line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,..., <I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> separated by space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write in one line two integers: <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and the minimal number of eliminated intersections separated by one single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
5 
5 7 0 7 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1

______________________________________________________
4006||||||false||||||
<P>The Academic Development Department of the University of Hidalgo pretends to implement a remedial program to reduce the fail index in the Mathematics V course. With this purpose, the Department does a future performance forecast of the students with base on historical data. This data record includes the Id number (<SPAN CLASS="MATH"><I>IN</I></SPAN> <tex2html_verbatim_mark>), average (<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>), number of study hours per week (<SPAN CLASS="MATH"><I>SH</I></SPAN> <tex2html_verbatim_mark>), number of class hours per week (<SPAN CLASS="MATH"><I>CH</I></SPAN> <tex2html_verbatim_mark>), and the result indicator obtained (<SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>); when a student fails <SPAN CLASS="MATH"><I>R</I> = 0</SPAN> <tex2html_verbatim_mark>, otherwise <SPAN CLASS="MATH"><I>R</I> = 1</SPAN> <tex2html_verbatim_mark>. Students who obtain a failing forecast must take a remedial workshop on extra class hours.<P>The next table is an example of the historical results of students who have taken a Mathematics V courses before. The number of historical results is <SPAN CLASS="MATH"><I>HR</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Id Number</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Average of</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Number of</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Number of</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Result</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>studied</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>study hours</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>class hours</TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>IN</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>subjects</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>per week</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>per week</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>A</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>SH</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>CH</TD><TD></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>735</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>724</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>28</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>532</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>677</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>665</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>23</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>512</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P><P><BR>The characteristic vector of any student is represented by:<P><!-- MATH
 \begin{displaymath}
S_{IN} = <A_{IN}, SH_{IN}, CH_{IN}>
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I><SUB>IN</SUB> = &lt; <I>A</I><SUB>IN</SUB>, <I>SH</I><SUB>IN</SUB>, <I>CH</I><SUB>IN</SUB> &gt;</DIV><P><tex2html_verbatim_mark></P>, for example:<P><!-- MATH
 \begin{displaymath}
S_{735} = <8, 13, 25>, S_{677} = <6, 10, 22>
\end{displaymath}
 --></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I><SUB>735</SUB> = &lt; 8, 13, 25 &gt; , <I>S</I><SUB>677</SUB> = &lt; 6, 10, 22 &gt;</DIV><P><tex2html_verbatim_mark></P><P>The Manhattan distance is given by:<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Md</I><SUB>(Si, Sj)</SUB> = | <I>A</I><SUB>i</SUB> - <I>A</I><SUB>j</SUB>| + | <I>SH</I><SUB>i</SUB> - <I>SH</I><SUB>j</SUB>| + | <I>CH</I><SUB>i</SUB> - <I>CH</I><SUB>j</SUB>|</DIV><P><tex2html_verbatim_mark></P><P>Here is an example:<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Md</I><SUB>(S677, S512)</SUB> = | 6 - 8| + | 10 - 15| + | 22 - 20| = 9</DIV><P><tex2html_verbatim_mark></P><P>The next procedure is used in forecasts, with base on statistics, and the possibility that a new student in a mathematics V course could fail.<P><DL><DT><STRONG>Step 1.</STRONG></DT><DD>Measure the Manhattan distance between the characteristic vector of the student and the characteristic vectors of all the students in the historical table (without considering the result parameter <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>).<P></DD><DT><STRONG>Step 2.</STRONG></DT><DD>Sort the students table based on their distance; in case of tie, take the order as it appears in the original table. Once sorted, take the first <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> (an odd integer number), <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4006img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4006img1.png ALT="$ \le$"><I>HR</I>/2</SPAN> <tex2html_verbatim_mark> to determine the value of the more frequent indicator result and assign it to the student who the forecast is being done to, as seen in the example for the <SPAN CLASS="MATH"><I>NC</I> = 300</SPAN> <tex2html_verbatim_mark> student</DD></DL><P><P><BR>Step1.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(735,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 8 - 8| + | 13 - 20| + | 25 - 20| = 12</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(724,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 7 - 8| + | 10 - 20| + | 28 - 20| = 19</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(532,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 9 - 8| + | 20 - 20| + | 22 - 20| = 3</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(677,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 6 - 8| + | 10 - 20| + | 22 - 20| = 14</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(665,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 9 - 8| + | 23 - 20| + | 25 - 20| = 9</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(512,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>Md</I> = | 8 - 8| + | 15 - 20| + | 20 - 20| = 5</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY></TABLE></DIV><P><P><BR>Step 2.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(532,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(512,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(665,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(735,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(677,300)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>S(724,300)</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>19</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD></TR></TBODY></TABLE></DIV><P>Like <SPAN CLASS="MATH"><I>k</I> = 3</SPAN> <tex2html_verbatim_mark>, the indicator result forecasted is 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The Input to this problem will consist of a (non-empty) series of up to 50 data sets. Each data set will be formatted according to the following description, and there will be a blank space separating data sets.<P>The first data set contains historical data of up to 100 students who have taken this course before. The first number in each line is an integer for the Id Number, followed by three integers corresponding to the characteristic vector of that student.<P>The following data sets contain an integer in the first line, corresponding to the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> value and in the lines to follow a table with the data of new students to whom the forecast has to be done.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of a list of pairs of integers that correspond to the students Id Number and the forecasted result, separated by a blank space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
214 8 13 25 1 
315 7 10 28 0 
550 9 20 22 1 
120 6 10 22 0 
335 8 11 20 0 
220 10 20 22 1 
450 7 15 21 0 
180 10 14 20 1 
250 7 12 23 0 
300 8 16 23 0

3 
300 8 20 20 
320 7 15 24 

5 
340 8 15 25 
365 10 25 20 
440 9 30 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
300 1 
320 0 
340 0 
365 1 
440 1
</PRE><P>
______________________________________________________
4007||||||false||||||

<P>
Nancy is the best babysitter of the block and today she faces her greater challenge: little John and his anxious box of markers. But Nancy has prepared herself for this eventuality with an activity that it will maintain occupied little John. In a paper sheet with squares John will have to put his blue marker in some corner of a square and at the order of ``right" (or left, or up, or down) he will have to be draw a segment that unites the present position with next point to its right (or left, or up, or down); the marker will be placed in that last point hoping the following instruction. 

<P>
The idea is that John follows the instructions, draws a simple polygon and counts the number of squares that are within the figure. Remember that the boundary of a simple polygon does not cross itself.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
In the first line is a integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, that represents the number of tests. In following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines there will be a statement containing the instructions: <TT>U</TT> - up, <TT>D</TT> - down, <TT>R</TT> - right, <TT>L</TT> - left.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test it's necessary to indicate the number of squares that the polygon contains.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
DLULDDRRRUUULD 
UUUULLLLDDDDRRRR
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
case 1: 6 
case 2: 16
</PRE>

<P>

______________________________________________________
4008||||||false||||||
<P>The number of permutation without repetition that has a string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is so big, but in this problem you just need to print the last nonzero digit of it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>In each test case you have a string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4008img1.png ALT="$ \le$">| <I>S</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4008img1.png ALT="$ \le$">1000000)</SPAN> <tex2html_verbatim_mark>, all characters in the string are lowercase.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print the last nonzero digit.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> For example for the first test case the permutation are:<P><PRE>
aaab 
aaba 
abaa 
baaa
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
aaba 
aaabababababa 
abbzazzazzalzalzzaaaaazlalzaazlalzla 
w
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
7 
8 
1
</PRE><P>
______________________________________________________
4009||||||false||||||

<P>
Being in charge of the computer department of the Agency of International Espionage, you are asked to write a program that will allow a spy to decode their messages. 

<P>
You can assume a spy's message is at most 400 characters long, and it includes all the uppercase letters of the English alphabet plus the space, any digit, and any of the following characters: <TT>! , . : ; ? -</TT>

<P>

<P>
<BR>
The algorithm that the department will use to encode all their messages will be following: 

<P>

<UL>
<LI>They first encode the message with a simple code key. This simple code key is a one for one character substitution based upon a <SPAN  CLASS="textit">single arithmetic manipulation</SPAN> of the printable portion of the ASCII character set (0-126). This single arithmetic manipulation is the same for each character of the message. 

<P>
</LI>
<LI>After, they agree secretly on two numbers that will be used as the number of rows (<SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>) and columns (<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>) in a matrix. 

<P>
</LI>
<LI>The department then enters the letters of the message encode in spiral pattern along the matrix. 
</LI>
</UL>

<P>
For example, if the message is: 

<P>

<P>
<BR>

<TT>-CDC IS THE TRADEMARK OF THE CONTROL DATA CORPORATION.</TT> 

<P>

<P>
<BR>
and there <SPAN CLASS="MATH"><I>R</I> = 9</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I> = 6</SPAN>
<tex2html_verbatim_mark>, the department would write down. 

<P>

<P>
<BR>

<B>Message encode:</B> 

<P>

<P>
<BR>

<TT>4JKJ'PZ'[OL'[YHKLTHYR'VM'[OL'JVU[YVS'KH[H'JVYWVYH[PVU5</TT>

<P>

<P>
<BR>
The matrix would be filled in as follows:

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> J </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> J </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>[ </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> J </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Z </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> W </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>M </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> J </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> [ </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> U </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> [ </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> O </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>R </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> [ </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> P </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> [ </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> V </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Y </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> ' </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> S </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> [ </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> T </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> L </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> K </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> H </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> Y </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple datasets. Each dataset consist of two lines. The first line contain <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le R \le 20)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4009img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4009img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, a space, <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le C \le 20)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4009img1.png
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4009img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>. The next line is a string of characters that represent the contents of the matrix (<!-- MATH
 $R \times C$
 -->
<SPAN CLASS="MATH"><I>R</I>&#215;<I>C</I></SPAN>
<tex2html_verbatim_mark> characters). The characters are in row major order. The last input set is followed by a line containing two zeros (<TT>0 0</TT>). This line should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, you should one line of output, giving the decoded message.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9 6 
4JKJ'P[OL'JZ'VYWV'MJ5VU[V'UY[O'HVHYLR[P[V'YHK'S[HTLKHY 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
-CDC IS THE TRADEMARK OF THE CONTROL DATA CORPORATION.
</PRE>

<P>

______________________________________________________
4010||||||false||||||
<P>The geophysics prospection is a tool that permits to predict the subsoil characteristics, working at variable deeps with multiple targets such as rock differentiation, identification of freatic surfaces and identification of contaminated areas.<P>A Geo-exploitation company determines the capacity of exploitation of a terrain in terms of the analysis of geophysics prospection of a sample of m adjacent longitudinal layers. Each layer is represented by a matrix of <SPAN CLASS="MATH"><I>p</I>&#215;<I>k</I></SPAN> <tex2html_verbatim_mark> materials. Materials are identified by a code. The set of layers form a three-dimensional matrix that models the characteristics of the subsoil studied. The problem is to identify the grouping patterns of a same exploitable material. A group of material is that which is contained in adjacent boxes of the layer matrix. Two boxes are adjacent if they share four sides in common.<P>The material codes and their meaning are described in the following table.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Code</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Meaning</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>a</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>A mix of sad and gravel</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>b</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Clay</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>c</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Mineral</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>d</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Gravel</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><TT>*</TT></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Material without interest</TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple datasets separated by a blank line. Each dataset consist of two parts. The first part is a line with three positive integers to define the matrix dimensions: <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, space, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, space, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4010img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>. The second part contains the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> layers separated by a blank line. Each layer consists of <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> lines and each line contains <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> characters representing material codes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of the grouping pattern of each dataset separated by a blank line. For each dataset, a line with: the string Case, a space, an integer representing the progressive number of dataset (start counting at one), and an ending colon. The next four lines correspond to the materials with exploitation interest, with the same order that they appear in the sample output. Each line consists of a character that represents a material code, followed by a variable number of integers that correspond to the elements of identified groups, in descending order. All data in the line are separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 6 2 
*a***c 
**aa*c 
***aa* 
cbb*a* 
*bb*a* 

a****c 
a**a*c 
***aa* 
*b**a* 
*b**** 

4 6 3 
*a***c 
**aa*c 
***aa* 
cbb*ad 

a****c 
a**a*c 
***aa* 
*b**a* 

a****c 
a**a*c 
***aa* 
*b**ad
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
a 10 2 1 
b 6 
c 4 1 
d 0 

Case 2: 
a 13 4 1 
b 4 
c 6 1 
d 1 1
</PRE><P>
______________________________________________________
4011||||||false||||||
<P>Lawliet is a very intelligent person, he is often seen solving puzzles or painting beautiful landscapes, in his new challenge he is trying to make some art with dominoes, he will draw a figure on a rectangular grid consisting of <SPAN CLASS="MATH">1&#215;1</SPAN> <tex2html_verbatim_mark> squares by marking some of these squares, after that he will try to cover the marked squares with dominoes. As you probably know dominoes consist of pieces of size <SPAN CLASS="MATH">2&#215;1</SPAN> <tex2html_verbatim_mark>, for simplicity we assume that the dominoes can only be put horizontally or vertically and that you have an unlimited amount of dominoes available. The cover has to be perfect, meaning that the dominoes must cover only the marked positions and the dominoes must cover all of them, also all the dominoes must lie strictly inside the rectangular grid. Below are shown two examples of possible figures, which corresponds to the two first inputs in the sample input, the first is possible to cover with dominoes, while the second is not:<P><DIV ALIGN="CENTER"><IMG WIDTH="484" HEIGHT="145" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4011a.png ALT="\epsfbox{p4011a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="199" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4011a.png ALT="\epsfbox{p4011b.eps}"> <tex2html_verbatim_mark></DIV><P>Now your task is this: given a figure of marked squares on a rectangular grid, you must help Lawliet to determine if it is possible to exactly cover the figure with dominoes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases separated by blank lines. First line of each test case contains two positive integers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4011a.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4011a.png ALT="$ \le$">60)</SPAN> <tex2html_verbatim_mark> the number of rows and columns of the rectangular grid, respectively. On the following <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines there is the actual configuration consisting of a grid of dots `<TT>.</TT>' and sharps `<TT>#</TT>'. Each character represents a square of the rectangular grid. A dot `<TT>.</TT>' represents a square which is unmarked and a sharp `<TT>#</TT>' represents a square marked to be part of the desired figure. A case when <SPAN CLASS="MATH"><I>R</I> = <I>C</I> = 0</SPAN> <tex2html_verbatim_mark> denotes the end of the input, this case should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output a line containing the number of the case (starting at 1) and only one of the following two messages: If it is impossible to cover the marked squares with dominoes configuration output a single word ``<TT>Impossible</TT>". If it is possible print the single word ``<TT>Possible</TT>". See examples below for more details.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 
..## 
.##. 
.### 
.### 

4 4 
#### 
##.# 
###. 
.#.# 

4 16 
###.###.###.###. 
.#..#...#.#.#... 
.#..#...###.#... 
###.###.#...###. 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Possible 
Case 2: Impossible 
Case 3: Impossible
</PRE><P>
______________________________________________________
4012||||||false||||||
<P>Friend numbers are those who are composed of the same digits, for example 3123 and 11233233 are friend numbers, but 1233432 and 123331 are not friend numbers because in the second number the 4 is missing.<P>Your task is this: given an integer closed range <SPAN CLASS="MATH">[<I>A</I>, <I>B</I>]</SPAN> <tex2html_verbatim_mark>, an integer number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and an integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, you must find the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>th friend number of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> in that range.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of several test cases each of them in a separate line. For each test case you will receive four (with no leading zeroes) integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < A \le B < 10^{\wedge}100 , 0 \le N \le 10^{\wedge}100 , 0 < K \le 10^{\wedge}17)$
 --><SPAN CLASS="MATH">(0 &lt; <I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$ \le$"><I>B</I> &lt; 10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$\scriptstyle \wedge$"></SUP>100, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$ \le$">10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$\scriptstyle \wedge$"></SUP>100, 0 &lt; <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$ \le$">10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4012img1.png ALT="$\scriptstyle \wedge$"></SUP>17)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you must print a line containing a number representing the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>th friend number in the given range, or ``<TT>-1</TT>" if it is not possible to obtain the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>th friend number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 191010100333 1003 20000 
1 200 1 3 
1 200 1 4 
1 200 211 1 
1 200 211 2 
1 200 211 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1010110131 
111 
-1 
12 
21 
112

______________________________________________________
4013||||||false||||||
<P>You are given a sequence of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers (each within the range <SPAN CLASS="MATH">[0, 2<SUP>16</SUP> - 1]</SPAN> <tex2html_verbatim_mark>) along with <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> operations and in order to solve this problem you need to process the operations instructed as follows.<P>There are two kinds of operations that you will be instructed to perform:<P><DL><DT><STRONG>1) Modification</STRONG></DT><DD>- Given a non-negative number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, you need to increase the value of every number in the sequence by <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. If the value of any number in the sequence is larger than <SPAN CLASS="MATH">2<SUP>16</SUP></SPAN> <tex2html_verbatim_mark> - 1 after the operation, you should divide its value by <SPAN CLASS="MATH">2<SUP>16</SUP></SPAN> <tex2html_verbatim_mark> and take the remainder as its value;</DD><DT><STRONG>2) Query</STRONG></DT><DD>- Given a non-negative number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, query how many numbers in the sequence satisfies the condition that its bitwise and result with <SPAN CLASS="MATH">2<SUP>T</SUP></SPAN> <tex2html_verbatim_mark> is greater than zero.</DD></DL><P>For simplicity, all you need to do here is to output the <SPAN CLASS="MATH"><I>sum</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $sum < 10,000,000,000$
 --> <SPAN CLASS="MATH"><I>sum</I> &lt; 10, 000, 000, 000</SPAN> <tex2html_verbatim_mark>) of the answers to all queries.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with one integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>, the number of integers in the sequence. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> line consists of one integer <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$">2<SUP>16</SUP> - 1)</SPAN> <tex2html_verbatim_mark>, the value on <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line being the value of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th number in the sequence.<P>Each of the following lines is either of the format ``<TT>C</TT> <SPAN CLASS="MATH"><I>delta</I></SPAN> <tex2html_verbatim_mark>" <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$"><I>delta</I>)</SPAN> <tex2html_verbatim_mark>, meaning that you should increase the value of every number by delta, or ``<TT>Q</TT> <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>" <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4013img1.png ALT="$ \le$">15)</SPAN> <tex2html_verbatim_mark>, meaning that you should calculate the answer to the query (as explained in the problem description). Every test case ends with one character `<TT>E</TT>' on a single line, followed by a blank line.<P><SPAN CLASS="MATH"><I>N</I> = - 1</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your program. It is guaranteed that the total number of operations in each test case does not exceed 200,000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the sum of answers to queries on one separate line in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 
2 
4 
Q 1 
Q 2 
C 1 
Q 1 
Q 2
E

-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5
</PRE><P>
______________________________________________________
4014||||||false||||||
<P>As two icons of the Great Depression, Bonnie and Clyde represent the ultimate criminal couple. Stories were written, headlines captured, and films were made about the two bank robbers known as <SPAN CLASS="textit">Romeo and Juliet in a getaway car</SPAN>.<P>The new generation of Bonnie and Clyde is no longer cold-blooded killers with guns. Due to the boom of internet, they turn to online banks and scheme to hack the safety system. The safety system consists of a number of computers connected by bidirectional cables. Since time is limited, they decide that they will attack exactly two computers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> in the network, and as a result, other computers won't be able to transmit messages via <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. The attack is considered successful if there are at least two computers (other than <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>) that disconnected after the attack.<P>As they want to minimize the risk of being captured, they need to find the easiest way to destroy the safety system. However, a brief study of the network indicates that there are many ways to achieve their objective; therefore they kidnapped the computer expert, you, to help with the calculation. To simplify the problem, you are only asked to tell them how many ways there are to destroy the safety system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines describing the connections between the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> computers. Each line contains two integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4014img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, which indicates that computer <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are connected by a bidirectional cable.<P>There is a blank line between two successive test cases. A single line with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one integer number representing the ways to destroy the safety system in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4
1 2
2 3
3 4
4 1

7 9
1 2
1 3
2 3
3 4
3 5
4 5
5 6
5 7
6 7

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: 11
</PRE><P>
______________________________________________________
4015||||||false||||||
<P>It is said that the people of Menggol lived in caves. A tribe's caves were connected to each other with paths. The paths were so designed that there was one and only one path to each cave. So the caves and the paths formed a tree. There was a main cave, which connected the world outside. The Menggolian always carved a map of the tribe's caves on the wall of the main cave.<P>Scientists have just discovered Menggolian's tribe. What a heart-stirring discovery! They are eager to explore it. Since the terrain is very complex and dangerous, they decide to send out a robot.<P>The robot will be landed into the main cave, where he will begin his adventure. It doesn't have to return to the main cave, because the messages of his exploration will be sent immediately to the scientists while he is on the way.<P>A robot can only walk <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> meters before it runs out of energy. So the problem arises: given the map of the tribe's caves and a set of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, how many caves can be explored at most?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with a single number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>, which is the number of caves, followed by <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines describing the map. Each of the <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines contains three integers separated by blanks: <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. It means that the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th cave's <SPAN CLASS="textit">parent cave</SPAN> is the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th cave and the distance is <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> meters. A parent cave of cave <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the first cave to enter on the path from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to the main cave. Caves are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. Then there is an integer <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which is the number of queries, followed by <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> lines. For one query, there is one integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4015img1.png ALT="$ \le$">5000000)</SPAN> <tex2html_verbatim_mark>, the maximum distance that the robot can travel. <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> lines in the format as indicated in the sample output, each line contains one integer, the maximum number of caves the robot is able to visit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 0 5 
2 0 3 
3 
3 
10 
11 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
2 
2 
3
</PRE><P>
______________________________________________________
4016||||||false||||||
<P>David comes to Chengdu for ACM-ICPC 2007. After learning Chengdu is a beautiful city, David decides to buy his friends some gifts.<P>The capacity of David's pocket is so small that it can only contain <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> gifts. Considering the diversity of his gifts, David would not buy two of the same kind. And some typical gift should be chosen to represent the features of Chengdu.<P>David will walk down from north to south and visit <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> shops one by one along the shopping street. There is <SPAN CLASS="textit">ONLY ONE</SPAN> type of gift sold in each shop.<P>David has such a poor memory that he can't remember how many shops sell gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. So he will write a number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on this gift he bought in his pocket, to indicate how many shops where sell gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. In David's opinion, the smaller the number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> is, the better the gift (David like uncommon gifts).<P>When David stops in a shop which sells gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, the following three situations he might come across.<P><OL><LI>If there is not gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> in his pocket and still some place for it, He will buy without hesitation. Before putting it into the pocket, David will write down the number `1' on the gift to indicate that he has once seen one shop selling it. </LI><LI>If there is gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> in his pocket, David will just replace the number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>L</I> + 1</SPAN> <tex2html_verbatim_mark>, indicating <SPAN CLASS="MATH"><I>L</I> + 1</SPAN> <tex2html_verbatim_mark> shops sell gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>If there is not gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> in his pocket and the pocket is full, David would like to regard no shops selling gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> (because he cannot remember whether or not he has met gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>), so he will have to discard one gift in his pocket to release a place for the gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. But which gift should be discarded? According to the follow rule:<P>He chooses the gift that has the biggest number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on it. If several gifts have the same biggest number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, he will discard the one which has been putted into the pocket at the earliest time. After discarding the gift, he will put gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> into his pocket and write number `1' on gift <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P><P><BR>Now, your task is to write a program to record the number of these gifts which have been discarded by David.<P><P><BR>For example:<P>David's pocket has the capacity only for two gifts. There are 5 shops in the street, and each shop sells only one type of gift. The selling sequence of gifts is 1, 2, 1, 3, and 1.<P>In shop 1, the pocket is empty, so he will buy gift 1, write a number `1' on this gift, and then put it into his pocket.<P>When he comes to shop 2, there is one place left in his pocket, so he buys gift 2, write a number `1' on it, and then put it into the pocket.<P>When walking into shop 3, he has already got gift 1 in his pocket, so he will replace the number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> (here, <SPAN CLASS="MATH"><I>L</I> = 1</SPAN> <tex2html_verbatim_mark>) with <SPAN CLASS="MATH"><I>L</I> + 1</SPAN> <tex2html_verbatim_mark>.<P>When David visits shop 4, the pocket is full, but without gift 3 in it, so he has to discard one gift to release a place for gift 3. The number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on gift 1 is `2', but the number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on gift 2 is `1', so he will discard gift 1, write number 1 on gift 3 and then put it into the pocket.<P>In shop 5, the pocket is full, gift 1 is not in it, he should will discard a gift to find place for gift 1. The number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on gift 2 is `1', the number <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> on gift 3 is also `1'. They have the same <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, but gift 2 put into the pocket earlier than gift 3. So he discards gift 2, write number `1' on gift 1 and then put it into the pocket. At the end of the street, David gets two gifts in his pocket, number `1' on gift 3 and number `1' on gift 1. The number of discarded gifts is 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case contains two lines.<P>The first line has two positive integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4016img1.png ALT="$ \le$">50, 000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4016img1.png ALT="$ \le$">100, 000</SPAN> <tex2html_verbatim_mark>) where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> (the capacity of pocket) shows how many gifts it can take and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of shops in the street. The second line has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> positive integers <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(K_{i} < 2^{20} , i = 1, 2, \ldots, N)$
 --><SPAN CLASS="MATH">(<I>K</I><SUB>i</SUB> &lt; 2<SUP>20</SUP>, <I>i</I> = 1, 2,..., <I>N</I>)</SPAN> <tex2html_verbatim_mark> indicating the type of gift sold in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th shop. <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> indicate the end of file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you should output one integer, the number of discarded gifts as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5 
1 2 3 2 4 
2 4 
1 2 2 1 
2 6 
1 2 2 1 1024 1 
2 10 
1 2 3 2 4 2 3 6 7 8 
2 1 
1048575 
6 16 
10 1 2 3 4 5 6 1 2 3 6 5 4 10 1 6 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1
Case 2: 0
Case 3: 2
Case 4: 7
Case 5: 0
Case 6: 3
</PRE><P>
______________________________________________________
4017||||||false||||||

<P>
A teleport machine - a special kind of machine capable of moving objects from one place to another instantaneously, without passing through the intervening space - has just been invented. Out of curiosity, you went to the laboratory and asked if you could have a try. Although even the engineers who have designed this machine can't control where the object entering the machine will end up, they have told you the way the teleport machine operates: 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4017.eps}$
 -->
<IMG
 WIDTH="481" HEIGHT="171" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="\epsfbox{p4017.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
In the interior of the teleport machine you may find a special structure (as illustrated above). There are <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> cylinders of possibly different integer heights, and a special (yet unknown to you) value had been assigned to each of them in the following way: 

<P>
Suppose the heights of the cylinders are recorded in the array <SPAN CLASS="MATH"><I>H</I>[]</SPAN>
<tex2html_verbatim_mark>, the values assigned to them are recorded in the array <SPAN CLASS="MATH"><I>value</I>[]</SPAN>
<tex2html_verbatim_mark>, and we are currently calculating the value for cylinder <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> (i.e., <SPAN CLASS="MATH"><I>value</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark>. Before this process is executed, <SPAN CLASS="MATH"><I>value</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> will be set to zero, and we initialized a pointer, <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, which should be pointing to <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> at the beginning)

<P>

<P>
<BR>
<DL COMPACT>
<DT>0.</DT>
<DD>Let <SPAN CLASS="MATH"><I>P</I> = <I>P</I> - 1</SPAN>
<tex2html_verbatim_mark>. (i.e., modifies the pointer <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> so that it now points to the cylinder on the left side of the current cylinder <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>). If there's none <!-- MATH
 $(P == N U LL)$
 -->
<SPAN CLASS="MATH">(<I>P</I> = = <I>NULL</I>)</SPAN>
<tex2html_verbatim_mark>, or <!-- MATH
 $H_{p} > H_{x}$
 -->
<SPAN CLASS="MATH"><I>H</I><SUB>p</SUB> &gt; <I>H</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> , then let <SPAN CLASS="MATH"><I>P</I> = <I>X</I></SPAN>
<tex2html_verbatim_mark>, and go to step 2; otherwise, proceed to the next step. 
</DD>
<DT>1.</DT>
<DD>Find the highest cylinder on the left side of the cylinder <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, and let its height be <SPAN CLASS="MATH"><I>H'</I></SPAN>
<tex2html_verbatim_mark>. If such cylinder exists, increase <SPAN CLASS="MATH"><I>value</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> by <!-- MATH
 $\max \{ \min \{H' , H_{x}\} - H_{p} , 0\}$
 -->
<SPAN CLASS="MATH">max{min{<I>H'</I>, <I>H</I><SUB>x</SUB>} - <I>H</I><SUB>p</SUB>, 0}</SPAN>
<tex2html_verbatim_mark>, and go to step 0. 
</DD>
<DT>2.</DT>
<DD>Let <SPAN CLASS="MATH"><I>P</I> = <I>P</I> + 1</SPAN>
<tex2html_verbatim_mark>. (i.e., modifies the pointer <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> so that it now points to the cylinder on the right side of the current cylinder <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>). If there's none <!-- MATH
 $(P == NULL)$
 -->
<SPAN CLASS="MATH">(<I>P</I> = = <I>NULL</I>)</SPAN>
<tex2html_verbatim_mark>, or <!-- MATH
 $H_{p} > H_{x}$
 -->
<SPAN CLASS="MATH"><I>H</I><SUB>p</SUB> &gt; <I>H</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark>, then terminate the process; otherwise, proceed to the next step. 
</DD>
<DT>3.</DT>
<DD>Find the highest cylinder on the right side of the current cylinder <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark>, and let its height be <SPAN CLASS="MATH"><I>H'</I></SPAN>
<tex2html_verbatim_mark>. If such cylinder exists, increase <SPAN CLASS="MATH"><I>value</I><SUB>x</SUB></SPAN>
<tex2html_verbatim_mark> by <!-- MATH
 $\max \{\min \{H' , H_{x} \} - H_{p} , 0\}$
 -->
<SPAN CLASS="MATH">max{min{<I>H'</I>, <I>H</I><SUB>x</SUB>} - <I>H</I><SUB>p</SUB>, 0}</SPAN>
<tex2html_verbatim_mark>, and go to step 2. 
</DD>
</DL>

<P>

<P>
<BR>
You have to enter two integers, the distance which you want to move the object, <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>, and the <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>-th largest value <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> among all <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> cylinders' values. A serious malfunction will occur unless the numbers <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> are entered correctly. (It is easy to see that if we follow the process described above strictly, it takes <SPAN CLASS="MATH"><I>O</I>(<I>N</I><SUP>3</SUP>)</SPAN>
<tex2html_verbatim_mark> time to calculate all values; that is why the engineers can only use short-distance teleportation so far; however you wonder whether there exists a way to evaluate the function effectively so as to use the long-range transfer ability of this machine.) 

<P>
Now you have to figure out what the value of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is, given the heights of all cylinders of the teleport machine and the distance you need to move the object. For example you find the machine has 5 cylinders, and the distance you want to move the object is 2. Their heights are 2 1 2 1 3 so your calculations (<SPAN CLASS="MATH"><I>value</I></SPAN>
<tex2html_verbatim_mark>) are 2 0 2 0 2. After that the <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> which you should enter the second largest <SPAN CLASS="MATH"><I>value</I></SPAN>
<tex2html_verbatim_mark> is 2. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input file. Each test case starts with two integers <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 2 \times 10^{5}, 1 \le K \le N)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$">2&#215;10<SUP>5</SUP>, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$"><I>K</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$"><I>N</I>)</SPAN>
<tex2html_verbatim_mark>, the number of cylinders on the teleport machine, and the distance you want to move the object, respectively. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines contains one integer <SPAN CLASS="MATH"><I>P</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le P \le 10^{6})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$"><I>P</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4017.png
 ALT="$ \le$">10<SUP>6</SUP>)</SPAN>
<tex2html_verbatim_mark>, the integer on the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line representing the height of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th cylinder. There is a blank line after each test case. A single line with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates the end of input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one integer, the number you have to enter, in the format as indicated in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 2 
2 
1 
2 
1 
3 

5 1 
4
5 
1 
1 
7 

0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 2 
Case 2: 8
</PRE>

<P>

______________________________________________________
4018||||||false||||||
<P>You're the key programmer employed by a flight control center, and you've just been assigned a task which is to monitor the activity of aircrafts in a particular area.<P>Since some of the aircrafts in that area are so far away from the control that the sensors can't get a lock on them, it is impossible to determine the actual number of aircrafts in that area; however, the scanning of the flight control's sensor arrays has shown the amount of energy sensed in each grid of that area, and by analyzing that data, you will be able to get a general view of that area.<P>You have decided to first in order to write a program to simplify the calculation of the minimum number of aircrafts. you need to follow the following rules:<P><OL><LI>A grid from which the sensor arrays get no reading indicates a grid without any aircraft; </LI><LI>A grid with a positive value indicates a trace of an aircraft, and in that grid, a) An aircraft may be present, or b) It is the trace of exactly one aircraft traveling either horizontal or vertical (notice the aircraft can't change the flying direction halfway); </LI><LI>If a series of adjacent grids on a row or a column are the trace of one aircraft, then the amount of energy in them (from top to bottom or from left to right) must be either strictly increasing or strictly decreasing. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4018img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4018img1.png ALT="$ \le$">50, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4018img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4018img1.png ALT="$ \le$">9)</SPAN> <tex2html_verbatim_mark>, the length and width of the area that the you're monitoring. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines consists of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers, the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th integer on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line representing the amount of heat sensed by the flight control's sensor array. It is guaranteed that every integer in the input will fit into a 32-bit signed integer.<P>There is a blank line after each test case. A single line with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print one integer on a separate line, the minimum possible number of aircrafts, in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 2 3
4 5 6
7 8 9

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 3
</PRE><P>
______________________________________________________
4019||||||false||||||
<P>Sophia is a student. Every day she goes to class from her dormitory to the classroom. Sophia likes sleeping and she always gets up late, so she wants to know what the shortest path is.<P>The campus of the university is divided into several blocks. The picture below shows the campus. Each block is a lawn and you are not allowed to cross them. Sophia starts from her dormitory to classroom. The dormitory and classroom are 2 points in the map. Please look at the following graph for further clarifications.<P><DIV ALIGN="CENTER"><IMG WIDTH="485" HEIGHT="281" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4019.png ALT="\epsfbox{p4019.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each case begins with two numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n, m \le 25)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4019.png ALT="$ \le$">25)</SPAN> <tex2html_verbatim_mark>, the number of horizontal roads and vertical roads, respectively. Then one line consists of 4 integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>0</SUB>, <I>y</I><SUB>0</SUB>, <I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, means the dormitory's location is <SPAN CLASS="MATH">(<I>x</I><SUB>0</SUB>, <I>y</I><SUB>0</SUB>)</SPAN> <tex2html_verbatim_mark> and the classroom's location is <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>. Then two lines follow. The first line consists of <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> integer numbers, the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of each horizontal road's lower side and upper side from south to north. The second line consists of <SPAN CLASS="MATH">2<I>m</I></SPAN> <tex2html_verbatim_mark> integer numbers, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> coordinates of each vertical road's left side and right side from west to east. The campus always has at least one vertical road and at least one horizontal road. The classroom and dormitory will always in the campus and won't appear inside any lawn. All coordinates will be in the range (-100000, 100000), and the width of each road is greater than 0. <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should print only one line consists of the length of the shortest path you found in the format as indicated in the sample output (with accuracy <SPAN CLASS="MATH">10<SUP>-4</SUP></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2 
-3 -3 3 3 
-5 -3 3 5 
-5 -3 3 5 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 12.0000
</PRE><P>
______________________________________________________
4020||||||false||||||
<P><SPAN CLASS="textit">The road to Shu is hard, even harder than climbing to the blue sky</SPAN>. A poem by Li Po from Tang Dynasty 1,200 years ago described the difficulty in travelling into Sichuan.<P><DIV ALIGN="CENTER"><IMG WIDTH="494" HEIGHT="486" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4020.png ALT="\epsfbox{p4020.eps}"> <tex2html_verbatim_mark></DIV><P>However the above old saying is no longer true as a convenient communication network of railway, highway, waterway and air transport has come into being. Railways cover a total mileage of 2,693 km, consisting of five trunk lines including the BaojiChengdu and Chengdu-Chongqing railways, eight feeder lines and four local railways. The total mileage of highways stretches to nearly 80,000 km, ranking at the forefront in China. Now a highway network with the provincial capital of Chengdu as the center radiating to all cities in the province has been formed. A total of 500 km of expressways have been built. It is very easy to transfer passengers and freights between Sichuan and other provinces. After a nationwide railway speed acceleration launched in last year, trains can be allowed to run at a speed above 120 km per hour. However, the average speed of a train depends on its make-up. There is only single railway track between stations from Baoji to Chengdu, A primary task for dispatchers is to arrange for trains to meet and pass each other. You are requested to write a program to make the arrangement for a series of trains of different speeds from one station to its next station in the least amount of time.<P>What you should pay attention to while writing this program is that since there is a single railway track from Baoji to Chengdu, two trains are not allowed to pass the same spot at the same time, or they would be collision, and that because of the limited staff, there should be a fixed interval time between two trains out of the station, what's more, the trains could pull into the station at the same time, but never get out at the same time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each test case begins with a line containing 3 integers <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4020.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4020.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4020.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4020.png ALT="$ \le$">8)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < T < 10000)$
 --><SPAN CLASS="MATH">(1 &lt; <I>T</I> &lt; 10000)</SPAN> <tex2html_verbatim_mark> which indicate the distance between two stations (unit is meter), the number of trains, as well as the interval time of adjacent trains when trains leave the start (unit is second).<P>The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contain average speeds of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> trains (unit is m/s).<P>A single line with <SPAN CLASS="MATH"><I>L</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your output should be in one line with the minimum time(round to integer) needed by the trains pulling into the terminal as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100000 6 300 
3 
4 
5 
6 
2 
1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 101500
</PRE><P>
______________________________________________________
4021||||||false||||||
<P>You are given a circle of numbers (it is guaranteed that the sum of all numbers will always be larger than zero), and as long as there is a negative number among them, you can perform the following operation:<P>Choose a negative number <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, and then change the adjacent two numbers, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>, to <SPAN CLASS="MATH"><I>X</I> + <I>Y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Z</I> + <I>Y</I></SPAN> <tex2html_verbatim_mark> respectively, and after that you can change the negative number <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> to a positive number <SPAN CLASS="MATH">- <I>Y</I></SPAN> <tex2html_verbatim_mark>.<P>The game terminates when no negative number can be found. Since you want to play the game as long as possible, you wonder how to play the game so that the total number of operations will be maximized, or whether there's a way to make this game such that this game never terminate.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file. Each test case starts with one integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4021img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4021img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers in the range [-1000, 1000] on the next line, describing the numbers on the circle in the clockwise direction. Two successive inputs are separated by a blank line. A single line with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one integer on a separate line, the maximum number of possible operations, the output format should be as indicated in the sample output. If a sequence of operations exists satisfying the condition that the game will never terminate, output ``<TT>-1</TT>" instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 -1 1 

5 
1 2 3 4 5 

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 
Case 2: 0
</PRE><P>
______________________________________________________
4022||||||false||||||

<P>
One of the key elements to hold a successful programming contest is maximizing the overall satisfaction degree of all participating teams. Although a team's satisfaction degree is influenced by many factors -- for example, whether this competition is well-organized, and sometimes the weather condition of the place where the competition is held - but among those factors, what usually influences a team's satisfaction degree most is the team's performance in the contest. 

<P>
Since the performance factor is a matter which the organizing committee cannot control, ask you to simply estimate the overall satisfaction degree of all teams. In particular, through years of experience, the committee asks you to calculate the satisfaction degree of a team using the following estimation steps: 

<P>

<OL>
<LI>If this team has performed in the contest at least as well as it had expected, its satisfaction degree is 3; otherwise 
</LI>
<LI>If this team's performance is better than its last year's performance, its satisfaction degree is 2; otherwise its satisfaction degree is 1. 
</LI>
</OL>

<P>
(For the sake of simplicity, both the performance of a team and a team's expectation are measured by its place on the rank list.) 

<P>
This year's and last year's rank lists, along with the expectations of all teams are already given to you. (But the method which we used to find the expectations of the participating teams will remain a secret!) Can you calculate the total satisfaction degree of all teams by the above rules and the data you've been given?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input file. Each test case starts with one integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le N \le 1000)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4022img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4022img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> on a single line, the number of teams participating in the contest. 

<P>
The second line of every test case consists of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> numbers in the range <!-- MATH
 $[1 \ldots N]$
 -->
<SPAN CLASS="MATH">[1...<I>N</I>]</SPAN>
<tex2html_verbatim_mark>, the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th number representing the <SPAN CLASS="MATH"><I>ID</I></SPAN>
<tex2html_verbatim_mark> of team with <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th place in this year's contest. Similarly, the third line of every test case describes the final rank list of last year's contest. You can assume there will be no ties in the rank lists given to you. 

<P>
The last line of every test case consists of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> numbers in the range <!-- MATH
 $[1 \ldots N]$
 -->
<SPAN CLASS="MATH">[1...<I>N</I>]</SPAN>
<tex2html_verbatim_mark>, the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th number representing the expectation of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th team this year. There's a blank line between two successive test cases. A single line with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates the end of input file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one integer on a separate line, the overall satisfaction degree of all teams, in the format as indicated in the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
5 4 1 3 2 
3 1 5 2 4 
3 5 1 1 2 

5 
5 4 1 3 2 
1 2 4 5 3 
5 3 3 5 1

0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 12 
Case 2: 12

______________________________________________________
4023||||||false||||||
<P>In a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="textit">contraction</SPAN> of an edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> with endpoints <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is the replacement of <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> with a single vertex such that edges incident to the new vertex are the edges other than <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> that were incident with <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>. The resulting graph has one less edge than <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>. A graph <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> is a <SPAN CLASS="textit">minor</SPAN> of a graph <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> if a copy of <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> can be obtained from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> via repeated edge deletion, edge contraction and isolated node deletion.<P>Minors play an important role in graph theory. For example, every non-planar graph contains either the graph <SPAN CLASS="textbf">K<SPAN CLASS="MATH"><SUB>3, 3</SUB></SPAN> <tex2html_verbatim_mark></SPAN> (i.e., the complete bipartite graph on two sets of three vertices) or the complete graph <SPAN CLASS="textbf">K<SPAN CLASS="MATH"><SUB>5</SUB></SPAN> <tex2html_verbatim_mark></SPAN> as a graph minor.<P>Write a program to find a graph minor <SPAN CLASS="textbf">K<SPAN CLASS="MATH"><SUB>n, m</SUB></SPAN> <tex2html_verbatim_mark></SPAN> or <SPAN CLASS="textbf">K<SPAN CLASS="MATH"><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></SPAN> in an <SPAN CLASS="textit"><SPAN CLASS="textbf">undirected connected simple graph</SPAN></SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. The first line of each case contains an integers <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4023img1.png ALT="$ \le$"><I>V</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4023img1.png ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark>, the number of vertices in the graph, followed by a string in format ``<TT>K<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TT>" or ``<TT>K<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark></TT>" <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4023img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4023img1.png ALT="$ \le$"><I>V</I>)</SPAN> <tex2html_verbatim_mark>, the graph minor you're finding. The following <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> lines contain the adjacency matrix of the graph (1 means directly connected, 0 means not directly connected).<P>The diagonal elements of the matrix will always be 0, and the element in row <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> column <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is always equal to the element in row <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> column <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the string ``<TT>Found</TT>" or ``<TT>Not found</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 K2,2 
0 1 1 1 1
1 0 0 0 0
1 0 0 0 0
1 0 0 0 0
1 0 0 0 0
4 K3 
0 1 0 1 
1 0 1 0 
0 1 0 1 
1 0 1 0 
4 K2,2 
0 1 0 1 
1 0 1 1 
0 1 0 1 
1 1 1 0 
5 K2,2 
0 1 0 0 1
1 0 0 0 1
0 0 0 1 1
0 0 1 0 1
1 1 1 1 0
5 K4 
0 1 0 1 1
1 0 1 1 0
0 1 0 1 1
1 1 1 0 1
1 0 1 1 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Not found 
Case 2: Found 
Case 3: Found 
Case 4: Not found 
Case 5: Found
</PRE><P>
______________________________________________________
4024||||||false||||||
<P>You have some equal-height bricks and want to pile them into a two-layered object. To ensure the stability of the object, no full half-blocks can be over empty space. There are totally four half-blocks for each brick, shown below.<P><DIV ALIGN="CENTER"><IMG WIDTH="803" HEIGHT="117" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4024a.png ALT="\epsfbox{p4024a.eps}"> <tex2html_verbatim_mark></DIV><P>The following figure shows an object consisting of four <SPAN CLASS="MATH">2 <TT>*</TT> 2 <TT>*</TT> <I>h</I></SPAN> <tex2html_verbatim_mark> bricks in the lower layer, one <SPAN CLASS="MATH">2 <TT>*</TT> 2 <TT>*</TT> <I>h</I></SPAN> <tex2html_verbatim_mark> brick in the upper layer. Each half-block does not include its boundary, so you're not allowed to leave only one brick, since the upper brick would have two half-blocks hanging over empty space (though you may argue that the upper brick may stand still if you don't touch it). In this case, at most 2 bricks could be removed.<P><DIV ALIGN="CENTER"><IMG WIDTH="522" HEIGHT="187" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4024a.png ALT="\epsfbox{p4024b.eps}"> <tex2html_verbatim_mark></DIV><P>Each time, you can remove exactly one brick from the lower layer by dragging it in one of four possible directions: decreasing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> (left), increasing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> (right), decreasing <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> (front), increasing <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> (back). You can only drag a brick <SPAN CLASS="textit"><SPAN CLASS="textbf">along one direction</SPAN></SPAN>. E.g. you cannot drag it to the left, and then to the front to remove it. The bricks are smooth enough and don't suffer from fraction, so you can remove any brick you want as long as dragging it out does not hit any other brick (touching other bricks is allowed, though), and after the brick is removed, no full half-blocks of any brick in upper layer are over empty space.<P>Write a program to find the maximum number of bricks you can remove from the lower layer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of input contains two integer <SPAN CLASS="MATH"><I>m</I>, <I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4024a.png ALT="$ \le$"><I>m</I>, <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4024a.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, the number of bricks in the lower and upper layer. The next line describes the lower layer with m brick descriptions in format <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>) - (<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> where integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> do not exceed 1000 by their absolute values and they satisfy <!-- MATH
 $x_{1}<x_{2}, y_{1}<y_{2}$
 --><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB>, <I>y</I><SUB>1</SUB> &lt; <I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Each description does not contain any space inside; neighboring descriptions are separated by exactly one single space. The next line describes the upper layer in the same format. The initial object is always valid. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the number of bricks can be removed from the lower layer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 
(0,0)-(1,1) 
(0,0)-(1,1) 
4 1 
(0,0)-(2,2) (2,0)-(4,2) (0,2)-(2,4) (2,2)-(4,4) 
(1,1)-(3,3) 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0 
Case 2: 2
</PRE><P>
______________________________________________________
4025||||||false||||||
<P>You have a <SPAN CLASS="MATH">3 <TT>*</TT> 3</SPAN> <tex2html_verbatim_mark> board of color squares. Each square is either empty or has a block in it. Initially, all the squares are empty. There are four kinds of blocks: blue (B), red (R), green (G) and yellow (Y). Each of these block scores <SPAN CLASS="MATH"><I>w</I><SUB>b</SUB>, <I>w</I><SUB>r</SUB>, <I>w</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I><SUB>y</SUB></SPAN> <tex2html_verbatim_mark>, respectively (blocks of the same color always have the same score). We assume that <SPAN CLASS="MATH"><I>w</I><SUB>b</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png ALT="$ \le$"><I>w</I><SUB>r</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png ALT="$ \le$"><I>w</I><SUB>g</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png ALT="$ \le$"><I>w</I><SUB>y</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="1099" HEIGHT="196" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png ALT="\epsfbox{p4025.eps}"> <tex2html_verbatim_mark></DIV><P>In each step, you can place a new block in a square. If that square already has a block in it, take it out first (taking it out does not count as a step). You can do this as many times as you like (you're given enough blocks for each color), as long as you follow these rules:<P><P><BR><DL COMPACT><DT></DT><DD><SPAN CLASS="textbf">Rule 1:</SPAN> You can always place a blue block.</DD><DT></DT><DD><SPAN CLASS="textbf">Rule 2:</SPAN> You can place a red block if and only if it's surrounded by at least one blue block.</DD><DT></DT><DD><SPAN CLASS="textbf">Rule 3:</SPAN> You can place a green block if and only if it's surrounded by at least one blue and one red block.</DD><DT></DT><DD><SPAN CLASS="textbf">Rule 4:</SPAN> You can place a yellow block if and only if it's surrounded by at least one blue, one red and one green block 
</DD>
</DL>

<P>

<P>
<BR>
Every square is surrounded by squares that share one edge with it, so each of four corner squares is surrounded by exactly two squares, each of four squares on the edge (but not at corners) is surrounded by exactly three squares, and the center square is surrounded by exactly four squares. 

<P>
Write a program to find the minimal number of steps needed to get a score of at least <SPAN CLASS="MATH"><I>w</I></SPAN>
<tex2html_verbatim_mark>. The total score is the sum of individual scores of each block on the current board, regardless of what blocks you've thrown away.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. Each case contains five positive integer, <!-- MATH
 $w_{b}, w_{r}, w_{g}, w_{y}, w$
 -->
<SPAN CLASS="MATH"><I>w</I><SUB>b</SUB>, <I>w</I><SUB>r</SUB>, <I>w</I><SUB>g</SUB>, <I>w</I><SUB>y</SUB>, <I>w</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le w_{b} \le w_{r} \le w_{g}  \le w_{y} â¤ 100, 0 \le w \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$"><I>w</I><SUB>b</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$"><I>w</I><SUB>r</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$"><I>w</I><SUB>g</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$"><I>w</I><SUB>y</SUB>â¤100, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$"><I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4025img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> in a single line. The last test case is followed by a single zero, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the minimum number of steps. If it is impossible, output ``<TT>Impossible</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1 1 1 3 
1 2 4 8 21 
1 1 1 100 500 
7 20 53 94 395
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 3 
Case 2: 7 
Case 3: Impossible 
Case 4: 11
</PRE> 

<P>

______________________________________________________
4026||||||false||||||
<P>You're addicted to a little game called `<SPAN CLASS="textit">remember the melody</SPAN>': you hear some notes, and then you repeat it. In most cases, the longer the melody, the harder to repeat, but it isn't always true. Also, melodies of the same length are usually not equally easy to remember. To find a way to define the <SPAN CLASS="textit">remember difficulty</SPAN> of a melody, you invented a statistics-based model:<P><DIV ALIGN="CENTER"><IMG WIDTH="335" HEIGHT="337" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="\epsfbox{p4026.eps}"> <tex2html_verbatim_mark></DIV><P>Suppose you're investigating melodies of a particular length. If a melody appeared in <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> games, among which you successfully repeated <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> games, the smaller <SPAN CLASS="MATH"><I>q</I>/<I>p</I></SPAN> <tex2html_verbatim_mark>, the more difficult the melody. If there is more than one melody having the minimal ratio, the one with larger <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is considered more difficult. But there is an exception: if <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is smaller than a threshold <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, you simply ignore it (you can't call it difficult if you haven't tried it a lot of times, can you?). The melody appears in a game if its string representation is a consecutive substring occurring at least once in that game.<P>Write a program to find the most difficult melody of length <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, given <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> games you've played.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each case consists of three integers <SPAN CLASS="MATH"><I>n</I>, <I>m</I>, <I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="$ \le$">100, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4026.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each contain two strings separated by exactly one space: the game, and whether you successfully repeated it. The first string will contain at least one at most 100 upper case letters `<TT>C</TT>', `<TT>D</TT>', `<TT>E</TT>', `<TT>F</TT>', `<TT>G</TT>', `<TT>A</TT>', `<TT>B</TT>'. The second string will be either `<TT>Yes</TT>' or `<TT>No</TT>' (case sensitive). The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the most difficult melody. If there is more than one solution, output the lexicographically smallest one. If there is no solution, output the string `<TT>No solution</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 3 
EEECEG Yes 
BFCEG No 
DEBFCEGEEC No 
3 2 2 
AAA No 
BBB No 
CCC Yes 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: BFC 
Case 2: No solution
</PRE><P>
______________________________________________________
4027||||||false||||||

<P>
There are some water, milk and wine in your kitchen. Your naughty little sister made some strange drinks by mixing them together, and then adds some sugar! She wants to know whether they taste good, but she doesn't want to try them herself. She needs your help. 

<P>
Your sister knows that you don't want to drink them either (anyone wants to?), so she gives you a chance to escape: if you can guess the price of a special drink, she gives you freedom. Warning: she loves her special drink so much that you should never under-estimate its cost! That is, you're to find the most expensive possible price of it. 

<P>
The price of each drink equals to its cost. If the amounts of water, milk, wine and sugar used in the drink are <!-- MATH
 $a_{1}, a_{2}, a_{3}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> respectively, and the unit costs of water, milk, wine and sugar are <!-- MATH
 $c_{1}, c_{2}, c_{3}$
 -->
<SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>, <I>c</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> respectively, then the drink costs <!-- MATH
 $a_{1}c_{1}+a_{2}c_{2}+a_{3}c_{3}+a_{4}c_{4}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB><I>c</I><SUB>1</SUB> + <I>a</I><SUB>2</SUB><I>c</I><SUB>2</SUB> + <I>a</I><SUB>3</SUB><I>c</I><SUB>3</SUB> + <I>a</I><SUB>4</SUB><I>c</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark>. To give you some hope to win, she told you the costs of exactly n ordinary drinks. Furthermore, she promised that the total cost of sugar <!-- MATH
 $a_{4}c_{4}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>4</SUB><I>c</I><SUB>4</SUB></SPAN>
<tex2html_verbatim_mark> is always a <SPAN  CLASS="textbf"><SPAN  CLASS="textit">real number</SPAN></SPAN> in the interval <SPAN CLASS="MATH">[<I>L</I>, <I>R</I>]</SPAN>
<tex2html_verbatim_mark>, in any drink. 

<P>
Sadly, you don't know the exact price of anything (you're a programmer, not a housewife!), but you know that water is the cheapest; wine is the most expensive, i.e., <!-- MATH
 $0 \le c_{1} \le c_{2} \le c_{3}$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>c</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>c</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>c</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>. Then the best thing you can do is to assume <SPAN  CLASS="textbf"><SPAN  CLASS="textit">units costs can be any real numbers satisfying this inequality</SPAN></SPAN>. 

<P>
Write a program to find the highest possible price of the special drink. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of each test case contains three positive integers <SPAN CLASS="MATH"><I>n</I>, <I>L</I>, <I>R</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 100, 0 \le L \le R \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$">100, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each contain four non-negative integer <!-- MATH
 $a_{1}, a_{2}, a_{3}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le a_{1}, a_{2}, a_{3} \le 100, 0 \le p \le 10000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$">100, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>p</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>, the amount of water, milk and wine, and the price. The last line of the case contains three integers <!-- MATH
 $a_{1}, a_{2}, a_{3}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le a_{1}, a_{2}, a_{3} \le 100)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4027img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, the drink to be estimated. The last test case is followed by a single zero, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the highest possible price to four decimal places. If the input is selfcontradictory, output ``<TT>Inconsistent data</TT>". If the price can be arbitrarily large, output ``<TT>Too expensive!</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 3 5 
1 2 3 10
2 4 6 
1 2 4 
1 1 1 1
1 1 1 
1 3 8 
0 1 0 17
0 0 1 
3 1 2 
2 1 3 14
1 5 1 15
7 3 2 21
4 1 6 
2 0 2 
45 31 53 4087
30 16 1 1251
11 51 34
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 19.0000 
Case 2: Inconsistent data 
Case 3: Too expensive! 
Case 4: 26.2338 
Case 5: 3440.3088
</PRE> 

<P>

______________________________________________________
4028||||||false||||||
<P>Suppose you have an ice hockey ball (Which has the shape of a cylinder as shown in the figure) and a photo frame (a rectangle). You place the ball in one corner of the photo frame and keep the balls position and orientation fixed. Now you start rotating the frame in clockwise direction. But as the sides of the frame and of the ball have high friction so while the frame is rotating its surface and the balls surface never slips. So the frame always has a constant angular velocity as well as a tangential velocity as shown in the figure below.<P><DIV ALIGN="CENTER"><IMG WIDTH="709" HEIGHT="429" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="\epsfbox{p4028.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program to find the position of the frame after certain time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each set of input is contained in two lines. The first line of a set contains eight integers which denote the values <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> respectively. These values indicate that the four vertices of the frame in clockwise order are denoted by the Cartesian coordinates <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB>)</SPAN> <tex2html_verbatim_mark>. You can assume that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \le$">| <I>x</I><SUB>1</SUB>|,| <I>y</I><SUB>1</SUB>|,| <I>x</I><SUB>2</SUB>|,| <I>y</I><SUB>2</SUB>|,| <I>x</I><SUB>3</SUB>|,| <I>y</I><SUB>3</SUB>|,| <I>x</I><SUB>4</SUB>|,| <I>y</I><SUB>4</SUB>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>. The second line contains three floating point numbers which denotes the values of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < R < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>R</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le T < 100000)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \le$"><I>T</I> &lt; 100000)</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $\omega (0 \le \omega < 360)$
 --><SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \omega$">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \le$"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \omega$"> &lt; 360)</SPAN> <tex2html_verbatim_mark> respectively. Here <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the radius of the ice hockey ball, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> denotes that we want to know the position of the frame after <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> seconds and <SPAN CLASS="MATH"><IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4028.png ALT="$ \omega$"></SPAN> <tex2html_verbatim_mark> is the angular velocity of the frame in degree/second. You can assume that ball is placed touching two the si! des that intersect at point <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and it never moves from or rotates in that position. There will be no such input where the hockey ball cannot be placed within the frame. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and eight floating point numbers <SPAN CLASS="MATH"><I>x</I><SUB>1f</SUB>, <I>y</I><SUB>1f</SUB>, <I>x</I><SUB>2f</SUB>, <I>y</I><SUB>2f</SUB>, <I>x</I><SUB>3f</SUB>, <I>y</I><SUB>3f</SUB>, <I>x</I><SUB>4f</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>4f</SUB></SPAN> <tex2html_verbatim_mark>, to three decimal places. These floating-point numbers actually denote the final positions of the points <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>),(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>),(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB>)</SPAN> <tex2html_verbatim_mark> (The four corners of the frame) respectively after time <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 1 1 1 1 0 0 0 
0.2 10 0 
0 1 1 1 1 0 0 0 
0.2 10 100
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0.000 1.000 1.000 1.000 1.000 0.000 0.000 0.000 
Case 2: -0.619 0.132 -0.445 1.117 0.539 0.943 0.366 -0.042
</PRE><P>
______________________________________________________
4029||||||false||||||
<P>There are two rectangular polygons (simple polygons with interior angles of only 90 or 270 degrees) <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, inside another rectangular polygon <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. You can place a gun <SPAN CLASS="textit"><SPAN CLASS="textbf">anywhere</SPAN></SPAN> on the boundary of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, then shoot a bullet in one of four diagonal directions, and then touch the boundary of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. You may shoot across an edge of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, but touching only a corner is also allowed. Your bullet is not allowed to touch <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> again (even touching a corner of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit"><SPAN CLASS="textbf">not</SPAN></SPAN> allowed), before touching <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="863" HEIGHT="319" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4029.png ALT="\epsfbox{p4029.eps}"> <tex2html_verbatim_mark></DIV><P>The edges of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> can reflect the bullet. When the bullet touches a vertex of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, it may simply go through it (and not regarded as a reflection), or go back. These special cases are shown in the figure above.<P>Write a program to find the minimal number of reflections needed from <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of each case contains three positive integers <SPAN CLASS="MATH"><I>n</I><SUB>G</SUB>, <I>n</I><SUB>T</SUB>, <I>n</I><SUB>M</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4029.png ALT="$ \le$"><I>n</I><SUB>G</SUB>, <I>n</I><SUB>T</SUB>, <I>n</I><SUB>M</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4029.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>n</I><SUB>G</SUB></SPAN> <tex2html_verbatim_mark> pairs of integers, the coordinates (non-negative integers not greater than 4000) of the vertices of <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark>, in counter-clockwise order. The next two lines describe polygon <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, in the same format. It is guaranteed that <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> are outside each other (their boundaries will not touch), and are both inside <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> (they do not touch the boundary of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>). The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the minimal number of reflections to touch <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. If it's impossible, output `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 12 
1 4 2 4 2 5 1 5 
6 4 7 4 7 5 6 5 
0 3 3 3 3 0 4 0 4 3 8 3 8 6 4 6 4 5 3 5 3 7 0 7 
4 4 4 
1 1 2 1 2 2 1 2 
3 1 4 1 4 2 3 2 
0 0 5 0 5 3 0 3 
4 4 4 
1 1 2 1 2 2 1 2 
6 1 7 1 7 2 6 2  
0 0 8 0 8 3 0 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: 0 
Case 3: 1
</PRE><P>
______________________________________________________
4030||||||false||||||

<P>
Laura Luo has just invented a game. Given a beautiful pencil sketch with n points, you're to colorize it with water pens by painting circuits. Each time you paint a new circuit, starts with one point, follow some line segments and return to the starting point. Every point can be reached more than once, but every segment can be painted at most once. To make the picture look interesting, different segments must be painted different colors. For each segment, Laura has already decided a direction to paint it. The picture below illustrates a possible way to paint the picture (dashed lines are segments that are not painted).

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4030.eps}$
 -->
<IMG
 WIDTH="319" HEIGHT="172" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="\epsfbox{p4030.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
After you finish painting, your score is computed as follows: for each unit length you paint, you earn <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> points, for each color you use, you lost <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> points (Laura has prepared enough water pens of different colors). 

<P>
Write a program to find the maximal score you can get. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. The first line of each case contains three positive integers <SPAN CLASS="MATH"><I>n</I>, <I>x</I>, <I>y</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 100, 1 \le x, y \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$">100, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines each describe a point (points are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> in the order they appear in the input). The first two integers <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark> specify its coordinates <!-- MATH
 $(0 \le x, y \le 1000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4030.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>. The rest integers are the points it connects to, ended by a zero. If point <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> appears in the list of point <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark>, there is a line segment connecting <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> (then there will not a segment connecting <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> in the reverse direction). Furthermore, Laura will paint it from <SPAN CLASS="MATH"><I>u</I></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>. There will be no duplicated points and no more than 500 segments. The last test case is followed by a single zero, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the maximal score you can get, to two decimal places.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 5 1 
0 0 2 3 0 
1 0 3 4 0 
1 1 4 0 
0 1 1 0 
1 2 1 
0 0 0 
10 7 2 
0 0 2 4 0 
5 0 3 0 
5 10 4 10 0 
2 3 5 0 
7 5 6 0 
0 11 1 0 
8 0 10 5 0 
18 3 7 0 
14 5 8 1 0 
12 9 9 0 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 16.00 
Case 2: 0.00 
Case 3: 522.18
</PRE> 

<P>

______________________________________________________
4031||||||false||||||
<P>You're transmitting an <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-bits unsigned integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> through a simulated network. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th bit counting from left is transmitted at time <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> (e.g. 4-bit unsigned integer 5 is transmitted in this order: 0-1-0-1). The network delay is modeled as follows: if a bit is transmitted at time <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, it may arrive at as early as <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> <tex2html_verbatim_mark> and as late is <SPAN CLASS="MATH"><I>i</I> + <I>d</I> + 1</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> represents the maximal network delay. If more than one bit arrived at the same time, they could be received in any order.<P>For example, if you're transmitting a 3-bit unsigned integer 2 (010) for <SPAN CLASS="MATH"><I>d</I> = 1</SPAN> <tex2html_verbatim_mark>, you may receive 010, 100 (first bit is delayed) or 001 (second bit is delayed).<P>Write a program to find the number of different integers that could be received, and the smallest/largest ones among them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each case consists of three integers <SPAN CLASS="MATH"><I>n</I>, <I>d</I>, <I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 64, 0 \le d \le n, 0 \le k <2^{n})$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4031img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4031img1.png ALT="$ \le$">64, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4031img1.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4031img1.png ALT="$ \le$"><I>n</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4031img1.png ALT="$ \le$"><I>k</I> &lt; 2<SUP>n</SUP>)</SPAN> <tex2html_verbatim_mark>, the number of bits transmitted, the maximal network delay, and the integer transmitted. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the number of different integers that could be received, followed by the minimal and maximal one among them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 0 2 
3 1 2 
10 2 888 
7 3 107 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 2 2 
Case 2: 3 1 4 
Case 3: 25 490 984 
Case 4: 19 47 122
</PRE><P>
______________________________________________________
4032||||||false||||||
<P>You want to sell a diamond to a merchant for a good price. You know so much about how merchant likes the diamond that you have even built a mathematical model for it: He will definitely accept the price <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> if it's not greater than a certain threshold a, but for a price <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> higher than it, he must have a think. The higher the price, the lower probability he will accept. Precisely, the probability that he accept price <SPAN CLASS="MATH"><I>p</I> &gt; <I>a</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">1/(1 + (<I>p</I> - <I>a</I>)<SUP>b</SUP>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>b</I> &gt; 1</SPAN> <tex2html_verbatim_mark> is a positive constant in your model.<P><DIV ALIGN="CENTER"><IMG WIDTH="297" HEIGHT="337" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4032.png ALT="\epsfbox{p4032.eps}"> <tex2html_verbatim_mark></DIV><P>The exact trading process is as follows: you first propose a price (a non-negative <SPAN CLASS="textit"><SPAN CLASS="textbf">integer</SPAN></SPAN>), then the merchant decides whether to accept. If he accepts, the trade is over and you have no chance to regret. If he does not accept, you propose another price, and so on. You know that the merchant would get angry if you always propose unacceptable high prices, so you promised that the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th proposal (if there is) is always not greater than a (which he can accept for sure).<P>Write a program to find an optimal way to propose prices to maximize your expected earning (i.e. the final price).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each case is described by two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, and a real number <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 100, 1 \le a \le 1000, 1 < b < 10)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4032.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4032.png ALT="$ \le$">100, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4032.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4032.png ALT="$ \le$">1000, 1 &lt; <I>b</I> &lt; 10)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is given to up to three decimal places. The last test case is followed by a single zero, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the expected earning, to two decimal places. It is guaranteed that the maximal earning exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 10 2 
10 33 3.14 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10.00 
Case 2: 34.41

______________________________________________________
4033||||||false||||||
<P>Miss Kitty graduated from University N that has a long history of training their students to become teachers in an island country T. All of her classmates, including Miss Kitty, work very hard at school to become teachers of primary or secondary schools. However, due to the extremely low birth rate in island T, there is little demand for teachers in the island T. Miss Kitty has changed her career plan after unable to secure a stable job in the teaching market after more than 5 years of struggling. She wants to acquire other practical skills by entering graduate schools. However, the tuition for higher education in island T is very high. She needs to save money before becoming a student again. She has opened an ice cream shop near University N. She saves all of the money she earned and will close the shop and enter a graduate institute of making ice creams after she has earned at least <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> dollars.<P>She works very hard every day by selling ice creams and opens the shop every day. Nearby customers become to love her ice cream day after day. After a few days, she discovered the following magic formulas about the amount of money she earned each day. Assume <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is the number of days the shop is opened. So <SPAN CLASS="MATH"><I>x</I> = 1</SPAN> <tex2html_verbatim_mark> for the first day the shop is opened.<P><UL><LI>During a sunny day, her shop earns exactly <SPAN CLASS="MATH"><I>a</I><SUP> . </SUP><I>x</I><SUP>2</SUP> + <I>b</I><SUP> . </SUP><I>x</I> + <I>c</I></SPAN> <tex2html_verbatim_mark> dollars. </LI><LI>During a cloudy day, her shop earns exactly <SPAN CLASS="MATH"><I>d</I><SUP> . </SUP><I>x</I><SUP>2</SUP> + <I>e</I><SUP> . </SUP><I>x</I> + <I>f</I></SPAN> <tex2html_verbatim_mark> dollars. </LI><LI>During a raining day, her shop earns exactly <SPAN CLASS="MATH"><I>g</I><SUP> . </SUP><I>x</I><SUP>2</SUP> + <I>h</I><SUP> . </SUP><I>x</I> + <I>i</I></SPAN> <tex2html_verbatim_mark> dollars. </LI></UL><P>The following is an example when <SPAN CLASS="MATH"><I>a</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I> = - 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>f</I> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>g</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I> = 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>i</I> = 1</SPAN> <tex2html_verbatim_mark>:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> + 2<I>x</I> + 1</SPAN> <tex2html_verbatim_mark> (sunny)</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>36</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>49</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>64</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> - 2<I>x</I> + 1</SPAN> <tex2html_verbatim_mark> (cloudy)</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>36</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I> + 1</SPAN> <tex2html_verbatim_mark> (raining)</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>8</TD></TR></TBODY></TABLE></DIV><P><P><BR>Each day is either a sunny, cloudy or raining day. Furthermore, she also discovers the following magic formulas between x and the weather.<P><P><BR><UL><LI>If <SPAN CLASS="MATH">(<I>j</I><SUP> . </SUP><I>x</I> + <I>k</I>)</SPAN> <tex2html_verbatim_mark> can be evenly divided by 3, i.e., <SPAN CLASS="MATH">(<I>j</I><SUP> . </SUP><I>x</I> + <I>k</I>)</SPAN> <tex2html_verbatim_mark> mod 3 = 0, then it is a sunny day. </LI><LI>If <SPAN CLASS="MATH">(<I>j</I><SUP> . </SUP><I>x</I> + <I>k</I>)</SPAN> <tex2html_verbatim_mark> mod 3 = 1, then it is a cloudy day. </LI><LI>If <SPAN CLASS="MATH">(<I>j</I><SUP> . </SUP><I>x</I> + <I>k</I>)</SPAN> <tex2html_verbatim_mark> mod 3 = 2, then it is a rainy day. </LI></UL><P><P><BR>Note that mod is the operator to find the reminder of integer division. The following is an example when <SPAN CLASS="MATH"><I>j</I> = 2</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I> = 1</SPAN> <tex2html_verbatim_mark>:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">2<I>x</I> + 1</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>15</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">(2<I>x</I> + 1)</SPAN> <tex2html_verbatim_mark> mod 3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>0</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>weather</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>raining</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>cloudy</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>raining</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>cloudy</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD></TR></TBODY></TABLE></DIV><P><P><BR>Please use the above formulas to calculate for Miss Kitty, the least integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> so that the total amount of money earned by her is at least <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P>The following is an example when <SPAN CLASS="MATH"><I>m</I> = 100</SPAN> <tex2html_verbatim_mark> using the same values for <SPAN CLASS="MATH"><I>a</I>,<SUP> ... </SUP>, <I>k</I></SPAN> <tex2html_verbatim_mark> as above:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>weather</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>raining</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>cloudy</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>raining</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>cloudy</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>sunny</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>money earn today</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>25</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>64</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>total money earned</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>36</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>42</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>67</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>131</TD></TR></TBODY></TABLE></DIV><P><P><BR>Hence the answer is <SPAN CLASS="MATH"><I>x</I> = 7</SPAN> <tex2html_verbatim_mark>. Miss Kitty needs to open the ice cream for at least 7 days.<P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><OL><LI><!-- MATH
 $0 < m \le 10,000,000$
 --><SPAN CLASS="MATH">0 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4033img1.png ALT="$ \le$">10, 000, 000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is an integer </LI><LI><SPAN CLASS="MATH">-10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4033img1.png ALT="$ \le$"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I>, <I>e</I>, <I>f</I>, <I>g</I>, <I>h</I>, <I>i</I>, <I>j</I>, <I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4033img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, and they are all integers </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer indicating the number of test cases to follow. Then each of the next line contains<P><P><BR><TT>m a b c d e f g h i j k</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the least <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> so that the total amount of money earned is at least <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
100 1 2 1 1 -2 1 0 1 1 2 1 
1234 2 1 2 2 -2 0 1 -5 0 4 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7 
14
</PRE><P>
______________________________________________________
4034||||||false||||||
<P>LIFE is a evolutionary game played on a 2D game board. Initially, the game board is filled with white and black stones. For each iteration of the game, each stone is checked and perhaps changed to the other color according to the rules given below:<P><OL><LI>For each stone <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, if there are more black stones than white stones in the <SPAN CLASS="MATH">3&#215;3</SPAN> <tex2html_verbatim_mark> neightborhood centered at stone <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, then turn stone <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> into a black stone, otherwise, turn it to a white stone. The checking is based on the <SPAN CLASS="textbf">previous</SPAN> iterated game board configuration, and <SPAN CLASS="textbf">NOT</SPAN> the current iteration of intermediate game board. In other words, the check of all stones are done simultaneously. Thus, changing the stone color will not affect any other stone in the same iteration. </LI><LI>The boundary of the game board will remain unchanged throughout all iterations. In other words, there is no need to check the stones located on the boundary of the game board. </LI></OL><P>Please write a program that when given an initial game board configuration and the number of iterations of LIFE, compute and output the number of black and white stones on the resulting game board.<P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><OL><LI>The game board size is <SPAN CLASS="MATH"><I>m</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4034img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4034img1.png ALT="$ \le$">512</SPAN> <tex2html_verbatim_mark>. </LI><LI>The number of iterations is <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4034img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4034img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of test cases to follow. For each test case, the first line contains two integers, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, specifying the game board dimension and number of LIFE iterations. The next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines outline the configuration of the initial <SPAN CLASS="MATH"><I>m</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> game board. Each line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> consecutive characters, where each character is either ``<TT>b</TT>" or ``<TT>w</TT>" denoting black stone or white stone, respectively.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output on a single line the number of black stones and white stones of the resulting game board.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> The final game board configuration for the below two cases are:<P><PRE>
wbwb 
bbbw 
wbbb 
wbwb 

wbbbb 
wwbww 
wwwww 
wwwww 
wwwww
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 1 
wbwb 
bbbw 
wwbb 
wbwb 
5 1 
wbbbb 
wbwbw 
wwwww 
wwwww 
wwwww
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 6 
5 20
</PRE><P>
______________________________________________________
4035||||||false||||||
<P>Mickey is assigned a task to help the puppies to escape by travelling from the south-west corner of a grid to the north-east corner undetected by the set of motion detectors deployed by Cruella. There are <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> motion detectors <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png ALT="$ \le$">300)</SPAN> <tex2html_verbatim_mark> which are placed on the grid points and can detect any motion within a given distance, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, from the detector. Here we adopt <SPAN CLASS="MATH"><I>L</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> metrics for distance measurements, i.e., the distance between two points <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">| <I>x</I><SUB>1</SUB> - <I>x</I><SUB>2</SUB>| + | <I>y</I><SUB>1</SUB> - <I>y</I><SUB>2</SUB>|</SPAN> <tex2html_verbatim_mark>. For example, consider the <SPAN CLASS="MATH">9&#215;9</SPAN> <tex2html_verbatim_mark> grid in the figure below, if the detecting distance of the two detectors, marked with a solid circle, is 3, there exists a tour from (0, 0) to (8, 8) (for example the diagonal is an undetectable tour); however, if the distance is four, there would be no such tour.<P><DIV ALIGN="CENTER"><IMG WIDTH="868" HEIGHT="707" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png ALT="\epsfbox{p4035.eps}"> <tex2html_verbatim_mark></DIV><P>Cruella decides to make it more difficult to escape by setting the detecting distance of the detectors randomly. For each grid, Cruel would ï¬ip coins to decide the detecting distance for all the detectors in that grid. Given the probability distribution of the detecting distance <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> and a series of grids, your task is to write a program to decide for each input grid the probability that it contains an undetectable tour. 

<P>
Each grid is <!-- MATH
 $N \times N$
 -->
<SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN>
<tex2html_verbatim_mark> where <!-- MATH
 $3 \le N \le 10000$
 -->
<SPAN CLASS="MATH">3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$">10000</SPAN>
<tex2html_verbatim_mark>, and each grid point in the grid is denoted by a pair of integers, <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y \le N - 1$
 -->
<SPAN CLASS="MATH"><I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$"><I>N</I> - 1</SPAN>
<tex2html_verbatim_mark>. The probability distribution is specified by a sequence of ordered pair <!-- MATH
 $(d_{1}, p_{1}), (d_{2}, p_{2}), \ldots, (d_{m}, p_{m})$
 -->
<SPAN CLASS="MATH">(<I>d</I><SUB>1</SUB>, <I>p</I><SUB>1</SUB>),(<I>d</I><SUB>2</SUB>, <I>p</I><SUB>2</SUB>),...,(<I>d</I><SUB>m</SUB>, <I>p</I><SUB>m</SUB>)</SPAN>
<tex2html_verbatim_mark> where <!-- MATH
 $1 \le m  \le 100, 1 \le d_{i} \le 2(N - 1)$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$">100, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$"><I>d</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \le$">2(<I>N</I> - 1)</SPAN>
<tex2html_verbatim_mark>, and each <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> has at most three digits after the decimal point. To make it a probability distribution we also have the property that <!-- MATH
 $\sum p_{i} = 1$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="21" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4035img1.png
 ALT="$ \sum$"><I>p</I><SUB>i</SUB> = 1</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains an integer indicating the number of test cases to follow, there will be at most 5 test cases. For each test case, the first line contains two integers, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> separated by a space. Followed by <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines to specify the probability distribution, each line consists <!-- MATH
 $d_{i}, p_{i}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>i</SUB>, <I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Followed by <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> lines of the positions of detectors in the form <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> which is the coordination of the detector. The case ends with a line containing `<TT>-1</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output the probability that the grid contains a undetectable tour.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
3 2 
1 0.5 
2 0.5 
2 0 
-1 
6 3 
1 0.5 
4 0.25 
3 0.25 
5 1 
1 5 
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Samle Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0.5 
0.75
</PRE>

<P>

______________________________________________________
4036||||||false||||||

<P>
According to the trusted source, scientists have found several evidences of creature's existence on a newly found planet, called <SPAN  CLASS="textit">Uggla</SPAN>. These evidences are distributed on <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> locations in a <!-- MATH
 $1000 \times 1000$
 -->
<SPAN CLASS="MATH">1000&#215;1000</SPAN>
<tex2html_verbatim_mark> square area, and the location coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th evidence is <!-- MATH
 $(x_{i} ,y_{i})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN>
<tex2html_verbatim_mark>. It is of our great interests to further analyze all of them so that we can have better understanding of the creatures on <SPAN  CLASS="textit">Uggla</SPAN>. 

<P>
The Interplanetary Creature Protection Council (ICPC) has decided to initiate a mission for the exploration of <SPAN  CLASS="textit">Uggla</SPAN>. More specifically, the ICPC plans to launch a space shuttle to collect the evidences found on <SPAN  CLASS="textit">Uggla</SPAN>. However, for safety reason, the space shuttle will not land on <SPAN  CLASS="textit">Uggla</SPAN>, but it will launch one mobile robot to collect information of the evidences instead. Since the mobile robot is un-recyclable (i.e., they can only be landed once), it will report the space shuttle its collected data using wireless communications. 

<P>
Unfortunately, after the launch of the space shuttle, a serious design fault of the mobile robot is also reported. That is <SPAN  CLASS="textit">the mobile robot can only move straightly, but can not make a turn</SPAN>. Since the space shuttle only carries one robot, being the captain of the space shuttle, it is now your responsibility to plan a route (i.e., where to land the robot and which direction the robot should move forward) such that the robot can visit as many locations as possible. Note that, each distinct route is a set of evidence's locations, regardless of the order of the location coordinates and the landing location of the mobile robot.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Technical Specification</SPAN>

<P>

<OL>
<LI><!-- MATH
 $1 < k \le 1000$
 -->
<SPAN CLASS="MATH">1 &lt; <I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>. 
</LI>
<LI><!-- MATH
 $x_{i} \in N \mbox{ and } 0 < x_{i} \le 1000, \mbox{ for } i = 1 \ldots k$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \in$"> <I>N</I> and 0 &lt; <I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \le$">1000, for <I>i</I> = 1...<I>k</I></SPAN>
<tex2html_verbatim_mark>. 
</LI>
<LI><!-- MATH
 $y_{i} \in N \mbox{ and } 0 < y_{i} \le 1000, \mbox{ for } i = 1 \ldots k$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>i</SUB> <IMG
 WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \in$"> <I>N</I> and 0 &lt; <I>y</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \le$">1000, for <I>i</I> = 1...<I>k</I></SPAN>
<tex2html_verbatim_mark>. 
</LI>
<LI><!-- MATH
 $\forall i \neq j, (x_{i},y_{i}) \neq (x_{j} ,y_{j})$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="14" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \forall$"><I>i</I> <IMG
 WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \neq$"> <I>j</I>,(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>) <IMG
 WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4036img1.png
 ALT="$ \neq$"> (<I>x</I><SUB>j</SUB>, <I>y</I><SUB>j</SUB>)</SPAN>
<tex2html_verbatim_mark> , i.e., each evidence is located on a distinct coordinate.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains an integer indicating the number of test cases to follow. In each test case, the first input line is an integer <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> indicating the number of evidences on <SPAN  CLASS="textit">Uggla</SPAN>, and in the following <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> lines, each line contains two integers, separated by one while space, indicating the <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> coordinates of each evidence of creature's existence.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, output two integers, separated by one while space, in a line. The first integer is the maximum number of evidence locations that the mobile robot can visit, and the second integer is the number of distinct routes that can yield the maximum number of visited evidence locations.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
5 
1 1 
1 2 
1 3 
2 1
2 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 1
</PRE>

<P>

______________________________________________________
4037||||||false||||||
<P>Write a program to find the longest racing route in Taipei city. We are given a city map of Taipei as in the following figure. All the streets are either horizontal or vertical.<P><DIV ALIGN="CENTER"><IMG WIDTH="343" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4037a.png ALT="\epsfbox{p4037a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: The map of Taipei.</DIV><P>You must find the longest race route in Taipei. A race route is a circle that travels only along the streets of Taipei. When a race car reaches an intersection, it can go through the intersection, or it can make a left turn, or it can make a right turn, but it cannot make an u-turn. A race route must start and end at the same intersection, and it can make at most <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> turns. We also assume that all the streets in Taipei are two-way. The following figure is a race route that makes eight turns.<P><DIV ALIGN="CENTER"><IMG WIDTH="344" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4037a.png ALT="\epsfbox{p4037b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: A race route that makes 8 turns.</DIV><P>Now given the locations of all Taipei city streets and the number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, please compute the length of the longest race route that makes at most <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> turns.<P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><OL><LI>The number of test cases <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is no more than 25. </LI><LI>The number of turns <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is no more than 2147483647. </LI><LI>The number of streets <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is no more than 20. </LI><LI>The x and y coordinates of the street is between -2147483648 and 2147483647, inclusively. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> indicating the number of test cases to follow. The first line of an input case has two numbers -- <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> for the number of turns and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> for the number of streets. Each of the next <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> lines represents one street with four numbers -- the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the first endpoint and the the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the second endpoint.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There will be <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> lines of output. Each line has the length of the longest race route that makes at most <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> turns. If no such route exists, please output `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
8 4 
-1 0 2 0 
-1 1 5 1 
0 -4 0 10 
1 8 1 -5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P>
______________________________________________________
4038||||||false||||||
<P>A tree is drawn on a grid as in Fig. 1. The tree has trunks, trunks have branches, and branches have leaves. Let the tree always grow from the origin (0,0). A trunk, branch, or leaf can grow in 8 different directions. So, a tree has maximum 8 trunks, a trunk has maximum 8 branches, and a branch has maximum 8 leafs. There are joints between trunks, branches, and leaves.<P>The length of a trunk, branch, and leaf is 8,4, and 2 respectively. The weight of a trunk, branch, and leaf is equal to its length. The tree grows on a grid. Each grid has length equal to 1 and its diagonal length is treated as 1 as well. So in Fig. 1, trunk 1 looks longer than trunk 2 but they are of the same length.<P><DIV ALIGN="CENTER"><IMG WIDTH="572" HEIGHT="610" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4038.png ALT="\epsfbox{p4038.eps}"> <tex2html_verbatim_mark></DIV><P>Suppose a new leaf must grow from joint 2-1 in the direction marked by the double arrow. This new leaf will collide with leaf 1-1-1, forcing leaf 1-1-1 to do something. First, joint 1-1 can rotate all its leaves by 45 degree clockwise or counterclockwise. The correct answer in this case is to rotate the joint by 45 degree counterclockwise and then the new leaf has room to grow. However, if joint 1-1 has full 8 leaves, no matter how joint 1-1 is rotated, the new leaf can not grow. In this case, joint 1 should be rotated. The origin is a joint too. However, rotating it is meaningless.<P><P><BR><B>Notes:</B><UL><LI>A rotation that overlaps leaves with its parent branch or branches with their parent trunk is not a valid solution. For example, at joint 1-1 you cannot rotate 90 degree clockwise because leaf 1-1-1 will overlap with its parent branch 1-1. </LI><LI>All leaves of a joint and all branches of a joint must rotate together. For example, you cannot rotate leaf 1-1-2 alone. Leaf 1-1-1 and leaf 1-1-2 always rotate at the same time, maintaining 45 degree angle with each other. </LI><LI>The trunk and branch of the new growing leaf can not be rotated and moved. </LI></UL><P>The rotation of leaves, however, has cost. A 45 degree rotation at a joint is considered as one move. The cost to rotate a joint is<P><P><BR><SPAN CLASS="MATH"><I>num</I>&nbsp;<I>of</I>&nbsp;<I>moves</I> <TT>*</TT> <I>weights</I>&nbsp;<I>of</I> (<I>leaves</I>, <I>branches</I>, <I>and</I>&nbsp;<I>trunks</I>)</SPAN> <tex2html_verbatim_mark><P><P><BR>So, to rotate joint 1-1 by 45 degree, it costs <SPAN CLASS="MATH">1 <TT>*</TT> (2 + 2) = 4</SPAN> <tex2html_verbatim_mark>. To rotate joint 1 by 45 degree, it cost <SPAN CLASS="MATH">1 <TT>*</TT> (2 + 2 + 2 + 4 + 4) = 14</SPAN> <tex2html_verbatim_mark>. Your goal is to write a program for the tree. When there is a new leaf to grow from a joint, please compute the rotations and moves with minimum cost. Note that a 270 degree clockwise rotation is equal to a 90 degree counterclockwise, which needs only two moves not 6 moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The test data begins with the number of test cases. There is an empty line between test cases. A test case begins with the data of the trunks. Each trunk is described as <SPAN CLASS="MATH">(<I>T</I>&nbsp;<I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> is the starting location of the trunk and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is the end location of the trunk. Following <SPAN CLASS="MATH">(<I>T</I>&nbsp;<I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> are <SPAN CLASS="MATH">(<I>B</I>&nbsp;<I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>, the information of branches. The data of leaves <SPAN CLASS="MATH">(<I>L</I>&nbsp;<I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> should follow the branches immediately.<P>When a character `<TT>G</TT>' appears, the data of the tree is ended. The coordinates behind <TT>G</TT> are where the new leaf is supposed to grow.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please print the minimum cost in a line for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
T 0 0 8 8 
B 8 8 12 4 
L 12 4 10 2 
L 12 4 12 2 
B 8 8 12 8 
L 12 8 12 10
T 0 0 8 0
B 8 0 8 4 
L 8 4 10 4 
G 8 4 10 2 

T 0 0 8 8 
B 8 8 12 4 
L 12 4 10 2 
L 12 4 12 2 
B 8 8 12 8 
L 12 8 12 10 
T 0 0 8 0 
B 8 0 8 4 
L 8 4 10 4 
G 8 4 10 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Samle Output</A>&nbsp;</FONT></H2><P><PRE>
4 
14
</PRE><P>
______________________________________________________
4039||||||false||||||

<P>
A traveller, Yuan-Ling is visiting Tainan City. This city is located Southern TAIWAN, famous for traditionally old cities. There are several historic sites in Tainan city, some of which are connected by shopping streets. For convenience, we can view the historic sites and streets as a graph such that historic sites are represented by nodes and streets are represented by edges. The edges have nonnegative weights representing distance or time. Yuan-Ling would like to traverse all the streets, starting and ending at historic site ``Tainan Main Station". Your task is to help Yuan-Ling seek a closed walk that minimizes the total weight (the sum of the edges' weights in the walk) such that all the streets are traversed at least once. We call such a walk as a minimum closed walk. A walk is a list <!-- MATH
 $v_{0}, e_{1}, v_{1}, \ldots, e_{k}, v_{k}$
 -->
<SPAN CLASS="MATH"><I>v</I><SUB>0</SUB>, <I>e</I><SUB>1</SUB>, <I>v</I><SUB>1</SUB>,..., <I>e</I><SUB>k</SUB>, <I>v</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> of nodes and edges such that, for <!-- MATH
 $1 \le i \le k$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$"><I>k</I></SPAN>
<tex2html_verbatim_mark>, the edge <SPAN CLASS="MATH"><I>e</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> has endpoints <SPAN CLASS="MATH"><I>v</I><SUB>i-1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Note that a walk may repeat nodes and edges. A walk is closed if its end-nodes are the same. 

<P>
Given a graph <!-- MATH
 $G = (V, E)$
 -->
<SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>
<tex2html_verbatim_mark>, we use <!-- MATH
 $1, 2, \ldots, |V|$
 -->
<SPAN CLASS="MATH">1, 2,...,| <I>V</I>|</SPAN>
<tex2html_verbatim_mark> to represent the nodes. Each edge <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN>
<tex2html_verbatim_mark> is associated with the weight <SPAN CLASS="MATH"><I>w</I>(<I>u</I>, <I>v</I>)</SPAN>
<tex2html_verbatim_mark> that is a positive integer. Your task is to write a computer program to compute the weight of a minimum closed walk that traverses all the edges at least once.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Technical Specification</SPAN>

<P>

<OL>
<LI><!-- MATH
 $G = (V, E)$
 -->
<SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>
<tex2html_verbatim_mark> is connected. 
</LI>
<LI><!-- MATH
 $2 \le |V| \le 100$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$">| <I>V</I>|<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. 
</LI>
<LI><!-- MATH
 $1 \le |E| \le 4950$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$">| <I>E</I>|<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$">4950</SPAN>
<tex2html_verbatim_mark> 
</LI>
<LI>For each edge <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>)</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le w(u, v) \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$"><I>w</I>(<I>u</I>, <I>v</I>)<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4039img1.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains an integer indicating the number of test cases to follow. The input consists of a number of test cases. Each test case consists of a graph <!-- MATH
 $G = (V, E)$
 -->
<SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN>
<tex2html_verbatim_mark>, which has the following format: the first line contains two numbers, <SPAN CLASS="MATH"><I>n</I>(= | <I>V</I>|)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I>(= | <I>E</I>|)</SPAN>
<tex2html_verbatim_mark>, separated by a single space. The next <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines contain the description of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> edges and the corresponding weights such that one line contains two end-nodes of an edge and the corresponding weight. Each line is represented by three positive numbers separated by a single space; the first number representing one end-node, the second representing the other end-node, and the third representing its weight. Finally, a 0 at the <SPAN CLASS="MATH">(<I>m</I> + 2)</SPAN>
<tex2html_verbatim_mark>th line indicates the end of this test case.

<P>
The next test case starts after the previous ending symbol `<TT>0</TT>'. A `<TT>-1</TT>' signals the end of the whole inputs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The output contains one line for each test case. Each line contains an integer, which is the weight of a minimum closed walk that traverses all the edges at least once.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
3 2 
1 2 1
1 3 1
0 
3 3 
1 2 2
2 3 2
3 1 2
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
6
</PRE> 

<P>

______________________________________________________
4040||||||false||||||
<P>The Fun-To-Play company is designing a maze to train a robot. The maze has several check points, each with 3 doors labeled as <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The robot has to choose a door to continue his journey. Some of the check points have a hidden door which will only show up when the battery of the robot runs out. There is no hint for which door leads to which check point and some of the doors may lead back to the same check point. The robot will keep moving until the battery runs out. If the robot stops at a check point with the hidden door when the battery runs out, the robot gets a credit. Assume that the time needed for a robot to choose a door and move on to a check point is always the same, and, for simplicity sake, can be considered as one time unit. Also assume that the battery can run for <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> time units. Your mission is to find the number of different ways for the robot to get credits with the given maze and battery life.<P>The maze may be modeled by a finite state machine <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. The input alphabets are <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Each check points is a state of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. The entry is the starting state and the check point with hidden doors are the final states. State <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> with input a map to state <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> if the door a in check point <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> leads to check point <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. Then the solution is the same as finding the different number of strings over alphabets <SPAN CLASS="MATH">{<I>a</I>, <I>b</I>, <I>c</I>}</SPAN> <tex2html_verbatim_mark> with length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> that are accepted by machine <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P>Figure 1 shows an example of a maze represented by a finite state machine <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. State 1 is the starting state and the final states are indicated by double circles. Given <SPAN CLASS="MATH"><I>L</I> = 4</SPAN> <tex2html_verbatim_mark>, there are only 4 possible strings <SPAN CLASS="MATH"><I>aaac</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>abac</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>acbc</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>acac</I></SPAN> <tex2html_verbatim_mark> that can be accepted by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="541" HEIGHT="326" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4040.png ALT="\epsfbox{p4040.eps}"> <tex2html_verbatim_mark></DIV><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4040.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4040.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> states. </LI><LI>The state 1 is always the starting state. </LI><LI>Each state has exactly 3 transitions with input <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> respectively. </LI><LI>There is at least 1 final state. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer indicating the number of test cases to follow. The first line of each test case contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (less than 100) indicating the number of states in the test case. Each of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> following lines will contain the description of one state. Each state is described by a sequence of five integers, the first as the name of the state, followed by three indicating the transitions to the next state of each input alphabet <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> respectively. The last integer is `<TT>1</TT>' if the state is a final state and `<TT>0</TT>' otherwise. The last line of the test case is an integer (not larger then 20) denoting the length of the input strings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line with a single integer, indicating the number of different strings that are accepted by the finite state machine (the number of different ways that the robot may take to win).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
1 2 4 4 0
2 2 1 3 0
3 1 2 2 1
4 4 4 4 0
4 
8 
1 2 3 4 0
2 1 5 6 0
3 1 5 7 0
4 1 6 7 0
5 2 3 8 0
6 2 4 8 0
7 3 4 8 0
8 5 6 7 1
9
5
1 2 4 5 1
2 1 3 5 0
3 4 2 5 1
4 3 1 5 0 
5 5 5 5 0  
19
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
4920 
0
</PRE><P>
______________________________________________________
4041||||||false||||||
<P>Eventown has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> inhabitants. Each pair of the citizens has a friendship index between them, which can be any integer between <SPAN CLASS="MATH">- <I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">+ <I>M</I></SPAN> <tex2html_verbatim_mark>. More specifically, for citizen <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \neq$"> <I>j</I>)</SPAN> <tex2html_verbatim_mark>, we use <SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark> to denote their friendship index. Suppose <SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>j</I>] = <I>f</I>[<I>j</I>, <I>i</I>]</SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>j</I>] = 0</SPAN> <tex2html_verbatim_mark>, then it means <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> don't know each other; else if <!-- MATH
 $f[i, j] < 0$
 --><SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>j</I>] &lt; 0</SPAN> <tex2html_verbatim_mark>, then they don't like each other; else they like each other. The citizens of Eventown wish to form two clubs such that every citizen belongs to exactly one club. We use <SPAN CLASS="MATH"><I>S</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark> to indicate if citizens <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> join the same club, i.e., if <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> join the same club then <SPAN CLASS="MATH"><I>S</I>[<I>i</I>, <I>j</I>] = 1</SPAN> <tex2html_verbatim_mark>; 0 otherwise. We say citizen <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is happy if <SPAN CLASS="MATH"><IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \sum_{{j}}^{}$">(- 1)<SUP>1-S[i, j]</SUP><I>f</I>[<I>i</I>, <I>j</I>]<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \ge$"> 0</SPAN> <tex2html_verbatim_mark>. So the mayor of Eventown wants to know how to form the two clubs to achieve the maximum happiness. I.e., you need to write a program to determine the values of <SPAN CLASS="MATH"><I>S</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark>'s in order to maximize <SPAN CLASS="MATH"><IMG WIDTH="27" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \sum_{{i}}^{}$"><IMG WIDTH="28" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \sum_{{j}}^{}$">(- 1)<SUP>1-S[i, j]</SUP><I>f</I>[<I>i</I>, <I>j</I>]</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input is the number of test cases. For each test case, the first line contains two integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, and then there follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, where the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th element in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \le$"><I>i</I>, <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark> contains the value of <SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>j</I>] <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4041img1.png ALT="$ \in$"> [- <I>M</I>,<SUP> ... </SUP>, + <I>M</I>]</SPAN> <tex2html_verbatim_mark>. Here we let <SPAN CLASS="MATH"><I>f</I>[<I>i</I>, <I>i</I>] = 0</SPAN> <tex2html_verbatim_mark>, for <SPAN CLASS="MATH"><I>i</I> = 1,..., <I>N</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is at most 30 and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is at most 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, the output contains the corresponding maximum value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3  2 
0  1  2 
1  0 -1 
2 -1  0 
5  2 
0  2  0  1  0 
2  0  2  0  0 
0  2  0 -1  1 
1  0 -1  0 -2 
0  0  1 -2  0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
14
</PRE><P>
______________________________________________________
4042||||||false||||||
<P>Let <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN> <tex2html_verbatim_mark> be any two ordered pairs of positive integers. We define two binary operators <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> on <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>c</I>, <I>d</I> )</SPAN> <tex2html_verbatim_mark> in the postfix form as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(<I>a</I>, <I>b</I>)(<I>c</I>, <I>d</I> )<I>X</I> = (<I>a</I> + <I>c</I>, <I>max</I>(<I>b</I>, <I>d</I> )),</DIV><P><tex2html_verbatim_mark></P><P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">(<I>a</I>, <I>b</I>)(<I>c</I>, <I>d</I> )<I>Y</I> = (<I>max</I>(<I>a</I>, <I>c</I>), <I>b</I> + <I>d</I> ),</DIV><P><tex2html_verbatim_mark></P>where the <SPAN CLASS="MATH">max</SPAN> <tex2html_verbatim_mark> function returns the largest one between two numbers. The result of performing an <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> operation or a <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> operation is also an ordered pair of positive integers.<P>For any integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4042img1.png ALT="$ \ge$">2)</SPAN> <tex2html_verbatim_mark>, a postfix expression <SPAN CLASS="MATH"><I>Z</I> = <I>z</I><SUB>1</SUB><I>z</I><SUB>2</SUB><SUP> ... </SUP><I>z</I><SUB>2n-1</SUB></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark> consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> operands (each of which is an ordered pair of positive integers) and <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> operators (each of which is <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>), and meets the following condition: For each sub-expression <SPAN CLASS="MATH"><I>Z</I><SUB>i</SUB> = <I>z</I><SUB>1</SUB><I>z</I><SUB>2</SUB><SUP> ... </SUP><I>z</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4042img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4042img1.png ALT="$ \le$">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, the number of operands is greater than the number of operators. The value of <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> is also an ordered pair of positive integers and can be obtained by a procedure similar to the evaluation of an ordinary arithmetic expression in the postfix form except that operands are ordered pairs of positive integers and operators are restricted to <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>. Once the value, say <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>)</SPAN> <tex2html_verbatim_mark>, of <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> is known, we can further compute the product of <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>, which is defined to be <SPAN CLASS="MATH"><I>a</I>&#215;<I>b</I></SPAN> <tex2html_verbatim_mark>.<P>The following example illustrates the evaluation process. Suppose <SPAN CLASS="MATH"><I>n</I> = 3</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Z</I> = (1, 2)(1, 3)<I>X</I>(2, 1)<I>Y</I></SPAN> <tex2html_verbatim_mark>. The evaluation works as follows. It first evaluates (1, 2) (1, 3) <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> to get (2, 3), and then evaluates (2, 3) (2, 1) <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> to get (2, 4). Therefore the value of <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> in this example is (2, 4) and the product of <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> is 8.<P>Now let's make things a bit complicated. Given a <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, let each <SPAN CLASS="MATH"><I>z</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> in <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> be a variable. To simplify the description, let's rewrite <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark> as a permutation of <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark> integers, where each positive integer <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> between 1 and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> appears exactly once and denotes operand <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and the integer 0 appears <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> times and denotes an operator. Each operand <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> has a set of <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4042img1.png ALT="$ \ge$">1)</SPAN> <tex2html_verbatim_mark> ordered pairs of positive integers to choose from, and each operator has the two operator types <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> to choose from. As a result, by fixing a choice for each of the operands and operators in <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>, we can get an expression and its corresponding product. This problem asks you to find the minimum product among all possible expressions.<P>Here is an example problem instance. Suppose <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Z</I> =</SPAN> <tex2html_verbatim_mark> 2 1 0, and operands 1 and 2 are associated with <SPAN CLASS="MATH">{(1, 2),(2, 1)}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">{(1, 3)}</SPAN> <tex2html_verbatim_mark>, respectively. There are a total of 4 possible expressions: <SPAN CLASS="MATH">(1, 3)(1, 2)<I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1, 3)(1, 2)<I>Y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1, 3)(2, 1)<I>X</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">(1, 3)(2, 1)<I>Y</I></SPAN> <tex2html_verbatim_mark>. The minimum product among the four expressions is 5.<P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><OL><LI>In this problem, it is assumed that <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is at most 2000, each <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is at most 20, and the largest number among all given ordered pairs of positive integers is at most 4000, and the minimum product can be represented with a 32-bit integer. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of an input file consists of a single number denoting the number of test cases in the file. For each test case, the input format is as follows. The first line gives <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. For the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th line gives an even number of positive integers to specify the set of <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> ordered pairs of positive integers for operand <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, where the first and second numbers form the first ordered pair, the third and fourth numbers form the second ordered pair, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, etc. The last line gives <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark> integers to specify a postfix expression of length <SPAN CLASS="MATH">2<I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, where a positive integer <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> denotes operand <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and 0 denotes an operator.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print out the minimum product on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
1 2 2 1 
1 3 
2 1 0 
3 
1 2 
1 3 
2 1 
1 2 0 3 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
8

______________________________________________________
4043||||||false||||||
<P>Young naturalist Bill studies ants in school. His ants feed on plant-louses that live on apple trees. Each ant colony needs its own apple tree to feed itself.<P>Bill has a map with coordinates of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ant colonies and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> apple trees. He knows that ants travel from their colony to their feeding places and back using chemically tagged routes. The routes cannot intersect each other or ants will get confused and get to the wrong colony or tree, thus spurring a war between colonies.<P>Bill would like to connect each ant colony to a single apple tree so that all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> routes are non-intersecting straight lines. In this problem such connection is always possible. Your task is to write a program that finds such connection.<P><DIV ALIGN="CENTER"><IMG WIDTH="260" HEIGHT="255" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4043.png ALT="\epsfbox{p4043.eps}"> <tex2html_verbatim_mark></DIV><P>On this picture ant colonies are denoted by empty circles and apple trees are denoted by filled circles. One possible connection is denoted by lines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input has several dataset. The first line of each dataset contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4043.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4043.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> -- the number of ant colonies and apple trees. It is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ant colonies, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> apple trees. Each ant colony and apple tree is described by a pair of integer coordinates <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4043.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4043.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> on a Cartesian plane. All ant colonies and apple trees occupy distinct points on a plane. No three points are on the same line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines with one integer number on each line. The number written on <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line denotes the number (from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) of the apple tree that is connected to the <SPAN CLASS="MATH"><I>i</I></SPAN> i<tex2html_verbatim_mark>-th ant colony. Print a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
-42 58 
44 86 
7 28 
99 34 
-13 -59 
-47 -44 
86 74 
68 -75 
-68 60 
99 -60
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
1 
5 
3
</PRE><P>
______________________________________________________
4044||||||false||||||
<P>The United Nations has decided to build a new headquarters in Saint Petersburg, Russia. It will have a form of a rectangular parallelepiped and will consist of several rectangular floors, one on top of another. Each floor is a rectangular grid of the same dimensions, each cell of this grid is an office.<P>Two offices are considered adjacent if they are located on the same floor and share a common wall, or if one's floor is the other's ceiling.<P>The St. Petersburg building will host <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> national missions. Each country gets several offices that form a connected set.<P>Moreover, modern political situation shows that countries might want to form secret coalitions. For that to be possible, each pair of countries must have at least one pair of adjacent offices, so that they can raise the wall or the ceiling they share to perform secret pair-wise negotiations just in case they need to.<P>You are hired to design an appropriate building for the UN.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. Each of them has a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4044img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4044img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> -- the number of countries that are hosted in the building.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>On the first line of the output for each dataset write three integer numbers <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> -- height, width and length of the building respectively.<P><SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> descriptions of floors should follow. Each floor description consists of <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> characters on each line. Separate descriptions of adjacent floors with an empty line.<P>Use capital and small Latin letters to denote offices of different countries. There should be at most 1 000 000 offices in the building. Each office should be occupied by a country. There should be exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> different countries in the building. In this problem the required building design always exists. Print a blank line between test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2 2 
AB 
CC 

zz 
zz
</PRE><P>
______________________________________________________
4045||||||false||||||
<P><SPAN CLASS="textit">Cactus</SPAN> is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively cactus is a generalization of a tree where some cycles are allowed. Your task is to find a <SPAN CLASS="textit">diameter</SPAN> of the given cactus. Diameter is the maximal length of the shortest path between pairs of vertices.<P><DIV ALIGN="CENTER"><IMG WIDTH="320" HEIGHT="386" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="\epsfbox{p4045.eps}"> <tex2html_verbatim_mark></DIV><P>For example, on the picture above the shortest path between vertices 6 and 12 goes through 8 edges and it is the maximal shortest path in this graph, thus its diameter is 8.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains two integer numbers <SPAN CLASSi="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$">50000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of vertices in the graph. Vertices are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Edges of the graph are represented by a set of edge-distinct paths, where <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of such paths.<P>Each of the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains a path in the graph. A path starts with an integer number <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$"><I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4045.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> followed by <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> integers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. These <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> integers represent vertices of a path. Adjacent vertices in a path are distinct. Path can go to the same vertex multiple times, but every edge is traversed exactly once in the whole input file. There are no multiedges in the graph (there is at most one edge between any two vertices).<P>The graph in the input file is a cactus.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file a single integer number - the diameter of the given cactus.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
15 3 
9 1 2 3 4 5 6 7 8 3 
7 2 9 10 11 12 13 10 
5 2 14 9 15 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P>
______________________________________________________
4046||||||false||||||
<P>Diver had just completed her mission in the depths of the ocean and needs to resurface. To get to the surface she must use the rope that goes straight down from her boat on the surface to her location <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> feet under the water. However, while she was working, several sharks gathered near the rope. They do not consider her a danger or a prey yet, but if she gets closer than <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> feet to a shark, then it immediately attacks her.<P>To avoid decompression sickness diver can descend (go down) or ascend (go up) at most <SPAN CLASS="MATH"><I>v</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> feet per second. She also cannot go deeper than <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> feet under the water.<P>Each shark swims at its own constant depth of <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> feet near the rope. Speed and the pattern of movement for all sharks is the same. They cannot just stay in the water near the rope. They have to swim to avoid sinking, so they swim in a back-and-forth motion with a constant speed of <SPAN CLASS="MATH"><I>v</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark> - swimming away from the rope on distance of <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> feet and swimming back to the rope again. Sharks change the direction of their movement so fast, that we consider it being instantaneous. When a shark attacks the diver it also moves so fast, that we consider it to happen instantaneously as soon as the diver is inside a circle of <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> feet in radius around a shark.<P><DIV ALIGN="CENTER"><IMG WIDTH="345" HEIGHT="267" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="\epsfbox{p4046.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to figure out if the diver can get to the surface without being attacked by a shark, and if yes, then how fast she can do it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input conststs of several datasets. The first line of each dataset contains 6 integer numbers:<P><P><BR><UL><LI><SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> -- initial depth of the diver. </LI><LI><SPAN CLASS="MATH"><I>v</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>v</I><SUB>d</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> -- maximal speed of the diver. </LI><LI><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> -- number of sharks. </LI><LI><SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> -- minimal safe distance between a shark and the diver. </LI><LI><SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> -- maximal distance that a shark swims away from the rope. </LI><LI><SPAN CLASS="MATH"><I>v</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>v</I><SUB>s</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> -- speed of a shark. </LI></UL><P><P><BR>Then follow <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describing sharks with 3 integer numbers per line for each shark:<P><P><BR><UL><LI><SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le d_{i} < d)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>d</I><SUB>i</SUB> &lt; <I>d</I> )</SPAN> <tex2html_verbatim_mark> -- depth of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th shark. </LI><LI><SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>w</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4046.png ALT="$ \le$"><I>w</I>)</SPAN> <tex2html_verbatim_mark> -- initial distance from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th shark to the rope. </LI><LI><SPAN CLASS="MATH"><I>f</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>f</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is 1 or -1) -- initial direction of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th shark's movement in relation to the rope (1 if it swims away from the rope, or -1 if it swims to the rope). </LI></UL><P><P><BR>Initially the diver is more than <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> feet from any shark.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file <TT>IMPOSSIBLE</TT> if the diver cannot get to the surface or write the minimal time that it will take the diver to resurface with precision of at least <SPAN CLASS="MATH">10<SUP>-5</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 1 2 1 10 1 
6 4 -1 
1 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT> </H2><P><PRE>
11.414213562373096
</PRE><P>
______________________________________________________
4047||||||false||||||
<P>Your task is to solve an equation of the form <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = 0</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> is written in postfix notation with numbers, operations <TT>+</TT>, <TT>-</TT>, <TT>*</TT>, <TT>/</TT>, and at most one occurrence of a variable <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.<P>For example, <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> for an equation <SPAN CLASS="MATH">(4<I>x</I> + 2)/2 = 0</SPAN> <tex2html_verbatim_mark> is written as:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=1 BORDER FRAME=BOX RULES=NONE><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><TT>4 X * 2 + 2 /</TT></TD></TR></TABLE></DIV><P><P><BR>The solution for <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = 0</SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>x</I> = - 1/2</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several equation, each of them in a single line with at most 30 tokens separated by spaces. Each token is either:<P><P><BR><UL><LI>a digit from 0 to 9; </LI><LI>an operation <TT>+</TT>, <TT>-</TT>, <TT>*</TT>, or <TT>/</TT>; </LI><LI>an uppercase letter <TT>X</TT> that denotes variable <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. </LI></UL><P><P><BR>The input file contains a correct representation of <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> in postfix notation where token <TT>X</TT> occurs at most once. There is no division by a constant zero in this equation, that is, there always exists a value of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>f</I> (<I>x</I>)</SPAN> <tex2html_verbatim_mark> can be evaluated without division by zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write to the output file:<P><P><BR><UL><LI><TT>X</TT> <SPAN CLASS="MATH">= <I>p</I>/<I>q</I></SPAN> <tex2html_verbatim_mark> if equation <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = 0</SPAN> <tex2html_verbatim_mark> has a single solution that can be represented with a simple fraction <SPAN CLASS="MATH"><I>p</I>/<I>q</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> are coprime integer numbers and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> is positive. </LI><LI><TT>NONE</TT> if equation <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = 0</SPAN> <tex2html_verbatim_mark> has no solution; </LI><LI><TT>MULTIPLE</TT> if equation <SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = 0</SPAN> <tex2html_verbatim_mark> has multiple solutions. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 X * 2 + 2 /
2 2 * 
0 2 X / *
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
X = -1/2 
NONE 
MULTIPLE
</PRE><P>
______________________________________________________
4048||||||false||||||
<P>Frank is a portfolio manager of a closed-end fund for <SPAN CLASS="textit">Advanced Commercial Markets</SPAN> (ACM ). Fund collects money (cash) from individual investors for a certain period of time and invests cash into various securities in accordance with fund's investment strategy. At the end of the period all assets are sold out and cash is distributed among individual investors of the fund proportionally to their share of original investment.<P>Frank manages equity fund that invests money into stock market. His strategy is explained below.<P>Frank's fund has collected <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> US Dollars (USD) from individual investors to manage them for <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> days. Management is performed on a day by day basis. Frank has selected <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> stocks to invest into. Depending on the overall price range and availability of each stock, a <SPAN CLASS="textit">lot size</SPAN> was chosen for each stock -- the number of shares of the stock Frank can buy or sell per day without affecting the market too much by his trades. So, if the price of the stock is <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> USD per share and the lot size of the corresponding stock is <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, then Frank can spend <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> USD to buy one lot of the corresponding stock for his fund if the fund has enough cash left, thus decreasing available cash in the fund. This trade is completely performed in one day.<P>When price of the stock changes to <SPAN CLASS="MATH"><I>p'</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> later, then Frank can sell this lot for <SPAN CLASS="MATH"><I>p'</I><SUB>i</SUB><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> USD, thus increasing available cash for further trading. This trade is also completely performed in one day. All lots of stocks that are held by the fund must be sold by the end of the fund's period, so that at the end (like at the beginning) the fund is holding only cash.<P>Each stock has its own volatility and risks, so to minimize the overall risk of the fund, for each stock there is the maximum number of lots <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> that can be held by the fund at any given day. There is also the overall limit <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> on the number of lots of all stocks that the fund can hold at any given day.<P>Any trade to buy or sell one lot of stock completely occupies Frank's day, and thus he can perform at most one such trade per day. Frank is not allowed to buy partial lots if there is not enough cash in the fund for a whole lot at the time of purchase.<P>Now, when fund's period has ended, Frank wants to know what is the maximum profit he could have made with this strategy having known the prices of each stock in advance. Your task is to write a program to find it out.<P>It is assumed that there is a single price for each stock for each day that Frank could have bought or sold shares of the stock at. Any overheads such as fees and commissions are ignored, and thus cash spent to buy or gained on a sell of one lot of stock is exactly equal to its price on this day multiplied by the number of shares in a lot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists on several datasets. The first line of each dataset contains four numbers -- <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0.01<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$">100000000.00)</SPAN> <tex2html_verbatim_mark> is the amount of cash collected from individual investors up to a cent (up to two digits after decimal point); <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> is the number of days in the fund's lifetime; <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$">8)</SPAN> <tex2html_verbatim_mark> is the number of stocks selected by Frank for trading; <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$">8)</SPAN> <tex2html_verbatim_mark> is the overall limit on the number of lots the fund can hold at any time.<P>The following <SPAN CLASS="MATH">2<I>n</I></SPAN> <tex2html_verbatim_mark> lines describe stocks and their prices with two lines per stock.<P>The first line for each stock contains the stock name followed by two integer numbers <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>s</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$">1000000)</SPAN> <tex2html_verbatim_mark> is the lot size of the given stock, and <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4048img1.png ALT="$ \le$"><I>k</I>)</SPAN> <tex2html_verbatim_mark> is the number of lots of this stock the fund can hold at any time. Stock name consists of 1 to 5 capital Latin letters from ``<TT>A</TT>" to ``<TT>Z</TT>". All stock names in the input file are distinct.<P>The second line for each stock contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> decimal numbers separated by spaces that denote prices of the corresponding stock for each day in the fund's lifetime. Stock prices are in range from 0.01 to 999.99 (inclusive) given up to a cent (up to two digits after decimal point).<P>Cash and prices in the input file are formatted as a string of decimal digits, optionally followed by a dot with one or two digits after a dot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file <SPAN CLASS="MATH"><I>m</I> + 1</SPAN> <tex2html_verbatim_mark> lines. Print a blank line between datasets.<P>On the first line write a single decimal number -- the precise value for the maximal amount of cash that can be collected in the fund by the end of its period. The answer will not exceed 1 000 000 000.00. Cash must be formatted as a string of decimal digits, optionally followed by a dot with one or two digits after a dot.<P>On the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines write the description of Frank's actions for each day that he should have made in order to realize this profit. Write <TT>BUY</TT> followed by a space and a stock name for buying a stock. Write <TT>SELL</TT> followed by a space and a stock name for selling a stock. Write <TT>HOLD</TT> if nothing should have been done on that day.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
144624.00 9 5 3 
IBM 500 3 
97.27 98.31 97.42 98.9 100.07 98.89 98.65 99.34 100.82 
GOOG 100 1 
467.59 483.26 487.19 483.58 485.5 489.46 499.72 505 504.28 
JAVA 1000 2 
5.54 5.69 5.6 5.65 5.73 6 6.14 6.06 6.06 
MSFT 250 1 
29.86 29.81 29.64 29.93 29.96 29.66 30.7 31.21 31.16 
ORCL 300 3 
17.51 17.68 17.64 17.86 17.82 17.77 17.39 17.5 17.3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
151205.00 
BUY GOOG 
BUY IBM 
BUY IBM 
HOLD 
SELL IBM 
BUY MSFT 
SELL MSFT 
SELL GOOG 
SELL IBM
</PRE><P>
______________________________________________________
4049||||||false||||||
<P>A group of contestants sits at the round table and plays the following game to relieve anxiety before the start of NEERC 2007. The game is played with a single token that is given to one person at the beginning of the game. This person passes the token to the adjacent person on the left-hand side or to the adjacent person on the right-hand side with a certain probability. A person who receives the token does the same with his own probability and so on. The game ends when each person has received the token at least once. The last person who has received the token wins.<P>The problem is to find the probability of winning for the given person. The probability of passing the token to the left or to the right is individual for each person and is known in advance before the beginning of the game.<P>Contestants are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> so that the person number 2 sits to the right of 1, the person number 3 sits to the right of 2, and so on. The person number 1 sits to the right of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The game starts with the person whose number is specified in the input file and your task is to find the probability of winning for the person number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="211" HEIGHT="203" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="\epsfbox{p4049.eps}"> <tex2html_verbatim_mark></DIV><P>Picture shows 7 contestants at the table with the token given to the person number 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains two integer numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(2 \le n \le 50, 1 \le k < n)$
 --><SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="$ \le$">50, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="$ \le$"><I>k</I> &lt; <I>n</I>)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> denotes the total number of contestants, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> denotes the number of the person who has the token at the beginning of the game.<P>The second line of the input file contains <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> numbers that denote the probabilities <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0.01<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="$ \le$"><I>p</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4049.png ALT="$ \le$">0.99)</SPAN> <tex2html_verbatim_mark> of passing the token to the right for the persons numbered from 1 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. The probability of passing the token to the left for the person number <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH">1 - <I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The probabilities are given with at most 2 digits after decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file a single number that denotes the probability of winning for the person number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> with a precision of at least 6 digits after decimal point.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> all probabilities in the third example are on the same line in the actual input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 3 
0.5 0.5 0.5 0.5 0.5 0.5 

3 1 
0.3 0.6 

24 12 
0.99 0.99 0.99 0.99 0.99 0.99 0.99 0.99 0.99 0.99 0.99 0.5 
0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.1666666667 
0.3000000000
0.9800000000
</PRE><P>
______________________________________________________
4050||||||false||||||

<P>
The ``Hanoi Towers" puzzle consists of three pegs (that we will name <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>) with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> disks of different diameters stacked onto the pegs. Initially all disks are stacked onto peg <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> with the smallest disk at the top and the largest one at the bottom, so that they form a conical shape on peg <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4050.eps}$
 -->
<IMG
 WIDTH="656" HEIGHT="190" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4050.png
 ALT="\epsfbox{p4050.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
A valid move in the puzzle is moving one disk from the top of one (source) peg to the top of the other (destination) peg, with a constraint that a disk can be placed only onto an empty destination peg or onto a disk of a larger diameter. We denote a move with two capital letters - the first letter denotes the source disk, and the second letter denotes the destination disk. For example, <TT>AB</TT> is a move from disk <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> to disk <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. 

<P>
The puzzle is considered solved when all the disks are stacked onto either peg <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> (with pegs <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> empty) or onto peg <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> (with pegs <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> empty). We will solve this puzzle with the following algorithm. 

<P>
All six potential moves in the game (<TT>AB</TT>, <TT>AC</TT>, <TT>BA</TT>, <TT>BC</TT>, <TT>CA</TT>, and <TT>CB</TT>) are arranged into a list. The order of moves in this list defines our strategy. We always make the first valid move from this list with an additional constraint that we never move the same disk twice in a row. 

<P>
It can be proven that this algorithm always solves the puzzle. Your problem is to find the number of moves it takes for this algorithm to solve the puzzle using a given strategy.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains several dataset. Each dataset contains two lines. The first line consists of a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 30)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4050.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4050.png
 ALT="$ \le$">30)</SPAN>
<tex2html_verbatim_mark> -- the number of disks in the puzzle. The second line contains descriptions of six moves separated by spaces - the strategy that is used to solve the puzzle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, write to the output file the number of moves it takes to solve the puzzle. This number will not exceed <SPAN CLASS="MATH">10<SUP>18</SUP></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
AB BC CA BA CB AC 
2 
AB BA CA BC CB AC
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7 
5
</PRE> 

<P>

______________________________________________________
4051||||||false||||||
<P>Internationalization and localization are long words that are usually abbreviated as i18n and l10n. The numbers in between i-n and l-n refer to the number of letters that were omitted. It is a very powerful abbreviation method that can be naturally used for any words.<P>A word may be abbreviated only when it has previously occurred in a given text. A word is abbreviated by omitting all the letters in the word except for the first and last letter and replacing omitted letters with a number of omitted letters.<P>Your task is to write a program that expands such abbreviations in a given text whenever possible. Expansion is possible if it is <SPAN CLASS="textit">valid</SPAN> and <SPAN CLASS="textit">unambiguous</SPAN>.<P>Expansion is valid if expanded word has previously occurred in the text and its abbreviated form corresponds to the abbreviation that is being expanded. Case is ignored for the purposes of validness. For example, expansion from i18n to internationalization is valid in this problem statement (even as internationalization was previously mentioned only with capital letter I). But expansion of p14n to parameterization is not valid since the word parameterization has never occurred before its abbreviation, and expansion of a11n to abbreviation is not valid, since it is not a correct abbreviation for the word abbreviation (correct one is a10n).<P>Expansion is unambiguous if there is exactly one valid expansion for it. For example, expansion from l10n to localization is unambiguous in this problem statement, but expansion from p5m cannot be made unambiguously, since both problem and program are abbreviated to p5m.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists on several datasets separated by a blank line. Each dataset contains at most 1000 lines with at most 80 characters in each line. Each line contains one or more words separated by spaces and special symbols: `<TT>-</TT>', `<TT>,</TT>', `<TT>.</TT>', `<TT>"</TT>', `<TT>(</TT>', `<TT>)</TT>', `<TT>:</TT>', `<TT>;</TT>', `<TT>!</TT>', `<TT>?</TT>'. There are no trailing spaces, but other separators are allowed at the end of line.<P>Words may be either <SPAN CLASS="textit">full</SPAN> or <SPAN CLASS="textit">abbreviated</SPAN>. Full word consists of one to 32 Latin letters and may be written in one of three <SPAN CLASS="textit">capitalization</SPAN> forms: all lowercase, First Capital Letter, or ALL CAPITAL LETTERS. Abbreviated word consists of a Latin letter, followed by a number from 2 to 30 (no leading zero), followed by a Latin letter. Abbreviated words also have three corresponding capitalization forms: all l7e, F3t C5l L4r, or ALL C5L L5S.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file original text with original separators while expanding abbreviated words into full words whenever possible (see problem statement). Capitalization of the expanded full word shall correspond to the capitalization of the abbreviation that is being expanded.<P>Invalid or ambiguous abbreviations shall be left in the text as is (abbreviated). Note, that lines in the output file may be longer than 80 characters. Write a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
The first line of sample input. 
The s4d l2e of s4e i3t. 
Lone, lone, l4e... 
S4e input last l4e!
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The first line of sample input. 
The s4d line of sample input. 
Lone, lone, l4e... 
Sample input last l4e!
</PRE><P>
______________________________________________________
4052||||||false||||||

<P>
Michael had visited ACM ICPC World Finals 2007 in Tokyo, Japan and became fascinated with Japanese writing. He decided to study hieroglyphs, but in order to check his knowledge he needs a piece of software that can verify correctness of his writing. This program takes a description of a correct shape of the hieroglyph, several Michael's attempts to write it, and judges each attempt as correct or incorrect. 

<P>
In this problem hieroglyphs are represented as a collection of strokes, each stroke being a straight line on a Cartesian plane. The order of strokes is irrelevant for the hieroglyph shape, but the direction of each stroke is relevant. There are eight relevant directions: straight right, upper-right, straight up, upper-left, straight left, lower-left, straight down, and lower-right. 

<P>
Two writings are considered to represent the same shape if one-to-one correspondence can be established between the strokes and all the endpoints of the strokes, so that direction of strokes and relative positions of pairs of points are preserved. Preservation of relative positions is important for any pair of points, even if they are not connected with a stroke. However, relative positions are important only with respect to eight relevant directions described above. 

<P>
For example, here is a hieroglyph similar to Latin letter A with 5 endpoints connected with 3 strokes and several other correct writings of the same shape:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4052a.eps}$
 -->
<IMG
 WIDTH="760" HEIGHT="182" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="\epsfbox{p4052a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Note, that intersections of strokes are not relevant. Here are several incorrect writings of the same shape:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4052b.eps}$
 -->
<IMG
 WIDTH="1068" HEIGHT="185" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="\epsfbox{p4052b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
These writings are not correct for the following reasons: 

<P>

<UL>
<LI>Writing 5 has an extra point, so one-to-one correspondence between endpoints cannot be established. 
</LI>
<LI>In writing 6 point <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> is straight up from point a but it should be to the upper-right of it. 
</LI>
<LI>In writing 7 stroke <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> - <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark> goes in the wrong direction. 
</LI>
<LI>In writing 8 point <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> is lower-right from point a but it should be straight to the right of it. 
</LI>
<LI>Writing 9 has an extra <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> - <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> stroke, so one-to-one correspondence between strokes cannot be established.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains several datasets. The first line of each dataset contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le n \le 20)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> -- the number of writings in the input file. It is followed by descriptions of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> writings. 

<P>
Each writing starts with a line with a single integer number <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m_{i} \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$"><I>m</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> -- the number of strokes in <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th writing. It is followed by <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> lines that describe strokes for <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th writing. Each stroke is represented by a line with four integer numbers <!-- MATH
 $x^{a}_{ij}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>a</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y^{a}_{ij}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUP>a</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $x^{b}_{ij}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>b</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $y^{b}_{ij}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUP>b</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(-1000 \le x^{a}_{ij}, y^{a}_{ij}, x^{b}_{ij}, y^{b}_{ij} \le 1000)$
 -->
<SPAN CLASS="MATH">(- 1000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$"><I>x</I><SUP>a</SUP><SUB>ij</SUB>, <I>y</I><SUP>a</SUP><SUB>ij</SUB>, <I>x</I><SUP>b</SUP><SUB>ij</SUB>, <I>y</I><SUP>b</SUP><SUB>ij</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4052a.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> -- coordinates of endpoints. <!-- MATH
 $x^{a}_{ij}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>a</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y^{a}_{ij}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUP>a</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark> are coordinates of the beginning of <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th stroke and <!-- MATH
 $x^{b}_{ij}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUP>b</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y^{b}_{ij}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUP>b</SUP><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark> are coordinates of the end of <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th stroke. The beginning and the end of the stroke are distinct points. Any two endpoints are connected by at most one stroke.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, compare the shapes of writings from 2-nd to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-th with the shape of the first writing and write to the output file <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>
<tex2html_verbatim_mark> lines with the result of each comparison of a single line. Write <TT>CORRECT</TT> if the corresponding writing represents the same shape as the first one or <TT>INCORRECT</TT> otherwise. Print a blank line between datasets.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9 
3 
0 0 10 20 
10 20 20 0 
5 10 15 10 
3 
0 0 10 20 
10 20 20 0 
2 10 13 10 
3 
0 0 10 15 
10 15 20 0 
5 10 15 10 
3 
8 10 12 10 
0 0 10 20 
10 20 14 0 
3 
0 0 8 20 
12 20 20 0 
5 10 15 10 
3 
0 0 10 20 
10 20 20 0 
0 10 15 10 
3 
0 0 10 20 
10 20 20 0 
15 10 5 10 
3 
2 4 10 20 
10 20 20 0 
5 10 15 10 
4 
0 0 10 20 
0 0 5 10 
10 20 20 0 
5 10 15 10
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
CORRECT 
CORRECT 
CORRECT 
INCORRECT 
INCORRECT 
INCORRECT 
INCORRECT 
INCORRECT
</PRE>

<P>

______________________________________________________
4053||||||false||||||
<P>The Kingdom of Qari was conquered, and now <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> other Kingdoms are dividing its territory among themselves. However, each Kingdom has its own opinion on which parts of Qari's land are better. For example, Napaj might want a large open space for settlement while Acirema is only interested in rich oilfields.<P>To formalize their claims each Kingdom has indicated an area that it considers worthy. An area indicated by each Kingdom is a union of non-overlapping circles. A Kingdom is content with Qari's partitioning if it receives at least <SPAN CLASS="MATH">1/<I>n</I></SPAN> <tex2html_verbatim_mark> of the area it has indicated as worthy.<P>Your task is to propose a partitioning that satisfies all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> Kingdoms. In your partitioning an area given to each Kingdom must be a convex polygon with at most 1000 vertices. In this problem it is always possible to find such partitioning.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains an integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> - the number of Kingdoms that are dividing Qari. Then follow <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> sections describing the areas that were indicated by each Kingdom as worthy.<P>The first line of each section contains an integer number <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>m</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> - the number of circles indicated by <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th Kingdom. It is followed by <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> lines describing circles, one circle per line. A circle is described by three integer numbers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 1000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">1000;1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> -- the coordinates of its center and its radius correspondingly. Circles in one section do not intersect, but may touch each other.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file descriptions of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> non-intersecting convex polygons -- one for each Kingdom in the same order as in the input file. Polygons may touch each other (see sample output).<P>Each description shall start with a line that contains a single integer number <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>k</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> - the number of vertices in the polygon, followed by <SPAN CLASS="MATH"><I>k</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates of the vertices <SPAN CLASS="MATH">(- 3000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="$ \le$">3000)</SPAN> <tex2html_verbatim_mark>. Coordinates must be precise up to 7 digits after decimal point. The vertices must be listed in either clockwise or counterclockwise direction. No three consecutive vertices are allowed to lie on the same straight line. Print a blank line between datasets.<P><P><P><BR><SPAN CLASS="textbf">Note for the sample:</SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="377" HEIGHT="139" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4053img1.png ALT="\epsfbox{p4053.eps}"> <tex2html_verbatim_mark></DIV><P>On the example picture above, the first Kingdom has indicated as worthy a union of circles 1' and 1''. The second and the third Kingdoms have both indicated the circle marked with 2 and 3 as worthy. One of the possible partitionings is pictured with dashed lines -- the first Kingdom will receive a square area around circle 1 while the second and the third Kingdoms will receive rectangles 2 and 3, thus getting an equal share of their indicated area. With this partitioning each Kingdom gets half of the area it has indicated as worthy, which is more than one third required by the problem statement.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
0 0 2
7 0 2
1 
4 0 2
1 
4 0 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT> </H2><P><PRE>
4 
2.0 2.0 
-2.0 2.0 
-2.0 -2.0 
2.0 -2.0 
4 
2.0 0.0 
6.0 0.0 
6.0 2.0 
2.0 2.0 
4 
2.0 0.0 
6.0 0.0 
6.0 -2.0 
2.0 -2.0
</PRE><P>
______________________________________________________
4054||||||false||||||
<P>Deterministic Final-State Automaton (DFA) is a directed multigraph whose vertices are called <SPAN CLASS="textit">states</SPAN> and edges are called <SPAN CLASS="textit">transitions</SPAN>. Each DFA transition is labeled with a single letter. Moreover, for each state <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and each letter <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark> there is at most one transition that leaves <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and is labeled with <SPAN CLASS="MATH"><I>l</I></SPAN> <tex2html_verbatim_mark>. DFA has a single <SPAN CLASS="textit">starting</SPAN> state and a subset of <SPAN CLASS="textit">final states</SPAN>. DFA defines a language of all words that can be constructed by writing down the letters on a path from the starting state to some final state.<P>Given a language with a finite set of words it is always possible to construct a DFA that defines this language. The picture on the left shows such DFA for the language cosisting of three words: <TT>fix</TT>, <TT>foo</TT>, <TT>ox</TT>. However, this DFA has 7 states, which is not optimal. The DFA on the right defines the same language with just 5 states.<P><DIV ALIGN="CENTER"><IMG WIDTH="661" HEIGHT="177" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4054.png ALT="\epsfbox{p4054.eps}"> <tex2html_verbatim_mark></DIV><P>Your task is to find the minimum number of states in a DFA that defines the given language.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of several datasets. The first line of each dataset contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4054.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4054.png ALT="$ \le$">5000)</SPAN> <tex2html_verbatim_mark> -- the number of words in the language. It is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines with a word on each line. Each word consists of 1 to 30 lowercase Latin letters from ``<TT>a</TT>" to ``<TT>z</TT>". All words in the input file are different.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, write to the output file a single integer number -- the minimal number of states in a DFA that defines the language from the input file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
fix 
foo 
ox 
4 
a 
ab 
ac 
ad
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
3

______________________________________________________
4055||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="a_files/filelist.xml"><link rel=Edit-Time-Data href="a_files/editdata.mso"><link rel=OLE-Object-Data href="a_files/oledata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem A - Bachelor Arithmetic</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:03:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:05:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>369</o:Words>
  <o:Characters>2107</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>17</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2472</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("a_files/header.html") fs;
	mso-footnote-continuation-separator:url("a_files/header.html") fcs;
	mso-endnote-separator:url("a_files/header.html") es;
	mso-endnote-continuation-separator:url("a_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("a_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>So what effect does a marriage ceremony has on an arbitrary bachelor (boy)? Well it depends on his thought process and context: he can be happy or sad. But in general what a marriage ceremony does is that it decreases the number of both bachelor and spinster (Female Bachelor) by one in the community. And so marriage ceremony has an effect on the probability of marriage of a bachelor.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1026" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:2pt;width:207.45pt;height:137.9pt;z-index:1;
 mso-position-horizontal:left'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=277 height=184 src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png align=left hspace=12 v:shapes="_x0000_s1026"><![endif]>Lets simplify things a bit as life is more complicated than what we want to admit. Suppose in a community there are B bachelors and S spinsters (Both B and S are strictly positive) and all of them are equally likely to be married with one another (ahem! a bachelor and a spinster of course) and marriage does not happen outside the community. And so in this model the probability of getting married for any bachelor is <sub><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:14.25pt;height:30.75pt' o:ole=""><v:imagedata src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=19 height=41 src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png v:shapes="_x0000_i1026"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1026"
  DrawAspect="Content" ObjectID="_1258692714">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'> </span>or 1 (The value that is smaller). So when a marriage ceremony occurs the probability becomes <sub><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:36.75pt;height:33pt' o:ole=""><v:imagedata src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=49 height=44 src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png v:shapes="_x0000_i1027"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1027"
  DrawAspect="Content" ObjectID="_1258692715">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'> </span>or 1 (The value that is smaller). But of course if the denominator becomes zero the probability cannot be determined. Whether this new probability <sub><!--[if gte vml 1]><v:shape id="_x0000_i1028" type="#_x0000_t75" style='width:36.75pt;height:33pt' o:ole=""><v:imagedata src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=49 height=44 src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png v:shapes="_x0000_i1028"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1028"
  DrawAspect="Content" ObjectID="_1258692716">
 </o:OLEObject>
</xml><![endif]--><span style='mso-spacerun:yes'> </span>is greater than the previous one (<sub><!--[if gte vml 1]><v:shape id="_x0000_i1029" type="#_x0000_t75" style='width:14.25pt;height:30.75pt' o:ole=""> <v:imagedata src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=19 height=41 src="http://livearchive.onlinejudge.org/external/40/a_files/image003.png v:shapes="_x0000_i1029"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1029"
  DrawAspect="Content" ObjectID="_1258692717">
 </o:OLEObject>
</xml><![endif]-->) depends on the relative values of B and S (B&gt;S, B=S or B&lt;S). Given the number of bachelors and spinsters in a community your job is to find out whether or not the probability of marriage for any bachelor will increase or decrease in the community after a marriage ceremony has occurred.<span style='mso-spacerun:yes'>  </span></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains at most 1000 lines of inputs. Each line contains two integers B and S (0&lt;B, S&lt;2000000001).</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal>Input is terminated by a line containing two zeroes. This line should not be processed.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify'>For each line of input produce one line of output. This line should contain the serial of output followed by a :-), :-( or :-| respectively (without the quotes) depending on whether or not the probability of marriage for a bachelor increases, decreases or remains same. If the desired probability after the marriage cannot be determined then produce the output :-\ (Without the quotes) instead.</p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>10 10<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>2 3<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>3 2<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>0 0<o:p></o:p></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 1: :-|<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 2: :-|<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 3: :-(<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor and Syed Monowar Hossain; Special Thanks: Abdullah al Mahmud</p></div></body></html>
______________________________________________________
4056||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="b_files/filelist.xml"><link rel=Edit-Time-Data href="b_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem B - Nested Square</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:03:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:07:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>391</o:Words>
  <o:Characters>2232</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>18</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>2618</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:CourierPS;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("b_files/header.html") fs;
	mso-footnote-continuation-separator:url("b_files/header.html") fcs;
	mso-endnote-separator:url("b_files/header.html") es;
	mso-endnote-continuation-separator:url("b_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("b_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>Simple ASCII characters can form a figure containing nested squares: as shown in Figure-1 below. Here the outer most square is formed by character a, the next square is formed by character b and the innermost square is formed by character c.</p><p class=MsoNormal align=center style='text-align:center'><o:p>&nbsp;</o:p></p><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 align=left style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-table-overlap:never;mso-yfti-tbllook:480;mso-table-lspace:9.0pt;
 margin-left:6.75pt;mso-table-rspace:9.0pt;margin-right:6.75pt;mso-table-anchor-vertical:
 paragraph;mso-table-anchor-horizontal:margin;mso-table-left:left;mso-table-top:
 29.85pt;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:.5pt solid windowtext;
 mso-border-insidev:.5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=181 valign=top style='width:135.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;
  mso-height-rule:exactly'><span style='font-size:32.0pt;font-family:CourierPS;
  mso-bidi-font-family:"Courier New"'>aaaaa<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;
  mso-height-rule:exactly'><span style='font-size:32.0pt;font-family:CourierPS;
  mso-bidi-font-family:"Courier New"'>a<b style='mso-bidi-font-weight:normal'>bbb</b>a<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;
  mso-height-rule:exactly'><span style='font-size:32.0pt;font-family:CourierPS;
  mso-bidi-font-family:"Courier New"'>a<b style='mso-bidi-font-weight:normal'>b</b>c<b style='mso-bidi-font-weight:normal'>b</b>a<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;
  mso-height-rule:exactly'><span style='font-size:32.0pt;font-family:CourierPS;
  mso-bidi-font-family:"Courier New"'>a<b style='mso-bidi-font-weight:normal'>bbb</b>a<o:p></o:p></span></p><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;
  mso-height-rule:exactly'><span style='font-size:32.0pt;font-family:CourierPS;
  mso-bidi-font-family:"Courier New"'>aaaaa</span><span style='font-family:
  CourierPS'><o:p></o:p></span></p></td><td width=474 valign=top style='width:355.15pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;mso-element:frame;mso-element-frame-hspace:
  9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:paragraph;
  mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;mso-height-rule:
  exactly'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:335.25pt;height:231pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/b_files/image010.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=447 height=308 src="http://livearchive.onlinejudge.org/external/40/b_files/image010.png v:shapes="_x0000_i1026"><![endif]></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=181 valign=top style='width:135.9pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;mso-element:frame;mso-element-frame-hspace:
  9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:paragraph;
  mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;mso-height-rule:
  exactly'>Figure 1: Nested squares of ASCII characters</p></td><td width=474 valign=top style='width:355.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;mso-element:frame;mso-element-frame-hspace:
  9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:paragraph;
  mso-element-anchor-horizontal:margin;mso-element-top:29.85pt;mso-height-rule:
  exactly'>Figure 2: This is a nested square generated by the characteristic string abca. The dotted rectangle is the bounding box denoted by the corners (3,2) and (5,7).</p></td></tr></table><p class=MsoNormal style='text-align:justify'>Such a square can be denoted uniquely by a characteristics string abc: that is the first character forms the outermost square, the next character forms the next square and so on. So a string of length 50000 can actually denote a (99999X99999) square grid, which will require around 9 Gigabyte of memory to be stored normally. In this problem you will be asked to print a small portion of such a huge square.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>The different characters that form a (N*N) square are numbered in row major order, the upper left character is at position (1,1) and the lower right character is at position (N,N). This is shown in Figure 2.</p><p class=MsoNormal style='text-align:justify'><span style='mso-spacerun:yes'> </span></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The first line contains an integer N(0&lt;N&lt;31) which denotes how many sets of inputs are there. The description of each set is given below.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>The first line of each set contains a string S (1&#8804;|S|&#8804;50000) and an integer Q (1&#8804;Q&#8804;50). Here S is the characteristic string of a nested square pattern and |S| is the length of string S. This string contains only alphabets and decimal digits. The integer Q denotes the total number of query. Each of the next Q lines contain four integers r<sub><span style='mso-bidi-font-size:12.0pt'>1</span></sub>, c<sub><span style='mso-bidi-font-size:12.0pt'>1</span></sub>, r<sub><span style='mso-bidi-font-size:
12.0pt'>2</span></sub>, c<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub>, which actually denotes a bounding box whose upper left corner is (r<sub><span style='mso-bidi-font-size:12.0pt'>1</span></sub>, c<sub><span style='mso-bidi-font-size:
12.0pt'>1</span></sub>) and lower right corner is (r<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub>, c<sub><span style='mso-bidi-font-size:
12.0pt'>2</span></sub>). You can assume that (1 &#8804; r<sub><span style='mso-bidi-font-size:12.0pt'>1</span></sub>, c<sub><span style='mso-bidi-font-size:
12.0pt'>1</span></sub>, r<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub>, c<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub> &#8804; 2*|S|-1) , 0 &#8804; r<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub>-r<sub><span style='mso-bidi-font-size:12.0pt'>1</span></sub> &#8804; 100 and 0 &#8804; c<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub>-c<sub><span style='mso-bidi-font-size:
12.0pt'>1</span></sub> &#8804; 100.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>There is a blank line between two consecutive input cases.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify'>For each set of input produce several lines of output.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>The first line of output for each set contains the serial of the set. Then for each query produce the serial of query followed by the contents within the required bounding box.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>Print a blank line after the output for each test case.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>Look at the output for sample input for details.</p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>2<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>abca 2<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>3 2 5 7<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>3 2 3 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>Aacc32 1<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>1 1 8 2<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Square 1:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Query 1:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>bcccba<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>bcacba<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>bcccba<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Query 2:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>b<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Square 2:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Query 1:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>AA<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Aa<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor, Special thanks: Syed Monowar Hossain &amp; Abdullah al Mahmud<b style='mso-bidi-font-weight:normal'><span style='font-size:28.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial'><o:p></o:p></span></b></p></div></body></html>
______________________________________________________
4057||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="c_files/filelist.xml"><link rel=Edit-Time-Data href="c_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem C - The Dumb Grocer</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:03:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:07:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>268</o:Words>
  <o:Characters>1534</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>12</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>1799</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("c_files/header.html") fs;
	mso-footnote-continuation-separator:url("c_files/header.html") fcs;
	mso-endnote-separator:url("c_files/header.html") es;
	mso-endnote-continuation-separator:url("c_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("c_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1034" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:2.6pt;width:225pt;height:210.85pt;z-index:1;
 mso-position-horizontal:left'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/c_files/image013.jpg o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=300 height=281 src="http://livearchive.onlinejudge.org/external/40/c_files/image013.jpg align=left hspace=12 v:shapes="_x0000_s1034"><![endif]>The grocer sells goods of integer amount units from 1 to n. He has a weighing scale with two pans. By this weighing device he weighs by placing goods in one pan and placing standard measuring stones in another pan. His standard measuring stone set has the following property</p><p class=MsoNormal style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span style='mso-list:Ignore'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]>Each of them has integer weight.</p><p class=MsoNormal style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span style='mso-list:Ignore'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]>The sum of all the weights of these measuring stones is exactly n.</p><p class=MsoNormal style='margin-left:.5in;text-align:justify;text-indent:-.25in;
mso-list:l0 level1 lfo2;tab-stops:list .5in'><![if !supportLists]><span style='mso-list:Ignore'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><![endif]>Each of the weights from 1 to n can be measured uniquely by selecting a subset of this measuring set. If there is multiple way to measure a weight between 1 to n then it may be problematic for the grocer.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>For n = 5 the example of valid sets are {1,2,2},{1,1,1,1,1}, {1,1,3}. The examples of some invalid sets<span style='mso-spacerun:yes'>  </span>are</p><p class=MsoNormal style='text-align:justify'>-{1,1,1,2} because 2 can be measured in multiple ways.{1,1} and {2}. Also 3 can be measured in multiple ways.{1,1,1} and {1,2}</p><p class=MsoNormal style='text-align:justify'>-{1,2,4} though all the weights from 1 to 5 can be measured in unique way but the sum of these weights are not equal to 5.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>Your task is to given n calculate the number of different valid measuring stone sets of this grocer.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>First line contains T(1&#8804;T&#8804;5000) the number of test cases. Each test case contains 1 integer n in one line. These integers fit in a 32-bit signed integer.</p><p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>For each test case produce the serial of output followed by the total number of valid measuring stone set as described in the problem statement. This number should fit in a 64-bit signed integer. Look at the output for sample input for details.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>5<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New";color:windowtext'>223092869</span></b><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'><o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 3<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 7087261<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal>Problem setter: Abdullah al Mahmud, Special Thanks: Syed Monowar Hossain</p></div></body></html>
______________________________________________________
4058||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="d_files/filelist.xml"><link rel=Edit-Time-Data href="d_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem D - The ACM Puzzle</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2007-12-09T05:09:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T05:09:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>357</o:Words>
  <o:Characters>2036</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>16</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2389</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("d_files/header.html") fs;
	mso-footnote-continuation-separator:url("d_files/header.html") fcs;
	mso-endnote-separator:url("d_files/header.html") es;
	mso-endnote-continuation-separator:url("d_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("d_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="4098"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>The Association of Children Machines (ACM) is planning to build up a new type of puzzle for children. All the puzzles will have dimension (3×N) and has some or all of the following pieces. Some pieces can occur more than once. Since the puzzles made by ACM are in very high demand so many other companies have released counterfeit products which look just like puzzles made by ACM.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:
 .5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=523 valign=top style='width:5.45in;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:444pt;height:348.75pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/d_files/image014.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=592 height=465 src="http://livearchive.onlinejudge.org/external/40/d_files/image014.png v:shapes="_x0000_i1026"><![endif]></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=523 valign=top style='width:5.45in;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-family:Arial'>Figure 1: The 22 allowed pieces of the puzzle.<o:p></o:p></span></b></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'><span style='mso-spacerun:yes'>  </span></p><p class=MsoNormal style='text-align:justify'>To prevent such counterfeit products ACM has taken up a measure which they hope will help the sellers to prevent the counterfeit products in their shop. As all puzzles are initially available in a box in a solved format and a (3×N) puzzle can have zillions of solutions for larger values of N. All the puzzles from ACM factory will have only some specific solutions when sold; they will be unique and only small fractions of all possible solutions. So it is more likely that the counterfeit products wont have these orientations. You have to help them in the initial part: given the value of N you will have to find how many different solutions are there with the given pieces. You are not allowed to rotate the pieces while solving the puzzle but you can use any piece any number of time. Of course some of the pieces are mere rotation of another but they also cannot be rotated to make it look like the other. For example the piece with shape upside down T (the brown piece) cannot be rotated to look like a normal T (the pink piece).</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:
 .5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=630 valign=top style='width:472.15pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><h5 align=center style='text-align:center'><span style='font-size:16.0pt;
  mso-bidi-font-size:10.0pt;font-family:Arial'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:452.25pt;height:342pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/d_files/image014.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=603 height=456 src="http://livearchive.onlinejudge.org/external/40/d_files/image014.png v:shapes="_x0000_i1027"><![endif]><span class=StyleArial16pt><o:p></o:p></span></span></h5></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=630 valign=top style='width:472.15pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><h5 style='text-align:justify'><span class=StyleArial16pt><span style='mso-ansi-font-size:12.0pt;mso-bidi-font-size:12.0pt'>Figure 2: The 26 solutions for N=5<o:p></o:p></span></span></h5></td></tr></table><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'><o:p>&nbsp;</o:p></span></span></h5><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains several lines of input. Each line contains an integer N (0&lt;N&lt;2001). Here N denotes the width of the puzzle. The height of the puzzle is always 3. Input is terminated by a line containing a single zero. This line should not be processed.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'>For each value of N produce one line of output. This line contains the serial of output followed by an integer which denotes the value (S % 1000000000000). Here S denotes the number of solutions for a (3×N) puzzle. Look at the output for sample input for details.</p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>5<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>100<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>0<o:p></o:p></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 1: 26<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 2: 584039302899<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4059||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="e_files/filelist.xml"><link rel=Edit-Time-Data href="e_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem E - The inspector's Dilemma</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:09:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>274</o:Words>
  <o:Characters>1562</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>13</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>1833</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("e_files/header.html") fs;
	mso-footnote-continuation-separator:url("e_files/header.html") fcs;
	mso-endnote-separator:url("e_files/header.html") es;
	mso-endnote-continuation-separator:url("e_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("e_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;mso-line-height-alt:11.0pt'>In a country, there are a number of cities. Each pair of city is connected by a highway, bi-directional of course. A road-inspectors task is to travel through the highways (in either direction) and to check if everything is in order. Now, a road-inspector has a list of highways he must inspect. However, it might not be possible for him to travel through all the highways on his list without using other highways. He needs a constant amount of time to traverse any single highway. As you can understand, the inspector is a busy fellow does not want to waste his precious time. He needs to know the minimum possible time to complete his task. He has the liberty to start from and end with any city he likes. Please help him out.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify;mso-line-height-alt:11.0pt'>The input file has several test cases. First line of each case has three integers: <b>V </b>(1 &#8804; <b>V </b>&#8804; 1000), the number of cities, <b>E </b>(0 &#8804; <b>E </b>&#8804;<b> V * (V-1) / </b>2), the number of highways the inspector needs to check and <b>T </b>(1 &#8804; <b>T </b>&#8804; 10), time needed to pass a single highway. Each of the next <b>E </b>lines contains two integers <b>a </b>and <b>b </b>(1 &#8804; <b>a</b>,<b>b </b>&#8804; V, <b>a</b>!=<b>b</b>) meaning the inspector has to check the highway between cities <b>a </b>and <b>b</b>. The input is terminated by a case with <b>V</b>=<b>E</b>=<b>T=</b>0. This case should not be processed.</p><p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify;mso-line-height-alt:11.0pt'>For each test case, print the serial of output followed by the minimum possible time the inspector needs to inspect all the highways on his list. Look at the output for sample input for details.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                               </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=655 style='width:491.4pt;background:#CCCCCC;border-collapse:collapse;border:none;
 mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>5 3 1<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>1 2<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>1 3<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>4 5<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>4 4 1<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>1 2<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>1 4<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>2 3<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>3 4<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>0 0 0<o:p></o:p></span></b></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>Case 1: 4<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>Case 2: 4<o:p></o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Mohammad Mahmudur Rahman,</p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Special Thanks: Abdullah al Mahmud &amp; Syed Monowar Hossain</p></div></body></html>
______________________________________________________
4060||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="f_files/filelist.xml"><link rel=Edit-Time-Data href="f_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem F - The Bells are Ringing :)</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:10:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>411</o:Words>
  <o:Characters>2346</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>19</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>2752</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("f_files/header.html") fs;
	mso-footnote-continuation-separator:url("f_files/header.html") fcs;
	mso-endnote-separator:url("f_files/header.html") es;
	mso-endnote-continuation-separator:url("f_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("f_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1027" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:80pt;width:270.45pt;height:193.45pt;z-index:1;
 mso-position-horizontal:left'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/f_files/image018.jpg o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=361 height=258 src="http://livearchive.onlinejudge.org/external/40/f_files/image018.jpg align=left hspace=12 v:shapes="_x0000_s1027"><![endif]><span style='mso-no-proof:yes'>Perhaps you all have heard the mythical story about Tower of Hanoi (The details of this story is not required to solve this problem): There is a tower of Hanoi with 64 disks and three pegs and the preists make one move everyday and the earth will be destroyed when all the pegs have been moved from one peg to the other following the rules of Tower of Hanoi. In this problem we deal with a similar story  The story of an ancient temple. The ancient temple has three incredibly large bells. At the beginning of time the three bells rang together. Then the three bells never rang together and when they will ring together again the earth will be destroyed. The three bells have cycle length of t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:
yes'>1</span></sub><span style='mso-no-proof:yes'>, t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub><span style='mso-no-proof:yes'> and t</span><sub><span style='mso-bidi-font-size:
12.0pt;mso-no-proof:yes'>3</span></sub><span style='mso-no-proof:yes'> (Here t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub><span style='mso-no-proof:yes'>&lt;t</span><sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>2</span></sub><span style='mso-no-proof:yes'>&lt;t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub><span style='mso-no-proof:yes'> and all are expressed in miliseconds). By this I mean that the first bell rings at every t</span><sub><span style='mso-bidi-font-size:
12.0pt;mso-no-proof:yes'>1</span></sub><span style='mso-no-proof:yes'> seconds from the beginning, the second bell rings at every t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub><span style='mso-no-proof:yes'> second from the beginning and the third bell rings at every t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub><span style='mso-no-proof:yes'> second from the beginning. Also note that the difference of the values of t</span><sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>1</span></sub><span style='mso-no-proof:yes'>, t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub><span style='mso-no-proof:yes'> and t</span><sub><span style='mso-bidi-font-size:
12.0pt;mso-no-proof:yes'>3</span></sub><span style='mso-no-proof:yes'> is not that much different so that ordinary people think many time that they are ringing together. <o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='mso-no-proof:yes'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='mso-no-proof:yes'>Given the time difference between destruction of earth and beginning of time you will have to find the values of t</span><sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>1</span></sub><span style='mso-no-proof:yes'>, t</span><sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub><span style='mso-no-proof:yes'> and t</span><sub><span style='mso-bidi-font-size:
12.0pt;mso-no-proof:yes'>3</span></sub><span style='mso-no-proof:yes'>. </span></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:
16.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains at most 600 lines of inputs. Each line contains an integer which denotes (in millisecond) the time difference between the beginning of time and the time of the bells ringing together. Input is terminated by a line containing a single zero. All the input numbers will fit in a 64 bit signed integer.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><h4 style='text-align:justify'>For each line of input produce two lines or more of output. The first line contains the serial of output. Each of the next lines contains three integers which denote the values of t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub>, t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub> and t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub> respectively. The value of t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub>, t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub> and t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub> is such that t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub>&lt;t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub>&lt;t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub> and 0&lt;t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub>, t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>2</span></sub>, t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub>&#8804;1000000 and |t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>1</span></sub>-t<sub><span style='mso-bidi-font-size:12.0pt;mso-no-proof:yes'>3</span></sub>|&#8804;25. If you cannot find values of t<sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>1</span></sub>, t<sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>2</span></sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>, </span>t<sub><span style='mso-bidi-font-size:12.0pt;
mso-no-proof:yes'>3 </span></sub>with such constraints then print the line Such bells dont exist instead. In case there is more than one solution sort the output in ascending order of the value of t<sub><span style='mso-bidi-font-size:
12.0pt'>1</span></sub>, then (in case of a tie) in the ascending order of the value of t<sub><span style='mso-bidi-font-size:12.0pt'>2</span></sub> and then (still a tie) in ascending order of the value t<sub><span style='mso-bidi-font-size:
12.0pt'>3</span></sub>. Print a blank line after the output for each test case. Look at the output for sample input for details.</h4><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'><o:p>&nbsp;</o:p></span></b></h1><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                             </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><pre><b><span
  style='font-size:11.0pt'>10<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>103<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>0<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'><o:p>&nbsp;</o:p></span></b></pre></td><td width=309 valign=top style='width:231.85pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>Scenario 1:<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 5<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 10<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>1 5 10<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>2 5 10<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>Scenario 2:<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>Such bells don't exist<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4061||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="g_files/filelist.xml"><link rel=Edit-Time-Data href="g_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem G - Photographic Tour</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="country-region"/><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:12:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>460</o:Words>
  <o:Characters>2626</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3080</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("g_files/header.html") fs;
	mso-footnote-continuation-separator:url("g_files/header.html") fcs;
	mso-endnote-separator:url("g_files/header.html") es;
	mso-endnote-continuation-separator:url("g_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("g_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>Bangladesh Photographic Society is planning to arrange a Photographic Competition in <st1:place w:st="on"><st1:country-region w:st="on">Bangladesh</st1:country-region></st1:place>. The topic of this competition is The Nature of Bangladesh. But their idea is little bit unusual. For each photographer, the organizer will provide a set of tickets of different prices and in a particular order, to travel and take pictures from various locations around <st1:country-region w:st="on"><st1:place w:st="on">Bangladesh</st1:place></st1:country-region>. Photographers can travel from one place to another if the price of the ticket is same as the traveling cost between these two places. All the invited photographers have to collect these tickets from <st1:place w:st="on">Dhaka</st1:place> and will start their journey from there. The participants may choose any route to the final destination - Coxs Bazar where the final event is to be held. To make this tour simple (or complicated<span style='font-family:Wingdings;
mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman";
mso-char-type:symbol;mso-symbol-font-family:Wingdings'><span style='mso-char-type:
symbol;mso-symbol-font-family:Wingdings'>J</span></span> ) the organizing committee has set some rules for this tour. All competitors will receive same set of tickets from the organizer. During their tour the photographers must use all the tickets in the order as they are given. The photographers can also travel to any place more than once but they have to reach at Coxs Bazar using the final ticket. Otherwise, they will be disqualified from the competition. Now the organizing committee wants to know the number of places (including <st1:place w:st="on">Dhaka</st1:place> and Coxs Bazar) it is possible for the participants to visit during their tour. So, as a programmer they want your help.</p><div align=center><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-yfti-tbllook:160;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=200 valign=top style='width:149.8pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><!--[if gte vml 1]><v:shapetype id="_x0000_t105" coordsize="21600,21600" o:spt="105" adj="12960,19440,14400" path="wr,0@3@23,0@22@4,0@15,0@1@23@7,0@13@2l@14@2@8@22@12@2at,0@3@23@11@2@17@26@15,0@1@23@17@26@15@22xewr,0@3@23@4,0@17@26nfe"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="val #0"/><v:f eqn="val #1"/><v:f eqn="val #2"/><v:f eqn="sum #0 width #1"/><v:f eqn="prod @3 1 2"/><v:f eqn="sum #1 #1 width"/><v:f eqn="sum @5 #1 #0"/><v:f eqn="prod @6 1 2"/><v:f eqn="mid width #0"/><v:f eqn="sum height 0 #2"/><v:f eqn="ellipse @9 height @4"/><v:f eqn="sum @4 @10 0"/><v:f eqn="sum @11 #1 width"/><v:f eqn="sum @7 @10 0"/><v:f eqn="sum @12 width #0"/><v:f eqn="sum @5 0 #0"/><v:f eqn="prod @15 1 2"/><v:f eqn="mid @4 @7"/><v:f eqn="sum #0 #1 width"/><v:f eqn="prod @18 1 2"/><v:f eqn="sum @17 0 @19"/><v:f eqn="val width"/><v:f eqn="val height"/><v:f eqn="prod height 2 1"/><v:f eqn="sum @17 0 @4"/><v:f eqn="ellipse @24 @4 height"/><v:f eqn="sum height 0 @25"/><v:f eqn="sum @8 128 0"/><v:f eqn="prod @5 1 2"/><v:f eqn="sum @5 0 128"/><v:f eqn="sum #0 @17 @12"/><v:f eqn="ellipse @20 @4 height"/><v:f eqn="sum width 0 #0"/><v:f eqn="prod @32 1 2"/><v:f eqn="prod height height 1"/><v:f eqn="prod @9 @9 1"/><v:f eqn="sum @34 0 @35"/><v:f eqn="sqrt @36"/><v:f eqn="sum @37 height 0"/><v:f eqn="prod width height @38"/><v:f eqn="sum @39 64 0"/><v:f eqn="prod #0 1 2"/><v:f eqn="ellipse @33 @41 height"/><v:f eqn="sum height 0 @42"/><v:f eqn="sum @43 64 0"/><v:f eqn="prod @4 1 2"/><v:f eqn="sum #1 0 @45"/><v:f eqn="prod height 4390 32768"/><v:f eqn="prod height 28378 32768"/></v:formulas><v:path o:extrusionok="f" o:connecttype="custom" o:connectlocs="@17,0;@16,@22;@12,@2;@8,@22;@14,@2" o:connectangles="270,90,90,90,0" textboxrect="@45,@47,@46,@48"/><v:handles><v:h position="#0,bottomRight" xrange="@40,@29"/><v:h position="#1,bottomRight" xrange="@27,@21"/><v:h position="bottomRight,#2" yrange="@44,@22"/></v:handles><o:complex v:ext="view"/></v:shapetype><v:shape id="_x0000_s1032" type="#_x0000_t105" style='position:absolute;
   left:0;text-align:left;margin-left:2in;margin-top:42.8pt;width:24.15pt;
   height:9.6pt;z-index:1' fillcolor="#943634" strokecolor="#5a5a5a" strokeweight="3pt"><v:shadow on="t" type="perspective" color="#205867" opacity=".5" offset="1pt" offset2="-1pt"/></v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout;
  position:absolute;z-index:1;left:0px;margin-left:190px;margin-top:53px;
  width:43px;height:24px'></span><![endif]><span style='font-size:10.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:134.25pt;height:100.5pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=179 height=134 src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png v:shapes="_x0000_i1026"><![endif]><o:p></o:p></span></p></td><td width=35 valign=top style='width:26.6pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><img width=43 height=24 src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png v:shapes="_x0000_s1032"><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p></td><td width=207 valign=top style='width:155.45pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:148.5pt;height:97.5pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=198 height=130 src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png v:shapes="_x0000_i1027"><![endif]><o:p></o:p></span></p></td><td width=35 valign=top style='width:26.6pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><img width=35 height=24 src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png v:shapes="_x0000_s1032"><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p></td><td width=199 valign=top style='width:149.05pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><!--[if gte vml 1]><v:shape id="_x0000_i1028" type="#_x0000_t75" style='width:147pt;height:98.25pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=196 height=131 src="http://livearchive.onlinejudge.org/external/40/g_files/image021.png v:shapes="_x0000_i1028"><![endif]><o:p></o:p></span></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=200 valign=top style='width:149.8pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><st1:place w:st="on"><span style='font-size:10.0pt'>Dhaka</span></st1:place><span style='font-size:
  10.0pt'><o:p></o:p></span></p></td><td width=35 valign=top style='width:26.6pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p></td><td width=207 valign=top style='width:155.45pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'>Somewhere in <st1:place w:st="on"><st1:country-region w:st="on">Bangladesh</st1:country-region></st1:place><o:p></o:p></span></p></td><td width=33 valign=top style='width:24.55pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'><o:p>&nbsp;</o:p></span></p></td><td width=199 valign=top style='width:149.05pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt'>Coxs Bazar<o:p></o:p></span></p></td></tr></table></div><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>There will be a set of test cases. Each test case starts with 2 numbers: <b><span style='mso-bidi-font-style:
italic'>N</span></b>, <span style='mso-bidi-font-weight:bold;mso-bidi-font-style:
italic'>E</span> where <b><span style='mso-bidi-font-style:italic'>N (2 &#8804; N &#8804; 100)</span></b> represents the number of places in <st1:country-region w:st="on"><st1:place w:st="on">Bangladesh</st1:place></st1:country-region>, <b><span style='mso-bidi-font-style:italic'>E</span></b> represents the connecting roads among these places. After that there will be <b><span style='mso-bidi-font-style:
italic'>E</span></b> lines, each containing <b style='mso-bidi-font-weight:
normal'>3</b> numbers <b style='mso-bidi-font-weight:normal'>(x, y, z)</b> which means that the traveling cost from place <b><span style='mso-bidi-font-style:
italic'>x</span></b> to place <b><span style='mso-bidi-font-style:italic'>y</span></b> and place <b><span style='mso-bidi-font-style:italic'>y</span></b> to place <b><span style='mso-bidi-font-style:italic'>x</span></b> is <b><span style='mso-bidi-font-style:
italic'>z (0 &#8804; z &#8804; 100000)</span></b>. The first number T (T<b><span style='mso-bidi-font-style:italic'>&#8804; 100</span></b>) of the next line represents the number of tickets that each photographer will get from the organizer. After that there will be T numbers which represents the price of the tickets that a competitor has to use sequentially during his tour. Input will be terminated when <b style='mso-bidi-font-weight:normal'>N=E=0</b> and should not be processed. (For the sake of simplicity, you can assume that <st1:place w:st="on">Dhaka</st1:place> is denoted by place 0 and Coxs Bazar is denoted by place N-1).</p><p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>For each test case, there will be one line of output which contains the serial of output followed by an integer which represents the number of places where it is possible for any competitor to reach between the path from Dhaka (place 0) to Coxs Bazar (place N-1). If it is not possible to reach from <st1:place w:st="on">Dhaka</st1:place> to Coxs Bazar using these tickets, your output should be 0. Look at the output for sample input for details.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>3 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>3 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:
  "Courier New"'>0 0<span style='mso-bidi-font-weight:bold'><o:p></o:p></span></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>Tour 1: 3<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>Tour 2: 0<o:p></o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Syed Monowar Hossain, Special Thanks: Derek Kisman</p></div></body></html>
______________________________________________________
4062||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="h_files/filelist.xml"><link rel=Edit-Time-Data href="h_files/editdata.mso"><link rel=OLE-Object-Data href="h_files/oledata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem H - You are around me ...</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="country-region"/><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:12:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>459</o:Words>
  <o:Characters>2622</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>6</o:Paragraphs>
  <o:CharactersWithSpaces>3075</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("h_files/header.html") fs;
	mso-footnote-continuation-separator:url("h_files/header.html") fcs;
	mso-endnote-separator:url("h_files/header.html") es;
	mso-endnote-continuation-separator:url("h_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("h_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=327 valign=top style='width:245.5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Arial'>A jano shohoj shikarokti ami jugantori noi,<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Arial'>A jano bhishon akkhep amar ami digbijoee noi<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'>Bindu ami tumi amaye ghire<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'>Upobritter bhetor shudhu tumi achho</span></b><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></p></td><td width=327 valign=top style='width:245.55pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Arial'>Its my honest confession that I am not revolutionary<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Arial'>And I also regret that I am not a world beater<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'>I am a point and you surround me like an ellipse<o:p></o:p></span></b></p><p class=MsoNormal style='text-align:justify'><b style='mso-bidi-font-weight:
  normal'><span style='font-size:10.0pt;font-family:Arial'>And no one else is there within</span></b><span style='font-size:10.0pt;font-family:Arial'><o:p></o:p></span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>The above lines are taken from a super hit romantic song (A bit changed though) of <st1:country-region w:st="on"><st1:place w:st="on">Bangladesh</st1:place></st1:country-region>. The left column shows the lines from original song and the column on the right shows somewhat a English translation of it. Arif is listening to this song after the end of his Casanova life. Last year we posed a problem in Dhaka Regional on Mobile Casanova Arif.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>After listening to this song about a hundred times (Roughly 7.5 hours continuously), a funny geometric thought came to Arifs mind: if every boy was at the center of an ellipse and if only one girl was placed in it for him, then he (Arif) would not have turned into Casanova. The girls of course cannot go out of the ellipse, the ellipses cannot intersect and the poor boy stuck at the center. Maintaining these constraints the ellipses should be as large as possible, so that the girls can gossip with one another, standing on the edge of their respective ellipses.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>You will be given the Cartesian coordinates of at most 15000 boys, and the eccentricity and orientation of the ellipses. You will have to find the maximum possible area of the ellipses. All the ellipses should have same and maximum possible area, same eccentricity and orientation.<span style='mso-spacerun:yes'>      </span></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><div align=center><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 width=670 style='width:502.8pt;margin-left:-.1in;border-collapse:collapse;border:none;
 mso-border-alt:solid windowtext .5pt;mso-yfti-tbllook:480;mso-padding-alt:
 0in 5.4pt 0in 5.4pt;mso-border-insideh:.5pt solid windowtext;mso-border-insidev:
 .5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=364 valign=top style='width:272.75pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:237pt;height:161.25pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=316 height=215 src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png v:shapes="_x0000_i1026"><![endif]></p></td><td width=307 valign=top style='width:230.05pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:246pt;height:154.5pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=328 height=206 src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png v:shapes="_x0000_i1027"><![endif]></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=364 valign=top style='width:272.75pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-family:Arial'>Fig 1: Above you can see four ellipses are drawn keeping four men at the center. In this orientation these ellipses have the maximum possible area.<o:p></o:p></span></p></td><td width=307 valign=top style='width:230.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
  font-family:Arial'>Fig 2: This figure shows an ellipse whose length of major axis is 2a, length of minor axis is 2b, and the major axis makes an angle theta with the horizon. The eccentricity of the ellipse is <sub><!--[if gte vml 1]><v:shape id="_x0000_i1028" type="#_x0000_t75" style='width:68.25pt;height:36pt' o:ole=""><v:imagedata src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=91 height=48 src="http://livearchive.onlinejudge.org/external/40/h_files/image028.png v:shapes="_x0000_i1028"><![endif]></sub><!--[if gte mso 9]><xml>
   <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1028"
    DrawAspect="Content" ObjectID="_1258693184">
   </o:OLEObject>
  </xml><![endif]-->. The center of an ellipse is the intersection point of major axis and minor axis.<o:p></o:p></span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains maximum 15 test cases. The description of each test case is given below:</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>First line of each test case contains one integer N (1&lt;N&lt;15001) and two floating-point numbers e (0.2&lt;e&#8804;1) and theta (-90&lt;theta&#8804;90, theta is in degree). Each of the next N lines contains two floating-point numbers which denote the coordinate of a boy.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal>Input is terminated by a line where the values of N, e and theta are zero.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify'>For each test case produce two lines of outputs. The first line contains the serial of output and the second line contains the maximum possible area of the ellipse. Print six digits after the decimal point. Errors due to precision problems will be ignored.</p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                               </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>2 0.400000 10<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>100 100<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>200 200<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New"'>0 0.000000 0<o:p></o:p></span></b></p></td><td width=348 valign=top style='width:261.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>Case 1:<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'>15298.744584<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p></div></body></html>
______________________________________________________
4063||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="i_files/filelist.xml"><link rel=Edit-Time-Data href="i_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem I - Infinite Matrix</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>2</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:13:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>255</o:Words>
  <o:Characters>1454</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>12</o:Lines>
  <o:Paragraphs>3</o:Paragraphs>
  <o:CharactersWithSpaces>1706</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("i_files/header.html") fs;
	mso-footnote-continuation-separator:url("i_files/header.html") fcs;
	mso-endnote-separator:url("i_files/header.html") es;
	mso-endnote-continuation-separator:url("i_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("i_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>You are given a Vector V and Matrix M. V has n variables V<sub><span style='font-size:13.0pt'>1</span></sub>,V<sub>2</sub>,.,V<sub>n</sub>. M is lower triangular matrix with n rows numbered from 1 to n. Row i has i-1 column. You can calculate an infinite matrix R by the following equation.</p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:386.25pt;height:54pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/i_files/image034.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=515 height=72 src="http://livearchive.onlinejudge.org/external/40/i_files/image034.png v:shapes="_x0000_i1026"><![endif]></p><p class=MsoNormal style='text-align:justify'>The matrix R has n columns and infinite rows. Now consider about a function S<sub>p,a,b,c,d</sub>.</p><p class=MsoNormal style='text-align:justify'>You can calculate this by the following equation.</p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:338.25pt;height:63.75pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/i_files/image034.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=451 height=85 src="http://livearchive.onlinejudge.org/external/40/i_files/image034.png v:shapes="_x0000_i1027"><![endif]></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>For our problem the value of m is 1000000007. This is a prime number. Your task is to given V and M you have to calculate S<sub>p,a,b,c,d</sub>.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal>First line contains T(1&#8804;T&#8804;5) the number of test cases. Each test case contains multiple number of lines.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal>Line 1 contains 1 integer n(1&#8804;n&#8804;200). Line 2 to Line n+1 contains the information about V and M. Among these lines Line i+1 contains i ingers.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal>First integer is the value of V<sub>i</sub>(1&#8804; V<sub>i</sub> &#8804;200).<span style='mso-spacerun:yes'>  </span>Subsequent integers are M<sub>1,i</sub>,<span style='mso-spacerun:yes'>  </span>M<sub>2,i</sub>, M<sub>3,i</sub>, . , M<sub>i-1,i</sub> in order. (0&#8804;M<sub>i,j</sub> &lt;minimum(10,j-i)).</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal>Line n+2 contains an integer q(1&#8804;q&#8804;1000) the number of queries. Each of the next q line contains 5 integers<span style='mso-spacerun:yes'>  </span>p(0&#8804;p&#8804;9),a(1&#8804;a&#8804;10<sup><span style='mso-bidi-font-size:12.0pt'>15</span></sup>),b(1&#8804;b&#8804;n),c(0&#8804;c&#8804;10<sup><span style='mso-bidi-font-size:12.0pt'>15</span></sup>),d(0&#8804;d&#8804;n-b) separated by a single space.</p><p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal>For each query output a single integer denoting the value S<sub>p,a,b,c,d</sub>. Output a blank lines after each test case.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>2 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4 2 1 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1 5 3<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 2 5 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 2 10 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 3 10 1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>2 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4 2 1 0<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>4<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 1 5 3<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 2 5 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 2 10 2<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 3 10 1<o:p></o:p></span></b></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>910<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1468<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>79156<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>78518<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>910<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>1468<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>79156<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'>78518<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Abdullah al Mahmud, Special Thanks: Derek Kisman, Manzurur Rahman Khan</p></div></body></html>
______________________________________________________
4064||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="j_files/filelist.xml"><link rel=Edit-Time-Data href="j_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem J - Magnetic Train Tracks</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="country-region"/><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>manzoor</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2007-12-06T04:16:00Z</o:LastPrinted>
  <o:Created>2007-12-09T02:04:00Z</o:Created>
  <o:LastSaved>2007-12-09T02:14:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>542</o:Words>
  <o:Characters>3092</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>25</o:Lines>
  <o:Paragraphs>7</o:Paragraphs>
  <o:CharactersWithSpaces>3627</o:CharactersWithSpaces>
  <o:Version>11.5606</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>125</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("j_files/header.html") fs;
	mso-footnote-continuation-separator:url("j_files/header.html") fcs;
	mso-endnote-separator:url("j_files/header.html") es;
	mso-endnote-continuation-separator:url("j_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-header:url("j_files/header.html") h1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l0:level2
	{mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level3
	{mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level4
	{mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level5
	{mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level6
	{mso-level-tab-stop:3.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level7
	{mso-level-tab-stop:3.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level8
	{mso-level-tab-stop:4.0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l0:level9
	{mso-level-tab-stop:4.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1031" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:3.85pt;width:221.55pt;height:166.15pt;z-index:1;
 mso-position-horizontal:left'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/j_files/image038.jpg o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=295 height=222 src="http://livearchive.onlinejudge.org/external/40/j_files/image038.jpg align=left hspace=12 v:shapes="_x0000_s1031"><![endif]><span style='mso-no-proof:yes'>The rail roads of <st1:place w:st="on"><st1:country-region w:st="on">Japan</st1:country-region></st1:place> are being redesigned. So the governent is planning to install ultra-modern Magnetic trains instead of the current normal trains. As fuel price have gone high and nations have shut down their nuclear plants so the price of electricity/battery is also sky high. To reduce power consumption the Japanese government is trying to descourage people from riding trains  as a result the ticket price is also kept sky high and it is strictly proportional to the square of the distance between two stations.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='mso-no-proof:yes'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'>All the trains move in clockwise or counter clockwise order in a closed triangular track. These triangular tracks can be formed by connecting any three stations in clockwise or counterclockwise order. For simplicity you can assume that a station is denoted by a point in a two dimensional Cartesian Coordinate system. But these triangular tracks and ticket pricing policy can create new troubles. As the ticket price between two stations is proportional to the square of the distance, people often avoid the shortest route to destination and rather choose the longer one through another station. This causes more electricity expense per passenger and creates unwanted crowd in the stations. So the government would prefer not to make such tracks.</p><p class=MsoNormal style='text-align:justify'><span style='mso-spacerun:yes'> </span></p><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 align=left style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-table-overlap:never;mso-yfti-tbllook:480;mso-table-lspace:9.0pt;
 margin-left:6.75pt;mso-table-rspace:9.0pt;margin-right:6.75pt;mso-table-anchor-vertical:
 paragraph;mso-table-anchor-horizontal:margin;mso-table-left:left;mso-table-top:
 .05pt;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:.5pt solid windowtext;
 mso-border-insidev:.5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=348 valign=top style='width:261.0pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;text-fit:
  100%'><p class=MsoNormal align=right style='text-align:right;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:margin;mso-element-top:.05pt;
  mso-height-rule:exactly'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:247.5pt;height:164.25pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/40/j_files/image038.jpg o:title=""/></v:shape><![endif]--><![if !vml]><img width=330 height=219 src="http://livearchive.onlinejudge.org/external/40/j_files/image038.jpg v:shapes="_x0000_i1026"><![endif]></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=348 valign=top style='width:261.0pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;mso-element:frame;mso-element-frame-hspace:
  9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:paragraph;
  mso-element-anchor-horizontal:margin;mso-element-top:.05pt;mso-height-rule:
  exactly'><span style='font-size:11.0pt'>Figure 1: The figure above shows 6 places. It also shows all possible triangular tracks (not necessarily valid site) by connecting them. The green track is one invalid track site, on the other hand the red track is one valid track site. There are five other valid track sites in the above figure. fv<o:p></o:p></span></p></td></tr></table><p class=MsoNormal style='text-align:justify'>For example in the figure on the left you can see a closed triangular track marked with green. If someone wants to go from station D to station E he can go directly by riding a clockwise train or can go via station C by riding a counter clockwise train: That is he first buys ticket from station D to C and then he buys ticket of station C to E. But in the current ticket pricing system the route via C (which is also much longer) will be cheaper. So this site CED is not a place to build a track. For the similar reasons AEB is a valid site for building track. On a valid track the shortest distance between any two stations is also the unique cheapest route between them. Given the coordinate of all stations you will have to find the number of sites (a group of three places) for valid tracks.</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><h5><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:
16.0pt;mso-bidi-font-size:10.0pt;mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'>The input file contains at most 15 sets of inputs. The description of each set is given below:</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'>Each set starts with an n (2&lt;n&lt;1201) which denotes the number of stations. Each of the next n lines contains two integer x<sub><span style='mso-bidi-font-size:12.0pt'>i</span></sub>, y<sub><span style='mso-bidi-font-size:12.0pt'>i</span></sub> (0&#8804;x<sub><span style='mso-bidi-font-size:12.0pt'>i</span></sub>, y<sub><span style='mso-bidi-font-size:
12.0pt'>i</span></sub>&#8804;10000) which denotes the Cartesian coordinate of the i-th station. You can assume that a track can be built via through any three stations, no three places will be collinear to avoid the problem of degenerate tracks and the connecting railroad between two stations can always be represented by the straight line connecting them.</p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><h4 style='text-align:justify'>For each set of input produce two line of output. The first line contains the serial of output and the second line displays the total number of sites where a track can be built. Look at the output for sample input for details.</h4><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;font-style:normal'>Sample Input<span style='mso-spacerun:yes'>            </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=211 valign=top style='width:2.2in;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><pre><b><span
  style='font-size:11.0pt'>6<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>26 23<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>51 94<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>103 110<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>164 107<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>116 67<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>73 16<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>2<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>1 1<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>2 2<o:p></o:p></span></b></pre><pre><b><span
  style='font-size:11.0pt'>0<o:p></o:p></span></b></pre></td><td width=405 valign=top style='width:303.85pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>Scenario 1:<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>There are 6 sites for making valid tracks<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>Scenario 2:<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'>There are 0 sites for making valid tracks<o:p></o:p></span></b></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><b><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman</p><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4065||||||false||||||
<P>Rock, Paper, Scissors is a two player game, where each player simultaneously chooses one of the three items after counting to three. The game typically lasts a pre-determined number of rounds. The player who wins the most rounds wins the game. Given the number of rounds the players will compete, it is your job to determine which player wins after those rounds have been played.<P>The rules for what item wins are as follows:<P><UL><LI>Rock always beats Scissors (Rock crushes Scissors) </LI><LI>Scissors always beat Paper (Scissors cut Paper) </LI><LI>Paper always beats Rock (Paper covers Rock) </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first value in the input file will be an integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < t < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>t</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file. Following this, on a case by case basis, will be an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n < 100)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 100)</SPAN> <tex2html_verbatim_mark> specifying the number of rounds of Rock, Paper, Scissors played. Next will be <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, each with either a capital <TT>R</TT>, <TT>P</TT>, or <TT>S</TT>, followed by a space, followed by a capital <TT>R</TT>, <TT>P</TT>, or <TT>S</TT>, followed by a newline. The first letter is Player 1's choice; the second letter is Player 2's choice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, report the name of the player (`<TT>Player 1</TT>' or `<TT>Player 2</TT>') that wins the game, followed by a newline. If the game ends up in a tie, print `<TT>TIE</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
R P 
S R 
3 
P P 
R S 
S R 
1 
P R
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Player 2 
TIE 
Player 1
</PRE><P>
______________________________________________________
4066||||||false||||||
<P>As Chief Bureaucrat at Missile Command, it has recently come to your attention that the existing performance guidelines do not sufficiently penalize frivolous use of expensive ammunition. Therefore, you must write a new battle summary analysis tool which takes into account excess ammunition consumption during battle.<P><P><BR>A battle consists of the following elements:<UL><LI>Shots. A shot is a circularly explosive countermeasure. A shot has a fixed position and is active for 2 seconds, during which its radius varies from 0 to 1km and then back to 0 according to the formula: <SPAN CLASS="MATH"><I>r</I> = (1 - (<I>t</I> - 1)<SUP>2</SUP>)<SUP>1/2</SUP></SPAN> <tex2html_verbatim_mark> </LI><LI>The ground, at <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> <tex2html_verbatim_mark>. </LI><LI>Missiles. A missile is a point particle that moves at a constant velocity. If a missile collides with an active shot, the missile is neutralized (the shot persists). If a missile hits the ground before being neutralized, it is considered to have hit its target. </LI></UL><P><P><BR>Performance is evaluated on a simple point scale. The performance criteria are as follows:<UL><LI>Every neutralized missile adds 1 point. </LI><LI>Every missile allowed to hit its target subtracts 5 points. </LI><LI>Every unnecessary shot subtracts 20 points. The number of unnecessary shots in a battle is the difference between the actual number of shots fired and size of the minimum subset of those shots that would have neutralized the same number of missiles. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will be given in the following format (legend follows):<P><P><BR><SPAN CLASS="MATH"><I>nb</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>nm</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>mx</I>&nbsp;<I>my</I>&nbsp;<I>mdx</I>&nbsp;<I>mdy</I>&nbsp;<I>mt</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>ns</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>sx</I>&nbsp;<I>sy</I>&nbsp;<I>st</I></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><P><P><BR>In the following legend, indentation denotes repetition of the indented block a number of times equal to the value of the preceding input item:<P><P><BR><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>nb</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0 &lt; <I>nb</I>)</SPAN> <tex2html_verbatim_mark> - number of battles<DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>nm</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$"><I>nm</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> - number of missiles<DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>mx</I>/<I>my</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0.0 < my)$
 --><SPAN CLASS="MATH">(0.0 &lt; <I>my</I>)</SPAN> <tex2html_verbatim_mark> - initial missile position (in km)</DD><DT></DT><DD><SPAN CLASS="MATH"><I>mdx</I>/<I>mdy</I></SPAN> <tex2html_verbatim_mark> - missile velocity (in km/s)</DD><DT></DT><DD><SPAN CLASS="MATH"><I>mt</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$"><I>mt</I>)</SPAN> <tex2html_verbatim_mark> - time since battle start of the missile's entrance (in seconds)</DD></DL></DD><DT></DT><DD><SPAN CLASS="MATH"><I>ns</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$"><I>ns</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> - number of shots<DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>sx</I>/<I>sy</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$"><I>sy</I>)</SPAN> <tex2html_verbatim_mark> - shot position at time of detonation (in km)</DD><DT></DT><DD><SPAN CLASS="MATH"><I>st</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0.0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4066img1.png ALT="$ \le$"><I>st</I>)</SPAN> <tex2html_verbatim_mark> - time since battle start of the shot's detonation (in seconds)</DD></DL></DD></DL></DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each battle, output a line containing the score for that battle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
4.0 8.0 0.0 -1.0 0.0 
4.0 8.0 1.0 -1.0 0.0 
1 
4.0 4.0 3.0 
3 
4.0 10.0 0.0 -1.0 0.0 
5.0 10.0 3.0 -6.0 4.0 
13.0 10.0 -3.0 -5.0 4.0 
3 
4.0 5.0 3.0 
7.0 8.0 4.0 
9.0 4.0 4.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-4 
-17
</PRE><P>
______________________________________________________
4067||||||false||||||

<P>
Prime numbers are defined as follows: a number is prime if it is greater than 1 and is evenly divisible only by itself and 1. Note that by definition neither zero nor one is a prime number. 

<P>
A palindromic number is one whose string representation is a palindrome, that is, a string that reads the same backwards and forwards. 

<P>
You are on the clue crew preparing questions for the category ``Palindromic Primes" and are to write a program to generate the answer and responding question in Jeopardy! style. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains a series of number pairs (with white space separating them) specifying individual problems, ending with a pair of zeroes. The first number gives the number of digits for the numbers to be considered, the second number gives the base in which the numbers are to be generated. The numbers are separated by a single space. You are assured that all palindromic primes for this problem can be represented in the range of a standard 32-bit signed integer. The bases allowed are integer bases between 2 and 36 â with bases above base ten handled as extensions of hexadecimal. This means that the valid numeric digits are in the range [`<TT>0</TT>'..`<TT>9</TT>'] and [`<TT>a</TT>'..`<TT>z</TT>']. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each number, generate one line giving the number of digits and the base as the answer and then on the next line the number of palindromic primes found as the question as shown in the sample output. Each output pair should be separated by a blank line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 10
2 10
3 10
4 24
5 4 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
The number of 1-digit palindromic primes &lt; 2^31 in base 10. 
What is 4? 

The number of 2-digit palindromic primes &lt; 2^31 in base 10. 
What is 1? 

The number of 3-digit palindromic primes &lt; 2^31 in base 10. 
What is 15? 

The number of 4-digit palindromic primes &lt; 2^31 in base 24. 
What is 0? 

The number of 5-digit palindromic primes &lt; 2^31 in base 4. 
What is 10?
</PRE>

<P>

______________________________________________________
4068||||||false||||||
Rubik's Cube<SPAN CLASS="MATH"><SUP>(R)</SUP></SPAN>
<tex2html_verbatim_mark></A>&nbsp;</FONT></B></TABLE></CENTER>
</H1>

<P>
You are a secret agent for the Eternally Indebted External Intelligence Office (EIEIO) of the country of Nomoneo. Headquarters has disguised your one-time pad for encrypted communications in the form of a Rubik's Cube<SPAN CLASS="MATH"><SUP>(R)</SUP></SPAN>
<tex2html_verbatim_mark>. (For those of you unfamiliar with the puzzle, a Rubik's Cube<SPAN CLASS="MATH"><SUP>(R)</SUP></SPAN>
<tex2html_verbatim_mark> comes in the form of a cube where each face is divided into three rows and three columns (nine ``squares"). Any of the six faces of the cube may be rotated either clockwise or counterclockwise, which also rotates the three nearest squares on each adjoining face onto a new face, respectively. When solved (or taken from the factory packaging), each face of the cube contains squares of only one color. There is no way to change the relationship between the colors of the central squares on each face.) The cube has been pre-scrambled and you are to apply a certain set of moves to the cube based on the message you want to return. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4068.eps}$
 -->
<IMG
 WIDTH="458" HEIGHT="610" ALIGN="right" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/p4068.png
 ALT="\epsfbox{p4068.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
This diagram provides the relationship between the sides of the cube as well as the orientation of the faces for the purposes of input and output. It should be viewed as an unfolded cube with the text on the outside. The faces are indicated by the color of the central subdivision (square) and are White, Orange, Red, Blue, Green, and Yellow. The corner with the dot is the top left corner for purposes of input and output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Your program should read the input data from the file, which consists of several cases. The first line of the input will give the number of these input cases (as a decimal integer without any punctuation), which will be greater than or equal to 1 and less than or equal to 10,000. Each case consists of three lines giving the initial state of the puzzle cube and one line giving the rotations you must apply to reach the appropriate final state of the cube. 

<P>
Each of the three lines giving the initial state of the cube consists of 18 letters with a single space between each pair of letters. There is no space between the last letter and the end of the line. Each of the letters is `<TT>W</TT>', `<TT>O</TT>', `<TT>R</TT>', `<TT>B</TT>', `<TT>G</TT>', or `<TT>Y</TT>' indicating the respective color. The faces are listed from left to right in the order (by central square color) White, Orange, Red, Blue, Green, Yellow. Thus, the first three columns of letters give the state of the ``White" face, and so forth. The fourth line of the case gives the manipulations that you must apply to the cube. Each manipulation consists of a single letter as above (`<TT>W</TT>', `<TT>O</TT>', `<TT>R</TT>', `<TT>B</TT>', `<TT>G</TT>', or `<TT>Y</TT>') indicating which face (selected by the color of the center) you should rotate. Each rotation thus indicated is a 90<SPAN CLASS="MATH"><SUP><TT>o</TT></SUP></SPAN>
<tex2html_verbatim_mark> clockwise rotation of the face with respect to the rest of the cube, looking at the face!
  to be rotated. At least one and no more than 1,000 manipulations will be specified.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Print to standard output the state of the cube after the indicated manipulations. Use the same format as for input: three lines, each containing 18 color letters separated by a single space character. Do not put a space after the final letter on the line. Print out the faces in the same order, left to right, as for input: White, Orange, Red, Blue, Green, Yellow. After each output case, print a line containing 35 `<TT>=</TT>' characters. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
W W W O O O R R R B B B G G G Y Y Y
W W W O O O R R R B B B G G G Y Y Y
W W W O O O R R R B B B G G G Y Y Y
RG 
Y G G Y G W Y W B R W O R W G B G G
O W R Y O B G R O R B O Y G R B Y Y
O W O G O W Y B W B R W B B O R Y R
GROWBOBGROW
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
O O O Y Y Y R R R Y Y Y G G G B Y O 
W W W O O O R R R B B B G G G B Y O 
B B B W W W R R R W W W G G G B Y O 
=================================== 
W G R Y B G B R G B O W O R B R W R 
G W B G O R G R R Y B B O G O Y Y B 
G W R Y Y Y W W O G O W O Y B Y W O 
===================================
</PRE>

<P>

______________________________________________________
4069||||||false||||||
<P>Geek Challenge [SKRZAT] is an <SPAN CLASS="textbf">old</SPAN>, <SPAN CLASS="textbf">old</SPAN> game from Poland that uses a game console with two buttons plus a joy stick. As is true to its name, the game communicates in binary, so that one button represents a zero and the other a one. Even more true to its name, the game chooses to communicate so that the base of the number system is <SPAN CLASS="textbf">minus two</SPAN>, not plus two, so we'll call this representation ``Weird Binary". Thus the bit positions label the powers of <SPAN CLASS="textbf">minus two</SPAN>, as seen in the following five-bit tables:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=8 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Bits</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Value</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10010</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>14</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10011</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>15</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10000</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>16</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10001</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>17</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10110</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>18</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10111</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>19</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>12</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10100</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>20</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>01101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>00101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10101</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>21</TD></TR></TBODY><TBODY><TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><P><BR>Numbers are presented on the screen in Weird Binary, and then numbers are accepted in response from the console as a stream of zeroes and ones, terminated by a five-second pause.<P>You are writing a computer program to support the novice geek in playing the game by translating numbers between decimal and Weird Binary.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line in the file gives the number of problems being posed without any white space. Following are that many lines. Each line will either be a conversion into Weird Binary or out of Weird Binary: the letter ``<TT>b</TT>" indicates that the rest of the line is written in Weird Binary and needs to be converted to decimal; the letter ``<TT>d</TT>" indicates that the rest of the line is written in decimal and needs to be converted to Weird Binary.<P>The input data are in the range to fit within a 15-bit Weird Binary number, which represents the decimal number range -10922 to 21845, inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each conversion problem, show the type of problem, its input string, and the converted result in the format shown below, replicating even the spacing exactly as shown. Leading zeroes are <SPAN ID="txt64">not</SPAN> allowed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
b 1001101 
b 0111111 
b 101001000100001 
b 010010001000010 
b 100110100110100 
d -137 
d 137 
d 8191 
d -10000 
d 21000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
From binary: 1001101 is 61 
From binary: 0111111 is -21 
From binary: 101001000100001 is 19937 
From binary: 010010001000010 is -7106 
From binary: 100110100110100 is 15604 
From decimal: -137 is 10001011 
From decimal: 137 is 110011001 
From decimal: 8191 is 110000000000011 
From decimal: -10000 is 10100100110000 
From decimal: 21000 is 101011000011000
</PRE><P>
______________________________________________________
4070||||||false||||||

<P>
Philip J. Frog just wanted to go for a mid-afternoon swim, but in typical frog fashion he's ended up in the middle of a busy street. Help Phil figure out how long he'll be hopping on hot asphalt before he finds his way to the nice cool water. 

<P>
Phil may hop one square horizontally or vertically per second. He may only hop onto road, grass, or water. Additionally, he cannot occupy any square occupied by a car. Phil and the cars move at the same time, meaning Phil can ``hop over" an oncoming car. Phil can also remain in the same square if he wishes. All horizontal movement wraps (e.g., a rightward hop from the rightmost column places Phil in the leftmost column). Cars move horizontally in the direction indicated on the map (`<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>' means leftward, `<SPAN CLASS="MATH">&gt;</SPAN>
<tex2html_verbatim_mark>' means rightward) at a rate of one square per second and never collide with anything. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input begins with a single integer specifying the number of test maps. Each map begins with two integers <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < R, C \le 30)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>R</I>, <I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4070img1.png
 ALT="$ \le$">30)</SPAN>
<tex2html_verbatim_mark> specifying the number of rows and columns, respectively, followed by <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines each <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> characters long, specifying the map. The possible map characters are: 

<P>

<P>
<BR>
Phil (`<TT>&amp;</TT>') - Phil's starting location. Each map contains exactly one. Always indicates road underneath. 

<P>
Tree (`<TT>T</TT>') - Impassable. 

<P>
Grass (`<TT>.</TT>') - Phil can move freely in the grass. 

<P>
Road (`<TT>-</TT>') - Hot! 

<P>
Car (`<TT>&lt;</TT>', `<TT>&gt;</TT>') - Always indicates road underneath. 

<P>
Water (`<code>~</code>') - Phil's goal. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each map, output a line containing the fewest number of seconds Phil must spend on the road in order to reach the water, or the string ``<TT>Impassable</TT>", if no path to water exists. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
2 1 
~ 
&amp; 
4 7 
~TTTTTT 
.------
--&gt;-&lt;--
---&amp;---
3 5 
~~~~~ 
..T.. 
&gt;&gt;&amp;&lt;&lt;
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1 
6 
Impassable
</PRE> 

<P>

______________________________________________________
4071||||||false||||||
<P>Alex and Karyn were at it again. The elementary school sisters were playing their favorite game to decide who gets to play on the computer next.<P>The rules of the game are quite simple. Given <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> people <SPAN CLASS="MATH">(<I>p</I> &gt; 0)</SPAN> <tex2html_verbatim_mark>, one of the <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> people is chosen to pick a number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I> &gt; <I>p</I>)</SPAN> <tex2html_verbatim_mark> representing the number of pieces of bubble gum desired. Once this value is chosen, the people are iterated through, one at a time, starting at 1, from ``left" to ``right", starting with the person who chose the number. Iterating is done in a circular fashion, meaning that once the person on the far right is reached, the next person in the iteration will be the person on the far left. Upon reaching <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the person at that location is the winner.<P>Given a list of names, followed by the name of the person choosing the number of pieces of bubble gum, followed by the number that person chose, determine who wins the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first value in the input file will be an integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < t < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>t</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark> representing the number of test cases in the input file. Following this, on a case by case basis, will be a list of the names of the people (<SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>), on a single line. Names will be no larger than 20 characters in length and all names are unique. There will be no more than 20 names. Each name is followed by a space, save for the last name, which is followed by a newline. On the next line is the name of the person choosing the number of pieces of bubble gum, followed by a newline. The test case is concluded with the number of pieces of gum <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(p < n < 1000)$
 --><SPAN CLASS="MATH">(<I>p</I> &lt; <I>n</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>, which is also followed by a newline.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, report the name of the person that won the game, followed by a newline.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
Alex Karyn Maude 
Karyn 
5 
Alex Karyn Maude 
Alex 
6 
Alex Karyn Zach Becca Maude 
Zach 
8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Maude 
Maude 
Maude
</PRE><P>
______________________________________________________
4072||||||false||||||

<P>
GamesAreUs.com has just completed its outside audit for this year. One item that was caught was the lack of any business rules for assigning permissions to files on the company's shared file server. The analysts are working on setting up some roles for all employees and what permissions should be given to each role. Your team is to take a look at the existing situation so you can provide some input to the analysts. 

<P>
Fortunately permission assignment has not been completely random. The most common way to set up a new employee is to ask that they be set up ``just like Joe", effectively making an ad-hoc prototype system. 

<P>
You will be given the access control lists (ACLs) for the top level directories of the shared file server. Using these, your team is to write a program to split the users up into equivalence classes where all members of a class have access to exactly the same directories. 

<P>
Because of the several departments in GamesAreUs.com, there are multiple access control lists to be processed: one set of lists per department. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of input to your program is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < n < 100)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 100)</SPAN>
<tex2html_verbatim_mark>, by itself on the line without any white space, giving the number of departments. 
Following that are the data for those departments. 

<P>
ACLs associated with one department is a sequence of ACLs ended by ``<TT>-1</TT>" by itself. Each ACL is a line of unsigned integers <!-- MATH
 $(1 \le x \le 2147483647)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4072img1.png
 ALT="$ \le$"><I>x</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4072img1.png
 ALT="$ \le$">2147483647)</SPAN>
<tex2html_verbatim_mark> separated from each other by a single blank. The first integer on the line is the file id (FID) of the directory. The remaining numbers on the line are the user ids (UIDs) that have access. Each line will have a FID and at least one UID. There will be no duplicate UIDs on the line, but note the UIDs and FIDs are in separate spaces so a UID could be the same integer as a FID. The ACLs, and within an ACL the UIDs, appear in no particular order. In the full list of ACLs, a given FID will appear only once. There are at most 50 top-level directory ACLs and there are at most 100 UIDs. All FIDs and UIDs are greater than 0. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each department, the first line of output identifies which case is being processed, beginning with 1. That line contain the word ``<TT>Case</TT>", one blank, and the integer identifying which case it is. 

<P>
For every class with at least 2 members, print a line with the number of members in the class with no sign or leading zeros, one space, and the smallest UID in the class with no sign, leading zeros, or trailing spaces. Sort the output by the number of members, descending, and then by the UIDs, ascending. If there are no such classes, print ``<TT>no prototypes found</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
100 9 7 2 3 1 6 
200 9 6 7 1 2 5 3 8 
300 6 3 7 8 5 
400 4 5 8 
-1 
100 1 
200 37 
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1 
3 1 
3 3 
2 5 
Case 2 
no prototypes found
</PRE>

<P>

______________________________________________________
4073||||||false||||||

<P>
In the Price Is Right's game Cover Up, players test their luck to win a new car. To win, the player must produce the actual retail price of the car from a board of possible numbers like: 

<P>
<PRE>
        9 
      3 4
    0 4 7
  9 6 7 3
1 4 8 2 6
3 2 4 0 8
</PRE>

<P>
The player selects one number from each column to form a bid. Using the above board as an example, the first number in the price of the car is either 1 or 3; the second is one of 9, 4, 2; the third is one of 0, 6, 8, 4; and so on. Numbers may never move to a different column. 

<P>
After the player selects their bid, Drew Carey lights up the numbers in the bid which are correct. If the player has no numbers correct, the game ends and they lose; if they have at least one number correct, the game continues. 

<P>
When the game continues, the player is given another opportunity to select numbers from those columns that were incorrect. They will <SPAN  CLASS="textit">cover up</SPAN> the wrong bid numbers with different selections from the same columns. Again, Drew Carey will light up any new correct digits. If the player has no <SPAN  CLASS="textit">new</SPAN> numbers correct, the game ends and they lose; if they have at least one new number correct, the game continues. 

<P>
For example: 

<P>
<PRE>
        9              9              9 
      3 4            3 4            3 4
    0 4 7          0 4            0 4 
  9 6 7 3   -&gt;   9     3    -&gt;  9 
1 4 8 2 6          8 2 6            2 6
3 2 4 0 8      3 2 4 0 8      3 2 4 0 8
| | | | |          |   |          |
v v v v v          v   v          v

               1 4 6 7 7      1 4 8 7 3
               c c x c x      c c x c c

               INITIAL BID    SECOND BID
</PRE>

<P>
The player selects an initial bid of $14677. The 1, 4 and first 7 are correct (<TT>c</TT> stands for correct, <TT>x</TT> for incorrect, and <TT>v</TT> designates a column that requires a subsequent selection in the example above). The player covers up the incorrect 6 and 7 with an 8 and a 3 for a second bid of $14873. The 3 is correct, but the 8 is wrong. At this point it's a 50/50 chance. The player will select the 4 or the 0 and either win the car or lose the game.

<P>
The show's sponsors would like to know how frequently their cars are given away. You are to use the assumption that players choose numbers uniformly from those remaining. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The sponsor will explore many variations, with prices up to 7 digits long. Therefore, the input file will begin with a line containing the integer <!-- MATH
 $N \le 5000$
 -->
<SPAN CLASS="MATH"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4073img1.png
 ALT="$ \le$">5000</SPAN>
<tex2html_verbatim_mark>, the number of test cases to be explored. The test cases follow. 

<P>
Each test case begins with the integer <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 < d \le 7$
 -->
<SPAN CLASS="MATH">0 &lt; <I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4073img1.png
 ALT="$ \le$">7</SPAN>
<tex2html_verbatim_mark>, the number of digits in the price of the car. <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> lines will follow, with non-empty strings of  <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>distinct<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> digits in the range from <TT>0</TT> through <TT>9</TT>. Each of these lines represents a <SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark>column<SPAN CLASS="MATH"><TT>*</TT></SPAN>
<tex2html_verbatim_mark> of the digits in the game. The first line represents the leftmost column; the last the rightmost column. A <TT>0</TT> is possible as the first digit in the price of the car. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Your program will print the probability of the player winning the car, rounded to 3 decimals. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
2 
9 
19 
5 
13 
942 
0684 
34720 
947368
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1.000 
0.321
</PRE>

<P>

______________________________________________________
4074||||||false||||||
<P>26 marbles -- half yellow and half gray -- are distributed between two circles of 13 marbles each. The marbles in each circle can be freely rotated clockwise or counterclockwise. The upper and lower circles are bridged by a smaller circle, which rotates -- in the plane of the board -- 180 degrees, effectively exchanging the three bottommost marbles of the upper circle with the three uppermost marbles of the lower one. The goal is to get all gray marbles to the upper circle and all yellow marbles to the lower one while minimizing the number of times the bridging circle is rotated.<P><DIV ALIGN="CENTER"><IMG WIDTH="297" HEIGHT="627" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4074.png ALT="\epsfbox{p4074.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a series of lines, where each line describes an initial board configuration. Each line is a permutation of 13 <TT>y</TT>'s and 13 <TT>g</TT>'s. The first half of the line describes the clockwise configuration of the upper circle, and the rest of the line describes the clockwise configuration of the lower one. Of course, each <TT>y</TT> corresponds to a yellow marble, and each <TT>g</TT> corresponds to a gray one.<P>The input file will include multiple test cases. Each test case consists of a single line containing some permutation of the string <TT>y</TT><SPAN CLASS="MATH"><SUP>13</SUP></SPAN> <tex2html_verbatim_mark><TT>g</TT><SPAN CLASS="MATH"><SUP>13</SUP></SPAN> <tex2html_verbatim_mark>. All lines (including the last one) are terminated with a newline. The newline immediately follows the last letter on the line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, you should print the minimum number of bridge rotations on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
gggggggggggggyyyyyyyyyyyyy 
yyyyyggggggggyyyygggggyyyy 
gyyygyggyyygyyggyyggggyygg 
ygygygygygygygygygygygygyg
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
2 
5 
6

______________________________________________________
4075||||||false||||||

<P>
Mr. Skywind is a completist. He wants to draw a most prefect shape with some
point. He know that circle is a perfect shape, because among of all shapes with the
same circumference, area enclosed by circle is the largest one. Strictly, for each shape,
a ``perfect  ratio" is  defined:  <!-- MATH
 $pr(S) = len^{2} (S) /area(S)$
 -->
<SPAN CLASS="MATH"><I>pr</I>(<I>S</I>) = <I>len</I><SUP>2</SUP>(<I>S</I>)/<I>area</I>(<I>S</I>)</SPAN>
<tex2html_verbatim_mark> Here,  <SPAN CLASS="MATH"><I>len</I>(<I>S</I>)</SPAN>
<tex2html_verbatim_mark> is  the
circumference ofthe shape S, <SPAN CLASS="MATH"><I>area</I>(<I>S</I>)</SPAN>
<tex2html_verbatim_mark> is the area enclosed by shape S. The value of
this ratio only depends on the shape. It doesn't change under similarity transformation.
One can prove that <!-- MATH
 $pr(circle) = 4 \ast \pi$
 -->
<SPAN CLASS="MATH"><I>pr</I>(<I>circle</I>) = 4 <TT>*</TT> <IMG
 WIDTH="15" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4075img1.png
 ALT="$ \pi$"></SPAN>
<tex2html_verbatim_mark> is the minimal among all possible shapes.

<P>
Your task is to find a polygon with the minimal <SPAN CLASS="MATH"><I>pr</I></SPAN>
<tex2html_verbatim_mark> in a given set of points .

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of each input case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le n \le 20)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4075img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4075img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, the number of
following coordinators.

<P>
There are two integers <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> in each of the following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, indicating the
coordinators of one point. <!-- MATH
 $0 \le x, y \le 10000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4075img1.png
 ALT="$ \le$"><I>x</I>, <I>y</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4075img1.png
 ALT="$ \le$">10000</SPAN>
<tex2html_verbatim_mark>.

<P>
No more than 10 input cases will be given.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, output the minimal <SPAN CLASS="MATH"><I>pr</I></SPAN>
<tex2html_verbatim_mark>, rounded to the 4th decimal place.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4
0  0
0  1
1  0
1  1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
16.0000
</PRE> 

<P>

______________________________________________________
4076||||||false||||||
<P>A length test system (LTS) was invented by Little_Y. The system contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rods with positive integral length. Let's record the length of these rods as <SPAN CLASS="MATH"><I>L</I><IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_$">1, <I>L</I><IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_$">2,..., <I>L</I><IMG WIDTH="27" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_N$"></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(L\_1 < L\_2 < \ldots < L\_N)$
 --><SPAN CLASS="MATH">(<I>L</I><IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_$">1 &lt; <I>L</I><IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_$">2 &lt;...&lt; <I>L</I><IMG WIDTH="27" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_N$">)</SPAN> <tex2html_verbatim_mark>.<P>The system can figure out the length of <SPAN CLASS="MATH"><I>LX</I></SPAN> <tex2html_verbatim_mark> if and only if at least one of the following conditions below is satisfied:<P><P><BR><OL><LI><SPAN CLASS="MATH"><I>LX</I></SPAN> <tex2html_verbatim_mark> equals to <!-- MATH
 $L\_q=L\_p (0 < p < q < N+ 1)$
 --><SPAN CLASS="MATH"><I>L</I><IMG WIDTH="19" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_q$"> = <I>L</I><IMG WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_p$">(0 &lt; <I>p</I> &lt; <I>q</I> &lt; <I>N</I> + 1)</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH"><I>LX</I></SPAN> <tex2html_verbatim_mark> equals to <!-- MATH
 $L\_p +L\_N - L\_q (0 < p < q < N)$
 --><SPAN CLASS="MATH"><I>L</I><IMG WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_p$"> + <I>L</I><IMG WIDTH="27" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_N$"> - <I>L</I><IMG WIDTH="19" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_q$">(0 &lt; <I>p</I> &lt; <I>q</I> &lt; <I>N</I>)</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH"><I>LX</I></SPAN> <tex2html_verbatim_mark> equals to <!-- MATH
 $L\_p (0 < p < N + 1)$
 --><SPAN CLASS="MATH"><I>L</I><IMG WIDTH="20" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \_p$">(0 &lt; <I>p</I> &lt; <I>N</I> + 1)</SPAN> <tex2html_verbatim_mark> </LI></OL><P><P><BR>In order to measure the quality of a LTS, we have to introduce the capacity of this system. The capacity <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> of a LTS is a maximum integer while all length from 1 to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> can be figured out in this system.<P>Usually, a consumer requires Little_Y to produce a system with the capacity no less than an expected <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. In order to save roods, Little_Y wants to use minimum number of rods to satisfy his consumer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple test cases. Each test case contains one line with a single integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < C \le 90)$
 --><SPAN CLASS="MATH">(0 &lt; <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4076img1.png ALT="$ \le$">90)</SPAN> <tex2html_verbatim_mark> which is the expected capacity.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output two lines. The first line contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> which is the number of rods to be used in the system. The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers in increasing order which stand for the length of the rods. Two adjacent numbers are seperated by a space. If there're several solutions, output any of them.<P><P><BR><SPAN CLASS="textbf">Explanation</SPAN><P><PRE>
1 = 1
2 = 3 - 1
3 = 3
4 = 7 - 3
5 = 1 + 7 - 3
6 = 7 - 1
7 = 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
1  3  7
</PRE><P>
______________________________________________________
4077||||||false||||||
<P>The ACM Base in Planet X is need of energy. Fortunately plenty of resources have been detected in a huge area. But the area is far from the Base. The robots must be transferred to the area to gather the resources.<P>There are two types of robots in the base: G-robot (gathering) and R-robot (repairing). In order to save energy, the robots have limited turning directions. They can only move to south or east in one step. The G-robot can gather resource. Once he has arrived at one place where there're some resources (we call it E-place), he would always gather resources in that place. After he has gathered <SPAN CLASS="textbf">ONE</SPAN> unit of resource, he would leave that place at once, move to south or east, or be transferred back to Base. The R-robot can repair the damaged bridges, so that other robot can get through.<P>In order to simplify the problem, we represent the area as a <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>M</I></SPAN> <tex2html_verbatim_mark> matrix. Every cell ofthe matrix has a status:<P><DL COMPACT><DT>`<TT>.</TT>':</DT><DD>A robot can go across this place.</DD><DT>`<TT>#</TT>':</DT><DD>Mountain or rivers, which a robbot cannot arrive.</DD><DT>`<TT>B</TT>':</DT><DD>Adamaged bridge. The G-robot cannot arrive this place before it is repaired. A R-robot can repair it when he arrives this place.</DD><DT>`<TT>E</TT>':</DT><DD>An E-place. The amount of resources is detected in this place. When a G-robot arrives this place, he will gather exactly ONE unit of resources. After all the resource in a E-place are taken away, the ground will collapse and neither of the two robots can go acrooss.</DD></DL><P>The G-robot can gather as much energy as possible without a capacity limitation. The robots can be transferred to any place in the matrix and transferred back to Base from any pplace. But the process of transfer can fray the robots. If a robot has a duration of life <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> now, he can be transferred <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> times at most.<P>Workers in the Base planned to use the two robots to gather all detected resources. But a robot has a limited duration of life, the mission may fail. So we must analyze the map ofresources and calculate whether all the resources can be gathered.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line ofthe input is an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$">21)</SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases.<P>The first line of a test case is four integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Lr</I></SPAN> <tex2html_verbatim_mark>(R-robot's duration of life), <SPAN CLASS="MATH"><I>Lc</I></SPAN> <tex2html_verbatim_mark>(G-robot's duration of life). <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$">11</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$"><I>Lr</I>, <I>Lc</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$">5000</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines is an <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>M</I></SPAN> <tex2html_verbatim_mark> matrix, representing the area as described above. The next line contains several integers <SPAN CLASS="MATH"><I>ti</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$"><I>ti</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$">50, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4077img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> which is the amount of resources detected in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th E-place. The E-places are indexed from north to south, and from west to east ifon the same row (see the last sample explanation).<P>There're at least one E-place and at most 50 E-places. The number of damaged bridges is less than 11.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output `<TT>Yes</TT>' or `<TT>No</TT>' in a single line for each test case, giving your answer that whether the mission can be completed.<P><P><BR><SPAN CLASS="textbf">Sample Explanation</SPAN><P>The <SPAN CLASS="MATH">1</SPAN> <tex2html_verbatim_mark>-st mission succeeds. One possible plan (Transferred 4 times):<P>G-robot: Transferred to (2,2) -<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> Gather One unit -<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> Transferred to Base<P>G-robot: Transferred to (2,2) -<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> Gather One unit -<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> Transferred to Base<P>The <SPAN CLASS="MATH">2</SPAN> <tex2html_verbatim_mark>-nd mission failed. The G-robot has to be transferred 4 times.<P>The <SPAN CLASS="MATH">3</SPAN> <tex2html_verbatim_mark>-rd mission is used to make clear the order of E-places.<P>(1, 1) 4 units.(1,2) 3 units. (2, 1) 2 units. (2,2) 1 unit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3

2  2  1  4
.#
#E
2

3  3  2  3
E#E
BEB
##E
1  1  1  1

2  2  0  0
EE
EE
4  3  2  1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes
No
No
</PRE><P>
______________________________________________________
4078||||||false||||||

<P>
Fennec has applied a card from CSI-Bally Total Fitness which is a gym in
Beijing. He loves BODYPUMP best and joins in it about 3 times a week!

<P>
BODYPUMP is a weight-based group-fitness program created by Phillip Mills
and distributed globally by Les Mills International.

<P>
The first BODYPUMP class was started in December 1991 in Auckland
(according to Information published in UK via a report by Alan Felstead). The
philosophy of Phillip Mills was to involve everyone into the aerobics room.

<P>
A standard class is 60 minutes long. There is also a 45 minute class. The lately
BODYPUMP Express class, which lasting 30 minutes, has bpeen introduced to Japan.
And the class in Bally is about 50 minutes.

<P>
The classes are performed to music using free weights-plates, barbells and an
aerobic step. Participants choose their weights based on the exercise and their
personal strength levels. Major muscle groups are worked via series of compound and
isolation-based exercises including squats, presses, dead lifts, as well as other
exercises.  The focus is enhancing muscle endurance using several repetitions.
Hypertrophy occurs in all classes.

<P>
A new BODYPUMP class, consisting of new music and choreography, is
developed and released to health clubs and instructors every three months. Muscle
groups are always worked in the same order as stated in the Les Mills Instructor
Resources, allowing for consistency across releases. Instructors can choose to work
with one release, or mix tracks from multiple releases, in order to achieve maximal
gains in strength and hypertrophy for their class. Instructors and trainers are provided
with guidance from Les Mills International regarding the mixing oftracks for classes.

<P>
Music is used to guide and encourage participants. A normal class contains ten
mainstream hit songs. The music is choreographed and each track targets for a
different muscle group. The tracks consist of a warm up followed by squats, chest,
back (clean and presses, dead lifts and dead rows), triceps, biceps, lunges, shoulders
(a selection ofpush-ups, lateral raises, frontal raises and military presses), abdominals
and finally a cool down encompassing a variety of stretches.

<P>
Due to the nature of the program maximum heart rate (MHR) increases in
different phases. In addition, the aerobic capacity changes are based on music
selection beats per minute (BPM).

<P>
However, during the BODYPUMP, Fennec needs to add or remove the plates to
change the weight of his barbell to practice different parts of his muscle groups. To
make it simple, we just divide the BODYPUMP into a sequence of songs and he will
choose a weight in each song.

<P>
For example, there are three types of plates whose weights are 1-kg, 2-kg and
3-kg. And there are three songs which need the weight of8-kg, 14-kg, and 10-kg.

<P>
Fennec can choose to add two 2-kg plates in each side of his barbell for the first
song .

<P>

<P>
<BR>
<PRE>
                             22-----22
                                \o/
                                 I
                                / \
</PRE> 

<P>

<P>
<BR>
Then, he can add one 3-kg plates in each side ofhis barbell for the second song.

<P>

<P>
<BR>
<PRE>
                            322-----223
                                \o/
                                 I
                                / \
</PRE> 

<P>

<P>
<BR>
At last, he can remove the 3-kg plates and add one 1-kg plate in each side ofhis
barbell.

<P>

<P>
<BR>
<PRE>
                            122-----221
                                \o/
                                 I
                                / \
</PRE> 

<P>

<P>
<BR>
After the class, Fennec should removee all the plates out of his barbell and return
them back.

<P>
Now, we can see that, during the class Fennec needs 4+2+4+6=16 moves. It is
for you now to find the way with the minimum number of moves. Please note that, the
weight at each side ofthe barbell must be the same!

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
This probplem consists ofseveral test cases, each of which is described below:

<P>
The first line of each test case contains one integer <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I> &lt; 12)</SPAN>
<tex2html_verbatim_mark>, which stands for
the number of different types of plates.

<P>
The second line will contain <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> integers, which stands for the weight (<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>101) of
each plate. The third line contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I> &lt; 101)</SPAN>
<tex2html_verbatim_mark>, which stands for the number
of songs. The forth line will contain <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers, which stands for the weight (<SPAN CLASS="MATH">&lt;</SPAN>
<tex2html_verbatim_mark>24) of
barbell needed in each songs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, just the output the minimum number of moves a line. If Fennec
can not do the BODYPUMP, you should output `<TT>-1</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
1  2  3
3
8  14  10
3
2  4  6
1
2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
16
-1
</PRE>

<P>

______________________________________________________
4079||||||false||||||

<P>
In the late 1700s', Gauss, a famous mathematician, found a special kind of
numbers. These integers are all in the form:  <!-- MATH
 $a + b \sqrt{-k}$
 -->
<SPAN CLASS="MATH"><I>a</I> + <I>b</I><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$"></SPAN>
<tex2html_verbatim_mark>.The sum and multiplication
ofthese integers can be naturally defined as the follows:

<P>

<P>
<BR>
<!-- MATH
 $(a+b \sqrt{-k})+ (c+d \sqrt{-k}) = (a+c)+ (b+d) \sqrt{-k}$
 -->
<SPAN CLASS="MATH">(<I>a</I> + <I>b</I><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$">) + (<I>c</I> + <I>d</I><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$">) = (<I>a</I> + <I>c</I>) + (<I>b</I> + <I>d</I> )<IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$"></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
<!-- MATH
 $(a+b \sqrt{-k}) \ast (c +d \sqrt{-k}) = (a \ast c =b \ast d \ast k)+ (a \ast d+b \ast c) \sqrt{-k}$
 -->
<SPAN CLASS="MATH">(<I>a</I> + <I>b</I><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$">) <TT>*</TT> (<I>c</I> + <I>d</I><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$">) = (<I>a</I> <TT>*</TT> <I>c</I> = <I>b</I> <TT>*</TT> <I>d</I> <TT>*</TT> <I>k</I>) + (<I>a</I> <TT>*</TT> <I>d</I> + <I>b</I> <TT>*</TT> <I>c</I>)<IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$"></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
One can prove that the sum and multiplication of these integers constitute the
structure called ``imaginary quadratic field" in calculus.

<P>
In case <SPAN CLASS="MATH"><I>k</I> = 1</SPAN>
<tex2html_verbatim_mark>, these are common complex numbers.

<P>
In case both <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> are integers, these numbers are called ``Gauss integers", and
this is the very case that interests people the most in quadratic algebra.

<P>
As we all know that every integer can be factorized into the multiplication of
several primes (Fundamental theoorem of arithmetic, or unique factorization theorem).

<P>
Primes are the integers that can only be divided by 1 and itself. We do have a
similar concept in the context ofGauss integer.

<P>
If a Gauss integer cannot bee factorized into the multiplication of other Gauss
integers (0, 1, -1 exclusive), we call it a ``Gauss Prime" or ``Non-divisible".

<P>
Please note that 0, 1 and - 1 are not regarded as gauss primes but <SPAN CLASS="MATH"><IMG
 WIDTH="42" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-k}}$"></SPAN>
<tex2html_verbatim_mark> is.

<P>
However, unique factorization theorem doesn't apply to arbitrary <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. For example
in  the  case  <SPAN CLASS="MATH"><I>k</I> = 5</SPAN>
<tex2html_verbatim_mark>,  6  can  be  factorized  in  two  different  ways:
<!-- MATH
 $6 = 2 \ast 3, 6 = (1+\sqrt{-5}) \ast (1-\sqrt{-5})$
 -->
<SPAN CLASS="MATH">6 = 2 <TT>*</TT> 3, 6 = (1 + <IMG
 WIDTH="41" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-5}}$">) <TT>*</TT> (1 - <IMG
 WIDTH="41" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-5}}$">)</SPAN>
<tex2html_verbatim_mark>.

<P>
Thanks to the advance of mathematics in the past 200 years, one can prove that
there are only 9 integers can be used as <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, such that the unique factorization theorem
satisfies. These integers are <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> = { 1, 2, 3, 7, 1 1, 19, 43, 67, 163}.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input is an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(1 &lt; <I>n</I> &lt; 100)</SPAN>
<tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines. Each 
line is a single case and contains two integers, <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le a \le 10000, 0 < b \le 10000)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \le$"><I>a</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \le$">10000, 0 &lt; <I>b</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
To make this problem not too complicated, we just suppose that <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is 2.

<P>
For every case of the input, judge whether <!-- MATH
 $a + b \sqrt{-2}$
 -->
<SPAN CLASS="MATH"><I>a</I> + <I>b</I><IMG
 WIDTH="41" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4079img1.png
 ALT="$ \sqrt{{-2}}$"></SPAN>
<tex2html_verbatim_mark> is a gauss prime. 

<P>
Output the answer `<TT>Yes</TT>' or `<TT>No</TT>' in a single line.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Sample Explanation</SPAN>

<P>
Please notes that <SPAN CLASS="MATH">(5, 1)</SPAN>
<tex2html_verbatim_mark> is not a gauss prime because <!-- MATH
 $(5, 1)=(1 , -1) \ast (1 , 2)$
 -->
<SPAN CLASS="MATH">(5, 1) = (1, -1) <TT>*</TT> (1, 2)</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
5  1
3  4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
No
Yes
</PRE> 

<P>

______________________________________________________
4080||||||false||||||
<P>The army of United Nations launched a new wave of air strikes on terrorist forces. The objective of the mission is to reduce enemy's logistical mobility. Each air strike will destroy a path and therefore increase the shipping cost of the shortest path between two enemy locations. The maximal damage is always desirable.<P>Let's assume that there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> enemy locations connected by <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> bidirectional paths, each with specific shipping cost. Enemy's total shipping cost is given as <SPAN CLASS="MATH"><I>c</I> = <IMG WIDTH="44" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \sum^{{n}}_{{i=1}}$"><IMG WIDTH="46" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \sum^{{n}}_{{j=1}}$"><I>path</I>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>. Here <SPAN CLASS="MATH"><I>path</I>(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> is the shortest path between locations <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>. In case <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are not connected, <SPAN CLASS="MATH"><I>path</I>(<I>i</I>, <I>j</I>) = <I>L</I></SPAN> <tex2html_verbatim_mark>. Each air strike can only destroy one path. The total shipping cost after the strike is noted as <SPAN CLASS="MATH"><I>c'</I></SPAN> <tex2html_verbatim_mark>. In order to maximized the damage to the enemy, UN's air force try to find the maximal <SPAN CLASS="MATH"><I>c'</I> - <I>c</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line ofeach input case consists ofthree integers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>. <!-- MATH
 $1 < n \le 100$
 --><SPAN CLASS="MATH">1 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \le$"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$ \le$">10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4080img1.png ALT="$\scriptstyle \wedge$"></SUP>8</SPAN> <tex2html_verbatim_mark>. Each ofthe following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains three integers: <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>, indicating length of the path between <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output the total shipping cost before the air strike and the maximal total shipping cost after the strike. Output them in one line separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4  6  1000
1  3  2
1  4  4
2  1  3
2  3  3
3  4  1
4  2  2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
28  38
</PRE><P>
______________________________________________________
4081||||||false||||||
<P>Skywind want to design a circuit with some resistors. We all know that resistors can be connected together in one of two ways: series or parallel. For resistors in series with resistances <SPAN CLASS="MATH"><I>R</I>1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I>2</SPAN> <tex2html_verbatim_mark>, the total resistance is <SPAN CLASS="MATH"><I>R</I>1 + <I>R</I>2</SPAN> <tex2html_verbatim_mark>. For the ones in parallel, the total resistance is <SPAN CLASS="MATH"><I>R</I>1 <TT>*</TT> <I>R</I>2/(<I>R</I>1 + <I>R</I>2)</SPAN> <tex2html_verbatim_mark>. Given certain number of resistors with the resistance of 1, Simple Resistance Circuit (SRC) with different resistance can be built up.<P>A Simple Resistance Circuit is non-reticular and contains ONLY TWO types of connections, series and parallel.<P>A SRC between terminals s and t is labeled as SRC(s,t). It is defined as the follows :<P><OL><LI>A single resistor is a SRC that connects to terminaa l s and t. </LI><LI>The circuit of SRC(s, a) and SRC<P>(a, t) connecting in series at terminal a is also a SRC. </LI><LI>The circuit of SRC1(s, t) and SRC2(s, t) connecting in parallel at terminals s and t is also a SRC. </LI><LI>SRC P is a Sub-SRC of Q, if and only if both P and Q are SRCs and P is part of Q. </LI></OL><P><P><BR><IMG WIDTH="290" HEIGHT="193" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in
\epsfbox{p4081a.eps}
\par
Figure 1
\end{center}}$"><IMG WIDTH="291" HEIGHT="186" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in
\epsfbox{p4081b.eps}
\par
Figure 2
\end{center}}$"><P><DIV ALIGN="CENTER"><IMG WIDTH="618" HEIGHT="190" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="\epsfbox{p4081c.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 3</DIV><P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER">Circuits in figure 1 and 2 are legal SRc, while the one in figure 3 is not.</DIV><P>The resistance of a SRC can be calculated and represented in fractions. e.g.: resistance between terminals s and t in diagram 1 is 4/3, the total resistance of the SRC in diagram 2 is 13/7.<P>Now, you are required to calculate the minimal number of resistors to build a SRC, so that the total resistance of this SRC equals to a given fraction. Please remember that all the resistors you can use are ofthe resistance 1 .<P>For Mr. Skywind is a completist, he wants to measure the value of all the Sub-SRC. Skywind has an equipment to test the resistance and display two numbers A, B for the value A/B. Unfortunately, his equipment can only display an integer no larger than 512. If A or B is greater than 512, the equipment will display wrong value, so Skywind will think the TOTAL circuit is wrong.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each line of the input contains a faction in the form of <SPAN CLASS="MATH"><I>A</I>/<I>B</I></SPAN> <tex2html_verbatim_mark> . Both <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are positive integers <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$ \le$">512)</SPAN> <tex2html_verbatim_mark>.<P>There won't be any `/'s in the input file, just <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4081a.png ALT="$ \le$">512)</SPAN> <tex2html_verbatim_mark> separated by a space. It is guaranteed that the result is not larger than 100.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input, output the minimal number of resistors that can constitute a SRC, such that the resistance of this SRC is the same as the input. Output each number in one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1  2
3  2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
3
</PRE><P>
______________________________________________________
4082||||||false||||||
<P>The kingdom of Tripbansai has an unusual traffic system. The city locations in the kingdom can be described as a grid and all the roads connect neighboring cities. This rectangular grid has 2 rows and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> columns where every point represents a city. So there are <SPAN CLASS="MATH">2 <TT>*</TT> <I>C</I></SPAN> <tex2html_verbatim_mark> cities and <SPAN CLASS="MATH">3 <TT>*</TT> <I>C</I> - 2</SPAN> <tex2html_verbatim_mark> roads in this system.<P>Sometimes two adjacent cities become disconnected because of traffic jam, and sometimes the traffic problem has been solved so that a road can be usedd again. We can assume that every road is closed at first.<P>Ministry of Communications will give some instructions to you. Your task is to implement a program as a traffic response information system.<P>Each instruction appears as a single line in one ofthe formats below:<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Close</TT> <SPAN CLASS="MATH"><I>r</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I>2</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Close the road connecting the adjacent cities located on <SPAN CLASS="MATH">(<I>r</I>1, <I>c</I>1)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>r</I>2, <I>c</I>2)</SPAN> <tex2html_verbatim_mark>.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Open</TT> <SPAN CLASS="MATH"><I>r</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I>2</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Open the road connecting the adjacent cities located on <SPAN CLASS="MATH">(<I>r</I>1, <I>c</I>1)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>r</I>2, <I>c</I>2)</SPAN> <tex2html_verbatim_mark>.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Ask</TT> <SPAN CLASS="MATH"><I>r</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I>2</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Reply with <TT>Y</TT> if there exists a way from the city on <SPAN CLASS="MATH">(<I>r</I>1, <I>c</I>1)</SPAN> <tex2html_verbatim_mark> to the city on <SPAN CLASS="MATH">(<I>r</I>2, <I>c</I>2)</SPAN> <tex2html_verbatim_mark>;</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>reply with <TT>N</TT> if there doesn't.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Exit</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>No more requests are forthcoming. The problem should exit.</TD></TR></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line ofthe input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4082img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4082img1.png ALT="$ \le$">11)</SPAN> <tex2html_verbatim_mark>, representing the number of test cases that follow.<P>The first line of each test case consists of a single integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4082img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4082img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>, which is the number of columns.<P>There are some lines following, each for an instruction. Each test case ends with an instruction ``<TT>Exit</TT>". There are no more than 100000 instructions in each test case. All the roads are closed initially, and each case is an independent problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each instruction ``<TT>Ask</TT> <SPAN CLASS="MATH"><I>r</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>r</I>2</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>c</I>2</SPAN> <tex2html_verbatim_mark>", display a line containing ``<TT>Y</TT>" or ``<TT>N</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
2
Open 1 1 1 2
Open 1 2 2 2
Ask 1 1 2 2
Ask 2 1 2 2
Exit
3
Open 1 1 1 2
Ask 1 1 1 2
Close 1 1 1 2
Ask 1 1 1 2
Exit
2
Open 1 1 1 2
Open 1 2 2 2
Open 2 1 2 2
Ask 1 1 2 1
Exit
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Y
N
Y
N
Y
</PRE><P>
______________________________________________________
4083||||||false||||||
<P>In this world of information explosion, many websites use database to store information. WebPages are automatically generated by programs. These programs are usually written in PHP, JSP, ASP, and CGI. Webpage template and layout are also included in the programs. Information data is optionally loaded from database and is filled in the webpage at the time that the webpage is visited. The completed webpage will be displayed in the browser.<P>Automatically generated WebPages have some major differences with manually created ones.<P><OL><LI>WebPages created by the same program will have the same template. </LI><LI>Apart from the data loaded from database, WebPages created by the same program will have the same content. </LI><LI>WebPages created by the same program will have the same framework of background data. </LI></OL><P>It is desirable that the background data could be extracted from WebPages and reused. This is the so called ``Information Extraction".<P>HTML is composed of tags. HTML tags are always enclosed in angle-brackets (<TT>&lt; &gt;</TT>) and are case-insensitive.<P>Tags typically occur in begin-end pairs. These pairs are in the form<P><P><BR><!-- MATH
 $<tag>  \ldots  </tag>$
 --><SPAN CLASS="MATH">&lt; <I>tag</I> &gt;...&lt; /<I>tag</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>where the <SPAN CLASS="MATH">&lt; <I>tag</I> &gt;</SPAN> <tex2html_verbatim_mark> indicates the beginning of a tag-pair, and the <SPAN CLASS="MATH">&lt; /<I>tag</I> &gt;</SPAN> <tex2html_verbatim_mark> indicates the end. (The three dots indicate an arbitrary amount of content between the tags.) The usual way to refer to each tag is ``tag" for the first and ``slash-tag" for the second, where tag is the actual name of the tag being discussed.<P>One pair of tags define a container. Any content within a container has the rules of that container applied to it. For example, the text within a ``boldface container" would be boldfaced. Similarly, paragraphs are defined using a ``paragraph container."<P>On another hand, thinking of tag-sets as containers will help you remember that tags should always be balanced. That is to say, you should keep containers nested within each other.<P>Since HTML is based on these structures, so it is often the case that the arrangement of text within a container is irrelevant. For example, within a paragraph container, all ofthe text can be in one long line, or in a series of separate lines, or with every word on its own line, or every word separated by nineteen spaces. These would all be displayed exactly the same. That is to say, whitespace doesn't matter. (Whitespace is all of the blank areas in a text file-empty lines, extra spaces, and so on.)<P>We need to first define some basic functionalities. Given a HTML webpage, such as:<P><P><BR><PRE>
&lt;HTML&gt;
&lt;BODY&gt;
Author:
&lt;B&gt;Tom&lt;/B&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
The C++ Programming Language
&lt;/LI&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
&lt;B&gt;Thinking in Java&lt;/B&gt;
&lt;/LI&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
Javascript
&lt;/LI&gt;
&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE><P><P><BR>We want to know the exact position of a specific data such as: ``Thinking in Java" . All the HTML tags enclose this data are:<P><P><BR><PRE>
&lt;HTML&gt;
&lt;BODY&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;B&gt;
</PRE><P><P><BR>You are chosen to be a member in the ``Information Extraction" team. Your task is to output the HTML tags that contains the inquired data (It is WRAPPER), in original order.<P><P><BR><B>Please note:</B><P><OL><LI>HTML tags are not case-sensitive. Each tag could be followed by other characters. We just ignore these following character. For example <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>A HREF=``http ://www.jlu.edu.cn"<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark> are just the same as <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>A<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>. </LI><LI>There could be redundant whitespaces (space, TAB, end of line) in HTML. </LI><LI>All the content except the tags are case-sensitive and not contained of `<SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>' or `<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>'. </LI><LI>All the whitespaces out of HTML tags are regarded as separators. In another word, any consecutive whitespaces are regarded as one space. </LI><LI>All given WebPages are syntactically correct. It means that each HTML tag is paired up (Actually there are some tags that are not paired up in actual HTML, but we just ignore that in this problem). </LI><LI>All the HTML tags we need to considered are <TT>&lt;HTML&gt;</TT>, <TT>&lt;BODY&gt;</TT>, <TT>&lt;HEAD&gt;</TT> , <TT>&lt;TITLE&gt;</TT>, <TT>&lt;UL&gt;</TT>, <TT>&lt;OL&gt;</TT>, <TT>&lt;LI&gt;</TT>, <TT>&lt;DIV&gt;</TT>, <TT>&lt;B&gt;</TT>, <TT>&lt;I&gt;</TT>, <TT>&lt;P&gt;</TT> and their corresponding <SPAN CLASS="MATH">&lt;</SPAN> <tex2html_verbatim_mark>/tag<SPAN CLASS="MATH">&gt;</SPAN> <tex2html_verbatim_mark>. We just consider other tags as whitespaces. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Every input case begins with a HTML webpage (<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4083img1.png ALT="$ \le$">5000</SPAN> <tex2html_verbatim_mark> words). The webpage begins with ``<TT>&#171;&lt;</TT>" in one line and ends with ``<TT>&#187;&gt;</TT>" in one line. The webpage is followed by an integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> in one line <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4083img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4083img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, indicating the number of the inquired data that need to be processed. Every line in the folloowing <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines is an inquired data. Each inquired data contains at least one word and at most 20 words. Two adjacent words are separated by spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the HTML tags in lower cases, each in a line. If the inquired data cannot be found in the input, output ``<TT>No Wrapper</TT>". If the inquired data appears several times in the input, just output the tags that contain the first one.<P>Output an empty line after each query.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
&lt;&lt;&lt;
&lt;HTML&gt;
&lt;BODY&gt;
Author:
&lt;B&gt;Tom&lt;/B&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
The C++ Programming Language
&lt;/LI&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
&lt;B&gt; Thinking in Java &lt;/B&gt;
&lt;/LI&gt;
&lt;LI&gt;
&lt;I&gt;Writings:&lt;/I&gt;
Javascript
&lt;/LI&gt;
&lt;/UL&gt;
Java
&lt;hello&gt;
script
&lt; / BODY&gt;
&lt; / HTML&gt;
&gt;&gt;&gt;
3
Javascript
java
Java script
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
&lt;html&gt;
&lt;body&gt;
&lt;ul&gt;
&lt;li&gt;

No Wrapper

&lt;html&gt;
&lt;body&gt;

______________________________________________________
4084||||||false||||||
<P>For years, a group of Regional Contest Directors (RCDs) of the ACM International Collegiate Programming Contest (ICPC) have been unsatisfied with the way contest submissions get ranked. The group sees it is academically wrong to emphasize the importance of program correctness, disregarding the ``<SPAN CLASS="textit">quality</SPAN>" of the program itself. After all, programming as a profession promotes design, style, maintainability, etc. and not just correctness. The group's suggestion is to have a panel of six judges. Each judge is assigned the task of grading the submissions based on a particular aspect: 1) Correctness; 2) Robustness; 3) Overall design; 4) Clarity; 5) Coding style; and finally 6) Maintainability. The final grade of a submission would be the average of the six grades it gets.<P>The old guards of the current ICPC judging style have always responded that it is not possible to impartially judge a program on anything but correctness. How can the ICPC be certain that judging is fair? In other words, how can the ICPC be sure that non of the judges is favoring certain teams and disadvantaging others? Any hint of accusation to the judging process and ICPC loses the prestigious status it worked on for years. (Alright! So they do have a point.) Still, this hasn't stopped other domains from judging candidates based on subjective metrics. Take for example Gymnastics, or The Nobel Prizes, or even the ACM's very own Doctoral Dissertation Award. These are all highly respected awards where the winner is selected by judges using subjective metrics. ICPC could use a new judging system based on what is used in gymnastics. Rather than having each judge grade a certain aspect of the program, each of the six judges would assign an overall grade (out of ten) based on all of the six metrics mentioned above. To enforce impartiality, the final grade of a submission would be calculated as the average of all the grades after deleting two grades: The highest and the lowest. Any judge that favors a certain team (and assigns them an undeserved high grade,) risks the possibility of that grade being dismissed. Similarly, any judge that attempts to disadvantage a team by assigning them a low grade faces a similar risk.<P>Write a program to print the final grade of a submission.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is described on a single input line listing the grades of the judges. The end of the test cases is identified with a dummy test case with all the grades being zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the grade on a separate line (without unnecessary decimal points and/or zeros.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 8 8 4 4 4
8 8 6 4 4 3
0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
5.5
</PRE><P>
______________________________________________________
4085||||||false||||||
<P>According to Wikipedia, <SPAN CLASS="textit">Cryptography</SPAN> is ``the practice and study of hiding information" and this is exactly what Alex is looking for. Ever since he was a kid, Alex was paranoid over someone laying their hands on his phone book. He decided that he must write the numbers in some secret way that only he can decipher. At first he tried quite complex algorithms, but that slowed him down when he needed to dial a number fast. He finally came up with the following algorithm: Rather than writing down the number itself, Alex would shift the number one place to the left (as if multiplying it by 10,) then adding the shifted number to the original. For example, if the phone number was 123, Alex would add 1230 to it, resulting in 1353. To make what he writes looks as a regular phone number, Alex truncates the result (from the left,) so that it has as many digits as the original phone number. In this example, Alex writes 353 instead of 123 in his phone book.<P>Alex needs a program to print the original phone number given what is written in his phone book. Alex, who by the way is a good friend of Johnny, isn't that good in arithmetic. It is quite possible that the numbers are messed up. The program should print ``<TT>IMPOSSIBLE</TT>" (without the quotes) if the original number cannot be computed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each case is specified on a separate line and is made of a single positive number having less than 1,000,000 digits.<P>The last line of the input file is made of a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1) and <code></code>is a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
353 
9988 
123456 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 123 
2. IMPOSSIBLE 
3. 738496 OUTPUT
</PRE><P>
______________________________________________________
4086||||||false||||||
<P>Any square grid can be viewed as one or more <SPAN CLASS="textit">rings</SPAN>, one inside the other. For example, as shown in figure (a), a <SPAN CLASS="MATH">5 <TT>*</TT> 5</SPAN> <tex2html_verbatim_mark> grid is made of three rings, numbered 1, 2 and 3 (from outside to inside.) A square grid of size <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is said to be sorted, if it includes the values from 1 to <SPAN CLASS="MATH"><I>N</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> in a row-major order, as shown in figure (b) for <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark>. We would like to determine if a given square grid can be sorted by <SPAN CLASS="textit">only rotating its rings</SPAN>. For example, the grid in figure (c) can be sorted by rotating the first ring two places counter-clockwise, and rotating the second ring one place in the clockwise direction.<P><P><BR><IMG WIDTH="199" HEIGHT="284" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4086a.png ALT="$\textstyle \parbox{.35\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p4086a.eps}
\end{center}}$"><IMG WIDTH="171" HEIGHT="255" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4086a.png ALT="$\textstyle \parbox{.3\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p4086b.eps}
\end{center}}$"><IMG WIDTH="171" HEIGHT="266" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4086a.png ALT="$\textstyle \parbox{.3\textwidth}{
\begin{center}
\mbox{}
\epsfbox{p4086c.eps}
\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first input line of a test case is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> which is the size of the grid. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> input lines will follow, each line made of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integer values specifying the values in the grid in a row-major order. Note than <!-- MATH
 $0 < N \le 1,000$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4086a.png ALT="$ \le$">1, 000</SPAN> <tex2html_verbatim_mark> and grid values are natural numbers less than or equal to 1,000,000.<P>The end of the test cases is identified with a dummy test case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a single space, and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is ``<TT>YES</TT>" or ``<TT>NO</TT>" (without the double quotes.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
9 5 1 2 
13 7 11 3 
14 6 10 4 
15 16 12 8 
3 
1 2 3 
5 6 7 
8 9 4 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. YES 
2. NO
</PRE><P>
______________________________________________________
4087||||||false||||||
<P><DL><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>So why don't you just recompile the program on the new hardware?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>We cannot. We lost the source code.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>How typical! What does the program do? Do you have any documentation?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>The manual page does mention something about the documentation in the source code.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>A manual page is good. What does it say?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Just one line: ``<SPAN CLASS="textit">See the source code for more information.</SPAN>"</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Argh! What do you know about the program?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Well, it seems to be taking simple text, similar to that found in an English dictionary, and printing it after some modification.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What kind of modification?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>It removes any character that is not a lowercase letter. But not white spaces. White spaces are preserved as seen in the input.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Do you have a sample input/output?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Plenty. Here's one. (see next page.)</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>This is rather small! Did you try it on anything bigger?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>It works on any text as long as the lines are less then eighty characters wide. It doesn't seem to mind working on lengthy documents. But it does terminate once it sees the sequence ``<TT>EOF</TT>" (without the double quotes.)</DD><DT><STRONG><SPAN CLASS="textit">One of them:</SPAN></STRONG></DT><DD>Don't forget to tell them about the ``<TT>dd</TT>" thingy.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>: What ``<TT>dd</TT>" thingy?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Whenever it sees a pair of small letter ``d", one right after the other, it replaces them with ``p".</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Why?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Who knows? It just does that!</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What about ``<TT>ddd</TT>" and ``<TT>dddd</TT>"? How does it behave then?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Where in English will you find a ``<TT>dddd</TT>" or even a ``<TT>ddd</TT>"? Haven't you been listening?</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Oops. We'll pay more attention. Anything else?</DD><DT><STRONG><SPAN CLASS="textit">Another one of them:</SPAN></STRONG></DT><DD>There is also the ``<TT>vv</TT>" thingy.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What about ``<TT>vv</TT>"?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Every ``<TT>vv</TT>" is replaced with a ``<TT>m</TT>".</DD><DT><STRONG><SPAN CLASS="textit">Yet another one of them:</SPAN></STRONG></DT><DD>No, wait! That was a printer problem. it had nothing to do with the program. Remember?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Oh, that's right. thingy. Forget about the ``<TT>vv</TT>"</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What about the ``<TT>dd</TT>" thingy? Was that just a printer problem too?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>No. That was the program.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What else?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>One last thing. It seems to be replacing every ``<TT>ei</TT>" with ``<TT>ie</TT>".</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Every one of them?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>Except if it comes right after ``<TT>c</TT>" then it remains as is.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Makes sense. That's all, right?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>No, we just remembered one more thing: It replaces the sequence ``<TT>pink</TT>" with ``<TT>floyd</TT>" anywhere in the text.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>What?! Who wrote this program? Why do you need it in the first place?</DD><DT><STRONG><SPAN CLASS="textit">Them:</SPAN></STRONG></DT><DD>We think it will increase our chances of going to Banff in April 2008 if we get it right.</DD><DT><STRONG><SPAN CLASS="textit">Us:</SPAN></STRONG></DT><DD>Yeah! Right.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
unpinked is an 8 letter word. Honest! 
vv is ok, d123d is ok, 123dd is not 
i received mail from        liechtenstein
 ..  ...adding means to imitat.#$!%%$e 
EOF
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
unfloyded is an  letter word onest 
vv is ok dd is ok p is not 
i received mail from       liechtenstien 
   aping means to imitate
</PRE><P>
______________________________________________________
4088||||||false||||||
<P>In a letter dated December 25, 1640; the great mathematician Pierre de Fermat wrote to Marin Mersenne that he just proved that an odd prime <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is expressible as <SPAN CLASS="MATH"><I>p</I> = <I>a</I><SUP>2</SUP> + <I>b</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> if and only if <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> is expressible as <SPAN CLASS="MATH"><I>p</I> = 4<I>c</I> + 1</SPAN> <tex2html_verbatim_mark>. As usual, Fermat didn't include the proof, and as far as we know, never wrote it down. It wasn't until 100 years later that no one other than Euler proved this theorem. To illustrate, each of the following primes can be expressed as the sum of two squares:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">5 = 2<SUP>2</SUP> +1<SUP>2</SUP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;13 = 3<SUP>2</SUP> +2<SUP>2</SUP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17 = 4<SUP>2</SUP> +1<SUP>2</SUP>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;41 = 5<SUP>2</SUP> +4<SUP>2</SUP></DIV><P><tex2html_verbatim_mark></P><P>Whereas the primes 11, 19, 23, and 31 cannot be expressed as a sum of two squares. Write a program to count the number of primes that can be expressed as sum of squares within a given interval.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a separate input line that specifies two integers <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> where <!-- MATH
 $L \le U < 1,000,000$
 --><SPAN CLASS="MATH"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4088img1.png ALT="$ \le$"><I>U</I> &lt; 1, 000, 000</SPAN> <tex2html_verbatim_mark><P>The last line of the input file includes a dummy test case with both <SPAN CLASS="MATH"><I>L</I> = <I>U</I> = - 1</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result using the following format:<P><P><BR><SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>U</I></SPAN> <tex2html_verbatim_mark> are as specified in the input. <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is the total number of primes within the interval <SPAN CLASS="MATH">[<I>L</I>, <I>U</I>]</SPAN> <tex2html_verbatim_mark> (inclusive,) and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is the total number of primes (also within <SPAN CLASS="MATH">[<I>L</I>, <I>U</I>]</SPAN> <tex2html_verbatim_mark>) that can be expressed as a sum of squares.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 20 
11 19 
100 1000 
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 20 4 2 
11 19 4 2 
100 1000 143 69
</PRE><P>
______________________________________________________
4089||||||false||||||
<P><P><BR>Unlike a straight line, a <SPAN CLASS="textit">straight segment</SPAN> between two points <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> (normally written as <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="$ \overline{{P_{1}P_{2}}}$"></SPAN> <tex2html_verbatim_mark>) is a line that links the two points <SPAN CLASS="textit">but doesn't extend beyond them</SPAN>. A third point <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> is said to be incident to <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="$ \overline{{P_{1}P_{2}}}$"></SPAN> <tex2html_verbatim_mark> iff <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> lies on the straight line and between the points <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="$ \overline{{P_{1}P_{2}}}$"></SPAN> <tex2html_verbatim_mark> is said to include <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. By definition, <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are included in <SPAN CLASS="MATH"><IMG WIDTH="42" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="$ \overline{{P_{1}P_{2}}}$"></SPAN> <tex2html_verbatim_mark>. Write a program to find the segment that includes the most number of given points.<P><DIV ALIGN="CENTER"><IMG WIDTH="341" HEIGHT="341" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="\epsfbox{p4089.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case includes a set of two or more unique points, where the Cartesian coordinates of each point is specified on a separate line using two integers <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> where <!-- MATH
 $0 \le |X| , |Y | < 1, 000, 000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4089img1.png ALT="$ \le$">| <I>X</I>|,| <I>Y</I>| &lt; 1, 000, 000</SPAN> <tex2html_verbatim_mark>. No test case has more than 1000 points. An input line made of two or more `<TT>-</TT>' (minus signs) signals the end of a test case. An extra input line of two or more `<TT>-</TT>' (minus signs) follow the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the result on a single line using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a single space, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of points on the segment.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 
1 5 
5 9 
9 5 
5 5 
3 2 
5 3 
---
1 5 
5 1 
1 1 
5 5 
--
------
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 4 
2. 2
</PRE><P>
______________________________________________________
4090||||||false||||||
<P><P><BR>A favorite pastime for big families in Acmestan is going to the movies. It is quite common to see a number of these multi-generation families going together to watch a movie. Movie theaters in Acmestan have two types of tickets: A <SPAN CLASS="textit">single ticket</SPAN> is for exactly one person while a <SPAN CLASS="textit">family ticket</SPAN> allows a parent and their children to enter the theater. Needless to say, a family ticket is always priced higher than a single ticket, sometimes as high as five times the price of a single ticket.<P><DIV ALIGN="CENTER"><IMG WIDTH="367" HEIGHT="224" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4090.png ALT="\epsfbox{p4090.eps}"> <tex2html_verbatim_mark></DIV><P>It is quite challenging for families to decide which ticket arrangement is most economical to buy. For example, the family depicted in the figure on the right has four ticket arrangements to choose from: Seven single tickets; Two family tickets; One family ticket (for <TT>adam</TT>, <TT>bob</TT>, <TT>cindy</TT>) plus four single tickets for the rest; Or, one family ticket (for <TT>bob</TT> and his four children) plus single tickets for the remaining two.<P>Write a program to determine which ticket arrangement has the least price. If there are more than one such arrangement, print the arrangement that has the least number of tickets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. The first line of each test case includes two positive integers (<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark>) where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is the price of a single ticket and <SPAN CLASS="MATH"><I>F</I></SPAN> <tex2html_verbatim_mark> is the price of a family ticket. The remaining lines of the test case are either the name of a person going by him/herself, or of the form:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>N</I><SUB>1</SUB>&nbsp;<I>N</I><SUB>2</SUB>&nbsp;<I>N</I><SUB>3</SUB>...<I>N</I><SUB>k</SUB></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>N</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is the name of a parent, with <SPAN CLASS="MATH"><I>N</I><SUB>2</SUB>...<I>N</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> being his/her children. Names are all lower-case letters, and no longer than 1000 characters. No parent will be taking more than 1000 of their children to the movies :-). Names are unique, the name of a particular person will appear at most twice: Once as a parent, and once as a child. There will be at least one person and at most 100,000 people in any test case.<P>The end of a test case is identified by the beginning of the following test case (a line made of two integers.) The end of the last test case is identified by two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the result using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>NS</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>NF</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a single space, <SPAN CLASS="MATH"><I>NS</I></SPAN> <tex2html_verbatim_mark> is the number of single tickets, <SPAN CLASS="MATH"><I>NF</I></SPAN> <tex2html_verbatim_mark> is the number of family tickets, and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is the total cost of tickets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 
adam bob cindy 
bob dima edie fairuz gary 
1 2 
john 
paul 
george 
ringo 
1 3 
a b c 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 2 1 5 
2. 4 0 4 
3. 0 1 3
</PRE><P>
______________________________________________________
4091||||||false||||||

<P>
Forget Facebook, forget Second Life, <SPAN  CLASS="textit">The Writers' Club</SPAN> is the next big thing on the Internet. The Writers' Club is where both writers and lovers of short stories get to meet, publish, read, and discuss the writers' promising contributions. As any other Internet virtual community, the website gives readers the facility to create a list of their favorite writers. The website maintainers have noticed that readers tend to favor writers already favored by the readers' favorite writers. For example, if John likes the stories written by Alice, then many of the readers who likes John's stories also like Alice's. Needless to say, John's readers tend to also admire Alice's favorite writers too. 

<P>
The website would like to start a recommendation service based on this observation. Continuing with the above example, the website would like to recommend Alice (and her favorite writers, and their favorite writers, and so on) to all of John's readers. Of course, the recommendation service has to be smart enough not to recommend a writer already favored by the reader receiving the recommendation. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Your program will be tested on one or more test cases. The first line of a test case specifies two positive integers: <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> is the total number of users (not exceeding 100, 000) and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the number of writers (not exceeding 100.) <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> line follows, one for each writer. Each line is made of one or more names, the first being the name of a writer, and the remaining being the names of admirers of that writer. For example: 

<P>
<P><!-- MATH
 \begin{displaymath}
writer \ reader_{1} \ reader_{2} \ldots reader_{d}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>writer</I>&nbsp;<I>reader</I><SUB>1</SUB>&nbsp;<I>reader</I><SUB>2</SUB>...<I>reader</I><SUB>d</SUB>
</DIV><P>
<tex2html_verbatim_mark></P> 

<P>
Where <SPAN CLASS="MATH"><I>writer</I></SPAN>
<tex2html_verbatim_mark> is the writer's name, <!-- MATH
 $reader_{1} \ldots reader_{d}$
 -->
<SPAN CLASS="MATH"><I>reader</I><SUB>1</SUB>...<I>reader</I><SUB>d</SUB></SPAN>
<tex2html_verbatim_mark> are the names of the writer's admirers. A name is a sequence of one or more lower-case letters, no longer than 16 characters. Names are unique throughout the test case. Names are separated by one or more spaces. 

<P>
The last line of the input file is made of two zero's. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, the first line of the output should be: 

<P>

<P>
<BR>

<code>--- CASE </code><SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is the test case number (starting at 1,) and `<TT>-</TT>' is the minus sign. 

<P>
Following that, there should be zero or more lines, one line for each writer being recommended. The format is: 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>writer</I></SPAN>
<tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>reader</I>1</SPAN>
<tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>reader</I>2</SPAN>
<tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>writer</I></SPAN>
<tex2html_verbatim_mark> is the name of the writer to be recommended for <SPAN CLASS="MATH"><I>reader</I>1</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>reader</I>2</SPAN>
<tex2html_verbatim_mark>, and so on. The output lines should be sorted alphabetically according to writers, and for each writer, readers should also be sorted alphabetically. No writer should be recommended for himself. All names in the output are separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
7 3 
john paul ringo 
alice paul john 
bob  alice sunny cher 
5 3 
tantawi  taha najeeb 
aqqad najeeb ehsan 
taha aqqad   najeeb 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
--- CASE 1 
alice ringo 
bob john paul ringo 
--- CASE 2 
taha ehsan 
tantawi aqqad ehsan
</PRE>

<P>

______________________________________________________
4092||||||false||||||
<P>Here's a simple puzzle: Move one stick in the figure below to make the equation correct.<P><DIV ALIGN="CENTER"><IMG WIDTH="434" HEIGHT="110" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="\epsfbox{p4092a.eps}"> <tex2html_verbatim_mark></DIV><P>Easy, right? Here's the solution:<P><DIV ALIGN="CENTER"><IMG WIDTH="435" HEIGHT="111" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="\epsfbox{p4092b.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program to solve similar puzzles knowing that:<P><OL><LI>Each puzzle is made of a left operand, an operator, a right operand, an equal sign, and a result. The two operands and the result are numbers, made of one or more digits, and is less than <SPAN CLASS="MATH">2<SUP>31</SUP></SPAN> <tex2html_verbatim_mark>. </LI><LI>The operator and the equal sign cannot be changed. You're only allowed to move sticks making up the digits. </LI><LI>You can neither remove digits completely nor introduce new ones. (i.e. You can only <SPAN CLASS="textit">alter the digits</SPAN>.) </LI><LI>Leading zeros are allowed in both the input and output. Leading zeros in the output must be printed. </LI><LI>Each puzzle specifies the number of required moves. Your solution must move as many sticks as specified. A stick is moved at most once; It cannot be moved again. If a stick is moved, its original place must remain vacant. (i.e. you cannot move another stick to that place.) </LI><LI>When solving a puzzle involving division, the division must be an <SPAN CLASS="textit">exact integer division</SPAN>, i.e. no remainder. </LI><LI>Digits are ``written" as follows: </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="937" HEIGHT="132" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="\epsfbox{p4092c.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a single line using the following format:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>A</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="$\displaystyle \odot$"> <I>B</I> = <I>R</I>(<I>n</I>)</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> are sequences of one or more digits, but no more than nine digits. <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="$ \odot$"></SPAN> <tex2html_verbatim_mark> is one of the four operators: `<TT>+ - * /</TT>'. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a natural number representing the number of sticks to move. One or more spaces separate <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4092a.png ALT="$ \odot$"></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, =, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, and (<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>).<P>The end of the test cases is indicated by a separate line having the word ``<TT>EOF</TT>" (without the quotes.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each puzzle, your program must print one line of the form:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the puzzle number (starting at 1,) <code></code>is a single space, and <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> is the equation after solving the puzzle. <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark> includes no spaces.<P>In the case of multiple solutions, print just one. If the puzzle can't be solved, print ``<TT>UNSOLVABLE</TT>" (without the quotes) as the <SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 + 1 = 12 (1) 
81 * 8 = 1 (3) 
5 - 1 = 4 (1) 
EOF
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 5+7=12 
2. 01*3=3 
3. UNSOLVABLE
</PRE><P>
______________________________________________________
4093||||||false||||||

<P>
Johnny is on probation! He has failed so many math courses and the Department has forced him to register in a remedial math course. He must pass the course or he'd be expelled from the University. In an attempt to impress his professor, Johnny is typing all his assignments on the computer. The latest assignment is rather simple, Johnny was given a set of problems to solve. Each problem had a list of one or more numbers that Johnny was supposed to add. Johnny has worked all night on the assignment, neatly typing his solution to each problem using a word processor as seen here: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TT>4+12+3=19</TT>

</DIV> 

<P>

<P>
<BR>
As usual, Johnny woke up late, he hardly had the time to print the assignment and rush to class. Only in the classroom did he discover that, 
due to a printer driver problem, non of the plus signs were printed. The above line was printed as: 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TT>4123=19</TT>

</DIV> 

<P>

<P>
<BR>
Write a program to figure out where the pluses are supposed to be. All what Johnny remembers is that all the numbers were positive; None of the numbers, other than possibly the sum, had more than 5 digits; And none of the numbers had a zero as the left-most digit. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Your program will be tested on one or more expressions. Each expression is specified on a single line. No line will be longer than 256 characters. The last line, which is not part of the test cases, will be <TT>0=0</TT>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each expression in the input, your program must print a line of the form: 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
Where <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> is the expression number (starting at 1,) <code> </code> is a single space, and <SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark> is the expression with the necessary plus signs in place. There are no spaces in <SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark>. If there are more than one possible solution, print a solution that requires the least number of plus signs. Knowing how bad Johnny is in arithmetic, it is possible that there is no solution, in which case your program should print ``<TT>IMPOSSIBLE</TT>" as the <SPAN CLASS="MATH"><I>result</I></SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4123=19 
15442147612367219875=472 
111=8 
0=0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1. 4+12+3=19 
2. 15+44+21+47+61+23+67+21+98+75=472 
3. IMPOSSIBLE

______________________________________________________
4094||||||false||||||
<P>The <SPAN CLASS="textit">Brasileiro League</SPAN> is the most important event in Brazil. There are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> football teams participating in the competitions, each team plays twice (home and away) against each other team. Each team receives three points for a win and one point for a draw. No point is awarded for a loss.<P>When the games are finished, teams are ranked by numbers from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> according to the total points. The rank of each team <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> having <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> points is one plus the number of teams having more than <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> points. It is possible that more than one team have the same ranks.<P>In addition to the Champion (the first ranked team or teams), the <SPAN CLASS="textit">WonderTeam</SPAN> is also awarded, if there exists one. The team that has absolutely the highest number of wins (absolutely means no other teams has the same number of wins), absolutely the highest number of goals scored, and absolutely the lowest number of goals conceded, is called the WonderTeam. (WonderTeam should have all these properties.)<P>Your task is to find out the worst possible rank for the WonderTeam.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. Each test case consists of only one line containing <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4094img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4094img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, the number of teams in league. The input terminates with a line containing `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing the worst possible rank for the WonderTeam.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
1
</PRE><P>
______________________________________________________
4095||||||false||||||
<P>This year, ACM scientific committee members use emails to discuss about the problems and edit the selected ones. They know that email is not a secure way of communication, especially on such an important topic. So they transfer password-protected compressed file among themselves. In order to send the passwords, they use SMS. To increase the security level, the encrypted passwords are sent by SMS. To do this, a <SPAN CLASS="textit">multi-tap</SPAN> SMS typing method is used.<P><SPAN CLASS="textit">Multi-tap</SPAN> is currently the most common text input method for mobile phones. With this approach, the user presses each key one or more times to obtain the wanted characters. For example, the key 2 is pressed once to get character A, twice for B, and three times for C.<P><DIV ALIGN="CENTER"><IMG WIDTH="468" HEIGHT="519" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/p4095.png ALT="\epsfbox{p4095.eps}"> <tex2html_verbatim_mark></DIV><P>The encryption algorithm that is used is quite simple: to encrypt the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th character of the password, the key used to obtain that character is tapped <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> more times. For if the 4-th character of password is U, the key 8 is tapped 6 times, getting the character V. Note that to make the problem simple, we have assumed that the keypad does not generate digits.<P>The scientific committee needs a program to decrypt the received passwords. They are too busy to write this program and have asked you to help! Write a program to get a correct encrypted text and print the original password.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case contains a non-empty string of length at most 100, consisting of small or capital English letters. The last line of the input contains a single `<TT>#</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the decrypted password in a separate line. Note that passwords are case-sensitive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
BACE 
GgaudQNS 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ABCD 
IhateSMS
</PRE><P>
______________________________________________________
4096||||||false||||||
<P>One of the Premier League (Persian Gulf Cup) teams had very bad results this year. The board is under pressure to fire the coach, but the coach is considered hero by some fans and it is not easy to fire him. The board decides to give him a last chance; they talked to media that they can only support the coach if the team gets at least 11 points in the next 5 matches. The coach wants to know the probability of passing their condition and ask you to help him. You can assume that the probability of having a win/draw/loss in a future match can be determined from the results of the matches the team currently has played. For example, if the team has already played 10 matches and has won three of them, the probability of having a win in any of the next five matches is 30%. The same rule applies to draws or losses.<P>You also know the team results (a win earns 3 points and a draw earns 1). There are 18 teams in the league and each team play against each of the other teams twice.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. The first line of each test case contains two numbers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of matches and <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is the points that are required in the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> games. This is followed by three numbers <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> (the number of wins, draws and losses in the previous games). The last line of the input contains two zero numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should print the percentage probability of getting at least <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> points in the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> matches with exactly one digit after decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 11 
3 5 4 
2 3 
5 0 5 
3 5 
5 5 4 
1 1 
1 1 1 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4.3 
75.0 
42.8 
66.7
</PRE><P>
______________________________________________________
4097||||||false||||||

<P>
After getting her Ph.D in Cooking with her research paper on ``How to Prepare a Pizza", and another Ph.D in Medicine for finding cures for H.I.V and Alzheimers, Dae Jang Guem (Called Yungom in Persian) decided to solve yet another open problem in Information Theory that even Shanon (the father of Information Theory) failed to solve. She is going to construct a language of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> words with <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> given characters <!-- MATH
 $c_{1}, c_{2}, \ldots, c_{d}$
 -->
<SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>,..., <I>c</I><SUB>d</SUB></SPAN>
<tex2html_verbatim_mark>. This language should be prefix free which means that there is no pair of words like <SPAN CLASS="MATH">(<I>s</I>, <I>t</I>)</SPAN>
<tex2html_verbatim_mark> in which the word <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> is a prefix of <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>. Each character <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> has a usage cost of <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. The cost of a word <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> with the length <SPAN CLASS="MATH"><I>l</I></SPAN>
<tex2html_verbatim_mark> is the sum of the costs of its <SPAN CLASS="MATH"><I>l</I></SPAN>
<tex2html_verbatim_mark> characters. For example, if <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB> = <I>a</I></SPAN>
<tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB> = <I>b</I></SPAN>
<tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB> = 1</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I><SUB>2</SUB> = 10</SPAN>
<tex2html_verbatim_mark>, the cost of word ``<SPAN CLASS="MATH"><I>aba</I></SPAN>
<tex2html_verbatim_mark>`` is 1+10+1=12. Similarly, the cost of a language with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> words is equal to the sum of the costs of its <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> words. For example, the cost of language ``<SPAN CLASS="MATH"><I>ab</I></SPAN>
<tex2html_verbatim_mark>"; ``<SPAN CLASS="MATH"><I>bbb</I></SPAN>
<tex2html_verbatim_mark>"; ``<SPAN CLASS="MATH"><I>baaa</I></SPAN>
<tex2html_verbatim_mark>" is!
  11+30+13=54. Like her previous jobs, Yungom is going to do this task perfectly which means that she wants to find the minimum cost, prefix free language with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> words.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 200)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4097img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4097img1.png
 ALT="$ \le$">200)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le d \le 200)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4097img1.png
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4097img1.png
 ALT="$ \le$">200)</SPAN>
<tex2html_verbatim_mark>. The next line contains nonnegative integers <!-- MATH
 $w_{1},w_{2}, \ldots, w_{d}$
 -->
<SPAN CLASS="MATH"><I>w</I><SUB>1</SUB>, <I>w</I><SUB>2</SUB>,..., <I>w</I><SUB>d</SUB></SPAN>
<tex2html_verbatim_mark>. The input is terminated by a line containing two zero numbers.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, you should print the minimum cost of a prefix free language with <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> words and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample  Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 4 
1 10 100 1000 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample  Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
23
</PRE> 

<P>

______________________________________________________
4098||||||false||||||
<P>A new island has been discovered. A team of architects has worked hard and proposed a road plan to connect important parts of this new island. Due to lack of fund, we are to modify the design to come up with an affordable one.<P>In the proposed plan, each road has a unique id between 1 and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> (the number of roads) and a cost that is unbelievably equal to <SPAN CLASS="MATH">2<SUP>id</SUP></SPAN> <tex2html_verbatim_mark>. So, the costs are distinct powers of two. We want to eliminate some of the roads from the plan to get the minimum overall cost while all places are still connected. But, we should not eliminate as many roads as we want. The constraint is that in the new road plan the distance between any two places cannot become more than twice as their distance in the original plan. The distance between two places is the minimum number of roads connecting them. The original road plan is given to you in form of a graph and you are asked to find the most economic road elimination according to the constraint.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. Each test case is started with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4098img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/40/4098img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, the number of vertices (places) and edges (roads) respectively. The specification of the roads comes on the next <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> lines. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line contains two numbers <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>u</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> which means that the road with id <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is between places <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>u</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The input is terminated by a line containing two zero numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the number of eliminated roads followed by the increasing list of their ids on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5
1 2
3 1
4 1
4 2
3 4
3 3
1 2
2 3
3 1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 4 5 
1 3
</PRE><P>
______________________________________________________
4099||||||false||||||

<P>
In this problem, by the word ``dictionary" we mean a list of alphabetically ordered words and their associated explanations in the same language. A dictionary must contain the definition for any word that appears in the explanation of another word. So you see, if a dictionary defines <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> words, it has exactly <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> distinct words in it. Also, we know that in a dictionary no word appears in the definition of itself. 

<P>
A sub-dictionary is a collection of dictionary's words and their definitions such that it can be published as an independent dictionary, obviously satisfying the mentioned condition. As a project of Computational Linguistics course, we are assigned to create a Lexical Knowledge Base which is the knowledge expressed by words. For this task we should create our knowledge foundation based on a dictionary. 

<P>
It's really hard for the computer to study words automatically. So, we decided to manually teach it some common words. We start from an appropriate sub-dictionary. By understanding its words, a computer could extend its knowledge to the whole dictionary word by word. For instance, a word ``xyz" could be added to the computer's understanding if computer knows the meaning of every words used in xyz's definition. You are asked to write a program that can find the smallest extendable sub-dictionary for a specific dictionary.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple test cases. The first line of each test case is <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4099img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/40/4099img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, the number of dictionary's words. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contains a word and its definition (that has at most 30 words). Words are separated by blanks and are made up of small English letters less than 25 characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, on the first line print the number of sub-dictionary's words and on the second line write the alphabetically sorted list of words (separated by blanks).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample  Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
aue oizer piqoi oizer 
doy oizer hweqlo hweqlo 
hweqlo piqoi aue 
oizer piqoi 
piqoi aue aue 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample  Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
aue oizer piqoi
</PRE>

<P>

______________________________________________________
4100||||||false||||||
<P>SSC is a super computer designed in Sharif University having 2 ``master" and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ``slave" processors. It can run softwares in parallel: One of the master processors loads the software on the slave processors such that the memory and CPU usage among them are balanced, while the other master is used for monitoring the system.<P>Because of the dependencies between different parts of the software, many messages should be exchanged between processors. A very fast network is needed to minimize the message passing overhead. To optimize the network, a <SPAN CLASS="textit">clique</SPAN> structure will be constructed in which there is a direct communication cable between each pair of processors.<P>There are two different cables: blue cables which can transmit up to 100 Megabits per second and red cables which can transmit up to 1 Gigabits per second. Each pair of slave processors will be connected by one blue cable. Due to the higher communication volume on master processors, the two masters are connected by one red cable and also each master is connected to each slave by another red cable.<P>SSC is thus made of <SPAN CLASS="MATH"><I>n</I> + 2</SPAN> <tex2html_verbatim_mark> motherboards, each containing exactly one processor, the needed memory, and also <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> similar network sockets installed as a horizontal array. The motherboards are put in a vertical rack box, each in one horizontal shelf. So, each motherboard is uniquely identified by its height in the rack.<P>The cooling system has forced us to put the two master motherboards in the lowest and highest shelves of the rack. We assume that the master in the bottom has height 0, and the heights of the other motherboards are integers higher than 0. You, as a computer engineer, are asked to do the final assembly of SSC. You are given the empty rack box, the ready motherboards, and your job is to determine whether you can put the boards in the rack that satisfy the constraints and cable lengths.<P>There are exactly <SPAN CLASS="MATH">2<I>n</I> + 1</SPAN> <tex2html_verbatim_mark> red cables available with the given sizes. However the blue cables are available in <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> different sizes, and we have unlimited number of cables in each size. You are so careful to keep the cabling between processors tidy and tight, so you want to install the motherboards in the heights such that the size of cable used between each pair of motherboards is exactly equal to the difference between the heights of two boards.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. The first line of each test case contains two numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4100img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4100img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4100img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4100img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The second line contains <SPAN CLASS="MATH">2<I>n</I> + 1</SPAN> <tex2html_verbatim_mark> integers, which are the sizes of Gigabit Ethernet cables. The third line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers which are the sizes of Megabit Ethernet cable groups. The last line of the input contains two zero numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set you should write <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> integers as the heights of the motherboards in SSC rack box. The first number represents the height of the top master processor, and the remaining <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers are the positions of the slaves in an increasing order. In the case of having multiple solutions write the one with the minimum alphabetical order. If there is no solution write ``<TT>Impossible</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
3 7 7 10 10 14 17 
3 4 7 
3 3 
3 7 7 10 10 14 17 
3 4 8 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
17 3 7 10 
Impossible
</PRE><P>
______________________________________________________
4101||||||false||||||
<P>Circle is an ancient and universal symbol of unity, wholeness, infinity, the goddess, and female power. It is referenced frequently in religion and art. In this problem, we act as a modern artist and would like to draw our painting with points and circles, and clearly colors should be used. First, we put some colored points on the canvas. The goal is to draw a circle for each color <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, such that every colored point inside or on the boundary of that circle has color <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. Also, each such circle should have at least two points on its boundary. Note that for some colors, it might be impossible to draw such a circle. In this problem, given a set of colored points, your task is to compute the largest number of colors for which there exists a circle conforming to the above conditions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. For each test case, in the first line there is a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4101img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4101img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, which is the number of colored points. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of the form <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB>&nbsp;<I>X</I><SUB>i</SUB>&nbsp;<I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the color of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th point and <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB>&nbsp;<I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> specify its coordinates. Each color string is made up of at most 20 small English letters. Coordinates are integers between -1,000,000 and 1,000,000. The last line of each test case contains a single `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line which contains the largest number of colors for which there exists a circle conforming to the above conditions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
red 1 1 
blue 1 2 
blue 3 2 
yellow 3 3 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
4102||||||false||||||
<P>Olandicans have invented a strange computer; it has only 12-bit registers to store numbers. And the only command that this computer accepts is SWAP. The Swap function is called with 3 parameters <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>. A call of swap<SPAN CLASS="MATH">(<I>i</I>, <I>j</I>, <I>d</I> )</SPAN> <tex2html_verbatim_mark> swaps the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th bit of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th register with its neighboring bit in direction <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> (0: up, 1: right, 2: down, 3: left). For example, swap (2, 3, 1) swaps the 3-rd and the 4-th bits of the 2-nd register and Swap(6, 4, 2) swaps the 4-th bits of the 6-th and the 7-th registers. Olandicans know the initial values of the registers and they want to change them to some other numbers. They asked you to help them find the minimum number of swap calls.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of each test case is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4102img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4102img1.png ALT="$ \le$">16)</SPAN> <tex2html_verbatim_mark>, the number of registers. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers, where the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th number is the initial value of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th register. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers, where the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th number is the desired value of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th register. The input is terminated by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, you should write a single line containing the minimum number of swaps needed for that test case. If it is not possible, write ``<TT>Impossible</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 3 
6 2 
3 
1 1 1 
2 3 4 
4 
5 2 6 0 
3 2 2 4 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
Impossible 
2
</PRE><P>
______________________________________________________
4103||||||false||||||
<P>Your goal is to write a solver for Nurikabe, a binary determination puzzle. The puzzle is played on a grid, typically rectangular (with no standard size) containing empty and numbered cells. You must decide for each cell if it is white (land) or black (water), so that it satisfies the following constraints. An Island is a maximal connected region of white cells.<P><UL><LI>The water areas must form one connected region. (All the black cells must be connected.) </LI><LI>Each numbered cell must be part of an island. </LI><LI>The number of cells in an island is equal to the number it contains. </LI><LI>Every region (island) of white cells (land) must contain exactly one number. </LI><LI>Two islands may not be connected. </LI><LI><SPAN CLASS="MATH">2&#215;2</SPAN> <tex2html_verbatim_mark> blocks of black squares are not allowed. </LI></UL><P>Note that diagonal adjacency doesn't count as connectedness. You can assume there is always a unique solution for each puzzle.<P><P><BR><IMG WIDTH="283" HEIGHT="347" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4103a.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in
\epsfbox{p4103a.eps}
\end{center}}$"><IMG WIDTH="281" HEIGHT="351" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4103a.png ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\mbox{}
\epsfxsize=2.5in
\epsfbox{p4103b.eps}
\end{center}}$"><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. The first line of each test case contains two numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4103a.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4103a.png ALT="$ \le$">9)</SPAN> <tex2html_verbatim_mark> which are the dimensions of the puzzle, followed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each one has <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters including `<TT>.</TT>' (indicating an empty cell) and 1-digit numbers. The last line of the input contains two zero numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output for each test case should show the solved puzzle. Show black (water) cells with `<TT>#</TT>'. Write an empty line in the output after each puzzle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 
3... 
.... 
.4.. 
5 5 
2.5.. 
..... 
..... 
..... 
..4.3 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3..# 
#### 
.4.. 

2#5.. 
.#.## 
##.#. 
.###. 
..4#3

______________________________________________________
4104||||||false||||||
<P>Many well-known cryptographic operations require modular exponentiation. That is, given integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, compute <SPAN CLASS="MATH"><I>x</I><SUP>y</SUP> mod <I>n</I></SPAN> <tex2html_verbatim_mark>. In this question, you are tasked to program an efficient way to execute this calculation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>Each dataset consists of a single line containing three positive integers, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, separated by blanks. You can assume that <SPAN CLASS="MATH">1 &lt; <I>x</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $n < 2^{15} = 32768$
 --><SPAN CLASS="MATH"><I>n</I> &lt; 2<SUP>15</SUP> = 32768</SPAN> <tex2html_verbatim_mark>, and <!-- MATH
 $0 < y < 2^{31} = 2147483648$
 --><SPAN CLASS="MATH">0 &lt; <I>y</I> &lt; 2<SUP>31</SUP> = 2147483648</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line contains a single positive integer <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> such that<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>z</I> = <I>x</I><SUP>y</SUP> mod <I>n</I> </DIV><P><tex2html_verbatim_mark></P><P>for the numbers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> given in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th input dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 3 5 
2 2147483647 13 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
11
</PRE><P>
______________________________________________________
4105||||||false||||||
<P>The time now is 12 noon and Indiana Jones is standing on the western bank of a river. He wants to reach the eastern bank as fast as possible. Across the river is a series of stones, arranged in a straight line, and each stone is 1 meter away from its immediate neighbours or the two river banks.<P><DIV ALIGN="CENTER"><IMG WIDTH="599" HEIGHT="382" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="\epsfbox{p4105a.eps}"> <tex2html_verbatim_mark></DIV><P>Let us divide the time into intervals of one minute each, such that Interval 0 starts at 12:00:00, Interval 1 starts at 12:01:00, and so on. At the start of each interval, Indiana Jones can hop once from a stone/river bank to any stone/bank that is not more than 1.5 meters away, or stay put. He can hop so fast that we assume the time taken per hop is negligible.<P>The tricky part is this: The stones may sink and resurface! Within a time interval, a stone may sink at the middle of the interval, remains submerged and may resurface at the middle of another interval. If Indiana Jones is standing on a sinking stone, he will drown. Of course, Indiana Jones cannot hop to a stone that is submerged. At 12 noon, all stones are above the water and Indiana Jones is ready to hop. He has already derived the pattern of sinking/resurfacing for each stone during the next few intervals. Our task is to find the fastest way to cross the river.<P>Figure 1 shows an example of sinking and resurfacing stones over time. The example contains three stones, each of which is first sinking, then resurfacing and then sinking. The fastest way for Indiana Jones to cross the river is shown as a black line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset contains two positive integers, separated by a blank. The first value <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the number of stones. The second value <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is the number of intervals whose movement pattern Indiana Jones can predict. You can assume <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> lines of each dataset describe the behavior of the stones in each interval. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line describes the behavior of the stones in Interval <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, where <!-- MATH
 $0 \le i < t$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="$ \le$"><I>i</I> &lt; <I>t</I></SPAN> <tex2html_verbatim_mark>. Within each line, there are <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> characters, separated by blanks. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th character indicates the movement of the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th stone in the middle of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th interval as follow:<P><DL COMPACT><DT>``<TT>s</TT>":</DT><DD>The stone is sinking.</DD><DT>``<TT>r</TT>":</DT><DD>The stone is resurfacing.</DD><DT>``<TT>u</TT>":</DT><DD>The stone is not moving.</DD></DL><P><DIV ALIGN="CENTER"><IMG WIDTH="700" HEIGHT="900" ALIGN="center" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4105a.png ALT="\epsfbox{p4105b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one integer, which indicates the earliest interval at the beginning of which Indiana Jones can reach the eastern bank. If there is no way Indiana Jones can cross the river within <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> minutes, the output should be `<TT>-1</TT>'. Note that Indiana Jones actually has <SPAN CLASS="MATH"><I>t</I> + 1</SPAN> <tex2html_verbatim_mark> chances to hop.<P><P><BR><SPAN CLASS="textbf">Notes for the sample:</SPAN> In this dataset, the fastest way to cross over is as follows:<P><OL><LI>Stay put at the beginning of Interval 0. </LI><LI>Stay put at the beginning of Interval 1. </LI><LI>Stay put at the beginning of Interval 2. </LI><LI>Jump from the western bank to the first stone at the beginning of Interval 3. </LI><LI>Jump from the first stone to the second stone at the beginning of Interval 4. </LI><LI>Jump from the second stone to the third stone at the beginning of Interval 5. </LI><LI>Jump from the third stone to the eastern bank at the beginning of Interval 6. </LI></OL><P>Thus, Indiana Jones can reach the eastern bank the earliest at the beginning of Interval 6.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 7 
u u u
s u s
r s u
u r u
s u r
u s u
u u u
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
</PRE><P>
______________________________________________________
4106||||||false||||||
<P>In the first morning of every summer, when the first ray of sunlight breaks into the oak forest, Jayjay, the flying squirrel, quickly climbs to the top of an oak tree in the forest. From there, he starts his descent to the ground, and tries to gather as many acorns from the trees on his way down. Being a flying squirrel, Jayjay can choose, at any moment, to climb down the tree trunk or to fly from one tree to any other tree on his descending journey. However, he loses <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> feet of height every time he flies from one tree to another.<P>Suppose the forest has <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> oak trees, and all the trees have the same height of <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> feet. Given the height of every acorn on each tree, write a program to compute the maximal possible number of acorns Jayjay can collect by choosing a tree to climb and descend as described.<P>Figure 2 shows an example of <SPAN CLASS="MATH"><I>t</I> = 3</SPAN> <tex2html_verbatim_mark> oak trees with three, six, and five acorns, respectively. The white circles and grey line indicate a path for Jayjay to collect the maximal possible number of eight acorns, assuming that the height he loses for each flight is <SPAN CLASS="MATH"><I>f</I> = 2</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="871" HEIGHT="731" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="\epsfbox{p4106.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset contains three integers, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, separated by a blank. The first integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is the number of oak trees in the forest. The second integer <SPAN CLASS="MATH"><I>h</I></SPAN> <tex2html_verbatim_mark> is the height (in feet) of all the oak trees. The third integer, <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, is the height (in feet) that Jayjay loses every time he flies from one tree to another. You may assume that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$"><I>t</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>h</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$"><I>f</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>.<P>The first line of each dataset is followed by <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> lines. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line specifies the height of every acorn on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th tree. The line begins with a non-negative integer <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> that specifies how many acorns the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th tree has. Each of the following <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicates that an acorn is at height <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th tree. The positive integers in each line are sorted in ascending order, and repetitions are allowed. Thus, there can be more than one acorn at the same height on the same tree. You can assume that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4106.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark>, for each <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>-th line contains one single integer, which is the maximal possible number of acorns Jayjay can collect in one single descent for dataset <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> This dataset and Jayjay's path to collect the maximal number of 8 acorns are shown in Figure 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 10 2 
3 1 4 10 
6 3 5 7 8 9 9 
5 3 4 5 6 9 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P>
______________________________________________________
4107||||||false||||||
<P>A conservation group found a way to scan the cross-section of elephant tusks like the one shown on the left. The scanned image of a tusk is a collection of bright spots, which can be treated as a set of points on the plane, where no three points form a straight line. The group made a database of many tusks and hope that the database can help in tracking illegal ivory trade.<P><DIV ALIGN="CENTER"><IMG WIDTH="599" HEIGHT="538" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4107a.png ALT="\epsfbox{p4107a.eps}"> <tex2html_verbatim_mark></DIV><P>To facilitate retrieval from the database, it is desirable to have a feature representation that remains unchanged even if a scanned image is translated or rotated. They decided to use the number of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-sets to represent a set of points, which is defined below.<P>Consider a set <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points in the plane, where no three points form a straight line. Any line in the plane that does not contain a point in <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> will split the set into two sets <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> contains points on one side of the line and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> contains points on the other side. If the number of points in <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, then we call the collection <SPAN CLASS="MATH">{<I>X</I>, <I>Y</I>}</SPAN> <tex2html_verbatim_mark> a <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-set in <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. Note that <SPAN CLASS="MATH">{<I>X</I>, <I>Y</I>} = {<I>Y</I>, <I>X</I>}</SPAN> <tex2html_verbatim_mark>, and thus a <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-set is also an <SPAN CLASS="MATH">(<I>n</I> - <I>k</I>)</SPAN> <tex2html_verbatim_mark>-set. Given a set <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, your task is to compute the number of different <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-sets in <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset contains two integers, separated by a blank. The first integer gives the number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> of points in <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, and the second integer gives <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, where <!-- MATH
 $(0 < k < n \le 2000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>k</I> &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4107a.png ALT="$ \le$">2000)</SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of each dataset each contains two non-negative integers, indicating the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of the corresponding point. The <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates range from 0 to 10000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>-th line contains the number of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-sets for dataset <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="870" HEIGHT="696" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4107a.png ALT="\epsfbox{p4107b.eps}"> <tex2html_verbatim_mark></DIV><P><P><BR><SPAN CLASS="textbf">Note:</SPAN> This dataset and the lines that form its 2-sets are shown in Figure 3.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
6 2
0 0
4 0
4 4
0 4
1 2
3 2
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8
</PRE><P>
______________________________________________________
4108||||||false||||||
<P>The skyline of Singapore as viewed from the Marina Promenade (shown on the left) is one of the iconic scenes of Singapore. Country X would also like to create an iconic skyline, and it has put up a call for proposals. Each submitted proposal is a description of a proposed skyline and one of the metrics that country X will use to evaluate a proposed skyline is the amount of overlap in the proposed sky-line.<P><DIV ALIGN="CENTER"><IMG WIDTH="708" HEIGHT="494" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4108a.png ALT="\epsfbox{p4108a.eps}"> <tex2html_verbatim_mark></DIV><P>As the assistant to the chair of the skyline evaluation committee, you have been tasked with determining the amount of overlap in each proposal. Each proposal is a sequence of buildings, <SPAN CLASS="MATH"><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4108a.png ALT="$ \langle$"><I>b</I><SUB>1</SUB>, <I>b</I><SUB>2</SUB>,..., <I>b</I><SUB>n</SUB><IMG WIDTH="11" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4108a.png ALT="$ \rangle$"></SPAN> <tex2html_verbatim_mark>, where a building is specified by its left and right endpoint and its height. The buildings are specified in back to front order, in other words a building which appears later in the sequence appears in front of a building which appears earlier in the sequence.<P>The skyline formed by the first <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> buildings is the union of the rectangles of the first <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> buildings (see Figure 4). The overlap of a building, <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, is defined as the total horizontal length of the parts of <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, whose height is greater than or equal to the skyline behind it. This is equivalent to the total horizontal length of parts of the skyline behind <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> which has a height that is less than or equal to <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the height of building <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. You may assume that initially the skyline has height zero everywhere.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset consists of a single positive integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n < 100000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 100000)</SPAN> <tex2html_verbatim_mark>, which is the number of buildings in the proposal. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of each dataset each contains a description of a single building. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line is a description of building <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. Each building <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is described by three positive integers, separated by spaces, namely, <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < l_{i} < r_{i} \le 100000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>l</I><SUB>i</SUB> &lt; <I>r</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4108a.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark> represents the left and right end point of the building and <SPAN CLASS="MATH"><I>h</I><SUB>i</SUB></SPAN> represents the height of the building.<P><DIV ALIGN="CENTER"><IMG WIDTH="870" HEIGHT="203" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4108a.png ALT="\epsfbox{p4108b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>-th line contains one single integer, representing the amount of overlap in the proposal for dataset <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. You may assume that the amount of overlap for each dataset is at most 2000000.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> In this test case, the overlap of building <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> are 6, 4 and 4 respectively. Figure 4 shows how to compute the overlap of building <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. The grey area represents the skyline formed by <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and the black rectangle represents <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>. As shown in the figure, the length of the skyline covered by <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> is from position 3 to position 5 and from position 11 to position 13, therefore the overlap of <SPAN CLASS="MATH"><I>b</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> is 4.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 
5 11 3 
1 10 1 
3 13 2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
14
</PRE><P>
______________________________________________________
4109||||||false||||||
<P>In a large church in New Zealand, after the church service, the priest gives an empty collection box that can hold <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> dollar coins to the ``light-fingered usher". The usher then passes the collection box to a nearby parishioner. When receiving the box a parishioner adds a few dollar coins, then passes it to another nearby parishioner. When the light-fingered usher receives the box, he quietly removes one dollar coin from the box, slips it into his pocket, and passes the box to a nearby parishioner.<P>The behavior of the usher is given by a set of parishioners to whom he may pass the box. The behavior of a parishioner is given by a set of rules, each consisting of a donation of at least two dollar coins, and another parishioner to whom the box is passed after he places the coins in the box. As soon as the box is full, containing c coins, it is immediately passed to the priest, even when a parishioner cannot finish entering all the coins specified by the chosen rule.<P>Your problem is to compute the maximal possible gain for the usher, which is achieved when the parishioners always choose a rule that leads to the biggest number of coins in the usher's pocket.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number c of datasets, followed by c datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset contains two numbers <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, separated by a blank. The number <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> specifies the capacity of the box, and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> the number of parishioners. You can assume that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$">1000000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>. The next line specifies the behavior of the usher, represented by integers separated by a blank. The first integer specifies the number <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> of parishioners, to which the usher may pass the box. The next <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> integers each represent a parishioner to whom he may pass the box. The parishioners are numbered from 1 to <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. Each line <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4109img1.png ALT="$ \le$"><I>p</I>)</SPAN> <tex2html_verbatim_mark> of the next <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> lines of each dataset describes the behavior of parishioner <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, and consists of integers separated by a blank. The first integer of the line specifies the number of rules for the parishioner. Each rule is represented by a pair of integers, the first of which specifies the number of coins to give, which must be equal or greater than 2. The second number indicates the parishioner to receive the box next, where the number 0 identifies the usher. When there are two or more rules, the parishioner may choose to apply any of them. You can assume that the number of rules per parishioner is at least 1 and less than or equal to 1000; there may be multiple rules with the same parishioner to receive the box.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>-th line contains the maximal number of coins that the usher can obtain for dataset <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> This dataset specifies that the box can hold up to 10 coins, and that there are two parishioners. The usher may pass the box to either one of the two parishioners, as indicated by the second line. Parishioner 1 has two rules, and can choose either one, when the box is passed to him. The first rule says to put down 6 dollar coins and pass the box to the usher (indicated by `<TT>0</TT>'), and the second rule is put down 4 dollar coins and pass the box to parishioner 2. The last line specifies one single rule for parishioner 2, who must put down 5 dollar coins, and then pass the box to the usher.<P>The usher can obtain the maximal amount of 2 dollars by passing the box to parishioner 2, who passes it back to the usher. At that point, there are 5 dollars on the box. After removing one dollar, the box goes with 4 dollars to parishioner 2, and back to the usher, now with 8 dollars. The usher removes another dollar, and the box goes to parishioners 2 with 7 dollars. Parishioner 2 starts to apply his rule, and manages to put three more coins into the box, after which the box is full and goes to the priest. The usher ends up with two dollar coins in his pocket.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
10 2 
2 1 2 
2 6 0 4 2 
1 5 0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
4110||||||false||||||
<P>Singapore will host a Formula One race in 2008. The race will be held on a 5.067km long street circuit, consisting of 14 left hand turns and 10 right hand turns. In the run up to the F1 race, the number of illegal night street racing activities have been on the rise. Such races consists of several rounds around a designated street circuit.<P><DIV ALIGN="CENTER"><IMG WIDTH="653" HEIGHT="507" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4110a.png ALT="\epsfbox{p4110a.eps}"> <tex2html_verbatim_mark></DIV><P>The authorities would like to deploy a new vehicle monitoring system in order to catch these illegal Saint Andrew's Road, part of the Formula One circuit racers. The system consists of a (Kenny Pek, Piccom) number of cameras mounted along various roads. For the system to be effective, there should be at least one camera along each of the possible circuits.<P>The Singapore road system can be represented as a series of junctions and connecting bidirectional roads (see Figure 5). A possible racing circuit consists of a start junction followed by a path consisting of three or more roads that eventually leads back to the start junction. Each road in a racing circuit can be traversed only in one direction, and only once.<P>Your task is to write a program that computes the optimal placement of the vehicle-monitoring cameras. You will be provided with a description of a connected road network to be monitored in terms of the roads and junctions. The junctions are identified by the bigger numbers in Figure 5. A camera can be deployed on the roads (and not the junctions).<P><DIV ALIGN="CENTER"><IMG WIDTH="870" HEIGHT="400" ALIGN="bottom" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4110a.png ALT="\epsfbox{p4110b.eps}"> <tex2html_verbatim_mark></DIV><P>The cost of deploying a camera depends on the road on which it is placed. The smaller numbers by the roads in Figure 5 indicate the cost of deploying a camera on that road. Your job is to select a set of roads that minimizes the total cost of deployment while ensuring that there is at least one camera along every possible racing circuit (i.e. loop in the road network).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a line containing the number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of datasets, followed by <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> datasets, followed by a line containing the number `<TT>0</TT>'.<P>The first line of each dataset contains two positive integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, separated by a blank, which represent the number of junctions and number of roads, respectively. You may assume that <!-- MATH
 $0 < n < 10000$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 10000</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < m < 100000$
 --><SPAN CLASS="MATH">0 &lt; <I>m</I> &lt; 100000</SPAN> <tex2html_verbatim_mark>. For simplicity, we label each of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> junctions from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines of each dataset each describes one road. Each line consists of three positive integers which are the labels of two different junctions and the cost of deploying a camera on this road. The cost of deploying a camera is between 1 and 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each dataset. The <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>-th line contains one single number, representing the minimal cost of setting up the vehicle monitoring system such that there is at least one camera along every possible circuit.<P><P><BR><SPAN CLASS="textbf">Note:</SPAN> This data set depicts the situation shown in Figure 5. The two cameras show where cameras might be placed in order to monitor each circuit at minimal cost. Since each of the cameras have a cost of 3, the total minimal cost is 6.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
6 7 
1 2 5
2 3 3
1 4 5
4 5 4
5 6 4
6 3 3
5 2 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6

______________________________________________________
4111||||||false||||||
<body><div style="text-align: center;"><h1>Problem B -- Bombs<br></h1></div><p><br>There are <b>N</b> cities that are to be considered as points on a plane. Terrorists have decided to plant bombs in every city. However they are required to blow up only city <b>N</b>. An exploding bomb can cause any adjacent bombs within its range to explode. The terrorists can initiate an explosion only at city 1.</p><p style="border: medium none ;">The terrorists have two types of bombs (A and B), each with its own explosion range and purchase cost. Type A bombs have a circular explosion range, while type B bombs are an elliptical variation:<br><br></p><p class="separator" style="border: medium none ; clear: both; text-align: center;"><img alt="Picture of Bomb Ranges" src="http://livearchive.onlinejudge.org/external/41/p4111.gif></img><br></p><p class="separator" style="border: medium none ; clear: both; text-align: left;"><strong>R<sub>a</sub></strong> is the minor axis of the ellipse.</p><p class="separator" style="border: medium none ; clear: both; text-align: left;">The bombs may be oriented in any manner (i.e. their range curve is allowed to be rotated while they are planted in a city), and the rotation may be different for each city. The explosion range of A is already known (<b>R<sub>a</sub></b>), but about B, we are still not sure. (i.e. we do not know <b>R<sub>b</sub></b>). It is known that the purchase cost of B is strictly greater than that of A. You must find out the minimal <b>R<sub>b</sub></b> that is required so that the destruction of city <b>N</b> is possible. At this minimal range you need to select which type of bomb is to be placed in each city, and their respective orientations, so that city <b>N</b> is destroyed and the overall cost is minimised.</p><p><b>Input Format (STDIN)</b>:<br>The input consists of multiple testcases.<br>The first line of each test case contains a single integer <b>N</b> (2 &lt;= N &lt;= 5000). The second line contains three integers, R<sub>A</sub> C<sub>A</sub> C<sub>B</sub>, (1 &lt;= C<sub>A</sub> &lt; C<sub>B</sub> &lt;= 10<sup>3</sup>) that are the explosion range for type A bombs and costs of type A and B bombs respectively. The subsequent <b>N</b> lines contain two integers each specifying the co-ordinates of the cities. City 1 is first, and City N, last. The input terminates with a single line containing a zero.</p><p><b>Output Format (STDOUT)</b>:<br>The output of each test case must begin with "Case #&lt;case-number&gt;:", sans quotes.<br>Print one real and one integer, stating the minimal <b>R<sub>b</sub></b> (<b>R<sub>b</sub></b> &gt;= <b>R<sub>a</sub></b>) and the minimal overall cost respectively. The range must be printed exactly to two decimal places, rounded.<br></p><p><b>Sample Input</b>:<br></p><pre>6<br>3 1 3<br>0 0<br>0 1<br>1 1<br>5 5<br>5 6<br>6 6<br>6<br>2 2 3<br>1 0<br>3 0<br>4 1<br>5 0<br>7 1<br>10 0<br>0<br></pre><p><b>Sample Output</b>:<br></p><pre>Case #1: 5.66 8<br>Case #2: 3.16 14<br></pre></body>
______________________________________________________
4112||||||false||||||
<h1 style="text-align: center;">Problem C -- Scotland Yard</h1><p>This game of Scotland Yard consists of <b>K</b> cops chasing one thief through a network of interconnected cities. All players' initial positions are known. On every move, all players must choose a road to move on. All players move simultaneously. The roads that the thief takes are not known to the cops and the roads that the cops take are not known to the thief. However after every five moves they reveal their positions to each other. Two cops can stay in the same city, while the thief is caught as soon as he reaches a city where a cop is. The cops want to catch the thief as soon as possible, no matter how the thief plays. Can you tell me if this is possible, if the cops plan well ahead?</p><p><b>Input Format (STDIN)</b>:<br>Input consists of multiple testcases.<br>The first line of each testcase contains three integers <b>N</b>, <b>M</b> and <b>K</b>, representing the number of cities, the number of roads, and the number of cops, respectively. Cities are numbered between 1 and <b>N</b>.<br>(1 &lt;= <b>K</b> &lt;= 2, <b>K</b> &lt; <b>N</b> &lt;= 10).<br>The second line contains <b>K</b>+1 integers, the first giving the initial location of the thief, and the rest giving the initial locations of the cops. All initial locations will be distinct.<br>Subsequent <b>M</b> lines contain two integers, first being the source city and the second being the destination city that the one-way road connects.<br>It is also possible that the source city and destination city are the same. You may assume there exists at least one road leaving from any given city.<br>Input ends with a line containing three zeros separated by spaces.<br></p><p><b>Output Format (STDOUT)</b>:<br>Output to each test case must begin with a line containing "Case #&lt;case-number&gt;:".<br>Then on the next line, print "The thief is caught in x moves.", if it is possible to catch the thief in <b>x</b> moves. Print such minimal x &lt;= 20. If it is not possible to catch the thief in 20 moves, print "The thief cannot be caught within 20 moves.".<br></p><p><b>Sample Input</b>:<br></p><pre>4 6 1<br>1 4<br>1 2<br>2 1<br>2 3<br>3 2<br>3 4<br>4 3<br>5 8 1<br>1 5<br>1 2<br>2 1<br>2 3<br>3 2<br>3 4<br>4 3<br>4 5<br>5 4<br>7 22 2<br>1 2 3<br>1 2<br>2 1<br>1 3<br>3 1<br>1 4<br>4 1<br>1 5<br>5 1<br>1 6<br>6 1<br>1 7<br>7 1<br>2 3<br>3 4<br>4 5<br>5 6<br>6 7<br>7 6<br>6 5<br>5 4<br>4 3<br>3 2<br>0 0 0<br></pre><p></p><p><b>Sample Output</b>:<br></p><pre>Case #1:<br>The thief cannot be caught within 20 moves.<br>Case #2:<br>The thief is caught in 3 moves.<br>Case #3:<br>The thief is caught in 7 moves.<br></pre><p></p><p><b>Sample IO explanation:</b><br>Test case #1 consists of a straight line with 4 cities. After every move the thief stays at a city with a number different from the cop modulo 2. Hence he can never be caught.<br>Test case #2 consists of the same straight line with 5 cities now. Here is what the cop does to catch the thief:<br>move#1: move to 4<br>move#2: move to 3<br>move#3: move to 2<br>At move #1 the thief can only be at 2. At move #2 he can be at 1 or 3. If he's at 3, he's caught immediately. If he's at #1, he has to move to #2 at the next move and hence caught at move#3.<br>Test case #3 looks like the figure below:<br><img src="http://livearchive.onlinejudge.org/external/41/p4112.gif><br>The best-strategy here is to force the thief into the above situation (or the symmetric dual of the situation), after 5 moves. From here, in the next move, force the thief to the corner node 7 by having the cops exchange places. And the next move (7 th) he's caught, if the cop at 1 goes to 6, and the cop at 5 goes to 1.</p>
______________________________________________________
4113||||||false||||||
<body><p class="MsoNormal" style="text-align: center;" align="center"><b style=""><span style="font-size: 18pt;">Problem D -- Race in Flatland<o:p></o:p></span></b></p><p class="MsoNormal" style="text-align: center;" align="center"><b style=""><span style="font-size: 18pt;"><o:p></o:p></span></b></p><p class="MsoNormal"><b style="">Background<o:p></o:p></b></p><p class="MsoNormal" style="text-align: justify;">In Edwin A Abbott's `Flatland,' the 3rd spatial dimension of height (or, depth) is completely missing. Thus, there, you have lines, you have polygons, and you have circles but never any cylinders, prisms, pyramids, or spheres. Social classification is guided purely by the number of sides: the more the sides one has, the higher one's hierarchical position and respect in the society.<span style=""> </span>Thus, triangles exist below squares in the social status, and squares below octagons. Circles, by virtue of their having infinite number of sides, are considered to be the most evolved of all beings in flatland. [No matter where or how one touches these circles, one cannot find any `rough edges' or `sharp corners' in their personalities! They are sort of the `perfect angels' of the flatland.]<o:p></o:p></p><p class="MsoNormal"><o:p></o:p></p><p class="MsoNormal" style="text-align: justify;">Now, a unique race is once organized by these flatlanders. Two of the most socially reclusive circles of the time have been requested to contend in the race for the delight and entertainment of all. The race is to consist of a velcro wall, constructed using a series of contiguous, straight-line segments. Draped in their velcro costume especially designed for the race, the two contending circles are to stand on either side of this wall and are to race from one end of the wall to the other, as fast as they can, by spinning themselves against their side of the wall. Slipping and coming off the wall at any time is disallowed!<o:p></o:p></p><p class="MsoNormal"><o:p><img alt="Example configuration" src="http://livearchive.onlinejudge.org/external/41/p4113a.jpg style="width: 515px; height: 329px;"></o:p></p><p class="MsoNormal"><span style=""></span><span style="font-family: "Arial","sans-serif";"><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style='width:386.25pt;
 height:246.75pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/41/p4113a.jpg o:title=""/></v:shape><![endif]--><!--[if !vml]--></span><o:p></o:p></p><p class="MsoNormal" style="text-align: justify;">On D-day, as all are eagerly waiting for the race to start, a programmer flatlander suddenly jumps up* from his seat and calls on everyone to halt the race! There is a<span style=""> </span>possible flaw in the rules and structure of this race, he yells out. Depending upon the construction of the wall, one of the circles may unfairly be covering a longer distance, he points out to everyone's shock and awe. <o:p></o:p></p><p class="MsoNormal"><b style="">Problem<o:p></o:p></b></p><p class="MsoNormal" style="text-align: justify;">Your task is to team up with this programmer and devise a program that, given the specification of the wall and that of the contenders, calculates the unfair distance advantage one contender possibly has over the other. <o:p></o:p></p><p class="MsoNormal" style="text-align: justify;">You may assume the following:<o:p></o:p></p><ol style="margin-top: 0in;" start="1" type="1"><li class="MsoNormal" style="text-align: justify;">The contenders are identical in size.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">The wall is built out of one or more contiguous line segments without forming any loops.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">Each wall segment is longer than the diameter of the contender.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">The wall is such that at any given time, a contender touches either only one wall segment, or a wall segment and either of its contiguous neighbors.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">Contenders start the race at their first tangential point of contact with the first wall segment. To finish the race, they must both reach the last tangential point of contact with the last segment of the wall.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">The wall is such that neither contender can escape touching every wall segment in his race to the finish.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">Any change in the direction of forward motion happens instantaneously.<o:p></o:p></li> <li class="MsoNormal" style="text-align: justify;">The wall has zero thickness.<o:p></o:p></li></ol><p class="MsoNormal" style="text-align: justify;"><o:p></o:p></p><p class="MsoNormal" style="text-align: justify;">Consequently, topologies such as the ones illustrated in figures 2 to 7 may be safely ruled out from consideration.<o:p></o:p></p><p class="MsoNormal" style="text-align: justify;"><span style=""><img alt="Disallowed Configurations" src="http://livearchive.onlinejudge.org/external/41/p4113a.jpg style="width: 373px; height: 276px;"> </span><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:327.75pt;height:242.25pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/41/p4113a.jpg o:title=""/></v:shape><![endif]--><!--[if !vml]--><o:p></o:p></p><p class="MsoNormal" style="text-align: justify;"><o:p></o:p></p><p class="MsoNormal">With the exception of the final result, use 8-byte floating point arithmetic in all your intermediate calculations. The final result must be rounded off and output as a non-negative integer.<o:p><br><br></o:p><b style="">Input: STDIN<o:p></o:p></b></p><p class="MsoNormal">There may be multiple specification sets in the input. Each specification set is followed by a blank line. <o:p></o:p><br>Within each specification set...<o:p></o:p><br>The first line holds the radius, <span style="font-size: 10pt; font-family: "Courier New";">R (0 < R < 501)</span>, of each of the contending circles.<o:p><br></o:p>The second line holds the count, <span style="font-size: 10pt; font-family: "Courier New";">N (1 < N < 101)</span>, of 2D-coordinates that are to follow this line.<o:p><br></o:p>The next N lines carry the coordinates; each 2D-coordinate is on a line by itself. The velcro wall is constructed by connecting the 2D-coordinates with straight-lines such that coordinate <span style="font-size: 10pt; font-family: "Courier New";">i</span> is connected with coordinate <span style="font-size: 10pt; font-family: "Courier New";">i+1</span>, coordinate <span style="font-size: 10pt; font-family: "Courier New";">i+1</span> with <span style="font-size: 10pt; font-family: "Courier New";">i+2</span> ... and finally, coordinate <span style="font-size: 10pt; font-family: "Courier New";">N-1</span> with coordinate <span style="font-size: 10pt; font-family: "Courier New";">N</span>.<o:p><br></o:p>Each 2D-coordinate is a pair of numbers denoting the x and the y values, respectively, of a position in the XY plane. <span style=""></span>(|x| and |y| < 100001)<o:p><br></o:p>The radius and the coordinate values are rational numbers, with up to 4 decimal digits.<o:p><br><br></o:p><b style="">Output: STDOUT<o:p></o:p></b></p><p class="MsoNormal" style="text-align: justify;">For every specification set in the input, your program must output the distance advantage one contender has over the other. Each such result must be a non-negative integer arrived at by a rounding-off process such that it renders 1.1 and 1.99 as 1 and 2 respectively. Each result must be on a line by itself. A blank line must follow each result line.<o:p></o:p></p><p class="MsoNormal"><o:p></o:p><b style="">Sample Input<o:p></o:p></b><br><i style=""><span style="font-size: 10pt;"></span></i><i style=""><span style="font-size: 10pt; font-family: "Courier New";"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">3.7600<o:p></o:p><br>3<o:p></o:p><br>10 10<o:p></o:p><br>20 20<o:p></o:p><br>30 30<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">4.4950<o:p></o:p><br>4<o:p></o:p><br>10.1 0<o:p></o:p><br>0 10.1<o:p></o:p><br>10.1 20.2<o:p></o:p><br>0 30.3<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">2<o:p></o:p><br>3<o:p></o:p><br>0 0<o:p></o:p><br>10 0<o:p></o:p><br>10 -15<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">241<o:p></o:p><br>4<o:p></o:p><br>0 0.0<o:p></o:p><br>1000.0 0<o:p></o:p><br>2000.0 1000.0<o:p></o:p><br>1000 2000<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";"><o:p></o:p></span><i style=""><span style="font-size: 10pt;"></span></i><span style="font-family: "Courier New";"><o:p></o:p></span></p><p class="MsoNormal"><b style="">Sample Output<o:p></o:p></b><br><i style=""><span style="font-size: 10pt;"></span></i><span style="font-family: "Courier New";"><o:p></o:p></span><br>0<o:p></o:p><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br>0<o:p></o:p><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">4<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><span style="font-family: "Courier New";">682<o:p></o:p></span><br><i style=""><span style="font-size: 10pt;"><o:p></o:p></span></i><br><o:p></o:p><i style=""><span style="font-size: 10pt;"></span></i><span style="font-family: "Courier New";"><o:p></o:p></span></p><p class="MsoNormal"><o:p></o:p></p><p class="MsoNormal">Note:<o:p></o:p></p><p class="MsoNormal">*<span style=""> </span>The programmer flatlander does the equivalent of `jumping up' in his seat, as no one can really jump `up' or `down' in Flatland. <span style=""></span></p></body>
______________________________________________________
4114||||||false||||||
<h1 style="text-align: center;">Problem F -- RC Codes<o:p></o:p></h1>

<p

 style="margin-bottom: 0.0001pt; text-align: justify; text-indent: 0.5in;">After

seeing the movie Die Hard 4, Rakesh, a 14 year old

school student, became very interested in Cyber Security. He started

reading up a

lot on the subject. He came up with a coding scheme for characters that

he

called âRCâ, in which each character is stored as a variable length

code. <span style=""> </span>(A variable length code is where the

length of

the code is not necessarily the same even for plaintexts of the same

length.)<o:p></o:p></p>

<p style="margin-bottom: 0.0001pt; text-align: justify;">Rakesh

wanted to represent RC codes as binary trees (called RTree), and he

introduced

a rule for the creation of RC codes called the prefix property. In an

RC code no

character code is a prefix of any other character code. For example,

character

strings over the alphabet <span style="font-family: "EUSM10","serif";">{</span><span

 style="font-family: CMTT12;">m</span><span

 style="font-family: "EURM10","serif";">,

</span><span style="font-family: CMTT12;">n</span><span

 style="font-family: "EURM10","serif";">,

</span><span style="font-family: CMTT12;">o</span><span

 style="font-family: "EURM10","serif";">,

</span><span style="font-family: CMTT12;">p</span><span

 style="font-family: "EUSM10","serif";">}

</span>could be stored internally using the RC Code <span

 style="font-family: "EUSM10","serif";">{</span><span

 style="font-family: CMTT12;">m</span><span

 style="font-family: "EUFM10","serif";">= </span><span

 style="font-family: CMTT12;">00</span><span

 style="font-family: "EURM10","serif";">, </span><span

 style="font-family: CMTT12;">n

</span><span style="font-family: "EUFM10","serif";">= </span><span

 style="font-family: CMTT12;">010</span><span

 style="font-family: "EURM10","serif";">,

</span><span style="font-family: CMTT12;">o </span><span

 style="font-family: "EUFM10","serif";">=

</span><span style="font-family: CMTT12;">011</span><span

 style="font-family: "EURM10","serif";">, </span><span

 style="font-family: CMTT12;">p </span><span

 style="font-family: "EUFM10","serif";">= </span><span

 style="font-family: CMTT12;">1</span><span

 style="font-family: "EUSM10","serif";">}</span>.<o:p></o:p></p>

<p style="margin-bottom: 0.0001pt; text-align: justify;">Because

of the prefix property, an RC can be represented as a binary tree

(RTree) whose

leaves are the alphabet characters and whose left and right branches

are

(implicitly) labeled <span style="font-family: CMTT12;">0 </span>and <span

 style="font-family: CMTT12;">1</span>, respectively. The leaves of the

tree are

arranged so that the code of a character is read as the string of

branch labels

leading from the root to the leaf. <o:p></o:p></p>

<p style="margin-bottom: 0.0001pt; text-align: justify;">Write a

program that inputs an RTree (representing an RC code) and a bit string

consisting of contiguously stored character codes, and that outputs the

bit

string decoded into its corresponding string of characters.<o:p></o:p></p>

<p style="margin-bottom: 0.0001pt;"><b style=""> Input Format

(STDIN)<o:p></o:p></b></p>

<p style="margin-bottom: 0.0001pt; text-align: justify;">The first

line of input is an integer number N (0 < N < 20) indicating the

number

of test cases. The next line contains an RTree. If a tree is a single

leaf, it

appears as a single character; otherwise, if it has sub trees, it

appears as a

left parenthesis, followed by the left RTree sub tree, followed by a

comma,

followed by the right RTree sub tree, followed by a right parenthesis.

You can

assume every non-leaf tree (tree that is not a leaf) has two non-empty

sub

trees. Also there will be atleast two leaves.For example, the RTree representing the RC code in the second

paragraph

would appear as ((m,(n,o)),p). The next line is again an integer number

M (0

< M < 20) that indicates the number of lines of binary codes to

decode(whose length is atmost 1000 characters). The

subsequent lines each contain a nonempty binary string to be decoded.

With that,

the input for a test case ends. <span style=""> </span>If there

are more than one test case the data for the next test case continues

just

below the end of the first test case. You may assume that all inputs to

your

program will be valid cryptograms that can be successfully decoded.<span

 style="font-family: "calibri","sans-serif";"> <span

 style="font-family: times new roman;">We will use only the 26 English

lower case characters.</span> </span><span

 style="font-size: 11pt; line-height: 115%; font-family: "Calibri","sans-serif";"></span><o:p></o:p></p>

<p style="margin-bottom: 0.0001pt;"> <b style="">Output Format

(STDOUT)<o:p></o:p></b></p>

<p style="margin-bottom: 0.0001pt; text-align: justify;">For each

of the binary strings to be decoded, print the string of characters

that the

binary string represents, one per line, without intervening or

terminating

blank lines.<o:p></o:p></p>

<p style="margin-bottom: 0.0001pt;">

</p>

<p class="MsoNormal"

 style="margin-bottom: 0.0001pt; line-height: normal;"><b style="">

Sample input</b><br>

<span style="font-family: "Courier New";">2<o:p></o:p><br>

((a,(b,c)),(d,e))<o:p></o:p><br>

2<o:p></o:p><br>

111001101000<o:p></o:p><br>

000100001001101001110011101110110011<o:p></o:p><br>

((a,(b,c)),d)<o:p></o:p><br>

2<o:p></o:p><br>

0101011001101001100<o:p></o:p><br>

000110110011010101000011<o:p></o:p></span></p>

<p class="MsoNormal"

 style="margin-bottom: 0.0001pt; line-height: normal;"><b style="">
Sample output<o:p></o:p></b><br>

<span style="font-family: "Courier New";">edcba<o:p></o:p><br>

ababcbcdcdedeae<o:p></o:p><br>

bdcaddbca<br>

</span><span

 style="font-size: 11pt; line-height: 115%; font-family: "Courier New";">accaddbdbac</span></p>

<p style="margin-bottom: 0.0001pt;"><b style=""><o:p> </o:p></b></p>

<p style="margin-bottom: 0.0001pt;"><b style=""><o:p> </o:p></b></p>

<p style="margin-bottom: 0.0001pt;"><b style=""><o:p> </o:p></b></p>

<p style="margin-bottom: 0.0001pt;"><b style=""><o:p> </o:p></b></p>

______________________________________________________
4115||||||false||||||
<body><h1 style="text-align: center;">Problem G -- Pair of Numbers</h1><p>You and your friend play this simple number game. First your friend imagines two numbers in the (inclusive) range [-100,+100]. You keep asking him questions, and he gives YES/NO replies. Since you are an expert, after each reply, you tell him how many different pairs of numbers he could have possibly thought of.</p><p>Though his reply is a simple YES/NO, your questions are rather chosen from a slightly complicated grammer.<br><br>Question := <Subject> " " <Condition> "?"<br>Subject := "Is the first number" | "Is the second number" | "Are both the numbers" "Is either of the numbers" | "Is the product of the two numbers" | "Is the sum of the two numbers" | "Is the difference of the two numbers"<br>Condition := "prime" | "composite" | "even" | "odd" | "positive" | "negative" | "beautiful"<br><br></p><p></p><ul><li>All numbers <=1 are neither prime nor composite.</li>

  <li>Zero is neither positive nor negative.</li>

  <li>Difference of two numbers a and b, is |a-b|.</li>

  <li>A number x, is said to be beautiful if digits of |x| obey the

following property:

Invert zero or more digits of it. By inverting, we mean, replace that

digit d, by 9-d.

Parition the digits into two subsets such that the xor of the digits in

either sub-sets

are the same. If there exists a way to invert and partition, then x is

said to be beautiful. 0 and 9 are considered beautiful numbers.<br>

e.g.: -173 is beautiful because:

Digits = {1,7,3}; Invert(7) => Digits = {1,2,3} Paritions = {1,2} and {3}, both partitions xor to 3.</li> <li>The number zero is considered to be beautiful. </li></ul><p></p><p><b>Input Format</b>:<br>Input consists of multiple testcases. First line contains the number of test-cases.<br>First line of each test-case gives the number of question/reply pairs, followed by the question reply pairs, one per line. You may assume there can be atmost 50 pairs per test-case.<br></p><p><b>Output Format</b>:<br>Output to each test case must begin with "Case # &lt;case-number >:".<br>Each test-case must contain exactly one integer per question/reply pair saying the how many different pairs of numbers he could have possibly thought of.<br></p><p><b>Sample Input</b>:<br></p><pre>3<br>5<br>Is the first number even?<br>YES<br>Is the second number even?<br>NO<br>Is the sum of the two numbers prime?<br>YES<br>Is the product of the two numbers positive?<br>NO<br>Is the product of the two numbers negative?<br>NO<br>1<br>Is either of the numbers composite?<br>NO<br>1<br>Are both the numbers beautiful?<br>YES<br></pre><p><b>Sample Output</b>:<br></p><pre>
Case #1:
20301
10100
2410
1366
24
Case #2:
16129
Case #3:
1521
</pre><p></p></body>
______________________________________________________
4116||||||false||||||
<center><h2>Entangled Triangles</center></h2><p>Given a pair of triangles in 3D space, find out whether or not they are entangled in each other, just like two links of a chain.</p><p>You may assume the following:<ul><li>None of the vertices of one triangle lie inside the other triangle. <li>None of the edges of one triangle intersect any of the edges of the other triangle. <li>None of the edges of one triangle touch any of the vertices of the other triangle.</ul></p><h4>Input: STDIN</h4><p>There may be multiple specification sets in the input. Each specification set is followed by a blank line.</p><p>Within each specification set...<br>The first 3 lines hold the 3D coordinates of the vertices of the first triangle (one vertex per line); the next 3 lines hold those of the second triangle.</p><p>Each vertex is a set of 3, space-delimited integers denoting the x, y, and z coordinate values, respectively. (|x|, |y|, and |z| < 301)</p><h4>Output: STDOUT</h4><p>For every specification set in the input, your program must output the string "Entangled" (sans quotes) if the triangles are entangled, or "Not Entangled" if they are not. Each result must be on a line by itself. A blank line must follow each result line.</p><h4>Sample Input</h4><pre>
5 1 0
10 2 0
7 4 0
5 1 2
10 2 2
7 4 2

5 1 0
10 2 0
7 4 0
7 2 5
7 2 -5
12 12 0
</pre><h4>Sample Output</h4><pre>
Not Entangled

Entangled

</pre>
______________________________________________________
4117||||||false||||||
<center><h2>Problem H -- Postmaster's Wish</h2></center>
<p>A post master wishes to automate the sorting operation at his post office, since he finds that on an average the number of people assigned to the sorting operation are either heavily loaded or idle, ultimately resulting in loss of man hours that could have been efficiently used.
He comes up with an idea of an automatic sorting machine that has a fixed capacity to hold the input letters and that sorts the letters at a fixed output rate. 
Depending upon the arrival of letters to the sorter, once the sorter is full of letters, the excess letters that would cause the sorting box to overflow have to be dropped into a bin to be manually sorted afterwards.</p>
<p>
You are working for a company that has been called by the postmaster for a meeting to demonstrate a software simulation of the sorter. The following scenarios need to be shown in the simulation to him:
<ul>
<li>a) Sorter box is completely filled.</li>
<li>b) Sorter box is drained out.</li>
<li>c) Sorter box overflows.</li>
</ul>
</p>
<p>
At the beginning of every second:
<ul>
<li>A certain number of messages arrive, and they are added to the sorter bin of a fixed capacity <b>C</b>. Excess messages cause overflow into the manual sorter bin.
<li>From the letters that are pending to be sorted, the sorter acts and sorts <b>R</b> letters.
</ul>
</p>

<p>
<b>Input Format (STDIN)</b>:<br>
Input consists of multiple testcases.<br>
The first line of each testcase contains two integers: <b>C</b> <b>R</b> <b>M</b> (1 <= <b>M</b> <= 100; 1 <= <b>R</b> <= <b>C</b> <= 20,000) representing 
the capacity of the sorter, the fixed-rate of sorting of the sorter and the number of messages. <br>
The following <b>M</b> lines contain one integer each, <b>i</b>-th line representing the number of letters that arrived,
at time <b>i</b>. Each of these integers will be in the inclusive range [0,1000].<br>
Input ends with a line containing three zeros.
</p>

<p><b>Output Format (STDOUT)</b>:<br>

Output to each test case must begin with a line containing "Case #&lt;case-number&gt;:".<br>
Each test-case must contain <b>M</b> lines, with exactly 5 integers each, which the state of the sorter after
every unit of time. The five integers represent the following:
<ul>
<li>Current time (The i-th line will be just i).
<li>Letters received (Same as the input for the i-th line).
<li>Letters sorted (Number of letters the sorter sorted at this unit of time; must be less than or equal to <b>R</b>).
<li>Sorter balance (Number of pending letters in the sorter; must be less than or equal to <b>C</b>).
<li>Number of letters dumped into the manual sorter bin.
</ul>
There should be a blank line after each test-case.<br>
</p>

<p><b>Sample Input</b>:<br>
<pre>
10 7 3
12
3
2
876 321 7
500
200
900
300
0
1
1
0 0 0
</pre>
</p>
<p><b>Sample Output</b>:<br>
<pre>
Case #1:
1 12 7 3 2
2 3 6 0 0
3 2 2 0 0

Case #2:
1 500 321 179 0
2 200 321 58 0
3 900 321 555 82
4 300 321 534 0
5 0 321 213 0
6 1 214 0 0
7 1 1 0 0

</pre>

______________________________________________________
4118||||||false||||||
<P>You are a technician for the Air Conditioning Machinery company (ACM). Unfortunately, when you arrive at a customer site to install some air conditioning ducts, you discover that you are running low on supplies. You have only six duct segments, and they are all of the same kind, called an ``elbow.''<P>You must install a duct in a confined space: a rectangular prism whose sides are multiples of a unit length. Think of the confined space as consisting of an array of unit cubes. Each elbow occupies exactly four unit cubes, as shown in Figure 1 below. A unit cube can be occupied by at most one elbow. Each elbow has exactly two openings, as indicated by the gray squares in the elbow shown in Figure 1. You may assemble the elbows into longer ducts, but your duct must be completely contained inside the given space. One way to connect two elbows is shown in Figure 2. Your task is to connect an inflow to an outflow. The inflow and the outflow are located on the exterior surface of the confined space, aligned with the unit cubes, as shown in Figure 3. To keep expenses down, you must accomplish this task while using the minimum number of elbows. out<P><DIV ALIGN="CENTER"><IMG WIDTH="1080" HEIGHT="328" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="\epsfbox{p4118.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases, each of which consists of a single line containing eleven input values separated by blanks. The input values for each test case are as follows.<P>The first three input values are integers (<SPAN CLASS="MATH"><I>x</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>) that indicate the size of the confined space in the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> dimensions, respectively. Each unit cube in the confined space can be identified by coordinates <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>x</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>y</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>z</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4118.png ALT="$ \le$"><I>z</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>x</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN> <tex2html_verbatim_mark> are all positive and not greater than 20.<P>The next three input values are integers that indicate the location of the inflow by identifying the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> coordinates of the unit cube that connects to the inflow.<P>The next input value is a two-character string that indicates the direction of the inward flow, using one of the following codes: <SPAN CLASS="MATH">+ <I>x</I>, - <I>x</I>, + <I>y</I>, - <I>y</I>, + <I>z</I>, - <I>z</I></SPAN> <tex2html_verbatim_mark>. The inflow connection is on the face of the unit cube that receives this inward flow. For example, if the data specifies an inflow direction of <SPAN CLASS="MATH">+ <I>y</I></SPAN> <tex2html_verbatim_mark>, the inflow connection is on the face of the unit cube that faces in the negative <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> direction.<P>The next three input values are integers that indicate the location of the outflow by identifying the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> coordinates of the unit cube that connects to the outflow.<P>The last input value is a two-character string that indicates the direction of the outward flow, using the same codes described above. The outflow connection is on the face of the unit cube that generates this outward flow. For example, if the data specifies an outflow direction of <SPAN CLASS="MATH">+ <I>y</I></SPAN> <tex2html_verbatim_mark>, the outflow connection is on the face of the unit cube that faces in the positive y direction.<P>The last line of the input file consists of a single zero to indicate end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1) followed by the minimum number of elbows that are required to connect the inflow to the outflow without going outside the confined space. If the task cannot be accomplished with your supply of six elbow segments, print the word `<TT>Impossible</TT>' instead. Use the format in the sample data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 4 3 3 1 1 +z 5 4 3 +x 
5 4 3 3 1 1 +z 1 2 3 -x 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: Impossible
</PRE><P>
______________________________________________________
4119||||||false||||||
<P>Combinatorics is a branch of mathematics chiefly concerned with counting discrete objects. For instance, how many ways can you pick two people out of a crowd of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> people? Into how many regions can you divide a circular disk by connecting <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points on its boundary with one another? How many cubes are in a pyramid with square layers ranging from <SPAN CLASS="MATH">1&#215;1</SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> cubes?<P><DIV ALIGN="CENTER"><IMG WIDTH="628" HEIGHT="545" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="\epsfbox{p4119.eps}"> <tex2html_verbatim_mark></DIV><P>Many questions like these have answers that can be reduced to simple polynomials in <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The answer to the first question above is <SPAN CLASS="MATH"><I>n</I>(<I>n</I> - 1)/2</SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH">(<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>2 - <I>n</I>)/2</SPAN> <tex2html_verbatim_mark>. The answer to the second is <SPAN CLASS="MATH">(<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>4 - 6<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>3 + 23<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>2 - 18<I>n</I> + 24)/24</SPAN> <tex2html_verbatim_mark>. The answer to the third is <SPAN CLASS="MATH"><I>n</I>(<I>n</I> + 1)(2<I>n</I> + 1)/6</SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH">(2<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>3 + 3<I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP>2 + <I>n</I>)/6</SPAN> <tex2html_verbatim_mark>. We write these polynomials in a standard form, as a polynomial with integer coefficients divided by a positive integer denominator.<P>These polynomials are answers to questions that can have integer answers only. But since they have fractional coefficients, they look as if they could produce non-integer results! Of course, evaluating these particular polynomials on a positive integer always results in an integer. For other polynomials of similar form, this is not necessarily true. It can be hard to tell the two cases apart. So that, naturally, is your task.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases, each on a separate line. Each test case is an expression in the form <SPAN CLASS="MATH">(<I>P</I>)/<I>D</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a polynomial with integer coefficients and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> is a positive integer denominator. <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is a sum of terms of the form <SPAN CLASS="MATH"><I>Cn</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark>, where the coefficient <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and the exponent <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> satisfy the following conditions:<P><OL><LI><SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is an integer satisfying <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$ \le$"><I>E</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is 0, then <SPAN CLASS="MATH"><I>Cn</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark> is expressed as <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is 1, then <SPAN CLASS="MATH"><I>Cn</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark> is expressed as <SPAN CLASS="MATH"><I>Cn</I></SPAN> <tex2html_verbatim_mark>, unless <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is 1 or -1. In those instances, <SPAN CLASS="MATH"><I>Cn</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark> is expressed as <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">- <I>n</I></SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is an integer. If <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is 1 or -1 and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is not 0 or 1, then the <SPAN CLASS="MATH"><I>Cn</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark> will appear as <SPAN CLASS="MATH"><I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">- <I>n</I><SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4119.png ALT="$\scriptstyle \wedge$"></SUP><I>E</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>Only non-negative <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> values that are not part of the first term in the polynomial are preceded by +. </LI><LI>Exponents in consecutive terms are strictly decreasing. </LI><LI><SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> fit in a 32-bit signed integer. </LI></OL><P>See the sample input for details.<P>Input is terminated by a line containing a single period.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1). Then print `<TT>Always an integer</TT>' if the test case polynomial evaluates to an integer for every positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Print `<TT>Not always an integer</TT>' otherwise. Print the output for separate test cases on separate lines. Your output should follow the same format as the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
(n^2-n)/2 
(2n^3+3n^2+n)/6 
(-n^14-11n+1)/3 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Always an integer 
Case 2: Always an integer 
Case 3: Not always an integer
</PRE><P>
______________________________________________________
4120||||||false||||||
<P>Many mechanical systems work with rotating shafts connected with conveyor belts. The shafts have a variety of sizes and rotate in either a clockwise or a counterclockwise manner. The exact way in which a belt will connect two shafts depends on their rotations, as shown in Figures 1 and 2.<P><DIV ALIGN="CENTER"><IMG WIDTH="1108" HEIGHT="205" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="\epsfbox{p4120a.eps}"> <tex2html_verbatim_mark></DIV><DIV ALIGN="CENTER"><IMG WIDTH="1107" HEIGHT="316" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="\epsfbox{p4120b.eps}"> <tex2html_verbatim_mark></DIV><P>One task in setting up such mechanical systems is to link together two given shafts, subject to these constraints:<P><UL><LI>If the two shafts being connected are too far apart, the belt may start to vibrate chaotically when perturbed slightly. To prevent this, you can connect shafts only when the distance between the points where the belt leaves one shaft and touches the other is less than some distance d (the exact value of d varies depending on the type of belt). </LI><LI>No belt can cross over itself, as shown in Figure 3. </LI><LI>No belt can pass through another shaft (or touch one rotating the wrong way), as shown in Figure 4. </LI><LI>The belt is not a loop; it goes in only one direction, from the starting shaft to the ending shaft. The starting shaft ``pushes'' the belt and the ending shaft ``pulls'' it. </LI></UL><P>As an example, consider the problem of connecting shaft A to shaft D in Figure 5. Suppose that the distance needed to connect A to C (shown in blue dashed line) or to connect B to D is greater than the limit allowed. Then the shortest distance to connect A to D is shown in solid line, going from shaft A to B to C and then D. Notice that the connection cannot go from B to E and then D as the belt would cross itself.<P><DIV ALIGN="CENTER"><IMG WIDTH="505" HEIGHT="318" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="\epsfbox{p4120c.eps}"> <tex2html_verbatim_mark></DIV><P>You must write a program that calculates the minimum length of the belt to connect the two given shafts.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> indicating the number of shafts, numbered from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>. Starting on the next line are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> four-tuples of the form <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I>&nbsp;<I>r</I>&nbsp;<I>s</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> are the integer coordinates of a shaft center, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is the integer radius of the shaft, and <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is either ``<TT>C</TT>" for clockwise or ``<TT>CC</TT>" for counterclockwise <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> and <!-- MATH
 $0 < r \le 1000)$
 --><SPAN CLASS="MATH">0 &lt; <I>r</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4120a.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. Positive <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is right and positive <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is up. The first four-tuple specifies shaft 0, the second one shaft 1 and so on. These four-tuples may extend over multiple lines, though no four-tuple will be split across two lines. No two shafts touch or overlap. The last line of each test case contains two integers <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> indicating the starting and ending shafts, followed by a floating point value <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> specifying the maximum distance constraint.<P>The last test case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1) followed by the length of the path of minimum distance. Print `<TT>Cannot reach destination shaft</TT>' if the destination shaft cannot be reached. Use the format shown in the sample output.<P>When measuring the distance, start where the belt first leaves the starting shaft and end where the belt first touches the ending shaft. Your distance calculation must include both the length of belt between shafts as well as the distance the belt travels around intermediate shafts. Your answer should be rounded to the nearest hundredth, though you need not print trailing zeroes after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
24 50 14 C 93 78 20 C 118 8 15 CC 
167 32 13 C 159 88 15 CC
0 3 82.5 
5 

24 50 14 C 93 78 20 C 118 8 15 CC 
167 32 13 C 159 88 15 C
0 3 82.5 
5
24 50 14 C 93 78 20 C 118 8 15 CC 
167 32 13 C 159 88 15 C
0 3 8.5 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: length = 271 
Case 2: length = 228.23 
Case 3: Cannot reach destination shaft
</PRE><P>
______________________________________________________
4121||||||false||||||
<P>A <SPAN CLASS="textit">hare and hounds</SPAN> road rally requires contestants (the ``hounds") to identify a route of one or more roads selected by the organizer (the ``hare"). Both parties move over roads that meet at various intersections. Upon entering any intersection (except special ones to be described shortly), both the hound and the hare select routes using the <SPAN CLASS="textit">main road rule</SPAN>. The main road rule is always ``straight as possible," meaning make the smallest turn (perhaps none) necessary to continue. If there are two such choices possible (such as at some ``Y" intersections), the main road rule dictates the rightmost (from the point of view of the hound) of the two acceptable alternatives should be selected.<P>At certain intersections, the hare may violate the main road rule by taking a random road away from the intersection (though never the original road used to reach the intersection). These intersections are marked by the hare as <SPAN CLASS="textit">choice points</SPAN> (usually by a colored mark on the pavement in the intersection). When reaching a choice point, the hound must try each road leaving the intersection and travel that road (potentially traveling through other intersections) until reaching a <SPAN CLASS="textit">confirmation marker</SPAN> (usually some flour dumped by the hare on the road) confirming the correct route selection. An incorrect route selection is indicated by one of the following:<P><UL><LI>The hound travels a specified maximum distance from the choice point before reaching a confirmation marker. </LI><LI>The hound reaches a ``dead end" (an ``intersection" with only one road to it) before reaching the confirmation marker. </LI><LI>The hound reaches a choice point before reaching the confirmation marker. (The hare always places a confirmation marker on the route following a choice point. Also, the hare never returns to a previous choice point.) </LI></UL><P>After detecting an incorrect route, the hound must trace back along the route taken to the choice point and select a different route alternative. If the hound encounters the endpoint while looking for a confirmation marker, he ignores it.<P>When selecting routes from a choice point, the hound uses the main road rule in a slightly different way. The first road selected is the same as if the intersection were not a choice point. But if the hound must return to the choice point (i.e., the first road taken from the choice point was not part of the hare's route), then the hound chooses the second road using the main road rule from the direction with which he returns to the choice point (ignoring any direction that he has already tried as well as the direction that he originally arrived from). This process repeats each time the hound returns to the choice point until he finds the proper route. This multiple use of the main road rule occurs only at choice points. For the purposes of this problem, the hound will not remember the result of traveling down any road, even if he returns to it multiple times while exploring one choice point.<P>For this problem you will be given a road map (a configuration of roads and intersections), the list of choice point intersections, the placement of confirmation markers, the maximum distance from a choice point to a confirmation marker, the starting and ending intersections (neither of which will be choice points), and the direction to be used in leaving the starting intersection. Using this information, you will simulate the hound's search for the hare's route. You may assume that the hound, using the strategy described, will always discover and trace the hare's route.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There may be multiple input test cases. The data for each case begins with a line containing 7 integers: <SPAN CLASS="MATH"><I>ncp</I></SPAN> <tex2html_verbatim_mark> (number of choice point intersections), <SPAN CLASS="MATH"><I>nroad</I></SPAN> <tex2html_verbatim_mark> (number of roads, never larger than 150), <SPAN CLASS="MATH"><I>ncm</I></SPAN> <tex2html_verbatim_mark> (number of confirmation markers, never more than 100), <SPAN CLASS="MATH"><I>confdist</I></SPAN> <tex2html_verbatim_mark> (maximum distance from a choice point intersection to the confirmation marker, at most 2000), <SPAN CLASS="MATH"><I>startisect</I></SPAN> <tex2html_verbatim_mark> (starting intersection number), <SPAN CLASS="MATH"><I>endisect</I></SPAN> <tex2html_verbatim_mark> (ending intersection number), and <SPAN CLASS="MATH"><I>startdir</I></SPAN> <tex2html_verbatim_mark> (the direction of the starting road). Intersections are identified using integers between 1 and 100.<P>The starting line for each case is immediately followed by a line containing <SPAN CLASS="MATH"><I>ncp</I></SPAN> <tex2html_verbatim_mark> integers giving the identifying numbers of the choice point intersections.<P>Next there are <SPAN CLASS="MATH"><I>nroad</I></SPAN> <tex2html_verbatim_mark> lines. Roads are identified using sequential integers starting with 1, matching the order in which their specification lines appear in the input. Each such line contains 5 integers: the identifying numbers of the two intersections connected by the road, the compass directions (from 0 to 359 degrees, 0 is north, 90 is east) with which the road leaves the intersections, and the length of the road. Each road can be traveled in both directions and no two roads will enter an intersection at the same angle.<P>Finally there are <SPAN CLASS="MATH"><I>ncm</I></SPAN> <tex2html_verbatim_mark> lines that identify the placement of the confirmation markers. Each of these lines contains three integers giving the identifying number of an intersection, the identifying number of a road leaving that intersection, and the distance from the intersection to the confirmation marker. Confirmation markers will not be placed at intersections. Confirmation markers also will not be dropped along roads that start/end in the same intersection.<P>Input for the last case is followed by a line containing 7 zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1), the length of the hare's route, the length of the hound's search (including all incorrect paths taken at choice points), and the road numbers in the hare's route in the order the hare traveled them, using the format shown in the sample data. Print a blank line after the output for each case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 1 3 3 1 180 
2 
2 4 180 0 5 
1 4 180 90 6 
4 2 270 270 5 
3 2 180 0 8 
1 2 270 90 3 
4 3 3 
0 0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
   Length of hare's route is 19 
   Length of hound's search is 31 
   Route: 4 3 2
</PRE><P>
______________________________________________________
4122||||||false||||||

<P>
Dan McAmbi is a member of a crack counter-espionage team and has recently obtained the partial contents of a file containing information vital to his nation's interests. The file had been compressed using Huffman encoding. Unfortunately, the part of the file that Dan has shows only the Huffman codes themselves, not the compressed information. Since Huffman codes are based on the frequencies of the characters in the original message, Dan's boss thinks that some information might be obtained if Dan can reverse the Huffman encoding process and obtain the character frequencies from the Huffman codes. Dan's gut reaction to this is that any given set of codes could be obtained from a wide variety of frequency distributions, but his boss is not impressed with this reasoned analysis. So Dan has come to you to get more definitive proof to take back to his boss. 

<P>
Huffman encoding is an optimal data compression method if you know in advance the relative frequencies of letters in the text to be compressed. The method works by first constructing a <SPAN  CLASS="textit">Huffman tree</SPAN> as follows. Start with a forest of trees, each tree a single node containing a character from the text and its frequency (the character value is used only in the leaves of the resulting tree). Each step of the construction algorithm takes the two trees with the lowest frequency values (choosing arbitrarily if there are ties), and replaces them with a new tree formed by joining the two trees as the left and right subtrees of a new root node. The frequency value of the new root is the sum of the frequencies of the two subtrees. This procedure repeats until only one tree is left. An example of this is shown below, assuming we have a file with only 5 characters -- A, B, C, D and E -- with frequencies 10%, 14%, 31%, 25% and 20%, respectively.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4122a.eps}$
 -->
<IMG
 WIDTH="944" HEIGHT="172" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4122a.png
 ALT="\epsfbox{p4122a.eps}">
<tex2html_verbatim_mark>
</DIV>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p4122b.eps}$
 -->
<IMG
 WIDTH="735" HEIGHT="224" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4122a.png
 ALT="\epsfbox{p4122b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
After you have constructed a Huffman tree, assign the Huffman codes to the characters as follows. Label each left branch of the tree with a 0 and each right branch with a 1. Reading down from the root to each character gives the Huffman code for that character. The tree above results in the following Huffman codes: A - 010, B - 011, C - 11, D - 10 and E - 00. 

<P>
For the purpose of this problem, the tree with the lower frequency <SPAN  CLASS="textit">always</SPAN> becomes the left subtree of the new tree. If both trees have the same frequencies, either of the two trees can be chosen as the left subtree. Note that this means that for some frequency distributions, there are several valid Huffman encodings. 

<P>
The same Huffman encoding can be obtained from several different frequency distributions: change 14% to 13% and 31% to 32%, and you still get the same tree and thus the same codes. Dan wants you to write a program to determine the total number of distinct ways you could get a given Huffman encoding, assuming that all percentages are positive integers. Note that two frequency distributions that differ only in the ordering of their percentages (for example 30% 70% for one distribution and 70% 30% for another) are not distinct. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of several test cases. Each test case consists of a single line starting with a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le n \le 20)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4122a.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4122a.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, which is the number of different characters in the compressed document, followed by <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> binary strings giving the Huffman encoding of each character. You may assume that these strings are indeed a Huffman encoding of some frequency distribution (though under our additional assumptions, it may still be the case that the answer is 0 -- see the last sample case below). 

<P>
The last test case is followed by a line containing a single zero. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, print a line containing the test case number (beginning with 1) followed by the number of distinct frequency distributions that could result in the given Huffman codes. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 010 011 11 10 00 
8 00 010 011 10 1100 11010 11011 111 
8 1 01 001 0001 00001 000001 0000001 0000000 
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 3035 
Case 2: 11914 Case 3: 0
</PRE> 

<P>

______________________________________________________
4123||||||false||||||

<P>
The famous Glenbow Museum in Calgary is Western Canada's largest museum, with exhibits ranging from art to cultural history to mineralogy. A brand new section is being planned, devoted to brilliant computer programmers just like you. Unfortunately, due to lack of space, the museum is going to have to build a brand new building and relocate into it. 

<P>
The size and capacity of the new building differ from those of the original building. But the floor plans of both buildings are orthogonal polygons. An orthogonal polygon is a polygon whose internal angles are either 90Â° or 270Â°. If 90Â° angles are denoted as R (Right) and 270Â° angles are denoted as O (Obtuse) then a string containing only R and O can roughly describe an orthogonal polygon. For example, a rectangle (Figure 1) is the simplest orthogonal polygon and it can be described as RRRR (the angles are listed in counter-clockwise order, starting from any corner). Similarly, a cross-shaped orthogonal polygon (Figure 2) can be described by the sequence RRORRORRORRO, RORRORRORROR, or ORRORRORRORR. These sequences are called <SPAN  CLASS="textit">angle strings</SPAN>.

<P>
<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4123.eps}$
 -->
<IMG
 WIDTH="900" HEIGHT="344" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4123.png
 ALT="\epsfbox{p4123.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
Of course, an angle string does not completely specify the shape of a polygon -- it says nothing about the length of the sides. And some angle strings cannot possibly describe a valid orthogonal polygon (RRROR, for example). 

<P>
To complicate things further, not all orthogonal polygons are acceptable floor plans for the museum. A museum contains many valuable objects, and these objects must be guarded. Due to cost considerations, no floor can have more than one guard. So a floor plan is acceptable only if there is a place within the floor from which one guard can see the entire floor. Similarly, an angle string is acceptable only if it describes at least one acceptable polygon. Note that the cross-shaped polygon in Figure 2 can be guarded by someone standing in the center, so it is acceptable. Thus the angle string RRORRORRORRO is acceptable, even though it also describes other polygons that cannot be properly guarded by a single guard. 

<P>
Help the designers of the new building determine how many acceptable angle strings there are of a given length. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains several test cases. Each test case consists of a line containing a positive integer <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le L \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4123.png
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4123.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark>, which is the desired length of an angle string. The input will end with a line containing a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, print a line containing the test case number (beginning with 1) followed by the number of acceptable angle strings of the given length. Follow the format of the sample output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 
6 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 1 
Case 2: 6
</PRE>

<P>

______________________________________________________
4124||||||false||||||
<P>Rose N. Blatt is designing an embedded neural network to place inside a cell phone. When trained by the phone's owner, the neural network will enable the user to dictate text messages in a hands-free way. The key idea in Rose's design is the use of complicated polynomial response functions in each of the nodes of the network (rather than the more traditional thresholding functions used in many other neural nets). Figure 1 shows a portion of such a neural network (the polynomials are not accurately graphed).<P><DIV ALIGN="CENTER"><IMG WIDTH="692" HEIGHT="390" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="\epsfbox{p4124a.eps}"> <tex2html_verbatim_mark></DIV><P>When Rose was ready to select her polynomials, she discovered a problem. Due to the limited amount of memory available, she did not have enough space to store all of the coefficients of the polynomials in her network. She has decided to use an approximation to each polynomial in the form of a continuous polygonal curve with two segments, <SPAN CLASS="MATH"><I>y</I> = <I>a</I><SUB>1</SUB><I>x</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I> = <I>b</I><SUB>1</SUB><I>x</I> + <I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>. The segments meet at a point whose <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, is between -1 and +1. Rose wants the approximation to be the best in the sense that the distance between <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and the approximation function <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> is minimal. We define the distance between <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> as the integral of the square of their difference:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>d</I> (<I>p</I>, <I>g</I>) = <IMG WIDTH="31" HEIGHT="59" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$\displaystyle \int^{{1}}_{{-1}}$">(<I>p</I>(<I>x</I>) - <I>g</I>(<I>x</I>))<SUP>2</SUP><I>dx</I></DIV><P><tex2html_verbatim_mark></P><P>For instance, if the polynomial is <SPAN CLASS="MATH"><I>x</I><SUP>2</SUP> - 0.2</SPAN> <tex2html_verbatim_mark>, then the best polygonal approximation, with lines meeting at <SPAN CLASS="MATH"><I>c</I> = 0</SPAN> <tex2html_verbatim_mark>, is shown in Figure 2 (the dotted line shows the graph of the polygonal approximation).<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>g</I>(<I>x</I>)<IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$\displaystyle \left\{\vphantom{ \begin{array}{cc}
-x-0.367, &amp; -1 \le x \le 0 \\
x-0.367, &amp; 0 \le x \le 1 \end{array} }\right.$"><IMG WIDTH="213" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$\displaystyle \begin{array}{cc}
-x-0.367, &amp; -1 \le x \le 0 \\
x-0.367, &amp; 0 \le x \le 1 \end{array}$"></DIV><P><tex2html_verbatim_mark></P><P><DIV ALIGN="CENTER"><IMG WIDTH="431" HEIGHT="287" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="\epsfbox{p4124b.eps}"> <tex2html_verbatim_mark></DIV><P>In the few bytes that are available for each node, Rose can store the values of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> as signed numbers. Fortunately Rose has a program that supplies her with a good guess for the value of <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Given this value, you are asked to help Rose find the optimal values for <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> in the approximations to her polynomials.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. Each test case consists of three lines. The first line contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>, representing the degree of the polynomial <SPAN CLASS="MATH"><I>p</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark>. This is followed by a line containing <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> numbers between -1 and 1 inclusive, which are the coefficients of <SPAN CLASS="MATH"><I>p</I>(<I>x</I>)</SPAN> <tex2html_verbatim_mark> from highest order term down to the constant term, expressed with at most three places after the decimal point. The last line for each test case contains the value for <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $-1 < c < 1$
 --><SPAN CLASS="MATH">-1 &lt; <I>c</I> &lt; 1</SPAN> <tex2html_verbatim_mark>, expressed with at most three places after the decimal point.<P>A line containing the integer zero follows the last test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) and the four optimal values, displaying each with exactly three places after the decimal point. The first and second values are the parameters <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> of the line segment <SPAN CLASS="MATH"><I>y</I> = <I>a</I><SUB>1</SUB><I>x</I> + <I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> defining <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> in the range <SPAN CLASS="MATH">-1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$"><I>c</I></SPAN> <tex2html_verbatim_mark>. The third and fourth values are the parameters <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> of the line segment <SPAN CLASS="MATH"><I>y</I> = <I>b</I><SUB>1</SUB><I>x</I> + <I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> defining <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> in the range <SPAN CLASS="MATH"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4124a.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>. The distance <SPAN CLASS="MATH"><I>d</I> (<I>p</I>, <I>g</I>)</SPAN> <tex2html_verbatim_mark> between <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark> (as defined earlier) should be the minimum over all such choices for <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>b</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1.0 0.0 -0.2 
0.0 
3 
1 0 -1 0 
0.707 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: -1.000 -0.367 1.000 -0.367 
Case 2: -0.499 -0.036 1.198 -1.236
</PRE><P>
______________________________________________________
4125||||||false||||||
<P>You probably never heard of the painter Peer. He is not well known, much to his regret. Peer was one of the inventors of <SPAN CLASS="textit">monochromy</SPAN>, which means that each of his paintings has a single color, but in different shades. He also believed in the use of simple geometric forms.<P>During his triangle period, Peer drew triangles on a rectangular canvas, making sure their borders did not intersect. He would then choose a color, and fill the regions. Peer would paint the outermost region (the canvas itself) with the lightest shade of the color chosen. Then step by step, he would fill more inner regions with a darker shade of the same color. The image below is one of his ``Forms in Green" paintings.<P><DIV ALIGN="CENTER"><IMG WIDTH="744" HEIGHT="551" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4125.png ALT="\epsfbox{p4125.eps}"> <tex2html_verbatim_mark></DIV><P>In a way the process was quite mechanical. The only thing Peer considered difficult was to decide, after drawing the triangles, how many different shades he would need. You must write a program to do that calculation for him. Your program will have a collection of triangles as its input. It should calculate the number of different shades needed to paint the regions according to the given rule.<P>Your program must also detect the rare times that Peer makes a mistake and draws triangles that intersect. Two triangles are considered intersecting if the edges of one triangle have at least one point in common with the edges of the other. In that case, the collection of triangles is invalid.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases. The first line of each test case contains a single non-negative integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4125.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>, which is the number of triangles in the test case. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of the test case contain the descriptions of triangles in the format <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;<I>x</I><SUB>3</SUB>&nbsp;<I>y</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are integers <!-- MATH
 $(-100000 < x_{i}, y_{i} < 100000)$
 --><SPAN CLASS="MATH">(- 100000 &lt; <I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB> &lt; 100000)</SPAN> <tex2html_verbatim_mark> that are the coordinates of the vertices of the triangles. The three points are guaranteed not to be collinear.<P>The last test case is followed by `<TT>-1</TT>' on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) and the number of shades needed to fill the regions if the test case is valid. Print the word `<TT>ERROR</TT>' if the test case is invalid (two or more triangles in the test case intersect).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8 
8 3 8 4 7 4 
14 13 -1 9 9 0 
1 8 7 7 4 10 
5 10 11 8 13 12 
9 10 11 10 11 9 
2 7 9 1 10 6 
5 5 5 6 8 6 
9 2 9 5 6 4 
2
0 0 1 0 0 1 
2 0 1 1 1 -1 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 5 shades 
Case 2: ERROR
</PRE><P>
______________________________________________________
4126||||||false||||||
<P>You are the computer whiz for the secret organization known as the <SPAN CLASS="textit">Sneaky Underground Smug Perpetrators of Evil Crimes and Thefts</SPAN>. The target for SUSPECT's latest evil crime is their greatest foe, the <SPAN CLASS="textit">Indescribably Clever Policemen's Club</SPAN>, and everything is prepared. Everything, except for one small thing: the secret password for ICPC's main computer system.<P>The password is known to consist only of lowercase letters `a'-`z'. Furthermore, through various sneaky observations, you have been able to determine the length of the password, as well as a few (possibly overlapping) substrings of the password, though you do not know exactly where in the password they occur.<P>For instance, say that you know that the password is 10 characters long, and that you have observed the substrings ``<TT>hello</TT>" and ``<TT>world</TT>". Then the password must be either ``<TT>helloworld</TT>" or ``<TT>worldhello</TT>".<P>The question is whether this information is enough to reduce the number of possible passwords to a reasonable amount. To answer this, your task is to write a program that determines the number of possible passwords and, if there are at most 42 of them, prints them all.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case begins with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4126img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4126img1.png ALT="$ \le$">25, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4126img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4126img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, giving the length of the password and the number of known substrings respectively. This is followed by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines, each containing a known substring. Each known substring consists of between 1 and 10 lowercase letters `a'-`z'.<P>The last test case is followed by a line containing two zeroes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) followed by `<SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> <TT>suspects</TT>', where <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is the number of possible passwords for this case. If the number of passwords is at most 42, then output all possible passwords in alphabetical order, one per line.<P>The input will be such that the number of possible passwords at most <SPAN CLASS="MATH">10<SUP>15</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 2 
hello 
world 
10 0 
4 1 
icpc 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 suspects 
helloworld 
worldhello 
Case 2: 141167095653376 suspects 
Case 3: 1 suspects 
icpc
</PRE><P>
______________________________________________________
4127||||||false||||||
<P>The city of Banff hired an advertising agency to promote the city's attractions to potential visitors. One of the planned slogans stated that the mountain ranges around the city form the most beautiful skyline in Canada. But the Institute for Consumer Protection in Canada (ICPC) decided that ``the most beautiful skyline" was a subjective and unverifiable claim, and could therefore be considered misleading.<P>The advertising agency then came up with the slogan ``Banff - the longest skyline in Canada." Although not as catchy, it is hopefully verifiable, and therefore admissible under Canada's tricky advertising laws.<P>This is where you come in. What the advertising agency needs is a program that determines the length of a skyline. Consider each mountain as a two-dimensional triangle having two upper sides the same length. A skyline is the outline of one or more mountains. The skyline's length is the total length of the outline. The left illustration below shows three mountains. The right illustration shows (with bold lines) the skyline and (with dashed lines) the portion of the mountains' upper edges that are not part of the skyline. Note that parts of the horizon line that lie between mountains are not considered part of the skyline.<P><DIV ALIGN="CENTER"><IMG WIDTH="1027" HEIGHT="210" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4127.png ALT="\epsfbox{p4127.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each input file contains one or more test cases, which are descriptions of mountain ranges. Each description starts with a line containing a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, which specifies the number of mountains in the range. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines describes a mountain with three integers <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, which specify the horizontal position of the mountain's peak relative to some fixed point, the height of the peak, and the width of the base of the mountain, respectively. The base of each mountain coincides with a horizontal line. The values satisfy the conditions <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4127.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>H</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>B</I> &gt; 0</SPAN> <tex2html_verbatim_mark>.<P>The last test case is followed by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) and the length of the skyline. Print the length rounded to the nearest integer, with 0.5 rounded up. Print a blank line after the output of each test case. Use the format shown in the sample output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
100 50 100 
3 
20  30  35 
37 24   29 
60 20 13 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 141 

Case 2: 138
</PRE><P>
______________________________________________________
4128||||||false||||||

<P>
Johnny drives a steam roller, which like all steam rollers is slow and takes a relatively long time to start moving, change direction, and brake to a full stop. Johnny has just finished his day's work and is driving his steam roller home to see his wife. Your task is to find the fastest path for him and his steam roller. 

<P>
The city where Johnny lives has a regular structure (the streets form an orthogonal system). The city streets are laid out on a rectangular grid of intersections. Each intersection is connected to its neighbors (up to four of them) by a street. Each street is exactly one block long. When Johnny enters a street, he must always travel to the other end (continue to the next intersection). From that point, he can continue in any of the four possible directions to another intersection, and so on. 

<P>
By studying the road conditions of the streets, Johnny has calculated the time needed to go from one end to the other of every street in town. The time is the same for both directions. However, Johnny's calculations hold only under the ideal condition that the steam roller is already in motion when it enters a street and does not need to accelerate or brake. Whenever the steam roller changes direction at a intersection directly before or after a street, the estimated ideal time for that street must be doubled. The same holds if the roller begins moving from a full stop (for example at the beginning of Johnny's trip) or comes to a full stop (for example at the end of his trip). 

<P>
The following picture shows an example. The numbers show the ``ideal" times needed to drive through the corresponding streets. Streets with missing numbers are unusable for steam rollers. Johnny wants to go from the top-left corner to the bottom-right one. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4128.eps}$
 -->
<IMG
 WIDTH="382" HEIGHT="382" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="\epsfbox{p4128.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The path consisting of streets labeled with 9's seems to be faster at the first sight. However, due to the braking and accelerating restrictions, it takes double the estimated time for every street on the path, making the total time 108. The path along the streets labeled with 10's is faster because Johnny can drive two of the streets at the full speed, giving a total time of 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of several test cases. Each test case starts with six positive integer numbers: <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> describe the size of the city, <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> are the starting coordinates, and <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> are the coordinates of Johnny's home. The starting coordinates are different from the coordinates of Johnny's home. The numbers satisfy the following condition: <!-- MATH
 $1 \le r_{1}, r_{2} \le R \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le c_{1}, c_{2} \le C \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$"><I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4128.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>.

<P>
After the six numbers, there are <SPAN CLASS="MATH"><I>C</I> - 1</SPAN>
<tex2html_verbatim_mark> non-negative integers describing the time needed to drive on streets between intersections (1,1) and (1,2), (1,2) and (1,3), (1,3) and (1,4), and so on. Then there are <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> non-negative integers describing the time need to drive on streets between intersections (1,1) and (2,1), (1,2) and (2,2), and so on. After that, another <SPAN CLASS="MATH"><I>C</I> - 1</SPAN>
<tex2html_verbatim_mark> non-negative integers describe the next row of streets across the width of the city. The input continues in this way to describe all streets in the city. Each integer specifies the time needed to drive through the corresponding street (not higher than 10000), provided the steam roller proceeds straight through without starting, stopping, or turning at either end of the street. If any combination of one or more of these events occurs, the time is multiplied by two. Any of these integers may be zero, in which case the corresponding street cannot be used at all. 

<P>
The last test case is followed by six zeroes. 

<P>
All numbers are separated with at least one whitespace character (space, tab, or newline), but any amount of additional whitespace (including empty lines) may be present to improve readability. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, print the case number (beginning with 1) followed by the minimal time needed to go from intersection <!-- MATH
 $r_{1}, c_{1}$
 -->
<SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>c</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> to <!-- MATH
 $r_{2}, c_{2}$
 -->
<SPAN CLASS="MATH"><I>r</I><SUB>2</SUB>, <I>c</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>. If the trip cannot be accomplished (due to unusable streets), print the word `<TT>Impossible</TT>' instead.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 4 1 1 4 4 
 10  10  10 
9  0  0  10 
  0  0  0 
9  0  0  10 
  9  0  0 
0  9  0  10 
  0  9  9 

2 2 1 1 2 2 0 1 1 0 

0 0 0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 100 
Case 2: Impossible

______________________________________________________
4129||||||false||||||
<P>Ms Millerose is an old hand in the local newspaper business. Throughout her whole career, she has worked in a big hall where each reporter occupies one of the desks neatly organized into a grid. The typewriters are now gone and have been replaced by computers, but that does not bother her. The other change, a nonsmoking work environment, has forced her to satisfy her need to smoke, outside of the building regularly. However the stench of smoke that follows her on the walk back to her desk has been a source of inconvenience to her co-workers. Ms Millerose would like to learn how to plan her walk from the hall's entrance, which is located at the north-west corner of the hall, to her desk, so as to minimize the inconvenience to the reporters working at their desks at the time. Your task is to help Ms Millerose, and others in similar situations, by writing a program to plan a smoker's walk in a generic setting that may be described as follows:<P><P><BLOCKQUOTE>Given a grid of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> columns with a subset <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> of the grid points occupied, <!-- MATH
 $Q < N \ast M$
 --><SPAN CLASS="MATH"><I>Q</I> &lt; <I>N</I> <TT>*</TT> <I>M</I></SPAN> <tex2html_verbatim_mark>. Write a program to find a path from the grid point (1,1), which is located in the upper-left point in the grid, to another grid point <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> such that:</BLOCKQUOTE><P><OL><LI>the path consists of a sequence of grid points with the constraint that consecutive points share a row or share a column, </LI><LI>the path does not contain a grid point in the subset <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>, </LI><LI>the sum of distances between the points in <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> and the path is maximized. </LI></OL><P><P><BR><BLOCKQUOTE>All office descriptions have been designed such that at least one path exists between (1,1) and <SPAN CLASS="MATH">(<I>r</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark>.</BLOCKQUOTE><P><BLOCKQUOTE>The destination grid point is identified by its row number <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and its column number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. The distance between a grid point <SPAN CLASS="textbf">X</SPAN> and a path <SPAN CLASS="textbf">P</SPAN> in the grid is the minimum number of grid edges required to travel between <SPAN CLASS="textbf">X</SPAN> and <SPAN CLASS="textbf">P</SPAN>.</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a positive integer that represents the number of generic office descriptions that follow. The first line in each office description consists of two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> that represent the number of rows and columns in the grid. The integers are separated by a single space. The second line contains a positive integer <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> that represents the number of currently occupied grid points. Each of the following <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> lines contains two integers that represent the row number <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and column number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of an occupied point. The last line contains two integers that represent the row number <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and column number <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> of the smoker's destination point. The integers are separated by single spaces. <!-- MATH
 $1 < N \le 100$
 --><SPAN CLASS="MATH">1 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4129img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $1 < M \le 100$
 --><SPAN CLASS="MATH">1 &lt; <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4129img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4129img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4129img1.png ALT="$ \le$">500</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Sample Output</A>&nbsp;</FONT></H2><P>For each generic office description the output consists of a single line that contains the number starting with the value of one (1), followed by a ``<TT>:</TT> ", as shown in the ``Sample Output" below, and then followed by an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that is the measure of inconvenience a smoker's walk will cause to her office mates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
10 10 
4 
5 5 
3 5 
4 6 
2 2 
8 8 
10 10 
4 
5 5 
4 4 
3 3 
2 2 
8 8 
10 10 
4 
1 5 
1 4 
1 3 
1 2 
8 8 
10 10 
4 
5 5 
4 9 
3 3 
2 10 
8 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Office 1: 14 
Office 2: 10 
Office 3: 10 
Office 4: 19
</PRE><P>
______________________________________________________
4130||||||false||||||
<P>The <SPAN CLASS="textit">Exotica</SPAN> travel agency specializes in organizing foreign holiday trips. <SPAN CLASS="textit">Exotica</SPAN> want to provide a new service of supplying cash to its customers, before the start of their holidays, in the currency of their destination. Towards that goal, the agency introduced a new P2P (peer-to-peer) currency trading model that allows it to provide this service without taking financial risks or maintaining an inventory of exotic currencies.<P>The proposed P2P model is based on creating an Internet site for its customers to send their currency trading requests. <SPAN CLASS="textit">Exotica</SPAN> task is limited to the identification of pairing compatible requests, and then putting the two customers in touch to negotiate a mutually agreeable exchange rate. Your task is to write a program that identifies the largest number of pairings among the received requests. <SPAN CLASS="textit">Exotica</SPAN> want to discourage commercial trading operators from infiltrating the service, and require that the system restricts each customer to a single trade.<P>You are being asked to write a program that reads the currency trading requests, then calculates the largest number of possible pairings between them with the constraints that<P><OL><LI>each customer is restricted to a single trade, and </LI><LI>no customer is allowed to trade with himself or herself (as shown in the ``Sample Output" below) </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a positive integer that represents the number of trading rounds that follow. Each round description consists of ``<SPAN CLASS="MATH">1 + <I>n</I></SPAN> <tex2html_verbatim_mark>" lines. The first of the ``<SPAN CLASS="MATH">1 + <I>n</I></SPAN> <tex2html_verbatim_mark>" lines contains one integer, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, which represents the number of currency exchange requests to be processed, where <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4130img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4130img1.png ALT="$ \le$">300</SPAN> <tex2html_verbatim_mark>. Each currency exchange request, which is given in a separate line, contains the name of a customer given as a character string of length between 2 and 10, inclusive, characters without any white (space, tab <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>) characters, the names of two currencies given as strings. The first currency string represents the available currency and the second currency string represents the required currency, with each string containing no more than 5 characters without any white characters. The strings are separated by single spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each round of trade, the output is a single line that contains the maximum number of possible customer pairings given as an integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
7 
Alice USD EUR 
Bruce CNY USD 
Bruce CNY EUR 
MingLi CNY EUR 
Bruce EUR USD 
MingLi EUR CNY 
Li EUR CNY 
2 
Bruce EUR USD 
Bruce USD EUR
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
0
</PRE><P>
______________________________________________________
4131||||||false||||||
<P>After traveling widely over many decades, <SPAN CLASS="textit">Bint Fatuma</SPAN> has accumulated a fortune in many different currencies. Now she wants to settle down, to convert her fortune into the local currency and use the money to start a business. It will be beneficial to get the maximum possible amount out of this conversion. After taking little more than a casual look at the exchange rates between different currencies, <SPAN CLASS="textit">Bint Fatuma</SPAN> suspects that the most advantageous way for converting one currency into another may not always be the direct way. For instance, if she starts with a Euro, change it into dollars and then converts the dollars into pounds, she may end up with more pounds than by converting a Euro directly into pounds.<P>Given the set of currencies be <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>, <I>c</I><SUB>3</SUB>,..., <I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, available for trading with <SPAN CLASS="MATH"><I>r</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> being the exchange rate between the two currencies <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>,; that is, she can purchase <SPAN CLASS="MATH"><I>r</I><SUB>i, j</SUB></SPAN> <tex2html_verbatim_mark> units of currency <SPAN CLASS="MATH"><I>c</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> in exchange for one unit of currency <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. You have been assigned the task of helping <SPAN CLASS="textit">Bint Famuta</SPAN> by writing a program that finds the most advantageous sequence of currency exchanges for converting one currency into another for a given set of exchange rates. Better yet, if your program can find a sequence of currency exchanges with the property that <SPAN CLASS="MATH"><I>r</I><SUB>a, b</SUB> <TT>*</TT> <I>r</I><SUB>b, d</SUB> <TT>*</TT>...<TT>*</TT> <I>r</I><SUB>h, a</SUB> &gt; 1</SPAN> <tex2html_verbatim_mark>, then she can make a profit by continuously performing this sequence of currency conversions until the bank goes broke!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input for this problem starts with a positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> that represents the number of scenarios on a separate line followed by a description of the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> scenarios. <!-- MATH
 $0 < K \le 20$
 --><SPAN CLASS="MATH">0 &lt; <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4131img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>.<P>The <SPAN ID="txt65">first</SPAN> line in each scenario consists of a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that represents the number of the tradable currencies, with <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4131img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4131img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>.<P>The <SPAN ID="txt66">second</SPAN> line consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> strings that represent the names of the tradable currencies. Each string consists of 3 characters. The strings are separated by single spaces. This is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each containing the exchange rates from one currency. These lines are in the order of the currencies' appearance in the second line described above. In each line the ``to" currencies are also in that order. For instance, in the scenarios in the example input, each second line of exchange rates contains the exchange rates from <TT>USD</TT> into the <TT>FEP</TT>, then to itself (which naturally has the value of 1.0000), then to the <TT>CAD</TT> and finally to the <TT>AUS</TT>. Each of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> line consists of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> floating-point numbers that represent currency exchange rates. The value of each number has a positive value that does not exceed the value of fifty and contains four decimal places. The numbers are separated by single spaces.<P>The <SPAN ID="txt71">last</SPAN> line in each scenario contains two strings. Each string consists of 3 characters and represents a currency. The strings are separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output consists of one line for each scenario. It will be in one of the following two formats:<P><OL><LI>a number that represents the best exchange rate from the first currency given in the last line of input in this scenario to the second currency given in the last line of input in this scenario. The number must be rounded down (that is, truncated) to the nearest four decimal places, or </LI><LI>The string ``<TT>Break the bank!</TT>" </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
FEP USD CAD AUS 
1.0000 3.7209 3.9070 4.3053 
0.2667 1.0000 1.0418 1.1480 
0.2536 0.9500 1.0000 1.1019 
0.2300 0.8700 0.9050 1.0000 
FEP AUS 
4 
FEP USD CAD AUS 
1.0000 3.7209 3.9070 4.1053 
0.2667 1.0000 1.0418 1.1480 
0.2536 0.9500 1.0000 1.1019 
0.2300 0.8700 0.9050 1.0000 
FEP AUS 
4 
FEP USD CAD AUS 
1.0000 3.7209 3.9070 4.3053 
0.3667 1.0000 1.0418 1.1480 
0.2536 0.9500 1.0000 1.1019 
0.2300 0.8700 0.9050 1.0000 
FEP AUS
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4.3053 
4.3051 
Break the bank!

______________________________________________________
4132||||||false||||||
<P>You work for a company that develops bar code scanners. A client has recently approached your company to assist in the development of a scanner for a particular type of barcode that he has designed himself. It soon became clear that this particular barcode is not incredibly robust to errors, but since you are not the one playing golf with the client, there is not much you can do about it.<P>Like most linear bar codes, this code consists of a sequence of alternating black and white bars. A sample of this code, encoding the value 602206, looks like this:<P><DIV ALIGN="CENTER"><IMG WIDTH="422" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4132.jpg ALT="\epsfbox{p4132.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: Sample bar code, with a value of 602206.</DIV><P>The sequence of bars can be partitioned into three parts: a <SPAN CLASS="textit">start code</SPAN>, the <SPAN CLASS="textit">body</SPAN>, and the <SPAN CLASS="textit">stop code</SPAN>. Observe that there are actually four kinds of bars in the sample shown in Figure 1: <SPAN CLASS="textit">narrow black</SPAN> bars, <SPAN CLASS="textit">wide black</SPAN> bars, <SPAN CLASS="textit">narrow white</SPAN> bars and <SPAN CLASS="textit">wide white</SPAN> bars. The wide bars are exactly twice as wide as the narrow bars. The white bars and the black bars alternate strictly, so you can never have two consecutive narrow black bars, which might have been mistaken for a wide black bar.<P>The function of the alternation of black and white is thus merely to allow us to identify the individual bars. In fact, you can reduce the four types of bar to just two types: <SPAN CLASS="textit">narrow</SPAN> (N) and <SPAN CLASS="textit">wide</SPAN> (W). A sequence of 5 consecutive bars can be mapped to the integers 0-9 using the following table:<P><DIV ALIGN="CENTER"></DIV><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER RULES=GROUPS><COL ALIGN=LEFT><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Digit</B></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><B>Sequence</B></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NNWWN</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>WNNNW</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NWNNW</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>WWNNN</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NNWNW</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>WNWNN</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NWWNN</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NNNWW</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>WNNWN</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>NWNWN</TD></TR></TBODY></TABLE></DIV><P><P><BR>Similarly, the <SPAN CLASS="textit">start code</SPAN> is encoded as NNNN, and the <SPAN CLASS="textit">stop code</SPAN> is encoded as WNN. You can easily spot the start and stop codes in the sample barcode above, but before you can decode the <SPAN CLASS="textit">body</SPAN> of the code, you first have to de-interleave the bars belonging to the body.<P>This particular bar code system always contains an even number of digits (and thus also bars) in the body. This allows us to interleave the bars of each pair of digits to effectively use both the white and black bars to encode information. For example, the digits 6 and 0 have encodings NWWNN and NNWWN, respectively. If these two encodings are interleaved, we end up with NNWNWWNWNN. Formally, if <SPAN CLASS="MATH"><I>b</I><SUB>n, m</SUB></SPAN> <tex2html_verbatim_mark> represents the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>-th bar of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th digit of the number being encoded, the interleaving produces<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>b</I><SUB>n, 0</SUB><I>b</I><SUB>n+1, 0</SUB><I>b</I><SUB>n, 1</SUB><I>b</I><SUB>n+1, 1</SUB><I>b</I><SUB>n, 2</SUB><I>b</I><SUB>n+1, 2</SUB><SUP> ... </SUP><I>b</I><SUB>n, 4</SUB><I>b</I><SUB>n+1, 4</SUB>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>b</I><SUB>n+2, 0</SUB><I>b</I><SUB>n+3, 0</SUB><I>b</I><SUB>n+2, 1</SUB><I>b</I><SUB>n+3, 1</SUB><SUP> ... </SUP></DIV><P><tex2html_verbatim_mark></P><P>Continuing the example, if we prefix our interleaved sequence (corresponding to `60') with the start code, we get NNNN NNWNWWNWNN -- this sequence matches the first 14 bars of Figure 1. Subsequent pairs of digits, such as 22 (or 06) in the sample above, are interleaved in the same way.<P>That takes care of the specification of the bar code. The bar code reader that your company has developed scans the code using a laser. The laser scans left-to-right across the bar code at a fixed rate, sampling the the output of a photodetector at fixed intervals. The photodetector produces a `<TT>1</TT>' bit if no reflected light is detected (over a black bar), and a `<TT>0</TT>' otherwise (over a white bar). Given the sample shown in Figure 1, the bar code scanner produces the output sequence<P><P><BR><TT>10101011011001001010110010101100101001100110101101</TT>.<P><P><BR>Note that a narrow bar is represented by a single bit, and a wide bar by a pair of bits. In a perfect universe, it would be a simple matter of reversing the steps above to recover the value of the body of the code represented by this bit sequence. Unfortunately, the bar code scanner occasionally inverts (i.e., <SPAN CLASS="MATH">0 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4132.jpg ALT="$ \rightarrow$"> 1</SPAN> <tex2html_verbatim_mark>, or <SPAN CLASS="MATH">1 <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4132.jpg ALT="$ \rightarrow$"> 0</SPAN> <tex2html_verbatim_mark>) the value of at most one bit in the sequence, which sometimes results in a sequence that is decodable, but which produces the wrong value when decoded.<P>To compensate for this, the quick fix was to require that all the values encoded in the body must be palindromes, i.e., the second half of the sequence of decimal digits must be the reverse of those in the first half, just like the value 602206.<P>Your task is to take the sequence of bits produced by the scanner, and to decode them to retrieve the value represented by the bar code.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of an arbitrary number of records, one record per line, with each record representing a sequence of bits produced by the scanner.<P>The length of each input record will be limited to a maximum of 200 bits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your output will be a single integer value for each input record. This value must be the value of the body of the bar code sequence.<P>Some input sequences may contain one single bit inversion, which your program must be able to correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10101101001010110011001100101010100110101011001101 
00101101001010110011001100101010100110101011001101 
10101101101010110011001100101010100110101011001101
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
123321 
123321 
123321
</PRE><P>
______________________________________________________
4133||||||false||||||
<P><P><BR>Fibonacci numbers have been claimed to represent everything from the rate at which rabbits multiply (though this claim appears to have little support in real life, and it can be construed as being speciest), to the number of florets in the outermost row of sunflower heads. Before we discuss yet another property of the Fibonacci sequence, a formal definition is in order:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>F</I><SUB>n</SUB> = <I>F</I><SUB>n-2</SUB> + <I>F</I><SUB>n-1</SUB>,&nbsp; <IMG WIDTH="14" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$\displaystyle \forall$"><I>n</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$\displaystyle \in$"> <I>N</I>| <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$\displaystyle \ge$">2</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>F</I><SUB>0</SUB> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \equiv$"> 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>F</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \equiv$"> 1</SPAN> <tex2html_verbatim_mark>.<P>One of the lesser known properties of Fibonacci numbers is that some of them form the hypotenuse of a right-angled triangle with integer sides. For example, <SPAN CLASS="MATH"><I>F</I><SUB>7</SUB> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \equiv$"> 13</SPAN> <tex2html_verbatim_mark>, which is the hypotenuse of a right-angled triangle with sides 13, 12, and 5, since <SPAN CLASS="MATH">13<SUP>2</SUP> = 12<SUP>2</SUP> +5<SUP>2</SUP></SPAN> <tex2html_verbatim_mark>.<P>One of your friends is working on his thesis linking the incidence of certain architectural styles to the predisposition of the owner to liking certain sports, or driving an SUV of some kind. Your friend has asked you to write a program to check whether a given number is a Fibonacci hypotenuse, as described above.<P>After a bit of research, you have identified the following useful test:<P><BLOCKQUOTE>A positive integer <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> is a Fibonacci number if and only if one of <SPAN CLASS="MATH">5<I>z</I><SUP>2</SUP> + 4</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">5<I>z</I><SUP>2</SUP> - 4</SPAN> <tex2html_verbatim_mark> is a perfect square.</BLOCKQUOTE><P>A perfect square is an integer of which the square root is also an integer, such as the number 25, for example. Using this test, it would be straightforward to solve your friend's problem.<P>There is one minor complication, though. The list of numbers that you received from your friend are in the range <SPAN CLASS="MATH">[0, 2<SUP>30</SUP>]</SPAN> <tex2html_verbatim_mark>. Since your Fibonacci test involves squaring the input numbers, your intermediate results will be in the range <SPAN CLASS="MATH">[0, 2<SUP>60</SUP>]</SPAN> <tex2html_verbatim_mark>, which exceeds the range of 32-bit integer variables. It also exceeds the 52-bit precision of typical floating point numbers, so you will have to perform all your tests using 64-bit integers.<P>In the C/C++ language, you can gain access to 64-bit integers by including the directive<P><P><BR><code>#include &lt;stdint.h&gt;</code><P><P><BR>and then using the <code>uint64_t</code> type. In Java, the <TT>long</TT> type should suffice.<P>You may also have to implement your own square root routine. The following pseudocode should get you started:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=RIGHT><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2><SPAN CLASS="textbf">Algorithm 1</SPAN> Calculate the integer square root <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>r</I><SUP>2</SUP> = <I>x</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \leftarrow$"> 2<SUP>24</SUP></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \leftarrow$"> (<I>n</I> + <IMG WIDTH="17" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ {\frac{{x}}{{n}}}$">)/2</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">while</SPAN> <SPAN CLASS="MATH">| <I>r</I> - <I>n</I>| &gt; 1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textbf">do</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>4:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \leftarrow$"> <I>r</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>5:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \leftarrow$"> <I>n</I> + <IMG WIDTH="17" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ {\frac{{x}}{{n}}}$">/2</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>6:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">end while</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>7:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">while</SPAN> <SPAN CLASS="MATH"><I>r</I><SUP>2</SUP> &gt; <I>x</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textbf">do</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>8:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \leftarrow$"> <I>r</I> - 1</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">end while</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>10:</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">return</SPAN> <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY></TABLE></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your input will consist of an arbitrary number of records, one record per line, with each record consisting of a single positive integer smaller than <SPAN CLASS="MATH">2<SUP>30</SUP></SPAN> <tex2html_verbatim_mark>.<P>The end of the input is indicated by a line containing the value <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input number, your program must produce the appropriate output. There are three possible scenarios:<P><OL><LI>The input value <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is not a Fibonacci number. Your program prints<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <TT>is not a Fibonacci number</TT><P><P><BR></LI><LI>The input value <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a Fibonacci number, but it is not the hypotenuse of a right-angled triangle with integer sides. Your program prints<P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <TT>is not the hypotenuse of a Pythagorean triple</TT><P><P><BR></LI><LI>The input value <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is a Fibonacci number, and it is the hypotenuse of a right-angled triangle with integer sides <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, with <SPAN CLASS="MATH"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4133img1.png ALT="$ \ge$"><I>b</I></SPAN> <tex2html_verbatim_mark>. Your program prints<P><P><BR><SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark><code>^2 + </code><SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark><code>^2 = </code><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><code>^2</code> </LI></OL><P>Note that there may be more than one pair of values <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> that result in <SPAN CLASS="MATH"><I>n</I><SUP>2</SUP></SPAN> <tex2html_verbatim_mark> when their squares are summed. Your program must output only the pair corresponding to the largest overall value of a for each input value <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100267 
9227465 
2 
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
100267 is not a Fibonacci number 
9219273^2 + 388736^2 = 9227465^2 
2 is not the hypotenuse of a Pythagorean triple
</PRE><P>
______________________________________________________
4134||||||false||||||

<P>

<P>
<BR>
You are part of Q's team, and you are developing a spy pen that can be used to scan documents while no one is looking. Owing to physical constraints, the pen is not able to capture very large images with its camera, thus it was designed to scan narrow strips of text, which will be assembled in the correct order afterwards. 

<P>
One of your colleagues has already developed the optical character recognition (OCR) software, so your task has been simplified to the point of just figuring out how to string the fragments of text together. 

<P>
Unfortunately, the field operatives who will be using the pens are not known for their steady hands (too many Martinis, possibly), so it is possible that some of the text fragments appear twice, or that one of the fragments is completely subsumed by another fragment. Your program must be able to handle these cases correctly.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of a number of records, with each record ending with the special string ``<TT>*****</TT>''. Each record will contain a number of lines, where each line represents a single fragment. The final record of your input will be terminated by the special string ``<TT>+++++</TT>'' instead of the usual ``<TT>*****</TT>''.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output must be the reconstructed string of text, one for each record in the input. Each string of your output must appear on a new line. 

<P>
Your reconstruction must have maximal length (given the input fragments), subject to the constraint that each fragment may only be used once. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
the quick brown fox 
brown fox jumped over the 
over the lazy dog 
***** 
brown fox jumped over the 
the quick brown fox 
over the lazy dog 
the quick brown fox 
quick brown 
lazy dog 
+++++
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
the quick brown fox jumped over the lazy dog 
the quick brown fox jumped over the lazy dog
</PRE>

<P>

______________________________________________________
4135||||||false||||||
<P><P><BR>Professor Instein is a well renowned physicist. One day while doing an experiment he was looking for a <SPAN CLASS="MATH">42<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark> resistor. After frantically searching his office he realised that he does not have such a resistor. What he did discover though was lots of other resistors which had a smaller or bigger resistance.<P>So he decided to use some of these resistors to build a resistor that has a resistance as close as possible to the one he wants. Remember that if you put resistors with resistance <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>,..., <I>R</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> in series you get a resistor with resistance <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> where<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>R</I> = <I>R</I><SUB>1</SUB> +...+ <I>R</I><SUB>n</SUB>.</DIV><P><tex2html_verbatim_mark></P><P>And if you put resistors with resistance <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>,..., <I>R</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> in parallel you get a resistor with resistance <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> where<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay">1/<I>R</I> = 1/<I>R</I><SUB>1</SUB> +...+1/<I>R</I><SUB>n</SUB>.</DIV><P><tex2html_verbatim_mark></P><P><P><BR>Your task is to help Professor Instein by making use of the resistors he found in his office to make a resistor with resistance as close as possible to the value <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> he wants.<P><P><BR><SPAN CLASS="textbf">Example:</SPAN> If <SPAN CLASS="MATH"><I>G</I> = 42</SPAN> <tex2html_verbatim_mark> and he found <SPAN CLASS="MATH">6<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">6<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">6<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">40<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark> resistors he can build such a resistor by putting all the <SPAN CLASS="MATH">6<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark> resistors in parallel and then in series with the <SPAN CLASS="MATH">40<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \Omega$"></SPAN> <tex2html_verbatim_mark> resistor.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> which is the number of test cases. The first line in each of the <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> blocks is two space-separated integers <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers which is the resistance of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> resistors he discovered.<P>The constraints placed on <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> are:<P><P><BR><UL><LI><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \le$"><I>G</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4135img1.png ALT="$ \le$">7</SPAN> <tex2html_verbatim_mark> </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print out to three decimals places the smallest possible value of <SPAN CLASS="MATH">| <I>G</I> - <I>R</I>|</SPAN> <tex2html_verbatim_mark> on a single line for all resistors <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> he can make with the resistors in his office.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
7 3 
3 5 5 
9 4 
10 13 14 7 
10 2 
7 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.125 
0.159 
0.000
</PRE><P>
______________________________________________________
4136||||||false||||||

<P>

<P>
<BR>

<P>

<P>
<BR>
Like it or not, you are an engineer. In the army, of all places. At least they have managed to find you a problem worthy of your skills: design an optimal road network with minimum risk. 

<P>
Having recently invaded a new region, your forces have established a number of small bases all over the countryside. Since good logistics (i.e., moving people around in a hurry so that they can sit and wait at a different location) is an important ingredient of any army, you have been tasked with building an optimal road network to connect all these bases. In your army the optimality of a road network is not measured by its total length, but by the effort it takes to secure the network every day. Securing the network comprises two activities: sweeping the dirt road segments for landmines, and checking bridges for explosives. 

<P>
To make things simpler, you have mapped these two activities to the same scale. The cost of sweeping a dirt road is relative to its length, while the cost of checking a bridge for explosives receives a fixed cost of 4 units. 

<P>
You have at your disposal a list of all the bases you have to connect, as well as a list of the potential connections that can be made between these bases. From this list of potential connections, you have to choose the connections that will minimise the total cost of securing the network. 

<P>
A number of your bases have been established on river banks. These bases were all established in pairs, with one on each side of the river. As part of your task of building the optimal road network, you have to choose where you wish to build bridges between these suitable river bank bases. You can choose to build bridges at any (or all) of these locations, but there are some constraints: 

<P>

<P>
<BR>

<OL>
<LI>Each bridge you build will cost you 4 maintenance units to check it for explosives. 
</LI>
<LI>Your resulting network must be connected, i.e., every base must be reachable from every other base. 
</LI>
<LI>Every road segment that is directly connected to a bridge has to be swept more thoroughly, and therefore costs double the usual number of units to sweep. 
</LI>
</OL>

<P>

<P>
<BR>
Figure 1 illustrates the various types of road segment. The segment connecting base `a' to base `b' is a bridge (we chose to build one here), with a maintenance cost of 4 units. The solid lines emanating from these two bases represent road segments that are considered to be directly connected to the bridge, and hence their maintenance cost must be doubled if the bridge is actually built. If we choose to not build a bridge between `a' and `b', then the normal maintenance costs would apply to these segments.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4136.eps}$
 -->
<IMG
 WIDTH="1022" HEIGHT="332" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="\epsfbox{p4136.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your input will consist of an arbitrary number of records, with each record representing a complete problem. 

<P>
The format of each record is: 

<P>

<P>
<BR>

<!-- MATH
 $number\_of\_bases$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="30" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_of$"><IMG
 WIDTH="52" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_bases$"></SPAN>
<tex2html_verbatim_mark> 
<BR><!-- MATH
 $start\_base_{1} \ \ end\_base_{1} \ \ cost_{1}$
 -->
<SPAN CLASS="MATH"><I>start</I><IMG
 WIDTH="51" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base_{{1}}^{}$">&nbsp; <I>end</I><IMG
 WIDTH="51" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base_{{1}}^{}$">&nbsp; <I>cost</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> 
<BR><SPAN CLASS="MATH">...</SPAN>
<tex2html_verbatim_mark> 
<BR><!-- MATH
 $start\_base_{k} \ \ end\_base_{k} \ \ cost_{k}$
 -->
<SPAN CLASS="MATH"><I>start</I><IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base_{{k}}^{}$">&nbsp; <I>end</I><IMG
 WIDTH="52" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base_{{k}}^{}$">&nbsp; <I>cost</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> 
<BR><TT>-1</TT>

<P>

<P>
<BR>
The <!-- MATH
 $start\_base$
 -->
<SPAN CLASS="MATH"><I>start</I><IMG
 WIDTH="44" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base$"></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>end</I><IMG
 WIDTH="44" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base$"></SPAN>
<tex2html_verbatim_mark> fields denote the starting and ending base numbers of a given potential connection. Bases are numbered from 1 through to <!-- MATH
 $number\_of\_bases$
 -->
<SPAN CLASS="MATH"><I>number</I><IMG
 WIDTH="30" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_of$"><IMG
 WIDTH="52" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_bases$"></SPAN>
<tex2html_verbatim_mark> inclusive. 

<P>
The <SPAN CLASS="MATH"><I>cost</I></SPAN>
<tex2html_verbatim_mark> field denotes the cost of securing this connection, should you choose to make it part of your road network. All costs are integer values. A cost of -1 indicates that this connection is a potential site for a bridge. If you choose to build a bridge here, the cost of this connection will be 4 units, and the costs of all segments directly connected to the bridge must be doubled. 

<P>
A <!-- MATH
 $start\_base$
 -->
<SPAN CLASS="MATH"><I>start</I><IMG
 WIDTH="44" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4136.jpg
 ALT="$ \_base$"></SPAN>
<tex2html_verbatim_mark> value of -1 indicates the end of a given record. 

<P>
Please note that <SPAN  CLASS="textit">more records may follow</SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your output will be a single integer value for each input record, denoting the total cost of the optimal network that connects every base to every other base.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 
1 2 1 
1 4 3 
2 3 2 
3 5 -1
4 6 -1
5 8 2
6 7 2
7 8 1
-1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
19
</PRE>

<P>

______________________________________________________
4137||||||false||||||
<P><P><BR><P><P><BR>Johnny's printer has a problem. If Johnny prints mathematical expressions containing parentheses, only left parentheses are printer. Johnny receives a number of expressions (with only left parentheses) and the answer to the expression. He has to devise a way to change the expression so that the parentheses are correct and then check if the answer is correct. For example, if the expression is<P><PRE>
(1+2)*(3+4)
</PRE><P><P><BR>the following will be received:<P><PRE>
(1+2(*(3+4( 
21
</PRE><P><P><BR>Johnny's program must produce the following output:<P><PRE>
correct (1+2)*(3+4)=21
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>For each expression, input will comprise of 2 lines, the expression that Johnny's printer prints, followed on the next line by the answer.<P>All input will not be correct. Parentheses may be unbalanced, or the expression will not evaluate to the correct value, once parentheses have been fixed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>If the parentheses are unbalanced, display `<TT>unbalanced</TT>' and if the result of the expression is incorrect, `<TT>incorrect</TT>'. In these cases the correct string and answer need not be displayed. The following rules apply:<P><P><BR><UL><LI>All numbers are integers and expressions as well as sub-expressions evaluate to integers </LI><LI>Integers may consist of more than one digit </LI><LI>The input will only contain operators <TT>+</TT> and <TT>*</TT> </LI><LI>The input expressions contain no blanks </LI><LI>Parentheses may be nested </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2*(13+2*(20+3*(9*3+3((( 
466 
3*(5+2(*(6+3(( 
66 
(15+5(/(2*2( 
20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
correct 2*(13+2*(20+3*(9+3)))=466 
unbalanced 
incorrect

______________________________________________________
4138||||||false||||||
<P>Lately, there is one serious problem with Panda Land Safe Box: several safes have been robbed! The safes are using old 4-digits rolling lock combination (you only have to roll the digit, either up or down, until all four of them match the key). Each digit is designed to roll from 0 to 9. Rolling-up at 9 will make the digit become 0, and rolling-down at 0 will make the digit become 9. Since there are only 10000 possible keys, 0000 through 9999, anyone can try all the combinations until the safe is unlocked.<P><DIV ALIGN="CENTER"><IMG WIDTH="549" HEIGHT="166" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4138.jpg ALT="\epsfbox{p4138.eps}"> <tex2html_verbatim_mark></DIV><P>What's done is done. But in order to slow down future robbers' attack, Panda Security Agency (PSA) has devised a new safer lock with multiple keys. Instead of using only one key combination as the key, the lock now can have up to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> keys which has to be all unlocked before the safe can be opened. These locks works as the following:<P><UL><LI>Initially the digits are at 0000. </LI><LI>Keys can be unlocked in any order, by setting the digits in the lock to match the desired key and then pressing the UNLOCK button. </LI><LI>A magic JUMP button can turn the digits into any of the unlocked keys without doing any rolling. </LI><LI>The safe will be unlocked if and only if all the keys are unlocked in a minimum total amount of rolling, excluding JUMP (yes, this feature is the coolest one). </LI><LI>If the number of rolling is exceeded, then the digits will be reset to 0000 and all the keys will be locked again. In other word, the state of the lock will be reset the cracking is failed. </LI></UL><P><P><BR>PSA is quite confident that this new system will slow down the cracking, giving them enough time to identify and catch the robbers. In order to determine the minimum number of rolling needed, PSA wants you to write a program. Given all the keys, calculate the minimum number of rolls needed to unlock the safe.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases follow. Each case begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4138.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4138.jpg ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>, the number of keys. The next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each contains exactly four digits number (leading zero allowed) representing the keys to be unlocked.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print in a single line the minimum number of rolls needed to unlock all the keys.<P><P><P><BR><SPAN CLASS="textbf">Explanation for the 2nd case:</SPAN><P><UL><LI>Turn <TT>0000</TT> into <TT>1111</TT>, rolls: 4 </LI><LI>Turn <TT>1111</TT> into <TT>1155</TT>, rolls: 8 </LI><LI>Jump <TT>1155</TT> into <TT>1111</TT>, we can do this because <TT>1111</TT> has been unlocked before. </LI><LI>Turn <TT>1111</TT> into <TT>5511</TT> rolls: 8 </LI></UL><P>Total rolls = 4 + 8 + 8 = 20<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 1155 2211 
3 1111 1155 5511 
3 1234 5678 9090 
4 2145 0213 9113 8113
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
16 
20 
26 
17
</PRE><P>
______________________________________________________
4139||||||false||||||

<P>
In an archeology excavation in the Panda Land, the panda researchers found artifacts from the technologically advanced Bracket Panda civilization which lives around year 2008 BGP - Before Giant Panda. The artifacts are in the form of a big stone tablet with inscriptions on it (seems to be some kind of codes) and some locked treasure chests labeled as ``bonus" by the ancient pandas, each chest have numbers inscribed on them as well as several switches labeled with `<TT>(</TT>' and `<TT>)</TT>'. 

<P>

<P>
<BR>
After much research and decoding, the researchers found the following results: 

<P>

<P>
<BR>

<UL>
<LI>Codes in the tablet describe a master sequence as the source of all possible switch positions (a.k.a. combination codes for opening the chest). In other words, all valid codes are defined as subsets of particular terms in the sequence. The terms of the master sequence are defined as being the concatenation of all previous terms of the sequence enclosed in the outer parenthesis `<TT>(</TT>' and `<TT>)</TT>', as follows: <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB> =</SPAN>
<tex2html_verbatim_mark><TT>()</TT>, <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB> =</SPAN>
<tex2html_verbatim_mark><TT>(())</TT>, <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB> =</SPAN>
<tex2html_verbatim_mark><TT>(()(()))</TT>, <SPAN CLASS="MATH"><I>S</I><SUB>4</SUB> =</SPAN>
<tex2html_verbatim_mark><TT>(()(())(()(()))</TT>, and so on. 
</LI>
<LI>There are three numbers in each treasure chest. The first number <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, describes the term number in master sequence containing the code, the second number <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>, is a zero based index describing the position of starting character of the code in the <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th sequence term, and the last one <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, describes the length of the sequence (number of the switches in the chest).
</LI>
</UL>

<P>
For larger values of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, the master sequence's term can become extremely long as the term's length is in the order of <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN>
<tex2html_verbatim_mark> (as you may have figured out previously). Therefore as an elite programmer in Panda Land, you are given a task to write a program for decoding the combination codes - all that the program needs to do is printing the correct combination code required to open the treasure box, given the three numbers <SPAN CLASS="MATH">(<I>N</I>, <I>K</I>, <I>M</I>)</SPAN>
<tex2html_verbatim_mark> inscribed on the treasure chest.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of several cases. Each case contains three integer: <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 31)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4139img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4139img1.png
 ALT="$ \le$">31)</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 \le K < 2^{N})$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4139img1.png
 ALT="$ \le$"><I>K</I> &lt; 2<SUP>N</SUP>)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le M \le \min\{10000, 2^{N} - K\})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4139img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4139img1.png
 ALT="$ \le$">min{10000, 2<SUP>N</SUP> - <I>K</I>})</SPAN>
<tex2html_verbatim_mark>. The input is terminated by a line where <!-- MATH
 $N = K = M = 0$
 -->
<SPAN CLASS="MATH"><I>N</I> = <I>K</I> = <I>M</I> = 0</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each case, output the correct combination of code required to open it (which is the substring from the <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th master sequence term, with length <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> starting from the <SPAN CLASS="MATH"><I>K</I> + 1</SPAN>
<tex2html_verbatim_mark>-th character of the term.)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 0 6
3 4 4
3 5 2
3 6 1
3 7 1
0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
(()(() 
())) 
)) 
) 
)
</PRE>

<P>

______________________________________________________
4140||||||false||||||

<P>
There's a special island in Panda Land called Casino Island where all gambling activities are legalized. Here, a well known betting game called Tipu-Tipu is held every month. 

<P>
Each gambler could place only one bet. Each bet should consists of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> distinct numbers from 1 to <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is chosen by the gambler). Each month, the game owner will announce a sequence of <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> distinct numbers (the `master') and each bet will be matched to this sequence for a prize. The prize will be given if and only if the bet match perfectly to the master's prefix. In other word, a bet of <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> numbers, should match the first <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> numbers of the master. And yes, a higher <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> will gives you a higher prize but also a higher risk of not gaining anything. 

<P>

<P>
<BR>
For example: 

<P>
The prizes for <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> from 1 to <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> respectively are: 10, 20, 30, 40, 50 and 60. 

<P>
The master is: 1 2 3 4 5 6 

<P>

<P>
<BR>
<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
1-st bet : 1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>m</I> = 1</SPAN>
<tex2html_verbatim_mark>, match!, </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> prize = 10 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
2-nd bet : 1 2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>m</I> = 2</SPAN>
<tex2html_verbatim_mark>, match!, </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> prize = 20 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
3-rd bet : 1 2 3 4 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>m</I> = 4</SPAN>
<tex2html_verbatim_mark>, match!, </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> prize = 40 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
4-th bet : 1 2 4 3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>m</I> = 4</SPAN>
<tex2html_verbatim_mark>, not match, </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> prize = 0 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
5-th bet : 3 1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>m</I> = 2</SPAN>
<tex2html_verbatim_mark>, not match, </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> prize = 0 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=3>  
Total prize = 10 + 20 + 40 + 0 + 0 = 70.</TD></TR>
</TABLE>

<P>

<P>
<BR>
Of course the owner of the game wants to minimize the total of prize. So he asked you to write a program to find a master sequence which gives the minimum possible total of prize. If there are several of them, find the one which comes first lexicographically. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, the number of test cases to follow. Each case begins with two integers <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(3 \le L \le 30)$
 -->
<SPAN CLASS="MATH">(3<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$">30)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N \le 100000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$">100000)</SPAN>
<tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> numbers representing the prizes for <!-- MATH
 $m = 1, 2, \ldots, L$
 -->
<SPAN CLASS="MATH"><I>m</I> = 1, 2,..., <I>L</I></SPAN>
<tex2html_verbatim_mark> respectively. Each prize will be between 1 and 100, inclusive. The next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines describe all the <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> bets. Each bet is stated in a line, beginning with an integer <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le m \le L)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4140img1.png
 ALT="$ \le$"><I>L</I>)</SPAN>
<tex2html_verbatim_mark> -- the length of the bet, and followed by <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> distinct numbers describing the bet. Each number in the bet will be between 1 and <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark>, inclusive. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each case, print in a single line the master sequence which gives the minimum possible total prize. If there's more than one such sequence, output the one that comes first lexicographically. Each number in the sequence should be separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
4 3 
1 2 3 4 
2 1 2 
4 2 1 3 4
4 2 1 4 3
4 13 
1 2 3 4 
2 2 1 
4 1 2 3 4
4 1 2 4 3
2 1 3 
2 1 4 
2 2 3 
2 2 4 
2 3 1 
2 3 2 
2 3 4 
2 4 1 
2 4 2 
2 4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 3 2 4 
1 3 2 4
</PRE>

<P>

______________________________________________________
4141||||||false||||||
<P>Path in a graph is defined to be disjoint if there is no common edge and vertex that belongs to more than one path. Given a connected graph with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> nodes and <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> weighted edges, we are interested in finding a set of up to <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> paths in the graph which are disjoint to each other. The set of paths should be chosen so that the sum of all weight of edges of the paths is the maximum possible.<P><DIV ALIGN="CENTER"><IMG WIDTH="882" HEIGHT="401" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="\epsfbox{p4141.eps}"> <tex2html_verbatim_mark></DIV><P>The example above shows two configurations of disjoint paths in the same graph. When the limit of paths to be drawn (<SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>) is one (shown on the left), the maximum sum of all the weight of its edges is 13 (5+2+6). However, when we are allowed to draw up to 2 disjoint paths, we can draw two paths whose sum of edge weights evaluates to 15 (shown on the right).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases follow. Each case begins with two non-negative integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="$ \le$">60)</SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> following lines each will contains three integers: <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>; and <SPAN CLASS="MATH">| <I>D</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4141.jpg ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>) which means that there is an undirected edge from node <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to node <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> with weight <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print in a single line the maximum possible sum of weight of up to <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> disjoint paths in the given graph.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 1 
1 2 5
3 2 2
3 4 6
6 3 3
2 5 1
6 2 
1 2 5
3 2 2
3 4 6
6 3 3
2 5 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13 
15
</PRE><P>
______________________________________________________
4142||||||false||||||
<P>Auto-mobile Charting &amp; Manufacturing (ACM) is a company that specializes in manufacturing automobile spare parts. Being one of the leading automotive companies in the world, ACM are sure to keep up the latest information in that world. In the 100-year anniversary of the company, ACM compiled a huge list of range of prices of any automobiles ever recorded in the history. ACM then wants to develop a program that they called Automobile Expert System or AES for short.<P>The program receives a price <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> as an input, and searches through the database for a car maker in which <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> falls in their range of lowest price <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and highest price <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> of car they ever made. The program then output the car maker name. If the database contains no or more than one car maker that satisfies the query, the program produce output ``<TT>UNDETERMINED</TT>" (without quotes). Not so expert, huh? You are about to develop that program for ACM.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4142img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, the number of test cases follow. Each case begins with the size of the database <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(D < 10000)$
 --><SPAN CLASS="MATH">(<I>D</I> &lt; 10000)</SPAN> <tex2html_verbatim_mark>. The next each of <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>H</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < L < H < 1000000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>L</I> &lt; <I>H</I> &lt; 1000000)</SPAN> <tex2html_verbatim_mark> which are the name of the maker (contains no whitespace and will never exceeds 20 characters), the car's lowest price the maker ever made, and the car's highest price the maker ever made respectively. Then there is the number of query <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(Q < 1000)$
 --><SPAN CLASS="MATH">(<I>Q</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>. follows. Each of the next <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> lines contains an integer <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < P < 1000000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>P</I> &lt; 1000000)</SPAN> <tex2html_verbatim_mark>, the query price.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output for each query should be one line containing the name of the maker, or the string ``<TT>UNDETERMINED</TT>" (without quotes) if there is no maker or more than one maker that satisfies the query. You should separate output for different case by one empty line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
4 
HONDA 10000 45000 
PEUGEOT 12000 44000 
BMW 30000 75900 
CHEVROLET 7000 37000 
4 
60000 
7500 
5000 
10000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
BMW 
CHEVROLET 
UNDETERMINED 
UNDETERMINED
</PRE><P>
______________________________________________________
4143||||||false||||||
<P>You are given a simple arithmetic expression which consists of only addition and subtraction operators. For example:<P><PRE>
1 - 2 + 3 - 4 - 5
</PRE><P>You are free to put any parentheses to the expression anywhere you want and as many as you want. However it should be a valid expression after you put the parentheses. The question is how many different numbers can you make? For example, adding parentheses to the above expression can give you 6 different values:<P><PRE>
1 - 2 + 3 - 4 - 5     =  -7
1 - (2 + 3 - 4 - 5)   =   5
1 - (2 + 3) - 4 - 5   = -13
1 - 2 + 3 - (4 - 5)   =   3
1 - (2 + 3 - 4) - 5}  =  -5
1 - (2 + 3) - (4 - 5) =  -3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be many expressions in the input. Each expression is written in one line. The expression consists of only <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4143img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4143img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> non-negative number less than 100, separated by addition or subtraction operators. There will be no operator before the first number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each expression, print the number of different values that can be derived from the expression by adding any number of parentheses.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 - 2 + 3 - 4 - 5 
38 + 29 - 91 
54 - 18 + 22 + 74
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
1 
3
</PRE><P>
______________________________________________________
4144||||||false||||||
<P>Palindrome is a string that can be read in the same way in either forward or backward direction. For example: ABBA is a palindrome, MOM is also a palindrome, but MATE is not. A non-palindrome string can be transformed into a palindrome by changing some of its characters. We call a string a <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-palindrome if it can be turned into a palindrome by changing at most <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> characters. By this definition, a regular palindrome string is 0-palindrome.<P>Given a string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> that contains only lowercase characters (`<TT>a</TT>'<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>'<TT>z</TT>') and an integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, find the longest substring of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which is <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-palindrome.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases to follow. Each case consists of string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4144img1.png ALT="$ \le$">| <I>S</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4144img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> and integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4144img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4144img1.png ALT="$ \le$">| <I>S</I>|)</SPAN> <tex2html_verbatim_mark>. String <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> consists of lowercase characters (`<TT>a</TT>' <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> `<TT>z</TT>') only. <SPAN CLASS="MATH">| <I>S</I>|</SPAN> <tex2html_verbatim_mark> denotes the length of string <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print in a single line: the length of the longest substring of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which is <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-palindrome.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
abba 0 
mate 1 
zabcddcbxy 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
3 
8
</PRE><P>
______________________________________________________
4145||||||false||||||
<P>Hyper operator <SPAN CLASS="MATH"><I>a</I><SUP>(n)</SUP><I>b</I></SPAN> <tex2html_verbatim_mark> is a family of operators, where each level <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> operator is defined as iteration of the previous level <SPAN CLASS="MATH">(<I>n</I> - 1)</SPAN> <tex2html_verbatim_mark> operator. It is defined recursively as follows:<P><P><BR><SPAN CLASS="MATH"><I>a</I><SUP>(n)</SUP><I>b</I> = <IMG WIDTH="20" HEIGHT="126" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \left\{\vphantom{ \begin{array}{cc} b+1, &amp; \mbox{if } n=0 \\  a, &amp; \mbox{if } ...
...n-1)}(a^{(n)}(b-1)) &amp; \mbox{if } n \ge 1, b \ge 1, a \ge 0 \end{array} }\right.$"><IMG WIDTH="330" HEIGHT="126" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \begin{array}{cc} b+1, &amp; \mbox{if } n=0 \\  a, &amp; \mbox{if } n=1, b=0 \\  0, &amp; ...
... \\  a^{(n-1)}(a^{(n)}(b-1)) &amp; \mbox{if } n \ge 1, b \ge 1, a \ge 0 \end{array}$"></SPAN> <tex2html_verbatim_mark><P><P><BR>With some algebraic manipulations, it can be shown that the operators for <SPAN CLASS="MATH"><I>n</I> =</SPAN> <tex2html_verbatim_mark>1, 2 and 3 correspond respectively to addition, multiplication and exponentiation; as given below:<P><P><BR><DL COMPACT><DT></DT><DD><SPAN CLASS="MATH"><I>a</I><SUP>(1)</SUP><I>b</I> = <I>a</I> + 1+1+1+<SUP> ... </SUP>+1 = <I>a</I> + <I>b</I></SPAN> <tex2html_verbatim_mark></DD><DT></DT><DD><SPAN CLASS="MATH"><I>a</I><SUP>(2)</SUP><I>b</I> = <I>a</I> + <I>a</I> + <I>a</I> + <SUP>... </SUP>+ <I>a</I> = <I>a</I>&#215;<I>b</I></SPAN> <tex2html_verbatim_mark></DD><DT></DT><DD><SPAN CLASS="MATH"><I>a</I><SUP>(3)</SUP><I>b</I> = <I>a</I>&#215;<I>a</I>&#215;<I>a</I>&#215;<SUP> ... </SUP>&#215;<I>a</I> = <I>a</I><SUP>b</SUP></SPAN> <tex2html_verbatim_mark></DD></DL><P><P><BR>For values of <SPAN CLASS="MATH"><I>n</I> &gt; 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>a</I><SUP>(n)</SUP><I>b</I></SPAN> <tex2html_verbatim_mark> typically corresponds to a (very) tall exponentiation tower even for small values of <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, which makes it difficult or even impossible to calculate exactly. Nevertheless, as they are being iterations (or iterations of iterations of <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>) of exponents, their modulus can still be calculated by means of modular hyper-exponentiation (a form of iterated modular exponentiation). Your task is to compute <SPAN CLASS="MATH"><I>a</I><SUP>(n)</SUP><I>b</I> mod <I>m</I></SPAN> <tex2html_verbatim_mark>, given the values of <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> (not more than 100), the number of test cases follow. The next <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines of input describe the input for each test case on one line, in the form of <SPAN CLASS="MATH"><I>m</I>&nbsp;<I>n</I>&nbsp;<I>a</I>&nbsp;<I>b</I></SPAN> <tex2html_verbatim_mark>. You can safely assume that <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>; and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4145img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the test cases, print the test case number followed by the value of <SPAN CLASS="MATH"><I>a</I><SUP>(n)</SUP><I>b</I> mod <I>m</I></SPAN> <tex2html_verbatim_mark> on one line. The sample output shows the exact format for printing the test case number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
78 1 123 456 
257 3 16 16 
2008 4 8 3 
1000 4 13 27
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 33 
Case #2: 1 
Case #3: 816 
Case #4: 53
</PRE><P>
______________________________________________________
4146||||||false||||||
<P>ICPC (International Collegiate Programming Contest), as you might know, is a team programming contest for college students. Each team consists of exactly three students and they will work on a number of programming problems.<P>Andi, Budi and Chandra plan to participate in this year ICPC as a team. As for their team strategy, they come up with a simple one:<P><UL><LI>In the first 20 minutes of 5 hours contest, they will read through all problems. Then each of them will assign a number to each problem. This number indicates how many minute(s) it will take for him to get the problem accepted (correct solution). Then they will start to code, meaning that they only have 280 minutes to really work on the problems. You may assume that they always get accepted on time whenever they work on a problem. </LI><LI>There's only one computer for each team, so it's not possible for them to code two different problems simultaneously. </LI><LI>To avoid any brain fatigue and adrenaline rush (because they attend competitions so frequently), they decided to switch role after each problem, such that none of them will work at the computer for more than one problem consecutively. </LI><LI>They want to solve as many problems as they can. The order of problem to be solved does not matter. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, number of test cases to follow. Each case begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4146img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4146img1.png ALT="$ \le$">12)</SPAN> <tex2html_verbatim_mark> in one line, denoting the number of problems. The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers, <SPAN CLASS="MATH"><I>A</I><SUB>1..N</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4146img1.png ALT="$ \le$"><I>A</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4146img1.png ALT="$ \le$">300)</SPAN> <tex2html_verbatim_mark>, denoting the total time (in minutes) needed by Andi to solve <SPAN CLASS="MATH"><I>i</I><SUP>th</SUP></SPAN> <tex2html_verbatim_mark> problem. The third and fourth line will correspond to the total time needed by Budi and Chandra respectively and will have the same input format as the second line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print in a single line containing the maximum total number of problem that can be solved by that team.<P><P><P><BR><SPAN CLASS="textbf">Explanation for 1st sample case:</SPAN><P>Actually Andi could solve all the three problems alone, but the team has decided that none of them should work at the computer for more than one problem consecutively.<P><P><P><BR><SPAN CLASS="textbf">Explanation for 2nd sample case:</SPAN><P>The team can solve all the problems. Here is one solution:<P><UL><LI>Let Budi work on Problem-2 (100 minutes). </LI><LI>Switch to Andi and let him work on Problem-1 (50 minutes). </LI><LI>Switch to Budi again and let him work on Problem-3 (30 minutes). </LI><LI>Finally, switch to Chandra and let him work on Problem-4 which (100 minutes). </LI></UL><P>Overall, they need 100 + 50 + 30 + 100 = 280 minutes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
100 100 80 
190 120 90 
120 150 100 
4 
50 20 300 300 
200 100 30 250 
140 120 100 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
4
</PRE><P>
______________________________________________________
4147||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="281" HEIGHT="485" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4147.jpg ALT="\epsfbox{p4147.eps}"> <tex2html_verbatim_mark></DIV><P>In Jollybee Chess Championship 2008, there are a number of players who have withdrawn themselves from the championship of 64 players (in this problem, we generalized it into <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark> players). Due to the nature of the competition, which is a regular knock-out tournament, and also the short notice of the withdrawals, some matches had been walkover matches (also known as a w/o, a victory due to the absent of the opponent).<P>If both players are available then there will be a normal match, one of them will advance to the next phase. If only one player is available then there will be a walkover match, and he/she will automatically advance. If no player is available then there will be no match.<P>In the left figure, the player #3 and #4 are withdrawn from the tournament, leaving a total of one w/o match (at match #3).<P>Given the list of players who withdraw right before the tournament start, calculate how many w/o matches to happen in the whole tournament, assuming that all of the remaining players play until the end of the tournament (winning or knocked-out).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases to follow. Each case begins with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4147.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4147.jpg ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4147.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4147.jpg ALT="$ \le$">2<SUP>N</SUP>)</SPAN> <tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers, denoting the players who have withdrawn themselves right before the tournament. The players are numbered from 1 to <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark>, ordered by their position in the tournament draw.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print in a single line containing the number of walkover matches.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 2 
3 4 
3 5 
1 2 3 4 5 
2 1
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
1

______________________________________________________
4148||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Rank and File</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Rank and File</h2><style type="text/css">table.example{margin-bottom:2em;}.example td{text-align:center;padding:0.25em;}.example li{margin-top:1em}</style><p><b>Introduction:</b><p><i>Note: The chess piece images below were created by Colin M.L. Burnett and are used under the auspices of the BSD license, the text of which follows the problem statement.</i><p>Programs and algorithms for playing the game of chess have been around as long as computers themselves, with the first chess playing program being developed in the 50's by Alan Turing. Computer chess has come a long way since then, and in 1997 IBM's Deep Blue defeated chess grandmaster Garry Kasparov. One thing all these chess programs have in common though is a need to determine when the winning move, or <i>checkmate</i>, is reached. Your goal for this problem is to implement an algorithm such that, given the current layout of the chessboard, it will detect if a checkmate has occurred during that turn.<p>Chess is played on a board divided into a 8x8 grid of 64 squares. On a real chessboard, the 64 squares have alternating light and dark colors. For this problem the individual square colors are irrelevant and the entire board is simply treated as a uniform 8x8 grid.<p>The game is played by two opposing sides, white and black, with each side controlling up to six kinds of pieces: a <i>king</i>, <i>queen</i>, <i>rook</i>, <i>bishop</i>, <i>knight</i>, and one or more <i>pawn</i>s. For simplicity's sake, however, this problem will only consider the first five and not make any use of the pawn chess piece. The two players take turns moving one piece at a time on every turn. It is up to each player to decide which piece they wish to move on their turn, but it is not possible for a player to "skip" or "pass"; each player <b>must</b> move one of their pieces in some fashion.<p>Each kind of chess piece moves in a distinct way as explained in the list below, and <i>Figure 1</i> gives an example using an X to show each square that a chess piece can move to.<ul class="example"><li><i>Rook</i>: The rook moves in a straight line by any number of squares in any of the four cardinal (horizontal and vertical) directions. </li><li><i>Bishop</i>: The bishop moves in a line by any number of squares in any of the four diagonal directions. </li><li><i>Queen</i>: The queen can move in a line by any number of squares in any of the eight cardinal and diagonal directions. As such, it is considered to be the most powerful piece in the game. </li><li><i>Knight</i>: The knight always moves by "jumping" two squares in one cardinal direction and one square in a direction perpendicular to the first. There are 8 possible squares that a knight can move to from a given position, and these are shown in the figure below. </li><li><i>King</i>: The king can move in any of the eight cardinal and diagonal directions but by one square only. Put another way, the king can only move into the eight immediately adjacent squares. As such, this makes the king one of the weakest pieces on the board. </li></ul><table class="example" border="0" align="center"><tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Rook</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Bishop</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Queen</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Knight</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>King</i></td></tr><caption><b>Figure 1:</b> Valid moves for each kind of chess piece</caption></table>On every turn, a chess piece may be moved either into a vacant square or into a square already occupied by an opposing piece. In the latter case, the opposing chess piece is said to be <i>captured</i> and is permanently removed from the game. However, a chess piece <b>may not</b> move into a square already occupied by another friendly piece, because each square can be occupied by at most one piece at a time. Most chess pieces move by "sliding" across vacant squares on the board. In other words, any other chess piece (be it friendly or foe) in the path of the moving piece will block any further movement of that piece. The only exception to this rule is the knight which "jumps" directly to its final destination square, and therefore its movement cannot be blocked by any surrounding pieces between it and the destination square. See <i>Figure 2</i> for an example: image (a) shows a white rook's movement blocked by two other pieces, and image (b) shows the same white rook capturing a black bishop (the rook's previous position before the capture is shown as a white outline).<p><table class="example" border="0" align="center"><tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>(a)</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>(b)</i></td></tr><caption><b>Figure 2:</b> (a) rook's movement blocked by other pieces; (b) rook capturing the black bishop</caption></table>Although the king may be one of the weakest pieces on the board, it is also the most important. A king cannot be captured directly by another piece but it can be threatened. When the king is threatened, or <i>checked</i>, it means that on the <b>next</b> turn, the opposing side would be able to capture the king. Putting a king in check forces the checked side to defend their king by moving the king out of harm's way, blocking the threat with another piece, or capturing the threatening piece. If the checked player has no valid move that they can make to protect the king, then the king is in fact <i>checkmated</i>, and that player has lost the game. Also note that a player may never put their own king in check. <i>Figure 3</i> shows the difference between a check and checkmate. In image (a), the imminent capture of the white king can still be avoided by either moving the king out of the way or by capturing the black queen. Image (b) shows an example of checkmate, where no valid moves exist for the white side that would eliminate the threat to the king.<p><table class="example" border="0" align="center"><tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Check</i></td><td><img src="http://livearchive.onlinejudge.org/external/41/p4148a.png> </object><br><i>Checkmate</i></td></tr><caption><b>Figure 3:</b> Example of white king in (a) check and (b) checkmate</caption></table>The rules laid out above are the only ones that should be considered for the purposes of this problem. Any other special rules or moves present in a real game of chess, such as <i>castling</i>, are <b>not</b> considered valid in the context of this problem. For the chessboard layout in each data set, you may assume it will contain exactly one white king and exactly one black king, although either side may have any number of rooks, bishops, queens, and knights.<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>D</i> (1 &le; <i>D</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single lower case "<tt>w</tt>" or upper case "<tt>B</tt>" indicating which side is to be analyzed for a check or checkmate (and which side is about to move on this turn), with "<tt>w</tt>" specifying the white side and "<tt>B</tt>" specifying black. </li><li>A series of eight lines, with each line containing eight characters. These lines specify the state of the chessboard to be analyzed in this data set. The characters used on these eight lines are:<ul><li>A "<tt>.</tt>" (period) to indicate an empty square </li><li>The lower case letters "<tt>r</tt>", "<tt>b</tt>", "<tt>q</tt>", "<tt>n</tt>", and "<tt>k</tt>", to respectively indicate the <b>white</b> side's rook, bishop, queen, knight, and king pieces </li><li>The capital letters "<tt>R</tt>", "<tt>B</tt>", "<tt>Q</tt>", "<tt>N</tt>", and "<tt>K</tt>", to indicate the same respective pieces but for the <b>black</b> side </li></ul></li></ul><p><b>Output:</b><p>For each data set in the input, print a single line. Begin the line with either "<tt>WHITE IS </tt>" or "<tt>BLACK IS </tt>" depending on which side was analyzed in the data set. Finally, complete the line with "<tt>CHECKED</tt>" or "<tt>CHECKMATED</tt>" if either is detected, or complete the line with "<tt>SAFE</tt>" if neither condition holds. If both check and checkmate are detected, print "<tt>CHECKMATED</tt>".<p><b>Sample Input:</b><pre>
3
w
........
........
........
.Qk.K...
........
........
........
........
B
........
........
........
.qK.k...
........
........
........
.r......
w
........
..k.....
........
.Q..K...
........
........
........
........
</pre><p><b>Sample Output:</b><pre>
WHITE IS CHECKED
BLACK IS CHECKMATED
WHITE IS SAFE
</pre><p><b>The BSD License for the Chess Piece Images</b><p>Copyright &copy; belongs to the uploader, Colin M.L. Burnett, all rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<ul><li>Redistributions of source code must retain the above copyright notice, with the name of the uploader, and this list of conditions;</li> <li>Redistributions in binary form must reproduce the above copyright notice, with the name of the uploader, and this list of conditions in the documentation and/or other materials provided with the distribution;</li> <li>Neither the name of the uploader nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li><p><span align="center"><b>REVISED: 2008.10.16.2043</b></span></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4149||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>The Extent of the Problem</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">The Extent of the Problem</h2><p><b>Introduction:</b><p>Files on modern filesystems are not always stored contiguously. Instead, they are broken up into chunks (called <i>extents</i>), each of which may be located almost anywhere on the underlying disk. Each extent takes up one or more contiguous <i>blocks</i> on the disk, which represent the underlying physical disk structure. Files may not share blocks or extents between themselves, although there may be (and hopefully are) blocks not currently in use on the filesystem.<p>Despite all of the advances in modern disk technology, this disparate layout still makes for slower access than when all of a file's blocks are in order and adjacent (and therefore occupying a single extent). Because of this, many modern filesystems support <i>defragmentation</i>: the reorganizing of files on the disk so that the blocks of any given file are in order and adjacent.<p>With RAD's Awesome Dynamic Filesystem (commonly referred to as <b>RADfs</b>), a file can occupy any number of extents, each of which consists of at least two adjacent blocks. The first block in an extent holds metadata about that extent; the rest contain some portion of the file. Consider this simple representation of the extents and blocks occupied by a file:<p><pre>RADfs.doc: 57-58,102-114,23-47</pre><p>The file <tt>RADfs.doc</tt> currently occupies 40 blocks on the disk, even though the file itself is only 37 blocks in size. The smallest on-disk size that it could have is 38 blocks (37 plus a single metadata block), and that can only happen if the entire file is in a single extent. One potential single-extent representation of the file is:<p><pre>RADfs.doc: 115-152</pre><p>Here, the single metadata block (115) is followed by the 37 data blocks in a single extent.<p>The developers of RADfs have also developed the RADical Defragmentation Daemon, or RADDD. RADDD works with a simple two-step algorithm; despite its simplicity, it still manages to significantly reduce the number of extents consumed by files, given enough free space on the disk.<p>A RADDD pass works as follows:<ul><li>First Step ("to the back"):<ul><li>For every file on the filesystem that hasn't been run through this step on this pass, sorted in <b>ascending</b> order by the <b>first</b> block it occupies on the disk:<ul><li>Find the series of adjacent unused blocks nearest the <b>end</b> of the disk that can hold the file plus a single metadata block</li> <li>If such a series exists:<ul><li>Move the file to those blocks</li> <li>Mark the original blocks as unused</li></ul></li><li>Else do nothing to the file</li></ul></li></ul></li><li>Second Step ("to the front"):<ul><li>For every file on the filesystem that hasn't been run through this step on this pass, sorted in <b>descending</b> order by the <b>last</b> block it occupies on the disk:<ul><li>Find the series of adjacent unused blocks nearest the <b>beginning</b> of the disk that can hold the file plus a single metadata block</li> <li>If such a series exists:<ul><li>Move the file to those blocks</li> <li>Mark the original blocks as unused</li></ul></li><li>Else do nothing to the file</li></ul></li></ul></li></ul>After one pass on a filesystem with some free space, some files have hopefully been reduced to a single extent. Multiple passes can often defragment the filesystem even further.<p>Of course, it's not that simple; some files simply cannot be moved, perhaps due to being in use at the time of the run. These are marked on the filesystem as <i>immobile</i>, and are ignored by RADDD.<p>Given the size of a disk, the current layout of files on the disk, and a number of passes of RADDD to run, can you determine the final filesystem layout?<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single integer <i>S</i> (2 &le; <i>S</i> &le; 100000) indicating the number of blocks on the particular filesystem; <li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 100) indicating the number of files on the filesystem; <li><i>C</i> lines representing the files on the filesystem, in the format "<tt><i>NAME</i> <i>TYPE</I> <i>E</i> <i>A</i>-<i>B</i>[ <i>X</i>-<i>Y</i>[ ...]]</tt>", where:<ul><li><i>NAME</i> is a unique (to the dataset) identifier, consisting of at least 1 and no more than 16 lowercase letters;</li> <li><i>TYPE</i> is "<tt>I</tt>" if the file is immobile, or "<tt>M</tt>" otherwise;</li> <li><i>E</i> is an integer (1 &le; <i>E</i> &le; 20) representing the number of extents the file occupies;</li> <li><i>A</i> and <i>B</i> (1 &le; <i>A</i>, <i>B</i> &le; <i>S</i>) are, respectively, the first and last blocks of the first extent the file occupies;</li> <li><i>X</i> and <i>Y</i> (1 &le; <i>X</i>, <i>Y</i> &le; <i>S</i>) are, if present, the first and last blocks of the second extent the file occupies;</li> <li>and so on;</li></ul></li><li>A line containing a single integer <i>P</i> (1 &le; <i>P</i> &le; 100) indicating the number of passes of RADDD that should be run.</ul><p><b>Output:</b><p>For each data set in the output, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. On the next <i>C</i> lines, output the locations of the files on the disk after the RADDD passes in ascending order by the first block occupied on the disk. The format should be identical to the representation in the input; if a file occupies multiple extents, the output should be sorted in ascending order by the first block in each extent.<p><b>Sample Input:</b><pre>
2
152
1
radfsdoc M 3 57-58 102-114 23-47
1
100
4
swapfile I 3 5-10 80-95 25-50
smallfile M 2 1-4 11-14
bigfile M 2 15-24 51-60
tinyfile M 1 61-64
2
</pre><p><b>Sample Output:</b><pre>
DATA SET #1
radfsdoc M 1 1-38
DATA SET #2
tinyfile M 1 1-4
swapfile I 3 5-10 25-50 80-95
bigfile M 2 15-24 51-60
smallfile M 1 61-67
</pre><p><span align="center"><b>REVISED: 2008.10.16.2017</b></span></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4150||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Filtration</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Filtration</h2><p><b>Introduction:</b><p>Digital Signal Processing is used for such clever effects as the "echo" often heard in music, or that annoying modulation done with the voices of certain singers. The field makes the use of <i>Finite Impulse Response</i> (FIR) filters to make these effects happen.<p><p>Consider an input stream of samples, represented as a series of integers between 0 and 255 inclusive. (This is, you should not be surprised to discover, the range of an <i>8-bit</i> sample.) These samples come in a very specific sequence, one after the other, as the digital representation of a given waveform. A FIR mixer will take multiple streams and combine them into one, a FIR echo filter will take one input and provide a single output, and so on.<p>A FIR filter can be represented as an equation, with the input signals on one side and the output on the other. For example:<pre>
   Y = X[0] + X[-5]
</pre>represents an echo filter (more specifically, a post-echo filter); a given sample of Y is equal to the value of X at the same location in the input stream, plus the value of the sample that occurred five samples prior in X. Values that are not available (such as X[-5] for the first four samples of X) are set to 0.<p>In this problem, all FIR equations obey the following Backus-Naur Form (BNF) grammar:<p><table border="0" align="center"><tr><td><b><i>EQUATION</i></b></td><td><b><tt>::=</tt></b>&nbsp;</td><td><b><i>STREAM</b></i> &nbsp;__ &nbsp;"<tt>=</tt>"&nbsp; __&nbsp; <b><i>EXPR</b></i></td></tr><tr><td><b><i>STREAM</i></b></td><td><b><tt>::=</tt></b></td><td>A single upper-case letter representing a sample stream, such as  <tt>A</tt> or <tt>X</tt></td></tr><tr><td><b><i>EXPR</i></b></td><td><b><tt>::=</tt></b>&nbsp;</td><td><b><i>VALUE</i></b> &nbsp;|&nbsp; <b><i>SAMPLE</i></b> &nbsp;|&nbsp; <b><i>EXPR</i></b> &nbsp;__&nbsp; <b><i>OPER</i></b> &nbsp;__&nbsp; <b><i>EXPR</i></b> &nbsp;|&nbsp; "<tt>(</tt>" &nbsp;__&nbsp; <b><i>EXPR</i></b> &nbsp;__&nbsp; "<tt>)</tt>"</td></tr><tr><td><b><i>VALUE</i></b></td><td><b><tt>::=</tt></b></td><td>A floating-point number, such as <tt>0.25</tt>, <tt>5</tt>, or <tt>-1.5</tt></td></tr><tr><td><b><i>SAMPLE</i></b></td><td><b><tt>::=</tt></b>&nbsp;</td><td><b><i>STREAM</i></b> &nbsp;"<tt>[</tt>"&nbsp; </tt><b><i>OFFSET</i></b> &nbsp;"<tt>]</tt>"</td></tr><tr><td><b><i>OFFSET</i></b></td><td><b><tt>::=</tt></b>&nbsp;</td><td>An integer representing the sample offset into the stream, such as <tt>0</tt>, <tt>1</tt>, or <tt>-5</tt>, between <tt>-100</tt> and <tt>100</tt> inclusive.</td><tr><td><b><i>OPER</i></b></td><td><b><tt>::=</tt></b>&nbsp;</td><td>"<tt>*</tt>"&nbsp; | &nbsp;"<tt>+</tt>"&nbsp; | &nbsp;"<tt>-</tt>"</td></tr></table><p>Operations are handled in the standard order of precedence (parentheses first, multiplication before addition and subtraction, otherwise left-to-right), and the resulting value is rounded <i>down</i> to the nearest integer between 0 and 255 only <i>after</i> all calculations (if any) are done by the FIR filter. The __ symbol in the above grammar specifies a series of one or more spaces. Note that whitespace in an equation is only allowed where explicitly specified by the above grammar.<p>For example, a simple low-pass filter could be expressed as:<pre>
   Z = 0.5 * Y[0] + 0.25 * Y[-1] + 0.25 * Y[1]
</pre>Each output value of Z is based on the matching value in Y, modified by the nearest values of Y. A simple mixer can be represented as follows:<pre>
   D = C[0] + B[0]
</pre>although the clipping problems that such a filter would have should be apparent.<p>Obviously, for complicated effects, a number of filters can be connected together. In this problem, this is represented by <i><b>STREAM</b></i>; any relevant stream will either be an input value (the source audio, for example) or the output of a single FIR filter. However, a stream may be <i>used</i> as an input by more than one other filter. This constitutes a <i>filter network</i>.<p>Given a series of definitions of FIR filters and starting inputs, your task is to provide all of the outputs of the various filters. No FIR filter will have more than 10 operators or more than ten pairs of parentheses, nor will its representation use more than 80 characters. There will be at least one input stream and at least one output stream per data set, and all streams referenced in a filter equation will be defined in the same data set. All input streams and output streams will have the same number of samples, and there will be no "feedback loops" described by a filter network; that is, no filter will have input dependent on its output.<p>Although they sure sound cool when Pete Townshend uses them.<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>D</i> (1 &le; <i>D</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single integer <i>N</i> (2 &le; <i>N</i> &le; 26) indicating the number of streams in the data set;</li> <li>A line containing a single integer <i>S</i> (1 &le; <i>S</i> &le; 100) indicating the number of samples in every stream of the data set; <li>A series of <i>N</i> lines, each representing one of the streams. There will be no duplicate stream names in a data set, and each stream is one of either:<ul><li>an input stream, in which case its representation is of the form "<tt><i>STREAM</i> % <i>sam1 sam2 sam3 </tt>&hellip;<tt> samS</i></tt>", where <tt><i>STREAM</i></tt> is a single capital letter, and <i>sam1</i> is the first sample of the input stream, <i>sam2</i> is the second sample, and so on. The individual samples and the <tt>%</tt> operator are all separated with whitespace.</li> <li>a FIR filter, in which case its representation is of the form "<tt><i>STREAM</i> = <i>EXPR</i></tt>", as described above.</li></ul></li></ul><p><b>Output:</b><p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. Then print the output sample streams for every FIR filter in the data set, in alphabetical order, in the format "<tt><i>STREAM</i> % <i>sam1 sam2 sam3 </tt>&hellip;<tt> samS</i></tt>".<p><b>Sample Input:</b><pre>
3
3
5
A % 10 20 30 20 10
B = A[0] + A[-1]
C = 0.5 * ( A[0] + B[0] )
3
5
Z = 0.5 * Y[0] + 0.5 * B[0]
Y % 50 10 50 10 50
B % 10 50 10 50 15
3
5
A % 1 2 3 4 5
B = A[-2]
C = B[2]
</pre><p><b>Sample Output:</b><pre>
DATA SET #1
B % 10 30 50 50 30
C % 10 25 40 35 20
DATA SET #2
Z % 30 30 30 30 32
DATA SET #3
B % 0 0 1 2 3
C % 1 2 3 0 0
</pre><p></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4151||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Like Water for Clay</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Like Water for Clay</h2><p><b>Introduction:</b><p>People do strange things. Recently, some folks have started building structures out of Stick-Tite blocks ("They stick ... tight!"), pressing them between two sheets of perspex, and dunking them in water.<p>Yeah, I don't know either.<p>Stick-Tite blocks are one inch cubes of some sort of material that is permeable to air but not water. They stick quite nicely to each other when properly aligned, such that it's delightfully easy to make any sort of nice pixel-esque structure. They also stick well (but not <i>too</i> well) to perspex (also known as Plexiglas(tm)).<p>When dunked underwater and shaken about a bit, water fills the open space in a Stick-Tite construction such that any open spaces are filled unless they are completely enclosed inside the construction. While Stick-Tite blocks are water-impermeable, water can fill from any open space to any other open space that is orthogonally <i>or diagonally</i> adjacent.<table border="1" align="center"><tr><td><pre>
X..
.X.
..X
</pre></td><td>Water can flow between the top-right and bottom-left areas</td></tr><tr><td><pre>
X..
XXX
...
</pre></td><td>Water cannot flow between the top-right and bottom-left areas</td></tr></table>Consider the above two examples of such a construction. At the top, water can come through the blocks (represented by <tt>X</tt>es) to fill the top chamber. At the bottom, water would not be able to flow between the two areas unless they were connected elsewhere.<p>After being dunked and wiggled, the Stick-Tite construction is pulled straight out of the water. Water drains out from any holes in the bottom or sides of the construction, coming out of all internal chambers and passages until the water level is even with the bottom of holes in the sides of chambers. In addition, due to static water pressure, the height of water in any pool still connected after this draining will never be higher than the bottom of the lowest hole that the pool's water can flow from.<pre>
XXXXXXXXXXX
XX......XXX
XXX.XXXXX.X
X...X.XXXXX
X.X.X...X.X
X.X~X~X.X.X
X.X~~~X...X
X.XXXXXXX.X
</pre>In the above example, the tildes represent the maximum amount of water that the center pool can hold; while the left side has a hole one unit higher than the right side, the water level for the pool as a whole cannot be higher than the one on the right side. The act of draining pools may make a pool of water into smaller, separate pools; these would then drain independently.<pre>
XXXXXXXXXXX
X......X..X
X.XXXX~X..X
X.X~~~~X...
X~XXXXXX~~X
X~~~~~~X~~X
X~~~~~~~~~X
XXXXXXXXXXX
</pre><p>A particular Stick-Tite construction will hold different amounts of water depending on which direction it's dunked into the bucket from. Given the blocks comprising a particular construction, you will determine how much water it can hold when dunked with each of its four edges facing straight up. (The construction is dried out completely between dunkings.)<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing two integers <i>H</i> and <i>W</i> (1 &le; <i>H</i>, <i>W</i> &le; 40) representing the height and width of the following Stick-Tite construction; <li><i>H</i> lines representing the blocks, each with <i>W</i> characters, with:<ul><li><tt>X</tt> representing Stick-Tite blocks, and</li> <li><tt>.</tt> representing open spaces.</tt></ul></li></ul><p><b>Output:</b><p>For each data set, print a single line of four space-separated integers, sorted from highest to lowest, representing the number of cubic inches of water the Stick-Tite structure can hold after being submerged and drained four times, each time with a different one of the four edges facing straight up.<p><b>Sample Input:</b><pre>
2
8 11
XXXXXXXXXXX
XX......XXX
XXX.XXXXX.X
X...X.XXXXX
X.X.X...X.X
X.X.X.X.X.X
X.X...X...X
X.XXXXXXX.X
8 11
XXXXXXXXXXX
X......X..X
X.XXXX.X..X
X.X....X...
X.XXXXXX..X
X......X..X
X.........X
XXXXXXXXXXX
</pre><p><b>Sample Output:</b><pre>
31 5 4 1
40 25 24 10
</pre><p></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4152||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Wandering Aimlessly</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Wandering Aimlessly</h2><p><b>Introduction:</b><p>Most console role-playing games, such as the famous <i>Final Fantasy</i> and <i>Dragon Quest</i> games, have towns filled with inconsequential characters that wander around aimlessly, waiting for the player to speak to them.<p>You've been tasked with the development of the town character (or <i>NPC</i>) movement handling for a new game.<p>Any given NPC has a movement script with a few simple commands:<table border="1" align="center"><tr><td>Command</td><td>Behavior</td></tr><tr><td><tt>NORTH x</tt></td><td>Move NORTH (up) <tt>x</tt> steps, one per turn</td></tr><tr><td><tt>SOUTH x</tt></td><td>Move south (down) <tt>x</tt> steps, one per turn</td></tr><tr><td><tt>EAST x</tt></td><td>Move east (right) <tt>x</tt> steps, one per turn</td></tr><tr><td><tt>WEST x</tt></td><td>Move west (left) <tt>x</tt> steps, one per turn</td></tr><tr><td><tt>PAUSE x</tt></td><td>Stay in the current location <tt>x</tt> turns</td></tr></table>Note that the individuals who write the NPC movement scripts aren't the most careful coders in the world. Sometimes the scripts have the NPCs attempting to walk through walls and other barriers or even off the edge of the map. When this occurs, all of the steps of movement that would put the NPC in such an invalid location are converted into <tt>PAUSE</tt>s. For example, given this small snippet of a town:<pre>
...#
.1.#
...#
</pre>if the NPC represented by the 1 had <tt>EAST 5</tt> as their next command, that would be converted on the fly to <tt>EAST 1</tt> followed by <TT>PAUSE 4</tt>. This processing must be done before determining whether a script is <i>cyclic</i> or <i>reversible</i>.<p>A script is <i>cyclic</i> if, at the end of the script, the NPC back in their starting position. This sort of script is simply looped indefinitely. The other type of script is <i>reversible</i>; if, at the end of the script, the NPC is <i>not</i> back in their starting position, they then run a reversed copy of the script, with directions switched (<tt>WEST</tt> becomes <tt>EAST</tt>, <tt>EAST</tt> becomes <tt>WEST</tt>, <tt>NORTH</tt> becomes <tt>SOUTH</tt>, and <tt>SOUTH</tt> becomes <tt>NORTH</tt>) and <tt>PAUSE</tt>s intact. The end result is the character returning to their starting location.<table border="1" align="center"><tr><td>Original script segment</td><td>Reversed script segment</td></tr><tr><td><tt>SOUTH 1<br />PAUSE 5<br />EAST 1 </tt></td><td><tt>WEST 1<br />PAUSE 5<br />NORTH 1 </tt></td></tr></table><p>For the sake of this problem, you can assume that no NPCs will ever attempt to occupy the same location on the map at the same time, although one may enter a location on the same turn as a different NPC leaves it, which is valid behavior.<p>The simulation starts at turn 0; your task is to show, given a map and set of NPCs with their scripts, what the simulation looks like after a large number of turns have passed.<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 35) indicating the number of NPCs in this town;</li> <li>A line containing two integers <i>H</i> and <i>W</i> (1 &le; <i>H</i>, <i>W</i> &le; 40) representing the height and width of the town; <li><i>H</i> lines representing the town, each with <i>W</i> characters, with:<ul><li>Hash marks (<tt>#</tt>) representing walls and other impassible obstructions;</li> <li>Periods (<tt>.</tt>) representing open spaces; and</li> <li>digits and capital letters representing the starting location of the NPCs, with <tt>1</tt> representing the first one, <tt>2</tt> representing the second (if present), and so on through the digits, then <tt>A</tt> representing the tenth NPC (if present), <tt>B</tt> representing the eleventh (if present), and so on. The space under an NPC's starting location is open.</li></ul></li><li><i>C</i> sets of lines describing the NPC scripts; each set consists of:<ul><li>A line containing a single character and an integer <i>L</i> (1 &lt; <i>L</i> &lt; 20), separated by spaces, where the character is one of the digits or letters used on the map to represent a particular NPC, and <i>L</i> is the length of that NPC's script; and</li> <li><i>L</i> lines representing the NPC's script, in the format given above, with no value lower than 1 or higher than 40.</ul></li><li>A line containing a single integer <i>T</i> (1 &le; <i>T</i> &le; 1000000) indicating a number of turns to calculate</li></ul><p><b>Output:</b><p>For each data set in the output, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. the next <i>H</i> lines, output a representation of the town map, using the same symbols as the input format described above, with the NPCs in the correct locations after the given number of turns have passed.<p><b>Sample Input:</b><pre>
1
2
5 5
...#.
.1.#.
...#.
...2.
.....
1 4
EAST 5
SOUTH 1
PAUSE 1
WEST 1
2 4
EAST 1
SOUTH 1
WEST 1
NORTH 1
22
</pre><p><b>Sample Output:</b><pre>
DATA SET #1
...#.
...#.
..1#.
.....
....2
</pre><p><span align="center"><b>REVISED: 2008.10.16.2148</b></span></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4153||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Cables ... in Spaaace!</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Cables ... in Spaaace!</h2><p><b>Introduction:</b><p>Many science fiction stories take place on distant planets in galaxies far, far, away. Some of the best writers will spend time researching the relevant scientific fields of today to make their futuristic technology seem believable to a modern day audience. As a budding young writer participating in the National Novel Writing Month (NaNoWriMo) in November, you'd like to do some technological research as well to make sure your own SF universe is up to par.<p>In your own SF novel, humanity has spread out throughout the galaxy and has come to colonize many a planet. Aside from the obvious requirement of interstellar space flight in your book, you'd like to keep all other technologies, computers especially, similar to what is available in today's world. That means the computer networks on many of the colonized planets will still be designed by running copper or fiber optic cable between the computers.<p>Modern computer networks use packet switching which means that you do <b>not</b> have to physically run a separate cable between every pair of computers. It's enough that the computer network remains <i>strongly connected</i>. In other words, it's enough that for every pair of computers on the network, some path exists such that packets traveling to and fro between the computers can reach their destinations by being forwarded through any number of computers in-between.<p>This property of packet switching allows us to minimize how much cable has to be laid down to allow every computer on the network to communicate with every other. As a budding SF writer, you'd like to know the absolute minimum total length of cable that would be required to create a computer network between all the cities on your newly colonized planet, assuming there are no redundant or aggregate links in the network. When performing your calculations, you may assume that the planet is a perfect sphere, all the cables are run along the surface of the planet, and that no surface obstructions (like rivers or mountain ranges) exist to impede the run of cable.<p>The input to this problem will specify the diameter of the planet in question, and it will include a list of city coordinates given in degrees of <i>latitude</i> and <i>longitude</i>. For those who are not as cartographically savvy as they'd like, latitude is an angular measurement ranging from &minus;90&deg; at the South pole to +90&deg; at the North pole and with 0&deg; located at a planet's <i>equator</i>. Longitude is an angular measurement ranging between &minus;180&deg; and +180&deg; with 0&deg; specifying the <i>prime meridian</i>. By convention negative longitude represents locations to the West of the prime meridian, and positive longitude presents locations to the East.<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single decimal number <i>D</i> (1 &le; <i>D</i> &le; 1,000,000) specifying the diameter (in kilometers) of the planet in question. </li><li>A line containing a single decimal number <i>L</i> (1 &le; <i>L</i> &le; 1,000,000) giving the total length of cable (in kilometers) available for building a network on the newly colonized planet. </li><li>A line containing a single integer <i>C</i> (1 &le; <i>C</i> &le; 100) indicating the number of cities this planet contains. </li><li>A series of <i>C</i> lines, each of which contains two decimal numbers of the form "<i>X</i> <i>Y</i>" respectively specifying the latitude and longitude (both in degrees) of one city with (&minus;90 &le; <i>X</i> &le; 90) and (&minus;180 &le; <i>X</i> &le; 180). </li></ul><p><b>Output:</b><p>For each data set in the input, print a single line. Print either "<tt>IS POSSIBLE</tt>" if the available length of cable <i>L</i> is enough to network all the cities, or print "<tt>IS NOT POSSIBLE</tt>" if the available length of cable <i>L</i> is too short.<p><b>Sample Input:</b><p><pre>
2
12742
5900
3
51.3 0
42.5 -75
48.8 3
12742
620
2
30.266 97.75
30.45 91.1333
</pre><p><b>Sample Output:</b><p><pre>
IS POSSIBLE
IS NOT POSSIBLE
</pre></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4154||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Patterns and Pictures</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Patterns and Pictures</h2><p><b>Introduction:</b><p>Fabrics often have repeating patterns on them, such as a tessellation of carrots and bats.<p>A given image, such as a carrot in the above example, takes up a certain number of square inches on the fabric. In addition, a piece of fabric with more than one image will have those images in some sort of simple integral ratio, such as 3 carrots for every 2 bats. One instance of images in the given ratio is considered a <i>full set</i>.<p>Fabrics are sold by the square yard (and, for those of you who have forgotten, there are 36 inches to the yard). Given a collection of images, their sizes, and the ratios in which they occur, what is the maximum number of full sets that could possibly appear on one, two, and three square yards of patterned fabric?<p>(Note that this maximum implies totally arbitrary shapes and placements for the images, which may be different for the three lengths of fabric; the particulars of the layout are irrelevant for the purposes of the problem.)<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single integer <i>I</i> (1 &le; <i>I </i>&le; 10) indicating the number of images in a particular pattern;</li> <li>A series of <i>I</i> lines, each with two integers <i>S</i>, <i>R</i> (1 &le; <i>S </i>&le; 1000; 1 &le; <i>R</i> &le; 100) separated by spaces representing the images. <i>S</i> is the number of square inches that the image occupies; <i>R</i> is the count of the images contained in a full set.</li></ul><p><b>Output:</b><p>For each data set, print "<tt><i>A</i> <i>B</i> <i>C</i></tt>", where <i>A</i> is the maximum number of full sets that could possibly appear on one square yard of fabric, <i>B</i> is the maximum number of full sets that could possibly appear on two square yards of fabric, and <i>C</i> is the maximum number of full sets that could possibly appear on three square yards of fabric.<p><b>Sample Input:</b><pre>
1
2
15 3
17 2
</pre><p><b>Sample Output:</b><pre>
16 32 49
</pre><p></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4155||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>No Wormholes Were Harmed...</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">No Wormholes Were Harmed...</h2><style type="text/css">ul.example li{margin-top:1em}</style><p><b>Introduction:</b><p>As director of the Causality Infraction Agency, your primary objective is track down and arrest unscrupulous individuals attempting to alter the course of history.<p>Although your mission briefings include the exact year that a time agent must travel to, the physics of time travel don't make it quite so simple. Time travel can only be done by moving through wormholes that connect two specific instances of time together. As a result, an agent must travel through several wormholes in sequence to reach his or her destination time. In addition, an agent may have to spend some time living in the past or future while waiting for the next wormhole to appear. Traveling through a wormhole also isn't as simple as it might seem: moving forward in time through a wormhole will instanteously age the user by a certain number of years and moving backwards through one will instanteously make the traveller slightly younger.<p>Because the agency pays its agents based on how many years they've aged since joining the service, you are required to minimize the "aging process" as much as possible for every agent. Your goal therefore is to write a program that finds the optimal itinerary of wormhole jumps for each agent's mission and then reports the total number of years each agent will age after completing their assignment.<p>For agency accounting purposes, the formulas for computing total years aged on a mission are as follows:<p><ul class="example"><li>When starting from some year of <i>origin</i> and simply waiting until some <i>destination</i> year, the age a body accumulates in years equals:<p align="center"><i>destination</i> - <i>origin</i><p>In other words, if you were currently in the year 1785 and had to wait until the year 1793, then you will have aged 8 years. </li><li>When traveling forward in time through a wormhole that connects one year of <i>departure</i> with a later year of <i>arrival</i>, then the number of years a body ages is equal to:<p align="center">floor((<i>arrival</i> - <i>departure</i>) / 2)<p>Put in another way, you will age half the number of years (rounded down) you normally would have had you instead waited for the equivalent number of years to pass by. Note that when traveling over a small enough time difference, the years aged may be rounded down to zero for accounting purposes. </li><li>When traveling backward in time through a wormhole that connects one year of <i>departure</i> with an earlier year of <i>arrival</i>, then the number of years a body "gains back" by becoming younger is equal to:<p align="center">floor((<i>departure</i> - <i>arrival</i>) / 4)</p>In other words, you gain back a quarter of the difference between the two years (rounded down). Note that when traveling over a small enough time difference, the years "gained back" may be rounded down to zero for accounting purposes. </li><li>A wormhole that starts and ends at the same year is possible, but causes no aging or time travel, and as such serves little purpose other than to confound the scientists.</li></ul>Each dataset to this problem will contain a starting year from which all agents begin their travels and a list of mission assignments, one for each agent. Every mission assignment includes a final destination year that the agent must travel to. The mission can only be completed if the agent is able to make a round trip by traveling from the starting year to the mission's destination year and then traveling back to the initial starting year again. If such a round trip cannot be completed, then that particular mission is invalid. For the purposes of this problem, you also do not have to consider the maximum lifespan of any given agent. A mission is considered valid as long as a round trip is possible regardless of how high the count of years aged will be.<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets. Each data set consists of the following components:<ul><li>A line containing a single integer <i>W</i> (1 &le; <i>W</i> &le; 100) specifying the number of wormholes present for this dataset. </li><li>A series of <i>W</i> lines of the form "<i>D</i> <i>A</i>" (1 &le; <i>D</i>, <i>A</i> &le; 9999), each of which describes a single wormhole. The numbers <i>D</i> and <i>A</i> respectively specify the <i>departure</i> and <i>arrival</i> years of the wormhole's two endpoints in time. A wormhole is unidirectional allowing travel only from its departure year to its arrival year, but not vice-versa. </li><li>A line containing a single integer <i>S</i> (1 &le; <i>S</i> &le; 9999) which is the starting year for all agents. </li><li>A line containing a single integer <i>M</i> (1 &le; <i>M</i> &le; 100) indicating the number of missions to be analyzed. </li><li>A series of <i>M</i> lines, each containing a single integer <i>F</i> (1 &le; <i>F</i> &le; 9999) which specifies the final destination year for each of the <i>M</i> missions. </li></ul><p><b>Output:</b><p>For each data set in the input, output the heading "<tt>DATA SET #<i>k</i></tt>" where <i>k</i> is 1 for the first data set, 2 for the second, and so on. Then print <i>M</i> lines showing the results of each of the <i>M</i> missions from the input and in the same relative order as the input. Each of the <i>M</i> lines should contain either a single integer indicating the number of years aged by that respective agent or the words "<tt>IMPOSSIBLE</tt>" if that particular mission cannot be completed (either because the destination is unreachable or a return trip is not possible).<p><b>Sample Input:</b><p><pre>
1
2
2011 1956
1975 2005
2008
3
1969
2012
1982
</pre><p><b>Sample Output:</b><p><pre>
DATA SET #1
27
IMPOSSIBLE
42
</pre></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4156||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>Tribute (Editor)</title> </head><body><div class="content"><!-- <h2>Title of page</h2> --><h2 align="center">Tribute (Editor)</h2><p><b>Introduction:</b><p>This problem is not about the greatest editor in the world; it is just a tribute.<p>The <i>Tenacious eDitor</i> is an attempt to clone to power of a certain modal editor. However, it is notoriously bug-ridden. You've been asked to replace Kyle (who quit the devteam) and help with fixing some of the bugs.<p>The main problem with the current release of <tt>td</tt>, as it is commonly referred to, is that it cannot differentiate between text on a line and commands. Whenever a user wants to type an <tt>x</tt>, the editor interprets it as a command to delete the last character. This is problematic. Thankfully, commands are case-sensitive, and each letter is at most a single command (sometimes uppercase, sometimes lowercase), so one can manage to write any given line of text as long as it's allowed to look like something written by a fourteen-year-old hacker wannabe.<p>Editing occurs in an <i>edit buffer</i>, which starts out empty. The cursor in <tt>td</tt> rests in <i>gaps</i>, locations surrounding each printed character. When a non-command character is entered, the character is inserted to the right of the cursor's current location and the cursor moves to the gap to the right of the new character. (This is the standard behavior of most editors.) A line with no characters has a single gap. A line with a single printable character has two (one before and one after), a line with two printable characters has three, and so on.<p>The currently-implemented commands are:<table border="1" align="center"><tr><td>Command keys</td><td>Result</td><td>Cursor location after operation</td></tr><tr><td><tt>x</tt></td><td>Delete the character immediately to the left of the cursor</td><td>One gap to the left</td></tr><tr><td><tt>K</tt></td><td>Delete all non-spaces to the left of the cursor, stopping at the first space encountered or the beginning of the line; if the previous character is a space, delete nothing</td><td>The gap to the right of the "stop" character</td></tr><tr><td><tt>c</tt></td><td>Duplicate the character to the left of the cursor, inserting it to the right of the cursor</td><td>The gap to the right of the duplicate character (one right)</td></tr><tr><td><tt>D</tt></td><td>Duplicate all non-spaces to the left of the cursor, stopping at the first space encountered or the beginning of the line and inserting them to the right of the cursor; if the previous character is a space, duplicate nothing</td><td>The gap to the right of the rightmost duplicate character</td></tr><tr><td><tt>R</tt></td><td>Reverse all non-spaces to the left of the cursor, stopping at the first space encountered or the beginning of the line; if the previous character is a space, reverse nothing</td><td>No change</td></tr><tr><td><tt>p</tt></td><td>Delete all characters to the left of the cursor</td><td>Leftmost gap</td></tr><tr><td><tt>W</tt></td><td>Delete all characters to the right of the cursor</td><td>No change</td></tr><tr><td><tt>h</tt></td><td>Move the cursor one gap to the left</td><td>One gap to the left</td></tr><tr><td><tt>L</tt></td><td>Move the cursor one gap to the right</td><td>One gap to the right</td></tr><tr><td><tt>f</tt></td><td>Move the cursor to the first gap on the line</td><td>Leftmost gap</td></tr><tr><td><tt>G</tt></td><td>Move the cursor to the last gap on the line</td><td>Rightmost gap</td></tr><tr><td><i>any non-command character</i></td><td>Insert the character into the edit buffer to the right of the cursor</td><td>One gap to the right</td></tr></table>For the purposes of this problem, the only characters are uppercase and lowercase characters, digits, and spaces.<p>When a character is added internally to a line of text, all subsequent characters shift to the right (as in "insert mode"); when characters are deleted from anywhere other than the end of a line, all subsequent characters shift to the left.<p>Any commands which cannot properly do anything (attempting to move past the first or last gap, deleting characters when none exist, and so on) do nothing. They do <b>not</b> show up as printed characters.<p>Each line represents a different session of <tt>td</tt>; at the beginning of a new session, the edit buffer is empty.<p>Given a series of keystrokes by a user, can you determine what text actually results if it were entered in the current version of <tt>td</tt>?<p><b>Input:</b><p>Input to this problem will begin with a line containing a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) indicating the number of data sets.<p>Each data set consists of a single line of characters, as defined above, with no leading or trailing whitespace. There are no less than 1 and no more than 100 characters per line. They represent the series of keystrokes entered by a user for a particular session of <tt>td</tt>.<p><b>Output:</b><p>For each data set, print the final state of the edit buffer from the sequence of characters entered, with a carat (<tt>^</tt>) at the location of the cursor.<p><b>Sample Input:</b><pre>
2
Deletex bigdeleteKduPc bigduPD esreverR midinhhdleGxx midelletehhhxGfmoo
THis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands
</pre><p><b>Sample Output:</b><pre>
moo^elet duPP bigduPbigduP reverse middle midelete
THis ratHer obnoXious line oF CHaraCters surPrisingly triggers no Commands^
</pre><p></div><div class="footer">The statements and opinions included in these pages are those of the Hosts of the ACM ICPC South Central USA Regional Programming Contest only. Any statements and opinions included in these pages are not those of Louisiana State University or the LSU Board of Supervisors.<br>&copy; 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 ACM ICPC South Central USA Regional Programming Contest</div></div></body></html>
______________________________________________________
4157||||||false||||||
<P>Dr. Grey is a data analyst, who visualizes various aspects of data received from all over the world everyday. He is extremely good at sophisticated visualization tools, but yet his favorite is a simple self-made histogram generator.<P><DIV ALIGN="CENTER"><IMG WIDTH="563" HEIGHT="421" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="\epsfbox{p4157.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: A histogram</DIV><P>Figure 1 is an example of histogram automatically produced by his histogram generator. A histogram is a visual display of frequencies of value occurrences as bars. In this example, values in the interval 0-9 occur five times, those in the interval 10-19 occur three times, and 20-29 and 30-39 once each.<P>Dr. Grey's histogram generator is a simple tool. First, the height of the histogram is fixed, that is, the height of the highest bar is always the same and those of the others are automatically adjusted proportionately. Second, the widths of bars are also fixed. It can only produce a histogram of uniform intervals, that is, each interval of a histogram should have the same width (10 in the above example). Finally, the bar for each interval is painted in a grey color, where the colors of the leftmost and the rightmost intervals are black and white, respectively, and the darkness of bars monotonically decreases at the same rate from left to right. For instance, in Figure 1, the darkness levels of the four bars are 1, 2/3, 1/3, and 0, respectively.<P>In this problem, you are requested to estimate ink consumption when printing a histogram on paper. The amount of ink necessary to draw a bar is proportional to both its area and darkness.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each of which contains integers and specifies a value table and intervals for the histogram generator, in the following format.<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>v</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR></TABLE><P><P><BR><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the total number of value occurrences for the histogram, and each of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines following the first line contains a single value. Note that the same value may possibly occur multiple times.<P><P><BR><SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> is the interval width. A value <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is in the first (i.e. leftmost) interval if <!-- MATH
 $0 \le v < w$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>v</I> &lt; <I>w</I></SPAN> <tex2html_verbatim_mark>, the second one if <!-- MATH
 $w \le v < 2w$
 --><SPAN CLASS="MATH"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>v</I> &lt; 2<I>w</I></SPAN> <tex2html_verbatim_mark>, and so on. Note that the interval from 0 (inclusive) to <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> (exclusive) should be regarded as the leftmost even if no values occur in this interval. The last (i.e. rightmost) interval is the one that includes the largest value in the dataset.<P>You may assume the following.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>v</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P><P><BR>You can also assume that the maximum value is no less than <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>. This means that the histogram has more than one interval. The end of the input is indicated by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset, output a line containing the amount of ink consumed in printing the histogram. One unit of ink is necessary to paint one highest bar black. Assume that 0.01 units of ink per histogram is consumed for various purposes except for painting bars such as drawing lines and characters (see Figure 1). For instance, the amount of ink consumed in printing the histogram in Figure 1 is:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">1&#215;1 + <IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{2}}{{3}}}$">&#215;<IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{3}}{{5}}}$"> + <IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{1}}{{3}}}$">&#215;<IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{1}}{{5}}}$"> +0&#215;<IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{1}}{{5}}}$"> + 0.01</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">=</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">1 + <IMG WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{2}}{{5}}}$"> + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4157.jpg ALT="$ {\frac{{1}}{{15}}}$"> + 0.01</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">=</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">1.47666...</SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P>Each output value should be in a decimal fraction and may have an error less than <SPAN CLASS="MATH">10<SUP>-5</SUP></SPAN> <tex2html_verbatim_mark> .<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 50 
100 
0 
100 
3 50 
100 
100 
50 
10 10 
1 
2 
3 
4 
5 
16 
17 
18 
29 
30 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.51 
0.26 
1.4766666666666667
</PRE><P>
______________________________________________________
4158||||||false||||||
<P>Hideyuki is allowed by his father Ujisato some 1000 yen bills every month for his pocket money. In the first day of every month, the number of bills is decided as follows. Ujisato prepares <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> pieces of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>-sided dice and declares the cutback <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. Hideyuki rolls these dice. The number of bills given is the sum of the spots of the rolled dice decreased by the cutback. Fortunately to Hideyuki, Ujisato promises him to give at least one bill, even if the sum of the spots does not exceed the cutback. Each of the dice has spots of 1 through <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> inclusive on each side, and the probability of each side is the same.<P>In this problem, you are asked to write a program that finds the expected value of the number of given bills.<P>For example, when <SPAN CLASS="MATH"><I>n</I> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I> = 6</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I> = 3</SPAN> <tex2html_verbatim_mark>, the probabilities of the number of bills being 1, 2, 3, 4, 5, 6, 7, 8 and 9 are <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{1}}{{36}}}$"> + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{2}}{{36}}}$"> + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{3}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{4}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{5}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{6}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{5}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{4}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{3}}{{36}}}$">,<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{2}}{{36}}}$"></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{1}}{{36}}}$"></SPAN> <tex2html_verbatim_mark>, respectively. Therefore, the expected value is <SPAN CLASS="MATH">(<IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{1}}{{36}}}$"> + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{2}}{{36}}}$"> + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{3}}{{36}}}$">)&#215;1 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{4}}{{36}}}$">&#215;2 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{5}}{{36}}}$">&#215;3 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{6}}{{36}}}$">&#215;4 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{5}}{{36}}}$">&#215;5 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{4}}{{36}}}$">&#215;6 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{3}}{{36}}}$">&#215;7 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{2}}{{36}}}$">&#215;8 + <IMG WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ {\frac{{1}}{{36}}}$">&#215;9</SPAN> <tex2html_verbatim_mark>, which is approximately 4.11111111.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of lines each of which contains three integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> in this order. They satisfy the following conditions.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=1><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ \le$"><I>m</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $0 \le k < nm$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4158img1.png ALT="$ \le$"><I>k</I> &lt; <I>nm</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><!-- MATH
 $nm \times m^{n} < 100000000 (10^{8})$
 --><SPAN CLASS="MATH"><I>nm</I>&#215;<I>m</I><SUP>n</SUP> &lt; 100000000(10<SUP>8</SUP>)</SPAN> <tex2html_verbatim_mark></TD></TR></TABLE></DIV><P><P><BR>The end of the input is indicated by a line containing three zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be comprised of lines each of which contains a single decimal fraction. It is the expected number of bills and may have an error less than <SPAN CLASS="MATH">10<SUP>-7</SUP></SPAN> <tex2html_verbatim_mark>. No other characters should occur in the output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 6 0 
2 6 3 
3 10 9 
13 3 27 
1 2008 3 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
7.00000000 
4.11111111 
7.71000000 
1.42902599 
1001.50298805
</PRE><P>
______________________________________________________
4159||||||false||||||

<P>
In the middle of Tyrrhenian Sea, there is a small volcanic island called Chronus. The island is now uninhabited but it used to be a civilized island. Some historical records imply that the island was annihilated by an eruption of a volcano about 800 years ago and that most of the people in the island were killed by pyroclastic flows caused by the volcanic activity. In 2003, a European team of archaeologists launched an excavation project in Chronus Island. Since then, the project has provided many significant historic insights. In particular the discovery made in the summer of 2008 astonished the world: the project team excavated several mechanical watches worn by the victims of the disaster. This indicates that people in Chronus Island had such a highly advanced manufacturing technology. 

<P>
Shortly after the excavation of the watches, archaeologists in the team tried to identify what time of the day the disaster happened, but it was not successful due to several diffculties. First, the extraordinary heat of pyroclastic flows severely damaged the watches and took away the letters and numbers printed on them. Second, every watch has a perfect round form and one cannot tell where the top of the watch is. Lastly, though every watch has three hands, they have a completely identical look and therefore one cannot tell which is the hour, the minute, or the second (It is a mystery how the people in Chronus Island were distinguishing the three hands. Some archaeologists guess that the hands might be painted with different colors, but this is only a hypothesis, as the paint was lost by the heat). This means that we cannot decide the time indicated by a watch uniquely; there can be a number of candidates. We have to consider different rotations of the watch. Furthermore, since there are several possible interpretations of hands, we have also to consider all the permutations of hands. 

<P>
You are an information archaeologist invited to the project team and are asked to induce the most plausible time interval within which the disaster happened, from the set of excavated watches. 

<P>
In what follows, we express a time modulo 12 hours. We write a time by the notation <SPAN CLASS="MATH"><I>hh</I> : <I>mm</I> : <I>ss</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>hh</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> stand for the hour <!-- MATH
 $(hh = 00, 01, 02, \ldots, 11)$
 -->
<SPAN CLASS="MATH">(<I>hh</I> = 00, 01, 02,..., 11)</SPAN>
<tex2html_verbatim_mark>, the minute <!-- MATH
 $(mm = 00, 01, 02, \ldots, 59)$
 -->
<SPAN CLASS="MATH">(<I>mm</I> = 00, 01, 02,..., 59)</SPAN>
<tex2html_verbatim_mark>, and the second <!-- MATH
 $(ss = 00, 01, 02, \ldots, 59)$
 -->
<SPAN CLASS="MATH">(<I>ss</I> = 00, 01, 02,..., 59)</SPAN>
<tex2html_verbatim_mark>, respectively. The time starts from 00:00:00 and counts up every second 00:00:00, 00:00:01, 00:00:02, <SPAN CLASS="MATH"><SUP> ... </SUP></SPAN>
<tex2html_verbatim_mark>, but it reverts to 00:00:00 every 12 hours. 

<P>
The watches in Chronus Island obey the following conventions of modern analog watches. 

<P>

<P>
<BR>

<UL>
<LI>A watch has three hands, i.e. the hour hand, the minute hand, and the second hand, though they look identical as mentioned above.
</LI>
<LI>Every hand ticks 6 degrees clockwise in a discrete manner. That is, no hand stays between ticks, and each hand returns to the same position every 60 ticks. 
</LI>
<LI>The second hand ticks every second. 
</LI>
<LI>The minute hand ticks every 60 seconds. 
</LI>
<LI>The hour hand ticks every 12 minutes. 
</LI>
</UL>

<P>

<P>
<BR>
At the time 00:00:00, all the three hands are located at the same position. 

<P>
Because people in Chronus Island were reasonably keen to keep their watches correct and pyroclastic flows spread over the island quite rapidly, it can be assumed that all the watches were stopped in a short interval of time. Therefore it is highly expected that the time the disaster happened is in the shortest time interval within which all the excavated watches have at least one candidate time. 

<P>
You must calculate the shortest time interval and report it to the project team.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, each of which is formatted as follows. 

<P>

<P>
<BR>

<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>s</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>u</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>s</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>u</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>s</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>t</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>u</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark></TD></TR>
</TABLE>

<P>

<P>
<BR>
The first line contains a single integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(2 \le n \le 10)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \le$">10)</SPAN>
<tex2html_verbatim_mark>, representing the number of the watches. The three numbers <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>u</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> in each line are integers such that <!-- MATH
 $0 \le s_{i}, t_{i}, u_{i} \le 59$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \le$"><I>s</I><SUB>i</SUB>, <I>t</I><SUB>i</SUB>, <I>u</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \le$">59</SPAN>
<tex2html_verbatim_mark> and they specify the positions of the three hands by the number of ticks relative to an arbitrarily chosen position. 

<P>
Note that the positions of the hands of a watch can be expressed in many different ways. For example, if a watch was stopped at the time 11:55:03, the positions of hands can be expressed differently by rotating the watch arbitrarily (e.g. 59 55 3, 0 56 4, 1 57 5, etc.) and as well by permuting the hour, minute, and second hands arbitrarily (e.g. 55 59 3, 55 3 59, 3 55 59, etc.). 

<P>
The end of the input is indicated by a line containing a single zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output the shortest time interval within which all the watches given in the dataset have at least one candidate time. The output must be written in a single line in the following format for each dataset. 

<P>

<P>
<BR>

<!-- MATH
 $hh{\tt :}mm{\tt :}ss {\tt\ } h'h'{\tt :}m'm'{\tt :}s's'$
 -->
<SPAN CLASS="MATH"><I>hh</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>mm</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>ss</I><IMG
 WIDTH="14" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt\ $"><I>h'h'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>m'm'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>s's'</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
Each line contains a pair of times <!-- MATH
 $hh{\tt :}mm{\tt :}ss$
 -->
<SPAN CLASS="MATH"><I>hh</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>mm</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>ss</I></SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $h'h'{\tt :}m'm'{\tt :}s's'$
 -->
<SPAN CLASS="MATH"><I>h'h'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>m'm'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>s's'</I></SPAN>
<tex2html_verbatim_mark> , indicating that the shortest interval begins at <!-- MATH
 $hh{\tt :}mm{\tt :}ss$
 -->
<SPAN CLASS="MATH"><I>hh</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>mm</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>ss</I></SPAN>
<tex2html_verbatim_mark> and ends at <!-- MATH
 $h'h'{\tt :}m'm'{\tt :}s's'$
 -->
<SPAN CLASS="MATH"><I>h'h'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>m'm'</I><IMG
 WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4159img1.png
 ALT="$ \tt :$"><I>s's'</I></SPAN>
<tex2html_verbatim_mark> inclusive. The beginning time and the ending time are separated by a single space and each of them should consist of hour, minute, and second in two digits separated by colons. No extra characters should appear in the output. 

<P>
In calculating the shortest interval, you can exploit the facts that every watch has at least one candidate time and that the shortest time interval contains 00:00:00 only if the interval starts from 00:00:00 (i.e. the shortest interval terminates before the time reverts to 00:00:00). 

<P>
If there is more than one time interval that gives the shortest, output the one that first comes after 00:00:00 inclusive.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
8 8 18 
32 32 32 
57 2 57 
5 
49 3 49 
7 30 44 
27 21 21 
33 56 56 
21 46 4 
3 
45 52 28 
36 26 36 
20 55 50 
10 
33 8 39 
50 57 43 
35 21 12 
21 17 11 
16 21 58 
45 40 53 
45 30 53 
39 1 8 
55 48 30 
7 48 15 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
00:00:00 00:00:10 
06:14:56 06:32:09 
07:27:37 07:32:02 
05:17:40 05:21:03
</PRE>

<P>

______________________________________________________
4160||||||false||||||

<P>
Taro attempts to tell digits to Hanako by putting straight bars on the floor. Taro wants to express each digit by making one of the forms shown in Figure 2. 

<P>
Since Taro may not have bars of desired lengths, Taro cannot always make forms exactly as shown in Figure 2. Fortunately, Hanako can recognize a form as a digit if the connection relation between bars in the form is kept. Neither the lengths of bars nor the directions of forms affect Hanako's perception as long as the connection relation remains the same. For example, Hanako can recognize all the awkward forms in Figure 3 as digits. On the other hand, Hanako cannot recognize the forms in Figure 4 as digits. For clarity, touching bars are slightly separated in Figures 2, 3 and 4. Actually, touching bars overlap exactly at one single point.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4160a.eps}$
 -->
<IMG
 WIDTH="549" HEIGHT="89" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="\epsfbox{p4160a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 2: Representation of digits

</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4160b.eps}$
 -->
<IMG
 WIDTH="549" HEIGHT="332" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="\epsfbox{p4160b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 3: Examples of forms recognized as digits

</DIV>

<P>
In the forms, when a bar touches another, the touching point is an end of at least one of them. That is, bars never cross. In addition, the angle of such two bars is always a right angle. 

<P>
To enable Taro to represent forms with his limited set of bars, positions and lengths of bars can be changed as far as the connection relations are kept. Also, forms can be rotated. 

<P>
Keeping the connection relations means the following. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4160c.eps}$
 -->
<IMG
 WIDTH="550" HEIGHT="76" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="\epsfbox{p4160c.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 4: Forms not recognized as digits (these kinds of forms are not contained in the dataset)

</DIV>

<P>

<P>
<BR>

<UL>
<LI>Separated bars are not made to touch. 
</LI>
<LI>Touching bars are not made separate. 
</LI>
<LI>When one end of a bar touches another bar, that end still touches the same bar. When it touches a midpoint of the other bar, it remains to touch a midpoint of the same bar on the same side. 
</LI>
<LI>The angle of touching two bars is kept to be the same right angle (90 degrees and -90 degrees are considered different, and forms for 2 and 5 are kept distinguished). 
</LI>
</UL>

<P>

<P>
<BR>
Your task is to find how many times each digit appears on the floor. The forms of some digits always contain the forms of other digits. For example, a form for 9 always contains four forms for 1, one form for 4, and two overlapping forms for 7. In this problem, ignore the forms contained in another form and count only the digit of the ``largest" form composed of <SPAN  CLASS="textit">all</SPAN> mutually connecting bars. If there is one form for 9, it should be interpreted as one appearance of 9 and no appearance of 1, 4, or 7.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of a number of datasets. Each dataset is formatted as follows. 

<P>

<P>
<BR>

<TABLE COLS=4>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>1a</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1a</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>1b</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1b</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>2a</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2a</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>2b</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>2b</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=4> 
<SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>na</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>na</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>nb</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>nb</SUB></SPAN>
<tex2html_verbatim_mark></TD></TR>
</TABLE>

<P>

<P>
<BR>
In the first line, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> represents the number of bars in the dataset. For the rest of the lines, one line represents one bar. Four integers <SPAN CLASS="MATH"><I>x</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>, delimited by single spaces, are given in each line. <SPAN CLASS="MATH"><I>x</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark> are the <SPAN CLASS="MATH"><I>x</I> -</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>
<tex2html_verbatim_mark>coordinates of one end of the bar, respectively. <SPAN CLASS="MATH"><I>x</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark> are those of the other end. The coordinate system is as shown in Figure 5. You can assume <!-- MATH
 $1 \le n \le 1000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $0 \le x_{a}, y_{a}, x_{b}, y_{b} \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="$ \le$"><I>x</I><SUB>a</SUB>, <I>y</I><SUB>a</SUB>, <I>x</I><SUB>b</SUB>, <I>y</I><SUB>b</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>. 

<P>
The end of the input is indicated by a line containing one zero.

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4160d.eps}$
 -->
<IMG
 WIDTH="332" HEIGHT="281" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4160a.jpg
 ALT="\epsfbox{p4160d.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 5: The coordinate system 

</DIV>

<P>

<P>
<BR>
You can also assume the following conditions. 

<P>

<UL>
<LI>More than two bars do not overlap at one point. 
</LI>
<LI>Every bar is used as a part of a digit. Non-digit forms do not exist on the floor. 
</LI>
<LI>A bar that makes up one digit does not touch nor cross any bar that makes up another digit. 
</LI>
<LI>There is no bar whose length is zero.
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, output a single line containing ten integers delimited by single spaces. These integers represent how many times <!-- MATH
 $0, 1, 2, \ldots$
 -->
<SPAN CLASS="MATH">0, 1, 2,...</SPAN>
<tex2html_verbatim_mark>, and 9 appear on the floor in this order. Output lines must not contain other characters.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
9 
60 140 200 300 
300 105 330 135 
330 135 250 215 
240 205 250 215 
298 167 285 154 
30 40 30 90 
30 90 150 90 
150 90 150 20 
30 40 150 40 
8 
320 20 300 60 
320 20 380 50 
380 50 240 330 
10 50 40 20 
10 50 110 150 
110 150 180 80 
40 20 37 17 
37 17 27 27 
20 
72 222 132 182 
204 154 204 54 
510 410 520 370 
404 54 204 54 
530 450 410 450 
204 68 404 68 
80 110 120 30 
130 160 180 60 
520 370 320 320 
310 360 320 320 
120 30 180 60 
60 100 80 110 
404 154 204 154 
80 60 60 100 
430 550 590 550 
510 410 310 360 
430 450 430 550 
404 54 404 154 
232 202 142 262 
142 262 102 202 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
0 1 0 1 0 0 0 0 0 1 
0 0 0 0 0 1 0 1 0 0 
1 0 1 0 2 0 0 0 1 0
</PRE>

<P>

______________________________________________________
4161||||||false||||||
<P><BLOCKQUOTE><SPAN CLASS="textit">A long time ago in a galaxy, far, far away, there were N spheres with various radii. Spheres were mirrors, that is, they had reflective surfaces <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></SPAN></BLOCKQUOTE><P><P><BR>You are standing at the origin of the galaxy (0, 0, 0), and emit a laser ray to the direction <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>, <I>w</I>)</SPAN> <tex2html_verbatim_mark>. The ray travels in a straight line.<P>When the laser ray from <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark> hits the surface of a sphere at <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>, let <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> be a point outside of the sphere on the line connecting the sphere center and <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark>. The reflected ray goes to the direction towards <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> that satisfies the following conditions: (1) <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is on the plane formed by the three points <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Q</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, (2) <SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \angle$"><I>IQN</I> = <IMG WIDTH="15" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \angle$"><I>NQR</I></SPAN> <tex2html_verbatim_mark>, as shown in Figure 6.<P><DIV ALIGN="CENTER"><IMG WIDTH="550" HEIGHT="562" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="\epsfbox{p4161.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 6: Laser ray reflection</DIV><P>After it is reflected several times, finally it goes beyond our observation. Your mission is to write a program that identifies the last reflection point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets, each in the following format.<P><P><BR><TABLE COLS=4><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>z</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=4><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>x</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>y</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>z</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE><P><P><BR>The first line of a dataset contains a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> which is the number of spheres. The next line contains three integers <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> separated by single spaces, where <SPAN CLASS="MATH">(<I>u</I>, <I>v</I>, <I>w</I>)</SPAN> <tex2html_verbatim_mark> is the direction of the laser ray initially emitted from the origin.<P>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains four integers separated by single spaces. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line corresponds to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th sphere, and the numbers represent the center position <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> and the radius <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>.<P><SPAN CLASS="MATH"><I>N</I>, <I>u</I>, <I>v</I>, <I>w</I>, <I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> satisfy the following conditions.<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">-100<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$"><I>u</I>, <I>v</I>, <I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">-100<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>, <I>z</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$"><I>r</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \le$">30</SPAN> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>u</I><SUP>2</SUP> + <I>v</I><SUP>2</SUP> + <I>w</I><SUP>2</SUP> &gt; 0</SPAN> <tex2html_verbatim_mark></DIV><P><P><BR>You can assume that the distance between the surfaces of any two spheres is no less than 0.1. You can also assume that the origin (0, 0, 0) is located outside of any sphere, and is at least 0.1 distant from the surface of any sphere.<P>The ray is known to be reflected by the sphere surfaces at least once, and at most five times. You can assume that the angle between the ray and the line connecting the sphere center and the reflection point, which is known as the angle of reflection (i.e. <SPAN CLASS="MATH"><IMG WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4161img1.png ALT="$ \theta$"></SPAN> <tex2html_verbatim_mark> in Figure 6), is less than 85 degrees for each point of reflection.<P>The last dataset is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, you should print the <SPAN CLASS="MATH"><I>x</I> -</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I> -</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I> -</SPAN> <tex2html_verbatim_mark>coordinates of the last reflection point separated by single spaces in a line. No output line should contain extra characters. No coordinate values in the output should have an error greater than 0.01.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
-20 -20 -24 
100 100 100 30 
10 8 3 5 
-70 -70 -84 5 
4 
0 47 84 
-23 41 42 8 
45 -10 14 19 
-5 28 47 12 
-27 68 34 14 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
79.0940 79.0940 94.9128 
-21.8647 54.9770 34.1761
</PRE><P>
______________________________________________________
4162||||||false||||||
<P>On a small planet named Bandai, a landing party of the starship Tadamigawa discovered colorful cubes traveling on flat areas of the planet surface, which the landing party named <SPAN CLASS="textit">beds</SPAN>. A cube appears at a certain position on a bed, travels on the bed for a while, and then disappears. After a longtime observation, a science officer Lt. Alyssa Ogawa of Tadamigawa found the rule how a cube travels on a bed.<P>A bed is a rectangular area tiled with squares of the same size.<P><P><BR><UL><LI>One of the squares is colored red, </LI><LI>one colored green, </LI><LI>one colored blue, </LI><LI>one colored cyan, </LI><LI>one colored magenta, </LI><LI>one colored yellow, </LI><LI>one or more colored white, and </LI><LI>all others, if any, colored black. </LI></UL><P><P><BR>Initially, a cube appears on one of the white squares. The cube's faces are colored as follows.<P><P><BR><TABLE COLS=2><COL ALIGN=RIGHT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>top</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>red</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>bottom</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>cyan</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>north</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>green</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>south</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>magenta</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>east</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>blue</TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>west</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>yellow</TD></TR></TABLE><P><P><BR>The cube can roll around a side of the current square at a step and thus rolls on to an adjacent square. When the cube rolls on to a chromatically colored (red, green, blue, cyan, magenta or yellow) square, the top face of the cube after the roll should be colored the same. When the cube rolls on to a white square, there is no such restriction. The cube should never roll on to a black square.<P>Throughout the travel, the cube can visit each of the chromatically colored squares only once, and any of the white squares arbitrarily many times. As already mentioned, the cube can never visit any of the black squares. On visit to the final chromatically colored square, the cube disappears. Somehow the order of visits to the chromatically colored squares is known to us before the travel starts.<P>Your mission is to find the least number of steps for the cube to visit all the chromatically colored squares in the given order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input is a sequence of datasets. A dataset is formatted as follows:<P><P><BR><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=2><SPAN CLASS="MATH"><I>w</I>&nbsp;<I>d</I></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>c</I><SUB>11</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>c</I><SUB>w1</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4162img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4162img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>c</I><SUB>1d</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>c</I><SUB>wd</SUB></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP COLSPAN=3><SPAN CLASS="MATH"><I>v</I><SUB>1</SUB><I>v</I><SUB>2</SUB><I>v</I><SUB>3</SUB><I>v</I><SUB>4</SUB><I>v</I><SUB>5</SUB><I>v</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark></TD></TR></TABLE><P><P><BR>The first line is a pair of positive integers <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> separated by a space. The next <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> lines are <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>-character-long strings <SPAN CLASS="MATH"><I>c</I><SUB>11</SUB><SUP> ... </SUP><I>c</I><SUB>w1</SUB>,<SUP> ... </SUP>, <I>c</I><SUB>1d</SUB><SUP> ... </SUP><I>c</I><SUB>wd</SUB></SPAN> <tex2html_verbatim_mark> with no spaces. Each character <SPAN CLASS="MATH"><I>c</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is one of the letters <TT>r</TT>, <TT>g</TT>, <TT>b</TT>, <TT>c</TT>, <TT>m</TT>, <TT>y</TT>, <TT>w</TT> and <TT>k</TT>, which stands for red, green, blue, cyan, magenta, yellow, white and black respectively, or a sign #. Each of <TT>r</TT>, <TT>g</TT>, <TT>b</TT>, <TT>c</TT>, <TT>m</TT>, <TT>y</TT> and # occurs once and only once in a dataset. The last line is a six-character-long string <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB><I>v</I><SUB>2</SUB><I>v</I><SUB>3</SUB><I>v</I><SUB>4</SUB><I>v</I><SUB>5</SUB><I>v</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark> which is a permutation of ``<TT>rgbcmy</TT>".<P>The integers <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> denote the width (the length from the east end to the west end) and the depth (the length from the north end to the south end) of a bed. The unit is the length of a side of a square. You can assume that neither <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> nor <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is greater than 30.<P>Each character <SPAN CLASS="MATH"><I>c</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> shows the color of a square in the bed. The characters <SPAN CLASS="MATH"><I>c</I><SUB>11</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>w1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>1d</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>wd</SUB></SPAN> <tex2html_verbatim_mark> correspond to the north-west corner, the north-east corner, the south-west corner and the southeast corner of the bed respectively. If <SPAN CLASS="MATH"><I>c</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is a letter, it indicates the color of the corresponding square. If <SPAN CLASS="MATH"><I>c</I><SUB>ij</SUB></SPAN> <tex2html_verbatim_mark> is a <code>#</code>, the corresponding square is colored white and is the initial position of the cube.<P>The string <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB><I>v</I><SUB>2</SUB><I>v</I><SUB>3</SUB><I>v</I><SUB>4</SUB><I>v</I><SUB>5</SUB><I>v</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark> shows the order of colors of squares to visit. The cube should visit the squares colored <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>, <I>v</I><SUB>3</SUB>, <I>v</I><SUB>4</SUB>, <I>v</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I><SUB>6</SUB></SPAN> <tex2html_verbatim_mark> in this order. The end of the input is indicated by a line containing two zeros separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input dataset, output the least number of steps if there is a solution, or ``<TT>unreachable</TT>" if there is no solution. In either case, print it in one line for each input dataset.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 5 
kkkkkwwwww 
w#wwwrwwww 
wwwwbgwwww 
kwwmcwwwkk 
kkwywwwkkk 
rgbcmy 
10 5 
kkkkkkkkkk 
k#kkkkkkkk 
kwkkkkkwwk 
kcmyrgbwwk 
kwwwwwwwwk 
cmyrgb 
10 5 
kkkkkkkkkk 
k#kkkkkkkk 
kwkkkkkwkk 
kcmyrgbwwk 
kwwwwwwwwk 
cmyrgb 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 
49 
unreachable
</PRE><P>
______________________________________________________
4163||||||false||||||
<P>The amount of information on the World Wide Web is growing quite rapidly. In this information explosion age, we must survive by accessing only the Web pages containing information relevant to our own needs. One of the key technologies for this purpose is keyword search. By using well-known search engines, we can easily access those pages containing useful information about the topic we want to know.<P>There are many variations in keyword search problems. If a single string is searched in a given text, the problem is quite easy. If the pattern to be searched consists of multiple strings, or is given by some powerful notation such as regular expressions, the task requires elaborate algorithms to accomplish efficiently.<P>In our problem, a number of strings (<SPAN CLASS="textit">element strings</SPAN>) are given, but they are not directly searched for. Concatenations of all the element strings in any order are the targets of the search here.<P>For example, consider three element strings <TT>aa</TT>, <TT>b</TT> and <TT>ccc</TT> are given. In this case, the following six concatenated strings are the targets of the search, i.e. they should be searched in the text.<P><P><BR><PRE>
aabccc 
aacccb 
baaccc 
bcccaa 
cccaab 
cccbaa
</PRE><P><P><BR>The text may contain several occurrences of these strings. You are requested to count the number of occurrences of these strings, or speaking more precisely, the number of positions of occurrences in the text.<P>Two or more concatenated strings may be identical. In such cases, it is necessary to consider subtle aspects of the above problem statement. For example, if two element strings are <TT>x</TT> and <TT>xx</TT>, the string <TT>xxx</TT> is an occurrence of both the concatenation of <TT>x</TT> and <TT>xx</TT> and that of <TT>xx</TT> and <TT>x</TT>. Since the number of positions of occurrences should be counted, this case is counted as one, not two.<P>Two occurrences may overlap. For example, the string <TT>xxxx</TT> has occurrences of the concatenation <TT>xxx</TT> in two different positions. This case is counted as two.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of datasets, each giving a set of element strings and a text. The format of a dataset is as follows.<P><P><BR><TABLE COLS=2><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>e</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>e</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4163img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>e</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>t</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>t</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><IMG WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4163img1.png ALT="$ \vdots$"></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>t</I><SUB>m</SUB></SPAN> <tex2html_verbatim_mark></TD><TD></TD></TR></TABLE><P><P><BR>The first line contains two integers separated by a space. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of element strings. <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of lines used to represent the text. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is between 1 and 12, inclusive.<P>Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines gives an element string. The length (number of characters) of an element string is between 1 and 20, inclusive.<P>The last <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines as a whole give the text. Since it is not desirable to have a very long line, the text is separated into <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines by newlines, but these newlines should be ignored. They are not parts of the text. The length of each of these lines (not including the newline) is between 1 and 100, inclusive. The length of the text is between 1 and 5000, inclusive.<P>The element strings and the text do not contain characters other than lowercase letters.<P>The end of the input is indicated by a line containing two zeros separated by a space.<P><P><BR><SPAN CLASS="textbf">CAUTION!</SPAN> Although the sample input contains only small datasets, note that <SPAN CLASS="MATH">12!&#215;5000</SPAN> <tex2html_verbatim_mark> is far larger than <SPAN CLASS="MATH">2<SUP>31</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each dataset in the input, one line containing the number of matched positions should be output. An output line should not contain extra characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 
aa 
b 
ccc 
aabccczbaacccbaazaabbcccaa 
3 1 
a 
b 
c 
cbbcbcbabaacabccaccbaacbccbcaaaccccbcbcbbcacbaacccaccbbcaacbbabbabaccc 
3 4 
aaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
12 
197
</PRE><P>
______________________________________________________
4164||||||false||||||

<P>
Spinning tops are one of the most popular and the most traditional toys. Not only spinning them, but also making one's own is a popular enjoyment. 

<P>
One of the easiest way to make a top is to cut out a certain shape from a cardboard and pierce an axis stick through its center of mass. Professionally made tops usually have three dimensional shapes, but in this problem we consider only two dimensional ones. 

<P>
Usually, tops have rotationally symmetric shapes, such as a circle, a rectangle (with 2-fold rotational symmetry) or a regular triangle (with 3-fold symmetry). Although such symmetries are useful in determining their centers of mass, they are not definitely required; an asymmetric top also spins quite well if its axis is properly pierced at the center of mass. 

<P>
When a shape of a top is given as a path to cut it out from a cardboard of uniform thickness, your task is to find its center of mass to make it spin well. Also, you have to determine whether the center of mass is on the part of the cardboard cut out. If not, you cannot pierce the axis stick, of course. 

<P>
<SPAN  CLASS="textbf">Java Specific:</SPAN> Submitted Java programs may not use classes implementing the interface ``<TT>java.awt.Shape</TT>". You may use them for your debugging purposes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, each of which describes a counterclockwise path on a cardboard to cut out a top. A path is indicated by a sequence of command lines, each of which specifies a line segment or an arc. 

<P>
In the description of commands below, the <SPAN  CLASS="textit">current position</SPAN> is the position to start the next cut, if any. After executing the cut specified by a command, the <SPAN  CLASS="textit">current position</SPAN> is moved to the end position of the cut made. 

<P>
The commands given are one of those listed below. The command name starts from the first column of a line and the command and its arguments are separated by a space. All the command arguments are integers. 

<P>

<P>
<BR>

<TABLE COLS=2>
<COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<TT>start</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Specifies the start position of a path. This command itself does not specify any cutting; </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> it only sets the <SPAN  CLASS="textit">current position</SPAN> to be <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>line</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Specifies a linear cut along a straight line from the current position to the position <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>, </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> which is not identical to the <SPAN  CLASS="textit">current position</SPAN>. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>arc</TT> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I>&nbsp;<I>r</I></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Specifies a round cut along a circular arc. The arc starts from the <SPAN  CLASS="textit">current position</SPAN> and </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> ends at <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN>
<tex2html_verbatim_mark>, which is not identical to the <SPAN  CLASS="textit">current position</SPAN>. The arc has a radius of <SPAN CLASS="MATH">| <I>r</I>|</SPAN>
<tex2html_verbatim_mark>. </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> When <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> is negative, the center of the circle is to the left side of the direction of this round </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> cut; when it is positive, it is to the right side (Figure 7). The absolute value of <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> is greater </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> than the half distance of the two ends of the arc. Among two arcs connecting the start </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> and the end positions with the specified radius, the arc specified is one with its central </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> angle less than 180 degrees. </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<TT>close</TT> </TD><TD></TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> Closes a path by making a linear cut to the initial start position and terminates a dataset. </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> If the <SPAN  CLASS="textit">current position</SPAN> is already at the start position, this command simply indicates the </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> end of a dataset.
</TD></TR>
</TABLE>

<P>

<P>
<BR>
The figure below gives an example of a command sequence and its corresponding path. Note that, in this case, the given radius <SPAN CLASS="MATH">- <I>r</I></SPAN>
<tex2html_verbatim_mark> is negative and thus the center of the arc is to the left of the arc. The arc command should be interpreted as shown in this figure and, not the other way around on the same circle.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4164a.eps}$
 -->
<IMG
 WIDTH="702" HEIGHT="396" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="\epsfbox{p4164a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 7: A partial command sequence and the path specified so far

</DIV>

<P>

<P>
<BR>
A dataset starts with a <TT>start</TT> command and ends with a <TT>close</TT> command. 

<P>
The end of the input is specified by a line with a command <TT>end</TT>. 

<P>
There are at most 100 commands in a dataset and at most 100 datasets are in the input. Absolute values of all the coordinates and radii are less than or equal to 100. 

<P>
You may assume that the path does not cross nor touch itself. You may also assume that paths will never expand beyond edges of the cardboard, or, in other words, the cardboard is virtually infinitely large. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each of the dataset, output a line containing <SPAN CLASS="MATH"><I>x</I> -</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>
<tex2html_verbatim_mark>coordinates of the center of mass of the top cut out by the path specified, and then a character `<TT>+</TT>' or `<TT>-</TT>' indicating whether this center is on the top or not, respectively. Two coordinates should be in decimal fractions. There should be a space between two coordinates and between the <SPAN CLASS="MATH"><I>y</I> -</SPAN>
<tex2html_verbatim_mark>coordinate and the character `<TT>+</TT>' or `<TT>-</TT>'. No other characters should be output. The coordinates may have errors less than <SPAN CLASS="MATH">10<SUP>-3</SUP></SPAN>
<tex2html_verbatim_mark> . You may assume that the center of mass is at least <SPAN CLASS="MATH">10<SUP>-3</SUP></SPAN>
<tex2html_verbatim_mark> distant from the path.

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Hints:</SPAN>

<P>

<P>
<BR>
An important nature of mass centers is that, when an object <SPAN CLASS="MATH"><I>O</I></SPAN>
<tex2html_verbatim_mark> can be decomposed into parts <!-- MATH
 $O_{1}, \ldots, O_{n}$
 -->
<SPAN CLASS="MATH"><I>O</I><SUB>1</SUB>,..., <I>O</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> with masses <!-- MATH
 $M_{1}, \ldots, M_{n}$
 -->
<SPAN CLASS="MATH"><I>M</I><SUB>1</SUB>,..., <I>M</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark>, the center of mass of <SPAN CLASS="MATH"><I>O</I></SPAN>
<tex2html_verbatim_mark> can be computed by: 

<P>
<P><!-- MATH
 \begin{displaymath}
G= \frac{\sum^{n}_{i=1} M_{i} \times G_{i}}{\sum^{n}_{i=1}M_{i}}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>G</I> = <IMG
 WIDTH="113" HEIGHT="59" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$\displaystyle {\frac{{\sum^{n}_{i=1} M_{i} \times G_{i}}}{{\sum^{n}_{i=1}M_{i}}}}$">
</DIV><P>
<tex2html_verbatim_mark></P>
where <SPAN CLASS="MATH"><I>G</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> is the vector pointing the center of mass of <SPAN CLASS="MATH"><I>O</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark>. 

<P>

<P>
<BR>
A circular segment with its radius <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> and angle <SPAN CLASS="MATH"><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \theta$"></SPAN>
<tex2html_verbatim_mark> (in radian) has its arc length <!-- MATH
 $s = r\theta$
 -->
<SPAN CLASS="MATH"><I>s</I> = <I>r</I><IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \theta$"></SPAN>
<tex2html_verbatim_mark> and its chord length <!-- MATH
 $c = r \sqrt{2 - 2 \ cos \ \theta}$
 -->
<SPAN CLASS="MATH"><I>c</I> = <I>r</I><IMG
 WIDTH="102" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \sqrt{{2 - 2 \ cos \ \theta}}$"></SPAN>
<tex2html_verbatim_mark>. Its area size is <!-- MATH
 $A = r^{2} (\theta - \mbox{sin} \ \theta)/2$
 -->
<SPAN CLASS="MATH"><I>A</I> = <I>r</I><SUP>2</SUP>(<IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \theta$"> - sin&nbsp;<IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \theta$">)/2</SPAN>
<tex2html_verbatim_mark> and its center of mass <SPAN CLASS="MATH"><I>G</I></SPAN>
<tex2html_verbatim_mark> is <!-- MATH
 $y = 2r^{3} \ \mbox{sin}^{3} \ (\theta/2)/(3A)$
 -->
<SPAN CLASS="MATH"><I>y</I> = 2<I>r</I><SUP>3</SUP>&nbsp;sin<SUP>3</SUP>&nbsp;(<IMG
 WIDTH="13" HEIGHT="15" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="$ \theta$">/2)/(3<I>A</I>)</SPAN>
<tex2html_verbatim_mark> distant from the circle center.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4164b.eps}$
 -->
<IMG
 WIDTH="575" HEIGHT="281" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="\epsfbox{p4164b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 8: Circular segment and its center of mass

</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4164c.eps}$
 -->
<IMG
 WIDTH="409" HEIGHT="641" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4164a.jpg
 ALT="\epsfbox{p4164c.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 9: The first sample top

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
start 0 0 
arc 2 2 -2 
line 2 5 
arc 0 3 -2 
close 
start -1 1 
line 2 1 
line 2 2 
line -2 2 
arc -3 1 -1 
line -3 -2 
arc -2 -3 -1 
line 2 -3 
line 2 -2 
line -1 -2 
line -1 -1 
arc -1 0 2 
close 
start 0 0 
line 3 0 
line 5 -1 
arc 4 -2 -1 
line 6 -2 
line 6 1 
line 7 3 
arc 8 2 -1 
line 8 4 
line 5 4 
line 3 5 
arc 4 6 -1 
line 2 6 
line 2 3 
line 1 1 
arc 0 2 -1 
close 
end
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.00000 2.50000 + 
-1.01522 -0.50000 -
4.00000 2.00000 +
</PRE>

<P>

______________________________________________________
4165||||||false||||||
<P>Math teacher Mr. Matsudaira is teaching expansion and factoring of polynomials to his students. Last week he instructed the students to write two polynomials (with a single variable <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>), and to report GCM (greatest common measure) of them as a homework, but he found it boring to check their answers manually. So you are asked to write a program to check the answers.<P>Hereinafter, only those polynomials with integral coefficients, called integral polynomials, are considered.<P>When two integral polynomials <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are given, an integral polynomial <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is a common factor of <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> if there are some integral polynomials <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>A</I> = <I>CX</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I> = <I>CY</I></SPAN> <tex2html_verbatim_mark>.<P>GCM of two integral polynomials is a common factor which has the highest degree (for <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, here); you have to write a program which calculates the GCM of two polynomials.<P>It is known that GCM of given two polynomials is unique when constant multiplication factor is ignored. That is, when <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> are both GCM of some two polynomials <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I>&#215;<I>C</I> = <I>q</I>&#215;<I>D</I></SPAN> <tex2html_verbatim_mark> for some nonzero integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple datasets. Each dataset constitutes a pair of input lines, each representing a polynomial as an expression defined below.<P><P><BR><OL><LI>A <SPAN CLASS="textit">primary</SPAN> is a variable <TT>x</TT>, a sequence of digits <TT>0 - 9</TT>, or an expression enclosed within (<SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>). Examples: <TT>x</TT>, <TT>99</TT>, <TT>(x+1)</TT>. </LI><LI>A <SPAN CLASS="textit">factor</SPAN> is a primary by itself or a primary followed by an exponent. An exponent consists of a symbol <code>^</code> followed by a sequence of digits <TT>0 - 9</TT>. Examples: <code>x^05</code>, <code>1^15</code>, <code>(x+1)^3</code>. </LI><LI>A <SPAN CLASS="textit">term</SPAN> consists of one or more adjoining factors. Examples: <code>4x</code>, <code>(x+1)(x-2)</code>, <code>3(x+1)^2</code>. </LI><LI>An expression is one or more terms connected by either <TT>+</TT> or <TT>-</TT>. Additionally, the first term of an expression may optionally be preceded with a minus sign <TT>-</TT>. Examples: <code>-x+1</code>, <code>3(x+1)^2-x(x-1)^2</code>. </LI></OL><P><P><BR>Integer constants, exponents, multiplications (adjoining), additions (<TT>+</TT>) and subtractions/negations (<TT>-</TT>) have their ordinary meanings. A sequence of digits is always interpreted as an integer constant. For example, <TT>99</TT> means 99, not <SPAN CLASS="MATH">9&#215;9.</SPAN> <tex2html_verbatim_mark><P>Any subexpressions of the input, when fully expanded normalized, have coefficients less than 100 and degrees of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> less than 10. Digit sequences in exponents represent non-zero values.<P>All the datasets are designed so that a standard algorithm with 32-bit two's complement integers can solve the problem without overflows.<P>The end of the input is indicated by a line containing a period.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each of the dataset, output GCM polynomial expression in a line, in the format below.<P><P><BR><SPAN CLASS="MATH"><I>c</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark><code>x^</code> <SPAN CLASS="MATH"><I>p</I><SUB>0</SUB>&#177;<I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><code>x^</code> <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB><SUP> ... </SUP>&#177;<I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><code>x^</code><SPAN CLASS="MATH"><I>p</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>i</I> = 0,..., <I>n</I>)</SPAN> <tex2html_verbatim_mark> are positive integers with <SPAN CLASS="MATH"><I>p</I><SUB>0</SUB> &gt; <I>p</I><SUB>1</SUB> &gt; <SUP>... </SUP>&gt; <I>p</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, and the greatest common divisor of <SPAN CLASS="MATH">{<I>c</I><SUB>i</SUB>| <I>i</I> = 0,<SUP> ... </SUP>, <I>n</I>}</SPAN> <tex2html_verbatim_mark> is 1.<P>Additionally:<P><P><BR><UL><LI>When <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is equal to 1, it should be omitted unless corresponding <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is 0, </LI><LI><code>x^0</code> should be omitted as a whole, and </LI><LI><code>x^1</code> should be written as <TT>x</TT>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
-(x^3-3x^2+3x-1)
(x-1)^2
x^2+10x+25
x^2+6x+5
x^3+1
x-1
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
x^2-2x+1 
x+5 
1
</PRE><P>
______________________________________________________
4166||||||false||||||

<P>
Given several points on a plane, let's try to solve a puzzle connecting them with a zigzag line. The puzzle is to find the zigzag line that passes through all the given points with the minimum number of turns. Moreover, when there are several zigzag lines with the minimum number of turns, the shortest one among them should be found. 

<P>
For example, consider nine points given in Figure 10.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166a.eps}$
 -->
<IMG
 WIDTH="242" HEIGHT="230" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166a.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 10: Given nine points 

</DIV>

<P>
A zigzag line is composed of several straight line segments. Here, the rule requests that each line segment should pass through two or more given points. 

<P>
A zigzag line may turn at some of the given points or anywhere else. There may be some given points passed more than once.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166b.eps}$
 -->
<IMG
 WIDTH="920" HEIGHT="319" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166b.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 11: Zigzag lines with three turning points.

</DIV>

<P>
Two zigzag lines with three turning points are depicted in Figure 11 (a) and (b) for the same set of given points shown in Figure 10. The length of the zigzag line in Figure 11 (a) is shorter than that in Figure 11 (b). In fact, the length of the zigzag line in Figure 11 (a) is the shortest so that it is the solution for the nine points given in Figure 10. 

<P>
Another zigzag line with four turning points is depicted in Figure 12. Its length is shorter than those in Figure 11, however, the number of turning points is greater than those in Figure 11, and thus, it is not the solution.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166c.eps}$
 -->
<IMG
 WIDTH="217" HEIGHT="191" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166c.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 12: Zigzag line with four turning points.

</DIV>

<P>
There are two zigzag lines that passes another set of given points depicted in Figure 13 (a) and (b). 

<P>
Both have the same number of turning points, and the line in (a) is longer than that in (b). However, the solution is (a), because one of the segments of the zigzag line in (b) passes only one given point, violating the rule.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166d.eps}$
 -->
<IMG
 WIDTH="728" HEIGHT="153" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166d.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 13: Zigzag line with two turning points (a), and not a zigzag line concerned (b).

</DIV>

<P>
Your job is to write a program that solves this puzzle.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input consists of multiple datasets, followed by a line containing one zero. Each dataset has the following format. 

<P>

<P>
<BR>

<TABLE COLS=3>
<COL ALIGN=LEFT><COL ALIGN=CENTER><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN CLASS="MATH"><IMG
 WIDTH="9" HEIGHT="27" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \vdots$"></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
<SPAN CLASS="MATH"><I>x</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark></TD></TR>
</TABLE>

<P>

<P>
<BR>
Every input item in a dataset is a non-negative integer. Items in a line are separated by a single space. 

<P>
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the number of the given points. <SPAN CLASS="MATH"><I>x</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(k = 1, \ldots, n)$
 -->
<SPAN CLASS="MATH">(<I>k</I> = 1,..., <I>n</I>)</SPAN>
<tex2html_verbatim_mark> indicate the position of the <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-th point. The order of the points is meaningless. You can assume that <!-- MATH
 $2 \le n \le 10$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le x_{k} \le 10$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$"><I>x</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>, and <!-- MATH
 $0 \le y_{k} \le 10$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$"><I>y</I><SUB>k</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="$ \le$">10</SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each dataset, the minimum number of turning points and the length of the shortest zigzag line with that number of turning points should be printed, separated by a space in a line. The length should be in a decimal fraction with an error less than 0.0001 <!-- MATH
 $(= 1.0 \times 10^{-4})$
 -->
<SPAN CLASS="MATH">(= 1.0&#215;10<SUP>-4</SUP>)</SPAN>
<tex2html_verbatim_mark>. 

<P>
You may assume that the minimum number of turning points is at most four, that is, the number of line segments is at most five. 

<P>
The example solutions for the first four datasets in the sample input are depicted in Figure 14 and 15.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166e.eps}$
 -->
<IMG
 WIDTH="805" HEIGHT="320" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166e.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 14: Example solutions for the first and the second datasets in the sample inputs.

</DIV>

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4166f.eps}$
 -->
<IMG
 WIDTH="805" HEIGHT="319" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4166a.jpg
 ALT="\epsfbox{p4166f.eps}">
<tex2html_verbatim_mark>
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 15: Example solutions for the third and the fourth datasets in the sample inputs.

</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
0 0 
10 9 
4 
0 0 
3 1 
0 3 
3 3 
10 
2 2 
4 2 
6 2 
2 4 
4 4 
6 4 
2 6 
4 6 
6 6 
3 3 
10 
0 0 
2 0 
4 0 
0 2 
2 2 
4 2 
0 4 
2 4 
4 4 
6 8 
9 
0 0 
1 0 
3 0 
0 1 
1 1 
3 1 
0 2 
1 2 
2 2 
10 
0 0 
1 0 
0 1 
1 1 
9 9 
9 10 
10 9 
10 10 
0 2 
10 8 
10 
0 0 
0 10 
2 0 
2 1 
2 7 
2 10 
5 1 
6 7 
9 2 
10 9 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 13.45362405
1 18.48683298
3 24.14213562
4 24.94813673
3 12.24264069
3 60.78289622
3 502.7804353

______________________________________________________
4167||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Parity</title> <meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem A: Parity</h1><center><table><tbody><tr><td>Source file:</td><td><tt>parity.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>parity.in</tt></td></tr></tbody></table></center><p>A bit string has <dfn>odd parity</dfn> if the number of 1's is odd. A bit string has <dfn>even parity</dfn> if the number of 1's is even. Zero is considered to be an even number, so a bit string with no 1's has even parity. Note that the number of 0's does not affect the parity of a bit string.</p><p><b>Input:</b> The input consists of one or more strings, each on a line by itself, followed by a line containing only "#" that signals the end of the input. Each string contains 1&ndash;31 bits followed by either a lowercase letter 'e' or a lowercase letter 'o'.</p><p><b>Output:</b> Each line of output must look just like the corresponding line of input, except that the letter at the end is replaced by the correct bit so that the entire bit string has even parity (if the letter was 'e') or odd parity (if the letter was 'o').</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">101e<br>010010o<br>1e<br>000e<br>110100101o<br>#</td><td style="font-family: monospace;" valign="top">1010<br>0100101<br>11<br>0000<br>1101001010</td></tr></tbody></table><p><small><i>Last modified on October 7, 2008 at 5:28 PM.</i></small></p></body></html>
______________________________________________________
4168||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>Lampyridae Teleportae</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem B: Lampyridae Teleportae</h1><center><table><tbody><tr><td>Source file:</td><td><tt>firefly.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>firefly.in</tt></td></tr></tbody></table></center><p>The discovery of a remarkable new insect, the Lampyridae Teleportae, more commonly known as the teleporting firefly, has sparked a no-less-remarkable number of ways to try to catch them. Rather than flying, the Lampyridae Teleportae teleports from spot to spot by warping space-time. When it stops between teleports, it hovers for a moment and flashes its light in search of a mate. So, even though they only come out after dark, it's easy to observe them, but very difficult to catch them. Fortunately for the Association for Catching Lampyridae (ACL), student members of the Association for Cool Machinery (ACM) recently developed the world's first teleporting tennis shoes. The tennis shoes are efficient enough that, when a Lampyridae Teleportae is spotted by its flash, there is always time to teleport once before the firefly itself teleports off to another location, but there is never time to teleport twice in a row before the firefly teleports away. The tennis shoes have a maximum teleport range, however, depending on how well their flux capacitor is constructed, so it's not always possible to catch a Lampyridae Teleportae with just a single teleport. The most efficient catching method is to remain in place until a firefly flashes, and to then teleport in a straight line directly toward it, subject to the limitation of the maximum range of ones tennis shoes, in an attempt to get close enough to catch it. If you don't get close enough, you wait for the next flash, teleport towards it again, and repeat, until you either catch it or it's gone.</p><p>For this programming problem you will simulate this procedure for catching teleporting fireflies with a few simplifying assumptions: (1) We will be chasing only one firefly at a time. (2) Firefly chasing will take place in two dimensions where all units are considered to be yards. (3) The firefly is "caught" if the chaser can manage to come within one yard of the firefly. (4) The chaser's movement toward a firefly is always in a straight line from his or her current location directly toward the flash; if the range of the chaser's tennis shoes prevents getting close enough to catch the firefly, the chaser will always teleport the maximum range possible (thus, although the chaser always starts at integer coordinates, it is possible and likely that any or all of the chaser's locations after the first teleport will be at non-integer coordinates).<p><p>The input will consist of several chase scenarios. For each scenario you will be given the maximum range in yards of the chaser's teleporting tennis shoes, the chaser's starting location, and a list of one or more flash locations for the firefly being chased. For each chase scenario your program will output a single line indicating either the flash location where the firefly was caught, or a message noting that the firefly was never caught.<p><p><b>Input:</b> The first line of a chase scenario contains three numbers, delimited by a single space, in the following order: the maximum range in yards of the chaser's teleporting tennis shoes, the starting x-coordinate of the chaser, and the starting y-coordinate of the chaser. The maximum range will be a positive integer from 1 to 1000. The x and y values for the starting coordinates will be integers from 0 to 1000. The remaining lines of an input scenario contain two integers each, an x-coordinate and a y-coordinate, again delimited by a single space. These are, in order of appearance, the locations where the firefly flashes. All coordinate values range from 0 to 1000. A line specifying a value of -1 for both x and y terminates the list, at which point we consider the firefly to disappear never to be seen again. Note that a firefly might be caught at a flash location prior to end of the list; in this case the rest of the flash locations listed in the input for the current chase scenario should simply be ignored.</p><p>The next input scenario begins on the line immediately after the last line of the preceding scenario. An input scenario that specifies 0 (zero) as the maximum range of the chaser will terminate the input.</p><p><b>Output:</b> Every output line will be either: (1) "Firefly N caught at (x,y)", where N is the input scenario number starting with 1, and (x,y) is the last location the firefly flashed before it was caught; or (2) "Firefly N not caught".</p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace; letter-spacing: 2px;"><pre>2 0 0
3 3
4 4
5 5
6 6
7 7
-1 -1
2 0 0
3 3
5 5
7 7
-1 -1
10 50 50
50 62
40 55
30 55
45 45
50 50
55 55
50 50
-1 -1
0 0 0
</pre></td><td style="font-family: monospace; letter-spacing: 2px;" valign="top"><pre>Firefly 1 caught at (6,6)
Firefly 2 not caught
Firefly 3 caught at (50,50)
</pre></td></tr></tbody></table><p><small><i>Last modified on October 7, 2008 at 1:56 PM.</i></small></p></body></html>
______________________________________________________
4169||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Hex Tile Equations</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Andy Harrington"></head><body style="background-color: white;"><h1 style="text-align: center;" align="center">Problem C: Hex Tile Equations</h1><center><table><tbody><tr><td>Source file:</td><td><tt>hex.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>hex.in</tt></td></tr></tbody></table></center><br><center><table style="text-align: center; width: 406px; height: 204px;" border="1" cellpadding="2" cellspacing="2"><tbody><tr><td><img style="width: 74px; height: 162px;" alt="first hex pattern" src="http://livearchive.onlinejudge.org/external/41/p4169a.png></td><td><p><img style="width: 143px; height: 104px;" alt="hex tile pattern with equation" src="http://livearchive.onlinejudge.org/external/41/p4169a.png></p></td></tr><tr><td>Figure 1</td><td>Figure 2</td></tr></tbody></table></center><p>An amusing puzzle consists of a collection of hexagonal tiles packed together with each tile showing a digit or '=' or an arithmetic operation '+', '-', '*', or '/'. Consider continuous paths going through each tile exactly once, with each successive tile being an immediate neighbor of the previous tile. The object is to choose such a path so the sequence of characters on the tiles makes an <span style="font-style: italic;">acceptable</span> equation, according to the restrictions listed below. A sequence is illustrated in each figure above. In Figure 1, if you follow the gray path from the top, the character sequence is"6/3=9-7". Similarly, in Figure 2, start from the bottom left 3 to get "3*21+10=73".</p><p>There are a lot of potential paths through a moderate sized hex tile pattern. A puzzle player may get frustrated and want to see the answer. Your task is to automate the solution.</p><p>The arrangement of hex tiles and choices of characters in each puzzle satisfy these rules:</p><ol></ol><ol><li>The hex pattern has an odd number of rows greater than 2. The odd numbered rows will all contain the same number of tiles. Even numbered rows will have one more hex tile than the odd numbered rows and these longer even numbered rows will stick out both to the left and the right of the odd numbered rows.</li><li>There is exactly one '=' in the hex pattern.</li><li>There are no more than two '*' characters in the hex pattern.</li><li>There will be fewer than 14 total tiles in the hex pattern.</li><li>With the restrictions on allowed character sequences described below, there will be a unique acceptable solution in the hex pattern.</li></ol><ol></ol><p>To have an acceptable solution from the characters in some path, the expressions on each side of the equal sign must be in acceptable form and evaluate to the same numeric value. The following rules define acceptable form of the expressions on each side of the equal sign and the method of expression evaluation:</p><ul></ul><ol start="6"><li>The operators '+', '-', '*', and '/' are only considered as binary operators, so no character sequences where '+' or '-' would be a unary operator are acceptable. For example "-2*3=-6" and "1 =5+-4" are not acceptable.</li><li>The usual precedence of operations is not used. Instead all operations have equal precedence and operations are carried out from left to right. For example "44-4/2=2+3*4" is acceptable and "14=2+3*4" is not acceptable.</li><li>If a division operation is included, the equation can only be acceptable if the division operation works out to an exact integer result. For example "10/5=12/6" and "7+3/5=3*4/6" are acceptable. "5/2*4=10" is not acceptable because the sides would only be equal with exact mathematical calculation including an intermediate fractional result. "5/2*4=8" is not acceptable because the sides of the equation would only be equal if division were done with truncation.</li><li>At most two digits together are acceptable. For example, "123+1 = 124" is not acceptable.</li><li>A character sequences with a '0' directly followed by another digit is not acceptable. For example, "3*05=15" is not acceptable.</li></ol><ul></ul><p>With the assumptions above, an acceptable expression will never involve an intermediate or final arithmetic result with magnitude over three million.</p><p><b>Input:</b> The input will consist of one to fifteen data sets, followed by a line containing only 0.</p><p>The first line of a dataset contains blank separated integers <span style="font-style: italic;">r&nbsp;c</span>, where <span style="font-style: italic;">r</span> is the number of rows in the hex pattern and <span style="font-style: italic;">c</span> is the number of entries in the odd numbered rows. The next <span style="font-style: italic;">r</span> lines contain the characters on the hex tiles, one row per line. All hex tile characters for a row are blank separated. The lines for odd numbered rows also start with a blank, to better simulate the way the hexagons fit together. Properties 1-5 apply.</p><p><b>Output:</b> There is one line of output for each data set. It is the unique acceptable equation according to rules 6-10 above. The line includes no spaces.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">5 1<br>&nbsp;6<br>/ 3<br>&nbsp;=<br>9 -<br>&nbsp;7<br>3 3<br>&nbsp;1 + 1<br>* 2 0 =<br>&nbsp;3 3 7<br>5 2<br>&nbsp;9 -<br>* 2 =<br>&nbsp;3 4<br>+ 8 3<br>&nbsp;4 /<br>0<br></td><td style="font-family: monospace;" valign="top">6/3=9-7<br>3*21+10=73<br>8/4+3*9-2=43<br><br><br></td></tr></tbody></table><p><small><i>Last modified on October 26, 2008 at 9:27 PM.</i></small></p></body></html>
______________________________________________________
4170||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>The Bridges of San Mochti</title> <meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem D: The Bridges of San Mochti</h1><center><table><tbody><tr><td>Source file:</td><td><tt>bridges.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>bridges.in</tt></td></tr></tbody></table></center><p>You work at a military training facility in the jungles of San Motchi. One of the training exercises is to cross a series of rope bridges set high in the trees. Every bridge has a maximum capacity, which is the number of people that the bridge can support without breaking. The goal is to cross the bridges as quickly as possible, subject to the following tactical requirements:</p><dl><dt><i>One unit at a time!</i></dt><dd>If two or more people can cross a bridge at the same time (because they do not exceed the capacity), they do so as a unit; they walk as close together as possible, and they all take a step at the same time. It is never acceptable to have two different units on the same bridge at the same time, even if they don't exceed the capacity. Having multiple units on a bridge is not tactically sound, and multiple units can cause oscillations in the rope that slow everyone down. This rule applies even if a unit contains only a single person.</dd><dt><i>Keep moving!</i></dt><dd>When a bridge is free, as many people as possible begin to cross it as a unit. Note that this strategy doesn't always lead to an optimal overall crossing time (it may be faster for a group to wait for people behind them to catch up so that more people can cross at once). But it is not tactically sound for a group to wait, because the people they're waiting for might not make it, and then they've not only wasted time but endangered themselves as well.</dd></dl><p>Periodically the bridges are reconfigured to give the trainees a different challenge. Given a bridge configuration, your job is to calculate the minimum amount of time it would take a group of people to cross all the bridges subject to these requirements.</p><p>For example, suppose you have nine people who must cross two bridges: the first has capacity 3 and takes 10 seconds to cross; the second has capacity 4 and takes 60 seconds to cross. The initial state can be represented as (9&nbsp;0&nbsp;0), meaning that 9 people are waiting to cross the first bridge, no one is waiting to cross the second bridge, and no one has crossed the last bridge. At 10 seconds the state is (6&nbsp;3&nbsp;0). At 20 seconds the state is (3&nbsp;3&nbsp;/3:50/&nbsp;0), where /3:50/ means that a unit of three people is crossing the second bridge and has 50 seconds left. At 30 seconds the state is (0&nbsp;6&nbsp;/3:40/&nbsp;0); at 70 seconds it's (0&nbsp;6&nbsp;3); at 130 seconds it's (0&nbsp;2&nbsp;7); and at 190 seconds it's (0&nbsp;0&nbsp;9). Thus the total minimum time is 190 seconds.</p><p><b>Input:</b> The input consists of one or more bridge configurations, followed by a line containing two zeros that signals the end of the input. Each bridge configuration begins with a line containing a negative integer &ndash;B and a positive integer P, where B is the number of bridges and P is the total number of people that must cross the bridges. Both B and P will be at most 20. (The reason for putting &ndash;B in the input file is to make the first line of a configuration stand out from the remaining lines.) Following are B lines, one for each bridge, listed in order from the first bridge that must be crossed to the last. Each bridge is defined by two positive integers C and T, where C is the capacity of the bridge (the maximum number of people the bridge can hold), and T is the time it takes to cross the bridge (in seconds). C will be at most 5, and T will be at most 100. Only one unit, of size at most C, can cross a bridge at a time; the time required is always T, regardless of the size of the unit (since they all move as one). The end of one bridge is always close to the beginning of the next, so the travel time between bridges is zero.</p><p><b>Output:</b> For each bridge configuration, output one line containing the minimum amount of time it will take (in seconds) for all of the people to cross all of the bridges while meeting both tactical requirements.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">-1 2<br>5 17<br>-1 8<br>3 25<br>-2 9<br>3 10<br>4 60<br>-3 10<br>2 10<br>3 30<br>2 15<br>-4 8<br>1 8<br>4 30<br>2 10<br>1 12<br>0 0</td><td style="font-family: monospace;" valign="top">17<br>75<br>190<br>145<br>162</td></tr></tbody></table><p><small><i>Last modified on October 22, 2008 at 10:24 PM.</i></small></p></body></html>
______________________________________________________
4171||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Bulletin Board</title> <meta name="Author" content="Eric Shade"><meta name="author" content="Andy Harrington"></head><body style="background-color: white;"><h1 style="text-align: center;" align="center">Problem E: Bulletin Board</h1><center><table><tbody><tr><td>Source file:</td><td><tt>bulletin.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>bulletin.in</tt></td></tr></tbody></table></center><p style="text-align: center;"><img style="width: 254px; height: 224px;" alt="posters" src="http://livearchive.onlinejudge.org/external/41/p4171.png></p><p>The ACM Student Chapter has just been given custody of a number of school bulletin boards. Several members agreed to clear off the old posters. They found posters plastered many levels deep. They made a bet about how much area was left clear, what was the greatest depth of posters on top of each other, and how much of the area was covered to this greatest depth. To determine each bet's winner, they made very accurate measurements of all the poster positions as they removed them. Because of the large number of posters, they now need a program to do the calculations. That is your job.</p><p>A simple illustration is shown above: a bulletin board 45 units wide by 40 high, with three posters, one with corners at coordinates (10, 10) and (35, 20), another with corners at (20, 25) and (40, 35), and the last with corners at (25, 5) and (30, 30). The total area not covered by any poster is 1300. The maximum number of posters on top of each other is 2. The total area covered by exactly 2 posters is 75.</p><p><b>Input:</b> The input will consist of one to twenty data sets, followed by a line containing only 0. On each line the data will consist of blank separated nonnegative integers.</p><p>The first line of a dataset contains integers <span style="font-style: italic;">n w h</span>, where <span style="font-style: italic;">n</span> is the number of posters on the bulletin board, <span style="font-style: italic;"></span><span style="font-style: italic;">w</span> and <span style="font-style: italic;">h</span> are the width and height of the bulletin board<span style="font-style: italic;"></span>. Constraints are 0 &lt; <span style="font-style: italic;">n</span> &#8804; 100;&nbsp;0 &lt;<span style="font-style: italic;"> w</span>&nbsp;&#8804; 50000; 0 &lt; <span style="font-style: italic;">h</span> &#8804; 40000.</p><p>The dataset ends with n lines, each describing the location of one poster. Each poster is rectangular and has horizontal and vertical sides. The x and y coordinates are measured from one corner of the bulletin board. Each line contains four numbers <span style="font-style: italic;">xl</span> <span style="font-style: italic;">yl</span> <span style="font-style: italic;">xh</span> and <span style="font-style: italic;">yh</span>, where <span style="font-style: italic;">xl</span> and <span style="font-style: italic;">yl</span>, are the lowest values of the x and y coordinates in one corner of the poster and <span style="font-style: italic;">xh</span> and <span style="font-style: italic;">yh</span> are the highest values in the diagonally opposite corner. Each poster fits on the bulletin board, so 0 &#8804; <span style="font-style: italic;">xl</span> &lt; <span style="font-style: italic;">xh</span> &#8804; <span style="font-style: italic;">w</span>, and 0 &#8804; <span style="font-style: italic;">yl</span> &lt; <span style="font-style: italic;">yh</span> &#8804; <span style="font-style: italic;">h</span>.</p><p><b>Output:</b> There is one line of output for each data set containing three integers, the total area of the bulletin board that is not covered by any poster, <span style="font-style: italic;"></span>the maximum depth of posters on top of each other, and <span style="font-style: italic;"></span>the total area covered this maximum number of times.</p>Caution: An approach examining every pair of integer coordinates might need to deal with 2 billion coordinate pairs.<br><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">3 45 40<br>10 10 35 20<br>20 25 40 35<br>25 5 30 30<br>1 20 30<br>5 5 15 25<br>2 2000 1000<br>0 0 1000 1000<br>1000 0 2000 1000<br>3 10 10<br>0 0 10 10<br>0 0 10 10<br>0 0 10 10<br>0<br></td><td style="font-family: monospace;" valign="top">1300 2 75<br>400 1 200<br>0 1 2000000<br>0 3 100<br><br><br></td></tr></tbody></table><p><small><i>Last modified on October 26, 2008 at 10:00 PM.</i></small></p></body></html>
______________________________________________________
4172||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>Serial Numbers</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem F: Serial Numbers</h1><center><table><tbody><tr><td>Source file:</td><td><tt>serials.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>serials.in</tt></td></tr></tbody></table></center><p>A manufacturer keeps an ordered table of serial numbers by listing in each row of the table a range of serial numbers along with two corresponding pieces of information called the status code and the transfer code. A four-column table stores information about ranges of serial numbers in this order: starting serial number, ending serial number, status code, transfer code. Serial numbers as well as transfer codes are integers from 1 to 2<sup>31</sup>-1 (2<sup>31</sup>-1 = 2147483647), and status codes are a single upper-case letter. The table is maintained in increasing order of serial numbers, serial number ranges are never allowed to overlap, and for any given serial number, the table must always accurately represent the most recent data (status code and transfer code) for that serial number.</p><p>Let's say that 100,000 serial numbers are created with a status of "A" and a transfer code of "1". An entry for those serial numbers might look like this:</p><pre>1 100000 A 1</pre><p>This is obviously far more efficient than storing 100,000 individual rows all with the same status and transfer codes. The challenge arises when serial numbers within already defined ranges need to be given different status or transfer codes. For example, if serial number 12345 needs to change to status B, the above table would need to become three separate entries:</p><pre>1 12344 A 1
12345 12345 B 1
12346 100000 A 1</pre><p>Now let's change the transfer code of all serial numbers in the range 12000 to 12999 to 2. This gets us:</p><pre>1 11999 A 1
12000 12344 A 2
12345 12345 B 2
12346 12999 A 2
13000 100000 A 1</pre><p>Now change all existing serial numbers from 10000 to 100000 to status C and transfer code 2:</p><pre>1 9999 A 1
10000 100000 C 2</pre><p>Once created a serial number will never be deleted, but it is possible to have ranges of undefined serial numbers between ranges of defined ones. To demonstrate, let's now set all serial numbers from 1000000 to 1999999 to status Z and transfer code 99:</p><pre>1 9999 A 1
10000 100000 C 2
1000000 1999999 Z 99</pre><p>Finally, the table is always maintained with a minimal number of rows, meaning specifically that there will never be two adjacent rows in the table where one would suffice. For example, consider the following serial number table:</p><pre>1 10 A 1
11 20 A 1
21 30 B 1</pre><p>The first two rows could actually be represented by a single row, meaning that the table above does not have a minimal number of rows. The same data represented by a minimal number of rows would look like this:</p><pre>1 20 A 1
21 30 B 1</pre><p>The following table, however, because the first two rows have non-matching transfer codes, already contains the minimal number of rows:</p><pre>1 10 A 1
11 20 A 2
21 30 B 1</pre><p>Similarly, the following table cannot be reduced further because the first two rows do not represent a continuous series of serial numbers:</p><pre>1 10 A 1
12 20 A 1
21 30 B 1</pre><p><b>Input:</b> Each input case begins with a single line that is a character string naming the test case. This string contains at most 80 characters. The name "END" marks the end of the input. Following this will be 1 to 100 lines of the form "A B S T", where A, B, and T are integers in the range 1 to 2<sup>31</sup>-1, S is an uppercase letter, and A&lt;=B. These lines are, in the order they are to be applied, the serial number transactions to be recorded, where A is the start of the serial number range, B is the end of the serial number range, S is the status code, and T is the transfer code. The list of serial number transactions is terminated by a line containing only a 0 (zero) character.</p><p><b>Output:</b> For each input case, echo the test case name to the output on a line by itself, followed by the resulting minimal-rows serial number table that results after all serial number transactions have been applied.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace; letter-spacing: 2px;"><pre>First Example
1 100000 A 1
12345 12345 B 1
0
And Another
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
0
Test Case Three
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
10000 100000 C 2
0
Example Four
1 100000 A 1
12345 12345 B 1
12000 12999 A 2
12345 12345 B 2
10000 100000 C 2
1000000 1999999 Z 99
0
Example 5
1 10 A 1
21 30 B 1
11 20 A 1
0
Example 6
21 30 B 1
1 10 A 1
11 20 A 2
0
Example 7
12 20 A 1
21 30 B 1
1 10 A 1
0
END
</pre></td><td style="font-family: monospace; letter-spacing: 2px;" valign="top"><pre>First Example
1 12344 A 1
12345 12345 B 1
12346 100000 A 1
And Another
1 11999 A 1
12000 12344 A 2
12345 12345 B 2
12346 12999 A 2
13000 100000 A 1
Test Case Three
1 9999 A 1
10000 100000 C 2
Example Four
1 9999 A 1
10000 100000 C 2
1000000 1999999 Z 99
Example 5
1 20 A 1
21 30 B 1
Example 6
1 10 A 1
11 20 A 2
21 30 B 1
Example 7
1 10 A 1
12 20 A 1
21 30 B 1
</pre></td></tr></tbody></table><p><small><i>Last modified on October 26, 2008 at 2:20 PM.</i></small></p></body></html>
______________________________________________________
4173||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>Line &amp; Circle Maze</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><meta name="Author" content="Ron Pacheco"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem G: Line &amp; Circle Maze</h1><center><table><tbody><tr><td>Source file:</td><td><tt>maze.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>maze.in</tt></td></tr></tbody></table></center><p>A deranged algorithms professor has devised a terrible final exam: he throws his students into a strange maze formed entirely of linear and circular paths, with line segment endpoints and object intersections forming the junctions of the maze. The professor gives his students a map of the maze and a fixed amount of time to find the exit before he floods the maze with xerobiton particles, causing anyone still in the maze to be immediately inverted at the quantum level. Students who escape pass the course; those who don't are trapped forever in a parallel universe where the grass is blue and the sky is green.</p><p>The entrance and the exit are always at a junction as defined above. Knowing that clever ACM programming students will always follow the shortest possible path between two junctions, he chooses the entrance and exit junctions so that the distance that they have to travel is as far as possible. That is, he examines all pairs of junctions that have a path between them, and selects a pair of junctions whose shortest path distance is the longest possible for the maze (which he rebuilds every semester, of course, as the motivation to cheat on this exam is very high).</p><p>The joy he derives from quantumly inverting the majority of his students is marred by the tedium of computing the length of the longest of the shortest paths (he needs this to know to decide how much time to put on the clock), so he wants you to write a program to do it for him. He already has a program that generates the mazes, essentially just a random collection of line segments and circles. Your job is to take that collection of line segments and circles, determine the shortest paths between all the distinct pairs of junctions, and report the length of the longest one.</><p>The input to your program is the output of the program that generates his mazes. That program was written by another student, much like yourself, and it meets a few of the professor's specifications: 1) No endpoint of a line segment will lie on a circle; 2) No line segment will intersect a circle at a tangent; 3) If two circles intersect, they intersect at exactly two distinct points; 4) Every maze contains at least two junctions; that is, a minimum maze is either a single line segment, or two circles that intersect. There is, however, one bug in the program. (He would like to have it fixed, but unfortunately the student who wrote the code never gave him the source, and is now forever trapped in a parallel universe.) That bug is that the maze is not always entirely connected. There might be line segments or circles, or both, off by themselves that intersect nothing, or even little "submazes" composed of intersecting line segments and circles that as a whole are not connected to the rest of the maze. The professor insists that your solution account for this! The length that you report must be for a path between connected junctions!<p><p><b>Examples:</b><table border="0"><tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td><td>&nbsp;</td><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td></tr><!--<tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td><td>&nbsp;</td><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td></tr>--><tr><td width="400px">Line segments only. The large dots are the junction pair whose shortest path is the longest possible.</td><td>&nbsp;</td><td width="400px">An example using circles only. Note that in this case there is also another pair of junctions with the same length longest possible shortest path.</td></tr></table><br/> <br/><table border="0"><tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td><td>&nbsp;</td><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td></tr><!--<tr><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td><td>&nbsp;</td><td><img src="http://livearchive.onlinejudge.org/external/41/p4173a.png /></td></tr>--><tr><td width="400px">Disconnected components.</td><td>&nbsp;</td><td width="400px">Now the line segments are connected by a circle, allowing for a longer shortest path.</td></tr></table></p><p><b>Input:</b> An input test case is a collection of line segments and circles. A line segment is specified as "L X<sub>1</sub> Y<sub>1</sub> X<sub>2</sub> Y<sub>2</sub>" where "L" is a literal character, and (X<sub>1</sub>,Y<sub>1</sub>) and (X<sub>2</sub>,Y<sub>2</sub>) are the line segment endpoints. A circle is specified by "C X Y R" where "C" is a literal character, (X,Y) is the center of the circle, and R is its radius. All input values are integers, and line segment and circle objects are entirely contained in the first quadrant within the box defined by (0,0) at the lower left and (100,100) at the upper right. Each test case will consist of from 1 to 20 objects, terminated by a line containing only a single asterisk. Following the final test case, a line containing only a single asterisk marks the end of the input.</p><p><b>Output:</b> For each input maze, output "Case N: ", where N is the input case number starting at one (1), followed by the length, rounded to one decimal, of the longest possible shortest path between a pair of connected junctions.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example Input:</b></td><td><b>Example Output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace; letter-spacing: 2px;"><pre>L 10 0 50 40
L 10 40 50 0
L 10 10 60 10
L 0 30 50 30
*
C 25 25 25
C 50 25 25
C 25 50 25
C 50 50 25
*
L 0 0 80 80
L 80 100 100 80
*
L 0 0 80 80
L 80 100 100 80
C 85 85 10
*
*
</pre></td><td style="font-family: monospace; letter-spacing: 2px;" valign="top"><pre>Case 1: 68.3
Case 2: 78.5
Case 3: 113.1
Case 4: 140.8
</pre></td></tr></tbody></table><p>Note: It is recommended that the atan2() function, rather than acos() or asin(), be used when calculating arc angles.</p><p><small><i>Last modified on October 26, 2008 at 2:15 PM.</i></small></p></body></html>
______________________________________________________
4174||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><meta http-equiv="Content-Type" content="text/html; charset=us-ascii"><title>Steganography</title> <meta name="author" content="Eric Shade"></head><body style="background-color: white;" lang="EN-US"><h1 style="text-align: center;" align="center">Problem H: Steganography</h1><center><table><tbody><tr><td>Source file:</td><td><tt>steg.</tt>{<tt>c</tt>, <tt>cpp</tt>, <tt>java</tt>}</td></tr><tr><td>Input file:</td><td><tt>steg.in</tt></td></tr></tbody></table></center><p>In cryptography, the goal is to encrypt a message so that, even if the the message is intercepted, only the intended recipient can decrypt it. In <dfn>steganography</dfn>, which literally means &quot;hidden writing&quot;, the goal is to hide the fact that a message has even been sent. It has been in use since 440 BC. Historical methods of steganography include invisible inks and tatooing messages on messengers where they can't easily be seen. A modern method is to encode a message using the least-significant bits of the RGB color values of pixels in a digital image.</p><p>For this problem you will uncover messages hidden in plain text. The spaces within the text encode bits; an odd number of consecutive spaces encodes a 0 and an even number of consecutive spaces encodes a 1. The four texts in the example input below (terminated by asterisks) encode the following bit strings: 11111, 000010001101101, 01, and 000100010100010011111. Each group of five consecutive bits represents a binary number in the range 0&ndash;31, which is converted to a character according to the table below. If the last group contains fewer than five bits, it is padded on the right with 0's.</p><table align="center"><tr><td>" " (space)</td><td align="right">0</td></tr><tr><td>"<tt>A</tt>" &ndash; "<tt>Z</tt>"</td><td align="right">1&ndash;26</td></tr><tr><td>"<tt>'</tt>" (apostrophe)</td><td align="right">27</td></tr><tr><td>"<tt>,</tt>" (comma)</td><td align="right">28</td></tr><tr><td>"<tt>-</tt>" (hyphen)</td><td align="right">29</td></tr><tr><td>"<tt>.</tt>" (period)</td><td align="right">30</td></tr><tr><td>"<tt>?</tt>" (question mark)</td><td align="right">31</td></tr></table><p>The first message is 11111<sub><font size="-2">2</font></sub> = 31<sub><font size="-2">10</font></sub> = "?". The second message is (00001, 00011, 01101)<sub><font size="-2">2</font></sub> = (1, 3, 13)<sub><font size="-2">10</font></sub> = "ACM". The third message is 01<u>000</u><sub><font size="-2">2</font></sub> = 8<sub><font size="-2">10</font></sub> = "H", where the underlined 0's are padding bits. The fourth message is (00010, 00101, 00010, 01111, 1<u>0000</u>)<sub><font size="-2">2</font></sub> = (2, 5, 2, 15, 16)<sub><font size="-2">10</font></sub> = "BEBOP".</p><p><b>Input:</b> The input consists of one or more texts. Each text contains one or more lines, each of length at most 80 characters, followed by a line containing only "*" (an asterisk) that signals the end of the text. A line containing only "#" signals the end of the input. In addition to spaces, text lines may contain any ASCII letters, digits, or punctuation, except for "*" and "#", which are used only as sentinels.</p><p><b>Output:</b> For each input text, output the hidden message on a line by itself. Hidden messages will be 1&ndash;64 characters long.</p><p><b>Note:</b> Input text lines and output message lines conform to all of the whitespace rules listed in item 7 of <i>Notes to Teams</i> except that there may be consecutive spaces <em>within</em> a line. There will be no spaces at the beginning or end of a line.</p><table border="1" cellpadding="10"><thead><tr><td><b>Example input:</b></td><td><b>Example output:</b></td></tr></thead><tbody><tr><td style="font-family: monospace;">Programmer,<br>I&nbsp; would&nbsp; like&nbsp; to&nbsp; see<br>a&nbsp; question<br>mark.<br>*<br>Behold, there is more to&nbsp; me than you might<br>think&nbsp; when&nbsp; you read&nbsp; me&nbsp; the first&nbsp; time.<br>*<br>Symbol&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp; hydrogen?<br>*<br>A B C D&nbsp; E F G H&nbsp; I J&nbsp; K L M N&nbsp; O P Q&nbsp; R&nbsp; S&nbsp; T&nbsp; U&nbsp; V<br>*<br>#</td><td style="font-family: monospace;" valign="top">?<br>ACM<br>H<br>BEBOP</td></tr></tbody></table><p><small><i>Last modified on October 21, 2008 at 9:17 PM.</i></small></p></body></html>
______________________________________________________
4175||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="650" HEIGHT="514" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4175.jpg ALT="\epsfbox{p4175.eps}"> <tex2html_verbatim_mark></DIV><P>Super-agent 00X had a narrow escape, and he even lost the blueprint of the multiconnected planar neuron computer which he was supposed to bring back to Mother! All he has left in his photogenic memory is the arrangement of the neurons and the number of sockets that were in use at each neuron. He distinctly remembers that neurons were arranged on a simple grid labeled in the style of algebraic chess notation, that they could only be connected to their (up to 8) immediately adjacent neurons, and that the connections between neurons never crossed.<P>Your assignment is to write a program which 00X will submit to his trusty Qu&#228;lgeist Pro computer in order to recover the blueprint and please Mother.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of lines with numbers, separated by white space as follows:<P><P><BR><TABLE COLS=4 BORDER RULES=GROUPS><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>line</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>content</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>example</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>comment</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>rows cols</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 4</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>dimension of a rectangle, up to <SPAN CLASS="MATH">9&#215;9</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>2..</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>n</I><SUB>1</SUB>&nbsp;<I>n</I><SUB>2</SUB>..<I>n</I><SUB>cols</SUB></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>1 2 5 2</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>number of sockets in use at a neuron, 0 to 8</TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>3 6 5 3</TT></TD><TD></TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>2 4 2 3</TT></TD><TD></TD></TR></TBODY></TABLE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is <TT>SORRY MOM</TT> if you cannot restore the blueprint at all, or a series of connections, one connection per line. Each connection consists of the column and row of the neuron where the connection starts and then the column and row of the neuron where the connection ends, separated by white space. There is no particular order and every connection is listed only once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4
1 2 5 2 
3 6 5 3 
2 4 2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
a3 b2
b3 b2
b3 c3
c3 b2
c3 c2
c3 d2
c3 d3
d3 d2
a2 a1
a2 b1
a2 b2
b2 b1
b2 c2
c2 b1
c2 c1
c2 d1
d2 d1
a1 b1
c1 d1
</PRE><P>
______________________________________________________
4176||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="333" HEIGHT="447" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4176.jpg ALT="\epsfbox{p4176.eps}"> <tex2html_verbatim_mark></DIV><P>Everybody knows that the Swiss build the most precise clocks in the world. The <SPAN CLASS="textbf">G</SPAN>eneva <SPAN CLASS="textbf">C</SPAN>hronometer <SPAN CLASS="textbf">C</SPAN>ertification <SPAN CLASS="textbf">I</SPAN>nstitute of <SPAN CLASS="textbf">S</SPAN>witzerland takes great pride in its ingenious technique for measuring clock quality: They take two analog clocks, place them face to face, and measure the time until each of the three corresponding pairs of hands coincides. You need to write a program to help them decide if the clocks merit the coveted title.<P>As is well known, chronometer dials wrap around after 12 hours. All three hands of a chronometer are quantized by seconds. No hand moves continuously. The only time that is indicated is an integral number of seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of lines with two times each, separated by white space. The times use the format <TT>hh:mm:ss</TT> for hours, minutes, and seconds within a 24 hour day; hours but not minutes or seconds might take a single digit.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line there is one output line with the minimal time span until the clocks coincide (using the same format as above), or the word <TT>SAUEREI</TT> to indicate that your program decides that the hands simply will not make it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3:04:05 15:41:45
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2:37:05
</PRE><P>
______________________________________________________
4177||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="359" HEIGHT="447" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4177.jpg ALT="\epsfbox{p4177.eps}"> <tex2html_verbatim_mark></DIV><P>Buster wants a cookie, and not just any cookie: he wants a <SPAN CLASS="textit">big</SPAN> cookie, the most surface area he can get. Fortunately, Buster's friend Arnie is famous for his yummy cookie dough and it just so happens that Arnie has dough rolled and ready to be cut. (For an unknown reason, Arnie always rolls the dough in the shape of a convex polygon.) Buster would be happy to put it in the oven as is but Arnie insists that a proper cookie must have a proper shape -- a circle, that is. Buster needs your help to determine the largest possible circle which can be cut out of the dough.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of vertices of the polygon. You may assume that <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is between 3 and 100. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain two integers each, separated by white space -- the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line contains the x- and y-coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th vertex of the polygon.<P>You may assume that the points define a convex polygon, i.e., if we connect all consecutive points and the first and the last point by straight lines we get a path that is not self-intersecting and the inside angle at the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th point is always less than 180 degrees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a single line with a single integer -- the diameter of the largest circle completely contained by the polygon (it can touch but not intersect the sides of the polygon), rounded down to the nearest integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
0 0
2 0
2 2
1 3
0 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
4178||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="332" HEIGHT="345" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4178.jpg ALT="\epsfbox{p4178.eps}"> <tex2html_verbatim_mark></DIV><P>Our robotic friend Dezider is given a very important job -- fixing fences. A typical fence has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> fence posts and, ideally, they should be distributed along the fence line in regular intervals. Unfortunately, Dezider's fences are very messed up and his job is to fix them as much as possible -- he wants to minimize the maximum distance between any two neighboring fence posts.<P>Dezider knows how to do things properly -- he first marks the positions of all posts. He is happy to report that all posts are perpendicular to the ground and their positions (counted from the left end of the fence line) are integers. Dezider also noticed that it is possible, starting at the left and proceeding right from one post to the next, to move each post by at most <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> units to the left or right, as long as there is no other post in the way and as long as each post still stays on the fence line. The posts always have to be at integral positions, even after they are moved. Finally, proceeding strictly from left to right, every post -- except for the first and last one -- can be moved at most once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of positive integers separated by white space. The first line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of fence posts, <!-- MATH
 $1 < n < 1000$
 --><SPAN CLASS="MATH">1 &lt; <I>n</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the amount by which each post can be moved. The second input line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> numbers -- the positions of the posts, from left to right; the fence line itself starts at position 0 and is never more than 10000 units long. The positions form an increasing sequence and cannot leave the fence line.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains a single line with a single integer, which is the maximum distance between any two neighboring fence posts after Dezider is done moving posts.<P><P><BR><SPAN CLASS="textbf">Note for the sample:</SPAN> As one possible solution is to leave the second post at 3, to move the third post right from 4 to 9 and the fourth post left from 19 to 14; the first and last post must not be moved. From left to right the distances between the posts are now 3, 6, 5, and 6; the maximum distance is 6.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 5 
0 3 4 19 20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
</PRE><P>
______________________________________________________
4179||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="307" HEIGHT="206" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4179.jpg ALT="\epsfbox{p4179.eps}"> <tex2html_verbatim_mark></DIV><P>Heidi and Sammy enjoy time together. When they are not chasing sticks, taking walks, or eating cookies, they play a little game to keep their minds as sharp as their teeth.<P>The game is played with nine balls, each of which has a unique single digit from 1 to 9 painted on it. One of the puppies picks up to six of the balls and a positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. The other puppy determines if it is possible to obtain <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> as the result of a valid arithmetic expression that uses each of the digits on the selected balls exactly once as an operand. If there is no such expression the puppy responds by growling.<P>For example, if Heidi chose the balls with the digit four and the digit three on them and selected the positive integer 12, Sammy could reply with either <SPAN CLASS="MATH">3 <TT>*</TT> 4</SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH">4 <TT>*</TT> 3</SPAN> <tex2html_verbatim_mark>. On the other hand if Sammy chose the balls with the digit one and the digit five on them and selected the positive integer 100, Heidi would respond with a growl.<P>The puppies allow the use of parentheses and the binary operators <code>+</code> , <code>-</code> , <code>*</code> , and <code>/</code> with the usual precedence and associativity in the expression, but they do not allow the digits on the balls to be combined to form larger numbers. So, if Heidi chose the balls with 1, 2, and 5 and selected the number 26, Sammy would growl because she could not respond with the expression 25+1, or any other.<P>After a while the problems got hard enough so that the puppies seek your help -- write a program to see how much growling is required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of lines with one or more digits and one number, separated by white space. Each line is one problem and contains first the selected digits, and as the last item the number which should result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line there is one output line which either contains a valid expression producing the desired result or the word <TT>GROWL</TT>, in either case without additional white space.<P>Note that the expressions need not be unique solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 12 
1 2 5 26 
5 2 3 10 
5 6 7 9 18
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3*4 
GROWL 
2+3+5 
(5+7)/6*9
</PRE><P>
______________________________________________________
4180||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="703" HEIGHT="347" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4180.jpg ALT="\epsfbox{p4180.eps}"> <tex2html_verbatim_mark></DIV><P>Write a program to solve a Nurikabe puzzle. This is played on a rectangular grid in which there are some cells which contain a number. You have to completely divide the grid into land and water, where land cells are colored white and water cells are colored black. A cell with a number must be colored white.<P>An island is a connected region of land cells in which exactly one cell contains a number -- the number of cells in the island. All water cells together must also be connected. The water region may not contain any <SPAN CLASS="MATH">2&#215;2</SPAN> <tex2html_verbatim_mark> block of water cells. Two cells count as connected if they can be travelled by a rook, i.e., if they are horizontally or vertically adjacent -- being diagonally adjacent does not count as connected.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of lines with numbers, separated by white space. The first line contains the number of rows and columns of the grid, each is less than 25. Each subsequent line describes one row and contains one number per cell in the row. The number is positive for some land-cells-to-be and zero otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program should output the grid as lines consisting of periods for white cells and x for black cells, or a single line with the word no if there is no solution.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
7 7 
5 0 1 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 1 0 6
0 0 0 0 0 0 0
2 0 4 0 0 0 0
0 0 0 0 0 0 0
0 0 0 0 2 0 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
.x.x... 
.xxxx.. 
...x.x. 
xxxxxxx 
.x...x. 
.x.xxx. 
xxx..x.
</PRE><P>
______________________________________________________
4181||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="626" HEIGHT="319" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4181.jpg ALT="\epsfbox{p4181.eps}"> <tex2html_verbatim_mark></DIV><P>Stopping at a red traffic light one day you notice that the mileage indicators in your car show the interesting pair of numbers 12345.6 and 123.4. The odometer at the top shows 6 digits while the trip meter at the bottom shows 4 digits.<P>Both meters count up as the car moves. The odometer cannot be reset; therefore, it shows the mileage since the car was manufactured. You can reset the trip meter as often as you want; if you don't reset it will keep counting up, if you reset it will start counting up again from 000.0.<P>Your mind wanders and you begin to wonder just how far you have to drive so that the two meter values together consist of all ten digits from 0 to 9. Considering that both meters will eventually wrap around and that the trip meter can be reset at any time you pull out your laptop and start to program. Will you make it before the light turns green?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input to your program consists of lines with two numbers each, separated by white space. To make things easy the numbers are positive integers of at most 6 and 4 digits, respectively; the first integer on a line represents the odometer and the second integer represents the trip meter, both in tenths of miles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input line there is one output line which contains an integer which represents the distance (in tenths of a mile) which needs to be driven so that at the end the odometer and trip meter together show all ten digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
123456 1234 
999999 9999 
65432 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
500 
12346 
1802
</PRE><P>
______________________________________________________
4182||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="666" HEIGHT="227" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4182.jpg ALT="\epsfbox{p4182.eps}"> <tex2html_verbatim_mark></DIV><P>Zofka secretly arranged some flowers in a row and only shares some information with you: she tells you the names of all the flowers and the colors of all the flowers (there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> distinct names and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> distinct colors). She also makes several more statements, each of which is one of the following three kinds:<P><P><BR><TABLE COLS=3><COL ALIGN=CENTER><COL ALIGN=LEFT><COL ALIGN=LEFT><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>. </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> <TT>is</TT> <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>where <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark> is a flower name and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is a color.</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><SUP>. </SUP></SPAN><tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> <TT>is left of</TT> <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>where both, <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, are two (different) flower names or</TD></TR><TR><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>both are two different color names.</TD></TR></TABLE><P><P><BR>The second statement indicates that a flower (or color) is somewhere -- but not necessarily directly -- left of another flower (or color).<P>By now it probably dawns on you that you need a program to figure out the arrangement of the flowers and their colors. Unfortunately, a solution might not exist, or there might even be more than one solution. Your program should simply decide if a solution exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of flowers (and colors), <!-- MATH
 $1 < n < 13$
 --><SPAN CLASS="MATH">1 &lt; <I>n</I> &lt; 13</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, the number of Zofka's statements, <SPAN CLASS="MATH">1 &lt; <I>k</I></SPAN> <tex2html_verbatim_mark>, separated by white space. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> flower names consisting of lower-case letters and separated by white space. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> colors consisting of lower-case letters and separated by white space. The remaining <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines contain Zofka's statements as described above, with the words separated by white space. All flower names and colors are distinct, left is not a color name, and no name exceeds 20 letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output is a single line with one of the words yes or no indicating whether or not a solution exists.<P><P><BR><SPAN CLASS="textbf">Note for the sample:</SPAN> Because flowers and colors could be arranged as green daffodil, red tulip, yellow lily. Note that another arrangement could be yellow daffodil, green lily, and red tulip.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 
tulip daffodil lily 
red   green    yellow 
daffodil is left of tulip 
daffodil is left of lily 
tulip is red 
green is left of red
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
yes

______________________________________________________
4183||||||false||||||
<P>The world financial crisis is quite a subject. Some people are more relaxed while others are quite anxious. John is one of them. He is very concerned about the evolution of the stock exchange. He follows stock prices every day looking for rising trends. Given a sequence of numbers <SPAN CLASS="MATH"><I>p</I><SUB>1</SUB>, <I>p</I><SUB>2</SUB>,..., <I>p</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> representing stock prices, a rising trend is a subsequence <!-- MATH
 $p_{i1} < p_{i2} < \cdots < p_{ik}$
 --><SPAN CLASS="MATH"><I>p</I><SUB>i1</SUB> &lt; <I>p</I><SUB>i2</SUB> &lt; <SUP>... </SUP>&lt; <I>p</I><SUB>ik</SUB></SPAN> <tex2html_verbatim_mark>, with <!-- MATH
 $i_{1} < i_{2} < \cdots < i_{k}$
 --><SPAN CLASS="MATH"><I>i</I><SUB>1</SUB> &lt; <I>i</I><SUB>2</SUB> &lt; <SUP>... </SUP>&lt; <I>i</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>. John's problem is to find very quickly the longest rising trend.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program input is from a text file. Each data set in the file stands for a particular set of stock prices. A data set starts with the length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4183img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark> of the sequence of numbers, followed by the numbers (a number fits a long integer). The program prints the length of the longest rising trend. White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each set of data the program prints the result to the standard output from the beginning of a line.<P><P><BR><SPAN CLASS="textbf">Note for the Sample:</SPAN><P>An input/output sample is in the table bellow. There are three data sets. In the first case, the length L of the sequence is <TT>6</TT>. The sequence is <TT>5</TT>, <TT>2</TT>, <TT>1</TT>, <TT>4</TT>, <TT>5</TT>, <TT>3</TT>. The result for the data set is the length of the longest rising trend: <TT>3</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
5 2 1 4 5 3 
3 
1 1 1 
4 
4 3 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1 
1
</PRE><P>
______________________________________________________
4184||||||false||||||

<P>
Stancu likes space travels but he is a poor software developer and will never be able to buy his own spacecraft. That is why he is preparing to steal the spacecraft of Petru. There is only one problem - Petru has locked the spacecraft with a sophisticated cryptosystem based on the ID numbers of the stars from the Milky Way Galaxy. For breaking the system Stancu has to check each subset of four stars such that the only common divisor of their numbers is 1. Nasty, isn't it? Fortunately, Stancu has succeeded to limit the number of the interesting stars to <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> but, any way, the possible subsets of four stars can be too many. Help him to find their number and to decide if there is a chance to break the system. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
In the input file several test cases are given. For each test case on the first line the number <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> of interesting stars is given <!-- MATH
 $(1 \le N \le 10000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4184img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4184img1.png
 ALT="$ \le$">10000)</SPAN>
<tex2html_verbatim_mark>. The second line of the test case contains the list of ID numbers of the interesting stars, separated by spaces. Each ID is a positive integer which is no greater than 10000. The input data terminate with the end of file. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case the program should print one line with the number of subsets with the asked property. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
2 3 4 5 
4 
2 4 6 8 
7 
2 3 4 5 7 6 8
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
0 
34
</PRE>

<P>

______________________________________________________
4185||||||false||||||
<P>In a country (my memory fails to say which), the candidates { <SPAN CLASS="MATH">1, 2...<I>N</I></SPAN> <tex2html_verbatim_mark>} are running in the parliamentary election. An opinion poll asks the question ``For any two candidates of your own choice, which election result would make you happy?". The accepted answers are shown in the table below, where the candidates <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> are not necessarily different, i.e. it may happen that <SPAN CLASS="MATH"><I>i</I> = <I>j</I></SPAN> <tex2html_verbatim_mark>. There are <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> poll answers, some of which may be similar or identical. The problem is to decide whether there can be an election outcome (It may happen that all candidates fail to be elected, or all are elected, or only a part of them are elected. All these are acceptable election outcomes.) that conforms to all <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> answers. We say that such an election outcome is perfect. The result of the problem is `<TT>1</TT>' if a perfect election outcome does exist and <TT>0</TT> otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that reads sets of data from an input text file. Each data set corresponds to an instance of the problem and starts with two integral numbers: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$">1000000</SPAN> <tex2html_verbatim_mark>. The data set continues with <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> pairs <SPAN CLASS="MATH">&#177;<I>i</I>&nbsp;&#177;<I>j</I></SPAN> <tex2html_verbatim_mark> of signed numbers, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$"><I>i</I></SPAN> <tex2html_verbatim_mark>,<SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4185img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>. Each pair encodes a poll answer as follows:<P><P><BR><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>Accepted answers to the poll question</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Encodin</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>g</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I would be happy if at least one from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is elected.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">+ <I>i</I>&nbsp; + <I>j</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I would be happy if at least one from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is not elected.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">- <I>i</I>&nbsp; - <I>j</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I would be happy if <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is elected or <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is not elected or both events happen.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">+ <I>i</I>&nbsp; - <I>j</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I would be happy if <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is not elected or <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is elected or both events happen.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">- <I>i</I>&nbsp; + <I>j</I></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY></TABLE><P><P><BR>The input data are separated by white spaces, terminate with an end of file, and are correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set the program prints the result of the encoded election problem. The result, <TT>1</TT> or <TT>0</TT>, is printed on the standard output from the beginning of a line. There must be no empty lines on output. An example of input/output is shown below.<P><P><BR><SPAN CLASS="textbf">Note for the Sample:</SPAN><P>For the first data set the result of the problem is <TT>1</TT>; there are several perfect election outcomes, e.g. <TT>1</TT> is not elected, <TT>2</TT> is elected, <TT>3</TT> is not elected. The result for the second data set is justified by the perfect election outcome: <TT>1</TT> is not elected, <TT>2</TT> is not elected. The result for the third data set is <TT>0</TT>. According to the answers <TT>-1</TT> <TT>+2</TT> and <TT>-1</TT> <TT>-2</TT> the candidate <TT>1</TT> must not be elected, whereas the answers <TT>+1</TT> <TT>-2</TT> and <TT>+1</TT> <TT>+2</TT> say that candidate <TT>1</TT> must be elected. There is no perfect election outcome. For the fourth data set notice that there are similar or identical poll answers and that some answers mention a single candidate. The result is <TT>1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3  +1 +2  -1 +2  -1 -3 
2 3  -1 +2  -1 -2  +1 -2 
2 4  -1 +2  -1 -2  +1 -2  +1 +2
2 8  +1 +2  +2 +1  +1 -2  +1 -2  -2 +1  -1 +1  -2 -2  +1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
0 
1
</PRE><P>
______________________________________________________
4186||||||false||||||
<P>John has recently arrived in Romania for the South Eastern European Regional competitions. John has never been to Romania before so Romanians decided to organize sightseeing tour for him. This tour will include several Romanian cities and none of them will be visited more than once. John will start in one city and will visit some other cities according to a guide tour. At the end of the tour John will return to the starting point.<P>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cities numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> two-way roads in the country. Each road connects two different cities. Consider a sightseeing tour for John <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>,..., <I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, where each <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> denotes a city in Romania. Then all <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> must be distinct, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark> must be connected by a road, where <SPAN CLASS="MATH"><I>i</I> = 1, 2,..., <I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> must be connected by a road as well.<P>Being a odd person John would like to visit an odd number of cities. The organizers have drawn the plan of all possible tours with an odd number of cities.<P>Residents of the cities would like John to visit them. So if there is at least one tour passing through some city than this city is called lucky. Your task is to calculate the number of lucky cities in Romania.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> - a number of test cases. Every test case starts with a line containing two integers separated by a single space - <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines will contain two integers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> separated by a single space - the labels of cities that <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th road connects.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output should contain <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines - answers for each of the test cases.<P><P><BR><SPAN CLASS="textbf">Constrains:</SPAN><P><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$">77</SPAN> <tex2html_verbatim_mark>,<P><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$">100000(10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>,<P><!-- MATH
 $1 \le a_{i} < b_{i} \le N.$
 --><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$"><I>a</I><SUB>i</SUB> &lt; <I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4186img1.png ALT="$ \le$"><I>N</I>.</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
7 7
1 5
3 5
3 7
1 7
6 7
4 7
4 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3
</PRE><P>
______________________________________________________
4187||||||false||||||
<P>Mr. Tenant is going to buy a new house. In fact, he is going to buy a piece of land and build his new house on it. In order to decide which piece of land to buy, Mr. Tenant needs a program which will give a score to each piece. Each candidate piece of land is a polygonal shape (not necessarily convex), and Mr. Tenant wonders what the best score is. Among possible scores, he considered the number of vertices, sum of angles, minimum number of required guards, and so forth. Finally, Mr. Tenant decided that the best score for a piece of land would simply be its area. Your task is to write the desired scoring program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of multiple pieces of land. Each piece is a simple polygon (that is, a polygon which does not intersect itself). A polygon description starts with a positive integer number <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> vertices, where each vertex consists of two coordinates (floating-point numbers): <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>. Naturally, the last vertex is connected by an edge to the first vertex. Note that each polygon can be ordered <SPAN CLASS="textit">either</SPAN> clockwise or counterclockwise. The input ends with a ``<TT>0</TT>" (the number zero).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each piece of land, the output should consist of exactly one line containing the score of that piece, <SPAN CLASS="textit">rounded</SPAN> to the nearest integer number. (Halves should be rounded up, but Mr. Tenant never faced such cases.) Hint: The scoring program has to handle well degenerate cases, such as, polygons with only one or two vertices.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 123.45 67.890 
3 0.001 0   1.999 0   0 2 
5 10 10   10 12   11 11   12 12   12.0 10.0 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
2 
3
</PRE><P>
______________________________________________________
4188||||||false||||||
<P>Joe is fond of computer games. Now, he must solve a puzzling situation. In front of his eyes lies a huge map with fortified towns. His enemy is a very powerful and tricky character who can connect and disconnect the towns by giving some commands. Two towns are connected if they have been directly connected or interconnected through some other connected towns at some moment in time. When a town is disconnected it gets isolated and clears its own connection history, not the connection history of the other towns. Each connection is bi-directional. Initially the towns are isolated. Joe is asked to answer quickly if two towns are connected, according to the history of the character's commands.<P>Write a program which based on information input from a text file counts the number of yes answers and the number of no answers to questions of the kind: is <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> connected with <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program reads data from a text file. Each data set in the file stands for a particular map and the associated character's commands, as follows:<P><OL><LI>The number of towns on the map <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>; </LI><LI>A list of commands of the form:<DL COMPACT><DT>a)</DT><DD><TT>c</TT> <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> are integers from 1 to <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_of$"><IMG WIDTH="57" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_towns$"></SPAN> <tex2html_verbatim_mark>. The command means that <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> get connected.</DD><DT>b)</DT><DD><TT>d</TT> <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is an integer from 1 to <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_of$"><IMG WIDTH="57" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_towns$"></SPAN> <tex2html_verbatim_mark>. The command means that <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> gets disconnected.</DD><DT>c)</DT><DD><TT>q</TT> <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> are integers from 1 to <SPAN CLASS="MATH"><I>no</I><IMG WIDTH="30" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_of$"><IMG WIDTH="57" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4188img1.png ALT="$ \_towns$"></SPAN> <tex2html_verbatim_mark>. The command stands for the question: is <SPAN CLASS="MATH"><I>town</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> connected with <SPAN CLASS="MATH"><I>town</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>?</DD><DT>d)</DT><DD><TT>e</TT>, that ends the list of commands</DD></DL></LI></OL><P>Each command is on a separate line. Commands (a), (b), (c) can appear in any order. The towns' connectivity is updated after each command of type (a) or (b). Each command of type (c) is processed according to the current configuration.<P>For example, the input file illustrated in the figure bellow corresponds to only one data set which stands for a map with <TT>4</TT> fortified towns. The character gives 9 commands. There are <SPAN CLASS="MATH"><I>N</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> yes answered questions and <SPAN CLASS="MATH"><I>N</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> no answered questions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The program prints these two numbers to the standard output on the same line, in the order: <SPAN CLASS="MATH"><I>N</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> as shown in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
c 1 2
c 3 4
q 1 3
c 2 3
q 1 4
d 2 
q 4 1
q 2 4
e
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 , 2
</PRE><P>
______________________________________________________
4189||||||false||||||

<P>
John has recently arrived in Bucharest for the South Eastern European Regional Contest. John is famous for his theory of lucky numbers. That's why all the contestants and spectators are very happy. 

<P>
According to that theory 4 and 7 are lucky digits, and all the other digits are not lucky. A lucky number is a number that contains only lucky digits in decimal notation. A very lucky number is a number that can be expressed as a product of several lucky numbers. A lucky number by itself is considered to be very lucky. For example, numbers 47, 49, 112 are very lucky. 

<P>
Your task is to calculate the number of very lucky numbers that are not less than <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and not greater than <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. Of course, numbers <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> are given by John. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> - a number of test cases. Each of the next <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> lines contains two integers separated by a single space - <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Output must contain <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> lines - answers for the test cases. 

<P>

<P>
<BR>

<B>Constrains:</B>

<P>
<!-- MATH
 $1 \le T \le 7777,$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4189img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4189img1.png
 ALT="$ \le$">7777,</SPAN>
<tex2html_verbatim_mark> 

<P>
<!-- MATH
 $1 \le A \le B \le 1000000000000 (10^{12}).$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4189img1.png
 ALT="$ \le$"><I>A</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4189img1.png
 ALT="$ \le$"><I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/4189img1.png
 ALT="$ \le$">1000000000000(10<SUP>12</SUP>).</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Hint:</SPAN> 
Very lucky numbers for the last case of the sample input are: 4, 7, 16, 28, 44, 47, 49, 64, 74 and 77.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
1 2 
88 99 
112 112 
1 100
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 
0 
1 
10
</PRE>

<P>

______________________________________________________
4190||||||false||||||
<P>We say that a set <SPAN CLASS="MATH"><I>S</I> = {<I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB>}</SPAN> <tex2html_verbatim_mark> is factor closed if for any <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4190img1.png ALT="$ \in$"> <I>S</I></SPAN> <tex2html_verbatim_mark> and any divisor <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> we have <SPAN CLASS="MATH"><I>d</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4190img1.png ALT="$ \in$"> <I>S</I></SPAN> <tex2html_verbatim_mark>. Let's build a GCD matrix <SPAN CLASS="MATH">(<I>S</I>) = (<I>s</I><SUB>ij</SUB>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>s</I><SUB>ij</SUB> = <I>GCD</I>(<I>x</I><SUB>i</SUB>, <I>x</I><SUB>j</SUB>)</SPAN> <tex2html_verbatim_mark> - the greatest common divisor of <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>. Given the factor closed set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, find the value of the determinant:<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="MATH"><I>D</I><SUB>n</SUB> = <IMG WIDTH="12" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4190img1.png ALT="$ \left\vert\vphantom{ \begin{array}{ccccc} \mbox{gcd}(x_{1}, x_{1}) &amp; \mbox{gcd...
...box{gcd}(x_{n}, x_{3}) &amp; \ldots &amp; \mbox{gcd}(x_{n}, x_{n}) \end{array} }\right.$"><IMG WIDTH="441" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4190img1.png ALT="$ \begin{array}{ccccc} \mbox{gcd}(x_{1}, x_{1}) &amp; \mbox{gcd}(x_{1} , x_{2}) &amp; \m...
..._{2})&amp; \mbox{gcd}(x_{n}, x_{3}) &amp; \ldots &amp; \mbox{gcd}(x_{n}, x_{n}) \end{array}$"><IMG WIDTH="12" HEIGHT="125" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4190img1.png ALT="$ \left.\vphantom{ \begin{array}{ccccc} \mbox{gcd}(x_{1}, x_{1}) &amp; \mbox{gcd}(x_...
...gcd}(x_{n}, x_{3}) &amp; \ldots &amp; \mbox{gcd}(x_{n}, x_{n}) \end{array} }\right\vert$"></SPAN> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case starts with an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark>, that stands for the cardinality of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. The next line contains the numbers of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>,..., <I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. It is known that each <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is an integer, <!-- MATH
 $0 < x_{i} < 2 \ast 10^{9}$
 --><SPAN CLASS="MATH">0 &lt; <I>x</I><SUB>i</SUB> &lt; 2 <TT>*</TT> 10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>. The input data set is correct and ends with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case find and print the value <SPAN CLASS="MATH"><I>D</I><SUB>n</SUB> mod 1000000007</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 2 
3 
1 3 9 
4 
1 2 3 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
12 
4
</PRE><P>
______________________________________________________
4191||||||false||||||
<P>A group of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> Internet Service Provider companies (ISPs) use a private communication channel that has a maximum capacity of <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> traffic units per second. Each company transfers <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> traffic units per second through the channel and gets a profit that is directly proportional to the factor <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>C</I> - <I>T</I>&nbsp;<I>N</I>)</SPAN> <tex2html_verbatim_mark>. The problem is to compute <SPAN CLASS="MATH"><I>T</I><IMG WIDTH="55" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4191img1.png ALT="$ \_optim$"></SPAN> <tex2html_verbatim_mark>, the smallest value of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> that maximizes the total profit the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ISPs can get from using the channel. Notice that <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>T</I><IMG WIDTH="55" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4191img1.png ALT="$ \_optim$"></SPAN> <tex2html_verbatim_mark> are integer numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Write a program that reads sets of data from an input text file. Each data set corresponds to an instance of the problem above and contains two integral numbers - <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> - with values in the range from 0 to <SPAN CLASS="MATH">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>. The input data are separated by white spaces, are correct, and terminate with an end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set the program computes the value of <SPAN CLASS="MATH"><I>T</I><IMG WIDTH="55" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/4191img1.png ALT="$ \_optim$"></SPAN> <tex2html_verbatim_mark> according to the problem instance that corresponds to the data set. The result is printed on the standard output from the beginning of a line. There must be no empty lines on the output. An example of input/output is shown below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 0 
0 1 
4 3 
2 8 
3 27 
25 1000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
0 
0 
2 
4 
20000000

______________________________________________________
4192||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Problem C: Close Enough Computations</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><img src="http://livearchive.onlinejudge.org/external/41/p4192.gif alt="nutrition label" width="215" height="424" align="right" /><p>The nutritional food label has become ubiquitous. A sample label is shown to the right. On the label the number of calories and the number of grams of fat, carbohydrate, and protein are given as integers.</p><p>But carefully reading the label may cause the consumer to notice some inconsistencies. A gram of fat has 9 calories, a gram of carbohydrate has 4 calories, and a gram of protein has 4 calories. Consider the label to the right. A simple computation of the number of calories would indicate that the food should contain 12*9 + 31*4 + 5*4 or 252 calories, but the label indicates it has 250 calories.</p><p>While sometimes the difference in calories is due to other circumstances (such as the presence of alcohol or soluble fiber), this problem will consider only the possibility of round-off error. This food actually has 12.1 grams of fat (yielding 108.9 calories), 30.6 grams of carbohydrate (122.4 calories), 4.7 grams of protein (18.8 calories), so it does in fact have 250 calories (actually 250.1 calories).</p><p>Write a program that will determine if values for a nutritional label are consistent, that is, if there is a way the true values for the grams of nutrients can be rounded to the shown values and yield the number of calories shown.</p><p>You should assume that standard rounding rules apply; that is any value less than 0.5 rounds down and those 0.5 or over round up.</p><h1>Input</h1><p>The input will contain one or more sets of data about potential labels. Each data set will consist of 4 non-negative integers, separated by one or more blanks, on a single line. The integers represent the number of calories, the number of grams of fat, the number of grams of carbohydrates, and the number of grams of protein, in that order. The number of calories will not exceed 10000, and the number of grams of any component will not exceed 1000.</p><p>End of input is indicated by a line containing 4 zeroes. This line should not be processed.</p><h1>Output</h1><p>For each data set, print "yes" or "no" on its own line, indicating whether the given rounded values of the three nutrients can yield the given number of calories.</p><h1>Sample Input</h1><pre>
250 12 31 5
250 13 31 5
122 10 10 0
0 0 0 0
</pre><h1>Sample Output</h1><pre>
yes
no
no
</pre></body></html>
______________________________________________________
4193||||||false||||||
<P><DIV ALIGN="CENTER"><IMG WIDTH="233" HEIGHT="233" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4193.png ALT="\epsfbox{p4193.eps}"> <tex2html_verbatim_mark></DIV><P>The town meeting was not going well. "It's noisy", some town residents complained. "It's ugly", others stated. "It's an eyesore", many agreed. "It's here," said the mayor, "and it's not going to go away."<P>The cause of all this furor was the new stretch of Interstate Highway that had been just opened. Straight as an arrow, it ran along the entire northern edge of the town.<P>"Look," said the mayor, "we can reduce the noise and improve the view by planting trees and tall hedges along the road, but we don't have an unlimited budget. Luckily, much of the highway is already hidden by some of the buildings in our commercial district on the north. We'll see what we can do by planting in the visible gaps between the buildings."<P>Write a program to compute the total linear length of planting that will be required to block the view of the Interstate by an observer looking straight north (orthogonal to the highway) from the southern side of the commercial district.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of multiple data sets. The first line in each data set contains the length of the town border adjacent to the highway, expressed as a floating point number (called <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, below). A nonpositive value for this number signals the end of input. This is followed by zero or more lines containing the positions of buildings within the commercial district. Each such line gives a pair of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> positions (floating point numbers) representing the portion of the interstate whose view is occluded by the building. These numbers are expressed in the same units of measurement as the length of the border, such that 0 denotes the western end of the border and L the eastern end. The end of a data set is signaled by any pair <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> for which <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB> &gt; <I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each data set, print one line of the form<P><P><BR><TT>The total planting length is <SPAN CLASS="MATH">##</SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH">##</SPAN> <tex2html_verbatim_mark> is a floating point number, printed to one decimal place precision, denoting the total length of the Interstate visible between the buildings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
100.0
20.0 30.0
40.0 50.0
1.0 0.0
100.0
20.0 30.0
22.0 28.0
1.0 0.0
-1.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The total planting length is 80.0
The total planting length is 90.0
</PRE><P>
______________________________________________________
4194||||||false||||||
<P>Spark Plug Searching, Ltd., is looking to enter the market of web-based applications with a new word processor. The team implementing the spell checker have proposed storing the dictionary in a binary-encoded trie, a binary tree structure in which words are located by moving down the tree, one letter at a time, but discarding any letter from which one takes a right branch.<P><DIV ALIGN="CENTER"><IMG WIDTH="283" HEIGHT="411" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4194.png ALT="\epsfbox{p4194.eps}"> <tex2html_verbatim_mark></DIV><P>The end of a word is indicated whenever a letter has no left child or by an @ character. This trie (in the diagram) contains the words a, abbot, abbey, abed, and bed.<P>Some team members have objected that the resulting data structure will be too large for practical use. Others have argued that the size can be dramatically reduced by taking advantage of the fact that many words end in common suffixes. The trie can be scanned for common subtrees and the parents of identical subtrees could be altered so that they all point to a single instance of that subtree. Your job is to demonstrate this process. Write a program to find the shared subtree that would produce the maximum reduction in the number of nodes if all instances of that subtree were replaced by a single shared instance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of one or more lines, each line describing one tree. Each tree is presented, left justified, in preorder form using at least one and up to 200 characters. The nodes of the tree are denoted by a single lowercase letter or `<TT>@</TT>'. The character `<TT>#</TT>' indicates that a node does not have a child in the indicated position. Note that with these conventions, the tree described by the preorder traversal will be unique.<P>End of input is indicated by a line consisting of the word ``<TT>END</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each input tree, print the non-empty subtree (in the same format) that yields the greatest savings if all instances are replaced by a single shared instance. Then, on the same line, print a space and then the number of nodes that would be saved by this replacement. Print no blank lines between outputs.<P>If there is a tie among different subtrees that could yield maximal savings, select the smallest tree from among those tied. If there remains more than one candidate, select the one occurring first in a preorder traversal of the original tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
a@#bbot#ey##ed###bed#######
END
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
ed### 2
</PRE><P>
______________________________________________________
4195||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Problem B: Lawrence of Arabia</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><p>T. E. Lawrence was a controversial figure during World War I. He was a British officer who served in the Arabian theater and led a group of Arab nationals in guerilla strikes against the Ottoman Empire. His primary targets were the railroads. A highly fictionalized version of his exploits was presented in the blockbuster movie, "Lawrence of Arabia".</p><p>You are to write a program to help Lawrence figure out how to best use his limited resources. You have some information from British Intelligence. First, the rail line is completely linear---there are no branches, no spurs. Next, British Intelligence has assigned a Strategic Importance to each depot---an integer from 1 to 5. A depot is of no use on its own, it only has value if it is connected to other depots. The Strategic Value of the entire railroad is calculated by adding up the products of the Strategic Values for every pair of depots that are connected, directly or indirectly, by the rail line. Consider this railroad:</p><center><img src="http://livearchive.onlinejudge.org/external/41/p4195a.png width="545" height="49"></center><p>Its Strategic Value is 4*5 + 4*1 + 4*2 + 5*1 + 5*2 + 1*2 = 49.</p><p>Now, suppose that Lawrence only has enough resources for one attack. He cannot attack the depots themselves---they are too well defended. He must attack the rail line between depots, in the middle of the desert. Consider what would happen if Lawrence attacked this rail line right in the middle:</p><center><img src="http://livearchive.onlinejudge.org/external/41/p4195a.png width="545" height="81"></center><p>The Strategic Value of the remaining railroad is 4*5 + 1*2 = 22. But, suppose Lawrence attacks between the 4 and 5 depots:</p><center><img src="http://livearchive.onlinejudge.org/external/41/p4195a.png width="545" height="81"></center><p>The Strategic Value of the remaining railroad is 5*1 + 5*2 + 1*2 = 17. This is Lawrence's best option.</p><p>Given a description of a railroad and the number of attacks that Lawrence can perform, figure out the smallest Strategic Value that he can achieve for that railroad.</p><h1>Input</h1><p>There will be several data sets. Each data set will begin with a line with two integers, <var>n</var> and <var>m</var>. <var>n</var> is the number of depots on the railroad (1â¤<var>n</var>â¤1000), and <var>m</var> is the number of attacks Lawrence has resources for (0â¤<var>m</var>&lt;<var>n</var>). On the next line will be <var>n</var> integers, each from 1 to 5, indicating the Strategic Value of each depot in order. End of input will be marked by a line with <var>n</var>=0 and <var>m</var>=0, which should not be processed.</p><h1>Output</h1><p>For each data set, output a single integer, indicating the smallest Strategic Value for the railroad that Lawrence can achieve with his attacks. Output each integer in its own line.</p><h1>Sample Input</h1><pre>4 1
4 5 1 2
4 2
4 5 1 2
0 0
</pre><h1>Sample Output</h1><pre>17
2
</pre></body></html>
______________________________________________________
4196||||||false||||||
<P>A series/parallel resistor circuit is shown here.<P><DIV ALIGN="CENTER"><IMG WIDTH="439" HEIGHT="262" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4196a.png ALT="\epsfbox{p4196a.eps}"> <tex2html_verbatim_mark></DIV><P>The resistance value is given next to each resistor. Connection points (wires connecting two or more resistors together, are denoted by an uppercase letter. A and Z are reserved for the names of the connection points which are the endpoints of the circuit. Our goal is to calculate the equivalent resistance of the circuit (i.e., the equivalent resistance between A and Z).<P>Within the circuit, a resistor can be specified by a triple consisting of the connection points at either endpoint, and the resistance. The resistor labelled ``9" could be specified as either (C, D, 9) or (D, C, 9). A circuit specification is the set of all resistor specifications.<P>A pair of resistors is in series if one of either of their endpoints have a common connection point that is not use by any other resistor (e.g., the resistors labelled ``6" and ``9" are both connected to C, which is not connected to anything else). Two series resistors can be replaced by an equivalent single resistor whose resistance is the sum of the replaced resistors (15, in the previous example).<P>A pair of resistors is in parallel if both their endpoints have common connection points (e.g., the resistors labelled ``3" and ``10" above are both connected to R and D). Two parallel resistors can be replaced by an equivalent single resistor whose resistance is the inverse of the sum of the inverses of the two resistors ( <SPAN CLASS="MATH">(1/3 + 1/10)<SUP>-1</SUP> = 2.307692</SPAN> <tex2html_verbatim_mark>, in the previous example).<P><DIV ALIGN="CENTER"><IMG WIDTH="699" HEIGHT="210" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4196a.png ALT="\epsfbox{p4196b.eps}"> <tex2html_verbatim_mark></DIV><P>The equivalent resistance of a well-formed series-parallel resistor circuit can be determined by successively replacing a series or parallel resistor pair by the single equivalent resistor, until only one is left.<P>Not all circuits can be decomposed into series and parallel components. The Wheatstone Bridge, shown here, is a classic example of a circuit that is not considered a well-formed series-parallel resistor circuit.<P><DIV ALIGN="CENTER"><IMG WIDTH="233" HEIGHT="107" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4196a.png ALT="\epsfbox{p4196c.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>There will be multiple circuit specifications. The first input line for each circuit specification is an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>N</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>), the number of resistors in the circuit. This is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each being a resistor specification in the form: <SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I>&nbsp;<I>r</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> are uppercase characters, and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is a positive integer resistance (<SPAN CLASS="MATH"><I>r</I> &lt; 100</SPAN> <tex2html_verbatim_mark>). The equivalent resistance is guaranteed never to be greater than 100.<P>A circuit with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the last circuit, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each circuit, if the circuit is well-formed and reduces to a single equivalent resistance between A and Z, print the equivalent resistance of the circuit from A to Z, rounded to (and displayed to) 3 decimal places. If the circuit is not well formed, or if there is no equivalent resistance between A and Z, simply print the number `<TT>-1.000</TT>'. There should be no blank lines between outputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
8
N R 2
D R 3
R N 2
R D 10
Z R 7
C D 9
N C 6
A N 4
2
A Z 3
Z A 10
2
P A 6
P Z 9
5
A B 1
B Z 4
A C 8
C Z 19
B C 12
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
11.945
2.308
15.000
-1.000
</PRE><P>
______________________________________________________
4197||||||false||||||
<P>A combination lock consists of a circular dial, which can be turned (clockwise or counterclockwise) and is embedded into the "fixed" part of the lock. The dial has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> evenly spaced "ticks". The ticks are numbered from 0 to <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>, increasing in the clockwise direction. The fixed part of the lock has a "mark" which always "points to" a particular tick on the dial. Of course, the mark points to different ticks as the dial is turned.<P><DIV ALIGN="CENTER"><IMG WIDTH="566" HEIGHT="396" ALIGN="right" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4197.png ALT="\epsfbox{p4197.eps}"> <tex2html_verbatim_mark></DIV><P>The lock comes with three code numbers <SPAN CLASS="MATH"><I>T</I>1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I>2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I>3</SPAN> <tex2html_verbatim_mark>. These are non-negative integers and each of them is less than <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. No two of the three are the same.<P>The lock is opened in three stages of operations:<P><OL><LI>Turn the dial clockwise exactly two full revolutions, and continue to turn it clockwise until the mark points to tick <SPAN CLASS="MATH"><I>T</I>1</SPAN> <tex2html_verbatim_mark>. </LI><LI>Turn the dial one full revolution counterclockwise and continue to turn it counterclockwise until the mark points to tick <SPAN CLASS="MATH"><I>T</I>2</SPAN> <tex2html_verbatim_mark>. </LI><LI>Turn the dial clockwise until the mark points to tick <SPAN CLASS="MATH"><I>T</I>3</SPAN> <tex2html_verbatim_mark>. The lock should now open. </LI></OL><P>You must find the maximum possible number of ticks the dial must be turned in order to open the lock. The number of ticks turned is defined to be the sum of the ticks turned in the three stages outlined above, and is always positive regardless of direction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input file consists of a number of test cases, one test case per line. Each line of the input file contains four integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , <SPAN CLASS="MATH"><I>T</I>1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I>2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I>3</SPAN> <tex2html_verbatim_mark>, in this order, separated by blank spaces. The integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a multiple of 5, <SPAN CLASS="MATH">25<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4197.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4197.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The numbers <SPAN CLASS="MATH"><I>T</I>1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I>2</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I>3</SPAN> <tex2html_verbatim_mark> satisfy the constraints stated under the description above. The input will be terminated by a line with <SPAN CLASS="MATH"><I>N</I> = <I>T</I>1 = <I>T</I>2 = <I>T</I>3 = 0</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the maximum possible number of ticks the dial must be turned in order to open the lock. Print each on its own line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
80 20 40 50
80 10 79 12
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
409
455
</PRE><P>
______________________________________________________
4198||||||false||||||

<P>
The designers at Spark Plug Searching, Ltd., are searching for additional ways to reduce the size of the dictionary used for their new spell checker. Their latest idea is that maybe they can get by storing only the basic ``stem" form of a word without including the plural forms, past tenses, and other grammatical variants of the stem word. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4198.eps}$
 -->
<IMG
 WIDTH="398" HEIGHT="548" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/41/p4198.png
 ALT="\epsfbox{p4198.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
When a word is extracted from a document and we want to check it for correct spelling, we can apply a series of rules to rewrite the word to its likely stem form. Then we check the dictionary to see if that rewritten word matches any entry in the dictionary. 

<P>
Natural languages are pretty messy and it may take quite a bit of experimenting to get an appropriate set. So the team has proposed a simple language for describing rewrite rules. A rule has the form 

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>pattern</I></SPAN>
<tex2html_verbatim_mark> =&gt; <!-- MATH
 $replacement$
 -->
<SPAN CLASS="MATH"><I>replacement</I></SPAN>
<tex2html_verbatim_mark></TT>

<P>

<P>
<BR>
A <SPAN CLASS="MATH"><I>pattern</I></SPAN>
<tex2html_verbatim_mark> is a sequence of one or more characters which are interpreted as follows: 

<P>

<UL>
<LI>Lower-case alphabetic characters in the pattern match a single occurrence of that same character in either upper or lower case. For example, a pattern ``ab" can match and ``ab", ``aB", ``Ab" or ``AB" in a word. 
</LI>
<LI>An asterisk (*) matches one or more alphabetic characters. There is at most one asterisk in a pattern, and if one is present it will be the first character in the pattern. 
</LI>
<LI>An upper-case 'V' matches any lower-case vowel ('a', 'e', 'i', 'o', or 'u').
</LI>
<LI>An upper-case 'C' matches any lower-case consonant (any alphabetic character other than 'a', 'e', 'i', 'o', or 'u'). 
</LI>
<LI>A numeric digit 1-9 matches the same string as was matched by the character in that position of the pattern, counting the first character of the pattern as character #1. A digit <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark> can occur in the pattern only after position <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>. 
</LI>
</UL>

<P>
For example, the pattern `<TT>*C2ies</TT>' would match any word of at least 6 characters ending in two copies of the same consonant followed by `<TT>ies</TT>'.

<P>
The <!-- MATH
 $replacement$
 -->
<SPAN CLASS="MATH"><I>replacement</I></SPAN>
<tex2html_verbatim_mark> part of a rule is built from a limited set of the same characters. Specifically, the replacement can contain only lower-case alphabetic characters (which are kept ``as is") and numeric digits, which are replaced by the same string they would have matched in the pattern. For example, the rule 

<P>

<P>
<BR>

<TT>*C2ies =&gt; 122y</TT>

<P>

<P>
<BR>
applied to the word ``berries" would match the ``*" against ``be", the ``C" and ``2" against ``r", and the ``ies" against ``ies". In the replacement, the ``1" refers to the ``*" which matched ``be", the ``2"s each match ``r", and the ``y" is left as is, so the word ``berries" is rewritten to ``berry". 

<P>
Write a program to read a set of rewrite rules and to apply them to words in a paragraph of text. For each word (maximal consecutive string of alphabetic characters) in the paragraph, apply the rules, one at a time, in the order they are given, until a matching pattern is found or until all rules are exhausted. If a matching pattern is found, apply that rule to rewrite the word. If not, leave the word unchanged.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
Input consists of multiple data sets. Each data set begins with a set of one or more rules, one per line in the format described above, followed by an empty line. This is followed by one or more lines of text, followed by an empty line or by a line containing only the left-justified string `<TT>***</TT>', which indicates end of the input

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each data set, print the lines of text with each word rewritten according to the given rule set, and all non-word characters left unchanged. 

<P>
At the end of the rewritten text for each data set, print a single line containing the left-justified string `<TT>***</TT>'.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
*ed =&gt; 1

The quick brown foxes jumped over
the lazy yellow dogs.

*ed =&gt; 1
*ies =&gt; 1y
*s =&gt; 1

The quick brown foxes jumped over
the lazy yellow dogs.
***
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
The quick brown foxes jump over
the lazy yellow dogs.
***
The quick brown foxe jump over
  the lazy yellow dog.
***
</PRE> 

<P>

______________________________________________________
4199||||||false||||||
<P>Net Profits Incorporated has announced a new generation of network switching devices aimed at supporting high-speed, instantly reconfigurable networks over long distances.<P><DIV ALIGN="CENTER"><IMG WIDTH="232" HEIGHT="285" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4199a.png ALT="\epsfbox{p4199a.eps}"> <tex2html_verbatim_mark></DIV><P>Their networks are based on a new kind of switching device that monitors several input lines, locking on to the strongest signal that it receives and passing that signal on to all output lines connected to its output ports.<P>The connecting lines are long enough that signal loss is a major concern. The switches themselves may cause additional signal loss. To counter both sources of loss, some switches are equipped with amplifiers. (To prevent destructive feedback, switches with amplifiers will not be connected in cycles such that their output can reach their own inputs, even indirectly.)<P>Develop a program to predict the effective signal strength that can be expected when a signal initiated at one point in a network is received at another point. You will be provided with a description of a network consisting of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> switches ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4199a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4199a.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>). For each switch, you will given a multiplier indicating how much weaker or stronger the output of the switch will be than the strength of the strongest input coming in to that switch. Switches without amplifiers will multiply the signal strength by a factor of no smaller than 0.1. Switches with amplifiers may multiply the signal strength by factors as high as 5.0.<P>You will also be provided with a description of the connecting lines within the network, including a multiplier indicating how much weaker a signal is at the end of the line than when it entered. These multipliers will be no smaller than 0.1 and no larger than 1.0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Input consists of one or more input sets.<P>Each input set describes one network. It begins with a line containing one integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of switches in the network. These switches are identified by number starting at 0. The end of input is signaled by a non-positive value for <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>This is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each describing one switch and the lines attached to the output of that switch. This description begins with a floating point number giving the strength multiplier for that switch. This is followed by an integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> indicating how many lines are connected to the output of the switch. After that are <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> pairs of numbers, each describing one output line. The first number in each pair gives the number of the switch to which this output line connects (i.e., the switch receiving this line as an input). The second number is a floating point number giving the multiplier describing the signal loss on that line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each network, print a line of the form<P><P><BR><TT>Network <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>where <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is the input set number (starting at 1) and where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is the signal strength expected at the output for switch <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> if an input signal of strength 1.0 is presented at (all) inputs of switch 0. If that input never appears at the output of switch <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> should be zero. <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> should be printed to two digits precision.<P><P><BR><B>Example:</B> The networks shown here are described by the following input and output.<P><DIV ALIGN="CENTER"><IMG WIDTH="727" HEIGHT="607" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/41/p4199a.png ALT="\epsfbox{p4199b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
1.0 2 1 0.75 2 0.98
1.25 1 3 0.9
0.75 1 3 0.5
0.9 0
6
1.0 2 1 0.9 2 0.9
0.95 2 2 0.7 3 0.6
0.95 1 4 0.8
1.0 1 4 0.4
1.25 1 5 1.0
1.1 0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Network 1: 0.76 
Network 2: 0.94

______________________________________________________
4200||||||false||||||
<html>

<p class=MsoNormal style='text-align:justify'>&nbsp;</p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Reading input is a very important and easy but boring part
of programming. So functions which can take difficult sort of inputs very
easily are very popular among programmers. Such a function is the ancient
scanf() function of C, which exists even today with all its popularity and
glory.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The main strength of scanf() function is its format
strings. For example %d is used to read decimal integers, %s is used for
reading strings. One less known but useful format string of scanf() function is
to specify the allowed characters within a third bracket pair. For example the
following scanf() function will only read decimal digits and will stop reading
if it gets anything else:<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'>#include&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'>char s[101]; <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'>int main(void)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>   
</span>scanf(&quot;%[0123456789]&quot;,&amp;s);<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'><span style='mso-spacerun:yes'>   
</span>printf(&quot;%s\n&quot;,s);<span style='mso-spacerun:yes'>   </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For example, if the input string is </span><span
style='font-size:11.0pt;font-family:"Courier New"'>123abc345</span><span
style='font-size:10.0pt;font-family:Verdana'> then the value of s will be </span><span
style='font-size:11.0pt;font-family:"Courier New"'>123</span><span
style='font-size:10.0pt;font-family:Verdana'>, because after reading </span><span
style='font-size:11.0pt;font-family:"Courier New"'>123</span><span
style='font-size:10.0pt;font-family:Verdana'> the scanf() function finds
character </span><span style='font-size:11.0pt;font-family:"Courier New"'>a</span><span
style='font-size:10.0pt;font-family:Verdana'> which is not a decimal digit (Not
specified in the format string). So the output shown would be </span><span
style='font-size:11.0pt;font-family:"Courier New"'>123</span><span
style='font-size:10.0pt;font-family:Verdana'>.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Given the input string and the format string (In the
example above the format string is </span><span style='font-size:11.0pt;
font-family:"Courier New"'>0123456789</span><span style='font-size:10.0pt;
font-family:Verdana'> and input string is </span><span style='font-size:11.0pt;
font-family:"Courier New"'>123abc345</span><span style='font-size:10.0pt;
font-family:Verdana'>) it is very easy to determine the output string </span><span
style='font-size:11.0pt;font-family:"Courier New"'>123</span><span
style='font-size:10.0pt;font-family:Verdana'>. But in this problem you will
have to do the opposite. You will be given a set of input strings and the corresponding
output strings, and you will have to determine the format string which will
ensure all these inputs and corresponding outputs.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana;
mso-bidi-font-weight:normal'>The input file contains at most 3000 test cases.
The description of each test case is given below:</span><span style='font-size:
10.0pt;font-family:Verdana'><o:p></o:p></span></p>

<p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana;
mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana;
mso-bidi-font-weight:normal'>Each test case starts with an integer N
(0&lt;N&lt;101) which denotes how many input/output pairs will follow. The
following N lines will contain two strings separated by a single space. The
strings are enclosed in double quotation. The first string denotes the input string
and the second string denotes the printed string (the characters that were
actually read). You can assume that the input and output strings will only
contain alpha-numerals (</span><span style='font-size:11.0pt;font-family:"Courier New";
mso-bidi-font-weight:normal'>0-9, A-Z</span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-weight:normal'> and </span><span
style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-weight:normal'>a-z</span><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-weight:normal'>) and their
length will not exceed 100 (excluding the two double quotations) and the input
string (first string) will never be an empty string but the output string may
be empty. All the strings in the input file are enclosed in double quotation.
So an empty string is denoted as .<o:p></o:p></span></p>

<p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana;
mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></span></p>

<p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana;
mso-bidi-font-weight:normal'>Input is terminated by a line containing a single
zero.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><span
style='font-size:10.0pt;font-family:Verdana'>For each set of input produce one
line of output. This line contains the serial of output followed by the desired
format string that will ensure all the output string pairs. Make sure that this
format string contains only alpha-numerals. If there is more than one possible
format string, output the ASCII-graphically smallest one. (Lexicographically
means word ordering as if they were in lexicon or dictionary. So </span><span
style='font-size:11.0pt;font-family:"Courier New"'>and</span><span
style='font-size:10.0pt;font-family:Verdana'> is smaller than </span><span
style='font-size:11.0pt;font-family:"Courier New"'>bbt</span><span
style='font-size:10.0pt;font-family:Verdana'> because </span><span
style='font-size:11.0pt;font-family:"Courier New"'>and</span><span
style='font-size:10.0pt;font-family:Verdana'> would have appeared before </span><span
style='font-size:11.0pt;font-family:"Courier New"'>bbt</span><span
style='font-size:10.0pt;font-family:Verdana'> if they both were kept in a
dictionary. ASCII-cographically sorted means sorted in the order in a lexicon
where all the ascii characters are the alphabets. So here </span><span
style='font-size:11.0pt;font-family:"Courier New"'>abc</span><span
style='font-size:10.0pt;font-family:Verdana'> is smaller than </span><span
style='font-size:11.0pt;font-family:"Courier New"'>cde</span><span
style='font-size:10.0pt;font-family:Verdana'>, </span><span style='font-size:
11.0pt;font-family:"Courier New"'>Mccain</span><span style='font-size:10.0pt;
font-family:Verdana'> is smaller than </span><span style='font-size:11.0pt;
font-family:"Courier New"'>barak</span><span style='font-size:10.0pt;
font-family:Verdana'> etc.<span style='mso-spacerun:yes'>  </span>The format
string must contain at least one alpha-numeral character and should contain no
alpha-numeral more than once. If no format string of positive length and
consisting only alpha-numerals can produce such output or the input output pair
seems impossible then print the line </span><span style='font-size:11.0pt;
font-family:"Courier New"'>I_AM_UNDONE</span><span style='font-size:10.0pt;
font-family:Verdana'> instead (without the quotes). Note that the format string
is printed enclosed in a third bracket. Look at the output for sample input for
formatting details.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span style='mso-spacerun:yes'>     </span><span
style='mso-spacerun:yes'>                         </span>Output for Sample
Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>5<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>11 11<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>243 24<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>563 56<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>784 784<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>789 78<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>1<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>A b<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>0<o:p></o:p></span></p>
  </td>
  <td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 1:
  [01245678]<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 2:
  I_AM_UNDONE<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor,
Special Thanks: <st1:place w:st="on"><st1:City w:st="on">Sohel Hafiz</st1:City>,
 <st1:State w:st="on">Md.</st1:State></st1:place> Arifuzzaman<o:p></o:p></span></p>

<span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";mso-bidi-font-family:"Times New Roman";
color:black;mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4201||||||false||||||
<html><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>You are given n bulbs and m switches. Each of the switches toggles a list of bulbs.<span style='mso-spacerun:yes'>   </span>Initially all the bulbs are turned off. Now for a set of desired states of the bulbs calculate the minimum number of switch presses required to reach that state.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='mso-spacerun:yes'> </span></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input contains multiple test cases. First line contains an integer T the number of test cases. Each test case starts with a line containing 2 integers n (1&#8804;n&#8804;15) and m (1&#8804;m&#8804;40). Next m line contains the description of m switches.<span style='mso-spacerun:yes'>  </span>Each of these lines starts with an integer k denoting the number of bulbs that toggles their states after pressing this switch. The rest of the line contains k distinct integers denoting the indices of the bulbs. The bulbs are numbered from 0 to n-1. The next line contains an integer q(1&#8804;q&#8804;5000) that denotes the number of queries. Each of the following q line contains a binary string of length n denoting the desired states of the n bulbs: 1 means the bulb must be on and 0 means the bulb must be off. The rightmost character is the state of bulb 0 and the leftmost character is the state of bulb n-1.<o:p></o:p></span></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case output contains q+2 lines. First line
contains Case x: where x is the number of test cases. Each of the next q
lines contains one integer denoting the minimum number of switch presses
required to reach the bulb states in the ith query. If the state cannot be
reachable by a series of switch presses output -1. The last line will be a
blank line.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                             </span>Output for Sample
Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  0 1 2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2
  1 2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1
  2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>101<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>010<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>111<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4
  5<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1
  0<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1
  1<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2
  2 3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  0 1 3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2
  2 3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1111<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1010<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0101<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><b><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p>
  </td>
  <td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case
  1:<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case
  2:<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Abdullah al Mahmud,
Special thanks: S. Hafiz, Md. Arifuzzaman, S. Manzoor<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4202||||||false||||||
<html>

<p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1038"
 type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:13.1pt;width:3in;height:2in;z-index:1;
 mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:text'>
 <v:imagedata src="http://livearchive.onlinejudge.org/external/42/c_files/image009.png o:title=""/>
 <w:wrap type="square"/>
</v:shape><![endif]--><![if !vml]><img width=288 height=192
src="http://livearchive.onlinejudge.org/external/42/c_files/image009.png align=left hspace=12 v:shapes="_x0000_s1038"><![endif]></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Last year we set a problem on bachelor arithmetic which
made some bachelors really unhappy. So to even things up, we are making a
problem on the tough schedule of a married man. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Our dashing hero Danny has recently got married and that
has created a lot of problems for him, at least that is what his friends think.
So many broken promises, so many missed appointments and dinners. Err! Danny,
now is losing tracks of even simplest of calculations, so you must help him to
decide whether he can attend his meeting or not. Danny is busy with his wife
for a large portion of the day. This large portion is denoted by a starting
time and an ending time. Then Danny has an important meeting in a day, he
misses that if it overlaps or touches (For example, if Dannys time span with
his wife finishes at 18:00 and the meeting starts at 18:00 then the two
schedules conflict and Danny misses the meeting) the time scheduled for his
wife. Given the time span Danny has allotted for his wife and the time span of
the meeting you, will have to find whether Danny misses that meeting or not. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>First line of the input file contains an integer N
(0&lt;N&lt;2001) which denotes how many sets of inputs are there. The input for
each set is given in two lines. The description for each set is given below:<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>First line of each set contains two strings separated by a
single space. These two strings denote the time span Danny is busy with his
wife. The second line also contains two strings which denotes the time when
Danny has to attend a meeting. All the strings that denote time are of the
format hh:mm (two digit for hour and two digit for minute). For example forty
five past eight (Morning) is denoted as 08:45, forty five past 9 (night) is
denoted as 21:45.<span style='mso-spacerun:yes'>  </span>You can assume that
all times are valid 24-hour clock time, starting time strictly precedes ending
time and all times are within a single day. <o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each set of input produce one line of output. This
line contains the serial of output followed by a string which denotes Dannys
decision. If Danny can attend the meeting then print Hits Meeting and if
Danny misses (Mrs) the meeting as it conflicts with the time allotted for his
wife print Mrs Meeting instead.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                            </span>Output for Sample
Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>17:47 22:40<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>06:18 17:04<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>10:44 17:05<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>01:11 01:27<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>03:36 19:02<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>14:33 15:24<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>
  </td>
  <td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 1: Hits
  Meeting<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 2: Hits
  Meeting<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 3: Mrs
  Meeting<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem
setter: S.Manzoor, M. M. Rahman, Special Thanks: S. Hafiz, M. A. Arif</span></p>

</div>

</body>

</html>

______________________________________________________
4203||||||false||||||
<html><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Puzzles with geometric shapes are very interesting and is said to have great impact in developing geometric insight of a child. ACM (Actual Challenge Makers) is planning to bring out one such puzzle. The specialty of this puzzle is that all the pieces of this puzzle have the shape of right-angled triangles. All these right angled pieces make the target rectangular shape and it is shown in figure 2. <o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>It may be a bit difficult to construct or even reconstruct a puzzle which is only composed of pieces with the shape of a right-angled triangle. However if the actual rectangular puzzle is divided into several square sub-regions, and then those sub-regions are divided into four right-angled pieces then such puzzles are easy to make and solve.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:
 .5pt solid windowtext;mso-border-insidev:.5pt solid windowtext'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=243 valign=top style='width:182.2pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:171pt;height:152.25pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/42/d_files/image011.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=228 height=203 src="http://livearchive.onlinejudge.org/external/42/d_files/image011.png v:shapes="_x0000_i1026"><![endif]></p></td><td width=412 valign=top style='width:308.85pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:294.75pt;height:150.75pt'><v:imagedata src="http://livearchive.onlinejudge.org/external/42/d_files/image011.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=393 height=201 src="http://livearchive.onlinejudge.org/external/42/d_files/image011.png v:shapes="_x0000_i1027"><![endif]></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=243 valign=top style='width:182.2pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure 1: A cut to make four right angled triangle shaped pieces.<o:p></o:p></span></p></td><td width=412 valign=top style='width:308.85pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure 2: A conventional puzzle of triangles.<o:p></o:p></span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Whether a rectangle can be divided into small pieces of squares can itself be an interesting task to solve. But that is not the problem you have to solve here. Your job is to decide whether a square shaped sheet can be divided into four right-angled triangles as shown in figure 1. The machine that is used to cut the pieces can only deal with integers. So the length of the square shaped sheets is always expressed in integer units and also cutter can only cut in a straight line from one integer coordinate to another. The cutting must start on one of the corners of the square shaped sheet, continue cutting in a triangular path (Like AEF showed in Figure 1) and again finish at the corner it started. And if four corners of the square sheet are lattice points (0,0), (N,0), (N,N) and (0,N), where N is the length of sides of the square shaped sheet then point E and F should also be lattice points. So given a sheet, you have to determine whether such cuts are possible, and if it is possible then in how many ways. <o:p></o:p></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'><o:p>&nbsp;</o:p></span></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The input file contains at most 800 lines of inputs.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-size:10.0pt;font-family:Verdana;font-weight:normal'>Each line contains an integer N (0&lt;N&lt;10<sup>14</sup>), which means that we have to cut an (NxN) sheet.<o:p></o:p></span></span></p><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-size:10.0pt;font-family:Verdana;font-weight:normal'><o:p>&nbsp;</o:p></span></span></p><p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span style='font-size:10.0pt;font-family:Verdana;font-weight:normal'>Input is
terminated by a line containing a single zero. This zero should not be
processed.<o:p></o:p></span></span></p>

<p class=MsoNormal style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt;font-weight:normal'><o:p>&nbsp;</o:p></span></span></p>

<h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each line of input produce one line of output. This
line contains the serial of output followed by a string or an integer. If it is
not possible to cut the (NxN) sheet in the prescribed way, then print a line </span><span
style='font-size:11.0pt;font-family:"Courier New"'>Impossible</span><span
style='font-size:10.0pt;font-family:Verdana'>, otherwise print an integer W.
Here W denotes the number of ways such a cut is possible. Look at the output
for sample input for details<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'><o:p>&nbsp;</o:p></span></b></h1>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'><o:p>&nbsp;</o:p></span></b></h1>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'><o:p>&nbsp;</o:p></span></b></h1>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                            </span>Output for Sample
Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>10<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>20<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>100<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>32<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0<o:p></o:p></span></p>
  </td>
  <td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 1:
  Impossible<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 2: 8<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 3: 72<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 4: 24<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor,
Special Thanks: Derek Kisman</span></p>

</div>

</body>

</html>

______________________________________________________
4204||||||false||||||
<html><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><span style='font-size:10.0pt;
font-family:Verdana;font-style:normal'>Dealing with chemicals is a risky job, particularly if it is reactive. Reactive chemicals can be dangerous if not stored in an appropriate environment. As a result, sophisticated instruments that can support real-time processing, is required while transferring a reactive chemical from one part of a chemical plant to another one. However, instruments that can ensure strictly real-time service, is too much costly &amp; hence chemical plants use networks that provide real-time transfer with some tolerance. <o:p></o:p></span></h1><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><!--[if gte vml 1]><v:shape id="_x0000_s1039" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:5pt;width:193.9pt;height:290.1pt;z-index:1;
 mso-position-horizontal:left' stroked="t"><v:imagedata src="http://livearchive.onlinejudge.org/external/42/e_files/image015.png o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=261 height=388 src="http://livearchive.onlinejudge.org/external/42/e_files/image015.png align=left hspace=12 v:shapes="_x0000_s1039"><![endif]><span style='font-size:10.0pt;font-family:Verdana;font-style:normal'>Let us be a bit more elaborate. In our concerned chemical plant, there are V pits. Pits are places where chemicals can be stored. In order to reduce cost, they are not facilitated with reactive chemical handling environment. So, for every second the reactive chemical stays in some of these pits, they are decayed by 1 milligram. The pits are numbered from 1 to V. There is a safe storage attached to pit S. No time is required to move to the storage from pit S. There is some reactive chemical weighing W milligram in pit 1 at time 0. This chemical is to be transported to the safe storage. Note that, the safe storage door is opened exactly at time T. So, if the chemical reaches the storage before time T, you will have to accept decaying of the chemical whereas if it reaches after time T, it can
not enter the safe storage. There are E transfer tubes in the network. The
transfer tubes have suitable environment for storing reactive chemicals inside
them. So, the chemicals are not decayed inside the tubes. Each transfer tube
connects two pits with an entry point in pit s and an exit point in pit d. For
each tube t, the entry point door is opened for any 1 second between time sst
&amp; sct (sst &#8804; sct) but we don't exactly know in which second it is
opened. Similarly, the exit point door is opened for any single second between
time dst &amp; dct (dst &#8804; dct). As you don't know the exact timing of the
doors' opening, if we want to move the chemical from pit s to pit d using tube
t, it must be available at pit s no later than time sst. If the chemical
reaches a particular pit x using tube y with exit point range dsy &amp; dcy
(dsy &#8804; dcy ) &amp; leaves this pit using tube z with entry point range
ssz &amp; scz (ssz &#8804; scz), the maximum possible decay in that pit is scz
 dsy. Please note that, while choosing the tube to get out from a pit, you
must always select a tube with it's opening interval beginning no sooner than
the latest possible time for the chemical to enter that pit. For instance, in
the 3rd sample test case, the chemical will always leave pit 2 using the 3rd
edge even if it reaches pit 2 at time 15.<o:p></o:p></span></h1>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Write a program to find a way to transfer the chemical from
pit 1 to the safe storage with maximum guaranteed weight left (in milligram) in
the storage i.e. with minimum guaranteed decay. Please note that, the chemical
can not have negative weight at any point.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The input file contains multiple test cases. First line of
each test case contains three integers, V (1&#8804;V&#8804;50,000 ), E (1&#8804;E&#8804;100,000
) &amp; W (1&#8804;W&#8804;2,000,000,000 ). The next line has two integers, S
(1&#8804;S&#8804;V) &amp; T (0&#8804;T&#8804;2,000,000,000)<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each of the following E lines describes a tube. A
Tube<span style='mso-spacerun:yes'>  </span>t is described with 6 integers, s
(1&#8804;s&#8804;V), d (1&#8804;s&#8804;V), sst, sct, dst, dct (0&#8804;sst&#8804;sct&lt;dst&#8804;dct&#8804;2,000,000,000
) where s, d, sst, sct, dst &amp; dct holds the meaning as in problem
statement.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The end of input is denoted with a case where V = E = W =
0. This case should not be processed.<o:p></o:p></span></p>

<p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case, print a single line of the form,
Plant C:<span style='mso-spacerun:yes'>  </span>L where C is the test case
number and L is the weight of the chemical available in the safe storage at
time T.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                   </span>Output for Sample Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=655
 style='width:491.4pt;background:#CCCCCC;border-collapse:collapse;border:none;
 mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:45.2pt'>
  <td width=247 rowspan=2 valign=top style='width:185.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;height:45.2pt'>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 6 50<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 50<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 0 10 20 30<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 5 6 9 11<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 3 13 15 25 28<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 3 32 33 40 45<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 1 30 31 39 40<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 41 42 48 49<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>5 13 20<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 1000<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 3 41 41 999 1000<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 3 39 40 1000 1000<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>5 4 25 25 30 30<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 2 2 6 6<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 1 1 8 8<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 2 7 7 13 13<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 2 8 8 15 15<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 3 14 14 20 20<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 3 16 16 20 20<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>4 3 30 30 40 40<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>4 3 32 32 41 41<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 5 21 21 25 25<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 5 22 22 25 25<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 3 50<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>3 30<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>1 2 5 10 15 25<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 3 20 20 30 30<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>2 3 25 25 30 30<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New";
  mso-bidi-font-weight:bold'>0 0 0<o:p></o:p></span></p>
  </td>
  <td width=408 valign=top style='width:4.25in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;height:45.2pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Courier New"'>Plant 1: 27<o:p></o:p></span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Courier New"'>Plant 2: 15<o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Plant 3: 30<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes;height:180.6pt'>
  <td width=408 valign=top style='width:4.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;height:180.6pt'>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='mso-bidi-font-size:
  12.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>1<sup>st</sup>
  Sample Illustration:<o:p></o:p></span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Courier New"'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal style='layout-grid-mode:char'><span style='font-size:11.0pt;
  mso-bidi-font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:
  "Courier New"'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75"
   style='width:291.75pt;height:207pt;mso-position-horizontal-relative:char;
   mso-position-vertical-relative:line'>
   <v:imagedata src="http://livearchive.onlinejudge.org/external/42/e_files/image015.png o:title="" blacklevel="-6554f"/>
  </v:shape><![endif]--><![if !vml]><img width=389 height=276
  src="http://livearchive.onlinejudge.org/external/42/e_files/image015.png v:shapes="_x0000_i1026"><![endif]><o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana;mso-bidi-font-family:"Courier New"'>The above diagram
  depicts the first case in sample. The chemical starts at time 0 in pit 1.
  Then goes to 2 by the ([5,6] [9,11]) edge. Minimum guaranteed decay at 1 is
  6. Then 2 to 3 via the ([13,15] [25,28]) edge. Minimum guaranteed decay is 6.
  Then 3 to 1 through tube ([30,31] [39,40]). Again with 6 minimum guaranteed
  decay. Finally 1 to 2 by the ([41,42] [48,49]) edge. The minimum guaranteed
  decay is 3 at node 1 &amp; 2 at the destination.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Mohammad Mahmudur
Rahman, Special Thanks: Derek Kisman<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4205||||||false||||||
<html>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Creating a good and easy Graphical user interface is the
heart of operating a computer in modern days. One important part of this
interface is enabling users to give inputs using mouse and keyboard. Many
different types of forms are there to take inputs from users. Such as (a) Text
Box<span style='mso-spacerun:yes'>  </span>(b) Radio Button (c) Check Box (d)
Combo Box etc. In this problem we will concentrate on check box. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Check boxes are used when a user needs to select more than
one choice. Such a checkbox is shown in the figure on the left below.<span
style='mso-spacerun:yes'>  </span>The problem with checkbox is that when
someone has to choose n options or names he has to make n clicks, which can be
very annoying when n is high. So the new software giant <b>toggle</b> is using
a new type of checkbox, which shows good performance when number of boxes to be
checked is high. In normal check box, a box is checked or unchecked if and only
if it is clicked but in <b>toggle </b>checkbox when a box is clicked then all
the boxes below it is also gets its status. That is if a box is originally not
checked then if someone clicks this box then this box and all the boxes below
it will be checked. Similarly if a box is checked and someone clicks on it then
it will become unchecked and so will all the boxes below it. So the selection
made on the left can be made by only five clicks (The boxes that has to be
clicked are marked with red or dark square on the right figure) in <b>toggle </b>checkbox
(We are calling naming new type of checkbox as toggle checkbox).<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:.5pt solid windowtext;
 mso-border-insidev:.5pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><o:wrapblock><v:shape
    id="_x0000_s1035" type="#_x0000_t75" style='position:absolute;left:0;
    text-align:left;margin-left:-4.6pt;margin-top:-310.35pt;width:203.1pt;
    height:284.3pt;z-index:1'>
    <v:imagedata src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png o:title=""/>
    <w:wrap type="topAndBottom"/>
   </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout;
   position:relative;z-index:1;left:-6px;top:0px;width:271px;height:379px'><img
   width=271 height=379 src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png v:shapes="_x0000_s1035"></span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
  style='mso-ignore:vglayout' clear=ALL>
  </p>
  </td>
  <td width=336 valign=top style='width:251.65pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><o:wrapblock><v:shape
    id="_x0000_s1036" type="#_x0000_t75" style='position:absolute;left:0;
    text-align:left;margin-left:7.9pt;margin-top:-280.75pt;width:195.45pt;
    height:286.05pt;z-index:2;mso-position-horizontal-relative:text;
    mso-position-vertical-relative:text'>
    <v:imagedata src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png o:title=""/>
    <w:wrap type="topAndBottom"/>
   </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout'>
   <table cellpadding=0 cellspacing=0>
    <tr>
     <td width=10 height=0></td>
    </tr>
    <tr>
     <td></td>
     <td><img width=261 height=381 src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png v:shapes="_x0000_s1036"></td>
    </tr>
   </table>
   </span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
  style='mso-ignore:vglayout' clear=ALL>
  </p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'>
  <td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure 1: 12 clicks are required in ordinary checkbox<o:p></o:p></span></p>
  </td>
  <td width=336 valign=top style='width:251.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure 2: 5 clicks are required in toggle checkbox.<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><span style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The researchers of toggle have shown that <b>toggle </b>checkboxes
show better performance when at least 50% boxes are to be checked. For example
for the selection shown in the above picture we needed 12 clicks to check 12
boxes in normal checkbox but only five clicks were required for <b>toggle </b>checkboxes.
So in this situation <b>toggle boxes </b>show better performance. In many other
selection, <b>toggle </b>checkbox would also show strictly better performance.
Your job is to count in how many selection patterns (where at least m boxes out
of the n boxes in the checkbox are to be selected) toggle check box would show
better performance and in how many selection patterns ordinary checkbox would
show better performance.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The input file contains 1000 lines of inputs. The
description of each line is given below:<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each line contains two integers n (0&lt;n&lt;64) and m (0<i>&#8804;</i>m<i>&#8804;</i>n).
These two values indicate that you have to consider a checkbox with n boxes to
check and consider only the input patterns where at least m of them are
checked. Assume that initially all the boxes are unchecked. <span
style='mso-tab-count:7'>                                                                 </span><span
style='mso-tab-count:5'>                                                </span><o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input is terminated by a line containing two zeroes. This
line should be processed.<span style='mso-tab-count:3'>                          </span></span><span
style='mso-tab-count:1'>            </span><span style='mso-tab-count:11'>                                                                                                                                    </span></p>

<h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoNormal style='text-align:justify;tab-stops:121.5pt'><span
style='font-size:10.0pt;font-family:Verdana'>For each line of input produce one
line of output. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:121.5pt'><span
style='font-size:10.0pt;font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:121.5pt'><span
style='font-size:10.0pt;font-family:Verdana'>This line contains the serial of
output followed by two integers TC and NC. Here TC is the total number of
selection patterns where toggle checkbox requires less clicks and NC is the
total number of selection patterns where ordinary or normal checkboxes require
less clicks. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                               </span>Output for
Sample Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>5 3<o:p></o:p></span></b></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>10 3<o:p></o:p></span></b></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0 0<o:p></o:p></span></b></p>
  </td>
  <td width=324 valign=top style='width:243.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Case 1: 9 3<o:p></o:p></span></b></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Case 2: 370 419<o:p></o:p></span></b></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor, Special
Thanks: Derek Kisman, Md. Arifuzzaman Arif<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Look at the illustration of first
sample input on next page <o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><!--[if gte vml 1]><o:wrapblock><v:shape id="_x0000_s1037"
  type="#_x0000_t75" style='position:absolute;margin-left:-9pt;margin-top:0;
  width:495.95pt;height:523.1pt;z-index:3'>
  <v:imagedata src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png o:title=""/>
  <w:wrap type="topAndBottom"/>
 </v:shape><![endif]--><![if !vml]><span style='mso-ignore:vglayout;position:
 relative;z-index:3;left:-12px;top:0px;width:661px;height:697px'><img
 width=661 height=697 src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png v:shapes="_x0000_s1037"></span><![endif]><!--[if gte vml 1]></o:wrapblock><![endif]--><br
style='mso-ignore:vglayout' clear=ALL>
</p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Illustration of first sample Input/Output:<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>When the total number of boxes that can be checked is five
and at least three boxes has to be selected the total possible patterns for
checking is <sub><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75"
 style='width:156.75pt;height:30.75pt' o:ole="">
 <v:imagedata src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=209 height=41
src="http://livearchive.onlinejudge.org/external/42/f_files/image019.png v:shapes="_x0000_i1026"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1026"
  DrawAspect="Content" ObjectID="_1287574068">
 </o:OLEObject>
</xml><![endif]-->. Of these 16 patterns nine patterns are such that Toggle
Checkbox shows better performance, three patterns are such that Normal Checkbox
shows better performance while other four others are tied.<span
style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

</div>

</body>

</html>

______________________________________________________
4206||||||false||||||
<html>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<table class=MsoTableGrid border=0 cellspacing=0 cellpadding=0
 style='margin-left:5.4pt;border-collapse:collapse;mso-yfti-tbllook:480;
 mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:1.6in'>
  <td width=336 valign=top style='width:3.5in;padding:0in 5.4pt 0in 5.4pt;
  height:1.6in'>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Tanzibal has just reached the last level of the computer
  game icpcAxe. <o:p></o:p></span></p>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>She has used up most of her superpowers in the earlier
  levels while defeating the monsters.<span style='mso-spacerun:yes'> 
  </span>Fortunately, there arent too many monsters in this level that needs
  to be tackled with.<o:p></o:p></span></p>
  </td>
  <td width=312 valign=top style='width:3.25in;padding:0in 5.4pt 0in 5.4pt;
  height:1.6in'>
  <p class=MsoNormal align=right style='text-align:right'><span
  style='font-size:10.0pt;font-family:Verdana'><!--[if gte vml 1]><v:shape
   id="_x0000_i1026" type="#_x0000_t75" style='width:210.75pt;height:112.5pt'>
   <v:imagedata src="http://livearchive.onlinejudge.org/external/42/g_files/image027.png o:title=""/>
  </v:shape><![endif]--><![if !vml]><img width=281 height=150
  src="http://livearchive.onlinejudge.org/external/42/g_files/image027.png v:shapes="_x0000_i1026"><![endif]><o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first step of this level is to spot the locations of
the monsters. After spotting the locations, Tanzibal has to drop the
superpowers one after another on the ground, at different locations, in order
to attack the monsters. A superpower, when dropped at certain point, creates a
magic ring of certain radius. Any monster that lies within the periphery of
this ring will be injured. The radii of the rings generated by the superpowers
are all same, but its value is in Tanzibals control. Tanzibal chooses a radius
that is as low as possible. All the rings will have this particular radius that
Tanzibal opts for.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Given the location of N monsters and the number of
superpowers that Tanzibal has at her disposal, can you find out the minimum
radius of the magic rings which would be enough to injure all the monsters. <o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>Input<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first line of input is an integer </span><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>T</span><span
style='font-size:10.0pt;font-family:Verdana'>(</span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>T</span><i><span
style='font-size:10.0pt;font-family:Verdana'>&#8804;</span></i><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>80</span><span
style='font-size:10.0pt;font-family:Verdana'>) that indicates the number of
test cases. Each case starts with two integers </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>N</span><span
style='font-size:10.0pt;font-family:Verdana'>(</span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>0&lt;</span><span
style='font-size:10.0pt;font-family:Verdana'> </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>N&lt;</span><span
style='font-size:10.0pt;font-family:Verdana'> </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>19</span><span
style='font-size:10.0pt;font-family:Verdana'>) and </span><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>(0&lt;</span><span
style='font-size:10.0pt;font-family:Verdana'> </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>K</span><i><span
style='font-size:10.0pt;font-family:Verdana'>&#8804;</span></i><span
style='font-size:10.0pt;font-family:Verdana'> </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>N</span><span
style='font-size:10.0pt;font-family:Verdana'>). </span><span style='font-size:
10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>N</span><span
style='font-size:10.0pt;font-family:Verdana'> represents the number of monsters
and </span><span style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:
"Courier New"'>K</span><span style='font-size:10.0pt;font-family:Verdana'>
represents the number of superpowers at hand. The next line contains the
coordinates of the N monsters in the format </span><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:"Courier New"'>x<sub>1</sub> y<sub>1</sub>
x<sub>2</sub> y<sub>2</sub>  x<sub>n</sub> y<sub>n</sub></span><span
style='font-size:10.0pt;font-family:Verdana'>. All the coordinates are integers
in the range [0, 10000].<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Note: For 70% of the test cases, (0 &lt; </span><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:"Courier New"'>N</span><span
style='font-size:10.0pt;font-family:Verdana'> &lt; 11).<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>Output<o:p></o:p></span></b></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each case, output the case number, followed by the
minimum radius of the magic rings rounded to 2 decimal places. Look at the
output for sample input for details.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                               </span>Output for
Sample Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>2 1<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0 0 10 0<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>6 2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0 0 1 1 2 2 10 10 10 11 10 12<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>4 2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0 0 10 0 5 10 1000 1000<o:p></o:p></span></p>
  </td>
  <td width=348 valign=top style='width:261.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Case 1: 5.00<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Case 2: 1.41<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>Case 3: 6.25<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Sohel Hafiz,
Special Thanks: <st1:State w:st="on"><st1:place w:st="on">Md.</st1:place></st1:State>
Arifuzzaman Arif<span style='mso-spacerun:yes'>  </span><o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4207||||||false||||||
<html><p class=MsoBodyText style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:Verdana;mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p><p class=MsoBodyText style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:Verdana;mso-bidi-font-weight:bold'>ACRush</span><span style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:Verdana'> is very famous in Supercoder. Supercoder is a professional company which arranges online algorithmic contests and rates peoples based on those contests. In Supercoder algorithm contest ranklist, ACRush is ranked third. Now a days he is doing some analysis on his rating history in Supercoder algorithm contest. In Supercoder, an algorithm contest is termed as a <span style='mso-bidi-font-weight:bold'>Single Round Tournament</span><b style='mso-bidi-font-weight:normal'> </b>(SRT). After each SRT is finished, rating of a contestant is updated according to his/her relative performance. ACRush collected all these rating information, and using those he created a line chart. &nbsp; <o:p></o:p></span></p><p class=MsoBodyText style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>To make things more clear, let us consider the following table as his rating info.<o:p></o:p></span></p><p class=MsoNormal><a name=mhvd></a><span style='font-size:10.0pt;font-family:
Verdana;mso-bidi-font-family:Verdana'><o:p>&nbsp;</o:p></span></p><div align=center><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='margin-left:2.15pt;border-collapse:collapse;mso-padding-alt:2.15pt 2.15pt 2.15pt 2.15pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;page-break-inside:avoid;
  height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents><b style='mso-bidi-font-weight:normal'><span style='mso-bidi-font-family:Verdana'>SRT<o:p></o:p></span></b></p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents><b style='mso-bidi-font-weight:normal'><span style='mso-bidi-font-family:Verdana'>Rating<o:p></o:p></span></b></p></td></tr><tr style='mso-yfti-irow:1;page-break-inside:avoid;height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>320</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>3</p></td></tr><tr style='mso-yfti-irow:2;page-break-inside:avoid;height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>306</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>1</p></td></tr><tr style='mso-yfti-irow:3;page-break-inside:avoid;height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>401</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>3</p></td></tr><tr style='mso-yfti-irow:4;page-break-inside:avoid;height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>325</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>4</p></td></tr><tr style='mso-yfti-irow:5;page-break-inside:avoid;height:13.65pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>393</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:13.65pt'><p class=TableContents>5</p></td></tr><tr style='mso-yfti-irow:6;mso-yfti-lastrow:yes;page-break-inside:avoid;
  height:12.85pt'><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:12.85pt'><p class=TableContents>380</p></td><td width=222 style='width:166.65pt;padding:2.15pt 2.15pt 2.15pt 2.15pt;
  height:12.85pt'><p class=TableContents>2</p></td></tr></table></div><p class=MsoBodyText style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><br>From this table, we see that his first SRT was SRT#306, and rating after that SRT was 1, so he <o:p></o:p></span></p><p class=MsoBodyText style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>marked point (1, 1) as r<sub>1</sub> in graph paper, his second SRT was SRT#320 and rating after that SRT was 3, so he marked (2, 3) as r<sub>2</sub>, then he add r<sub>1</sub> with r<sub>2</sub> by a straight line and so on.<br><br>In general for his i<sup>th</sup> SRT he marked point (i, rating after i<sup>th</sup> SRT) by r<sub>i</sub>.<br><br>After marking all the points he will add point r<sub>i </sub>with r<sub>i-1</sub> by straight lines, for all&nbsp; 1 &lt; i &lt;=N, Where N is the total number of SRTs he played. For better idea look at figure 1:<o:p></o:p></span></p><p class=MsoNormal><a name=zvyr></a><span style='font-size:10.0pt;font-family:
Verdana;mso-bidi-font-family:Verdana'><o:p>&nbsp;</o:p></span></p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='margin-left:2.15pt;border-collapse:collapse;mso-padding-alt:2.15pt 2.15pt 2.15pt 2.15pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  page-break-inside:avoid'><td width=336 style='width:3.5in;padding:2.15pt 2.15pt 2.15pt 2.15pt'><p class=TableContents align=center style='text-align:center'><span style='mso-bidi-font-family:Verdana'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:162pt;height:162pt' filled="t"><v:fill color2="black"/><v:imagedata src="http://livearchive.onlinejudge.org/external/42/h_files/image029.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=216 height=216 src="http://livearchive.onlinejudge.org/external/42/h_files/image029.png v:shapes="_x0000_i1026"><![endif]><br>Fig 1: Line chart cosidering all SRTs<o:p></o:p></span></p></td><td width=273 style='width:204.55pt;padding:2.15pt 2.15pt 2.15pt 2.15pt'><p class=TableContents align=center style='text-align:center'><span style='mso-bidi-font-family:Verdana'><!--[if gte vml 1]><v:shape id="_x0000_i1027" type="#_x0000_t75" style='width:162pt;height:162pt' filled="t"><v:fill color2="black"/><v:imagedata src="http://livearchive.onlinejudge.org/external/42/h_files/image029.png o:title=""/></v:shape><![endif]--><![if !vml]><img width=216 height=216 src="http://livearchive.onlinejudge.org/external/42/h_files/image029.png v:shapes="_x0000_i1027"><![endif]><br>Fig 2: Line chart ignoring SRT #380<br style='mso-special-character:line-break'><![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'><![endif]><o:p></o:p></span></p><p class=TableContents><o:p>&nbsp;</o:p></p></td></tr></table></div><span style='font-size:10.0pt;font-family:Verdana;mso-fareast-font-family:"Times New Roman";
mso-bidi-font-family:"Times New Roman";color:black;mso-ansi-language:EN-US;
mso-fareast-language:EN-US;mso-bidi-language:AR-SA'><br clear=all style='page-break-before:always;mso-break-type:section-break'></span><div class=Section2><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:Verdana'>After drawing line chart, he became very interested about the number of peaks. There are two kinds of peaks in a line chart, 1) <st1:PlaceName w:st="on">Upper</st1:PlaceName> <st1:PlaceType w:st="on">Peak</st1:PlaceType> and 2) <st1:place w:st="on"><st1:PlaceName w:st="on">Lower</st1:PlaceName> <st1:PlaceType w:st="on">Peak</st1:PlaceType></st1:place>. <st1:place w:st="on"><st1:PlaceName w:st="on">Upper</st1:PlaceName> <st1:PlaceType w:st="on">Peak</st1:PlaceType></st1:place> is that point in a line chart whose previous and next point has smaller y coordinates and lower peak is that points in a line chart whose previous and next point has greater y coordinates. For example total number of peak in figure 1 is 3. Two of them upper peak, which
are (3, 4) and (5, 5), and one of them is lower peak which is (4, 2).<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:Verdana'><br>
ACRush observed that by ignoring SRT#380, his line chart will become like
figure 2, in which number of peak is only 1. By observing this he became more
curious. Now he wants to know, by ignoring 0 or more SRTs how many distinct
line charts having K peaks is possible. ACRush calls these line charts K-peak
Line charts, in a K-peak line chart he doesnt allow two consecutive points to
have same y coordinate.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana;mso-bidi-font-family:Verdana'>Input will start with an
integer T ( T &#8804; 12 ), which indicates the number of test cases. Each case
starts with a line having two integers N (1 &#8804;N &#8804; 10000) and K ( 0 &#8804;
K &#8804; 50 ). Each of the next N lines will contain two integers SRT ( 1 &#8804;
SRT &#8804; 1000000000) and Rating ( 1 &#8804; Rating &#8804; 1000000000 ). All
the SRT numbers will be distinct. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4>

<p class=MsoBodyText style='margin-bottom:14.15pt;text-align:justify'><span
style='font-size:10.0pt;font-family:Verdana;mso-bidi-font-family:Verdana'>For
Each test case output a single Line &quot;Case #: W&quot;, here # will be
replaced by case number and W will be replaced by the number of distinct K-peak
line charts modulo 1000000. <o:p></o:p></span></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                               </span>Output for
Sample Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:223.15pt'>
  <td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;height:223.15pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>6
  1<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>320
  3<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>306
  1<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>401
  3<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>325
  4<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>393
  5<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>380
  2<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>4
  1<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>101
  3<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>102
  2<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>103
  2<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>104
  4<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>3
  0<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>102
  2<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>101
  1<o:p></o:p></span></p>
  <p class=MsoBodyText style='margin-bottom:14.15pt'><span style='font-size:
  11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>103 3<o:p></o:p></span></p>
  </td>
  <td width=348 valign=top style='width:261.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt;height:223.15pt'>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case
  1: 20<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case
  2: 1<o:p></o:p></span></p>
  <p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case
  3: 8<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: <st1:place w:st="on"><st1:State
 w:st="on">Md.</st1:State></st1:place> Arifuzzaman Arif, Special Thanks: A. A.
mahmud, S. Hafiz, R. Liu<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4208||||||false||||||
<html>

<p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Byte Communication Inc. (BYTECOM) is establishing its
cellular network in Byteland.<span style='mso-spacerun:yes'>  </span>From the
first month of their establishment they are expanding their network very
aggressively. Every month they are constructing some transmission tower. They
are considering the following policy while establishing their networks.<o:p></o:p></span></p>

<p class=ListParagraph style='text-align:justify;text-indent:-.25in;mso-list:
l0 level1 lfo2'><![if !supportLists]><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana;mso-fareast-font-family:Verdana;mso-bidi-font-family:
Verdana'><span style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;line-height:115%;
font-family:Verdana'>BYTECOM have divided the Byteland into a logical hexagonal
grid with N levels. Below is the example of a hexagonal grid with 4 levels. <o:p></o:p></span></p>

<p class=MsoNormalCxSpFirst align=center style='mso-margin-top-alt:auto;
mso-margin-bottom-alt:auto;margin-left:.25in;mso-add-space:auto;text-align:
center'><span style='mso-bidi-font-size:12.0pt;color:windowtext;mso-bidi-language:
#0845'><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75"
 style='width:190.5pt;height:211.5pt'>
 <v:imagedata src="http://livearchive.onlinejudge.org/external/42/i_files/image033.png o:title=""/>
</v:shape><![endif]--><![if !vml]><img width=254 height=282
src="http://livearchive.onlinejudge.org/external/42/i_files/image033.png v:shapes="_x0000_i1026"><![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
text-align:justify'><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>First level is the center and it
contains only cell 1. The number of cells in subsequent levels is 6,12,18,.. 2<sup>nd</sup>
level contains cells from 2 to 7, 3<sup>rd</sup> level contains cells from
8-19, 4<sup>th</sup> level contains cells from 20-37, In each of the first the
lowest cell is numbered. Then the rest of the cells are numbered in clockwise
order.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-align:justify;text-indent:-.25in;mso-list:l0 level1 lfo2'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Verdana;mso-fareast-font-family:Verdana;
mso-bidi-font-family:Verdana;color:windowtext;mso-bidi-language:#0845'><span
style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>Each transmission tower covers exactly
one cell. So they will not build multiple towers in the same cell.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-align:justify;text-indent:-.25in;mso-list:l0 level1 lfo2'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Verdana;mso-fareast-font-family:Verdana;
mso-bidi-font-family:Verdana;color:windowtext;mso-bidi-language:#0845'><span
style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>There are 3 types of lines. <o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpFirst style='margin-left:1.0in;mso-add-space:
auto;text-align:justify;text-indent:-.25in;mso-list:l2 level1 lfo4'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana'>The
lines parallel to the connecting lines of the center of cell 1 and cell 2 is
TYPE1 line. For example cell 14 and cell 29 are in the same TYPE1 line. Same
for the cell pairs (4, 28), (32, 35), (23, 25) etc.<o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpMiddle style='margin-left:1.0in;mso-add-space:
auto;text-align:justify;text-indent:-.25in;mso-list:l2 level1 lfo4'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana'>The
lines parallel to the connecting lines of the center of cell 1 and cell 3 is
TYPE2 line. For example cell 15 and cell 11 are in the same TYPE2 line. Same
for the cell pairs (4, 31), (10, 32), (16, 23) etc.<o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpMiddle style='margin-left:1.0in;mso-add-space:
auto;text-align:justify;text-indent:-.25in;mso-list:l2 level1 lfo4'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana'>The
lines parallel to the connecting lines of the center of cell 1 and cell 4 is
TYPE3 line. For example cell 13 and cell 17 are in the same TYPE3 line. Same
for the cell pairs (5, 27), (10, 37), (16, 28) etc.<o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpLast style='margin-left:1.0in;mso-add-space:
auto;text-align:justify;text-indent:-.25in;mso-list:l2 level1 lfo4'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Symbol;mso-fareast-font-family:Symbol;
mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana'>To
clarify more there is not any other type of line. For example cell 3 and cell 5
is not in any type of line. Same for the cell pairs (4, 6), (12, 29) etc.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:.5in;text-align:justify'><span
style='font-size:10.0pt;font-family:Verdana'>Every month BYTECOM will construct
a number of cellular towers. But they have constraints for each the numbers of
towers in each of the line type.<o:p></o:p></span></p>

<p class=ListParagraph style='margin-left:1.0in;mso-add-space:auto;text-align:
justify;text-indent:-.25in;mso-list:l1 level1 lfo6'><![if !supportLists]><span
style='font-size:10.0pt;line-height:115%;font-family:Symbol;mso-fareast-font-family:
Symbol;mso-bidi-font-family:Symbol'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;line-height:115%;
font-family:Verdana'>Every month they can construct unlimited number of towers
in each of the TYPE1 lines.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:1.0in;mso-add-space:auto;text-align:justify;text-indent:-.25in;
mso-list:l1 level1 lfo6'><![if !supportLists]><span style='font-size:10.0pt;
font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:Symbol;
color:windowtext;mso-bidi-language:#0845'><span style='mso-list:Ignore'>·<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>Every month they can construct at
most 2 towers in each of the TYPE2 lines.<o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpFirst style='margin-left:63.0pt;mso-add-space:
auto;text-align:justify;text-indent:-9.0pt;mso-list:l1 level1 lfo6'><![if !supportLists]><span
style='font-family:Symbol;mso-fareast-font-family:Symbol;mso-bidi-font-family:
Symbol'><span style='mso-list:Ignore'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-family:Verdana'>Every month
they can construct at most 3 towers in each of the TYPE3 lines.<o:p></o:p></span></p>

<p class=msonormalcxspmiddleCxSpLast style='text-align:justify'><o:p>&nbsp;</o:p></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-align:justify;text-indent:-.25in;mso-list:l0 level1 lfo2'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Verdana;mso-fareast-font-family:Verdana;
mso-bidi-font-family:Verdana;color:windowtext;mso-bidi-language:#0845'><span
style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>Initially the construction cost of a
tower in cell i is C<sub>i</sub> units of money. But because of inflation it
will increase by 1 unit of money every month. For example if C<sub>5</sub> is
10 then construction of a tower in cell 5 is 10 units of money in first month,
11 units of money in second month, 12 units of money in third months and so on.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
margin-left:.5in;text-align:justify;text-indent:-.25in;mso-list:l0 level1 lfo2'><![if !supportLists]><span
style='font-size:10.0pt;font-family:Verdana;mso-fareast-font-family:Verdana;
mso-bidi-font-family:Verdana;color:windowtext;mso-bidi-language:#0845'><span
style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span style='font-size:10.0pt;font-family:Verdana;
color:windowtext;mso-bidi-language:#0845'>On month i BYTECOM will construct M<sub>i</sub>
number of towers with following the policy above. Their plan is to minimize the
cost of construction of these M<sub>i</sub> towers. In each month they just
want to minimize the cost of that month, they dont care for the following
months. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Now given information of the cells and the monthly plans,
help BYTECOM to minimize the cost of tower construction for each of the months.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input contains multiple numbers of test cases. First line
contains T(1&#8804;T&#8804;10) the number of test cases.<span
style='mso-spacerun:yes'>  </span>Each test case consists of 3 lines. First
line contains n(2&#8804;n&#8804;20) and m(1&#8804;m&#8804;10). n is the number
of levels in cellular grid and m is the number of months for which BYTECOM is
constructing cellular towers. Second line contains 3n<sup>2</sup>-3n+1 integers
(the total number of cells) .The ith integer is C<sub>i</sub> (1&#8804; C<sub>i</sub>
&#8804;1000) denoting the cost of construction of a tower in cell i at first
month.<span style='mso-spacerun:yes'>  </span>Third line contains m integers.
The ith integer is M<sub>i</sub> (1&#8804; M<sub>i</sub> &#8804;50) denoting
the number of towers that need to be constructed on ith month. <o:p></o:p></span></p>

<p class=MsoNormal><b><o:p>&nbsp;</o:p></b></p>

<h5 style='text-align:justify'><span class=StyleArial16pt><span
style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output</span></span><span
class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case output contains M+2 lines. First line
is Case i: where i the number of test case. Each of the next M lines contains
the cost for the ith month in the following format. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Month i: c unit of money<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Where c is the minimum construction cost for M<sub>i</sub>
towers in month i. <o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Also the input guarantee that for every month the set of M<sub>i</sub>
cells where building M<sub>i</sub> towers costs c amount of money will be
unique. No other set of unused cells will cost c or less amount of money in
that month. An unused cell is the one where no tower has been built yet.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Also it will be always possible to build M<sub>i</sub>
number of towers in ith month.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The last line is blank.<o:p></o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>See the output for sample input for details.<o:p></o:p></span></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span
style='mso-spacerun:yes'>                                            
</span>Output for Sample Input<o:p></o:p></span></b></h1>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=403 valign=top style='width:4.2in;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2
  2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  4 3 7 6 7 5<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>6
  1<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  2<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>9
  9 9 3 3 10 13 6 11 11 5 13 11 7 5 12 4 6 9<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>10
  8<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3
  3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>9
  10 5 5 10 6 4 4 3 5 5 7 8 10 12 6 9 5 3<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>10
  8 1<o:p></o:p></span></p>
  </td>
  <td width=271 valign=top style='width:203.05pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Case 1:<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 1: 28
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 2: 8 unit
  of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Case 2:<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 1: 67
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 2: 85
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'><o:p>&nbsp;</o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Case 3:<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 1: 49
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 2: 76
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>Month 3: 11
  unit of money<o:p></o:p></span></p>
  <p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
  style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></b></p>
  </td>
 </tr>
</table>

<div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-size:10.0pt;font-family:Verdana'>Problem setter: Abdullah al
Mahmud, Special Thanks: Rujia Liu, M. M. Rahman<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

______________________________________________________
4209||||||false||||||
<html><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>So! The time of the universe is up and it is the dooms day after five hours :-P, and you must stop it. But to do so you have to know the value of the following expression T:<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><sub><!--[if gte vml 1]><v:shape id="_x0000_i1026" type="#_x0000_t75" style='width:441pt;height:45.75pt' o:ole=""><v:imagedata src="http://livearchive.onlinejudge.org/external/42/j_files/image002.wmz o:title=""/></v:shape><![endif]--><![if !vml]><img width=588 height=61 src="http://livearchive.onlinejudge.org/external/42/j_files/image002.wmz v:shapes="_x0000_i1026"><![endif]></sub><!--[if gte mso 9]><xml>
 <o:OLEObject Type="Embed" ProgID="Equation.3" ShapeID="_x0000_i1026"
  DrawAspect="Content" ObjectID="_1287574185">
 </o:OLEObject>
</xml><![endif]--><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Because the secret code that will save the universe from being doomed have something to do with the value of the above expression for some value of n.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The input file contains 1000 lines of inputs. <o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each line contains a single integer n (0&lt;n&#8804;2000000000).<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><span style='mso-tab-count:8'>                                                                             </span><o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>A line containing a single zero terminates input.<span style='mso-tab-count:7'>                                                              </span></span><span style='mso-tab-count:2'>                        </span><span style='mso-tab-count:
7'>                                                                                    </span></p><h4 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify;tab-stops:121.5pt'><span style='font-size:10.0pt;font-family:Verdana'>For each line of input produce one line of output. This line contains the value of T.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:121.5pt'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                               </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>12<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>20<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>1001<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>0<o:p></o:p></span></b></p></td><td width=324 valign=top style='width:243.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>2199<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>803<o:p></o:p></span></b></p><p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New"'>2390<o:p></o:p></span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify;tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman<o:p></o:p></span></p><p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4210||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Almost Shortest Path</title></head><body> <!--h1 align="center">Almost Shortest Path</h1--><p>Finding the shortest path that goes from a starting point to a destination point given a set of points and route lengths connecting them is an already well known problem, and it's even part of our daily lives, as shortest path programs are widely available nowadays.<p>Most people usually like very much these applications as they make their lives easier. Well, maybe not that much easier.<p>Now that almost everyone can have access to GPS navigation devices able to calculate shortest paths, most routes that form the shortest path are getting slower because of heavy traffic. As most people try to follow the same path, it's not worth it anymore to follow these directions.<p>With this in his mind, your boss asks you to develop a new application that only he will have access to, thus saving him time whenever he has a meeting or any urgent event. He asks you that the program must answer not the shortest path, but the almost shortest path. He defines the almost shortest path as the shortest path that goes from a starting point to a destination point such that no route between two consecutive points belongs to any shortest path from the starting point to the destination.<p>For example, suppose the figure below represents the map given, with circles representing location points, and lines representing direct, one-way routes with lengths indicated. The starting point is marked as <tt>S</tt> and the destination point is marked as <tt>D</tt>. The bold lines belong to a shortest path (in this case there are two shortest paths, each with total length 4). Thus, the almost shortest path would be the one indicated by dashed lines (total length 5), as no route between two consecutive points belongs to any shortest path. Notice that there could exist more than one possible answer, for instance if the route with length 3 had length 1. There could exist no possible answer as well.<p><center><img src="http://livearchive.onlinejudge.org/external/42/p4210.gif/></center><p><h3>Input</h3>The input contains several test cases. The first line of a test case contains two integers <i>N</i> (2 &le; <i>N</i> &le; 500) and <i>M</i> (1 &le; <i>M</i> &le; 10<sup>4</sup>), separated by a single space, indicating respectively the number of points in the map and the number of existing one-way routes connecting two points directly. Each point is identified by an integer between 0 and <i>N</i> -1. The second line contains two integers <i>S</i> and <i>D</i>, separated by a single space, indicating respectively the starting and the destination points (<i>S</i> &ne; <i>D</i>; 0 &le; <i>S</i>, <i>D</i> &lt; <i>N</i>). Each one of the following <i>M</i> lines contains three integers <i>U</i>, <i>V</i> and <i>P</i> (<i>U</i> &ne; <i>V</i>; 0 &le; <i>U</i>, <i>V</i> &lt; <i>N</i>; 1 &le; <i>P</i> &le; 10<sup>3</sup>), separated by single spaces, indicating the existence of a one-way route from <i>U</i> to <i>V</i> with distance <i>P</i>. There is at most one route from a given point <i>U</i> to a given point <i>V</i>, but notice that the existence of a route from <i>U</i> to <i>V</i> does not imply there is a route from <i>V</i> to <i>U</i>, and, if such road exists, it can have a different length. The end of input is indicated by a line containing only two zeros separated by a single space.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing <tt>-1</tt> if it is not possible to match the requirements, or an integer representing the length of the almost shortest path found.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
7 9
0 6
0 1 1
0 2 1
0 3 2
0 4 3
1 5 2
2 6 4
3 6 2
4 6 4
5 6 1
4 6
0 2
0 1 1
1 2 1
1 3 1
3 2 1
2 0 3
3 0 2
6 8
0 1
0 1 1
0 2 2
0 3 3
2 5 3
3 4 2
4 1 1
5 1 1
3 0 1
0 0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
5
-1
6
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4211||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Bases</title></head><body> <!--h1 align="center">Bases</h1--><p>What do you get if you multiply 6 by 9? The answer, of course, is 42, but only if you do the calculations in base 13.<p>Given an integer <i>B</i> &ge; 2, the <em>base <i>B</i> numbering system</em> is a manner of writing integers using only digits between 0 and <i>B</i> -1, inclusive. In a number written in base <i>B</i>, the rightmost digit has its value multiplied by 1, the second rightmost digit has its value multiplied by <i>B</i>, the third rightmost digit has its value multiplied by <i>B</i><sup>2</sup>, and so on.<p>Some equations are true or false depending on the base they are considered in. The equation 2+2=4, for instance, is true for any <i>B</i> &ge; 5 - it does not hold in base 4, for instance, since there is no digit '4' in base 4. On the other hand, an equation like 2+2=5 is never true.<p>Write a program that given an equation determines for which bases it holds.<p><h3>Input</h3><p>Each line of the input contains a test case; each test case is an equation of the form "<tt>EXPR=EXPR</tt>", where both "<tt>EXPR</tt>" are arithmetic expressions with at most 17 characters.<p>All expressions are valid, and contain only the characters '<tt>+</tt>', '<tt>*</tt>' and the digits from '<tt>0</tt>' to '<tt>9</tt>'. No expressions contain leading plus signs, and no numbers in it have leading zeros.<p>The end of input is indicated by a line containing only "<tt>=</tt>".<p><h3>Output</h3><p>For each test case in the input your program should produce a single line in the output, indicating for which bases the given equation holds.<p>If the expression is true for infinitely many bases, print "<tt>B+</tt>", where <i>B</i> is the first base for which the equation holds.<p>If the expression is valid only for a finite set of bases, print them in ascending order, separated by single spaces.<p>If the expression is not true in any base, print the character '<tt>*</tt>'.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
6*9=42
10000+3*5*334=3*5000+10+0
2+2=3
2+2=4
0*0=0
=
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
13
6 10
*
5+
2+
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4212||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Candy</title></head><body> <!--h1 align="center">Candy</h1--><p>Little Charlie is a nice boy addicted to candies. He is even a subscriber to All Candies Magazine and was selected to participate in the International Candy Picking Contest.<p>In this contest a random number of boxes containing candies are disposed in <i>M</i> rows with <i>N</i> columns each (so, there are a total of <i>M</i> &times;<i>N</i> boxes). Each box has a number indicating how many candies it contains.<p>The contestant can pick a box (any one) and get all the candies it contains. But there is a catch (there is always a catch): when choosing a box, all the boxes from the rows immediately above and immediately below are emptied, as well as the box to the left and the box to the right of the chosen box. The contestant continues to pick a box until there are no candies left.<p>The figure bellow illustrates this, step by step. Each cell represents one box and the number of candies it contains. At each step, the chosen box is circled and the shaded cells represent the boxes that will be emptied. After eight steps the game is over and Charlie picked 10+9+8+3+7+6+10+1 = 54 candies.<p><center><img src="http://livearchive.onlinejudge.org/external/42/p4212.png/></center><p>For small values of <i>M</i> and <i>N</i>, Charlie can easily find the maximum number of candies he can pick, but when the numbers are really large he gets completely lost. Can you help Charlie maximize the number of candies he can pick?<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains two positive integers <i>M</i> and <i>N</i> (1 &le; <i>M</i> &times;<i>N</i> &le; 10<sup>5</sup>), separated by a single space, indicating the number of rows and columns respectively. Each of the following <i>M</i> lines contains <i>N</i> integers separated by single spaces, each representing the initial number of candies in the corresponding box. Each box will have initially at least 1 and at most 10<sup>3</sup> candies.<p>The end of input is indicated by a line containing two zeroes separated by a single space.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing a single value, the integer indicating the maximum number of candies that Charlie can pick.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
5 5
1 8 2 1 9
1 7 3 5 2
1 2 10 3 10
8 4 7 9 1
7 1 3 1 6
4 4
10 1 1 10
1 1 1 1
1 1 1 1
10 1 1 10
2 4
9 10 2 7
5 1 1 5
0 0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
54
40
17
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4213||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>DNA Subsequences</title></head><body> <!--h1 align="center">DNA Subsequences</h1--><p>Thomas, a computer scientist that works with DNA sequences, needs to compute longest common subsequences of given pairs of strings. Consider an alphabet &Sigma; of letters and a word <i>w</i>=<i>a</i><sub>1</sub><i>a</i><sub>2</sub> &hellip;<i>a</i><sub><i>r</i></sub>, where <i>a</i><sub><i>i</i></sub> &isin; &Sigma;, for <i>i</i> = 1, 2, &hellip;,<i>r</i>. A <em>subsequence</em> of <i>w</i> is a word <i>x</i>=<i>a</i><sub><i>i</i><sub>1</sub></sub><i>a</i><sub><i>i</i><sub>2</sub></sub> &hellip;<i>a</i><sub><i>i</i><sub><i>s</i></sub></sub> such that 1 &le; <i>i</i><sub>1</sub> &lt; <i>i</i><sub>2</sub> &lt; &hellip; &lt; <i>i</i><sub><i>s</i></sub> &le; <i>r</i>. Subsequence <i>x</i> is a <em>segment</em> of <i>w</i> if <i>i</i><sub><i>j</i>+1</sub>=<i>i</i><sub><i>j</i></sub> + 1, for <i>j</i> = 1,2, &hellip;,<i>s</i> -1. For example the word <tt>ove</tt> is a segment of the word <tt>lovely</tt>, whereas the word <tt>loly</tt> is a subsequence of <tt>lovely</tt>, but not a segment.<p>A word is a <em>common subsequence</em> of two words <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub> if it is a subsequence of each of the two words. A <em>longest common subsequence</em> of <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub> is a common subsequence of <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub> having the largest possible length. For example, consider the words <i>w</i><sub>1</sub>=<tt>lovxxelyxxxxx</tt> and <i>w</i><sub>2</sub>=<tt>xxxxxxxlovely</tt>. The words <i>w</i><sub>3</sub>=<tt>lovely</tt> and <i>w</i><sub>4</sub>=<tt>xxxxxxx</tt>, the latter of length 7, are both common subsequences of <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub>. In fact, <i>w</i><sub>4</sub> is their longest common subsequence. Notice that the empty word, of length zero, is always a common subsequence, although not necessarily the longest.<p>In the case of Thomas, there is an extra requirement: the subsequence must be formed from common segments having length <i>K</i> or more. For example, if Thomas decides that <i>K</i>=3, then he considers <tt>lovely</tt> to be an acceptable common subsequence of <tt>lovxxelyxxxxx</tt> and <tt>xxxxxxxlovely</tt>, whereas <tt>xxxxxxx</tt>, which has length 7 and is also a common subsequence, is not acceptable. Can you help Thomas?<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains an integer <i>K</i> representing the minimum length of common segments, where 1 &le; <i>K</i> &le; 100. The next two lines contain each a string on lowercase letters from the regular alphabet of 26 letters. The length <i>l</i> of each string satisfies the inequality 1 &le; <i>l</i> &le; 10<sup>3</sup>. There are no spaces on any line in the input. The end of the input is indicated by a line containing a zero.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the length of the longest subsequence formed by consecutive segments of length at least <i>K</i> from both strings. If no such common subsequence of length greater than zero exists, then <tt>0</tt> must be printed.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
3
lovxxelyxxxxx
xxxxxxxlovely
1
lovxxelyxxxxx
xxxxxxxlovely
3
lovxxxelxyxxxx
xxxlovelyxxxxxxx
4
lovxxxelyxxx
xxxxxxlovely
0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
6
7
10
0
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4214||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Electricity</title></head><body> <!--h1 align="center">Electricity</h1--><p>Martin and Isa stopped playing crazy games and finally got married. It's good news! They're pursuing a new life of happiness for both and, moreover, they're moving to a new house in a remote place, bought with most of their savings.<p>Life is different in this new place. In particular, electricity is very expensive, and they want to keep everything under control. That's why Martin proposed to keep a daily record of how much electricity has been consumed in the house. They have an electricity meter, which displays a number with the amount of KWh (kilowatt-hour) that has been consumed since their arrival.<p>At the beginning of each day they consult the electricity meter, and write down the consumption. Some days Martin does it, and some days Isa does. That way, they will be able to look at the differences of consumption between consecutive days and know how much has been consumed.<p>But some days they simply forget to do it, so, after a long time, their register is now incomplete. They have a list of dates and consumptions, but not all of the dates are consecutive. They want to take into account only the days for which the consumption can be precisely determined, and they need help.<p><h3>Input</h3><p>The input contains several test cases. The first line of each test case contains one integer <i>N</i> indicating the number of measures that have been taken (2 &le; <i>N</i> &le; 10<sup>3</sup>). Each of the <i>N</i> following lines contains four integers <i>D</i>, <i>M</i>, <i>Y</i> and <i>C</i>, separated by single spaces, indicating respectively the day (1 &le; <i>D</i> &le; 31), month (1 &le; <i>M</i> &le; 12), year (1900 &le; <i>Y</i> &le; 2100), and consumption (0 &le; <i>C</i> &le; 10<sup>6</sup>) read at the beginning of that day. These <i>N</i> lines are increasingly ordered by date, and may include leap years. The sequence of consumptions is strictly increasing (this is, no two different readings have the same number). You may assume that <i>D</i>, <i>M</i> and <i>Y</i> represent a valid date.<p>Remember that a year is a leap year if it is divisible by 4 and not by 100, or well, if the year is divisible by 400.<p>The end of input is indicated by a line containing only one zero.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line containing two integers separated by a single space: the number of days for which a consumption can be precisely determined, and the sum of the consumptions for those days.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
5
9 9 1979 440
29 10 1979 458
30 10 1979 470
1 11 1979 480
2 11 1979 483
3
5 5 2000 6780
6 5 2001 7795
7 5 2002 8201
8
28 2 1978 112
1 3 1978 113
28 2 1980 220
1 3 1980 221
5 11 1980 500
14 11 2008 600
15 11 2008 790
16 12 2008 810
0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
2 15
0 0
2 191
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4215||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Feynman</title></head><body> <!--h1 align="center">Feynman</h1--><p>Richard Phillips Feynman was a well known American physicist and a recipient of the Nobel Prize in Physics. He worked in theoretical physics and also pioneered the field of quantum computing. He visited South America for ten months, giving lectures and enjoying life in the tropics. He is also known for his books "Surely You're Joking, Mr. Feynman!" and "What Do You Care What Other People Think?", which include some of his adventures below the equator.<p>His life-long addiction was solving and making puzzles, locks, and cyphers. Recently, an old farmer in South America, who was a host to the young physicist in 1949, found some papers and notes that is believed to have belonged to Feynman. Among notes about mesons and electromagnetism, there was a napkin where he wrote a simple puzzle: "how many different squares are there in a grid of <i>N</i> &times;<i>N</i> squares?".<p>In the same napkin there was a drawing which is reproduced below, showing that, for <i>N</i>=2, the answer is 5.<center><img src="http://livearchive.onlinejudge.org/external/42/p4215.gif/></center><p><h3>Input</h3>The input contains several test cases. Each test case is composed of a single line, containing only one integer <i>N</i>, representing the number of squares in each side of the grid (1 &le; <i>N</i> &le; 100).<p>The end of input is indicated by a line containing only one zero.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the number of different squares for the corresponding input.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
2
1
8
0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
5
1
204
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4216||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Pole Position</title></head><body> <!--h1 align="center">Pole Position</h1--><p>In car races, there is always a high pole next to the finish line of the track. Before the race starts, the pole is used to display the starting grid. The number of the first car in the grid is displayed at the top of the pole, the number of the car in second place is shown below that, and so on.<p>During the race, the pole is used to display the current position of each car: the car that is winning the race has its number displayed at the top of the pole, followed by the car that is in second place, and so on.<p>Besides showing the current position of a car, the pole is also used to display the number of positions the cars have won or lost, relative to the starting grid. This is done by showing, side by side to the car number, an integer number. A positive value <i>v</i> beside a car number in the pole means that car has won <i>v</i> positions relative to the starting grid. A negative value <i>v</i> means that car has lost <i>v</i> positions relative to the starting grid. A zero beside a car number in the pole means the car has neither won nor lost any positions relative to the starting grid (the car is in the same position it started).<p><center><img src="http://livearchive.onlinejudge.org/external/42/p4216.gif/></center><p>We are in the middle of the Swedish Grand Prix, the last race of the World Championship. The race director, Dr.&nbsp;Shoo Makra, is getting worried: there have been some complaints that the software that controls the pole position system is defective, showing information that does not reflect the true race order.<p>Dr.&nbsp;Shoo Makra devised a way to check whether the pole system is working properly. Given the information currently displayed in the pole, he wants to reconstruct the starting grid of the race. If it is possible to reconstruct a valid starting grid, he plans to check it against the real starting grid. On the other hand, if it is not possible to reconstruct a valid starting grid, the pole system is indeed defective.<p>Can you help Dr.&nbsp;Shoo Makra?<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains one integer <i>N</i> indicating the number of cars in the race (2 &le; <i>N</i> &le; 10<sup>3</sup>). Each of the next <i>N</i> lines contains two integers <i>C</i> and <i>P</i>, separated by one space, representing respectively a car number (1 &le; <i>C</i> &le; 10<sup>4</sup>) and the number of positions that car has won or lost relative to the starting grid ( -10<sup>6</sup> &le; <i>P</i> &le; 10<sup>6</sup>), according to the pole system. All cars in a race have different numbers.<p>The end of input is indicated by a line containing only one zero.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the reconstructed starting grid, with car numbers separated by single spaces. If it is not possible to reconstruct a valid starting grid, the line must contain only the value <tt>-1</tt>.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
4
1 0
3 1
2 -1
4 0
4
22 1
9 1
13 0
21 -2
3
19 1
9 -345
17 0
7
2 2
8 0
5 -2
7 1
1 1
9 1
3 -3
0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
1 2 3 4
-1
-1
5 8 2 3 7 1 9
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4217||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Higgs Boson</title></head><body> <!--h1 align="center">Higgs Boson</h1--><p>It's been 100 years since the detection of the first Higgs boson and now particle physics is a mainstream subject in all high schools. Obviously, kids love the fact that they can create tiny black holes using only their portable particle accelerators and show off to their friends and colleagues. Although the creation of big black holes that could swallow the whole planet is possible even with these portable particle accelerators, the devices are programmed to only thrown particles when this undesirable side effect is impossible.<p>Your granddaughter is trying to create her own black holes with a portable accelerator kit, which is composed of two small particle accelerators that throw, each one, a boson-sized particle. Both particles are thrown at the same time, and a black hole appears when the particles collide. However, your granddaughter doesn't know how much time she'll have to wait before this happens. Fortunately, each accelerator can predict the particle's trajectory, showing four integer values into its display, called <i>A</i>, <i>B</i>, <i>C</i> and <i>D</i>. Each value can be replaced into the following equations:<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0" cellpadding="0"><tr><td nowrap="nowrap" align="center"></td><td nowrap="nowrap" align="center"><table><tr><td align="center"><table border="0" cellspacing="0" cellpadding="0"><tr><td nowrap="nowrap" align="center"><i>r</i> = <i>At</i> + <i>B</i></td></tr></table></td></tr><tr><td align="center"><table border="0" cellspacing="0" cellpadding="0"><tr><td nowrap="nowrap" align="center">&theta; = <i>Ct</i> + <i>D</i></td></tr></table></td></tr></table></td><td nowrap="nowrap" align="center"></td></tr></table></td></tr></table><p>in order to determine the trajectory of the particle, in polar coordinates. The radius (r) is represented in distance units and the angle (&theta;) in degrees. The time (t) is given in time units and it is always a rational value which can be represented by an irreducible fraction. Your granddaughter knows that in polar coordinates a point has infinite representations. In general, the point (<i>r</i>, &theta;) can be represented as (<i>r</i>, &theta; ±<i>k</i> &times;360<sup><i>o</i></sup>) or ( -<i>r</i>, &theta; ±(2<i>k</i> + 1) &times;180<sup><i>o</i></sup>), where <i>k</i> is any integer. Besides, the origin (<i>r</i> = 0) can be represented as (0, &theta;) for any &theta;.  <p> Using these parameters informed by each particle accelerator, your granddaughter wants to determine whether the particles will eventually collide and, if they do, the time when they will collide. After the first collision it is impossible to predict the particle's trajectory, therefore, only the first possible collision should be considered.  <p> Although your granddaughter is really intelligent and has a deep knowledge of particle physics, she does not know how to program computers and is looking for some notes in her grandfather's (or grandmother's) ICPC notebook (don't forget, she is <em>your</em> granddaughter!). Fortunately for you, there is a note on your notebook which says that you wrote that code during the 2008 ICPC South America Regional Contest (or, to be more specific, <em>this</em> contest).  <p>  <h3>Input</h3>  <p> The input consists of several test cases, one per line. Each test case contains eight integer numbers separated by single spaces, <i>A</i><sub>1</sub>, <i>B</i><sub>1</sub>,<i>C</i><sub>1</sub>, <i>D</i><sub>1</sub>, <i>A</i><sub>2</sub>, <i>B</i><sub>2</sub>, <i>C</i><sub>2</sub>, <i>D</i><sub>2</sub> ( -10<sup>4</sup>   &le; <i>A</i><sub>1</sub>, <i>B</i><sub>1</sub>, <i>C</i><sub>1</sub>, <i>D</i><sub>1</sub>, <i>A</i><sub>2</sub>,<i>B</i><sub>2</sub>, <i>C</i><sub>2</sub>, <i>D</i><sub>2</sub>   &le; 10<sup>4</sup>).  The first four input values (<i>A</i><sub>1</sub>, <i>B</i><sub>1</sub>,<i>C</i><sub>1</sub>, <i>D</i><sub>1</sub>) correspond to the four parameters displayed by the first portable particle accelerator and the following input values (<i>A</i><sub>2</sub>,<i>B</i><sub>2</sub>, <i>C</i><sub>2</sub>, <i>D</i><sub>2</sub>) correspond to the four parameters displayed by the second portable particle accelerator when both particles are thrown. The end of the input is represented by <i>A</i><sub>1</sub> = <i>B</i><sub>1</sub> = <i>C</i><sub>1</sub> = <i>D</i><sub>1</sub> = <i>A</i><sub>2</sub> = <i>B</i><sub>2</sub> = <i>C</i><sub>2</sub> = <i>D</i><sub>2</sub> = 0, which should not be processed as a test case, since these are the values displayed by the particle accelerators when a big black hole would be created if the particles were trown. Although the end of input is represented by a line with eight zeroes, note that the number zero is a possible input value.  <p>  <h3>Output</h3>  <p> For each test case, your program must output a line containing two non-negative integers <i>t</i><sub><i>a</i></sub> and <i>t</i><sub><i>b</i></sub> separated by a single space. If there is no possibility of collision, <i>t</i><sub><i>a</i></sub> = <i>t</i><sub><i>b</i></sub> = 0, otherwise, <i>t</i><sub><i>a</i></sub>/<i>t</i><sub><i>b</i></sub> must be an irreducible fraction representing the earliest collision time. Even if the fraction results in an integer value, you still must output the number 1 as the denominator (see samples below).  <p> <table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
1 1 180 0 2 0 180 360
10 10 360 0 -24 18 180 72
5 5 180 0 -12 9 10 40
-9 5 5 180 2 5 5 180
0 0 0 0 0 0 0 0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
1 1
0 0
4 17
0 1
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4218||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Traveling Shoemaker Problem</title></head><body> <!--h1 align="center">Traveling Shoemaker Problem</h1--><p>Once upon a time there was a very peaceful country named Nlogonia. Back then, Poly the Shoemaker could come to the country and travel freely from city to city doing his job without any harassment. This task was very easy, as every city in Nlogonia had a direct road to every other city in the country. He could then easily travel the whole country visiting each city exactly once and fixing everybody's shoes.<p>But not anymore. The times have changed and war has come to Nlogonia. The age when people could travel freely is over.<p>Confederations identified by colors were formed among the cities all over the country, and now each city belongs to at least one and at most two confederations. When trying to enter a city, you must give to the border officer a ticket from one of the confederations this city belongs to. When leaving the city, you receive a ticket from the other confederation the city belongs to (i.e. different from the one you gave when entering) or from the same confederation if the city only belongs to one.<p>As Poly the Shoemaker is a long time friend of Nlogonia, he is allowed to choose a ticket and a city he wants to enter as the first city in the country, but after that he must obey the confederations rules. He wants to do the same routine he did before, visiting each city exactly once in Nlogonia, but now it's not easy for him to do this, even though he can choose where to start his journey.<p>For example, suppose there are four cities, labeled from 0 to 3. City 0 belongs to confederations <i>red</i> and <i>green</i>; city 1 belongs only to <i>red</i>; city 2 belongs to <i>green</i> and <i>yellow</i>; and city 3 belongs to <i>blue</i> and <i>red</i>. If Poly the Shoemaker chooses to start at city 0, he can enter it carrying either the <i>red</i> or the <i>green</i> ticket and leave receiving the other. Should he choose the <i>red</i> ticket, he will leave with a <i>green</i> ticket, and then there is only city 2 he can travel to. When leaving city 2 he receives the <i>yellow</i> ticket and now can't go anywhere else. If he had chosen the <i>green</i> ticket as the first he would receive the <i>red</i> one when leaving, and then he could travel to cities 1 or 3. If he chooses city 3, when leaving he will receive the <i>blue</i> ticket and again can't go anywhere else. If he chooses city 1, he receives the <i>red</i> ticket again when leaving (city 1 belongs only to the <i>red</i> confederation) and can only travel to city 3 and will never get to city 2. Thus, it is not possible to visit each city exactly once starting at city 0. It is possible, however, starting at city 2 with the <i>yellow</i> ticket, leaving the city with the <i>green</i> ticket, then visiting city 0, leaving with <i>red</i> ticket, then visiting city 1, leaving with <i>red</i> ticket again and, at last, visiting city 3.<p>As you can see, it got really difficult for Poly the Shoemaker to accomplish the task, so he asks you to help him. He wants to know if it's possible to choose a city to start such that he can travel all cities from Nlogonia exactly once.<p>Can you help Poly the Shoemaker?<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains two integers <i>N</i> and <i>C</i>, separated by one space, indicating respectively the number of cities (1 &le; <i>N</i> &le; 500) and confederations (1 &le; <i>C</i> &le; 100) in the country. Each of the next <i>C</i> lines describes a confederation. It starts with one integer <i>K</i> (0 &le; <i>K</i> &le; <i>N</i>) and then <i>K</i> integers representing the cities which belong to this confederation. All integers are separated by single spaces and cities are numbered from 0 to <i>N</i> -1. Each city will appear at least once and at most twice and no city will be repeated on the same confederation.<p>The end of input is indicated by a line containing two zeroes separated by a single space.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the integer <tt>-1</tt> if it's not possible to match the requirements or one integer representing the city where Poly the Shoemaker can start his journey. If there are multiple correct answers, print the smallest one.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
4 4
1 3
3 0 1 3
2 0 2
1 2
3 4
1 0
3 0 1 2
1 1
1 2
3 4
1 1
2 1 0
2 0 2
1 2
0 0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
2
-1
1
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4219||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Bora Bora</title></head><body> <!--h1 align="center">Bora Bora</h1--><p>Bora Bora is a simple card game for children, invented in the South Pacific Island of the same name. Two or more players can play, using a deck of standard cards. Cards have the usual ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen and King. Each card has also one of four suits: Clubs, Diamonds, Hearts and Spades.<p>Players sit on a circle around the table and play by turns. The next player to play may be the one to the left (clockwise direction) or to the right (counter-clockwise direction) of the current player, depending on the cards played, as we will see. At the start, the direction of play is clockwise.<p>The deck is shuffled and each player is dealt a hand of cards. The remaining of the deck is placed, face down, on the table; this is called the <em>stock</em> pile. Then the first (topmost) card is removed from the stock and placed on the table, face up, starting another pile, called the <em>discard</em> pile.<p>The objective of the game is for a player to discard all his cards. At each turn, a player discards at most one card. A card can be discarded only if it has the same rank or the same suit as the topmost card on the discard pile. A player discards a card by placing it, face up, in the discard pile (this card becomes the topmost). If a player does not have a suitable card to discard on his turn, he must draw one card from the stock and add it to his hand; if he can discard that card, he does so, otherwise he does nothing else and his turn ends. A player always discards the highest valued card he possibly can. The <em>value</em> of a card is determined first by the card rank and then by the card suit. The rank order is the rank itself (Ace is the lowest, King is the highest), and the suit order is, from lowest to highest, Clubs, Diamonds, Hearts and Spades. Therefore, the highest valued card is the King of Spades and the lowest valued card is the Ace of Clubs. As an example, a Queen of Diamonds has a higher value than a Jack (any suit) but has a lower value than a Queen of Hearts.<p>Some of the discarded cards affect the play, as follows:<p><ul><li>when a Queen is discarded, the direction of play is reversed: if the direction is clockwise, it changes to counter-clockwise, and vice-versa;<br /><br /></li><li>when a Seven is discarded, the next player to play must draw two cards from the stock (the number of cards in his hand increases by two), and misses his turn (does not discard any card);<br /><br /></li><li>when an Ace is discarded, the next player to play must draw one card from the stock (the number of cards in his hand increases by one), and misses his turn (does not discard any card);<br /><br /></li><li>when a Jack is discarded, the next player to play misses his turn (does not discard any card).<br /><br /></li></ul><p>Notice that the penalty for the first card in the discard pile (the card draw from the stock at the beginning) is applied to the first player to play. For example, if the first player to play is <i>p</i> and the first card on the discard pile is an Ace, player <i>p</i> draws a card from the stock and does not discard any card on his first turn. Also notice that if the first card is a Queen, the direction of play is reversed to counter-clockwise, but the first player to play remains the same.<p>The winner is the player who first discards all his cards (the game ends after the winner discards his last card).<p>Given the description of the shuffled deck and the number of players, write a program to determine who will win the game.<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains three integers <i>P</i>, <i>M</i> and <i>N</i>, separated by single spaces, indicating respectively the number of players (2 &le; <i>P</i> &le; 10), the number of cards distributed to each of the players at the beginning of the game (1 &le; <i>M</i> &le; 11) and the total number of cards in the shuffled deck (3 &le; <i>N</i> &le; 300). Each of the next <i>N</i> lines contains the description of one card. A card is described by one integer <i>X</i> and one character <i>S</i>, separated by one space, representing respectively the card rank and the card suite. Card ranks are mapped to integers from 1 to 13 (Ace is 1, Jack is 11, Queen is 12 and King is 13). Card suits are designated by the suit's first letter: '<tt>C</tt>' (Clubs), '<tt>D</tt>' (Diamonds), '<tt>H</tt>' (Hearts) or '<tt>S</tt>' (Spades).<p>Players are identified by numbers from 1 to <i>P</i>, and sit on a circle, in clockwise direction, 1, 2 &hellip;<i>P</i>, 1. The first <i>P</i>&times;<i>M</i> cards of the deck are dealt to the players: the first <i>M</i> cards to the first player (player 1), the next <i>M</i> to the second player (player 2), and so on. After dealing the cards to the players, the next card on the deck - the (<i>P</i> &times;<i>M</i> + 1)-th card - is used to start the discard pile, and the remaining cards form the stock. The (<i>P</i> &times;<i>M</i> + 2)-th card to appear on the input is the topmost card on the stock, and the last card to appear on the input (the <i>N</i>-th card) is the bottommost card of the stock (the last card that can be drawn). Player 1 is always the first to play (even when the card used to start the discard pile is a Queen). All test cases have one winner, and in all test cases the number of cards in the deck is sufficient for playing to the end of the game.<p>The end of input is indicated by a line containing only three zeros, separated by single spaces.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the number of the player who wins the game.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
2 2 10
1 D
7 D
1 S
3 C
13 D
1 S
5 H
12 D
7 S
2 C
3 2 11
1 S
7 D
11 D
3 D
7 D
3 S
11 C
8 C
9 H
6 H
9 S
3 3 16
1 H
10 C
13 D
7 C
10 H
2 S
2 C
10 S
8 S
12 H
11 C
1 C
1 C
4 S
5 D
6 S
0 0 0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
1
3
2
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4220||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><title>Shrinking Polygons</title></head><body> <!--h1 align="center">Shrinking Polygons</h1--><p><p>A polygon is said to be <em>inscribed</em> in a circle when all its vertices lie on that circle. In this problem you will be given a polygon inscribed in a circle, and you must determine the minimum number of vertices that should be removed to transform the given polygon into a <em>regular polygon</em>, i.e., a polygon that is equiangular (all angles are congruent) and equilateral (all edges have the same length).<p>When you remove a vertex <i>v</i> from a polygon you first remove the vertex and the edges connecting it to its adjacent vertices <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub>, and then create a new edge connecting <i>w</i><sub>1</sub> and <i>w</i><sub>2</sub>. Figure (a) below illustrates a polygon inscribed in a circle, with ten vertices, and figure (b) shows a pentagon (regular polygon with five edges) formed by removing five vertices from the polygon in (a).<p><center><img src="http://livearchive.onlinejudge.org/external/42/p4220.gif/></center><p>In this problem, we consider that any polygon must have at least three edges.<p><h3>Input</h3>The input contains several test cases. The first line of a test case contains one integer <i>N</i> indicating the number of vertices of the inscribed polygon (3 &le; <i>N</i> &le; 10<sup>4</sup>). The second line contains <i>N</i> integers <i>X</i><sub><i>i</i></sub> separated by single spaces (1 &le; <i>X</i><sub><i>i</i></sub> &le; 10<sup>3</sup>, for 0 &le; <i>i</i> &le; <i>N</i> -1). Each <i>X</i><sub><i>i</i></sub> represents the length of the arc defined in the inscribing circle, clockwise, by vertex <i>i</i> and vertex (<i>i</i>+1) mod <i>N</i>. Remember that an <em>arc</em> is a segment of the circumference of a circle; do not mistake it for a <em>chord</em>, which is a line segment whose endpoints both lie on a circle.<p>The end of input is indicated by a line containing only one zero.<p><h3>Output</h3><p>For each test case in the input, your program must print a single line, containing the minimum number of vertices that must be removed from the given polygon to form a regular polygon. If it is not possible to form a regular polygon, the line must contain only the value <tt>-1</tt>.<p><table width="100%" border="1" cellpadding="10"><tr><td width="50%" valign="top"><b>Sample input</b<br><pre>
3
1000 1000 1000
6
1 2 3 1 2 3
3
1 1 2
10
10 40 20 30 30 10 10 50 24 26
0
</td><td width="50%" valign="top"><b>Output for the sample input</b<br><pre>
0
2
-1
5
</td></tr></table>
<p><font size="-2">ACM ICPC :: South American Regional 2008</font>
</body></html>

______________________________________________________
4221||||||false||||||
You are responsible for inspecting the trees located in a park, to make sure they remain healthy. The location of each tree is given to you as a point in the twodimensional plane, distinct from that of every other tree. Due to recentlyreplanted grass, you are only allowed to walk through the park along a collection of paths. Each path is described by an infinite-length horizontal or vertical line in the two-dimensional plane. No tree lies on any path. 

<P>
You are concerned that it may not be possible to view all the trees in the park from the paths. In particular, a tree is visible only if you can view it by standing on some path while facing in a direction <SPAN  CLASS="textit">perpendicular</SPAN> to that path; there must be no intervening tree that obstructs your view. Given the geometrical configuration of the park, please report the number of visible trees. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple input sets. For each input set, the first line will contain two integers, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark>, (<!-- MATH
 $0 < N,M \le 100000$
 -->
<SPAN CLASS="MATH">0 &lt; <I>N</I>, <I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4221img1.png
 ALT="$ \le$">100000</SPAN>
<tex2html_verbatim_mark>), separated by a space. <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the number of trees, and <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> is the number of paths. 

<P>
The next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines each contain two space-separated integers, <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>, specifying the coordinates of a tree. <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> may be any 32-bit integers. 

<P>
The next <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines each describe a path (a vertical or horizontal line). They have the form <SPAN CLASS="MATH"><I>x</I> = <I>K</I></SPAN>
<tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>y</I> = <I>K</I></SPAN>
<tex2html_verbatim_mark>, with no spaces. <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> may be any 32-bit integer. <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark> will be lower case. 

<P>
End of the input is signified by a line with two space-separated <TT>0</TT>'s. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input set, print a single line containing one integer, specifying the number of visible trees. There should be no blank lines between outputs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 3
-1 3
4 2
6 2
6 3
6 4
4 3
x=0
y=-1
y=5
1 2
2 3
x=5
y=5
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5
1
</PRE> 


______________________________________________________
4222||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Problem E: Dance</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><p>For a dance to be proper in the Altered Culture of Machinema, it must abide by the following rules:</p><ol><li>A dip can only appear 1 or 2 steps after a jiggle, or before a twirl, as in:<ul><li>...jiggle dip...</li> <li>...jiggle stomp dip...</li> <li>...dip twirl...</li></ul></li><li>All dances end with a clap stomp clap.</li> <li>If a dance contains a twirl, it must have a hop.</li> <li>No dance can start with a jiggle.</li> <li>All dances must have a dip.</li></ol><p>As instructor at a dance composition school, you must grade many freshman attempts at composing dances. You decide to make an automatic grader that can check against these rules.</p><h1>Input</h1><p>The input consists of a number of dances, one per line. Each dance has a maximum of 1000 steps. Each step is separated by a single space, and all steps are lowercase alphabetic words at most 100 letters long.</p><h1>Output</h1><p></p><p>If a dance in the input has no mistakes, then the output should contain the words "form ok: " followed by the original composition.</p><p>If a dance has a single type of form error, then the output should contain the words "form error K: " where K is the rule which failed, followed by the composition.</p><p>If a dance has multiple types of form errors, then the output should contain the errors as a comma separated clause, as in "form errors K(1), K(2), ..., K(N-1) and K(N): " where the form errors are in increasing order, followed by the composition.</p><p>If a dance has form error 1, every dip in the dance that violates rule 1 should be printed in upper case.</p><h1>Sample Input</h1><pre>dip twirl hop jiggle hop hop clap stomp clap
dip hop jiggle hop hop clap stomp clap
dip twirl hop jiggle hop hop clap clap stomp
jiggle dip twirl hop jiggle hop hop clap stomp clap
jiggle dip
jiggle
dip twirl hop dip jiggle hop dip hop clap stomp clap
</pre><h1>Sample Output</h1><pre>form ok: dip twirl hop jiggle hop hop clap stomp clap
form error 1: DIP hop jiggle hop hop clap stomp clap
form error 2: dip twirl hop jiggle hop hop clap clap stomp
form error 4: jiggle dip twirl hop jiggle hop hop clap stomp clap
form errors 2 and 4: jiggle dip
form errors 2, 4 and 5: jiggle
form error 1: dip twirl hop DIP jiggle hop dip hop clap stomp clap
</pre></body></html>
______________________________________________________
4223||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Problem F: Trucking</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><p>A certain local trucking company would like to transport some goods on a cargo truck from one place to another. It is desirable to transport as much goods as possible each trip. Unfortunately, one cannot always use the roads in the shortest route: some roads may have obstacles (e.g. bridge overpass, tunnels) which limit heights of the goods transported. Therefore, the company would like to transport as much as possible each trip, and then choose the shortest route that can be used to transport that amount.</p><p>For the given cargo truck, maximizing the height of the goods transported is equivalent to maximizing the amount of goods transported. For safety reasons, there is a certain height limit for the cargo truck which cannot be exceeded.</p><h1>Input</h1><p>The input consists of a number of cases. Each case starts with two integers, separated by a space, on a line. These two integers are the number of cities (<var>C</var>) and the number of roads (<var>R</var>). There are at most 1000 cities, numbered from 1. This is followed by <var>R</var> lines each containing the city numbers of the cities connected by that road, the maximum height allowed on that road, and the length of that road. The maximum height for each road is a positive integer, except that a height of -1 indicates that there is no height limit on that road. The length of each road is a positive integer at most 1000. Every road can be travelled in both directions, and there is at most one road connecting each distinct pair of cities. Finally, the last line of each case consists of the start and end city numbers, as well as the height limit (a positive integer) of the cargo truck. The input terminates when <var>C</var> = <var>R</var> = 0.</p><h1>Output</h1><p>For each case, print the case number followed by the maximum height of the cargo truck allowed and the length of the shortest route. Use the format as shown in the sample output. If it is not possible to reach the end city from the start city, print "cannot reach destination" after the case number. Print a blank line between the output of the cases.</p><h1>Sample Input</h1><pre>5 6
1 2 7 5
1 3 4 2
2 4 -1 10
2 5 2 4
3 4 10 1
4 5 8 5
1 5 10
5 6
1 2 7 5
1 3 4 2
2 4 -1 10
2 5 2 4
3 4 10 1
4 5 8 5
1 5 4
3 1
1 2 -1 100
1 3 10
0 0
</pre><h1>Sample Output</h1><pre>Case 1:
maximum height = 7
length of shortest route = 20

Case 2:
maximum height = 4
length of shortest route = 8

Case 3:
cannot reach destination
</pre></body></html>
______________________________________________________
4224||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Problem G: When</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><p>"When" is an event driven language for machine control. It only has three statements: Set, Print, and the compound When clause. The (case insensitive) grammar is as follows<blockquote><pre>
PROGRAM := WHEN | PROGRAM WHEN
WHEN := 'when ' EXPRESSION EOL STATEMENTS 'end when' EOL
STATEMENTS := STATEMENT | STATEMENTS STATEMENT
STATEMENT := PRINT | SET
PRINT := 'print '  EXPRESSION_LIST EOL
SET := 'set ' ASSIGNMENT_LIST EOL
EXPRESSION_LIST := EXPRESSION | EXPRESSION_LIST ',' EXPRESSION
ASSIGNMENT_LIST := ASSIGNMENT | ASSIGNMENT_LIST ',' ASSIGNMENT
ASSIGNMENT := VARIABLE '=' EXPRESSION
EXPRESSION := '(' EXPRESSION OP EXPRESSION ')' | VARIABLE | NUMBER 
OP :=  '&lt;' | '+' | '-' | 'and' | 'or' | 'xor'
VARIABLE := '$' NOT_DOLLAR_STRING '$'
NUMBER := DIGIT | NUMBER DIGIT
DIGIT := '0' | .. | '9'
NOT_DOLLAR_STRING := any sequence of printing characters (including blanks)
                     that does not contain a $ symbol.
</pre></blockquote></p><p>In the above, any string enclosed in single quotes are to be treated literally. EOL is the end of line.</p><p>In words, a program consists of a list of when blocks, which themselves contain set and print statements. Case is ignored for key words and variable names. Spaces are allowed before or after any literal except inside a number. Spaces are allowed in variable names, and each non-empty sequence of spaces is treated as a single underscore, so the following refer to the same variable<blockquote><pre> 
$Remote Switch#1$ 
$Remote_Switch#1$ 
$Remote   switch#1$ 
</pre></blockquote><p>All variable and literal values are integers between -1000000000 and 1000000000, inclusively. All variables are global and initially zero. The when programs you will be tested on will never have an <tt>EXPRESSION</tt> that evaluates to a value outside of this range. The logical operators evaluate to 0 for false and 1 for true, and treat any nonzero value as true.</p><p>Running the When program amounts to executing all the active when clauses until none are active. More specifically, the active list of when clauses is initially empty, then the following steps are repeated:<ul><li>In the order they appear in the program, the conditions of all when clauses that are not currently active are evaluated. If true, the clause is added to the end of the active list, with its first statement marked as "ready". Each active when clause has one "ready" statement.</li> <li>If the active list is empty after this step, the program terminates.</li> <li>The "ready" statement from the "current" when clause (initially the first clause in the active list) is executed.</li> <li>The statement marked as "ready" is advanced, removing the when clause from the active list if this is the last statement in the "current" when clause.</li> <li>The when clause marked as "current" is advanced, cycling to the beginning of the active list if the end is reached.</li></ul></p><p>In other words, inactive when conditions are evaluated to determine if these clauses are added to the active list. Then one statement (set or print) is executed from the current active when clause. If this is the last statement in that clause, it is removed from the active list. One the next iteration, one statement is executed from the next active when clause, etc.</p><p>A set statement executes all the assignments concurrently, so that<blockquote><pre>
set $x$=$y$,$y$=$x$
</pre></blockquote>swaps the values of $x$ and $y$. The same variable cannot appear twice on the left hand part of the same set statement (so set $x$=1,$x$=2 is illegal).</p><p>A print statement evaluates and prints the given expressions in the output, separated by commas and followed by a new line. So<blockquote><pre>
	print 1,(2+3)
</pre></blockquote>results in the line<blockquote><pre>
	1,5
</pre></blockquote>in the output.</p><h1>Input</h1><p>The input consists of several test cases separated by a blank line. Each of them is a single syntactically correct program. You may assume that the program will not execute more than 100000 set statements and 100000 print statements.</p><h1>Output</h1><p>For each case, print the output produced by executing the given program. Print a blank line between the output of the cases.</p><h1>Sample Input</h1><pre>
When ($Mr. Bill$&lt;5)
   Set $mr._bill$=($mr.  bill$+1),$Y$=($Y$+10)
End When
When ($mr. Bill$&lt;10)
  Set $MR. BILL$=($mr. bill$+1)
  Print $mr. bill$,$Y$
End When
</pre><h1>Sample Output</h1><pre>
3,20
6,40
7,40
8,40
9,40
10,40
</pre></body></html>
______________________________________________________
4225||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Problem H: Prime Bases</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><p>Given any integer base <var>b</var> &gt;= 2, it is well known that every positive integer <var>n</var> can be uniquely represented in base <var>b</var>. That is, we can write<blockquote><var>n</var> = <var>a</var><sub>0</sub> + <var>a</var><sub>1</sub>*<var>b</var> + <var>a</var><sub>2</sub>*<var>b</var>*<var>b</var> + <var>a</var><sub>3</sub>*<var>b</var>*<var>b</var>*<var>b</var> + ...</blockquote>where the coefficients <var>a</var><sub>0</sub>, <var>a</var><sub>1</sub>, <var>a</var><sub>2</sub>, <var>a</var><sub>3</sub>, ... are between 0 and <var>b</var>-1 (inclusive).</p><p>What is less well known is that if <var>p</var><sub>0</sub>, <var>p</var><sub>1</sub>, <var>p</var><sub>2</sub>, ... are the first primes (starting from 2, 3, 5, ...), every positive integer <var>n</var> can be represented uniquely in the "mixed" bases as:<blockquote><var>n</var> = <var>a</var><sub>0</sub> + <var>a</var><sub>1</sub>*<var>p</var><sub>0</sub> + <var>a</var><sub>2</sub>*<var>p</var><sub>0</sub>*<var>p</var><sub>1</sub> + <var>a</var><sub>3</sub>*<var>p</var><sub>0</sub>*<var>p</var><sub>1</sub>*<var>p</var><sub>2</sub> + ...</blockquote>where each coefficient <var>a</var><sub>i</sub> is between 0 and <var>p</var><sub>i</sub>-1 (inclusive). Notice that, for example, <var>a</var><sub>3</sub> is between 0 and <var>p</var><sub>3</sub>-1, even though <var>p</var><sub>3</sub> may not be needed explicitly to represent the integer <var>n</var>.</p><p>Given a positive integer <var>n</var>, you are asked to write <var>n</var> in the representation above. Do not use more primes than it is needed to represent <var>n</var>, and omit all terms in which the coefficient is 0.<h1>Input</h1><p>Each line of input consists of a single positive 32-bit signed integer. The end of input is indicated by a line containing the integer 0.</p><h1>Output</h1><p>For each integer, print the integer, followed by a space, an equal sign, and a space, followed by the mixed base representation of the integer in the format shown below. The terms should be separated by a space, a plus sign, and a space. The output for each integer should appear on its own line.</p><h1>Sample Input</h1><pre>
123
456
123456
0
</pre><h1>Sample Output</h1><pre>
123 = 1 + 1*2 + 4*2*3*5
456 = 1*2*3 + 1*2*3*5 + 2*2*3*5*7
123456 = 1*2*3 + 6*2*3*5 + 4*2*3*5*7 + 1*2*3*5*7*11 + 4*2*3*5*7*11*13
</pre></body></html>
______________________________________________________
4226||||||false||||||
<P>The nation of Graphia is at war. The neighboring nations have for long watched in jealousy as Graphia erected prosperous cities and connected them with a network of highways. Now they want a piece of the pie.<P>Graphia consists of several cities, connected by highways. Graphian terrain is rough, so the only way to move between the cities is along the highways. Each city has a certain number of troops quartered there. Graphia's military command knows that it will require a certain number of troops, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, to defend any city. They can defend a city with the troops stationed there, supported by the troops in any other city which is directly connected with a highway, with no cities in between. Any troops further away than that simply cannot get there in time. They also know that their enemies will onlyattack one city at a time -- so the troops in a city can be used to defend that city, as well as any of its neighbors. However, if a city can't be defended, then the military command must assume that the troops quartered in that city will be captured, and cannot aid in the defense of Graphia. In the case below, suppose <SPAN CLASS="MATH"><I>K</I> = 10</SPAN> <tex2html_verbatim_mark>. City C might seem well defended, but it will eventually fall.<P><DIV ALIGN="CENTER"><IMG WIDTH="615" HEIGHT="418" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4226.png ALT="\epsfbox{p4226.eps}"> <tex2html_verbatim_mark></DIV><P>Graphia's leadership wants to identify the Heart of their country -- the largest possible group of cities that can mutually defend each other, even if all of the other cities fall.<P>More formally, a city is defensible if it can draw a total of at least <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> troops from itself, and from cities <SPAN CLASS="textit">directly adjacent</SPAN> to it. A set of cities is defensible if every city in it is defensible, using <SPAN CLASS="textit">only</SPAN> troops from itself and adjacent cities <SPAN CLASS="textit">in that set</SPAN>. The Heart of the country is the largest possible defensible set of cities - that is, no other defensible set of cities has more cities in it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be several data sets. Each set begins with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the number of cities ( <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4226.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4226.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>), and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is the number of troops required to defend a city. The cities are numbered 0 through <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark>.<P>On the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines are descriptions of the cities, starting with city 0. Each of the city description lines begins with an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, indicating the number of troops quartered in that city ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4226.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4226.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>). This is followed by an integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, indicating the number of highways going out of that city, and then <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers, indicating the cities those highways go to. No two highways will go from and to the same cities, so every city in each list will be unique. No highway will loop from a city back to the same city. The highways go both ways, so that if city <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark> is in city <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark>'s list, then it's guaranteed that city <SPAN CLASS="MATH"><I>J</I></SPAN> <tex2html_verbatim_mark> will be in city <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark>'s list in the input. The input will end with a line with two space-separated <TT>0</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, print two integers on a single line: The number of cities in the heart of the country, and the number of troops in the heart of the country. Print a space between the integers. There should be no blank lines between outputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 900
100 2 1 2
200 2 0 3
500 2 0 3
1000 2 1 2
4 900
100 3 1 2 3
200 3 0 3 2
500 3 1 3 0
1000 3 2 1 0
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 1700
4 1800
</PRE><P>
______________________________________________________
4227||||||false||||||
The tiny country of Waterlogged is protected by a series of levees that form a quadrilateral as shown below:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4227a.eps}$
 -->
<IMG
 WIDTH="663" HEIGHT="441" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/p4227a.png
 ALT="\epsfbox{p4227a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The quadrilateral is defined by four vertices. The levees partition the country into four quadrants. Each quadrant is identified by a pair of vertices representing the outside edge of that quadrant. For example, Quadrant 1 shown below is defined by the points <SPAN CLASS="MATH">(<I>x</I>1, <I>y</I>1)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I>2, <I>y</I>2)</SPAN>
<tex2html_verbatim_mark>. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4227b.eps}$
 -->
<IMG
 WIDTH="662" HEIGHT="495" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/p4227a.png
 ALT="\epsfbox{p4227b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
It happens very often that the country of Waterlogged becomes flooded, and the levees need to be reinforced, but their country is poor and they have limited resources. They would like to be able to reinforce those levees that encompass the largest area first, then the next largest second, then the next largest third, and the smallest area fourth.

<P>
Help Waterlogged identify which quadrants are the largest, and the length of the levees around them.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be several sets of input. Each set will consist of eight real numbers, on a single line. Those numbers will represent, in order: 

<P>

<P>
<BR>

<!-- MATH
 $X1\ Y1\ X2\ Y2\ X3\ Y3\ X4\ Y4$
 -->
<SPAN CLASS="MATH"><I>X</I>1&nbsp;<I>Y</I>1&nbsp;<I>X</I>2&nbsp;<I>Y</I>2&nbsp;<I>X</I>3&nbsp;<I>Y</I>3&nbsp;<I>X</I>4&nbsp;<I>Y</I>4</SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
The four points are guaranteed to form a convex quadrilateral when taken in order  -- that is, there will be no concavities, and no lines crossing. Every number will be in the range from -1000.0 to 1000.0 inclusive. No Quadrant will have an area or a perimeter smaller than 0.001. End of the input will be a line with eight <TT>0.0</TT>'s. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input set, print a single line with eight floating point numbers. These represent the areas and perimeters of the four Quadrants, like this: 

<P>

<P>
<BR>

<!-- MATH
 $A1\ P1\ A2\ P2\ A3\ P3\ A4\ P4$
 -->
<SPAN CLASS="MATH"><I>A</I>1&nbsp;<I>P</I>1&nbsp;<I>A</I>2&nbsp;<I>P</I>2&nbsp;<I>A</I>3&nbsp;<I>P</I>3&nbsp;<I>A</I>4&nbsp;<I>P</I>4</SPAN>
<tex2html_verbatim_mark>

<P>

<P>
<BR>
Print them in order from largest area to smallest  -- so <SPAN CLASS="MATH"><I>A</I>1</SPAN>
<tex2html_verbatim_mark> is the largest area. If two Quadrants have the same area when rounded to 3 decimal places, output the one with the largest perimeter first. Print all values with 3 decimal places of precision (rounded). Print spaces between numbers. Do not print any blank lines between outputs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 2 1 5 5 2 2 0
3.5 2.2 4.8 -9.6 -1.2 -4.4 -8.9 12.4
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5.100 11.459 3.400 9.045 0.900 6.659 0.600 4.876
44.548 38.972 21.982 25.997 20.342 38.374 10.038 19.043
</PRE> 

<P>

______________________________________________________
4228||||||false||||||
Fred likes to play the lotto. Whenever he does, he buys lots of tickets. Each ticket has 6 unique numbers in the range from 1 to 49, inclusive. Fred likes to ``Cover all his bases." By that, he means that he likes for each set of lottery tickets to contain every number from 1 to 49, at least once, on some ticket. Write a program to help Fred see of his tickets ``Cover all the bases." 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file consists of a number of test cases. Each case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le N \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4228img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4228img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>), indicating the number of tickets Fred has purchased. On the next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines are the tickets, one per line. Each ticket will have exactly 6 integers, and all of them will be in the range from 1 to 49 inclusive. No ticket will have duplicate numbers, but the numbers on a ticket may appear in any order. The input ends with a line containing only a `<TT>0</TT>'. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print a list of responses for the input sets, one per line. Print the word `<TT>Yes</TT>' if every number from 1 to 49 inclusive appears in some lottery ticket in the set, and `<TT>No</TT>' otherwise. Print these words exactly as they are shown. Do not print any blank lines between outputs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1
1 2 3 4 5 6
9
1 2 3 4 5 6
10 9 8 7 12 11
13 14 15 16 17 18
19 20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36
37 38 39 40 41 42
43 44 45 46 47 48
49 19 34 27 25 13
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
No
Yes
</PRE> 

<P>

______________________________________________________
4229||||||false||||||
Consider a simple variation of the card game Blackjack. In this game, a single player plays against the dealer. The game uses a standard deck of cards, where numbered cards are worth the number of points on the card for the cards numbered 2 to 10, 10 points for the face cards (King, Queen, and Jack) and either 1 or 11 points for the Aces. 

<P>
The dealer deals the first card in the deck to the player, the second to the dealer, the third to the player, and the fourth to the dealer. The player then may continue to draw cards until s/he decides that the total is as close as possible to 21 and stops voluntarily or until s/he goes over 21. If the player goes over 21, the player loses. Then the dealer must draw cards until s/he reaches 17 or more points (with aces counting as 11 when possible). If the dealer goes over 21, the dealer loses. If neither of them goes over 21, the winner is the one who comes as close as possible to 21. If the player and the dealer have the same total, the player wins. 

<P>
For example, suppose the first cards in the deck are Queen, 6, 4, 9, and 10. On the initial deal, the player will receive Queen and 4 (for a total of 14) and the dealer will receive 6 and 9 (for a total of 15). If the player does not select a card, the dealer will have to draw (because the dealer's total is less than 17) and will draw the 10, going over, so the player will win. But if the player draws a card (the 10), the player's total will be 24, so the player will lose. 

<P>
In some situations, it is impossible for the player to win. Consider the case when the cards in the deck are: 10, 3, 4, King, 3, 5. The player will be dealt the cards 10 and 4. The dealer will have 3 and King. The table below illustrates what happens for each number of cards the player might draw: 

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
<SPAN  CLASS="textbf">Cards drawn</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textbf">Player's hand (Points)</SPAN>  </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  <SPAN  CLASS="textbf">Dealer's hand (Points)</SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10, 4 (14) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3, King, 3, 5 (21) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10, 4, 3 (17) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3, King, 5 (18) </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 10, 4, 3, 5 (22) </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3, King (13) </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
No matter how many cards the player draws, the player cannot win. 

<P>
In this problem, you will analyze decks to determine if they lead to a situation in which the player cannot win.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input to the program will be one or more decks. Each deck will be represented by a string, on its own line. Each deck will consist of at least 4 cards. where a card is either an integer <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $2 \le d \le 9$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4229img1.png
 ALT="$ \le$"><I>d</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4229img1.png
 ALT="$ \le$">9</SPAN>
<tex2html_verbatim_mark>, representing a numbered card, or one of the letters A, K, Q, J or T, representing Ace, King, Queen, Jack, or Ten, respectively. The letters will be in upper case. There will be no other characters on a line. In particular, there will be no spaces. There will always be enough cards to try all valid draws. End of input is indicated by the word `<TT>JOKER</TT>', alone on a line. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Print a list of responses for the input sets, one per line. Print the word `<TT>Yes</TT>' if there is a number of cards the player can draw and win, and `<TT>No</TT>' if there is no way for the player to win. Print these words exactly as they are shown. Do not print any blank lines between outputs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Q649T
T34K35
AA2T34A5KKQAJ
JOKER
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Yes
No
Yes
</PRE> 

<P>

______________________________________________________
4230||||||false||||||
You are in a rectangular maze and you would like to leave the maze as quickly as possible. The maze is a rectangular grid of square locations. Some locations are blocked. Some other locations are exits. If you arrive at an exit location, you can immediately leave the maze. 

<P>
You may walk one step at a time, onto one of the locations adjacent to your current location. Two locations are adjacent if they share a side. That is, you can only move one step North, South, East or West. Of course, you cannot step off the maze, and you cannot step onto a blocked location. 

<P>
In addition, at any step, you may choose to use your teleport device. This device will send you to a random non-blocked location inside the maze with uniform probability (including, possibly, the one where you currently are standing!). If the device happens to send you onto a spot that is also an exit, then you leave the maze immediately. Hooray! 

<P>
The only way to leave the maze is by moving onto an exit (either by teleport or walking), you may not walk off the boundary of the maze. Write a program to calculate the expected number of steps you need in order to leave the maze. Assume that you would choose your actions (movements and using teleport device) optimally in order to minimize the expected number of steps to leave the maze. Using the teleport device is considered one step. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple test cases. Each test case starts with a line containing two positive integers <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $R \le 200, C \le 200$
 -->
<SPAN CLASS="MATH"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4230img1.png
 ALT="$ \le$">200, <I>C</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4230img1.png
 ALT="$ \le$">200</SPAN>
<tex2html_verbatim_mark>). Then, the next <SPAN CLASS="MATH"><I>R</I></SPAN>
<tex2html_verbatim_mark> lines each contain <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> characters, representing the locations of the maze. The characters will be one of the following: 

<P>
<DL COMPACT>
<DT><TT>E</TT></DT>
<DD>: represents an exit, there will be at least one `<TT>E</TT>' in every maze. 
</DD>
<DT><TT>Y</TT></DT>
<DD>: represents your initial location, there will be exactly one `<TT>Y</TT>' in every maze. 
</DD>
<DT><TT>X</TT></DT>
<DD>: represents a blocked location. 
</DD>
<DT><TT>.</TT></DT>
<DD>: represents an empty space. 
</DD>
</DL>

<P>
You may move/teleport onto any location that is marked `<TT>E</TT>', `<TT>Y</TT>' or `<TT>.</TT>'. 

<P>
The end of input is marked by a line with two space-separated <TT>0</TT>'s. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print one line containing the minimum expected number of steps required to leave the maze, given that you make your choices optimally to minimize this value. Print your result to 3 decimal places. Do not print any blank lines between outputs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1
E
Y
2 2
E.
.Y
3 3
EX.
XX.
..Y
3 3
EXY
.X.
...
0 0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1.000
2.000
6.000
3.250
</PRE> 

<P>

______________________________________________________
4231||||||false||||||

<P>
Biologists are studying a certain, interesting kind of worm. Each worm can be seen as a line of cells of different types. When a worm is born, it only consists of a single cell. Every day, exactly 1 cell of the entire worm will grow and change into 2 cells. It is rather easy to determine the age of any such worm, since it's simply one less than the number of cells the worm has.

<P>
During a worm's growth, a cell does not change into any 2 arbitrary cells; each worm has a set of ``growth rules" (encoded in its DNA) that it obeys. A growth rule can be expressed as <!-- MATH
 $A \rightarrow BC$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> are uppercase letters (with letters A-T), representing different types of the worm's cells. The rule <!-- MATH
 $A \rightarrow BC$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I></SPAN>
<tex2html_verbatim_mark> means that in one day, any single cell <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> can be grown into the 2 adjacent cells <SPAN CLASS="MATH"><I>BC</I></SPAN>
<tex2html_verbatim_mark>, in that order. Note that the rule <!-- MATH
 $I \rightarrow JK$
 -->
<SPAN CLASS="MATH"><I>I</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>JK</I></SPAN>
<tex2html_verbatim_mark> is different from the rule <!-- MATH
 $I  \rightarrow KJ$
 -->
<SPAN CLASS="MATH"><I>I</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>KJ</I></SPAN>
<tex2html_verbatim_mark>. Different worms may have a different set of growth rules. 

<P>
The worms have now thrown the scientists for a loop. Due to some unknown reason, some worms have mutated into a new kind of specimen. This new kind of worm has the exact same properties, except that during its growth, <SPAN  CLASS="textit">multiple</SPAN> parts of its body can grow at the same time. That is, every day any (at least one, at most all) of its cells can grow; each cell that grows will grow into exactly 2 cells (obeying growth rules similar to their older cousins). 

<P>
As a result of the mutation, it is no longer trivial to determine the age of a worm. In fact, the exact age of some worms cannot be determined. As a simple example, if a worm has growth rules: <!-- MATH
 $A \rightarrow BC$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $B \rightarrow AC$
 -->
<SPAN CLASS="MATH"><I>B</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>AC</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $C \rightarrow AB$
 -->
<SPAN CLASS="MATH"><I>C</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>AB</I></SPAN>
<tex2html_verbatim_mark>, and the worm's current cell structure is <SPAN CLASS="MATH"><I>ACAB</I></SPAN>
<tex2html_verbatim_mark>, the worm can be either 2 or 3 days old (<!-- MATH
 $A \rightarrow BC \rightarrow ACAB$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>ACAB</I></SPAN>
<tex2html_verbatim_mark>, or <!-- MATH
 $A \rightarrow BC \rightarrow ACC \rightarrow ACAB$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>ACC</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>ACAB</I></SPAN>
<tex2html_verbatim_mark>). Your task is to find out the youngest possible age of any given mutated worm. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple worms for examination in the input. Each worm's data set begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le N \le 80$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \le$">80</SPAN>
<tex2html_verbatim_mark>), the number of growth rules. The next <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines each contain 3 uppercase letters (with letters A-T), representing a growth rule for the current worm. The 1st cell can grow into (and be replaced by) the 2nd and 3rd cells, in order, during the growth process. That is, the line: 

<P>

<P>
<BR>

<SPAN CLASS="MATH"><I>ABC</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
means <!-- MATH
 $A \rightarrow BC$
 -->
<SPAN CLASS="MATH"><I>A</I> <IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4231img1.png
 ALT="$ \rightarrow$"> <I>BC</I></SPAN>
<tex2html_verbatim_mark> is a growth rule for the current worm. 

<P>
The next (and last) line of each worm's data set contains a string of uppercase letters (with letters A-T). This line represents the current cell structure of the worm. Every worm in the input will have at least 1 and at most 50 cells. 

<P>
The last worm will be followed by a line with a single 0.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each worm, if the worm can be grown into the given cell sequence with the given growth rule set (starting with any arbitrary single cell), then print the minimum age, in days, of the worm, as an integer on its own line. If the worm cannot be grown into the given cell sequence with the given rule set (starting with any arbitrary single cell), then simply print the number `<TT>-1</TT>' on its own line. Print no blank lines between outputs. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3
ABC
BAC
CAB
ACAB
1
AAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
2
PAA
AAA
AAAAAAAAAAAAAAAP
1
BAB
AAAAAAB
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
6
-1
6
</PRE> 

<P>

______________________________________________________
4232||||||false||||||
<P>In sixth grade, students are presented with different ways to calculate the <SPAN CLASS="textit">Least Common Multiple</SPAN> <SPAN CLASS="textbf">(LCM)</SPAN> and the <SPAN CLASS="textit">Greatest Common Factor</SPAN> <SPAN CLASS="textbf">(GCF)</SPAN> of two integers. The <SPAN CLASS="textbf">LCM</SPAN> of two integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the smallest positive integer that is a multiple of both <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="textbf">GCF</SPAN> of two non-zero integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the largest positive integer that divides both <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> without remainder.<P>For this problem you will write a program that determines both the <SPAN CLASS="textbf">LCM</SPAN> and <SPAN CLASS="textbf">GCF</SPAN> for positive integers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4232img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4232img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of a single line of input containing two positive integers, <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4232img1.png ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4232img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space, the <SPAN CLASS="textbf">LCM</SPAN>, a space, and the <SPAN CLASS="textbf">GCF</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
5 10 
7 23 
42 56
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 10 5 
2 161 1 
3 168 14
</PRE><P>
______________________________________________________
4233||||||false||||||
<P>A <SPAN CLASS="textit">cryptoquote</SPAN> is a simple encoded message where one letter is simply replaced by another throughout the message. For example:<P><P><BR>Encoded: <TT>HPC PJVYMIY</TT><BR>Decoded: <TT>ACM CONTEST</TT><P><P><BR>In the example above, <TT>H</TT>=<TT>A</TT>, <TT>P</TT>=<TT>C</TT>, <TT>C</TT>=<TT>M</TT>, <TT>J</TT>=<TT>O</TT>, <TT>V</TT>=<TT>N</TT>, <TT>Y</TT>=<TT>T</TT>, <TT>M</TT>=<TT>E</TT> and <TT>I</TT>=<TT>S</TT>. For this problem, you will decode messages.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4233img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4233img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of two lines of input. The first line is the encoded message. The second line is a 26 character string of upper case letters giving the character mapping for each letter of the alphabet: the first character gives the mapping for <SPAN CLASS="textbf">A</SPAN>, the second for <SPAN CLASS="textbf">B</SPAN> and so on. Only upper case letters will be used. Spaces may appear in the encoded message, and should be preserved in the output string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and the decoded message.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
HPC PJVYMIY 
BLMRGJIASOPZEFDCKWYHUNXQTV 
FDY GAI BG UKMY 
KIMHOTSQYRLCUZPAGWJNBVDXEF
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 ACM CONTEST 
2 THE SKY IS BLUE
</PRE><P>
______________________________________________________
4234||||||false||||||
<P>A <SPAN CLASS="textit">binary clock</SPAN> is a clock which displays traditional sexagesimal time (military format) in a binary format. The most common binary clock uses three columns or three rows of LEDs to represent zeros and ones. Each column (or row) represents a time-unit value.<P>When three columns are used (vertically), the bottom row in each column represents 1 (or <SPAN CLASS="MATH">2<SUP>0</SUP></SPAN> <tex2html_verbatim_mark>), with each row above representing higher powers of two, up to <SPAN CLASS="MATH">2<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> (or 32). To read each individual unit (hours, minutes or seconds) in the time, the user adds the values that each illuminated LED represents, and then reads the time from left to right. The first column represents the hour, the next column represents the minute, and the last column represents the second.<P>When three rows are used (horizontally), the right column in each row represents 1 (or <SPAN CLASS="MATH">2<SUP>0</SUP></SPAN> <tex2html_verbatim_mark>), with each column left representing higher powers of two, up to <SPAN CLASS="MATH">2<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> (or 32). To read each individual unit (hours, minutes or seconds) in the time, the user adds the values that each illuminated LED represents, and then reads the time from top to bottom. The top row represents the hour, the next row represents the minute, and the bottom row represents the second.<P>For example:<P><DIV ALIGN="CENTER"><IMG WIDTH="823" HEIGHT="538" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4234.png ALT="\epsfbox{p4234.eps}"> <tex2html_verbatim_mark></DIV><P>For this problem you will read a time in sexagesimal time format, and output both the vertical and e horizontal binary clock values. The output will be formed by concatenating together the bits in each column (or row) to form two 18 character strings of <TT>1</TT>'s and <TT>0</TT>'s as shown below.<P><P><BR>For example, <TT>10:37:49</TT> would be written vertically as <TT>011001100010100011</TT> and horizontally as <TT>001010100101110001</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4234.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4234.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of a single line of input containing the time in sexagesimal format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space, the binary time in vertical format (18 binary digits), a space and the binary time in horizontal format (18 binary digits).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
10:37:49 
00:00:01
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 011001100010100011 001010100101110001 
2 000000000000000001 000000000000000001
</PRE><P>
______________________________________________________
4235||||||false||||||
<P>A <SPAN CLASS="textit">partition</SPAN> of a positive integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a sequence of integers which sum to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, usually written with plus signs between the numbers of the partition. For example<P><P><BR><DIV ALIGN="CENTER"><TT>15 = 1+2+3+4+5 = 1+2+1+7+1+2+1</TT></DIV><P><P><BR>A partition is <SPAN CLASS="textit">palindromic</SPAN> if it reads the same forward and backward. The first partition in the example is <SPAN CLASS="textit">not</SPAN> palindromic while the second is. If a partition containing <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers is palindromic, its left half is the first <SPAN CLASS="textbf">floor</SPAN><SPAN CLASS="MATH">(<I>m</I>/2)</SPAN> <tex2html_verbatim_mark> integers and its right half is the last <SPAN CLASS="textbf">floor</SPAN><SPAN CLASS="MATH">(<I>m</I>/2)</SPAN> <tex2html_verbatim_mark> integers (which must be the reverse of the left half. (<SPAN CLASS="textbf">floor</SPAN><SPAN CLASS="MATH">(<I>x</I>)</SPAN> <tex2html_verbatim_mark> is the greatest integer less than or equal to <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.)<P>A partition is <SPAN CLASS="textit">recursively palindromic</SPAN> if it is palindromic and its left half is recursively palindromic or empty. Note that every integer has at least two recursively palindromic partitions one consisting of all ones and a second consisting of the integer itself. The second example above is also recursively palindromic.<P>For example, the recursively palindromic partitions of 7 are:<P><P><BR><DIV ALIGN="CENTER"><TT>7, 1+5+1, 2+3+2, 1+1+3+1+1, 3+1+3, 1+1+1+1+1+1+1</TT></DIV><P><P><BR>Write a program which takes as input an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and outputs the number of recursively palindromic partitions of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4235img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4235img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of a single line of input containing a single positive integer for which the number of recursively palindromic partitions is to be found.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and the number of recursively palindromic partitions of the input value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
7 
20
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 4 
2 6 
3 60
</PRE><P>
______________________________________________________
4236||||||false||||||
<P>On a standard mobile phone the letters are distributed across the keys 2 through 9 as:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>ABC</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>DEF</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>GHI</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>JKL</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>MNO</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>PQRS</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>TUV</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>WXYZ</TD></TR></TBODY></TABLE></DIV><P><P><BR>To enter the letter <SPAN CLASS="textbf">C</SPAN>, you press key 2 three times (seeing <SPAN CLASS="textbf">A</SPAN>-<SPAN CLASS="textbf">B</SPAN>-<SPAN CLASS="textbf">C</SPAN>). The number of keystrokes to enter a letter depends on where it is in the list of letters on its key.<P>The <SPAN CLASS="textit">Flathead Telephone Company</SPAN> (FTC) is considering rearranging the letters on the keys to reduce the average number of keystrokes required to enter names etc. or send text messages. The letters must still appear in alphabetical order on the keys but different numbers of letters may appear on each key and possibly more keys could be used. FTC has several databases of letter frequencies used in different applications. For instance, it might help to move <SPAN CLASS="textbf">S</SPAN> from the <SPAN CLASS="textbf">7</SPAN> key to the <SPAN CLASS="textbf">8</SPAN> key. They need a program which is given the frequencies of the letters and a number of keys and returns the assignment of letters to keys with the smallest average number of keystrokes using the given frequencies. Each key used must have at least one letter and at most eight letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4236img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4236img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of three lines of input. The first line contains a single integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(4<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4236img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4236img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>, the number of keys which are to be used. The second and third lines contain 13 decimal values each giving the percent frequency of the letters <SPAN CLASS="textbf">A</SPAN> through <SPAN CLASS="textbf">Z</SPAN> in order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), the best average number of keystrokes to three decimal places, a space and the letters <SPAN CLASS="textbf">A</SPAN> through <SPAN CLASS="textbf">Z</SPAN>, for the best arrangement, in order with a single space at the break between letters on different keys. It is possible that the same input data set may produce different output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
8 
8.167 1.492 2.782 4.253 12.702 2.228 2.015 6.094 6.966 0.153 0.772 4.025 2.406
6.749 7.507 1.929 0.095 5.987 6.327 9.056 2.758 0.978 2.360 0.150 1.974 0.075 
9 
1.0 10.0 11.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 
10.0 10.0 10.0 10.0 10.0 11.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1.647 AB CD EFG HIJK LM NOPQ RS TUVWXYZ 
2 1.570 A B CDEFG HIJKLM N OP QR STUV WXYZ
</PRE><P>
______________________________________________________
4237||||||false||||||
<P>When sorted in standard order, strings with digits in them may not sort to where they are expected. For instance, <SPAN CLASS="textbf">xyz100</SPAN> precedes <SPAN CLASS="textbf">xyz2</SPAN>. In some applications such as listing files, <SPAN CLASS="textit">normal order sort</SPAN> may be used where any string of digits in a character string is treated as a single digit with numerical value given by the digit string. For example, the following are in normal order:<P><P><BR><DIV ALIGN="CENTER"><SPAN CLASS="textbf">XYZ001</SPAN>, <SPAN CLASS="textbf">XYZ2</SPAN>, <SPAN CLASS="textbf">XYZ003</SPAN>, <SPAN CLASS="textbf">XYZ08</SPAN>, <SPAN CLASS="textbf">XYZ23</SPAN>, <SPAN CLASS="textbf">XYZ100</SPAN>, <SPAN CLASS="textbf">XYZQ</SPAN></DIV><P><P><BR>We wish to extend normal order sort in two ways:<P><OL><LI>Lower case and upper case letters sort the same (with the upper case value). </LI><LI>If a plus (+) or minus (-) sign precedes a digit and does not follow a digit, it is considered part of the following number for sorting purposes. </LI></OL><P><P><BR>So <SPAN CLASS="textbf">123+456+7890</SPAN> are three numbers separated by plus signs but <SPAN CLASS="textbf">A+003</SPAN> is the same as <SPAN CLASS="textbf">A3</SPAN>.<P>To do our sort, we will use a library sort routine but we need to furnish a comparison routine. Write a comparison routine which takes as input two strings of printable, non-space <SPAN CLASS="textit">ASCII</SPAN> characters <SPAN CLASS="textbf">(chr(33)-chr(126))</SPAN> and returns:<P><P><BR><SPAN CLASS="textbf">-1</SPAN> if the first string should precede the second in extended normal order<P><SPAN CLASS="textbf">0</SPAN> it the two strings are the same in extended normal order, or<P><SPAN CLASS="textbf">1</SPAN> if the first string should follow the second in extended normal order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4237img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4237img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of a single line of input containing the two strings to be compared separated by a space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and <SPAN CLASS="textbf">-1</SPAN>, <SPAN CLASS="textbf">0</SPAN> or <SPAN CLASS="textbf">1</SPAN> depending on whether the first string precedes, is the same as, or follows the second string in extended normal order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
x-3 X0001 
123-456-7890 123+456+7890 
xYz000123J XyZ+123j 
#$%^&amp;*[]- abcdefgh 
Abc47jKL+00123 ABC+47jkL123
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 -1 
2 1 
3 0 
4 -1 
5 0
</PRE><P>
______________________________________________________
4238||||||false||||||
<P>A <SPAN CLASS="textit">polycube</SPAN> is a solid made by gluing together unit cubes (one unit on each edge) on one or more faces. The figure in the lower-left is <SPAN CLASS="textit">not</SPAN> a <SPAN CLASS="textit">polycube</SPAN> because some cubes are attached along an edge.<P><DIV ALIGN="CENTER"><IMG WIDTH="768" HEIGHT="719" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4238.png ALT="\epsfbox{p4238.eps}"> <tex2html_verbatim_mark></DIV><P>For this problem, the <SPAN CLASS="textit">polycube</SPAN> will be formed from unit cubes centered at integer lattice points in 3-space. The <SPAN CLASS="textit">polycube</SPAN> will be built up one cube at a time, starting with a cube centered at <SPAN CLASS="textbf">(0,0,0)</SPAN>. At each step of the process (after the first cube), the next cube must have a face in common with a cube previously included and not be the same as a block previously included. For example, a 1-by-1-by-5 block (as shown above in the upper-left <SPAN CLASS="textit">polycube</SPAN>) could be built up as:<P><P><BR><SPAN CLASS="textbf">(0,0,0) (0,0,1) (0,0,2) (0,0,3) (0,0,4)</SPAN><P><P><BR>and a 2-by-2-by-2 cube (upper-right figure) could be built as:<P><P><BR><SPAN CLASS="textbf">(0,0,0) (0,0,1) (0,1,1) (0,1, 0) (1,0,0) (1,0,1) (1,1,1) (1,1, 0)</SPAN><P><P><BR>Since the surface of the polycube is made up of unit squares, its area is an integer.<P><P><BR>Write a program which takes as input a sequence of integer lattice points in 3-space and determines whether is correctly forms a <SPAN CLASS="textit">polycube</SPAN> and, if so, what the surface area of the <SPAN CLASS="textit">polycube</SPAN> is.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4238.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4238.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of multiple lines of input. The first line contains the number of points <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1 = <I>P</I> = 100)</SPAN> <tex2html_verbatim_mark> in the problem instance. Each succeeding line contains the centers of the cubes, eight to a line (except possibly for the last line). Each center is given as 3 integers, separated by commas. The points are separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and the surface area of the <SPAN CLASS="textit">polycube</SPAN> if it is correctly formed, OR, if it is not correctly formed, the string ``<TT>NO</TT>" a space and the index (starting with 1) of the first cube which does not share a face with a previous cube. Note that the surface area includes the area of any included holes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
5 
0,0,0 0,0,1 0,0,2 0,0,3 0,0,4 
8 
0,0,0 0,0,1 0,1,0 0,1,1 1,0,0 1,0,1 1,1,0 1,1,1 
4 
0,0,0 0,0,1 1,1,0 1,1,1 
20 
0,0,0 0,0,1 0,0,2 0,1,2 0,2,2 0,2,1 0,2,0 0,1,0 
1,0,0 2,0,0 1,0,2 2,0,2 1,2,2 2,2,2 1,2,0 2,2,0 
2,1,0 2,1,2 2,0,1 2,2,1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 22 
2 24 
3 NO 3 
4 72
</PRE><P>
______________________________________________________
4239||||||false||||||
<P>Since most computers are binary machines, both powers of two and problems that involve only two values are important to computer scientists. The following problem has to do with powers of two and the digits <SPAN CLASS="textbf">1</SPAN> and <SPAN CLASS="textbf">2</SPAN>.<P>Some powers of two as decimal values, such as<P><DIV ALIGN="CENTER"><SPAN CLASS="MATH">2<SUP>9</SUP> = 512</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">2<SUP>89</SUP> = 618, 970, 019, 642, 690, 137, 449, 562, 112</SPAN> <tex2html_verbatim_mark></DIV>end in a string of digits consisting only of 1's and 2's (<TT>12</TT> for <SPAN CLASS="MATH">2<SUP>9</SUP></SPAN> <tex2html_verbatim_mark> and <TT>2112</TT> for <SPAN CLASS="MATH">2<SUP>89</SUP></SPAN> <tex2html_verbatim_mark>). In fact, it can be proved that:<P><P><BR><BLOCKQUOTE><SPAN CLASS="textit">For every integer <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, there exists a power of <SPAN CLASS="MATH">2</SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="textbf"><SPAN CLASS="MATH">2<SUP>K</SUP></SPAN> <tex2html_verbatim_mark></SPAN> uses <SPAN CLASS="textbf">only</SPAN> the digits <TT>1</TT> and <TT>2</TT> in its last <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> digits.</SPAN></BLOCKQUOTE><P><P><BR>This is shown a bit more clearly in the following table:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=RIGHT><COLGROUP><COL ALIGN=RIGHT><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1>Smallest <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1><SPAN CLASS="MATH">2<SUP>K</SUP></SPAN> <tex2html_verbatim_mark></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>512</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>89</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>112</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>89</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>2112</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>589</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>22112</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP>3089</TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>122112</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark></TD></TR></TBODY></TABLE></DIV><P><P><BR>Your job is to write a program that will determine, for given <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, the <SPAN CLASS="textit">smallest</SPAN> <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH">2<SUP>K</SUP></SPAN> <tex2html_verbatim_mark> ends in a string of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> digits containing only <TT>1</TT>'s and <TT>2</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single decimal integer, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4239img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4239img1.png ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>, the number of problem data sets to follow. Each data set consists of a single integer <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4239img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4239img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>, for which we want a power of 2 ending in a string of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <TT>1</TT>'s and <TT>2</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space, the input value <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, another space, and the smallest value <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> for which <SPAN CLASS="MATH">2<SUP>K</SUP></SPAN> <tex2html_verbatim_mark> ends in a string of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <TT>1</TT>'s and <TT>2</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 
1 
2 
4 
5 
7 
15
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 1 
2 2 9 
3 4 89 
4 5 589 
5 7 3089 
6 15 11687815589
</PRE><P>
______________________________________________________
4240||||||false||||||
<P>Joe's landscaping company specializes in gardens for computer geeks who have just had their company go public. One of his signature features is a round pool surrounded by a tiled patio in the form of an equilateral triangle where the edge of the pool is tangent to each side of the triangle at its midpoint.<P><DIV ALIGN="CENTER"><IMG WIDTH="356" HEIGHT="316" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="\epsfbox{p4240a.eps}"> <tex2html_verbatim_mark></DIV><P>Unfortunately, some of Joe's customers are not satisfied with an equilateral triangle, usually in the center of the garden. Some want it in a corner or next to a slope or some other layout. Joe would like the option of offering arbitrary triangular patios with an elliptical pool which is tangent to each side at the center of the side. For example:<P><DIV ALIGN="CENTER"><IMG WIDTH="721" HEIGHT="371" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="\epsfbox{p4240b.eps}"> <tex2html_verbatim_mark></DIV><P>Joe knows how to draw an ellipse by putting two stakes in the ground (at the foci of the ellipse), tying a rope between them and dragging a marker stick inside the rope. What Joe would like is for the customer to determine where the corners of the triangle will be and then measure the location of the triangle vertices and compute where to put the stakes and how long to make the rope.<P>Write a program, which takes as input the three vertices <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark> of a triangle and computes an ellipse inscribed in the triangle, which is tangent to each side of the triangle at its midpoint. The output is the coordinates of the two foci of the ellipse and the length of the rope (which is the sum of the distances from the foci to any point on the ellipse.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> which is the number of data sets that follow. Each data set consists of a single line of input containing 6 space separated floating point numbers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>&nbsp;<I>y</I><SUB>1</SUB>&nbsp;<I>x</I><SUB>2</SUB>&nbsp;<I>y</I><SUB>2</SUB>&nbsp;<I>x</I><SUB>3</SUB>&nbsp;<I>y</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> giving the coordinates of the vertices of a triangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, you should generate one line of output with the following values: The data set number as a decimal integer (start counting at one), a space and five floating point values accurate to two decimal places each separated by a single space. The values are <SPAN CLASS="MATH"><I>fx</I><SUB>1</SUB>&nbsp;<I>fy</I><SUB>1</SUB>&nbsp;<I>fx</I><SUB>2</SUB>&nbsp;<I>fy</I><SUB>2</SUB>&nbsp;<I>rl</I></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">(<I>fx</I><SUB>1</SUB>, <I>fy</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> is one focus of the ellipse, <SPAN CLASS="MATH">(<I>fx</I><SUB>2</SUB>, <I>fy</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> is the other focus of the ellipse and <SPAN CLASS="MATH"><I>rl</I></SPAN> <tex2html_verbatim_mark> is the sum of the distances from the foci to any point on the ellipse (e.g. the length of the rope). The foci should be listed in <SPAN CLASS="textit">increasing lexicographical order</SPAN> (i.e. <SPAN CLASS="MATH"><I>fx</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="$ \le$"><I>fx</I><SUB>2</SUB>and<I>iffx</I><SUB>1</SUB> = <I>fx</I><SUB>2</SUB>, <I>fy</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4240a.png ALT="$ \le$"><I>fy</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>). Note that in the case the ellipse is a circle, the two foci are the same (e.g. the center of the circle).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
100 100 200 273.2051 300 100
100 100 100 300 300 100     
100 200 100 300 300 100
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 200.00 157.71 200.00 157.76 115.47 
2 119.53 213.81 213.81 119.53 163.30 
3 103.94 253.14 229.40 146.86 170.51

______________________________________________________
4241||||||false||||||
<P>Bob Roberts owns a design business which creates custom artwork for various corporations. One technique that his company likes to use is to take a simple rectilinear figure (a figure where all sides meet at 90 or 270 degrees and which contains no holes) and draw one or more rectilinear borders around them. Each of these borders is drawn so that it is a set distance <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> away from the previously drawn border (or the original figure if it is the first border) and then the new area outlined by each border is painted a unique color. Some examples are shown below (without the coloring of the borders).<P><DIV ALIGN="CENTER"><IMG WIDTH="496" HEIGHT="126" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4241a.png ALT="\epsfbox{p4241a.eps}"> <tex2html_verbatim_mark></DIV><P>The example on the left shows a simple rectilinear figure (grey) with two borders drawn around it. The one on the right is a more complicated figure; note that the border may become disconnected.<P>These pieces of art can get quite large, so Bob would like a program which can draw prototypes of the finished pieces in order to judge how aesthetically pleasing they are (and how much money they will cost to build). To simplify things, Bob never starts with a figure that results in a border where 2 horizontal (or vertical) sections intersect, even at a point. This disallows such cases as those shown below:<P><DIV ALIGN="CENTER"><IMG WIDTH="477" HEIGHT="123" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4241a.png ALT="\epsfbox{p4241b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of the input file will contain a single integer indicating the number of test cases. Each test case will consist of two or more lines. The first will contain three positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> indicating the number of sides of the rectlinear figure, the number of borders to draw, and the distance between each border, where <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4241a.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4241a.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. The remaining lines will contain the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices of the figure, each represented by two positive integers indicating the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates. The vertices will be listed in clockwise order starting with the vertex with the largest <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> value and (among those vertices) the smallest <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output three lines: the first will list the case number (as shown in the examples), the second will contain <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers indicating the length of each border, and the third will contain <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers indicating the additional area contributed to the artwork by each border. Both of these sets of numbers should be listed in order, starting from the border nearest the original figure. Lines two and three should be indented two spaces and labeled as shown in the examples. Separate test cases with a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 2 10 
20 30 100 30 100 0 0 0 0 10 20 10 
10 1 7 
20 50 70 50 70 0 0 0 0 30 
20 30 20 10 60 10 60 40 20 40
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1:
  Perimeters: 340 420
  Areas: 3000 3800

Case 2:
  Perimeters: 380
  Areas: 2660
</PRE><P>
______________________________________________________
4242||||||false||||||
<P>Jack Barter is a wheeler-dealer of the highest sort. He'll trade anything for anything, as long as he gets a good deal. Recently, he wanted to trade some red agate marbles for some goldfish. Jack's friend Amanda was willing to trade him 1 goldfish for 2 red agate marbles. But Jack did some more digging and found another friend Chuck who was willing to trade him 5 plastic shovels for 3 marbles while Amanda was willing to trade 1 goldfish for 3 plastic shovels. Jack realized that he could get a better deal going through Chuck (1.8 marbles per goldfish) than by trading his marbles directly to Amanda (2 marbles per goldfish).<P>Jack revels in transactions like these, but he limits the number of other people involved in a chain of transactions to 9 (otherwise things can get a bit out of hand). Normally Jack would use a little program he wrote to do all the necessary calculations to find the optimal deal, but he recently traded away his computer for a fine set of ivory-handled toothpicks. So Jack needs your help.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. The first line of the file will contain an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicating the number of test cases in the file. Each test case will start with a line containing two strings and a positive integer <SPAN CLASS="MATH"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4242img1.png ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>. The first string denotes the items that Jack wants, and the second string identifies the items Jack is willing to trade. After this will be <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines of the form<P><P><BR><SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>&nbsp;<I>name</I><SUB>1</SUB>&nbsp;<I>a</I><SUB>2</SUB>&nbsp;<I>name</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>indicating that some friend of Jack's is willing to trade an amount <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> of item <SPAN CLASS="MATH"><I>name</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> for an amount <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> of item <SPAN CLASS="MATH"><I>name</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. (Note this does not imply the friend is also willing to trade <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> of item <SPAN CLASS="MATH"><I>name</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> of item <SPAN CLASS="MATH"><I>name</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>.) The values of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> will be positive and <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4242img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. No person will ever need more than <SPAN CLASS="MATH">2<SUP>31</SUP> - 1</SPAN> <tex2html_verbatim_mark> items to complete a successful trade.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the phrase `<TT>Case </TT><SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark><TT>:</TT>' (where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the case number starting at 1) followed by the best possible ratio that Jack can obtain. Output the ratio using 5 significant digits, rounded. Follow this by a single space and then the number of ways that Jack could obtain this ratio.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
goldfish marbles 3 
1 goldfish 2 marbles 
5 shovels 3 marbles 
1 goldfish 3 shovels 
this that 4 
7 this 2 that 
14 this 4 that 
7 this 2 theother 
1 theother 1 that
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1.8000 1 
Case 2: 0.28571 3
</PRE><P>
______________________________________________________
4243||||||false||||||
<P>LCR is a simple game for three or more players. Each player starts with three chips and the object is to be the last person to have any chips. Starting with Player 1, each person rolls a set of three dice. Each die has six faces, one face with an <TT>L</TT>, one with a <TT>C</TT>, one with an <TT>R</TT> and three with a dot. For each <TT>L</TT> rolled, the player must pass a chip to the player on their left (Player 2 is considered to be to the left of Player 1); for each <TT>R</TT> rolled, the player passes a chip to the player on their right; and for each <TT>C</TT> rolled, the player puts a chip in a central pile which belongs to no player. No action is taken for any dot that is rolled. Play continues until only one player has any chips left. In addition, the following rules apply:<P><P><BR><OL><LI>A player with no chips is not out of the game, since they may later gain chips based on other players' rolls. </LI><LI>A player with only 1 or 2 chips left only rolls 1 or 2 dice, respectively. A player with no chips left does not roll but just passes the dice to the next player. </LI></OL><P>Your job is to simulate this game given a sequence of dice rolls.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input will consist of multiple test cases. Each test case will consist of one line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (indicating the number of players in the game) and a string (specifying the dice rolls). There will be at most 10 players in any game, and the string will consist only of the characters `<TT>L</TT>', `<TT>C</TT>', `<TT>R</TT>' and `<TT>.</TT>'. In some test cases, there may be more dice rolls than are needed (i.e., some player wins the game before you use all the dice rolls). If there are not enough dice rolls left to complete a turn (for example, only two dice rolls are left for a player with 3 or more chips) then those dice rolls should be ignored. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> will indicate end of input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, output the phrase `<TT>Game</TT> <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark><TT>:</TT>' on a single line (where <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is the case number starting at 1) followed by a description of the state of the game. This desciption will consist of <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> lines of the form<P><P><BR><TT>Player 1:</TT><SPAN CLASS="MATH"><I>c</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark><BR><TT>Player 2:</TT><SPAN CLASS="MATH"><I>c</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark><BR><TT>Player</TT> <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark><TT>:</TT><SPAN CLASS="MATH"><I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark><BR><TT>Center:</TT><SPAN CLASS="MATH"><I>c</I><SUB>t</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>...<I>c</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> are the number of chips each player has at the time the simulation ended (either because some player has won or there are no more remaining dice rolls) and <SPAN CLASS="MATH"><I>c</I><SUB>t</SUB></SPAN> <tex2html_verbatim_mark> is the number of chips in the center pile. In addition, if some player has won, you should append the string `(<TT>W</TT>)' after their chip count; otherwise you should append the string `(<code>*</code>)' after the chip count of the player who is the next to roll. The only blank on any line should come before the game number or the player number. Use a single blank line to separate test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 LR.CCR.L.RLLLCLR.LL..R...CLR. 
5 RL....C.L 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Game 1: 
Player 1:0 
Player 2:0 
Player 3:6(W) 
Center:3 

Game 2: 
Player 1:1 
Player 2:4 
Player 3:1 
Player 4:4(*) 
Player 5:4 
Center:1
</PRE><P>
______________________________________________________
4244||||||false||||||

<P>
Emma has just graduated high school and it is the custom for the new graduates to throw parties for themselves and invite everyone in school to attend. Naturally, Emma wishes to attend as many parties as possible. This is not such a problem on a weekday since usually there are only two or three parties in the evening. But, Saturdays are packed! Typically some parties start at 8 AM (breakfast is served) while others might end at midnight (much to the annoyance of the neighbors). Emma naturally wants to know how many parties she can attend. 

<P>
Each party has a starting and stopping time, which are on the hour. These are listed via a 24-hour clock. For example, a party might start at 10 AM (10) and end at 2 PM (14). The earliest a party can start is 8 AM (8) and the latest it can end is midnight (24). In order not to be rude, Emma stays at each party at least one half hour and will consider traveling time between parties to be instantaneous. If there are times during the day when there are no parties to attend, she'll simply go home and rest.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be multiple test cases. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4244img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> indicating the number of parties on the given day. (A value of <SPAN CLASS="MATH"><I>p</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates end of input.) The following <SPAN CLASS="MATH"><I>p</I></SPAN>
<tex2html_verbatim_mark> lines are each of the form <SPAN CLASS="MATH"><I>s</I>&nbsp;<I>e</I></SPAN>
<tex2html_verbatim_mark>, both integers where <!-- MATH
 $8 \le s < e \le 24$
 -->
<SPAN CLASS="MATH">8<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4244img1.png
 ALT="$ \le$"><I>s</I> &lt; <I>e</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4244img1.png
 ALT="$ \le$">24</SPAN>
<tex2html_verbatim_mark>, indicating a party that starts at time <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> and ends at time <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark>. Note there may be multiple parties with the same starting and ending time.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input set output a line of the form 

<P>

<P>
<BR>

<TT>On day <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> Emma can attend as many as <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> parties.</TT> 

<P>

<P>
<BR>
where you determine the value of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> is the number of the test case starting at 1.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
8 
12 13 
13 14 
12 13 
9 10 
9 10 
12 13 
12 14 
9 11 
3 
14 15 
14 15 
14 15 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
On day 1 Emma can attend as many as 7 parties. 
On day 2 Emma can attend as many as 2 parties.
</PRE>

<P>

______________________________________________________
4245||||||false||||||

<P>
By now, everyone has played Sudoku: you're given a 9-by-9 grid of boxes which you are to fill in with the digits 1 through 9 so that 1) every row has all nine digits, 2) every column has all nine digits, and 3) all nine 3-by-3 subgrids have all nine digits. To start the game you are given a partially completed grid and are asked to fill in the remainder of the boxes. One such puzzle is shown below. 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=9 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>
4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 9 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 6 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
In this problem, you will be given Sudoku grids which you have nearly completed; indeed you've filled in every box except five. You are asked to complete the grid, or determine that it's impossible. (You might have already made an error!)

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of input will contain a positive integer indicating the number of test cases to follow. Each test case will be a nearly completed Sudoku grid consisting of 9 lines, each containing 9 characters from the set of digits 0 through 9. There will be exactly five 0's in each test case, indicating the five unfilled boxes.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output for each test case should be either 

<P>

<P>
<BR>

<TT>Could not complete this grid.</TT> 

<P>

<P>
<BR>
if it is impossible to complete the grid according to the rules of the game, or the completed grid, in the form given below. (There are no blank spaces in the output.) If there is a way to complete the grid, it will be unique. Separate test cases with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
481253697 
267948105 
539671204 
654389712 
908704563 
173562849 
702136958 
315897426 
896425371 
481253697 
267948105 
539671284 
654289710 
908704562 
173562849 
702136958 
315897426 
896425371
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
481253697 
267948135 
539671284 
654389712 
928714563 
173562849 
742136958 
315897426 
896425371 

Could not complete this grid.
</PRE>

<P>

______________________________________________________
4246||||||false||||||

<P>
Imagine you have a car with a very large gas tank - large enough to hold whatever amount you need. You are traveling on a circular route on which there are a number of gas stations. The total gas in all the stations is exactly the amount it takes to travel around the circuit once. When you arrive at a gas station, you add all of that station's gas to your tank. Starting with an empty tank, it turns out there is at least one station to start, and a direction (clockwise or counter-clockwise) where you can make it around the circuit. (On the way home, you might ponder why this is the case - but trust us, it is.) 

<P>
Given the distance around the circuit, the locations of the gas stations, and the number of miles your car could go using just the gas at each station, find all the stations and directions you can start at and make it around the circuit.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be a sequence of test cases. Each test case begins with a line containing two positive integers <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, representing the total circumference, in miles, of the circle and the total number of gas stations. Following this are <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> pairs of integers <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>. In each pair, <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> is an integer between 0 and <SPAN CLASS="MATH"><I>c</I> - 1</SPAN>
<tex2html_verbatim_mark> measuring the clockwise location (from some arbitrary fixed point on the circle) around the circumference of one of the gas stations and <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> is the number of miles that can be driven using all of the gas at the station. All of the locations are distinct and the maximum value of <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> is 100,000. The last test case is followed by a pair of 0's.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the test case number (in the format shown in the example below) followed by a list of pairs of values in the form <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>d</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is the gas station location and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark> is either <TT>C</TT>, <TT>CC</TT>, or <TT>CCC</TT>, indicating that, when starting with an empty tank, it is possible to drive from location <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> around in a clockwise (<TT>C</TT>) direction, counterclockwise (<TT>CC</TT>) direction, or either direction (<TT>CCC</TT>), returning to location <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>. List the stations in order of increasing location.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 4 
2 3 4 3 6 1 9 3 
5 5 
0 1 4 1 2 1 3 1 1 1 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 2 C 4 CC 9 C 
Case 2: 0 CCC 1 CCC 2 CCC 3 CCC 4 CCC
</PRE>

<P>

______________________________________________________
4247||||||false||||||

<P>
Winston the Worm just woke up in a fresh rectangular patch of earth. The rectangular patch is divided into cells, and each cell contains either food or a rock. Winston wanders aimlessly for a while until he gets hungry; then he immediately eats the food in his cell, chooses one of the four directions (north, south, east, or west) and crawls in a straight line for as long as he can see food in the cell in front of him. If he sees a rock directly ahead of him, or sees a cell where he has already eaten the food, or sees an edge of the rectangular patch, he turns left or right and once again travels as far as he can in a straight line, eating food. He never revisits a cell. After some time he reaches a point where he can go no further so Winston stops, burps and takes a nap. 

<P>
For instance, suppose Winston wakes up in the following patch of earth (X's represent stones, all other cells contain food): 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=6 BORDER RULES=GROUPS>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  

0 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  

1 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

2 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

3 </TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD><TD></TD><TD></TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

4 </TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
If Winston starts eating in row 0, column 3, he might pursue the following path (numbers represent order of visitation): 

<P>

<P>
<BR>
<DIV ALIGN="CENTER">
<TABLE COLS=6 BORDER RULES=GROUPS>
<COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER>
<TBODY>
<TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 4 </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  

0 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  

1 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 18</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 17</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 16</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 15</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

2 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 19</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 20</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 21</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 14</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

3 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> X</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 22</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 13</TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 

4 </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 11</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=1> 12</TD></TR>
<TR><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
In this case, he chose his path very wisely: every piece of food got eaten. Your task is to help Winston determine where he should begin eating so that his path will visit as many food cells as possible.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will consist of multiple test cases. Each test case begins with two positive integers, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, defining the number of rows and columns of the patch of earth. Rows and columns are numbered starting at 0, as in the figures above. Following these is a non-negative integer <SPAN CLASS="MATH"><I>r</I></SPAN>
<tex2html_verbatim_mark> indicating the number of rocks, followed by a list of <SPAN CLASS="MATH">2<I>r</I></SPAN>
<tex2html_verbatim_mark> integers denoting the row and column number of each rock. The last test case is followed by a pair of zeros. This should not be processed. The value <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark> will not exceed 625.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each test case, print the test case number (beginning with 1), followed by four values: 

<P>

<P>
<BR>

<!-- MATH
 $amount \ row \ column \ direction$
 -->
<SPAN CLASS="MATH"><I>amount</I>&nbsp;<I>row</I>&nbsp;<I>column</I>&nbsp;<I>direction</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where <SPAN CLASS="MATH"><I>amount</I></SPAN>
<tex2html_verbatim_mark> is the maximum number of pieces of food that Winston is able to eat, <!-- MATH
 $(row, column)$
 -->
<SPAN CLASS="MATH">(<I>row</I>, <I>column</I>)</SPAN>
<tex2html_verbatim_mark> is the starting location of a path that enables Winston to consume this much food, and <SPAN CLASS="MATH"><I>direction</I></SPAN>
<tex2html_verbatim_mark> is one of <TT>E</TT>, <TT>N</TT>, <TT>S</TT>, <TT>W</TT>, indicating the initial direction in which Winston starts to move along this path. If there is more than one starting location, choose the one that is lexicographically least in terms of row and column numbers. If there are optimal paths with the same starting location and different starting directions, choose the first valid one in the list <TT>E</TT>, <TT>N</TT>, <TT>S</TT>, <TT>W</TT>. Assume there is always at least one piece of food adjacent to Winston's initial position.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 5 
3 
0 4 3 1 3 2 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 22 0 3 W
</PRE> 

<P>

______________________________________________________
4248||||||false||||||

<P>
Congratulations! Your county has just won a state grant to install a rail system between the two largest towns in the county  -- Acmar and Ibmar. This rail system will be installed in sections, each section connecting two different towns in the county, with the first section starting at Acmar and the last ending at Ibmar. The provisions of the grant specify that the state will pay for the two largest sections of the rail system, and the county will pay for the rest (if the rail system consists of only two sections, the state will pay for just the larger section; if the rail system consists of only one section, the state will pay nothing). The state is no fool and will only consider simple paths; that is, paths where you visit a town no more than once. It is your job, as a recently elected county manager, to determine how to build the rail system so that the county pays as little as possible. You have at your disposal estimates for the cost of connecting various pairs of cities in the county, but you're short one very important requirement  -- the brains to solve this problem. Fortunately, the lackeys in the computing services division will come up with something.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input will contain multiple test cases. Each case will start with a line containing a single positive integer <SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4248img1.png
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark>, indicating the number of railway section estimates. (There may not be estimates for tracks between all pairs of towns.) Following this will be n lines each containing one estimate. Each estimate will consist of three integers <SPAN CLASS="MATH"><I>s</I>&nbsp;<I>e</I>&nbsp;<I>c</I></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark> are the starting and ending towns and <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> is the cost estimate between them. (Acmar will always be town 0 and Ibmar will always be town 1. The remaining towns will be numbered using consecutive numbers.) The costs will be symmetric, i.e., the cost to build a railway section from town <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> to town <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark> is the same as the cost to go from town <SPAN CLASS="MATH"><I>e</I></SPAN>
<tex2html_verbatim_mark> to town <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, and costs will always be positive and no greater than 1000. It will always be possible to somehow travel from Acmar to Ibmar by rail using these sections. A value of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> will signal the end of input.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output a single line of the form 

<P>

<P>
<BR>

<!-- MATH
 $c_1 \ c_2 \ \ldots \ c_m \ cost$
 -->
<SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>&nbsp;<I>c</I><SUB>2</SUB>&nbsp;...&nbsp;<I>c</I><SUB>m</SUB>&nbsp;<I>cost</I></SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
where each <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is a city on the cheapest path and <SPAN CLASS="MATH"><I>cost</I></SPAN>
<tex2html_verbatim_mark> is the cost to the county (note <SPAN CLASS="MATH"><I>c</I>1</SPAN>
<tex2html_verbatim_mark> will always be 0 and <SPAN CLASS="MATH"><I>cm</I></SPAN>
<tex2html_verbatim_mark> will always be 1 and <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB> + 1</SPAN>
<tex2html_verbatim_mark> are connected on the path). In case of a tie, print the path with the shortest number of sections; if there is still a tie, pick the path that comes first lexicographically.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
7 
0 2 10
0 3 6 
2 4 5 
3 4 3 
3 5 4 
4 1 7 
5 1 8
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 3 4 1 3

______________________________________________________
4249||||||false||||||
<P>Ms. Lee is a heptathlon athlete participating in the Olympic Games for Korea. A heptathlon is a track and field athletics competition made up of 7 events (100m hurdles, high jump, shot put, 200m, long jump, javelin throw, and 800m). Given Lee's performances in the 7 events, we want to compute Lee's score.<P>The total score in a heptathlon is computed by summing the scores in all 7 events. The formula for the score of each event follows the following format:<P><P><BR><UL><LI>Score = <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \lfloor$"><I>A</I>&#215;(<I>B</I> - <I>P</I>)<SUP>c</SUP><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> for Running Events </LI><LI>Score = <SPAN CLASS="MATH"><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \lfloor$"><I>A</I>&#215;(<I>P</I> - <I>B</I>)<SUP>c</SUP><IMG WIDTH="12" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \rfloor$"></SPAN> <tex2html_verbatim_mark> for Field Events </LI></UL><P><P><BR>where A, B, and C are constants given below and P is a player's performance in the units described below.<P>Note that the score for each event is an integer.<P><DIV ALIGN="CENTER"><TABLE COLS=6 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Event</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">A</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">B</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">C</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">P</SPAN> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="textbf">Type</SPAN></TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>100 m Hurdles</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>9.23076</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>26.7</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.835</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>sec</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Running</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>High Jump</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.84523</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>75</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.348</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>cm</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Field</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Shot Put</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>56.0211</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.05</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>m</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Field</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>200 m</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>4.99087</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>42.5</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.81</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>sec</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Running</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Long Jump</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0.188807</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>210</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.41</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>cm</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Field</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Javelin Throw</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>15.9803</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>3.8</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.04</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>m </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Field</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>800 m</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>0.11193</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>254</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>1.88</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>sec</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Running</TD></TR></TBODY></TABLE></DIV><P>We assume that <SPAN CLASS="MATH"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \le$"><I>P</I></SPAN> <tex2html_verbatim_mark> for field events and <SPAN CLASS="MATH"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \le$"><I>B</I></SPAN> <tex2html_verbatim_mark> for running events.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4249img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case consists of one line with 7 integers. These integers represent Lee's performances in the units described in column <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> of the table above. The order of events is 100m hurdles, high jump, shot put, 200m, long jump, javelin throw, and 800m.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print Lee's total score.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
19 90 11 29 264 20 131 
12 95 21 37 224 35 221 
17 168 15 23 275 22 241
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2901 
3419 
3772
</PRE><P>
______________________________________________________
4250||||||false||||||
<P>In modern molecular biology the genome of an organism is its hereditary information encoded in DNA. The genome includes both the genes and the non-coding sequences of the DNA. In the view of computer science, the genome can be regarded as a very long string consisting of only four letters {<TT>A</TT>,<TT>G</TT>,<TT>T</TT>,<TT>C</TT>}.<P>In order to study specific genetic diseases, it is very important to examine if there are DNA (substring) patterns which appear more frequently than others in a whole genome. Especially we are intended in finding ``<SPAN CLASS="textit">compositionally equivalent</SPAN>" substrings. A string P is said to be compositionally equivalent to a string Q if the number of 4 letters {<TT>A</TT>,<TT>G</TT>,<TT>T</TT>,<TT>C</TT>} appearing in P and Q is exactly the same. For example, P=``<TT>ATTATGC</TT>" is compositionally equivalent to Q=``<TT>GTATCTA</TT>" since the number of `<TT>A</TT>' , `<TT>G</TT>' , `<TT>C</TT>' and `<TT>T</TT>' in P is exactly same to that in Q, respectively. In the other hand, ``<TT>TTGCA</TT>" is not compositionally equivalent to ``<TT>TGCCA</TT>".<P>In this problem we want to find the <SPAN ID="txt65"><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-Major Composition Substring</SPAN> (<SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS for short). For a genome string given, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS is defined as the most frequently appearing substring of length <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> up to compositionally equivalence. Since the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS for a given input genome is not necessarily unique, two or more different <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS could be possible. In the following, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-substring means a substring of length <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.<P>Let us show one example. We have a genome string W=``<TT>GCAGGAGCGCCAGG</TT>" with length 14. There are many different compositionally equivalent 3-substrings such as <TT>GCA</TT>, <TT>CAG</TT>, <TT>GGA</TT>, <TT>GAG</TT>, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark> <TT>CAG</TT> and <TT>AGG</TT>. In W it is easy to find that ``<TT>AGG</TT>" is a 3-MCS which appears four times as <TT>AGG</TT>, <TT>GGA</TT>, <TT>GAG</TT> and <TT>AGG</TT>, since there is no other 3-substring (up to compositionally equivalence) which appears more than 4 times in W.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case (input genome) starts with the value <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS and the genome string W, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4250img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4250img1.png ALT="$ \le$">600</SPAN> <tex2html_verbatim_mark>. The length of the input genome string, <SPAN CLASS="MATH">| <I>W</I>|</SPAN> <tex2html_verbatim_mark>, is bounded by <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4250img1.png ALT="$ \le$">| <I>W</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4250img1.png ALT="$ \le$">60000</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write the number of occurrence of a <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-MCS appearing in each genome string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
3 GCAGGAGCGCCAGG 
4 AGTCCTTAGAG 
5 GGGAGGGGGGGTGGGGGGGGT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
7
</PRE><P>
______________________________________________________
4251||||||false||||||
<P>Mr. Kim visits his hometown annually. He always drives his car following the shortest path to his hometown. Since he is a very economical person, he only fills his fuel tank with the amount of gasoline needed to follow the shortest path for fuel efficiency. Last year, he fueled the exact amount to travel the shortest path, but he was in big trouble because an unexpected accident occurred on the shortest path. That is, he was short of gasoline because he had to find a detour to get to his hometown.<P>This year, he wants to fuel enough gasoline considering unexpected detours caused by an accident. According to statistical reports, at most one accident occurs in a day. (His hometown can be reached if he drives all day long.) Thus he wants to fill his fuel tank with the smallest amount of gasoline supposing that there will be only one accident. For this, he will find the shortest path to get to his hometown wherever the accident occurs.<P>The road system can be represented as a weighted graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is the set of vertices that represent cities, <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is the set of edges that represent roads connecting two cities, and <SPAN CLASS="MATH"><I>w</I>(<I>e</I>)</SPAN> <tex2html_verbatim_mark> is the weight of each edge <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> that represents the amount of gasoline needed to drive the corresponding road. An accident always occurs in the middle of a road and the occurrence of the accident can be found when he reaches the cities which are incident with the road. This means that no accident can be reported in advance.<P>For example, consider the case when the city of departure is node 0 and the city of arrival is node 5 in the given graph below. Then the shortest path is <!-- MATH
 $P = <0,1,4,5>$
 --><SPAN CLASS="MATH"><I>P</I> = &lt; 0, 1, 4, 5 &gt;</SPAN> <tex2html_verbatim_mark> and the units of gasoline, i.e., the sum of weights on the shortest path, is <SPAN CLASS="MATH"><I>W</I>(<I>P</I>) = 6</SPAN> <tex2html_verbatim_mark>. Suppose that an accident occurs in the edge (0, 1) between the two cities 0 and 1. Then, the shortest detour at node 0 which does not make use of edge (0, 1) becomes <SPAN CLASS="MATH">&lt; 0, 2, 4, 5 &gt;</SPAN> <tex2html_verbatim_mark> and it requires 2 more units of gasoline than path P. When an accident occurs at edge (1, 4) ( resp. edge (4, 5)) the shortest detour will be <SPAN CLASS="MATH">&lt; 1, 3, 5 &gt;</SPAN> <tex2html_verbatim_mark> ( resp. <SPAN CLASS="MATH">&lt; 4, 1, 3, 5 &gt;</SPAN> <tex2html_verbatim_mark> ) and it requires 0 (resp. 4 ) more units of gasoline than the path P. So, Mr. Kim should fill his fuel tank with at least 10 units of gasoline since he needs 4 more units of gasoline than that of <SPAN CLASS="MATH"><I>W</I>(<I>P</I>)</SPAN> <tex2html_verbatim_mark>, i.e., 4 more units of gasoline is the largest amount considering the detour by an unexpected accident for every node on the shortest path <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="486" HEIGHT="321" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="\epsfbox{p4251.eps}"> <tex2html_verbatim_mark></DIV><P>When we are given the road system represented as a weighted graph and the shortest path from the city of departure to the city of arrival followed by Mr. Kim, find the smallest amount of gasoline that Mr. Kim has to fuel considering a detour by an accident.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases and the number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> which represent the number of cities and the number of roads with ranges of <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="$ \le$">10, 000</SPAN> <tex2html_verbatim_mark>, respectively. The cities are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. In the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines are given with three integers <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> (separated by a space), where <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> represents the amount of gasoline needed to travel between the cities <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>c</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4251.png ALT="$ \neq$"> <I>d</I> )</SPAN> <tex2html_verbatim_mark>. In the next line, <SPAN CLASS="MATH"><I>k</I> + 1</SPAN> <tex2html_verbatim_mark> integers are given representing the shortest path that Mr. Kim has chosen. The first integer is <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> as the total number of cities on the shortest path and the next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> integers represent the cities along the path. That is, the second integer represents the city of departure and the last integer represents the city of arrival.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print the amount of gasoline with which Mr. Kim should feed his fuel tank. If there exists no way to go to his hometown if an accident occurs, print `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 8 
0 1 1 
0 2 3 
2 1 1 
4 2 2 
1 4 2 
5 4 3 
3 1 3 
5 3 2 
4 0 1 4 5
4 3 
0 1 2 
2 1 4 
1 3 3 
3 0 1 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
-1
</PRE><P>
______________________________________________________
4252||||||false||||||
<P>A small computer of Von Neumann architecture named ICPC is used for the BDN Programming Contest. ICPC is a 16-bit integer machine. There is a sufficient number of instruction memory cells in ICPC but it has only one data memory cell. ICPC has 6 registers: R1, R2, R3, R4, R5, and PC. The R<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> registers are general purpose but PC is the program counter storing the address of the next instruction to be executed. The PC value can be changed only by a group of control-flow instructions. This machine follows the usual fetch-decodeexecute cycles. The PC value is normally increased automatically except for the cases of the control flow instructions. ICPC has only two addressing modes, immediate value and register, but PC cannot be used as an operand. The whole set of instructions of ICPC is shown in Table 1. In Table 1, <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> denotes a register, <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> denotes a register or an integer value, and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> denotes the data memory cell.<P><P><BR><DIV ALIGN="CENTER">Table 1: The instruction set of ICPC</DIV><P><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>ICPC Instruction</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>The meaning of the instruction in C</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>load</TT> <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> = <I>M</I></SPAN> <tex2html_verbatim_mark>;</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>store</TT> <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>M</I> = <I>v</I></SPAN> <tex2html_verbatim_mark>;</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>move</TT> <SPAN CLASS="MATH"><I>r</I>&nbsp;<I>v</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> = <I>v</I></SPAN> <tex2html_verbatim_mark>;</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add</TT> <SPAN CLASS="MATH"><I>r</I>&nbsp;<I>v</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> + = <I>v</I></SPAN> <tex2html_verbatim_mark>;</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>sub</TT> <SPAN CLASS="MATH"><I>r</I>&nbsp;<I>v</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH"><I>r</I> - = <I>v</I></SPAN> <tex2html_verbatim_mark>;</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>loop</TT> <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>while</TT> <SPAN CLASS="MATH">(<I>r</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> {</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&nbsp;/SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textit">instructions</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&nbsp;/SPAN> <tex2html_verbatim_mark> execute the <SPAN CLASS="textit">instructions</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>pool</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>}</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>cond</TT> <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>if</TT> <SPAN CLASS="MATH">(<I>r</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> {</TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&nbsp;/SPAN> <tex2html_verbatim_mark> <SPAN CLASS="textit">instructions</SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><SPAN CLASS="MATH">&nbsp;/SPAN> <tex2html_verbatim_mark> execute the <SPAN CLASS="textit">instructions</SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>dnoc</TT></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>}</TD></TR></TBODY></TABLE></DIV><P><P><BR>Every step of the fetch-decode-execute cycle is called ``cycle." Therefore every instruction consumes three cycles at least and every ICPC instruction, except for <TT>dnoc</TT>, consumes exactly three cycles. The instruction <TT>dnoc</TT> is just used for denoting the end of <TT>cond</TT> and not executed at all. This kind of instruction is called a pseudo instruction; <TT>dnoc</TT> is the only pseudo instruction in ICPC. The instruction <TT>pool</TT> denotes the end of <TT>loop</TT>, just like <TT>dnoc</TT>, but it is executed indeed for the control flow should return the beginning of the <TT>loop</TT> at the end of a <TT>loop</TT>.<P>To minimize the execution time of programs, pipelining is usually adopted in modern computer architectures and ICPC also adopts it. Assuming that three instructions, namely A, B, and C, are to be executed in sequence, the decode cycle of A can overlap the fetch cycle of B and the execute cycle of A can overlap the decode cycle of B and also can overlap the fetch cycle of C. Therefore, it takes only 4 cycles for one <TT>move</TT> and one <TT>add</TT> instruction in sequence rather than 6 cycles, as shown in the first two instructions of Fig. 1(a). In Fig. 1, we used F for fetch, D for decode, and E for execute cycle.<P>Pipelining is stalled if the PC encounters a control flow instruction because we do not know the next instruction to be executed. The next instruction can be determined only after the control flow instruction is executed. The <TT>cond</TT> instruction in Fig. 1(a) shows this fact. Note that <TT>dnoc</TT> is not executed at all since it is a pseudo instruction and it takes 9 cycles to execute all the instructions in Fig. 1(a).<P>However the instruction <TT>loop</TT>, similar to <TT>dnoc</TT>, is really a control flow instruction. For example, in Figure 1(b), not only the instruction <TT>loop</TT> but also the instruction <TT>pool</TT> stalls the pipelining.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=13 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=2>Programs</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP COLSPAN=11>Cycles</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>10</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>11</TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>move R1 0</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add R1 1</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>(a)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>cond R1</TT></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add R1 2</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>dnoc</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>add R1 5</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD></TR></TBODY><TBODY><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>move R1 1</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>(b)</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>loop R1</TT></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>sub R1 1</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD><TD></TD></TR><TR><TD></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>pool</TT></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>F</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>D</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>E</TD><TD></TD><TD></TD><TD></TD></TR></TBODY></TABLE></DIV><P><DIV ALIGN="CENTER">Figure 1: Example programs and the corresponding cycle counts</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. The first line of each test case contains the number of lines <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> of ICPC instructions <SPAN CLASS="MATH">(<I>L</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> and the remaining <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> lines contain the sequence of ICPC instructions of the test case. Every instruction line contains exactly one ICPC instruction. The input may be indented according to the nesting of control structures. The <TT>loop</TT> and <TT>cond</TT> should contain at least one instruction, i.e. there is no empty loop or empty branch. The maximum number of characters in an input line is 100. Immediate values are 16-bit two's complement integers, i.e. an immediate value <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is in <SPAN CLASS="MATH">-32768<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4252img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4252img1.png ALT="$ \le$"> + 32767</SPAN> <tex2html_verbatim_mark>. The op code and the operands are separated with at least one blank character. There is no <SPAN CLASS="textit">infinite loop</SPAN> in the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Your program should count the number of cycles when executing the ICPC program given in standard input. The initial contents of the data memory cell and the registers are assumed to be 0. When overflow or underflow occurs in any of the registers or the data memory cell, your program should write ``<TT>error</TT>" rather than a cycle count.<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
7 
move R1 0 
move R2 10 
loop R2 
  add R1 R2 
  sub R2 1 
pool 
store R1 
4 
move R1 1 
loop R1 
  add R1 1 
pool 
5 
move R1 1 
cond R1 
  add R1 2 
dnoc 
add R1 5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
88 
error 
8
</PRE><P>
______________________________________________________
4253||||||false||||||
<P>Korea's reputation in archery is well known because the Korean archery teams have been sweeping almost all gold, silver, and bronze medals in the Olympic Games.<P>An archery game ICPC supported by NEXON (one of Korea's leading publishers of online contents) will be held in Korea. As a ceremonial event of the game, a famous master of archery will shoot an arrow to hit through all target boards made of paper. Because an arrow flies along a straight line, it depends on his position of the archer line whether or not he hits all targets.<P>The figure below shows an example of the complete view of a game field from the sky. Every target is represented by a line segment parallel to the archer line. Imagine the coordinate system of which the origin is the leftmost point of the archer line and the archer line is located on the positive <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis.<P><DIV ALIGN="CENTER"><IMG WIDTH="524" HEIGHT="281" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="\epsfbox{p4253.eps}"> <tex2html_verbatim_mark></DIV><P>In the above figure, the master can hit all targets in position <TT>B</TT>. However, he never hits all targets in position <TT>A</TT> because any ray from A intersects at most 3 targets.<P>Given the width of the archer line and the target locations, write a program for determining if there exists a position at which the master can hit all targets. You may assume that the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinates of all targets are different. Note that if an arrow passes through an end point of a target, it is considered to hit that target.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>W</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$">10, 000, 000)</SPAN> <tex2html_verbatim_mark>, the width of an archer line. The next line contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$">5, 000)</SPAN> <tex2html_verbatim_mark>, the number of target boards. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains three integers <SPAN CLASS="MATH"><I>D</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le D_{i} \le W, 0 \le L_{i} < R_{i} \le W)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>D</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>W</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>L</I><SUB>i</SUB> &lt; <I>R</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>W</I>)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> represents the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th target, and <SPAN CLASS="MATH"><I>L</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> represent the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinates of the leftmost point and the rightmost point of the target, respectively. Note that <SPAN CLASS="MATH"><I>D</I><SUB>i</SUB> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \neq$"> <I>D</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>i</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4253.png ALT="$ \neq$"> <I>j</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print exactly one line for each test case. Print ``<TT>YES</TT>" if there exists a position on the archer line at which a master of archery can hit all targets, otherwise, ``<TT>NO</TT>".<P>The following shows sample input and output for three test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
15 
4 
10 2 7 
7 5 12 
2 7 12 
4 9 13 
6 
3 
2 1 3 
4 0 2 
5 4 6 
10 
4 
8 2 5 
4 2 5 
6 5 8 
2 5 8
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
NO 
YES
</PRE><P>
______________________________________________________
4254||||||false||||||

<P>
An ``early adopter" Mr. Kim bought one of the latest notebooks which has a speed-controlled processor. The processor is able to operate at variable speed. But the higher the speed, the higher the power consumption is. So, to execute a set of programs, adjusting the speed of the processor dynamically results in energy-efficient schedules. We are concerned in a schedule to minimize the maximum speed of the processor. 

<P>
The processor shall execute a set of programs and each program <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is given having a starting time <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, a deadline <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and work <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. When the processor executes the programs, for each program <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, the work <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> should be done on the processor within the interval <!-- MATH
 $[r_{i} ,d_{i}]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>i</SUB>, <I>d</I><SUB>i</SUB>]</SPAN>
<tex2html_verbatim_mark> to complete <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Also, the processor does not have to execute a program in a contiguous interval, that is, it can interrupt the currently running program and later resume it at the interrupted point. It is assumed that <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> are given positive integers. Recall that the processor can execute the programs at variable speed. If the processor runs the program <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> with work <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> at a constant speed <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>,then it takes <!-- MATH
 $\frac{w_{i}}{s}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="23" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ {\frac{{w_{i}}}{{s}}}$"></SPAN>
<tex2html_verbatim_mark> time to complete <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. We also assume that the available speeds are positive integers, that is, the processor operates only at integer points of speed. The speed is unbounded and the processor may operate at sufficiently large speeds to complete all the programs. The processor should complete all the given programs and the goal is to find a schedule minimizing the maximum of the speeds at which the processor operates. 

<P>
For example, there are five programs <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> with the interval <!-- MATH
 $[r_{i}, d_{i}]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>i</SUB>, <I>d</I><SUB>i</SUB>]</SPAN>
<tex2html_verbatim_mark> and work <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $i = 1,\ldots ,5$
 -->
<SPAN CLASS="MATH"><I>i</I> = 1,..., 5</SPAN>
<tex2html_verbatim_mark> , where <!-- MATH
 $[r_{1}, d_{1}] =[1, 4]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>1</SUB>, <I>d</I><SUB>1</SUB>] = [1, 4]</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $[r_{2} , d_{2}] =[3, 6]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>2</SUB>, <I>d</I><SUB>2</SUB>] = [3, 6]</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $[r_{3}, d_{3}] =[4, 5]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>3</SUB>, <I>d</I><SUB>3</SUB>] = [4, 5]</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $[r_{4}, d_{4}] =[4, 7]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>4</SUB>, <I>d</I><SUB>4</SUB>] = [4, 7]</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $[r_{5}, d_{5}] =[5, 8]$
 -->
<SPAN CLASS="MATH">[<I>r</I><SUB>5</SUB>, <I>d</I><SUB>5</SUB>] = [5, 8]</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>w</I><SUB>1</SUB> = 2</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I><SUB>2</SUB> = 3</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I><SUB>3</SUB> = 2</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I><SUB>4</SUB> = 2</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I><SUB>5</SUB> = 1</SPAN>
<tex2html_verbatim_mark>. Then the Figure 1 represents a schedule which minimizes the maximum speed at which the processor operates. The maximum speed is 2 in this example. 

<P>
<DIV ALIGN="CENTER">
 =6in
<!-- MATH
 $\epsfbox{p4254.eps}$
 -->
<IMG
 WIDTH="925" HEIGHT="385" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="\epsfbox{p4254.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le T \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> is given on the first line of the input. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le n \le 10,000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$">10, 000)</SPAN>
<tex2html_verbatim_mark>, the number of given programs which the processor shall execute. In the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines of each test case, the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line contain three integer numbers <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>w</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, representing the starting time, the deadline, and the work of the program <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, respectively, where <!-- MATH
 $1 \le r_{i} < d_{i} \le 20,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$"><I>r</I><SUB>i</SUB> &lt; <I>d</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$">20, 000</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $1 \le w_{i} \le 1,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$"><I>w</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4254img1.png
 ALT="$ \le$">1, 000</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program is to write to standard output. Print exactly one line for each test case. The line contains the maximum speed of a schedule minimizing the maximum speed at which the processor operates to complete all the given programs.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
5 
1 4 2 
3 6 3 
4 5 2 
4 7 2 
5 8 1 
6 
1 7 25 
4 8 10 
7 10 5 
8 11 5 
10 13 10 
11 13 5 
8 
15 18 10 
20 24 16 
8 15 33 
11 14 14 
1 6 16 
16 19 12 
3 5 12 
22 25 10
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
5 
7
</PRE>

<P>

______________________________________________________
4255||||||false||||||
<P>Given a sequence of integers, <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, we define its <SPAN CLASS="textit">sign matrix S</SPAN> such that, for <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4255img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4255img1.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4255img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I><SUB>ij</SUB> = `` + "</SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB> +...+ <I>a</I><SUB>j</SUB> &gt; 0</SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH"><I>S</I><SUB>ij</SUB> = `` - "</SPAN> <tex2html_verbatim_mark> if <!-- MATH
 $a_{i} + \ldots + a_{j} < 0$
 --><SPAN CLASS="MATH"><I>a</I><SUB>i</SUB> +...+ <I>a</I><SUB>j</SUB> &lt; 0</SPAN> <tex2html_verbatim_mark>; and <SPAN CLASS="MATH"><I>S</I><SUB>ij</SUB> = ``0"</SPAN> <tex2html_verbatim_mark> otherwise.<P>For example, if <SPAN CLASS="MATH">(<I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>, <I>a</I><SUB>4</SUB>) = (- 1, 5, - 4, 2)</SPAN> <tex2html_verbatim_mark>, then its sign matrix <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> is a <SPAN CLASS="MATH">4&#215;4</SPAN> <tex2html_verbatim_mark> matrix:<P><P><BR><TABLE COLS=5><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>-</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD></TD><TD></TD><TD></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>+</TD></TR></TABLE><P><P><BR>We say that the sequence (-1, 5, -4, 2) <SPAN CLASS="textit">generates</SPAN> the sign matrix. A sign matrix is <SPAN CLASS="textit">valid</SPAN> if it can be generated by a sequence of integers.<P>Given a sequence of integers, it is easy to compute its sign matrix. This problem is about the opposite direction: Given a valid sign matrix, find a sequence of integers that generates the sign matrix. <SPAN CLASS="textit">Note that two or more different sequences of integers can generate the same sign matrix.</SPAN> For example, the sequence (-2, 5, -3, 1) generates the same sign matrix as the sequence (-1,5, -4,2).<P>Write a program that, given a <SPAN CLASS="textit">valid</SPAN> sign matrix, can find a sequence of integers that generates the sign matrix. You may assume that every integer in a sequence is between -10 and 10, both inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case consists of two lines. The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4255img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4255img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the length of a sequence of integers. The second line contains a string of <SPAN CLASS="MATH"><I>n</I>(<I>n</I> + 1)/2</SPAN> <tex2html_verbatim_mark> characters such that the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> characters correspond to the first row of the sign matrix, the next <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> characters to the second row, <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>, and the last character to the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-th row.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. For each test case, output exactly one line containing a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers which generates the sign matrix. If more than one sequence generates the sign matrix, you may output any one of them. Every integer in the sequence must be between -10 and 10, both inclusive.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 
-+0++++--+ 
2 
+++ 
5 
++0+-+-+--+-+--
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-2 5 -3 1 
3 4 
1 2 -3 4 -5
</PRE><P>
______________________________________________________
4256||||||false||||||
<P>Traveling salesmen of <SPAN CLASS="textit"><SPAN CLASS="textbf">nhn</SPAN></SPAN>. (the prestigious Korean internet company) report their current location to the company on a regular basis. They also have to report their new location to the company if they are moving to another location. The company keep each salesman's working path on a map of his working area and uses this path information for the planning of the next work of the salesman. The map of a salesman's working area is represented as a connected and undirected graph, where vertices represent the possible locations of the salesman an edges correspond to the possible movements between locations. Therefore the salesman's working path can be denoted by a sequence of vertices in the graph. Since each salesman reports his position regularly an he can stay at some place for a very long time, the same vertices of the graph can appear consecutively in his working path. Let a salesman's working path be <SPAN CLASS="textit">correct</SPAN> if two consecutive vertices correspond either the same vertex or two adjacent vertices in the graph.<P>For example on the following graph representing the working area of a salesman,<P><DIV ALIGN="CENTER"><IMG WIDTH="334" HEIGHT="344" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="\epsfbox{p4256.eps}"> <tex2html_verbatim_mark></DIV><P>a reported working path [1 2 2 6 5 5 5 7 4] is a correct path. But a reported working path [1 2 2 7 5 5 5 7 4] is not a correct path since there is no edge in the graph between vertices 2 a 7. If we assume that the salesman reports his location every time when he has to report his location (but possibly incorrectly), then the <SPAN CLASS="textit">correct</SPAN> path could be [1 2 2 <SPAN CLASS="textbf"><SPAN ID="txt55">4</SPAN></SPAN> 5 5 5 7 4], [1 2 <SPAN CLASS="textbf"><SPAN ID="txt56">4</SPAN></SPAN> 7 5 5 5 7 4], or [1 2 2 <SPAN CLASS="textbf"><SPAN ID="txt57">6</SPAN></SPAN> 5 5 5 7 4].<P>The length of a working path is the number of vertices in the path. We define the <SPAN CLASS="textit">distance</SPAN> between two paths <SPAN CLASS="MATH"><I>A</I> = <I>a</I><SUB>1</SUB><I>a</I><SUB>2</SUB>...<I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I> = <I>b</I><SUB>1</SUB><I>b</I><SUB>2</SUB>...<I>b</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> of the same length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> as<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>dist</I>(<I>A</I>, <I>B</I>) = <IMG WIDTH="28" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$\displaystyle \sum^{{n}}_{{i=1}}$"><I>d</I> (<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</DIV><P><tex2html_verbatim_mark></P>where<P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>d</I> (<I>a</I>, <I>b</I>) = <IMG WIDTH="19" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$\displaystyle \left\{\vphantom{ \begin{array}{cc} 0 &amp; \mbox{if } a=b \\  1 &amp; \mbox{otherwise} \end{array} }\right.$"><IMG WIDTH="117" HEIGHT="62" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$\displaystyle \begin{array}{cc} 0 &amp; \mbox{if } a=b \\  1 &amp; \mbox{otherwise} \end{array}$"></DIV><P><tex2html_verbatim_mark></P><P>Given a graph representing the working area of a salesman and a working path (possible not a correct path), <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, of a salesman, write a program to compute a correct working path, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, of the same length where the distance <SPAN CLASS="MATH"><I>dist</I>(<I>A</I>, <I>B</I>)</SPAN> <tex2html_verbatim_mark> is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH">(<I>T</I>)</SPAN> <tex2html_verbatim_mark> is given in the first line of the input. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$"><I>n</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$">100, 2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$"><I>n</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$">4, 950)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is the number of vertices of the graph representing the working map of a salesman and <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> is the number of edges in the graph. The input graph is a connected graph. Each vertex of the graph is numbered from 1 to <SPAN CLASS="MATH"><I>n</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>. In the following <SPAN CLASS="MATH"><I>n</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> lines, each line contains a pair of vertices which represent an edge of the graph. The last line of each test case contains information on a working path of the salesman. The first integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4256.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> in the line is the length of the path and the following n integers represent the sequence of vertices in the working path.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print one line for each test case. The line should contain the minimum distance of the input path to a correct path of the same length.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
7 9 
1 2 
2 3 
2 4 
2 6 
3 4 
4 5 
5 6 
7 4 
7 5 
9 1 2 2 7 5 5 5 7 4 
7 9 
1 2 
2 3 
2 4 
2 6 
3 4 
4 5 
5 6 
7 4 
7 5 
9 1 2 2 6 5 5 5 7 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
0
</PRE><P>
______________________________________________________
4257||||||false||||||
<P>An astrophysicist makes observations of a spiral galaxy known as the Andromeda Galaxy using the Hubble space telescope. In particular, he is interested in the motion of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> stars in the galaxy. Each star moves with a constant velocity along a straight line in the picture of the Hubble space telescope. Among the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> stars there is a special star named <SPAN CLASS="textit">alpha</SPAN>. He wants to know when the maximum distance from <SPAN CLASS="textit">alpha</SPAN> to the remaining <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> stars is minimized.<P>The picture screen of the Hubble space telescope can be represented by a 2-D Cartesian coordinate system and let <SPAN CLASS="MATH"><I>S</I> = {<I>s</I><SUB>0</SUB>, <I>s</I><SUB>1</SUB>,..., <I>s</I><SUB>n-1</SUB>}</SPAN> <tex2html_verbatim_mark> be a set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> stars in the plane. Assume that the <SPAN CLASS="MATH"><I>s</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> is the star <SPAN CLASS="textit">alpha</SPAN>. A star <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> moves along the trajectory <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> + <I>tv</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> over time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB> = (<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is the initial position of <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> in the 2-D coordinate system and <SPAN CLASS="MATH"><I>v</I><SUB>i</SUB> = (<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is the velocity vector of <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. We assume that there is no actual collision of two stars, i.e. the two stars pass through each other when they meet a point in 2-D space. Given a set of stars and their velocity, compute the time when the maximum distance from <SPAN CLASS="textit">alpha</SPAN> to the remaining stars is minimized within <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> time units. If there is more than one such time, then output the earliest time.<P>Following figure 1 shows an example with 4 stars. The arrow of a star indicates its velocity vector. In this example, when the time is 3, the maximum distance from <SPAN CLASS="textit">alpha</SPAN> to the remaining 3 stars is minimized.<P><DIV ALIGN="CENTER">=6in <IMG WIDTH="870" HEIGHT="557" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="\epsfbox{p4257.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$">50, 000)</SPAN> <tex2html_verbatim_mark>, the number of stars of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains four integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>; <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is the position of a star <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> at time zero and <SPAN CLASS="MATH">(<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is the velocity vector of the star <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 200, 000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$">200, 000, -500<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$"><I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4257.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>. Two or more stars of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> may have the same coordinates at time zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. Print the time when the maximum distance is minimized from <SPAN CLASS="MATH"><I>s</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> (<SPAN CLASS="textit">alpha</SPAN>) to the remaining <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> stars <SPAN CLASS="MATH">{<I>s</I><SUB>1</SUB>, <I>s</I><SUB>2</SUB>,..., <I>s</I><SUB>n-1</SUB>}</SPAN> <tex2html_verbatim_mark> within <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> time units, rounded to 4 fractional digits.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
4 
6 12 0 -2 
1 8 3 0 
2 1 0 1 
7 4 -1 1 
2 
1000 1000 -1 0 
-1000 -1000 1 0 
5 
0 0 0 0 
-20000 0 10 0 
19990 0 -10 0 
0 19900 0 -10 
0 -19999 0 10 
8 
-621 -213 3 1 
-875 782 1 -4 
584 700 -5 -2 
-12 -628 3 2 
-771 -460 1 3 
676 57 -1 -2 
420 -864 -2 4 
190 -950 -4 5 
2 
-200000 0 2 0 
200000 0 -2 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3.0000 
1000.0000 
1995.0000 
196.4510 
100000.0000
</PRE><P>
______________________________________________________
4258||||||false||||||
<P>You, a promising metal-artist, try to make a metalwork, a piece of steel. You first mark <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points on a big steel board, and cut a polygon connecting those <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points from the board. For this cutting, you melt the board along the boundary of the polygon with two lasers hanging down from a long bar over the board as shown in Figure 1. The bar is vertical, i.e., parallel to the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis, and moves continuously (without stopping) only in the positive <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-direction, i.e., from the left side to the right side of the board. The lasers can move only along the bar and can never meet on the bar. Furthermore, the bar moves monotonously from left to right, it can never move to a position left of its current position. These conditions imply that the polygons you can obtain must be <SPAN CLASS="textit">simple</SPAN> and <SPAN CLASS="textit">monotone</SPAN>. A polygon <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit">simple</SPAN> if any two edges of <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> do not intersect except for the endpoints of adjacent edges, and there are no holes inside <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>. A polygon <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit">monotone</SPAN> if any intersection of <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> with a vertical line is either a point or a line segment. To choose a proper shape for your metalwork, you want to know how many different simple and monotone polygons of the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points exist.<P><DIV ALIGN="CENTER"><IMG WIDTH="696" HEIGHT="556" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="\epsfbox{p4258a.eps}"> <tex2html_verbatim_mark></DIV><P>For example, see Figure 2, where seven points are given as an input. There are four different simple and monotone polygons for this input. Your task is to compute the number of different simple and monotone polygons of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> given points.<P><DIV ALIGN="CENTER"><IMG WIDTH="908" HEIGHT="428" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="\epsfbox{p4258b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to read the input from standard input. The input consists of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases. The number of test cases <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is given in the first line of the input. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark>, the number of points of <SPAN CLASS="MATH"><I>S</I> = {<I>s</I><SUB>0</SUB>, <I>s</I><SUB>1</SUB>,..., <I>s</I><SUB>n-1</SUB>}</SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains two nonnegative integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4258a.png ALT="$ \le$">200, 000)</SPAN> <tex2html_verbatim_mark>, where point <SPAN CLASS="MATH"><I>s</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> has coordinates <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>. No two points of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> have the same <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program is to write to standard output. For each test case, print the number of different simple and monotone polygons which connect <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> points of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 
0 0 
6 3 
7 1 
4 1 
7 
7 5 
2 6 
1 1 
3 5 
4 3 
6 3 
5 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
4

______________________________________________________
4259||||||false||||||
<P><P><BR>Somewhere in the world, there are two tribes separated by mountains. The two tribes are named Kulolo and Gulolo, respectively, where Kulolo is at a higher altitude and Gulolo is at a lower altitude. Due to the limitation of geography, Gulolo has fewer resources than Kulolo. In order to transport resources from Kulolo to Gulolo efficiently, several tunnels were built inside the mountains between these two tribes. There are also some rest stations built for people to take a break during the transportation in the tunnels. More specifically, each terminal of a tunnel is either Kulolo, Gulolo, or a rest station.<P>The structure of those tunnels is not stable. A <SPAN CLASS="textit">dangerous degree</SPAN> has been estimated for each tunnel, due to its stability, in advance. A tunnel with a higher dangerous degree is considered to be more dangerous; that is, it is more probably to collapse. Kinglolo, the chief of Kulolo, would like to select some paths through the tunnels to Gulolo with little risk. In Kinglolo's opinion, the dangerous degree of a path is equal to the maximum dangerous degree of the tunnels in the path; and the dangerous degree of a set of paths is equal to the maximum dangerous degree of the paths in it. For example, consider Figure 1. The dangerous degrees of <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> are, respectively, 3, 5, and 6. And, the dangerous degree of <SPAN CLASS="MATH">{<I>P</I><SUB>2</SUB>, <I>P</I><SUB>3</SUB>}</SPAN> <tex2html_verbatim_mark> is 6.<P>Since all tunnels are narrow, a limited quantity of resources can be transported along a path in one day. Therefore, every day, depending on the amount of resources needed to be transported, a different number, say <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, of paths is required. Moreover, to avoid congestion, these <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> selected paths cannot pass any rest station in common. For example, in Figure 1, <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark><P><DIV ALIGN="CENTER"><IMG WIDTH="690" HEIGHT="401" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="\epsfbox{p4259.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: An example.</DIV>can be selected at the same time; however, <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> cannot be selected at the same time, since they both pass <SPAN CLASS="MATH"><I>r</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>. Kulolo has a higher altitude than all rest stations while Gulolo has a lower altitude than all rest stations. Kinglolo is a thoughtful chief. It is ensured that the altitudes of the rest stations on each selected path are non-increasing, so that the path is more suitable for transportation. For example, in Figure 1, the path (Kulolo, <SPAN CLASS="MATH"><I>r</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, Gulolo) will never be selected, since <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is higher than <SPAN CLASS="MATH"><I>r</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark> .<P>People in Kulolo believe that Kinglolo is the most brilliant man in the world, since he always selects a set of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> paths that is as little dangerous as possible (i.e., the maximum dangerous degree of the selected paths is minimized). Now, given the data of the constructed tunnels, you are asked to find <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> paths that Kinglolo may select. In summary, the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> selected paths, if exist, should satisfy the following:<P><OL><LI>all paths are from Kulolo to Gulolo, </LI><LI>no two paths pass the same rest station, </LI><LI>the altitudes of the rest stations on each path are non-increasing, and </LI><LI>the maximum dangerous degree of the paths is minimized. </LI></OL><P><P><BR>For simplicity, only the maximum dangerous degree of the selected paths should be reported.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI>The number of rest stations, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>: <!-- MATH
 $0 < n \le 200$
 --><SPAN CLASS="MATH">0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">200</SPAN> <tex2html_verbatim_mark>. </LI><LI>The number of tunnels, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>t</I> &gt; 0</SPAN> <tex2html_verbatim_mark>. </LI><LI>The dangerous degree of a tunnel, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>. </LI><LI>The number of paths which should be selected, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of each case contains a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n \le 200)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark> which indicates that there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rest stations <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,..., <I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. For ease of description, Kulolo and Gulolo are denoted by <SPAN CLASS="MATH"><I>r</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>n+1</SUB></SPAN> <tex2html_verbatim_mark> , respectively. We assume that <SPAN CLASS="MATH"><I>r</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is higher than <SPAN CLASS="MATH"><I>r</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> for any <!-- MATH
 $0 \le i < j \le n + 1$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>i</I> &lt; <I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark>. The second line of each case contains a positive integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I> &gt; 0)</SPAN> <tex2html_verbatim_mark> that specifies the number of tunnels. Each of the following <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> lines contains three integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>n</I> + 1, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>n</I> + 1, <I>p</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \neq$"> <I>q</I>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark> separated by white space, which indicate there is a tunnel with dangerous degree <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> connecting <SPAN CLASS="MATH"><I>r</I><SUB>p</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>q</SUB></SPAN> <tex2html_verbatim_mark>. Then, a line containing a positive integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4259.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> is provided, which is the number of paths that should be selected. You can assume that there is at most one tunnel between any two rest stations. The last test case is followed by a line containing a zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the maximum dangerous degree of the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> paths that Kinglolo may select. If the solution does not exist, print ``<TT>no solution</TT>". Use the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
4 
0 1 3 
1 3 12 
2 0 10
2 3 5 
1 
1 
2 
0 1 5
1 2 6 
2 
3 
2 
0 1 5
3 4 7
1 
3 
6 
0 1 8
0 2 12
0 3 15
3 1 9 
3 4 8 
2 4 12 
2 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10 
Case 2: no solution 
Case 3: no solution 
Case 4: 12
</PRE><P>
______________________________________________________
4260||||||false||||||
<P><P><BR>A popular card game called ``fortune" is getting popular in country X. Fig. 1 shows one of the cards. In each card, a positive integer number (20 in the figure) is listed as the address of the card. A symbol is drawn beside the address. There are five kinds of symbols, which are listed below the card. For convenience, let each symbol be represented by an English letter from `<TT>A</TT>'-`<TT>E</TT>'. The bottom of a card contains another number called ``next fortune number."<P><DIV ALIGN="CENTER"><IMG WIDTH="321" HEIGHT="410" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4260.png ALT="\epsfbox{p4260.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: A sample fortune card and symbols.</DIV><P>In a set of fortune cards, many cards can have same address; that is, address 20 is not limited to appear only in one card. However, there will be no cards that are identical, i.e., no two cards with same address, symbol, and next fortune number.<P>The fortune card game is played as follows. A player starts with cards that have address 1. The goal of the game is trying to complete a ``spell" that is composed by the symbols. For example, let a spell be ``<TT>BADDAD</TT>". In the first move, the player will look for cards that have address 1 with a star symbol (which matches `<TT>B</TT>' in the spell). The next fortune numbers of these cards are the new addresses for the next move. The player can select one card to advance to a new address x. The selected card is then put back to the cards for next move but the fortune number is written down.<P>Let the example be continued. In the next move, the player needs to look for the cards that have new address x with the cross symbol (which matches the second `<TT>A</TT>' in the spell). Again, the player selects one card to advance to another new address. This procedure continues until the spell ``BADDAD" is completed. Once the player completes a spell, he wins a score by adding all the next fortune numbers of the selected card, which have been written down.<P>Given a spell and a set of fortune cards, please output the maximum score that can be played in this card game.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><P><BR><OL><LI><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> - the number of test cases, <SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4260.png ALT="$ \le$">10</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> - the number of cards, <SPAN CLASS="MATH"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4260.png ALT="$ \le$">800</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> - the length of a spell, <SPAN CLASS="MATH"><I>L</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4260.png ALT="$ \le$">150</SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Test data begins with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> which is the number of test cases. Each test case begins with an integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, which is the number of cards. Following the number <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> lines of card information. Each card is represented by (Address Symbol NextF ortuneNumber). The address and next fortune number are between 1 and 800. The symbols are capital letters from `<TT>A</TT>' to `<TT>E</TT>'. The last line of a test case is a spell. The spell is a string composed by capital letters from `<TT>A</TT>' to `<TT>E</TT>'. The length of the spell (<SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>) is less than 150.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please output the maximum score that can be collected for each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
7 
1 A 2 
1 A 3 
2 A 3 
2 B 4 
2 B 5 
3 A 3 
3 B 4 
AAAAB 
6 
1 A 2 
1 B 2 
1 A 3 
1 B 3 
2 A 3 
2 B 3 
AB
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
16 
5
</PRE><P>
______________________________________________________
4261||||||false||||||
<P><P><BR>You are going on a long trip. Initially, you stay at hotel 0. Along the way, there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> hotels. The only place you are allowed to stop are at these hotels. The distance from hotel <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> <tex2html_verbatim_mark> to hotel <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. You can choose which of the hotels you stop at. You must stop at the final hotel, which is your destination.<P>You would ideally like to travel 100 kilometers a day. However, this may not be possible. It depends on the spacing of the hotels. There is no limit on the distance you traveled in a day. If you travel <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> kilometers during a day, the <SPAN CLASS="textit">penalty</SPAN> for that day is <SPAN CLASS="MATH">(<I>x</I> - 100)<SUP>2</SUP></SPAN> <tex2html_verbatim_mark> . You want to plan your trip so as to minimize the total penalty -- that is, the sum, over all travel days, of the daily penalty. Write a program to determine the optimal sequence of hotels at which to stop.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains a set of test data. Each test data consists of two parts. The first part is the number of hotels <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. The second part is a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>,..., <I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>. Each <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the distance between hotel <SPAN CLASS="MATH"><I>i</I> - 1</SPAN> <tex2html_verbatim_mark> and hotel <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. Assume that <!-- MATH
 $0 < a_{i} < 200$
 --><SPAN CLASS="MATH">0 &lt; <I>a</I><SUB>i</SUB> &lt; 200</SPAN> <tex2html_verbatim_mark>. They may be written in many lines. Assume that <SPAN CLASS="MATH"><I>n</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark> signals the end of the test data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The first line of the output is the minimum penalty <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. The second line of the output is the indexes of the hotels to stop at. If the solution is not unique, print the one with fewer stops. If there are more then one solutions with the same number of stops, print the one which is the lexicographically smallest one. For example <!-- MATH
 $(1 \ 2 \ 4) < (1 \ 3 \ 4)$
 --><SPAN CLASS="MATH">(1&nbsp;2&nbsp;4) &lt; (1&nbsp;3&nbsp;4)</SPAN> <tex2html_verbatim_mark>. Print 30 stops in each line, except the last line which may contain less stops. Print a blank line between datasets.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 
11 48 28 87 35 86 37 83 16 34 
20 
81 49 50 87 107 20 40 84 60 47 29 30 35 47 108 41 85 106 77 106 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
p=2271 
 0 3 5 7 10 

p=4617 
 0 1 3 4 6 8 11 14 15 17 18 19 20
</PRE><P>
______________________________________________________
4262||||||false||||||
<P><P><BR>There is a road network comprised by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> roads and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cities. For convenience, we use <SPAN CLASS="MATH">{1, 2,..., <I>N</I>}</SPAN> <tex2html_verbatim_mark> to denote the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cities. Each road between two cities <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \le$"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>i</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \neq$"> <I>j</I></SPAN> <tex2html_verbatim_mark>, has two types: One type is <SPAN CLASS="textit">bidirectional</SPAN>, which allows a citizen to drive a car from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> (denoted by <SPAN CLASS="MATH"><I>i</I><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>j</I></SPAN> <tex2html_verbatim_mark>) and from <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> (denoted by <SPAN CLASS="MATH"><I>j</I><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>i</I></SPAN> <tex2html_verbatim_mark>). The other type is <SPAN CLASS="textit">unidirectional</SPAN>, which allows a citizen to drive a car following exactly one direction, either from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> or from <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>.<P>We say that City <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is <SPAN CLASS="textit">reachable from</SPAN> City <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> if one can drive a car from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, visiting a sequence of cities <SPAN CLASS="MATH"><I>c</I><SUB>1</SUB>, <I>c</I><SUB>2</SUB>,..., <I>c</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> for <SPAN CLASS="MATH"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \ge$"> 0</SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>i</I><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>c</I><SUB>1</SUB><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>c</I><SUB>2</SUB><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$">...<IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>c</I><SUB>k</SUB><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \leadsto$"><I>j</I></SPAN> <tex2html_verbatim_mark>. (Every city is always reachable from itself.) A <SPAN CLASS="textit">region</SPAN> is a <SPAN CLASS="textit">maximal</SPAN> set of cities so that the following <SPAN CLASS="textit">mutually reachable property</SPAN> holds: for two arbitrary cities <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is reachable from <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is also reachable from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The adjective ``maximal" means that if we include any other city in the given region, the mutually reachable property cannot be retained. Given a road network, your task is to write a computer program to compute the number of regions in the road network.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI>We use <SPAN CLASS="MATH">{1, 2,..., <I>N</I>}</SPAN> <tex2html_verbatim_mark> to denote the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> cities. </LI><LI><SPAN CLASS="MATH"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \le$">2000</SPAN> <tex2html_verbatim_mark> is a non-negative integer </LI><LI><SPAN CLASS="MATH"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4262img1.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark> is a positive integer. </LI><LI>If a road between <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is bidirectional, then we use two order pairs <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>j</I>, <I>i</I>)</SPAN> <tex2html_verbatim_mark> to represent it. Otherwise, if a road between <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> is unidirectional from <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> (respectively, <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>), we use (<SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>) (respectively, (<SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>)) to represent it. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a number of test cases. The first line of the input file contains an integer indicating the number of test cases to follow. Each test case consists of a road network, which has the following format: the first line of each test case contains two numbers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, separated by a single space. The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contain the description of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> roads such that one line contains two cities representing an order pair <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>. Each line is represented by two positive numbers separated by a single space; the first number representing the former element in the order pair and the second number representing the latter element in the order pair. A `<TT>0</TT>' at the <SPAN CLASS="MATH">(<I>M</I> + 2)</SPAN> <tex2html_verbatim_mark>-th line of each test case (except for the last test case) indicates the end of this test case.<P>The next test case starts after the previous ending symbol `<TT>0</TT>'. Finally, a `<TT>-1</TT>' signals the end of the whole inputs.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains one line for each test case. Each line contains an integer, which is the number of the regions in the given road network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 2
1 2
1 3
0 
3 3
1 2
2 3
3 1
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
1
</PRE><P>
______________________________________________________
4263||||||false||||||
<P><P><BR><SPAN CLASS="textit">Accelerated Computer Maintenance</SPAN> (ACM) is a company that aims at fixing customers' home computers as soon as possible. While other companies ask the customer to bring her/his computer to the maintenance station by herself/himself, ACM implements a rapid pickup system. After receiving the service request from the customer during work hours, ACM immediately sends out a service representative from a branch office. The representative would then go to the customer's house, pick up the computer, and drop the computer at one of the maintenance stations. ACM's customers are very satisfied with such a rapid service, and thus ACM's revenue keeps increasing.<P>Seeing the success story of ACM, many other companies are starting to implement their own rapid pickup systems as well, and ACM faces a strong competition from those companies. Thus, ACM decides to improve its rapid pickup system by including early-morning pickup routes. That is, after gathering the service requests from customers during the night, ACM asks some of its service representatives to complete the pickup tasks on their ways to work. To share the loads, each representative only needs to pick up at most one computer. If a representative is selected to stop by a customer's house for the morning pickup task, she/he would start from her/his own house, and orderly go to the customer's house, one of the maintenance stations, and her/his office. Otherwise, she/he directly goes to the office.<P>To implement such a system, ACM models the city as a network. The representatives' houses, the customers' houses, the maintenance stations, and the branch offices are all parts of the nodes of the network. When two nodes <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are connected by a road, ACM computes the time needed to travel from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> in minutes. ACM, as its name suggests, is a company that highly values efficiency. Thus, it would like to implement a system that directs its representatives to arrive at the office as early as possible. Assume that all representatives leave their houses on <TT>08:00</TT> in the morning. Could you compute the minimum average time that all the representatives would arrive at the office while finishing all the morning pickup tasks?<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI>The number of nodes <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is no more than 512; the nodes are labeled by <SPAN CLASS="MATH">{1, 2,..., <I>V</I>}</SPAN> <tex2html_verbatim_mark>; the number of edges <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> is no more than <SPAN CLASS="MATH"><IMG WIDTH="58" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4263img1.png ALT="$ {\frac{{V(V-1)}}{{2}}}$"></SPAN> <tex2html_verbatim_mark>. </LI><LI>The number of representatives <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, the number of customers <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and the number of maintanance stations <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> are all positive integers. In addition, <SPAN CLASS="MATH"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4263img1.png ALT="$ \le$"><I>R</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>The representatives' houses, the customers' houses, the maintenance stations, and the offices are all different nodes within the network. </LI><LI>There is at least one route (linked roads) that connects any of the two maintenance stations (so they can share tools). </LI><LI>For each customer's house, there is at least one route that connects it to one of the representative's houses. </LI><LI>For each customer's house, there is at least one route that connects it to one of the maintenance stations. </LI><LI>For each representative's house, there is at least one route that connects it to her/his office. </LI><LI>Every road is bi-directional. That is, a road between <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> can be used to travel both from node <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to node <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and from node <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> to node <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> using the same number of minutes <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> , which is a positive integer and is no more than 16. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer indicating the number of test cases to follow. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>V</I>&nbsp;<I>E</I></SPAN> <tex2html_verbatim_mark> separated by a space. Each of the following <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> lines would contain three integers <SPAN CLASS="MATH"><I>A</I>&nbsp;<I>B</I>&nbsp;<I>T</I></SPAN> <tex2html_verbatim_mark> separated by spaces, which indicates that nodes <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are connected by a road with a <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>-minutes traveling time.<P>After those <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark> lines, there would be a line with a single integer <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>r</I>&nbsp;<I>d</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is the node of the representative's house, and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is the node of the representative's office.<P>After those <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines, there would be a line with a single integer <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>. The next line contains <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, each representing the node of a customer's house. In the next line, there is a single integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> indicating the number of maintenance stations. Then, the final line contains <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, each representing the node of a maintenance station.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the minimum average time that all the representatives can arrive at the offices while finishing all the pickup tasks. The time is represented by the hour, a colon, and the minute. The hour part would be either <TT>08</TT>, <TT>09</TT>, <TT>10</TT>, or <TT>11</TT>; the minute part is a zero-padded two-digit integer within {<TT>00, 01, <SPAN CLASS="MATH"><SUP>... </SUP></SPAN><tex2html_verbatim_mark>, 58, 59</TT>}. The average time would be rounded up to the closest integer minute above. For example, if the average number of minutes is 25.03, it is rounded up to 26.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
8 10 
1 2 1
2 3 1
3 5 1
4 2 6
4 5 3
4 7 7
5 7 4
5 6 2
7 8 5
6 3 2
2 
6 1
7 8
1 
4 
2 
2 3 
8 10 
1 2 1
2 3 1
3 5 1
4 2 6
4 5 3
4 7 7
5 7 4
5 6 2
7 8 5
6 3 2
2 
6 1 
7 8 
2 
4 3
1 
2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
08:08 
08:14
</PRE><P>
______________________________________________________
4264||||||false||||||
<P><P><BR>Astronomers have been looking for living beings in the outer planets. Recently the Hobble telescope has picked up binary (black and white) images from the Zkrets planet (1 light-years away). Each image contains exactly one symbol. Together the sequence of symbols (images) represents a message for aliens from other planets. A team of deciphering experts has found some decoding scheme that assigns an English alphabet to each symbol. The decoding process would be easy if each received image were in perfect condition. Unfortunately, due to long distance transmission, the images received usually contain some noise, meaning that some white pixels are turned into black pixels and vise versa. Furthermore, due to self-rotation of the Hobble telescope, the images, when captured, might be rotated 0, 90, 180 or 270 degrees. To expedite the message decoding process, please write a program to decode the received sequence of images automatically.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI>The number of images received is n, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4264img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4264img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. The size of the image is always scaled to <SPAN CLASS="MATH">10&#215;10</SPAN> <tex2html_verbatim_mark>. Within the image, `<TT>1</TT>' represents a black pixel (part of the symbol) and `<TT>0</TT>' represents a white pixel (not part of the symbol). </LI><LI>Each received image may contain at most 20% noise. This means that at most 20 pixels may have their gray levels changed (from black to white or from white to black) during transmission. Each image is rotated 0, 90, 180 or 270 degrees in clockwise direction. </LI><LI>The number of matching symbols and English Alphabets is <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, where  <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4264img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4264img1.png ALT="$ \le$">52</SPAN> <tex2html_verbatim_mark>. The matching English Alphabets can be either upper-case or lower-case letters. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are two parts of input, one follows the other. For the first part, it contains the matching English alphabets and image symbols. Thus, the first line contains an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, the number of matching alphabets and symbols. The next 11<SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines define the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> sets of matching alphabets and symbols. The first line of each set contains a single unique English letter. The next 10 lines give the matching symbol in a perfect (no noise, no rotation) <SPAN CLASS="MATH">10&#215;10</SPAN> <tex2html_verbatim_mark> image of <TT>0</TT>'s and <TT>1</TT>'s. For the second part, it contains a sequence of received images. The first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the number of <SPAN CLASS="MATH">10&#215;10</SPAN> <tex2html_verbatim_mark> images received. The next 10<SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines present the <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> images received. Every 10 lines define one image. Each line contains exactly 10 consecutive <TT>0</TT>'s and <TT>1</TT>'s.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please print out the corresponding English letters of the received input images in sequence, all on one line. If more than one match is possible for a given input image, output the matching one with the least number of noise pixels. If there is still a tie, output the one that appears first in the input sequence of English alphabets.<P><P><P><BR><SPAN CLASS="textbf">Explanations for the Sample:</SPAN><P><UL><LI>There are 2 deciphered matching codes.<P>The first is coded as letter <TT>a</TT>. The corresponding image is giving in 10 rows of consecutive <TT>0</TT>'s and <TT>1</TT>'s.<P>The second image is coded as letter <TT>X</TT>. The corresponding image is giving in 10 rows of consecutive <TT>0</TT>'s and <TT>1</TT>'s.<P></LI><LI>There are 3 received images waiting to be decoded.<P>The first received image has 10 rows of consecutive <TT>0</TT>'s and <TT>1</TT>'s. It matches with the corresponding image of the coded symbol '<TT>X</TT>' perfectly without any noise. The image is either not rotated or perhaps rotated by 180 degrees.<P>The second image has also 10 rows of consecutive <TT>0</TT>'s and <TT>1</TT>'s. It also matches with the corresponding image of the coded symbol '<TT>X</TT>' perfectly without any noise. However, the image is either rotated by 90 or 270 degrees.<P>The third image has also 10 rows of consecutive <TT>0</TT>'s and <TT>1</TT>'s. It contains 12 noise pixels. The image is also rotated by 90 degrees. It matches with the corresponding image of the coded symbol '<TT>a</TT>'. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
a 
0000000000 
0111111110 
0111110011 
0111111100 
0000110000 
0000110000 
0001111100 
0011111110 
0000000000 
0000000000 
X 
0110000110 
0110000110 
0011001100 
0011001100 
0001111000 
0001111000 
0011001100 
0011001100 
0110000110 
0110000110 
3 
0110000110 
0110000110 
0011001100 
0011001100 
0001111000 
0001111000 
0011001100 
0011001100 
0110000110 
0110000110 
0000000000 
1100000011 
1111001111 
0011111100 
0000110000 
0000110000 
0011111100 
1111001111 
1100000011 
0000000000 
0000000000 
0000001110 
1110001110 
0000110001 
0011111110 
0011111110 
0011001010 
0011001010 
0010000110 
0000000010
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
XXa
</PRE><P>
______________________________________________________
4265||||||false||||||
<P><P><BR>There is an old legend that there is a number of lost ships lay on the seafloor of the Taiwan Straight. Among them, the ship <SPAN CLASS="textit">General II</SPAN> is one of the most famous ships, and people believe that <SPAN CLASS="textit">General II</SPAN> was sunk with a tremendous amount of treasures. In the past few decades, tens of groups have tried to raise the treasures from <SPAN CLASS="textit">General II</SPAN>, but all of the attempts are failed. The reason is simply because those treasures are too fragile to tolerate any impacts in the raising, and unfortunately there are many obstacles scattered inside the ship such that raising a treasure from <SPAN CLASS="textit">General II</SPAN> becomes an extremely challenging task.<P>Being a senior underwater-raising analyst of the International Organization of Underwater Archaeology (IOUA), you are now assigned to raise an important treasure from <SPAN CLASS="textit">General II</SPAN>. Before that, the Underwater Scene Investigation Department (USID) of IOUA will investigate the detail information (e.g., the locations, sizes, and shapes of the obstacles) of <SPAN CLASS="textit">General II</SPAN>, as well as the information (e.g., location, size, and shape) of the treasure. Then, they will give you a ship map of <SPAN CLASS="textit">General II</SPAN> that can help you raise the treasure. Figure 1 shows an example of the ship map.<P>In the ship map, the obstacles are represented by <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> non-overlapping rectangles that are filled with the grid pattern, and the treasure is composed of <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> connected rectangles that are colored in black. A destination location for the treasure is also given on the map (filled with the white color). The destination location is an exit of <SPAN CLASS="textit">General II</SPAN>, and it is very important to move the treasure from its initial location to the destination location without conflicting with any obstacles. Once a treasure is moved to the destination location, it can be raised easily to the sea level through the exit then.<P><DIV ALIGN="CENTER"><IMG WIDTH="845" HEIGHT="265" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="\epsfbox{p4265.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: The sample ship map. Figure 2: The sample solution.</DIV><P>Note that, the <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> treasure rectangles must be moved altogether without rotation and/or flipping; moreover, the treasure must be moved only in one of the four directions: upward, downward, leftward, and rightward. The cost of the movement in each direction is:<P><OL><LI>The cost for moving the treasure upward is $10 per meter. </LI><LI>The cost for moving the treasure downward is $2 per meter. </LI><LI>The cost for moving the treasure leftward is $5 per meter. </LI><LI>The cost for moving the treasure rightward is $5 per meter. </LI></OL><P><P><BR>For simplicity, in this problem, we only consider a 2D map that uses the rectangular coordinate system (one meter per unit in both <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> axis), and the origin of the rectangular coordinate system is on the left-bottom corner of the map. In addition, each obstacle/treasure rectangle is described by its left-bottom vertex and its right-top vertex; and the destination of the treasure is given by the position of the left-bottom vertex of the first treasure rectangle. For instance in Figure 1, there are two obstacles: (2,4)-(6,7) and (8,1)-(11,5), and the treasure is a combination of the two rectangles: (1,1)(3,2) and (2,0)-(3,1). The destination is indicated by (10,6), which is the destined position of the left-bottom vertex of the first treasure rectangle.<P>Figure 2 illustrates a sample solution of this example. In the solution, the treasure is moved rightward 5 meters first, and then moved upward 5 meters. Finally, it is moved rightward 4 meters to arrive the destination location. Therefore, the total cost for the movement is <SPAN CLASS="MATH">5&#215;5 + 5&#215;10 + 4&#215;5 = 95</SPAN> <tex2html_verbatim_mark>. Note that, it is likely to have multiple solutions that has the same minimum cost.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI><SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> is an integer, and <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$">1, 000, 000</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is an integer, and <SPAN CLASS="MATH">10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$">1, 000, 000</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> is an integer, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$">50</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is an integer, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4265.png ALT="$ \le$">5</SPAN> <tex2html_verbatim_mark>. </LI><LI>None of the obstacles are overlapped. </LI><LI>All of the obstacle/treasure rectangles are within the ship map. </LI><LI>The treasure can not be moved (even partially) outside the map. </LI><LI>The initial and destination locations of the treasure are different and not overlapped with any obstacles. </LI><LI>The minimum cost for moving the treasure from the initial location to the destination is guaranteed to be less than $2,000,000,000. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer indicating the number of test cases to follow. For each test case, the first line contains two positive integers, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, representing the width and height of the map (i.e., maximum <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> coordinates) respectively.<P>The third line is a positive integer <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> representing the number of obstacle rectangles on the map. In the following <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> lines, each line contains four nonnegative integers: <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> represents the position of the left-bottom vertex of the rectangle, and <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> represents the position of the right-top vertex of the rectangle.<P>The next line is a positive integer <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> representing the number of treasure rectangles on the map. In the following <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines, each line contains four positive integers: <SPAN CLASS="MATH"><I>x</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>3</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>y</I><SUB>4</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> <tex2html_verbatim_mark> represents the position of the left-bottom vertex of the rectangle, and <SPAN CLASS="MATH">(<I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB>)</SPAN> <tex2html_verbatim_mark> represents the position of the right-top vertex of the rectangle.<P>The last line contains two non-negative integers, <SPAN CLASS="MATH"><I>x</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I><SUB>5</SUB></SPAN> <tex2html_verbatim_mark>, which represents the destined position of the left-bottom vertex of the first treasure rectangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please output one number in one line for each test case. The number represents the minimum cost to move the treasure from the initial location to the destination location. If there is no solution that can move the treasure to the destination location without conflicting with any obstacles, please output 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
100 100 
2 
2 4 6 7 
8 1 11 5 
2 
1 1 3 2 
2 0 3 1 
10 6
12 8 
2 
2 4 6 7 
7 1 10 5 
2 
1 1 3 2 
2 0 3 1 
9 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
95
0
</PRE><P>
______________________________________________________
4266||||||false||||||
<P><P><BR>Seen as an engineering undertaking for the opening decades of the 21st century, the space elevator proposal was highlighted during the 2002 Space and Robotics Conferences. In 2108, after a sequence of technology breakthroughs, the dream of traveling from Earth to outer space with an elevator finally comes to reality. A space elevator made of a <SPAN CLASS="textit">carbon nanotubes composite ribbon</SPAN> anchored to an offshore sea platform stretches to a small counterweight approximately 62,000 miles (100,000 km) into space. Mechanical lifters attached to the ribbon could then climb the ribbon, carrying cargo and humans into space. Carbon nanotubes have the potential to be 100 times stronger than steel and are as flexible as plastic. The strength of carbon nanotubes comes from their unique structure, which resembles soccer balls.<P>To better understand the concept of a space elevator, think of the game tetherball in which a rope is attached at one end to a pole and at the other to a ball. In this analogy, the rope is the carbon nanotubes composite ribbon, the pole is the Earth and the ball is the counterweight. Now, imagine the ball is placed in perpetual spin around the pole, so fast that it keeps the rope taut. This is the general idea of the space elevator. The counterweight spins around the Earth, keeping the cable straight and allowing the robotic lifters to ride up and down the ribbon.<P>Air Climber Motor (ACM), a space-infrastucture company, has been among those who support construction of a space elevator. ACM provides various of services to maintain the functionality of the space elevator. A crew of ACM routinely travels along the ribbon up and down at unit speed to serve the tourists and scientists at various stops, which are set up for spectacular sightseeing or scientific activities. ACM makes profits out of serving the requests at the stops. If the crew serves stop <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> at time <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, then the revenue collected equals <SPAN CLASS="MATH"><I>p</I><SUB>x</SUB> - <I>t</I></SPAN> <tex2html_verbatim_mark>, where we assume the service can be done instantly and ignore the service time.<P>We use the following diagram to illustrate the space elevator with a horizontal line, where <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s and <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>'s are positive integers (except <SPAN CLASS="MATH"><I>x</I><SUB>0</SUB> = <I>y</I><SUB>0</SUB> = 0</SPAN> <tex2html_verbatim_mark> as the origin) to indicate the locations of stops and <SPAN CLASS="MATH"><I>p</I><SUB>x<SUB>i</SUB></SUB></SPAN> <tex2html_verbatim_mark>'s, <SPAN CLASS="MATH"><I>p</I><SUB>y<SUB>j</SUB></SUB></SPAN> <tex2html_verbatim_mark>'s are the profits for the corresponding services at the stops. Initially, the crew starts at the origin. We refer to the stops right of the origin as <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>,..., <I>x</I><SUB>r</SUB></SPAN> <tex2html_verbatim_mark>, and those to the left as <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB>,..., <I>y</I><SUB>q</SUB></SPAN> <tex2html_verbatim_mark>. Both sequences are in increasing order. The goal is<P><DIV ALIGN="CENTER"><IMG WIDTH="948" HEIGHT="86" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="\epsfbox{p4266.eps}"> <tex2html_verbatim_mark></DIV>to select stops to serve (i.e., not every client needs to be served) and to find a route for the crew such that the total profits of the served stops minus the latency of the corresponding route is maximized. Since the length of the space elevator is so long and the number of stops is large, you are asked to write a program to help the crew select the stops to serve and maximize the revenue. (You see. This is yet another example that no matter how technology advances, the quest for programmer's help never ends! )<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><P><OL><LI>All the numbers are non-negative integers. </LI><LI><SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>: the number of test cases. <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \ge$">10</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>: the number of requests to the right and left of the origin, respectively. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>r</I>, <I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>j</SUB>, <I>p</I><SUB>x<SUB>i</SUB></SUB>, <I>p</I><SUB>y<SUB>j</SUB></SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>, for all <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4266.png ALT="$ \le$"><I>s</I></SPAN> <tex2html_verbatim_mark>. </LI><LI><SPAN CLASS="MATH"><I>x</I><SUB>0</SUB> = <I>y</I><SUB>0</SUB> = 0</SPAN> <tex2html_verbatim_mark>,  <SPAN CLASS="MATH"><I>p</I><SUB>x<SUB>0</SUB></SUB> = <I>p</I><SUB>y<SUB>0</SUB></SUB> = 0</SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer n indicating the number of test cases to follow. Each test case starts with two positive integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, which are at most 100. In each of the following <SPAN CLASS="MATH"><I>r</I> + <I>q</I></SPAN> <tex2html_verbatim_mark> lines, there are two positive integers, where the first one is the position of a request and the second one indicates the corresponding profit. The first <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines are for <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s and the following q lines are for <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>'s. The range of <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s, <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>'s and the profits is from 1 to 1000. Note that <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>'s may not be sorted in the corresponding <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> lines and likewise for <SPAN CLASS="MATH"><I>y</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>'s. Each test case ends with a ``<TT>0</TT>" in a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the maximum profit in a separate line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2  1
1  1
2  5
1  4
0 
3  3
3  1
1  2
2  3
2  2
3  3
1  1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 4 
Case 2: 2
</PRE><P>
______________________________________________________
4267||||||false||||||
<P><P><BR><SPAN CLASS="textit">Rooted trees</SPAN> are one of the most frequently used data structures. The type of rooted tree with an weight assigned on each node is called a <SPAN CLASS="textit">weighted rooted tree</SPAN>. This problem asks you to find a path from the root to a leaf with a given property in a weighted rooted tree where each node has a positive integer weight.<P>Assume the nodes of the input rooted tree are numbered from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le n < 10000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$"><I>n</I> &lt; 10000</SPAN> <tex2html_verbatim_mark>. Note that each node is assigned with a distinct node number. Hence there are a total of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes in the input tree. Each node has a weight that is a positive integer within <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark>. Given a node <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> in the rooted tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, let <SPAN CLASS="MATH"><I>T</I><SUB>u</SUB></SPAN> <tex2html_verbatim_mark> be the subtree of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> rooted at <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>. That is, <SPAN CLASS="MATH"><I>T</I><SUB>u</SUB></SPAN> <tex2html_verbatim_mark> consists of <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> and the nodes whose ancestor is <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark>. We define <SPAN CLASS="MATH"><I>weight</I>(<I>T</I><SUB>u</SUB>)</SPAN> <tex2html_verbatim_mark> to be the sum of the weights for all the nodes in <SPAN CLASS="MATH"><I>T</I><SUB>u</SUB></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="textit">heaviest path</SPAN> <SPAN CLASS="MATH"><I>P</I><SUB>w</SUB></SPAN> <tex2html_verbatim_mark> in a weight rooted tree <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is defined as follows.<P><UL><LI>The root of <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is in <SPAN CLASS="MATH"><I>P</I><SUB>w</SUB></SPAN> <tex2html_verbatim_mark>. </LI><LI>If a node <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> is in <SPAN CLASS="MATH"><I>P</I><SUB>w</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> is not a leaf, then one child <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> is also in <SPAN CLASS="MATH"><I>P</I><SUB>w</SUB></SPAN> <tex2html_verbatim_mark>, where<UL><LI><SPAN CLASS="MATH"><I>weight</I>(<I>T</I><SUB>v</SUB>)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \ge$"><I>weight</I>(<I>T</I><SUB>s</SUB>)</SPAN> <tex2html_verbatim_mark> for each child <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> that is not <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> </LI><LI>if <SPAN CLASS="MATH"><I>weight</I>(<I>T</I><SUB>v</SUB>) = <I>weight</I>(<I>T</I><SUB>s</SUB>)</SPAN> <tex2html_verbatim_mark> for a child <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> that is not <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>, then the node number of <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is larger than the node number of <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark>. </LI></UL></LI></UL><P>It is cleared that given a weighted rooted tree, its heaviest path is unique. Your task is to find such a path by listing the nodes in the path from the root in sequence.<P><P><P><BR><SPAN CLASS="textbf">Technical Specification</SPAN><OL><LI><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$">9999</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4267img1.png ALT="$ \le$">10000</SPAN> <tex2html_verbatim_mark> </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input file contains an integer indicating the number of test cases to follow. Each test case consists of <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> lines. The first line consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and the node number of the root. The <SPAN CLASS="MATH">(<I>i</I> + 2)</SPAN> <tex2html_verbatim_mark>-th line describes the information for the node numbered <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> which are its node weight, the number of children and the children listed one by one. A node without children is a leaf.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, first output a line with the total weight of the nodes in the heaviest path. Then start a new line to output the node numbers in the heaviest path from top to the bottom starting from the root. There is exactly one space between two numbers. Output exactly 10 numbers in a one line with the remaining less-than-10 numbers, if any, at the last line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
6 0 
3 3 1 2 3 
5 0 
1 2 4 5
7 0 
8 0 
6 0 
6 0 
3 3 1 2 3 
5 0 
1 2 4 5
7 0 
8 0
8 0
13 0 
100 1 1 
100 1 6 
20 3 3 4 5 
24 0 
25 0 
23 0 
1 1 7 
1 1 8 
1 1 9 
1 1 10 
1 1 11 
1 1 12 
1 1 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
12 
0 2 4 
12 
0 2 5
252 
0 1 6 7 8 9 10 11 12 2 
4
</PRE><P>
______________________________________________________
4268||||||false||||||

<P>

<P>
<BR>
A bonus plan is one of the most effective tools to motivate employees, therefore most companies take it seriously to decide the amount of the bonus for each employee. BonBonus is a company striving on automatic bonuses calculation software and serves many international companies. For international companies, each employee has two reporting lines, one for the regional office and the other for the functional head. And each employee's performance is based on the evaluations of the regional office and the functional head. For example, Mr. Doe is working in Taiwan office as a marketing manager, then his bonus is decided by the evaluations of Taiwan office and the marketing division in the head quarter. 

<P>
Let us skip all the complicated details of the bonus calculation. The final output of the BonBonus program is a two dimensional <!-- MATH
 $m \times n$
 -->
<SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN>
<tex2html_verbatim_mark> table, where each row corresponds to a region and each column corresponds to a functional coding, and the entry in <SPAN CLASS="MATH"><I>a</I><SUB>i, j</SUB></SPAN>
<tex2html_verbatim_mark> is the bonus for the employee in the region <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and for the function <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>. As usual, there is no negative bonus. Naturally, the row sums and column sums are the performance for regions and functions. Companies usually announce the performance of regions and functions while they keep the individual's bonus secret. 

<P>
BonBonus was doing very well until a phone call brought the stormy bad news. A company ran the BonBonus program and happily announced the performance for each region and each function. Later, they found out that the entries in the table were not all integers, it had at most two digits after the decimal point. ``Not every country has cents! And we have already announced the performance for regions and functions," shouted at the other end of the phone line. ``Didn't you notice the fractional number problem when you announced them?" asked the BonBonus chief technology officer. ``The row sums and column sums are all integers!" replied with the mixture of anger and amusement. ``How may I help you?" explored the CTO. ``You make all the entries integers! Keep the row sums and column sums intact. And moreover, the difference between the final adjusted bonus and the true bonus must be strictly less than one! And you have 24 hours to fix the problem." That was the last sentence of the phone call. As you had expected, many companies do business in countries without cents. The phone calls rushed in and you, the guru of programming, was called in. ``You fix the problem," demanded the CTO. ``But, sir. Can it be fixed?" you asked. ``If it cannot be fixed, then you have an even bigger problem," said the CTO. You remained silent as if you were pondering. ``Fix it and you will get a bonus which will make you beyond happiness." ``Okay, sir. I will try my best." You are to write a program to solve the problem above.

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Technical Specification</SPAN>

<P>

<P>
<BR>

<OL>
<LI>Each company has at least 2 regions and functions and at most 50 regions and functions, i.e., <!-- MATH
 $2 \le n,m \le 50$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4268img1.png
 ALT="$ \le$"><I>n</I>, <I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4268img1.png
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark>. 
</LI>
<LI>The entries for the original table are greater than or equal to zero and less than or equal to 100 with at most two digits after the decimal point, i.e., <!-- MATH
 $0 \le ai,j \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4268img1.png
 ALT="$ \le$"><I>ai</I>, <I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4268img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>. 
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input file contains an integer indicating the number of test cases to follow. The first line for each test case contains two integers <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> separated by a space and the following <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines contain <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> numbers each. And the <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark>-th number in the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line is <SPAN CLASS="MATH"><I>a</I><SUB>ij</SUB></SPAN>
<tex2html_verbatim_mark>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output the adjusted bonuses for each case in order. Use a space to separate each column and a line to separate each row. Or output two characters ``<TT>no</TT>" if no such adjustment exists for that case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
2 2 
1.6 1.4 
1.4 1.6 
2 3 
14.29 23.0 21.71 
10.71 8.0 15.29
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 1 
1 2 
15 23 21 
10 8 16

______________________________________________________
4269||||||false||||||
<P>Alice and Bob are playing a simple game. They have <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integer numbers and a target number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> in common. Either of them independently and randomly picks a number from the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> numbers. They win the game if the product of the two picked numbers is strictly greater than the target number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>. You are to calculate the probability that they will win. Assume that each number is picked with the same probability.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case consists of two lines.<P>The first line contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4269img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4269img1.png ALT="$ \le$">30, 000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 10<SUP>9</SUP><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4269img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4269img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>.<P>The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers numbers that Alice and Bob have, each of which will be between - 30,000 and 30,000 , inclusive. The last test case is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the probability of which Alice and Bob will win the game. The probability is printed as a fraction number formatted as ``<SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark>", where the greatest common divisor of <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> must be 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 0 
2 -9 
4 5 
1 -4 3 -2 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1/2 
Case 2: 1/4
</PRE><P>
______________________________________________________
4270||||||false||||||
<P>A square root of a number <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is a number <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>r</I><SUP>2</SUP> = <I>x</I></SPAN> <tex2html_verbatim_mark>. A discrete square root of a non-negative integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is a non-negative integer <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>r</I><SUP>2</SUP> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4270img1.png ALT="$ \equiv$"> <I>x</I> mod <I>N</I></SPAN> <tex2html_verbatim_mark> , <!-- MATH
 $0 \le r < N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4270img1.png ALT="$ \le$"><I>r</I> &lt; <I>N</I></SPAN> <tex2html_verbatim_mark> , where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is a specific positive integer and mod is the modulo operation.<P>It is well-known that any positive real number has exactly two square roots, but a non-negative integer may have more than two discrete square roots. For example, for <SPAN CLASS="MATH"><I>N</I> = 12</SPAN> <tex2html_verbatim_mark> , 1 has four discrete square roots 1, 5, 7 and 11.<P>Your task is to find all discrete square roots of a given non-negative integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. To make it easier, a known square root <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is also given to you.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case contains exactly one line, which gives three integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>. <!-- MATH
 $(1 \le x < N , 2 \le N < 1,000,000,000 , 1 \le r < N )$
 --> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4270img1.png ALT="$ \le$"><I>x</I> &lt; <I>N</I>, 2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4270img1.png ALT="$ \le$"><I>N</I> &lt; 1, 000, 000, 000, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4270img1.png ALT="$ \le$"><I>r</I> &lt; <I>N</I>)</SPAN> <tex2html_verbatim_mark>. It is guaranteed that <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is a discrete square root of <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> modulo <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The last test case is followed by a line containing three zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by a list of corresponding discrete square roots, in which all numbers are sorted increasingly..<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 12 1 
4 15 2 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 5 7 11 
Case 2: 2 7 8 13
</PRE><P>
______________________________________________________
4271||||||false||||||
<P>A necklace in an undirected graph is a sequence of cycles <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>,..., <I>C</I><SUB>k</SUB>(<I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \ge$">1)</SPAN> <tex2html_verbatim_mark>, satisfying the conditions below:<P><P><BR><OL><LI>Any two cycles have no edges in common. </LI><LI>There is exactly one common vertex between two adjacent cycles <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I><SUB>i+1</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le i < k )$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>i</I> &lt; <I>k</I>)</SPAN> <tex2html_verbatim_mark> </LI><LI>Any two non-adjacent cycles are vertex disjoint, i.e. no vertices in common. </LI></OL><P>Note that any vertex appears in a cycle at most once.<P>A necklace between two vertices <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> is a necklace <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>,..., <I>C</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> belongs to <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> belongs to <SPAN CLASS="MATH"><I>C</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark>.<P>Given an undirected graph and two vertices <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, you need find whether a necklace between <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$">10, 000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$">100, 000)</SPAN> <tex2html_verbatim_mark>, which are the number of vertices and the number of edges in the undirected graph, respectively.<P>Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>A</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \neq$"> <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, which indicates an undirected edge between vertices <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. Vertices are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>The last line of each test case contains two integers <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>S</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \neq$"> <I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4271img1.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>.<P>The last test case is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by ``<TT>YES</TT>", if the required necklace exists, otherwise ``<TT>NO</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 2 
2 3
3 1 
1 3 
4 5 
1 2 
2 3 
1 3 
3 4 
3 4 
1 4 
4 5 
1 2 
1 2 
2 3 
3 4 
3 4 
1 4 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: YES 
Case 2: YES 
Case 3: NO
</PRE><P>
______________________________________________________
4272||||||false||||||
<P>In computational complexity theory, polynomial-time reduction is an important concept.<P>If the existence of a polynomial-time algorithm for problem <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> implies that problem <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> also has a polynomial-time algorithm, we say that problem <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> has a polynomial-time reduction to problem <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>. The relation of reduction is transitive, i.e. if <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> has a reduction to <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> has a reduction to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> has a reduction to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>.<P>Theoretical computer science researchers have found hundreds of polynomial-time reductions between problems, which build a large network of reductions in computational complexity theory.<P>In this network, some reductions are explicitly presented and others exist implicitly. For example, if the reductions from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> are explicitly presented and the reduction from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is not explicitly presented, we say that the reduction from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> exists implicitly.<P>In fact, some reductions are not necessary to present explicitly in the network. For example, if reductions from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> and from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> exist explicitly or implicitly in the network, then the reduction from <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is not necessary to present explicitly. By this fact, it's possible to simplify the network of reductions.<P>Your task is just to simplify the network of reductions such that the number of reductions explicitly presented in the simplified network is minimized and reduction from problem <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to problem <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> exists explicitly or implicitly in the simplified network if and only if it exists in the original network explicitly or implicitly.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$">100, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, which are the number of problems and the number of explicitly presented reductions in the network. The problems are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>A</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>N</I>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \le$"><I>N</I>, <I>A</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4272img1.png ALT="$ \neq$"> <I>B</I>)</SPAN> <tex2html_verbatim_mark>, which means a polynomial-time reduction from problem <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to problem <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is explicitly presented in the network. The last test case is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by a integer which is the number of explicitly presented reductions in the simplified network.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 2 
2 3 
1 3 
4 6 
1 2 
2 1 
2 3 
3 2 
3 4 
4 3 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: 4
</PRE><P>
______________________________________________________
4273||||||false||||||
<P>There is a straight highway with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> villages alongside it. The villages are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> in one direction of the highway.<P>The government is planning to build at most <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> post offices in some of the villages.<P>The amount of money to build a post office in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th village is <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and a post office in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th village can serve all villages within <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> kilometers to the left and right of it.<P>If the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>th village has no post office built and no post offices in other villages can serve it, the government has to compensate the villagers <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> money. Here <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> are all non-negative integers. You are to help the government to find a strategy with minimum cost.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4273img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4273img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4273img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4273img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4273img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>.<P>The following line contains <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> positive integers, which are the distances between village 1 and villages <SPAN CLASS="MATH">2, 3,..., <I>N</I></SPAN> <tex2html_verbatim_mark> in kilometers. The distances will be not greater than 1,000,000,000 and strictly increasing.<P>The third line of each test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>,..., <I>C</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark>, each of which is between 0 and 10,000, inclusive.<P>The fourth line of each test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>R</I><SUB>1</SUB>, <I>R</I><SUB>2</SUB>,..., <I>R</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark>, each of which is between 0 and 1,000,000,000, inclusive.<P>The last line of each test case contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>,..., <I>P</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark>, each of which is between 0 and 10,000, inclusive.<P>The last test case is followed by a line containing one zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number( beginning with 1) followed by the minimum amount of money the government has to pay.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 
1 2 
2 3 2 
1 1 0 
10 20 30 
3 2 
10 20 
100 2 300 
5 6 7 
10 100 400 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 3 
Case 2: 312
</PRE><P>
______________________________________________________
4274||||||false||||||
<P>In some international companies (e.g. SUN and IBM), programmers can work at home via internet.<P>Each programmer has his/her own work time interval. For example, Tom always works from 11:15 to 19:34 every day and Alice works from 22:14 to 05:13 of the morrow. Note that the time intervals may span two days, but the lengths of them will be strictly less than 24 hours.<P>Two programmers can talk with each other by instant messenger software if and only if their work time intervals overlap. Note that only having common beginning or ending point doesn't work. For example, the interval (11:15, 19:34) overlaps with the interval (19:33, 20:10), but (11:15, 19:34) doesn't overlap with (19:34, 11:15).<P>Now a big project needs as many programmers as possible such that any two of them can talk with each other at some time in their work time intervals.<P>You are to find the maximum number of programmers who can participate in the project.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing one integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4274img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4274img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which is the number of programmers in the company.<P>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines gives a work time interval of a programmer in the format of ``ab:cd-ef:gh", where ``ab:cd" and ``ef:gh" are beginning time and ending time written in the 24-hour notation. You can assume that the input times are legal and the beginning and ending times are different.<P>The last test case is followed by a line containing one zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by a integer which is the maximum number of programmer who can participate in the project.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
21:59-00:43 
00:42-13:03 
12:00-22:00 
3 
21:59-21:58
21:58-21:59 
21:58-05:08 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 3 
Case 2: 2
</PRE><P>
______________________________________________________
4275||||||false||||||
<P>It is well-known that any rational number can be represented as a fraction <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark>. Sometimes the denominator <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is a very large integer. Mathematicians hate to write down a tedious long integer, so they usually use two fractions <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>/<I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB>/<I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> to approximate the rational number <SPAN CLASS="MATH"><I>a</I>/<I>b</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>/<I>b</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4275img1.png ALT="$ \le$"><I>a</I>/<I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4275img1.png ALT="$ \le$"><I>a</I><SUB>2</SUB>/<I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and the denominators <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> are not greater than a given integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. You are to help mathematicians to find such <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>/<I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB>/<I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> so that the difference between <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB>/<I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>/<I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> is as small as possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases.<P>Each test case contains exactly one line, which gives three integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P><!-- MATH
 $(0 \le a < 2 \times 10^{9} , a < b \le 2 \times 10^{9} , 1 \le N < 2 \times 10^{9})$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4275img1.png ALT="$ \le$"><I>a</I> &lt; 2&#215;10<SUP>9</SUP>, <I>a</I> &lt; <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4275img1.png ALT="$ \le$">2&#215;10<SUP>9</SUP>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4275img1.png ALT="$ \le$"><I>N</I> &lt; 2&#215;10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>.<P>The last test case is followed by a line containing three zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by the two fractions <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>/<I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB>/<I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> formatted as the sample output.<P>The greatest common divisor of <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> must be 1, so does that of a 2 and <SPAN CLASS="MATH"><I>b</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 1 
1 3 2 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0/1 1/1 
Case 2: 0/1 1/2
</PRE><P>
______________________________________________________
4276||||||false||||||
<P>There are some points in the 2-dimensional plane. Each point is colored red, green or blue. No three points are collinear. Any triple of blue points can form a triangle, which is called a blue triangle. A blue triangle is called red-blue triangle if there are more red points than green points in it, or green-blue triangle if there are more green points than red points in it.<P>You are to count the numbers of red-blue triangles and green-blue triangles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. Each test case starts with a line containing three integers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4276img1.png ALT="$ \le$"><I>R</I>, <I>G</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4276img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, which are the numbers of red, green and blue points, respectively.<P>Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4276img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4276img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, which gives the coordinate of a red points. The following <SPAN CLASS="MATH"><I>G</I></SPAN> <tex2html_verbatim_mark> lines and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> lines give the coordinates of all green points and blue points in the same manner, respectively. The last test case is followed by a line containing three <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print a line containing the test case number (beginning with 1) followed by two integers, which are the numbers of red-blue triangles and green-blue triangles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 3 
1 1 
2 3 
0 0 
0 3 
3 0 
1 1 1 
0 0 
1 1 
2 3 
-1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 0 
Case 2: 0 0

______________________________________________________
4277||||||false||||||

<P>
A problem that has received considerable attention over the years is that of transforming a name into some code that tends to bring together all the variants of the same name. This is useful in applications involving spoken names when there is a good chance that the name will be misspelled. The following `soundex' algorithm, which was originally developed by Margaret K. Odell and Robert C. Russell, has often been used for encoding surnames. Assume the input is a single name consisting of only upper or lower case alphabetic characters with no punctuation, and that case is not significant in alphabetic comparisons. 

<P>

<OL>
<LI>Retain the first letter of the name (in upper case), and drop all occurrences of a, e, h, i, o ,u, w, and y in other positions of the name.

<P>
</LI>
<LI>Assign the following numbers to the remaining letters after the first letter: 

<P>
<DIV ALIGN="CENTER">
<TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=LEFT><COLGROUP><COL ALIGN=LEFT>
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> 
b, f, p, v <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 1 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> l <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 4 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>c, g, j, k, q, s, x, z <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 2 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> m, n <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 5 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>d, t <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 3 </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> r <!-- MATH
 $\rightarrow$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/4277img1.png
 ALT="$ \rightarrow$"></SPAN>
<tex2html_verbatim_mark> 6 </TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>
</LI>
<LI>If two or more letters with the same numeric code (from step 2) were adjacent in the original name (before step 1), then omit all but the first of them. 

<P>
</LI>
<LI>Convert to the form `letter, digit, digit, digit' by adding trailing zeros if there are fewer than three digits, or by dropping the rightmost digits if there are more than three digits.
</LI>
</OL>

<P>

<P>
<BR>

<B>Examples:</B>

<P>
As our first example, suppose we want the code for the name `Euler'. In step 1 we retain the first E, but drop the u and the second e, yielding `Elr'. In step 2 we assign codes to l and r, yielding E46. Step 3 doesn't apply in this case. In step 4 we must add an additional 0 to obtain the desired letter, digit, digit, digit format, so our final code is E460. 

<P>
Now consider generating the code for `Gauss'. We keep the G and drop the a and the u, yielding `Gss'. After step 2 we have G22. In step 3 we note that the two `2' codes were yielded by two occurrences of `s' in the original name, so we keep only one, yielding G2. Finally, we add two zeroes to give the final code, G200. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
There will be multiple names to convert using this soundex algorithm. Each input line contains a single name consisting only of upper and lower case alphabetic characters, starting in the first column, optionally followed by blanks, then the end of line. No name will have more than 20 alphabetic characters. The line containing the last name will be followed by a line containing a period in column one. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each input name, display a single output line containing the code (one uppercase alphabetic character and three digits), a tab character (or four spaces), and the input name.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Euler
Gauss
Hilbert
Knuth
Lloyd
.
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
E460    Euler
G200    Gauss
H416    Hilbert
K530    Knuth
L300    Lloyd
</PRE> 

<P>

______________________________________________________
4278||||||false||||||
<P>The newly liberated country of Freedestan is preparing for its first democratic elections. Your company has won the bid for providing election automation to Freedestan and has been contracted by the Freedestani Election Council (FEC) to develop a ballot counting machine to be used in this election. Your software team is tasked with developing the Ballot Analysis and Result Recording (BARR) software module of the machine.<P>Your BARR module will be extensively tested by FEC representatives to ensure accuracy and compliance with the FEC rules and regulations. The tests will be performed using a series of ballots from several sample elections as input.<P><P><BR><SPAN CLASS="textbf">Unmarked Ballot Format</SPAN><P>An unmarked ballot consists of one or more text lines, each of which contains the following:<P><P><BR><SPAN CLASS="MATH"><I>OfficeName</I></SPAN> <tex2html_verbatim_mark><TT>:</TT> <SPAN CLASS="MATH"><I>Candidate</I>1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>Candidate</I>2</SPAN> <tex2html_verbatim_mark> ... <SPAN CLASS="MATH"><I>CandidateN</I></SPAN> <tex2html_verbatim_mark><P><P><BR>This indicates that the individuals with names ` <SPAN CLASS="MATH"><I>Candidate</I>1</SPAN> <tex2html_verbatim_mark>', ` <SPAN CLASS="MATH"><I>Candidate</I>2</SPAN> <tex2html_verbatim_mark>', ...and ` <SPAN CLASS="MATH"><I>CandidateN</I></SPAN> <tex2html_verbatim_mark>' are running for office ` <SPAN CLASS="MATH"><I>OfficeName</I></SPAN> <tex2html_verbatim_mark>'. The name of each office and the name of each candidate will contain at least two characters. Whitespace (blanks and/or tabs) will appear before each candidate's name and may optionally follow the last candidate's name. The names of candidates for an office may appear in different orders on different ballots, although the names of all candidates will be present. The lines for offices are presented in the same order on each ballot, which is in descending order of importance -- the line for the most important office appears first and the line for the least important office appears last. Each office has at least one candidate.<P><P><BR><SPAN CLASS="textbf">Marking a Ballot</SPAN><P>A voter properly selects a candidate for an office by placing a single `<TT>X</TT>' or `<TT>x</TT>' in the space immediately preceding the name of that candidate on the ballot so that some whitespace appears before and after the `' or `<TT>x</TT>'. For example, the line<P><P><BR>President<TT>: X</TT> Amabo Gomaa<P><P><BR>indicates a vote for the candidate `Amabo' for the office of `President'. Unfortunately, it is also possible for a voter to place additional `<TT>X</TT>' or `<TT>x</TT>' marks on a line, and even other single-character marks. The ballot marking mechanism guarantees that there will always be some whitespace on each side of each voter-placed mark, and that marks must appear after the colon following the name of the office. Ballot lines containing more than one mark, or any mark other than `<TT>X</TT>' or `<TT>x</TT>' will cause the ballot containing that line to be flagged for examination by an election official. All ballot lines will be counted if they contain only a single `<TT>X</TT>' or `<TT>x</TT>' mark properly preceding the name of a candidate, even on ballots flagged for examination.<P><P><BR><SPAN CLASS="textbf">Tallying the Election Results</SPAN><P>A candidate may run for one or more offices, but may only win election to one office. A candidate wins election to an office if he/she receives the most valid votes for that office, and has not been elected to or tied for a more important office. In case of a tie, all tied candidates for that office will be identified in the election results; each tied candidate is also ineligible for election to a less important office. It is possible that no candidates remain eligible for an office after applying these rules. In this case, the office is not filled by the election and the situation is reported by the BARR module software.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>To test your BARR module, the FEC will provide ballots for an arbitrary number of elections. The ballots for each election will be preceded by a line containing integers <SPAN CLASS="MATH"><I>NO</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>NB</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>NO</I></SPAN> <tex2html_verbatim_mark> is the number of offices appearing on each ballot, and will be no larger than 10. <SPAN CLASS="MATH"><I>NB</I></SPAN> <tex2html_verbatim_mark> is the number of ballots provided for the test election. Next will appear the <SPAN CLASS="MATH"><I>NO</I>&#215;<I>NB</I></SPAN> <tex2html_verbatim_mark> lines for the marked test ballots; the first <SPAN CLASS="MATH"><I>NO</I></SPAN> <tex2html_verbatim_mark> lines contain the first ballot, the next <SPAN CLASS="MATH"><I>NO</I></SPAN> <tex2html_verbatim_mark> lines contain the second ballot, and so forth. A line containing two zeroes will follow the last ballot for the last election. The FEC guarantees that there will be no more than 100 unique candidate names in any test election.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test election, your BARR module should display the results of the election beginning with a line identifying the election sequence number (1, 2, ...corresponding to the input order). For each office, in descending order of importance, display the name of the office indented from the left column, a colon, the name of the candidate that won, or the names (in ascending alphanumeric order) of the candidates that tied for, election to that office, and the number of valid votes they received, separating each of these with a space. In case no valid candidates remain for an office, display `<TT>-UNFILLED-</TT>' instead of the winner's name and votes. Use one line per office. After the last office, on a separate line starting with `<TT>Invalid ballots: </TT>', report in ascending order the sequence number of those ballots that contain one or more invalid votes -- these ballots will have to be handled manually. Sequence numbers are not part of the input, but can be easily derived from the order in which the ballots appear in the input stream, counting from 1. If no ballots in an election were invalid, then omit the `Invalid ballots' line. Follow the entire report for an election with a single blank line. Use the format shown in the samples.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 6
President: X Buruni   Amabo   Gomaa
VicePresident: x Buruni   Chakravarti
President:   Buruni X Amabo   Gomaa
VicePresident:   Buruni   Chakravarti
President:   Buruni X Amabo   Gomaa
VicePresident: X Buruni x Chakravarti
President:   Buruni x Amabo   Gomaa
VicePresident:   Buruni X Chakravarti
President: @ Buruni   Amabo   Gomaa
VicePresident:   Buruni x Chakravarti
President:   Buruni   Amabo x Gomaa
VicePresident: x Buruni   Chakravarti
2 7
ChiefCook: x Fred   Bob   Sue   Joe
BottleWasher: X Joe   Fred   Sue   Bob
ChiefCook: x Fred   Bob   Sue   Joe
BottleWasher: x Fred   Sue   Joe   Bob
ChiefCook:   Fred x Bob   Sue   Joe
BottleWasher: x Fred   Sue   Joe   Bob
ChiefCook:   Fred x Bob   Sue   Joe
BottleWasher: x Fred x Sue x Joe x Bob
ChiefCook:   Fred   Bob   Sue   Joe x
BottleWasher: x Fred   Sue   Joe   Bob
ChiefCook:   Fred   Bob   Sue   Joe
BottleWasher: x Fred   Sue   Joe   Bob
ChiefCook:   Fred   Bob   Sue x Joe
BottleWasher: x Fred   Sue x Joe   Bob
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Election 1 results:
  President: Amabo 3
  VicePresident: Buruni Chakravarti 2
  Invalid ballots: 3, 5

Election 2 results:
  ChiefCook: Bob Fred 2
  BottleWasher: Joe 1
  Invalid ballots: 4, 5, 7
</PRE><P>
______________________________________________________
4279||||||false||||||

<P>
If you visit historical battlegrounds from periods when cannon were used, you may see cannonballs (metal spheres) stacked in various ways. In this problem we're interested in the number of cannonballs in such pyramids with triangular bases  --  that is, with cannonballs arranged in an equilateral triangle on the base, then similar equilateral triangles of cannonballs stacked on top of that, until a single cannonball is placed on the top. This three-sided pyramid is, in fact, one of the Platonic solids, a tetrahedron. 

<P>
For example, suppose we begin with a base containing 6 cannonballs arranged in an equilateral triangle as shown in the figure on the left; this equilateral triangle has 3 cannonballs on each edge. The next layer will contain 3 cannonballs, 2 on each edge  --  as shown in the middle. The final layer always contains just one cannonball. The total number of cannonballs in this pyramid is thus 6 + 3 + 1 = 10. In general, each layer of such a pyramid will have one fewer cannonballs on each edge of the triangle than the next lower layer.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4279.eps}$
 -->
<IMG
 WIDTH="470" HEIGHT="147" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/42/p4279.png
 ALT="\epsfbox{p4279.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
The number of cannonballs in a layer is just the sum of the integers from 1 to N, where N is the number of cannonballs on one side of the layer. 

<P>
Given the number of cannonballs on each side of the base, compute the total number of cannonballs in the entire tetrahedral pyramid. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains a single integer N giving the number of cases posed, for a maximum of 100 cases. Following that are exactly N lines, each with a single integer giving the number of cannonballs on each side of the base for a tetrahedron of cannonballs, a number less than 1000.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each input case, display the case number (1, 2, ...), a colon and a blank, the number of cannonballs on each side of the base, one blank, and finally the total number of cannonballs in the tetrahedron.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5
3
5
27
999
1
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1: 3 10
2: 5 35
3: 27 3654
4: 999 166666500
5: 1 1
</PRE> 

<P>

______________________________________________________
4280||||||false||||||

<P>
The program `Sunday Week-end Edition' on the US National Public Radio (NPR) network has a `Sunday Puzzle' segment. The show that aired on Sunday, June 29, 2008 presented the following puzzle: 

<P>
<BLOCKQUOTE>
From a nineteenth century trade card advertising Bassett's Horehound Troches, a remedy for coughs and colds: A man buys 20 pencils for 20 cents and gets three kinds of pencils in return. Some of the pencils cost 4 cents each, some are two for a penny and the rest are four for a penny. How many pencils of each type does the man get? 

</BLOCKQUOTE> 

<P>
A clarification provided to the problem indicated that correct solutions would contain at least one of each pencil type. 

<P>
This is an enhancement of the problem that originally aired on the NPR show. Rather than just considering 20 pencils for 20 cents, consider the case of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> pencils for <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> cents. Given a value of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, determine if a solution is possible, and if so, determine all possible solutions. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Each input line, except the last, contains a value of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> in the range 1 to 256 for which the problem is to be solved. The last input line contains the integer 0. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each value of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> in the input, display the case number (1, 2, ...) and the phrase `<TT><SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> pencils for <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> cents</TT>' as shown in the sample output below. If there are no solutions for a particular value of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, then display the line `<TT>No solution found.</TT>' If there are solutions, display three lines for each one, separating the groups of three lines for each solution by a blank line. Order these solutions by increasing numbers of four-cent pencils. Display a blank line after the output for each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10
20
40
0
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 10 pencils for 10 cents
No solution found.

Case 2: 20 pencils for 20 cents
3 at four cents each
15 at two for a penny
2 at four for a penny

Case 3: 40 pencils for 40 cents
6 at four cents each
30 at two for a penny
4 at four for a penny

7 at four cents each
15 at two for a penny
18 at four for a penny
</PRE> 

<P>

______________________________________________________
4281||||||false||||||
<P>Almost everyone is familiar with the Fibonacci sequence which begins 1, 1, 2, 3, 5, ...Each term in this sequence (except for the first two) is the sum of the two preceding terms, so the terms continually become larger and never repeat.<P>But what can we say about a parallel sequence in which each term is equal to the corresponding term in the Fibonacci sequence, taken modulo <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> , for <SPAN CLASS="MATH"><I>N</I> &gt; 1</SPAN> <tex2html_verbatim_mark>? That is, suppose we label the terms in the Fibonacci sequence <SPAN CLASS="MATH"><I>F</I><SUB>1</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I><SUB>3</SUB> = 2</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I><SUB>4</SUB> = 3</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>F</I><SUB>5</SUB> = 5</SPAN> <tex2html_verbatim_mark>, ...Then label the terms in the parallel sequence <SPAN CLASS="MATH"><I>P</I><SUB>i</SUB> = <I>F</I><SUB>i</SUB> mod <I>N</I></SPAN> <tex2html_verbatim_mark>.<P>For example, suppose <SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark>. We have the following correspondence between the sequences:<P><PRE>
F=  1  1  2  3  5  8  13  21  34  55  89  144  233  377  610   ...
P=  1  1  2  3  1  0   1   1   2   3   1    0    1    1    2   ...
</PRE><P>Note that the sequence P repeats after the first six elements. That is, the sequence P has a period of 6.<P>Given a value of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> greater than 1 and not greater than 1,000,000,000, what is the period of the corresponding parallel sequence?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple values of N to consider. Each value will appear on a line by itself. The last value of N will be followed by a line containing an integer less than or equal to 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display the case number (1, 2, ...), a colon and a blank, the value of N, a blank, and the period of the parallel sequence.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
3
4
5
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1: 2 3
2: 3 8
3: 4 6
4: 5 20
</PRE><P>
______________________________________________________
4282||||||false||||||
<P>Patrick has a four function calculator; unfortunately his sister has decided to be a traditional `evil sibling' and has painted over the display. The calculator still functions, but of course you can't see the results. This calculator has a display constructed from seven-segment LEDs. The figure on the left below illustrates how the seven LED segments at each digit position are arranged. The figure on the right shows which segments are illuminated to display each of the ten decimal digits.<P><DIV ALIGN="CENTER"><IMG WIDTH="1346" HEIGHT="538" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4282.png ALT="\epsfbox{p4282.eps}"> <tex2html_verbatim_mark></DIV><P>This particular calculator only displays three digits of accuracy. There are three seven segment digits, and there are no decimal points since all math is performed using integers (with truncation where appropriate).<P>If the number on the display happens to be negative, there is a minus sign in front of the number. For a number such as -6, this is done by making the rightmost digit a `6' and using the middle segment of the next digit over as the minus sign. For a number such as -123, there is one additional segment to the left of the display. Thus, the number -112 lights up 10 segments, made up of 9 for the number, and one more for the minus sign. The display thus ranges from `-999' to `999'. There is no `plus sign' for positive numbers.<P>In order to prove that the calculator still operates, and justify scraping off the paint, the back cover is removed and an ammeter is attached to the display. An ammeter measures the current consumed by the device, and each segment of a digit consumes 5 milliamps. Thus, to display a number such as `798' the current consumption can be predicted as follows:<P><P><BR>Digit 7 -- 3 segments lit = 15 milliamps<BR>Digit 9 -- 6 segments lit = 30 milliamps<BR>Digit 8 -- 7 segments lit = 35 milliamps<BR>Total = 80 milliamps<P><P><BR>Of course, it's apparent that the number `897' also consumes the same amount of current, as does `789' or, for that matter, `-891'.<P>The calculator allows you to enter numbers with an optional minus sign and up to three digits, and to either add, subtract, multiply, or divide the numbers. Patrick wishes to prove that the functionality of the calculator is intact, so he enters `949' and measures 80 milliamps. Then he pushes the subtract key. Next he enters `51' and measures 35 milliamps. After pressing the `=' key the result should be `898', measuring 100 milliamps. As a second example, he enters `-5', then pushes the addition key. He then enters `-4' and presses equal. The answer is `-9'; the measurements were 30 milliamps, 25 milliamps, and 35 milliamps respectively.<P>Patrick's sister claims that this is a trick, so she presents him with the following problem: given the current consumption (in milliamps) of operand X, operand Y, and result Z, and given an unknown operation Op, determine the number of possible values for X Op Y = Z, assuming that possible solutions exist. If no such solutions exist, the answer is `<TT>No solutions.</TT>'<P>Note that in all cases, there are only three digits on the display. Although the input values of 80, 35, and 100 potentially could represent <SPAN CLASS="MATH">12337 = 949*13</SPAN> <tex2html_verbatim_mark>, this is not possible because 12337 is too large for the three digit display to hold.<P><P><BR><B>Example</B><P>An example is as shown above; for inputs 80, 35, and 100 one possibility is ` <SPAN CLASS="MATH">925 - 117 = 808</SPAN> <tex2html_verbatim_mark>'. Some input combinations may have no result. For the inputs 35, 10, and 10 the answer is `<TT>No solutions.</TT>' For any given input set, the program should either print `<TT>No solutions.</TT>' or it should print the number of solutions found.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases. Each input line contains values for <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Z</I></SPAN> <tex2html_verbatim_mark>. Each number is in milliamps according to the above description. A line containing a single zero follows the input data for the last case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, display `<TT>Case </TT>' and the case number (1, 2, ...), a colon and a blank, the number of solutions (or `<TT>No</TT>' if there are no solutions), and then the word `<TT>solution</TT>' or `<TT>solutions</TT>' (as appropriate) and a period. Your output should exactly follow this format, as is illustrated by the sample input and output shown below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
30 10 10
35 10 10
15 20 30
30 65 65
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 solution.
Case 2: No solutions.
Case 3: 9 solutions.
Case 4: 819 solutions.
</PRE><P>
______________________________________________________
4283||||||false||||||
<P>We are all familiar with the traditional binary search tree (BST) in all of its variants. There are AVL trees, red-black trees, etc. In each, the search strategy is the same -- if the key of the item for which we are searching is less than the key in the tree node we are examining, then the search should proceed down the left sub-tree, if it exists. Likewise, if the key is greater than that in this tree node, search the right sub-tree. Suppose we call the key associated with a node <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, and the key for which we are searching <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>. Then if <SPAN CLASS="MATH"><I>S</I> &lt; <I>V</I></SPAN> <tex2html_verbatim_mark> go to the left, and if <SPAN CLASS="MATH"><I>S</I> &gt; <I>V</I></SPAN> <tex2html_verbatim_mark> go to the right. If <SPAN CLASS="MATH"><I>S</I> = <I>V</I></SPAN> <tex2html_verbatim_mark> we have found that node for which we were searching.<P>A 3-tree is either empty, or consists of a node and three sub-trees, each of which is a 3-tree. If a 3-tree is non-empty, and the key in the node is <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, then<P><UL><LI>if a node has a key less than <SPAN CLASS="MATH"><I>V</I>/2</SPAN> <tex2html_verbatim_mark>, then that node is in the `far left' sub-tree of the node containing <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>if a node has a key greater than or equal to <SPAN CLASS="MATH"><I>V</I>/2</SPAN> <tex2html_verbatim_mark> and less than <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, then that node is in the `near left' sub-tree of the node containing <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>if a node has a key greater than <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>, then that node is in the `right' sub-tree of the node containing <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>. </LI><LI>if a node contains exactly the key <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> which is being sought, then none of the sub-trees need be considered in a 3-tree search. </LI></UL><P>Obviously this may skew the tree, but this is not an issue for this problem. All comparisons should be done using integer arithmetic and truncation, so that a node with a value 9 would have a `far left' sub-tree that contains only nodes with keys less than 4, and a `near left' sub-tree that contains nodes with keys greater than or equal to 4 and strictly less than 9.<P>Assume the <SPAN CLASS="textbf">level</SPAN> <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> of a tree node is zero for the root of the tree, one for nodes immediately below the root, and so on. Your task in this problem is to read a set of numbers and construct a 3-tree using the numbers as keys in the order given. Then, after the tree is constructed, display the following three values:<P><UL><LI>the maximum value of <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> when visiting only `far left' links starting from the root, </LI><LI>the maximum value of <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> when visiting only `near left' links starting from the root, </LI><LI>the maximum value of <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> when visiting only `right' links starting from the root. </LI></UL><P>Example<P>An example is shown here. The input keys are 10, 2, 43, 7, 1, 8, 6, 5, which creates the 3-tree shown at right. The level for the tree node containing 2 is 1, the level for the node containing 5 is 3, and the level for the node containing the 43 is 1. The values to be displayed are therefore 1, 3, and 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="482" HEIGHT="492" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4283.png ALT="\epsfbox{p4283.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases to consider. Each input case consists of a set of one or more integers greater than zero followed by a zero. The integers in each of these sets -- with the exception of the zero that marks the end of the set -- are to be used, in order, to construct a 3-tree for the current input case. The set of integers for the last case is followed by a single zero -- that is, a set that would yield an empty 3-tree. None of the integers is larger than 10,000.<P>Values may appear more than once in an input set, but only one 3-tree node is to be created for each unique input value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display `<TT>Case </TT>' followed by the input case number (1, 2, ...), a colon and a blank, and three numbers separated by a blank. These three numbers are the largest possible values for <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark> along the appropriate `far left', `near left' and `right' paths in the 3-tree constructed from the input data for the current case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10
2
43
7
1
8
6
5
0
220
631
571
332
104
502
567
854
0
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 1 3 1
Case 2: 1 0 2
</PRE><P>
______________________________________________________
4284||||||false||||||
<P>Ancient Egyptian multiplication is a systematic method for multiplying two numbers that does not require the multiplication table, only the ability to multiply by 2, and to add. Also known as Egyptian multiplication and Peasant multiplication, it decomposes one of the multiplicands into a sum of powers of two and creates a table of doublings of the second multiplicand. This method may be called mediation and duplication, where mediation means halving one number and duplication means doubling the other number.<P>This method has three phases: the decomposition, the table and the result.<P>The <SPAN CLASS="textbf">decomposition</SPAN> of a number <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> thus consists of finding the powers of two which make it up. The Egyptians knew empirically that a given power of two would only appear once in a number. For the decomposition, they proceeded methodically; they would initially find the largest power of two less than or equal to the number in question, subtract it out and repeat until nothing remained. (The Egyptians did not make use of the number zero in mathematics).<P><P><BR><B>Example:</B> First consider the decomposition of the number <SPAN CLASS="MATH"><I>N</I> = 13</SPAN> <tex2html_verbatim_mark>:<UL><LI>the largest power of two less than or equal to 13 is 8, 13 - 8 = 5, </LI><LI>the largest power of two less than or equal to 5 is 4, 5 - 4 = 1, </LI><LI>the largest power of two less than or equal to 1 is 1, 1 - 1 = 0 </LI></UL><P><P><BR><SPAN CLASS="MATH"><I>N</I> = 13</SPAN> <tex2html_verbatim_mark> is thus the sum of the powers of two: 8, 4 and 1.<P>After the decomposition of the first multiplicand (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>), it is necessary to construct a <SPAN CLASS="textbf">table</SPAN> of powers of two times the second multiplicand (<SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>) from one up to the largest power of two found during the decomposition. In the table, a line is obtained by multiplying the preceding line by two.<P>For example, if the largest power of two found during the decomposition of <SPAN CLASS="MATH"><I>N</I> = 13</SPAN> <tex2html_verbatim_mark> is 8 and <SPAN CLASS="MATH"><I>M</I> = 238</SPAN> <tex2html_verbatim_mark>, the table is created as follows:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Power of 2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>M</I>&#215;</SPAN> <tex2html_verbatim_mark> Power of 2</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>*1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>238</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>476</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>*4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>952</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>*8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1904</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf"><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> = 13</SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="textbf"><SPAN CLASS="MATH"><I>N</I>&#215;<I>M</I></SPAN> <tex2html_verbatim_mark> = 3094</SPAN></TD></TR></TBODY></TABLE></DIV><P><P><BR>Finally, the <SPAN CLASS="textbf">result</SPAN> is obtained by adding the numbers from the second column for which the corresponding power of two makes up part of the decomposition of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> (denoted by a mark).<P>Thus, the result of the multiplication of 13 <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 238 is obtained as the addition of: 1904 + 952 + 238 = 3094 <SPAN CLASS="textbf">or</SPAN> 238 + 952 + 1904 = 3094.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of multiple test cases. Each test case consists of a single line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4284img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/4284img1.png ALT="$ \le$">1, 000, 000, 000</SPAN> <tex2html_verbatim_mark>) that indicate the multiplicands and the <SPAN CLASS="textit">begin addition specification</SPAN>, that it indicates from that row will initiate the addition by obtained the result. The <SPAN CLASS="textit">begin addition specification</SPAN> is one of `<TT>u</TT>' or `<TT>b</TT>' referring to up row and bottom row respectively.<P>The last test case is followed by `<TT>-1</TT>' on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the case number (beginning with 1) followed by the multiplicands (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>) separated by ` <TT>x</TT> ', an equal sign, and an expression giving the sum of the multiples of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> (numbers from the second column of the table) for which the corresponding power of two makes up part of the decomposition of the multiplicand <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> of the form indicated by the <SPAN CLASS="textit">begin addition specification</SPAN>. Use the format shown in the sample output below. In the event that the values of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> or <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> are 0, then the answer must be only `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
13 238 u
13 238 b
1000 1 u
1 1000 b
1 1 u
0 10 u
-1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 13 x 238 = 238 + 952 + 1904
Case 2: 13 x 238 = 1904 + 952 + 238
Case 3: 1000 x 1 = 8 + 32 + 64 + 128 + 256 + 512
Case 4: 1 x 1000 = 1000
Case 5: 1 x 1 = 1
Case 6: 0 x 10 = 0

______________________________________________________
4285||||||false||||||
<P>A binary clock is a clock which displays traditional sexagesimal time (military format) in a binary format. The most common binary clock uses three columns or three rows of LEDs to represent zeros and ones. Each column (or row) gives the hours, minutes, or seconds in binary format.<P>When you uses three columns (vertically), the bottom row in each column represents 1 (or <SPAN CLASS="MATH">2<SUP>0</SUP></SPAN> <tex2html_verbatim_mark>), with each row above representing higher powers of two, up to <SPAN CLASS="MATH">2<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> (or 32). To read each individual digit in the time, the user adds the values represented by each illuminated LED, and then reads these from left to right. The first column represents the hour, the next column represents the minute, and the last column represents the second.<P>When you use three rows (horizontally), the right column in each row represents 1 (or <SPAN CLASS="MATH">2<SUP>0</SUP></SPAN> <tex2html_verbatim_mark>), with each column to the left representing higher powers of two, up to <SPAN CLASS="MATH">2<SUP>5</SUP></SPAN> <tex2html_verbatim_mark> (or 32). To read the hours, minutes, and seconds in the time, the user adds the values represented by each illuminated LED, and then reads these from above to below. The top row represents the hour, the next row represents the minute, and the bottom row represents the second.<P><P><BR><SPAN CLASS="textbf">Example</SPAN><P><DIV ALIGN="CENTER">=6in <IMG WIDTH="802" HEIGHT="411" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/p4285.png ALT="\epsfbox{p4285.eps}"> <tex2html_verbatim_mark></DIV><P>The time shown in this example is 10:37:49.<P><P><BR><SPAN CLASS="textbf">The Problem</SPAN><P>In this problem you are provided with a textual representation of the reading of a binary clock in row-major order. That is, each row of LEDs, whether the clock is vertical or horizontal, is represented as a sequence of text strings, with `<TT>()</TT>' used to represent an LED that is off, and `<TT>(*)</TT>' used to represent an LED that is on. For example, the reading from the vertical clock (shown on the left above) would be <TT>()(*)(*)()()(*)(*)()()()(*)()(*)()()()(*)(*)</TT>, and the reading from the horizontal clock would be <TT>()()(*)()(*)()(*)()()(*)()(*)(*)(*)()()()(*)</TT>. Given an indication of whether the clock was vertical or horizontal, your task is to convert this textual representation to the traditional time representation (10:37:49 in this case).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be multiple cases in the input. The first line of input contains an integer N that specifies the number of cases. Each of the remaining N lines contains the following items, in the order specified:<P><UL><LI>optional whitespace (blanks and/or tab characters) </LI><LI>a string with a textual representation of the binary clock (no embedded whitespace) </LI><LI>at least one whitespace character </LI><LI>a lowercase letter `<TT>h</TT>' or `<TT>v</TT>' indicating if the clock was horizontal or vertical </LI><LI>optional whitespace </LI><LI>end of line </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input case, display a line that first contains the case number and a colon. If the syntax of the textual representation of the time is incorrect (that is, it does not contain 18 combinations of `()' and `(*)'), display the phrase `<TT>incorrect syntax</TT>'. If the syntax is correct but the time represented is incorrect (that is, hours is greater than 23, or minutes or seconds is greater than 59), display the phrase `<TT>incorrect time</TT>'. Otherwise display the time in the traditional format. Display two digits for hours that are greater than 9, otherwise display only a single hours digit. Always display two digits for minutes and seconds.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
()()(*)()(*)()(*)()()(*)()(*)(*)(*)()()()(*) h
()(*)(*)()()(*)(*)()()()(*)()(*)()()()(*)(*) v
()(*)(*)()()(*)()()()()()(*)()()()()()(*) h
()(*)()()()(*)()()()()()(*)()()()()(*)()()()() h
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10:37:49
Case 2: 10:37:49
Case 3: incorrect time
Case 4: incorrect syntax

______________________________________________________
4286||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>A - Equilibrium Mobile</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem A - Equilibrium Mobile</h1>
<h3>Time limit: 2 seconds</h3--><p><img src="http://livearchive.onlinejudge.org/external/42/p4286.jpg> A mobile is a type of kinetic sculpture constructed to take advantage of the principle of equilibrium. It consists of a number of rods, from which weighted objects or further rods hang. The objects hanging from the rods balance each other, so that the rods remain more or less horizontal. Each rod hangs from only one string, which gives it freedom to rotate about the string.</p><p>We consider mobiles where each rod is attached to its string exactly in the middle, as in the figure underneath. You are given such a configuration, but the weights on the ends are chosen incorrectly, so that the mobile is not in equilibrium. Since that's not aesthetically pleasing, you decide to change some of the weights.</p><center><img class="figure" src="http://livearchive.onlinejudge.org/external/42/p4286.jpg></center><p>What is the minimum number of weights that you must change in order to bring the mobile to equilibrium? You may substitute any weight by any (possibly non-integer) weight. For the mobile shown in the figure, equilibrium can be reached by changing the middle weight from 7 to 3, so only 1 weight needs to changed.</p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>One line with the structure of the mobile, which is a recursively defined expression of the form:<pre>
  &lt;expr&gt; ::= &lt;weight&gt; | "[" &lt;expr&gt; "," &lt;expr&gt; "]"</pre>with <tt>&lt;weight&gt;</tt> a positive integer smaller than 10<sup>9</sup> indicating a weight and <tt>[&lt;expr&gt;,&lt;expr&gt;]</tt> indicating a rod with the two expressions at the ends of the rod. The total number of rods in the chain from a weight to the top of the mobile will be at most 16.</ul><h2>Output</h2>Per testcase:<ul><li>One line with the minimum number of weights that have to be changed.</ul><div class="sample"><h2>Sample Input</h2><pre>
3
[[3,7],6]
40
[[2,3],[4,5]]
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1
0
3
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4287||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>B - Proving Equivalences</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem B - Proving Equivalences</h1>
<h3>Time limit: 5 seconds</h3--><p>Consider the following exercise, found in a generic linear algebra textbook.</p><blockquote>Let <em>A</em> be an <em>n</em> &times; <em>n</em> matrix. Prove that the following statements are equivalent:<ol type="a"><li><em>A</em> is invertible. <li><em>Ax = b</em> has exactly one solution for every <em>n</em> &times; 1 matrix <em>b</em>. <li><em>Ax = b</em> is consistent for every <em>n</em> &times; 1 matrix <em>b</em>. <li><em>Ax = 0</em> has only the trivial solution <em>x</em> = 0.</ol></blockquote><p>The typical way to solve such an exercise is to show a series of implications. For instance, one can proceed by showing that (a) implies (b), that (b) implies (c), that (c) implies (d), and finally that (d) implies (a). These four implications show that the four statements are equivalent.</p><p>Another way would be to show that (a) is equivalent to (b) (by proving that (a) implies (b) and that (b) implies (a)), that (b) is equivalent to (c), and that (c) is equivalent to (d). However, this way requires proving six implications, which is clearly a lot more work than just proving four implications!</p><p>I have been given some similar tasks, and have already started proving some implications. Now I wonder, how many more implications do I have to prove? Can you help me determine this?</p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>One line containing two integers <em>n</em> (1 &le; <em>n</em> &le; 20000) and <em>m</em> (0 &le; <em>m</em> &le; 50000): the number of statements and the number of implications that have already been proved. <li><em>m</em> lines with two integers <em>s</em><sub>1</sub> and <em>s</em><sub>2</sub> (1 &le; <em>s</em><sub>1</sub>, <em>s</em><sub>2</sub> &le; <em>n</em> and <em>s</em><sub>1</sub> &ne; <em>s</em><sub>2</sub>) each, indicating that it has been proved that statement <em>s</em><sub>1</sub> implies statement <em>s</em><sub>2</sub>.</ul><h2>Output</h2>Per testcase:<ul><li>One line with the minimum number of additional implications that need to be proved in order to prove that all statements are equivalent.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
4 0
3 2
1 2
1 3
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
4
2
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4288||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>C - Cat vs. Dog</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><h1>Problem C - Cat vs. Dog</h1><h3>Time limit: 2 seconds</h3><p>The latest reality show has hit the TV: ``Cat vs. Dog''. In this show, a bunch of cats and dogs compete for the very prestigious <span style="font-variant: small-caps;">Best Pet Ever</span> title. In each episode, the cats and dogs get to show themselves off, after which the viewers vote on which pets should stay and which should be forced to leave the show.</p><p>Each viewer gets to cast a vote on two things: one pet which should be kept on the show, and one pet which should be thrown out. Also, based on the universal fact that everyone is either a cat lover (i.e. a dog hater) or a dog lover (i.e. a cat hater), it has been decided that each vote must name exactly one cat and exactly one dog.</p><p>Ingenious as they are, the producers have decided to use an advancement procedure which guarantees that as many viewers as possible will continue watching the show: the pets that get to stay will be chosen so as to maximize the number of viewers who get both their opinions satisfied. Write a program to calculate this maximum number of viewers.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with three integers <em>c</em>, <em>d</em>, <em>v</em> (1 &le; <em>c</em>, <em>d</em> &le; 100 and 0 &le; <em>v</em> &le; 500): the number of cats, dogs, and voters. <li><em>v</em> lines with two pet identifiers each. The first is the pet that this voter wants to keep, the second is the pet that this voter wants to throw out. A pet identifier starts with one of the characters `<tt>C</tt>' or `<tt>D</tt>', indicating whether the pet is a cat or dog, respectively. The remaining part of the identifier is an integer giving the number of the pet (between 1 and <em>c</em> for cats, and between 1 and <em>d</em> for dogs). So for instance, ``<tt>D42</tt>'' indicates dog number 42.</ul><h2>Output</h2>Per testcase:<ul><li>One line with the maximum possible number of satisfied voters for the show.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
1 1 2
C1 D1
D1 C1
1 2 4
C1 D1
C1 D1
C1 D2
D2 C1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1
3
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4289||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>D - Disgruntled Judge</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem D - Disgruntled Judge</h1>
<h3>Time limit: 4 seconds</h3--><p>Once upon a time, there was an <span style="font-variant: small-caps;">nwerc</span> judge with a tendency to create slightly too hard problems. As a result, his problems were never solved. As you can image, this made our judge somewhat frustrated. This year, this frustration has culminated, and he has decided that rather than spending a lot of time constructing a well-crafted problem, he will simply write some insanely hard problem statement and just generate some random input and output files. After all, why bother having proper test data if nobody is going to try the problem anyway?</p><p>Thus, the judge generates a testcase by simply letting the input be a random number, and letting the output be another random number. Formally, to generate the data set with <em>T</em> test cases, the judge generates 2<em>T</em> random numbers <em>x</em><sub>1</sub>, ..., <em>x</em><sub>2<em>T</em></sub> between 0 and 10000, and then writes <em>T</em>, followed by the sequence <em>x</em><sub>1</sub>, <em>x</em><sub>3</sub>, <em>x</em><sub>5</sub>, ..., <em>x</em><sub>2<em>T</em>-1</sub> to the input file, and the sequence <em>x</em><sub>2</sub>, <em>x</em><sub>4</sub>, <em>x</em><sub>6</sub>, ..., <em>x</em><sub>2<em>T</em></sub> to the output file.</p><p>The random number generator the judge uses is quite simple. He picks three numbers <em>x</em><sub>1</sub>, <em>a</em>, and <em>b</em> between 0 and 10000 (inclusive), and then for <em>i</em> from 2 to 2<em>T</em> lets <em>x</em><sub><em>i</em></sub> = (<em>a</em> &middot; <em>x</em><sub><em>i</em>-1</sub> + <em>b</em>) mod 10001.<p>You may have thought that such a poorly designed problem would not be used in a contest of such high standards as <span style="font-variant:
small-caps;">nwerc</span>. Well, you were wrong.</p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>One line containing an integer <em>n</em> (0 &le; <em>n</em> &le; 10000): an input testcase.</ul>The input file is guaranteed to be generated by the process described above.<h2>Output</h2>Per testcase:<ul><li>One line with an integer giving the answer for the testcase.</ul>If there is more than one output file consistent with the input file, any one of these is acceptable.<div class="sample"><h2>Sample Input</h2><pre>
3
17
822
3014
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
9727
1918
4110
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4290||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>E - Easy Climb</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem E - Easy Climb</h1>
<h3>Time limit: 9 seconds</h3--><p><img src="http://livearchive.onlinejudge.org/external/42/p4290.jpg> Somewhere in the neighborhood we have a very nice mountain that gives a splendid view over the surrounding area. There is one problem though: climbing this mountain is very difficult, because of rather large height differences. To make more people able to climb the mountain and enjoy the view, we would like to make the climb easier.</p><p>To do so, we will model the mountain as follows: the mountain consists of <em>n</em> adjacent stacks of stones, and each of the stacks is <em>h<sub>i</sub></em> high. The successive height differences are therefore <em>h</em><sub><em>i</em>+1</sub>-<em>h</em><sub><em>i</em></sub> (for 1 &le; <em>i</em> &le; <em>n</em>-1). We would like all absolute values of these height differences to be smaller than or equal to some number <em>d</em>.</p><p>We can do this by increasing or decreasing the height of some of the stacks. The first stack (the starting point) and the last stack (the ending point) should remain at the same height as they are initially. Since adding and removing stones requires a lot of effort, we would like to minimize the total number of added stones plus the total number of removed stones. What is this minimum number?</p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>One line with two integers <em>n</em> (2 &le; <em>n</em> &le; 100) and <em>d</em> (0 &le; <em>d</em> &le; 10<sup>9</sup>): the number of stacks of stones and the maximum allowed height difference. <li>One line with <em>n</em> integers <em>h<sub>i</sub></em> (0 &le; <em>h<sub>i</sub></em> &le; 10<sup>9</sup>): the heights of the stacks.</ul><h2>Output</h2>Per testcase:<ul><li>One line with the minimum number of stones that have to be added or removed or ``<tt>impossible</tt>'' if it is impossible to achieve the goal.</ul><div class="sample"><h2>Sample Input</h2><pre>
3
10 2
4 5 10 6 6 9 4 7 9 8
3 1
6 4 0
4 2
3 0 6 3
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
6
impossible
4
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4291||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>F - Sculpture</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem F - Sculpture</h1>
<h3>Time limit: 4 seconds</h3--><p><img src="http://livearchive.onlinejudge.org/external/42/p4291.jpg> Imagine a box, made of copper plate. Imagine a second one, intersecting the first one, and several others, intersecting each other (or not). That is how the sculptor Oto Boxing constructs his sculptures. In fact he does not construct that much, he only makes the design; the actual construction is contracted out to a construction company. For the calculation of the costs of construction the company needs to know the total area of copper plate involved. Parts of a box that are hidden in another box are not realized in copper, of course. (Copper is quite expensive, and prices are rising.) After construction, the total construction is plunged into a bath of chemicals. To prevent this bath from running over, the construction company wants to know the total volume of the construction. Given that a construction is a collection of boxes, you are asked to calculate the area and the volume of the construction.</p><p>Some of Oto's designs are connected, others are not. Either way, we want to know the total area and the total volume. It might happen that the boxes completely enclose space that is not included in any of the boxes (see the second example below). Because the liquid cannot enter that space, its volume must be added to the total volume. Copper plate bordering this space is superfluous, of course, so it does not add to the area.</p><h2>Input</h2>On the first line one positive number: the number of testcases, at most 100. After that per testcase:<ul><li>One line with an integer <em>n</em> (1 &le; <em>n</em> &le; 50): the number of boxes involved. <li><em>n</em> lines with six positive integers <em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>, <em>z</em><sub>0</sub>, <em>x</em>, <em>y</em>, <em>z</em> (1 &le; <em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>, <em>z</em><sub>0</sub>, <em>x</em>, <em>y</em>, <em>z</em> &le; 500): the triple (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>, <em>z</em><sub>0</sub>) is the vertex of the box with the minimum values for the coordinates and the numbers <em>x</em>, <em>y</em>, <em>z</em> are the dimensions of the box (<em>x</em>, <em>y</em> and <em>z</em> dimension, respectively). All dimensions are in centimeters. The sides of the boxes are always parallel to the coordinate axes.</ul><h2>Output</h2>Per testcase:<ul><li>One line with two numbers separated by single spaces: the total amount of copper plate needed (in cm<sup>2</sup>), and the total volume (in cm<sup>3</sup>).</ul><div class="sample"><h2>Sample Input</h2><pre>
2
2
1 2 3 3 4 5
6 2 3 3 4 5
7
1 1 1 5 5 1
1 1 10 5 5 1
1 1 2 1 4 8
2 1 2 4 1 8
5 2 2 1 4 8
1 5 2 4 1 8
3 3 4 1 1 1
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
188 120
250 250
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4292||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>G - Matchsticks</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem G - Matchsticks</h1>
<h3>Time limit: 2 seconds</h3--><p>Matchsticks are ideal tools to represent numbers. A common way to represent the ten decimal digits with matchsticks is the following:</p><center><img class="figure" src="http://livearchive.onlinejudge.org/external/42/p4292.png></center><p>This is identical to how numbers are displayed on an ordinary alarm clock. With a given number of matchsticks you can generate a wide range of numbers. We are wondering what the smallest and largest numbers are that can be created by using all your matchsticks.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with an integer <em>n</em> (2 &le; <em>n</em> &le; 100): the number of matchsticks you have.</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line with the smallest and largest numbers you can create, separated by a single space. Both numbers should be positive and contain no leading zeroes.</ul><div class="sample"><h2>Sample Input</h2><pre>
4
3
6
7
15
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
7 7
6 111
8 711
108 7111111
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4293||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>H - White Water Rafting</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem H - White Water Rafting</h1>
<h3>Time limit: 2 seconds</h3--><p>You have been hired by a big theme park to design a new attraction: a white water rafting ride. You already designed the track; it is a round trip that is described by an inner and an outer polygon. The space in between the two polygons is the track.</p><p>You still need to design the rafts, however. It has been decided that they should be circular, so that they can spin freely along the track and increase the fun and excitement of the ride. Besides that, they should be as big as possible to fit the maximum number of people, but they can't be too big, for otherwise they would get stuck somewhere on the track.</p><p>What is the maximum radius of the rafts so that they can complete the track?</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with an integer <em>n<sub>i</sub></em> (3 &le; <em>n<sub>i</sub></em> &le; 100): the number of points of the inner polygon. <li><em>n<sub>i</sub></em> lines with two integers each: the coordinates of the points of the inner polygon in consecutive order. <li>One line with an integer <em>n<sub>o</sub></em> (3 &le; <em>n<sub>o</sub></em> &le 100): the number of points of the outer polygon. <li><em>n<sub>o</sub></em> lines with two integers each: the coordinates of the points of the outer polygon in consecutive order.</ul>All coordinates have absolute value no larger than 1000. The points of the polygons can be given in either clockwise or counterclockwise order and the two polygons do not intersect or touch themselves or each other. The outer polygon encloses the inner polygon.<h2>Output</h2>Per testcase:<ul><li>One line with a floating point number: the maximal radius of the white water rafts. This number must have a relative or absolute error less than 10<sup>-6</sup>.</ul><div class="sample"><h2>Sample Input</h2><pre>
2
4
-5 -5
5 -5
5 5
-5 5
4
-10 -10
-10 10
10 10
10 -10
3
0 0
1 0
1 1
5
3 -3
3 3
-4 2
-1 -1
-2 -2
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
2.5
0.70710678
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4294||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>I - Shuffle</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem I - Shuffle</h1>
<h3>Time limit: 5 seconds</h3--><p>You are listening to your music collection using the shuffle function to keep the music surprising. You assume that the shuffle algorithm of your music player makes a random permutation of the songs in the playlist and plays the songs in that order until all songs have been played. Then it reshuffles and starts playing the list again.</p><p>You have a history of the songs that have been played. However, your record of the history of played songs is not complete, as you started recording songs at a certain point in time and a number of songs might already have been played. From this history, you want to know at how many different points in the future the next reshuffle might occur.</p><p>A potential future reshuffle position is valid if it divides the recorded history into intervals of length <em>s</em> (the number of songs in the playlist) with the first and last interval possibly containing less than <em>s</em> songs and no interval contains a specific song more than once.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with two integers <em>s</em> and <em>n</em> (1 &le; <em>s</em>, <em>n</em> &le; 100000): the number of different songs in the playlist and the number of songs in the recorded playlist history. <li>One line with <em>n</em> space separated integers, <em>x</em><sub>1</sub>, <em>x</em><sub>2</sub>, ..., <em>x</em><sub><em>n</em></sub> (1 &le; <em>x</em><sub><em>i</em></sub> &le; <em>s</em>): the recorded playlist history.</ul><h2>Output</h2>Per testcase:<ul><li>One line with the number of future positions the next reshuffle can be at. If the history could not be generated by the above mentioned algorithm, output 0.</ul><div class="sample"><h2>Sample Input</h2><pre>
4
4 10
3 4 4 1 3 2 1 2 3 4
6 6
6 5 4 3 2 1
3 5
3 3 1 1 1
7 3
5 7 3
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
1
6
0
7
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4295||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><title>J - Videopoker</title> <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" type="text/css" href="problem.css"></head><body><!--h1>Problem J - Videopoker</h1>
<h3>Time limit: 15 seconds</h3--><p>Videopoker is the slot machine variant of the currently immensely popular game of poker. It is a variant on draw poker. In this game the player gets a hand consisting of five cards randomly drawn from a standard 52-card deck. From this hand, the player may discard any number of cards (between 0 and 5, inclusive), and change them for new cards randomly drawn from the remainder of the deck. After that, the hand is evaluated and the player is rewarded according to a payout structure. A common payout structure is as follows:</p><center><table><tr><th>Hand</th><th>&nbsp;&nbsp;&nbsp;&nbsp;</th><th>Payout</th></tr><tr><td>one pair</td><td></td><td>1</td></tr><tr><td>two pair</td><td></td><td>2</td></tr><tr><td>three of a kind</td><td></td><td>3</td></tr><tr><td>straight</td><td></td><td>4</td></tr><tr><td>flush</td><td></td><td>5</td></tr><tr><td>full house</td><td></td><td>10</td></tr><tr><td>four of a kind</td><td></td><td>25</td></tr><tr><td>straight flush</td><td></td><td>100</td></tr><tr><td>royal flush</td><td></td><td>250</td></tr></table></center><p>Once you know the payout structure, you can determine for a given hand which cards you must change to maximize your expected reward. We'd like to know this expected reward, given a hand.</p><h2>Input</h2><p>On the first line one positive number: the number of testcases, at most 100. After that per testcase:</p><ul><li>One line with nine integers <em>x<sub>i</sub></em> (0 &le; <em>x<sub>i</sub></em> &le; 1000$) describing the payout structure. The numbers are in increasing order and describe the payout for one pair, two pair, etc, until the royal flush. <li>One line with one integer <em>n</em> (1 &le; <em>n</em> &le; 10): the number of starting hands to follow. <li><em>n</em> lines, each describing a starting hand. A hand consists of five space separated tokens of the form <tt>Xs</tt>, with <tt>X</tt> being the rank (`<tt>2</tt>' \dots `<tt>9</tt>', `<tt>T</tt>', `<tt>J</tt>', `<tt>Q</tt>', `<tt>K</tt>' or `<tt>A</tt>') and <tt>s</tt> being the suit (`<tt>c</tt>', `<tt>d</tt>', `<tt>h</tt>' or `<tt>s</tt>').</ul><h2>Output</h2><p>Per testcase:</p><ul><li>One line for each starting hand with a floating point number that is the maximal expected reward for that hand. These numbers must have an absolute or relative error less than 10<sup>-6</sup>.</ul><div class="sample"><h2>Sample Input</h2><pre>
1
1 2 3 4 5 10 25 100 250
5
Ah Ac Ad As 2s
Ks Qs Js Ts 2h
Ks Qs 2d 2h 3s
2d 4h 5d 3c 9c
2h 3h 6d 8h Tc
</pre></div><div class="sample"><h2>Sample Output</h2><pre>
25.000000
8.9574468
1.5467160
0.9361702
0.6608135
</pre></div><div class="source">The 2008 ACM Northwestern European Programming Contest</div></body></html>
______________________________________________________
4296||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem A</B></FONT><BR><FONT SIZE="+1"><B>Bring Your Own Horse</B></FONT><BR></DIV><BR>One of the essential activities of a knight is to compete in tournaments. Frequently, groups of knights gather around the country to compare their skills. On such a typical contest day, everyone has five hours to do ten disciplines, such as sword fighting, bow and arrow, and various forms of horseback riding. Needless to say, you have to bring your own horse.<P>This is not as easy as it seems. It often takes a knight several days to go from the castle where he lives to the place where a tournament is held. But horses sometimes are very, very stubborn. After having covered a certain distance on a single day, they sometimes simply stop and refuse to go any further. Luckily, they start anew on the next day. To make sure that the horse does not refuse service before the scheduled day trip is completed, a knight wants to choose an itinerary on which the longest day trip is as short as possible. Hence, a trip that takes many days with short distances is preferable over a shorter route that has the risk of a refusing horse.<BR><P>Write a program which answers queries from knights spread all over the country about the best way to go from their castles to a tournament site. Given a description of the relevant places (i.e. castles, locations of tournaments, and hostels for overnight stays), the program should tell them the largest distance they have to cover on a single day so that this distance is minimal among all possible itineraries.<P>The places are designated by consecutive integers from 1 to <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ N$">, while a road is represented by three integers, namely its place of origin, its destination, and its length. Every road can be used in both directions, and there is at least one route (i.e. a sequence of roads) between any two places. The knights stick to the given roads while travelling and spend their nights only at one of the <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ N$"> places.<P><BR><BR><B>Input</B><BR>The first line contains the total number of test cases that follow.<P>Each test case begins with a line that first holds the number <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ N$"> of places ( <IMG WIDTH="100" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le N \le 3000$"> ) followed by the number <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ R$"> of roads ( <IMG WIDTH="114" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le R \le
100000$"> ). Then there are <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ R$"> lines with three integers each (<IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ a$"> , <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ b$"> , and <IMG WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ l$"> ), each of which defines a road connecting the places <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ a$"> and <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ b$"> ( <IMG WIDTH="91" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le a, b \le N$"> ) with length <IMG WIDTH="9" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ l$"> ( <IMG WIDTH="115" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le l \le 1000000$"> ).<P>Thereafter, each test case continues with the number <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ Q$"> of queries on a line by itself ( <IMG WIDTH="98" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le Q \le 1000$"> ). Each of the next <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ Q$"> lines holds two integers <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ k$"> and <IMG WIDTH="9" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ t$"> , indicating a query by a knight who lives at place <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ k$"> and needs to go to a tournament at place <IMG WIDTH="9" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ t$"> ( <IMG WIDTH="90" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1 \le k, t \le N$"> , <IMG WIDTH="39" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ k \neq
t$"> ).<BR><BR><P><B>Output</B><BR>For each test case output a line containing the word ``<TT>Case</TT>'', a single space, and its serial number (starting with <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/aimg1.gif ALT="$ 1$"> for the first test case). Then, print one line for each query in this test case, containing the smallest maximal day trip distance as described above. Print a blank line after each test case.<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>2<br />4 4<br />1 2 100<br />2 3 100<br />3 4 100<br />4 1 200<br />1<br />1 4<br />6 9<br />2 4 5<br />5 1 7<br />3 6 6<br />3 1 4<br />2 3 2<br />1 2 1<br />6 5 42<br />4 5 3<br />4 6 5<br />4<br />1 3<br />3 4<br />5 4<br />6 1<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>Case 1<br />100<br /><br />Case 2<br />2<br />5<br />3<br />5<br /><BR>&nbsp;</TT></DIV></BODY></HTML>
______________________________________________________
4297||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem B</B></FONT><BR><FONT SIZE="+1"><B>First Knight</B></FONT><BR></FONT></DIV><BR>Archibald and Adalbert are inseparable friends and the best knights of the whole kingdom. Competitive as they are, they occasionally engage in a little open-air sword fight, just to determine who among them really is the first knight. Of course, neither Adalbert nor Archibald wins, but they keep themselves busy for quite a while and get around in the surroundings. You have to calculate about how long their next `fight' will last.<P>All the action takes place in a rectangular area which, for the sake of simplicity, is divided into unit squares numbered from <IMG WIDTH="39" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (1,1)$"> to <IMG WIDTH="47" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (m,n)$"> . Starting at <IMG WIDTH="39" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (1,1)$"> , the knights move from one square to one of the at most four adjacent squares, and finish as soon as they reach <IMG WIDTH="47" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (m,n)$"> where the tavern is located. At each square, it is largely a matter of chance where the fight will continue, but it also depends on the environment (for example, if a certain direction is uphill). Our model uses probabilities to decide into which adjacent square the fight will move next. (For example, an uphill direction has a lower probability.) It is your job to calculate the expected number of moves that are needed before the tavern is reached. You can assume that every move is independent of the directions chosen in the previous moves.<P><BR><BR><B>Input</B><BR>The input consists of a sequence of rectangular areas. Each area starts with a line containing the dimensions of the rectangle <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ m$"> and <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ n$"> , where <IMG WIDTH="101" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1 \leq m, n \leq 40$"> . Four blocks follow that state the probability of a move in each direction. Every block contains <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ m$"> lines, and each line contains <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ n$"> numbers <IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{i,j}^{(k)}$"> , where <IMG WIDTH="88" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 0 \leq p_{i,j}^{(k)} \leq 1$"> for all <IMG WIDTH="74" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1 \leq i \leq m$"> and <IMG WIDTH="71" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1 \leq j \leq n$"> and <IMG WIDTH="71" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1 \leq k \leq 4$"> . The probabilities in block <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ k$"> are arranged as follows:<P></P><DIV ALIGN="CENTER"><IMG WIDTH="291" HEIGHT="121" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$\displaystyle \begin{array}{llllll}
p_{1,1}^{(k)} &amp; p_{1,2}^{(k)} &amp; p_{1,3}^{(k...
...{(k)} &amp; p_{m,3}^{(k)} &amp; \dots &amp; p_{m,n-1}^{(k)} &amp; p_{m,n}^{(k)} \\
\end{array}$"></DIV><P></P>The number <IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{i,j}^{(k)}$"> gives the probability of a move from square <IMG WIDTH="36" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i,j)$"> to the next square: In block <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1$"> this is <IMG WIDTH="56" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i{+}1,j)$"> , in block <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 2$"> it is <IMG WIDTH="56" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i,j{+}1)$"> , in block <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 3$"> it is <IMG WIDTH="56" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i{-}1,j)$"> and in block <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 4$"> it is <IMG WIDTH="56" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i,j{-}1)$"> . For each square <IMG WIDTH="36" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (i,j)$"> except the tavern <IMG WIDTH="47" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (m,n)$"> , the probabilities <IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{i,j}^{(k)}$"> add up to <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1$"> and at least one of <IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{i,j}^{(1)}$"> or <IMG WIDTH="29" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{i,j}^{(2)}$"> is not 0 . (This ensures that the tavern will finally be reached with probability <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1$"> .) You may assume that the probability of moving outside the rectangle is 0 , as are <IMG WIDTH="35" HEIGHT="43" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ p_{m,n}^{(k)}$"> for all <IMG WIDTH="12" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ k$"> . The sequence of areas is followed by a line containing two zeros.<BR><BR><P><B>Output</B><BR>For each area, output a line containing the expected number of moves from <IMG WIDTH="39" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (1,1)$"> to <IMG WIDTH="47" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ (m,n)$"> . This number must have an absolute error less than <IMG WIDTH="24" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 0.1$"> compared to the exact answer that is always less than <IMG WIDTH="59" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/bimg1.gif ALT="$ 1000000$"> .<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>2 2<br />0.01 0.50<br />0.00 0.00<br />0.99 0.00<br />0.50 0.00<br />0.00 0.00<br />0.50 0.00<br />0.00 0.50<br />0.00 0.00<br />1 5<br />0.0 0.0 0.0 0.0 0.0<br />1.0 0.1 0.7 0.5 0.0<br />0.0 0.0 0.0 0.0 0.0<br />0.0 0.9 0.3 0.5 0.0<br />3 3<br />0.000001 0.0 1.0<br />0.0 1.0 1.0<br />0.0 0.0 0.0<br />0.999999 1.0 0.0<br />1.0 0.0 0.0<br />0.000001 0.000001 0.0<br />0.0 0.0 0.0<br />0.0 0.0 0.0<br />0.999999 0.0 0.0<br />0.0 0.0 0.0<br />0.0 0.0 0.0<br />0.0 0.999999 0.0<br />0 0<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>4.0<br />41.142857142857146<br />7.999994000002<BR>&nbsp;</TT></DIV><P></BODY></HTML>
______________________________________________________
4298||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem C</B></FONT><BR><FONT SIZE="+1"><B>Postal Charges</B></FONT><BR></FONT></DIV><BR>We are in the year 1308. The burgrave of Nuremberg comes to the conclusion that the winding streets of the city are a mess. Thus, he plans to rebuild the whole city in a much larger space with rectangular streets that are parallel to his favourite coordinate system.<BR><P>It is well known that craftsmen belonging to different guilds should better be living in separate quarters of the city. Of course not all guilds have the same <I>reputation</I> and the quarters for the guilds are to be ordered by reputation. The quarters should also be ordered by the <I>importance</I> for the economy of the city, just to be able to evacuate - in case of an enemy attack or a fire - more important people first. Note that <I>importance</I> is not the same as <I>reputation</I>: e.g. whereas people working in finance have about the lowest possible reputation, they are still important for the economy of the city. In contrast, clerics have a high reputation although the economy could do quite well without them.<BR>The burgrave places the quarter of a guild with reputation <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ i$"> and importance <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ j$"> in the corresponding square with coordinates <IMG WIDTH="128" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ [i, i + 1[ \times [j, j + 1[$"> , where <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ i$"> and <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ j$"> are integers. No two guilds share the same pair <IMG WIDTH="36" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ (i, j)$"> .<BR><P>The only problem is that the burgrave does not know how much to charge for the new postal service. The price of every letter should be the same for all connections within the city. To find a fair price that covers the transportation costs, the burgrave needs to know the average path length of all the mail. A survey has shown that all connections are equally likely with the following exception: Nobody would ever consider to write a letter to someone of a guild with lower or equal reputation or importance than his own. We call a path between two houses admissible if it is not excluded by this condition (see figure on the next page).<BR><P><BR><BR><B>Input</B><BR>The input consists of several test cases, separated from each other by a blank line. The first line of each test case holds an integer <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ n$"> , <IMG WIDTH="111" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ 2 \le n \le 100800$"> . Each of the following <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ n$"> lines contains the coordinates of one house as two decimal numbers <!-- MATH
 $0 \le x, y < 10$
 --><IMG WIDTH="95" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ 0 \le x, y &lt; 10$"> , separated by one space. <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ x$"> , <IMG WIDTH="12" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ y$"> may have up to <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ 8$"> decimal places. Coordinates of some houses may be identical: this corresponds to multi-family houses.<BR><BR><P><B>Output</B><BR>Your program should print one line for each test case and this line should contain the average length of the admissible paths as a decimal number rounded to <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ 8$"> digits after the decimal point. As the streets are rectangular and parallel to the coordinate axes, you have to use the Manhattan or <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ l_1$"> -distance for the length of an individual path, i.e. the length of the path <IMG WIDTH="130" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ (x_1, y_1) \rightarrow (x_2, y_2)$"> is <IMG WIDTH="142" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif ALT="$ \vert x_1 - x_2\vert + \vert y_1 - y_2\vert$"> . It is guaranteed that there is at least one admissible path.<BR><BR><P><DIV ALIGN="CENTER"><A NAME="109"></A><TABLE><CAPTION ALIGN="BOTTOM"><STRONG>Fig.:</STRONG> The example city map (clipped) illustrates the last sample input, i.e. 9 quarters/guilds, 6 houses, and all admissible paths.</CAPTION><TR><TD><DIV ALIGN="CENTER"><img SRC="http://livearchive.onlinejudge.org/external/42/cimg1.gif width="400" /></DIV></TD></TR></TABLE></DIV><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>2<br />0 0<br />1 1 </TT><P><TT>4<br />0 0<br />1.5 1.7<br />1.5 1.7<br />0 0 </TT><P><TT>3<br />0.2 0.2<br />1.2 1.2<br />2.3 0.5 </TT><P><TT>6<br />2 1<br />0 0<br />0 1.5<br />1.2 1.2<br />2.5 2.1<br />0.5 1.7<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>2.00000000<br />3.20000000<br />2.00000000<br />2.95000000<BR>&nbsp;</TT></DIV><P></BODY></HTML>
______________________________________________________
4299||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem D</B></FONT><BR><FONT SIZE="+1"><B>Randomly-priced Tickets</B></FONT><BR></FONT></DIV><BR>At the end of the Middle Ages, quite a few universities throughout Europe have already been founded. The new term has just begun, so there are a lot of freshmen around. Not everyone has been lucky to be admitted to her/his desired university. As a result, many couples are now living in separate towns.<P>Of course, they try to see each other as often as they can. To facilitate this, the students have negotiated a deal with the coachmen. Instead of paying the regular price for a ride from one town to another, the price is determined by drawing a random integer between 1 and <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ R$"> inclusive, all numbers being equally likely. Unfortunately, this process repeats itself a few times whenever there is no direct connection between the towns a couple lives in. That makes the total cost of a journey quite unpredictable.<P>Help the couples determine the probability that one of them can afford a one-way trip to the other one. Given the number of towns and a list of direct connections, your program is supposed to process a list of couples. For each couple, you know their budget and where they live. Of course, they will always choose a route with the least expected price. Such a route exists between any two towns.<P><BR><BR><B>Input</B><BR>The first line contains the number of test cases that follow.<P>Each test case begins with a line that holds the number <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ N$"> of towns ( <IMG WIDTH="92" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1
\le N \le 100$"> ) followed by the maximum price <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ R$"> of a single ticket ( <IMG WIDTH="82" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1 \le R \le
30$"> ). The following <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ N$"> lines contain <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ N$"> characters each. The <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> -th character in the <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ i$"> -th line of these is ``<TT>Y</TT>'' if there is a direct connection between towns <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ i$"> and <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> , but ``<TT>N</TT>'' otherwise. The <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> -th character in the <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ i$"> -th line is always the same as the the <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ i$"> -th character in the <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> -th line. The <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> -th character in the <IMG WIDTH="11" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ j$"> -th line is always ``<TT>N</TT>''.<P>Each test case goes on with the number <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ C$"> of couples on a line by itself ( <IMG WIDTH="98" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1 \le C \le 1000$"> ). Then for each couple there is a line that holds three integers <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ a$"> , <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ b$"> , and <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ m$"> . These numbers state that one of them lives in town <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ a$"> , the other one in town <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ b$"> ( <IMG WIDTH="91" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1 \le a, b \le N$"> , <IMG WIDTH="40" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ a \neq b$"> ), and the amount of money they can spend is <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ m$"> ( <IMG WIDTH="108" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1 \le m \le 10000$"> ).<BR><BR><P><B>Output</B><BR>For each test case, print one line containing the word ``<TT>Case</TT>'', a single space, and its serial number (starting with <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 1$"> for the first test case). Then, output one line for each couple in this test case containing the probability that they can afford a one-way journey according to the rules above. Your answer is allowed to differ from the exact result by at most <IMG WIDTH="40" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/42/dimg1.gif ALT="$ 0.001$"> . Print a blank line after each test case.<BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>2<br />3 4<br />NYY<br />YNY<br />YYN<br />1<br />1 3 1<br />4 7<br />NYNN<br />YNYN<br />NYNY<br />NNYN<br />2<br />1 3 10<br />1 4 10<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>Case 1<br />0.250000 </TT><P><TT>Case 2<br />0.795918<br />0.341108<BR>&nbsp;</TT></DIV><P></BODY></HTML>
______________________________________________________
4300||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem E</B></FONT><BR><FONT SIZE="+1"><B>The Game</B></FONT><BR></FONT></DIV><BR><P>As a touring merchant, I come to countries faraway. My wife allows me to travel around only if I return home with a nice, foreign gift in my hands. The <I>game</I>, which was my most recent present to her, was a really fascinating one.<BR><P>The basic rules of the game are fairly simple: The game is played by exactly two players. In front of each player there is a fixed number of mugs and a bowl on the right side of the mugs. The mugs and bowls are arranged in a circle.<BR><P>A number of stones is placed in each mug. The numbers of stones in the bowls are the scores of the corresponding players. The players alternate in making turns. In each turn, the current player selects one of his non-empty mugs. The stones are removed from the selected mug and are spread over the neighbouring mugs and bowls as follows: If there are <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ N$"> stones in the selected mug, one stone is added to each of the following <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ N$"> mugs/bowls in a counter-clockwise direction. Stones in the bowls count as scored points and cannot be removed in any further turn.<BR><P>The following figure shows a turn in the mid of a game:<DIV ALIGN="CENTER"><A NAME="game"></A><A NAME="132"></A><TABLE><CAPTION ALIGN="BOTTOM"><STRONG>Fig.:</STRONG> Board with 3 mugs for each player, scores are 3:4 before the turn and 4:4 after afterwards.</CAPTION><TR><TD><DIV ALIGN="CENTER"><IMG SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif width="300px" /> <IMG SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif width="300px" /></DIV></TD></TR></TABLE></DIV><P>If the last stone of a selected mug is added to the own <I>bowl</I>, the player gets an extra move. This extra move may result in additional extra moves (there is no limit for the number of extra moves).<BR><P>If, on the other hand, the last stone is added to a mug of the opponent, the player has the option (not the obligation) to swap the opponent's mug with his <I>corresponding mug</I> (mugs <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ A$"> and <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ a$"> , mugs <IMG WIDTH="17" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ B$"> and <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ b$"> , ...). Swapping is only allowed if the own mug is not empty. If he chooses to swap, then both mugs must not be swapped for the following four turns. (Note that this may be different from four <I>moves</I>: Consider the move sequence <IMG WIDTH="202" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ P_0,O_1,O_2,O_3,P_4,O_5,P_6,O_7$"> where <IMG WIDTH="19" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ P_i$"> is a move by the player and <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ O_j$"> is a move by his opponent, who gets extra moves <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ O_2$"> and <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ O_3$"> . If the player swaps mugs in move <IMG WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ P_0$"> , these two mugs may not be swapped again in moves <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ O_1$"> to <IMG WIDTH="21" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ P_6$"> , but again in <IMG WIDTH="23" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ O_7$"> and later moves.) Each player may choose the option to swap mugs up to three times within a game.<BR><P>If the last stone is added to a mug of the current player, and if that mug was empty before distribution, and if the <I>opposite mug</I> of the opponent is not empty afterwards, the stones from both mugs are captured and put into the current player's bowl. This rule does not result in an extra move. Note that in general the <I>opposite</I> mug is different from the <I>corresponding</I> mug: Mugs <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ A$"> and <IMG WIDTH="11" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ c$"> , mugs <IMG WIDTH="17" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ B$"> and <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ b$"> , and mugs <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ C$"> and <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ a$"> are considered as opposite mugs in the above example.<BR><P>The game ends as soon as every mug is empty and all stones are in the two bowls. If a player cannot move because all of his mugs are empty, but the opponent can move, it is the opponent's turn again. (With respect to the swapping rule above, the inactivity of the player who cannot move does count as a turn, too.) Otherwise, if a player can move, he has to choose one of the allowed moves.<BR><P>Can you help me with the following question: What is the best difference between my final score and my opponent's final score that I can achieve from a given situation? In addition to me, my opponent also plays optimally.<P><BR><BR><B>Input</B><BR>The first line gives the number of test cases <IMG WIDTH="15" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ T$"> (<!-- MATH
 $0 < T < 60$
 --> <IMG WIDTH="81" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ 0 &lt; T &lt; 60$"> ). Each test case is given in two lines. The first line of a test case holds the number of mugs <IMG WIDTH="21" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ M$"> for each player (<IMG WIDTH="79" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ 0 &lt; M &lt; 5$"> ). The second lines consists of <IMG WIDTH="80" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ (M+1) \cdot 2$"> numbers, describing the current board after your previous turn.<BR>The first <IMG WIDTH="21" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ M$"> numbers describe the number of stones in my mugs in counter-clockwise order. The next number is my score (the stones in my bowl). Then follows the same for my opponent. You may assume that in total there are not more than <IMG WIDTH="20" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/eimg1.gif ALT="$ 15$"> stones on the whole board.<BR><BR><P><B>Output</B><BR>For each test case, print one line that gives the best difference between my score and the opponent's score at the end of the game. At first, it is the opponent's turn.<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>8<br />2<br />0 0 0 2 0 0<br />2<br />2 0 0 0 0 0<br />2<br />2 4 0 2 4 3<br />2<br />2 0 0 3 2 1<br />3<br />1 2 1 3 0 1 2 1<br />4<br />1 2 1 0 0 1 2 1 0 0<br />4<br />9 3 0 0 0 0 0 0 0 3<br />3<br />4 3 1 3 2 1 0 0<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>-2<br />2<br />-9<br />-4<br />5<br />0<br />1<br />-2<BR>&nbsp;</TT></DIV><P></BODY></HTML>
______________________________________________________
4301||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem F</B></FONT><BR><FONT SIZE="+1"><B>The Merchant Guild</B></FONT><BR></DIV><BR>You are a warden of a small town's merchant guild. Early this morning, a number of local and foreign traders (numbered from <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ 1$"> to <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ n$"> ) line up in a row in order to enter the town's market lane. There are <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ n$"> locations along the lane where the merchants can place their carts and sell their goods. Beginning with the merchant #1, each merchant, one after the other, enters the lane with his cart, heads it to his assigned location, and, if it is free, occupies it. Otherwise he continues to the next free spot and occupies it. If all succeeding locations are occupied, he leaves without selling goods.<BR><P>Traders are not able to turn their carts around because of the narrowness of the lane. Your job as a warden is to assign traders to locations in the lane. The local merchants are all members of the town's merchant guild and are privileged in that each of them gets assigned to his favourite location, whereas the foreign traders have to accept any spot you assign to them.<BR><P>Given all local trader's desired locations, you have to decide whether there exists a valid assignment of foreign traders to locations in the lane such that every trader (both foreign and local) is able to find a free spot. If this is the case, you also have to find the number of different valid assignments modulo a given integer <IMG WIDTH="21" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ M$"> .<BR><P>Example: Assume there are four traders. The first three traders in the queue are local traders with favourite positions 2, 1 and 1 respectively. The last trader is a foreign one. Every merchant finds a free spot in the following four cases:<P></P><DIV ALIGN="CENTER"><IMG WIDTH="310" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$\displaystyle (2,1,1,1),\enspace (2,1,1,2),\enspace (2,1,1,3),\enspace (2,1,1,4)
$"></DIV><P></P>where e.g. <IMG WIDTH="69" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ (2,1,1,3)$"> means that the first trader heads to position&nbsp;2 first,..., and the last trader heads to position&nbsp;3.<P>This example (which is the first test case of the sample input) shows that different local traders might have the same favourite location, that it is valid to assign a foreign trader to a spot that is desired by a local merchant and that a local merchant's final spot might not even be close to his favourite one.<P><BR><BR><B>Input</B><BR>The first line contains the number of test cases. Each test case starts with a line with three integer numbers <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ n$"> , <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ m$"> , and <IMG WIDTH="21" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ M$"> ( <IMG WIDTH="266" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ 1 \le n \le 300, 0 \le m \le n, 2 \le M \le 10^9$"> ), where <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ m$"> is the number of local merchants among all <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ n$"> traders. The next line contains exactly <IMG WIDTH="18" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ m$"> pairs of integers <IMG WIDTH="122" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ a_1,b_1,\dots,a_m,b_m$"> with <IMG WIDTH="97" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ 1 \le a_i,b_i \le n$"> and all <IMG WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ a_i$"> different, where <IMG WIDTH="17" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ a_i$"> is the position of the <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ i$"> -th local trader in the queue and <IMG WIDTH="16" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ b_i$"> gives his favourite position. If there are no local traders, this line is empty.<BR><BR><P><B>Output</B><BR>For each test case, output a single line, containing <TT>NO</TT>, if it is impossible that every merchant gets a free spot, or <TT>YES</TT> followed by the number of different assignments modulo <IMG WIDTH="21" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/fimg1.gif ALT="$ M$"> (separated by a single space).<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>4<br />4 3 10<br />1 2 2 1 3 1<br />6 3 987654321<br />1 2 3 4 5 6<br />18 0 100769<br /></TT><P><TT>10 3 8882<br />7 9 2 9 5 10<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>YES 4<br />YES 49<br />YES 68184<br />NO<BR>&nbsp;</TT></DIV><P></BODY></HTML>
______________________________________________________
4302||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem G</B></FONT><BR><FONT SIZE="+1"><B>Toll Road</B></FONT><BR></FONT></DIV><BR>By an ingenious combination of warfare and arranged weddings, King Richard IV has gained control of a few remote areas of south-western Europe. (Actually, he is supposed to have coined the phrase that `marriage is the continuation of war by different means'.) To profit from his new property, deputies shall be installed at certain roads to collect toll fees from passing travellers.<BR><P>For each of the new areas, the royal cartographer has provided a simple map with the towns and major roads: Any two towns are connected by exactly one route (a sequence of roads from one town to another). To each road, the royal treasurer has assigned a number that indicates the profit he expects from collecting fees at that road. This number may be negative, which means that the cost of installing deputies is higher than the income.<BR><P>Your task is to determine a <I>selection</I> of roads that maximizes the total profit (the sum of the earnings of all selected roads). It is not required that every town is at the end of a selected road, but the selection has to be connected: It must be possible to go from any selected road to any other selected road by using only selected roads (this makes transporting the collected fees safer).<P><BR><BR><B>Input</B><BR>The input consists of a sequence of simple maps. Each map starts with a line containing the number of roads <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ n$"> , where <IMG WIDTH="111" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ 1 \leq n
\leq 100000$"> . Each of the following <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ n$"> lines holds a road description that consists of three integer numbers <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ a$"> , <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ b$"> and <IMG WIDTH="12" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ p$"> , where <IMG WIDTH="124" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ 1 \leq a, b \leq 200000$"> and <IMG WIDTH="130" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ -1000 \leq p
\leq 1000$"> . They indicate the towns <IMG WIDTH="12" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ a$"> and <IMG WIDTH="11" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ b$"> at the ends of the road and the profit <IMG WIDTH="12" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/gimg1.gif ALT="$ p$"> of selecting this road. Towns are identified by unique numbers and roads may be passed in both directions. The sequence of maps is followed by a line containing a 0 .<P><BR><BR><P><B>Output</B><BR>For each map, output a line containing the maximum profit achievable by choosing a selection of roads as described above.<P><BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>4<br />1 2 -7<br />3 2 10<br />2 4 2<br />5 4 -2<br />3<br />1 2 -8<br />2 3 -8<br />3 4 -1000<br />5<br />14 15 0<br />15 92 10<br />92 65 -5<br />65 35 10<br />35 89 -30<br />0<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>12<br />0<br />15<BR>&nbsp;</TT></DIV><P><BR><DIV ALIGN="CENTER"></DIV><BR></BODY></HTML>
______________________________________________________
4303||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem H</B></FONT><BR><FONT SIZE="+1"><B>Top Secret</B></FONT><BR></FONT></DIV><BR>Ralph was hired as a knight by a rich German earl some years ago. One day, he captured a spy that presumably intended to deliver a message to his earl's arch-enemy. At those ancient times, it was very popular to engrave a message into the inside of a ring in order to hide it. Knowing about this technique, Ralph quickly examined the spy's rings and found the message. But, unfortunately, it was encrypted.<BR><P>Thus, Ralph tortured the spy until he disclosed how to decode the engraved message: The encrypted message is a single line of <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ N$"> numbers. One has to apply the following decoding procedure for <IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ S$"> times: add to each number <IMG WIDTH="15" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ L$"> times the number to its left and <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ R$"> times the number to its right. Note, that due to the cyclic engraving each number has exactly two neighbours. As numbers can be quite large, one only has to take care of the <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ X$"> lower digits.<BR><P>Unfortunately, Ralph has never learnt how to add and multiply numbers. Please help him!<P><BR><BR><B>Input</B><BR>The first line indicates the number <IMG WIDTH="15" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ T$"> of test cases that follow. Test cases are separated by a blank line. Each test case starts with a line holding <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ N$"> , <IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ S$"> , <IMG WIDTH="15" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ L$"> , <IMG WIDTH="16" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ R$"> , and <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ X$"> separated by single spaces (<!-- MATH
 $2 < N \le 1000$
 --> <IMG WIDTH="100" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ 2 &lt; N \le 1000$"> , <IMG WIDTH="86" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ 0 \le S \le 2^{30}$"> , <!-- MATH
 $0 <
L,R,X < 10$
 --><IMG WIDTH="122" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ 0 &lt;
L,R,X &lt; 10$"> ). The next line contains <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ N$"> numbers (separated by single spaces). These numbers are the encrypted message from left to right. Each of these numbers is a non-negative integer less than <IMG WIDTH="36" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ 1000$"> .<BR><BR><P><B>Output</B><BR>For each test case, output one line containing the <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/himg1.gif ALT="$ N$"> decrypted numbers, separated by single spaces.<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>5<br />3 1 1 1 3<br />1 1 1<br /></TT><P><TT>3 0 1 1 3<br />23 42 0<br /></TT><P><TT>3 1 1 1 3<br />23 42 0<br /></TT><P><TT>4 10 2 1 9<br />1 2 3 4<br /></TT><P><TT>5 999999999 3 8 7<br />8 7 8 7 12<br /><BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>3 3 3<br />23 42 0<br />65 65 65<br />2620960 2621920 2620896 2621984<br />2425139 2372828 6040064 4331745 9713040<BR>&nbsp;</TT></DIV><P><BR><DIV ALIGN="CENTER"></DIV><BR><P></BODY></HTML>
______________________________________________________
4304||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem I</B></FONT><BR><FONT SIZE="+1"><B>Transcribed Books</B></FONT><BR></FONT></DIV><BR>Long before Gutenberg invented letterpress printing, books have been transcribed by monks. Cloisters wanted to be able to check that a book was transcribed by them (and not by a different cloister). Although watermarked paper would have been an option, the cloister preferred to use a system of hard-to-fake serial numbers for identifying their transcriptions.<P>Each serial number consists of <IMG WIDTH="20" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 10$"> single numbers <IMG WIDTH="99" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ a_1, a_2, \ldots, a_{10}$"> . Valid serial numbers satisfy <IMG WIDTH="238" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ a_1 + a_2 + \ldots + a_9 \equiv a_{10} ~({\rm
mod}~N)$"> with <!-- MATH
 $0 \le a_{10} < N$
 --><IMG WIDTH="90" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 0 \le a_{10} &lt; N$"> . The <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N$"> is specific to and only known by the cloister that has transcribed this book and is therefore able to check its origin.<BR><P>You are confronted with a pile of books that presumably have been transcribed by a single cloister. You are asked to write a computer program to determine that cloister, i.e. to calculate the biggest possible <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N$"> that makes the serial numbers of these books valid. Obviously, no cloister has chosen <IMG WIDTH="47" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N=1$"> . So if your calculations yield <IMG WIDTH="47" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N=1$"> , there must be something wrong.<P><BR><BR><B>Input</B><BR>Input starts with an integer <IMG WIDTH="9" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ t$"> on a single line, the number of test cases ( <IMG WIDTH="84" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 1
\le t \le 100$"> ). Each test case starts with an integer <IMG WIDTH="11" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ c$"> on a single line, the number of serial numbers you have to consider ( <IMG WIDTH="93" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 2 \le c \le 1000$"> ). Each of the following <IMG WIDTH="11" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ c$"> lines holds <IMG WIDTH="20" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 10$"> integer numbers <IMG WIDTH="99" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ a_1, a_2, \ldots, a_{10}$"> (<!-- MATH
 $0 \le a_i < 2^{28}$
 --> <IMG WIDTH="89" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ 0 \le a_i &lt; 2^{28}$"> ) separated by single spaces.<BR><BR><P><B>Output</B><BR>For each test case, output a single line containing the largest possible <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N$"> , so that each given serial number for that test case is valid. If you cannot find a <IMG WIDTH="47" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N &gt; 1$"> satisfying the condition for all serial numbers or if the numbers are valid independent of the choice of <IMG WIDTH="18" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/iimg1.gif ALT="$ N$"> , output ``<TT>impossible</TT>'' (without the quotes) on a single line.<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>4<br />2<br />1 1 1 1 1 1 1 1 1 9<br />2 4 6 8 10 12 14 16 18 90<br />3<br />1 1 1 1 1 1 1 1 1 1<br />5 4 7 2 6 4 2 1 3 2<br />1 2 3 4 5 6 7 8 9 5<br />2<br />1 1 1 1 1 1 1 1 1 1<br />1 1 1 1 1 1 1 1 1 0<br />2<br />2 2 2 2 2 2 2 2 2 0<br />1 1 1 1 1 1 1 1 1 1<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>impossible<br />8<br />impossible<br />2<BR>&nbsp;</TT></DIV><P><BR><DIV ALIGN="CENTER"></DIV><BR><P></BODY></HTML>
______________________________________________________
4305||||||false||||||
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><HTML><HEAD><TITLE>problem</TITLE> <META NAME="resource-type" CONTENT="document"><META NAME="distribution" CONTENT="global"><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1"><META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1"><META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css"></HEAD><BODY><P><DIV ALIGN="CENTER"><FONT SIZE="+1"><B>Problem J</B></FONT><BR><FONT SIZE="+1"><B>Wizards</B></FONT><BR></FONT></DIV><BR>All through history, some people have been interested in the solutions of polynomial equations. As everybody knows, in the Middle Ages wizards were all around. They claimed to be able to find <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> solutions to any (univariate) polynomial equation of degree <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> . Of course, they sometimes needed to include some hocus-pocus like their magic number <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ i$"> , which they say is a solution to the equation <IMG WIDTH="76" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ x^2 + 1 = 0$"> (the second solution being <IMG WIDTH="22" HEIGHT="29" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ -i$"> ).<BR><P>But there are a few equations, for which most ordinary wizards failed to give <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct solutions. Only the oldest and wisest wizards tried to be clever and bubbled something about multiplicity of roots - but nobody can possibly understand such excuses for finding fewer than <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct roots.<BR><P>Given a polynomial of degree <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> , find out if wizards can possibly find <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct roots (including the magic ones using <IMG WIDTH="9" HEIGHT="17" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ i$"> ), or if it is impossible -- even for the wizards -- to find <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct roots.<P><BR><BR><B>Input</B><BR>Input starts with the number of test cases <IMG WIDTH="9" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ t$"> ( <IMG WIDTH="84" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ 1 \leq t \leq 100$"> ) in a single line. Each test case consists of a single line that holds a series of integers (separated by single spaces). The first integer is the degree <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> ( <IMG WIDTH="80" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ 0 \le n \le 10$"> ) of the polynomial in question. It is followed by the <IMG WIDTH="41" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n+1$"> coefficients <IMG WIDTH="60" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ a_0\dots a_n$"> ( <IMG WIDTH="104" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ -30 \le a_i
\le 30$"> , <IMG WIDTH="48" HEIGHT="30" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ a_0 \neq 0$"> ) to form the equation <IMG WIDTH="120" HEIGHT="36" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ \sum_{i=0}^{n}a_ix^{n-i} = 0$"> .<BR><BR><P><B>Output</B><BR>For each test case output ``<TT>Yes!</TT>'' on a single line (without the quotes) if the wizards have a chance (provided they are as good as they claim) to find <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct roots.<BR>Print ``<TT>No!</TT>'' on a single line (again without quotes) if there is no way any wizard can possibly find <IMG WIDTH="13" HEIGHT="13" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/jimg1.gif ALT="$ n$"> distinct roots.<BR><BR><P><B>Sample Input</B><P><DIV ALIGN="LEFT"><TT>5<br />2 1 1 1<br />2 1 2 1<br />4 1 2 1 2 1<br />4 1 2 2 2 1<br />4 1 0 2 0 1<BR>&nbsp;</TT></DIV><P><B>Sample Output</B><P><DIV ALIGN="LEFT"><TT>Yes!<br />No!<br />Yes!<br />No!<br />No!<BR>&nbsp;</TT></DIV><P><BR><DIV ALIGN="CENTER"></DIV><BR><P></BODY></HTML>
______________________________________________________
4306||||||false||||||

<P>
In the year 2048 the IT community in Mars is planning to send exploration trips to find new galaxies. In order to be eligible, astronauts need to be member of the Galactic Training Program (GTP). In order to take a training course the astronaut must complain with two requirements. First the astronaut must at least have 180 days as member of the GTP, and he must have an "A" (Alfa) certification. If both requirements are met the astronaut is accepted, in other cases the astronaut is not accepted to take the training course. Your task is to read the astronauts information and determine which astronauts are accepted and assign them a number starting in 1. Do these for each group and simulation date provided. Dates are in the format DD/MM/YY. Remember that February is a special month with 28 days and ounces every four years it has 29 days.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>
The first line of the input defines how many simulations "<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>" you need to run. Following this you will find "<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>" groups, the first element being the date of the simulation follow by the list of astronauts. For each astronaut you will find the date of enrollment to the GTP, his name and his certification. Certifications are represented with one alphabet character and astronauts only have one certification at any time. The three elements of each line are separated by a space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>
For each simulation display a blank line, the date in the next line and one line for each astronaut indicating if he is accepted (or denied) and his acceptance number.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
25/09/08
12/02/08 Juan Jiménez A
06/08/08 Martha Martínez B
09/03/08 Raúl Ramírez A
03/10/08
20/08/08 Maria González A
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Current date 25/09/08
Accepted Juan Jiménez 1
Denied Martha Martínez
Accepted Raúl Ramírez 2

Current date 03/10/08
Denied Maria González
</PRE> 

<P>

______________________________________________________
4307||||||false||||||
<P>A binary clock is a clock which displays traditional sexagesimal time in a binary format. The most common binary clock uses six columns of LEDs to represent zeros and ones. Each column represents a single decimal digit, a format known as binary-coded decimal (BCD). The bottom row in each column represents 1 (or 2), with each row above representing higher powers of two, up to <SPAN CLASS="MATH">2<SUP>3</SUP></SPAN> <tex2html_verbatim_mark> (or 8). To read each individual digit in the time, the user adds the values that each illuminated LED represents, and then reads these from left to right. The first two columns represent the hour, the next two represent the minute, and the last two represent the second.<P><P><BR>For example:<P><DIV ALIGN="CENTER"><IMG WIDTH="892" HEIGHT="189" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4307.png ALT="\epsfbox{p4307.eps}"> <tex2html_verbatim_mark></DIV><P>Your task for this problem is simple: read an hour in its binary format and output its equivalent in sexagesimal time format.<P>In order to facilitate your task, each one of the six columns of LEDs than represents a single decimal digit is concatenated as shown below.<P><P><BR>For example, <TT>10:37:49</TT> would be written as:<P><TT>()(*)()()()()()(*)(*)()(*)(*)(*)(*)()()(*)()()(*)</TT><P><P><BR><B>Note:</B> Spaces between characters do not exist.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of multiple test cases. The first line of input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4307.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4307.png ALT="$ \le$">1000</SPAN> <tex2html_verbatim_mark>) which is the number of test cases that follow. Each test case consists of a single line containing a string that represents an hour in its binary format. The length of the LEDs string is guaranteed to be <SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4307.png ALT="$ \le$">54</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the case number (beginning with 1) followed by the hour in its equivalent sexagesimal time format (<SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN> <tex2html_verbatim_mark>). Follow the format shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
()(*)()()()()()(*)(*)()(*)(*)(*)(*)()()(*)()()(*)
()()()()()()()()()()()()()()()()()()()()
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10:37:49
Case 2: 00:00:00
</PRE><P>
______________________________________________________
4308||||||false||||||
<P>When playing Chinese Checkers, the objective of the game is to place one's marbles in the corner opposite of one's starting position of a pitted hexagram with form of a six-pointed star by single moves or jumps over other pieces.<P><P><BR>The rules to move the marbles through the board are:<UL><LI>You can move to any adjacent and unoccupied cell </LI><LI>If there's an unoccupied cell after an adjacent occupied cell (through a straight line), you can jump it and repeat it as many times as you need. </LI></UL><P>A naive but common way to move the pieces on the board is selecting a marble and looking for the sequence of moves that reach as close to the destination corner as possible (the cell with the highest value). Your job will be to find this route.<P>Suppose that marbles are always in three possible places: the center of the board, the origin corner and the destination corner. So you have a scenario like this.<P><DIV ALIGN="CENTER"><IMG WIDTH="977" HEIGHT="557" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4308.png ALT="\epsfbox{p4308.eps}"> <tex2html_verbatim_mark></DIV><P>The problem to solve is for a scenario with a variable number of cells, determined by the number of cells in each side of the figure.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line will contain the number of cases to solve. After this, for each case, you will have:<P><UL><LI><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of cells for each side of the scenario. <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4308.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4308.png ALT="$ \le$">30</SPAN> <tex2html_verbatim_mark>. </LI><LI>In the next line there is a list of occupied cells. </LI><LI>In the next line there is a list of origin positions. </LI></UL><P>You can assume that none of the origin positions are in the list of occupied cells.<P>None line will be more than 2000 characters<P>There's a blank line to separate each test case<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>Print<P><P><BR><TT>Case #<SPAN CLASS="MATH">&lt; <I>number</I> &gt;</SPAN> <tex2html_verbatim_mark>:</TT><P><P><BR>for each test case. In the next line print for each origin position the cell closest to the destination cell that can be reached. If there's more than one cell that has the same distance to the destination, print the one with the highest value. Let's define the distance to destination as the minimum number of moves from the origin to the destination cell ignoring occupied cells, for example 16, 17, 18 and 19 are 3 moves far from 25.<P>Print a blank line to separate the test cases.<P><P><BR><B>Note:</B> The sample input corresponds to the above figure, with the first origin cell (in the list) corresponding to the blue marble in the figure. Note that this marble can move from 1 to 25 through the sequence 1 - 4 - 6 - 13 - 20 - 25.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
5
2 5 9 7 17 21 23 24
1 11 8 16
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
Case #1:
25
25
13
20
</PRE><P>
______________________________________________________
4309||||||false||||||
<P>You are given a connected undirected graph <SPAN CLASS="MATH"><I>G</I> = (<I>V</I>, <I>E</I>)</SPAN> <tex2html_verbatim_mark> , and a list of special nodes. This list gives the order in which the special nodes must be visited.<P>Your task is to count the number of Hamiltonian cycles such that the special nodes are visited in order. To avoid confusions with the rotations the cycle always start at the first special node.<P>A Hamiltonian path is a path in an undirected graph which visits each vertex exactly once.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The first line will be the number of test cases. For each test case you will receive <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4309img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4309img1.png ALT="$ \le$">15</SPAN> <tex2html_verbatim_mark>), the number of nodes. Then <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> numbers, where the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th position of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line is 1 if there is a connection between the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th node and the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th node, 0 if there is not connection. Then <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4309img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4309img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark>) the number of special nodes, followed by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines indicating the numbers of the special nodes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The number of Hamiltonian cycles asked in the description. As the result could be a large number print the result modulo 98765431.<P><P><BR><B>Explanations:</B><P>First test case: 1 0 3 2, 1 0 2 3, 1 2 0 3, 1 2 3 0, 1 3 0 2, 1 3 2 0<P>Second test case: 0 1<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
4
0 1 1 1
1 0 1 1
1 1 0 1
1 1 1 0
2
1
2
2
0 1 
1 0
1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6
1
</PRE><P>
______________________________________________________
4310||||||false||||||
<P>John has a number that can be modified by changing the position of its digits. The rules are the following: if one digit is in position <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> it can only be changed to a position <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> if and only if <SPAN CLASS="MATH">| <I>A</I> - <I>B</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$"><I>k</I></SPAN> <tex2html_verbatim_mark> (namely, only if the absolute difference of <SPAN CLASS="MATH"><I>A</I> - <I>B</I></SPAN> <tex2html_verbatim_mark> is less or equal to one given <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>). John wants to know how many numbers can be generated that satisfy the property of being multiples of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P>Besides that, John he wants to know the minimal of number that satisfies the above restriction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Each input test case consists on the following: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$">10<SUP>1000</SUP></SPAN> <tex2html_verbatim_mark>), <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$">3</SPAN> <tex2html_verbatim_mark>) and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 < M \le 100$
 --> <SPAN CLASS="MATH">0 &lt; <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4310img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case you must be print the number of numbers that you found modulo 10007 and the minimal number of them, otherwise print `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
12342132111111 0 33
12342132111111 0 9
12342132111111 3 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 12342132111111
0 -1
5625 12122341131111
</PRE><P>
______________________________________________________
4311||||||false||||||
<P>Given a list of courses, which contain the name of the course, the points awarded by taking the course and the points needed before you can take the course, follow by a list of people trying to take courses. Determine whether a person can take a course or not, based on the points previously earn by each person.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>The input consists of: The number of runs. Follow by a list of courses, consisting of course name, the points awarded by the course and the points needed to take the course. Follow by a list of persons, each line with the person name, his points and the name of the course which the person desired to take. There is a blank line before the second list and a blank line after each run.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>The list of the people with `<TT>Accepted</TT>' or `<TT>Refused</TT>' classification and the new credits after the course has been taken. The outputs of two consecutive runs will be separated by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
POO 10 0
ALGORITHMS 10 0
DATA STRUCTURES 10 0
CVP 10 30
LINEAR ALGEBRA 10 30

Javier Jimenez 10 CVP
Arturo America 0 POO
Carlos Calzada 10 ALGORITHMS
Carlos Calzada 20 POO
Carlos Calzada 10 DATA STRUCTURES
Felipe Wong 0 ALGORITHMS
Gonzalo Alvarez 50 CVP
Maria Perez 30 CVP
Alma Garcia 20 LINEAR ALGEBRA
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Refused Javier Jimenez 10
Accepted Arturo America 10
Accepted Carlos Calzada 20
Accepted Carlos Calzada 30
Accepted Carlos Calzada 20
Accepted Felipe Wong 10
Accepted Gonzalo Alvarez 60
Accepted Maria Perez 40
Refused Alma Garcia 20
</PRE><P>
______________________________________________________
4312||||||false||||||

<P>
In the 17th century, with thunderous noise, dense smoke and blazing fire, battles on the sea were just the same as those in the modern times. But at that time, the cannon were extremely simple. It was just like an iron cylinder, with its rearward end sealed and forward end open. There was a small hole at the rearward end of it, which was used to install the fuse. The cannons on the warships were put on small vehicles which had four wheels and the shells were iron spheres with gunpowder in them. 

<P>
At that time, it was said that there was an intelligent captain, who was also a mathematician amateur. He liked to connect everything him met to mathematics. Before every battle, he often ordered the soldiers to put the shells on the deck and make those shells to form shell pyramids. 

<P>
Now letâs suppose that a shell pyramid has four layers, and there will be a sequence of ordinal numbers in every layer. They are as the following figure:

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4312.eps}$
 -->
<IMG
 WIDTH="751" HEIGHT="203" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4312.png
 ALT="\epsfbox{p4312.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
In the figure, they are the first layer, the second layer, the third layer and the fourth layer respectively from the left to the right. 

<P>
In the first layer, there is just 1 shell, and its ordinal number is 1. In the second layer, there are 3 shells, and their ordinal numbers are 1, 2, and 3. In the third layer, there are 6 shells, and their ordinal numbers are 1, 2, 3, 4, 5, and 6. In the fourth layer, there are 10 shells, and their ordinal numbers are shown in the figure above. 

<P>
There are also serial numbers for the whole shell pyramid. For example, the serial number for the third shell in the second layer is 4, the serial number for the fifth shell in the third layer is 9, and the serial number for the ninth shell in the fourth layer is 19. 

<P>
There is also a interrelated problem: If given one serial number <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, then we can work out the <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>-th shell is in what layer, what row and what column. Assume that the layer number is <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, the row number is <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark> and the column number is <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>, therefore, if <SPAN CLASS="MATH"><I>s</I> = 9</SPAN>
<tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>i</I> = 4</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>j</I> = 4</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I> = 3</SPAN>
<tex2html_verbatim_mark>.

<P>

<P>
<BR>
Now let us continue to tell about the story about the captain. 

<P>
A battle was going to begin. The captain allotted the same amount of shells to every cannon. The shells were piled on the deck which formed the same shell pyramids by the cannon. While the enemy warships were near, the captain ordered to fire simultaneously. Thunderous sound then was heard. The captain listened carefully, then he knew that how many shells were used and how many were left. 

<P>
At the end of the battle, the captain won. During the break, he asked his subordinate a question: For a shell pyramid, if given the serial number <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>, how do you calculate the layer number <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, the row number <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark> and column number <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
For a shell pyramid which is big enough, a integer is given, and this integer is the serial number <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> (<SPAN CLASS="MATH"><I>s</I> &lt; 2<SUP>63</SUP></SPAN>
<tex2html_verbatim_mark>). There are several test cases. Input is terminated by the end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, output the corresponding layer number <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, row number <SPAN CLASS="MATH"><I>j</I></SPAN>
<tex2html_verbatim_mark> and column number <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
19
75822050528572544
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4 3
769099 111570 11179
</PRE>

<P>

______________________________________________________
4313||||||false||||||

<P>
What a nice day! The sky is blue, and the sea is calm. It is a day that is suitable for marine navigation training. A training ship of a Naval Training School sails out from the naval port and arrives at a sea area. The navigation instructor is not only an expert in navigation but also an amateur mathematician. The instructor gives the practice assignment as soon as the first student stands at the position of the navigator: First, navigates 1 nautical mile to the east, and then 2 nautical miles to the south, finally 4 nautical miles to the west, and stops at a certain place. The first student accomplishes the task successfully. Then the second student takes the place, and the instructor gives him a new practice assignment: Firstly, navigates 1 nautical mile to the east, then 2 nautical miles to the south, and then 3 nautical miles to the west, finally 3 nautical miles to the north, and stops at a fixed place. Just like this, the students drive the training ship to accomplish the assignment one by one. There is a student who is interested in numbers and taking records. He writes down the first sequence 1, 2, and 4 as soon as the first student accepts the assignment. Later, he writes down the second sequence 1, 2, 3, and 6 when the second student accepts the assignment. As a mathematic lover, the student always connects the numbers to some mathematic problems. When he writes down the first sequence, 1, 2, and 4, he figures out that every number in the sequence is the divisors of 4, and 4 is also the last number in the sequence. When he writes down the second sequence 1, 2, 3 and 6, he also figures out that every number in the sequence is the divisors of 6, and 6 is also the last number in the sequence. After all the students have finished the assignment, the student looks at the record and comes to the conclusion followed: There is one thing in common for the assignments that the instructor has given to the students, that is, take the direction turning point as the gap, and the sailing distance in all directions form a sequence, every number in the sequence is the divisor of the last one. 

<P>

<P>
<BR>
The marine navigation training finishes. On the way back, the students have a good time, singing, talking, laughing, and appreciating the sea scenery. The student shows the instructor the records and tells him his findings. The instructor laughs and says to the student, ``Well done! You like taking records and thinking, and then finding out something from it. It is a good habit, and also a scientific habit." The instructor then continues, ``Just like science does not have limit, the scientific questions do not have limit, either. The question we have just discussed will not end, and we can also pose new questions." 

<P>

<P>
<BR>
The following is the new question the instructor raises: 

<P>
First, we give a new definition: For a positive integer, if it has <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> different divisors, then it is called a <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>-dimension number. 

<P>
For instance, the positive integer 4 has three divisors, 1, 2and 4, so 4 is a 3-dimension number. The positive integer 6 has four divisors, 1, 2, 3and 6, so 6 is a 4-dimension number. 

<P>

<P>
<BR>
Now a question is posed: how to work out the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-th <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>-dimension number? <!-- MATH
 $(n<10000, K_{max} \le 100$
 -->
<SPAN CLASS="MATH">(<I>n</I> &lt; 10000, <I>K</I><SUB>max</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4313img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, here <SPAN CLASS="MATH"><I>K</I><SUB>max</SUB></SPAN>
<tex2html_verbatim_mark> is the greatest prime divisor of <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>). And you can assume if <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> is a <SPAN CLASS="MATH"><I>k</I></SPAN>
<tex2html_verbatim_mark>-dimension number, it doesn't exceed 3-dimension. 

<P>

<P>
<BR>
For example, if it is required to work out the second 3-dimension number, that is to say when <SPAN CLASS="MATH"><I>n</I> = 2</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I> = 3</SPAN>
<tex2html_verbatim_mark>, then the answer is 9. Because 4 is the first 3-dimension number, and 9 has three common divisors 1, 3 and 9. Therefore, 9 is the second 3-dimension number. 

<P>
The student thinks: if <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> are small enough, we can work out easily. Otherwise, we have to turn to the computer for <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> are too big to deal with. 

<P>
He begins to think it over on the ship.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. Each case takes up a line, contains two positive integers; they are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark> respectively. Input is terminated by the end of the file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output the <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>-th <SPAN CLASS="MATH"><I>K</I></SPAN>
<tex2html_verbatim_mark>-dimension number, each result takes up one line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 3 
1 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 
6
</PRE>

<P>

______________________________________________________
4314||||||false||||||
<P>The ocean is a treasure house of resources and the development of human society comes to depend more and more on it. In order to develop and utilize marine resources, it is necessary to build mining stations on the sea. However, due to seabed mineral resources, the radio signal in the sea is often so weak that not all the mining stations can carry out direct communication. However communication is indispensable, every two mining stations must be able to communicate with each other (either directly or through other one or more mining stations). To meet the need of transporting the exploited resources up to the land to get put into use, there build <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ports correspondently along the coast and every port can communicate with one or more mining stations directly.<P>Due to the fact that some mining stations can not communicate with each other directly, for the safety of the navigation for ships, ships are only allowed to sail between mining stations which can communicate with each other directly.<P>The mining is arduous and people do this job need proper rest (that is, to allow the ship to return to the port). But what a coincidence! This time, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vessels for mining take their turns to take a rest at the same time. They are scattered in different stations and now they have to go back to the port, in addition, a port can only accommodate one vessel. Now all the vessels will start to return, how to choose their navigation routes to make the total sum of their sailing routes minimal.<P>Notice that once the ship entered the port, it will not come out!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Every test case begins with four integers in one line, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4314img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4314img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4314img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4314img1.png ALT="$ \le$">200)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> indicates <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vessels and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ports, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> indicates <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> mining stations, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> indicates <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> edges, each edge corresponding to the link between a mining station and another one, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> indicates <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> edges, each edge indicating the link between a port and a mining station. The following line is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers, each one indicating one station that one vessel belongs to. Then there follows <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines, each line including 3 integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, indicating the fact that there exists direct communication between mining stations <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> and the distance between them is <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>. Finally, there follows another <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> lines, each line including 3 integers <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, indicating the fact that there exists direct communication between port <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> and mining station <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> and the distance between them is <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>. In addition, mining stations are represented by numbers from 1 to <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>, and ports 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>. Input is terminated by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each test case outputs the minimal total sum of their sailing routes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 5 5 6 
1 2 4 
1 3 3 
1 4 4 
1 5 5 
2 5 3 
2 4 3 
1 1 5 
1 5 3 
2 5 3 
2 4 6 
3 1 4 
3 2 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13
</PRE><P>
______________________________________________________
4315||||||false||||||

<P>
Li Zhixiang have already been in ``Friendship" ocean-going freighter for three months. The excitement has gradually disappeared. He stands on the board, holding the railing and watching the dazzling ocean in the sun silently. Day after day, the same scenery is monotonous and tasteless, even the merry seagulls following the freighter cannot arouse his interest. Hearing the footsteps behind, he turns back to see the old captain is coming towards him. The captain has understood his idea, however, he starts a new topic with the young man. 

<P>
``Do you know how far our voyage is?" The captain asks. Li Zhixiang feels ashamed because he can not answer. 
Then the captain says with a smile, ``5050 miles. Do you still remember the story of 5050?" This time the young man really blushes. The old captain continues saying: ``You definitely know the story of 5050. When the German mathematician, ``the prince of mathematicians", Gauss was 10 years old ...'' Young man remembers this story and goes on to tell, ``When Gauss was 10 years old, he could add a list of integers from 1 to 100 in a few seconds, which shocked the teachers." The old captain adds, ``Gauss has many other stories like this. When he entered the university at the age of 17, he was able to construct heptadecagon by compass and straightedge. His university teachers were also impressed by his ability. Not only could college graduate students fail to do it, but also they felt hard to understand Gauss's constructing process." 

<P>

<P>
<BR>
At this time, vice-captain greets the old captain. The old captain says to Li Zhixiang: ``Come over to my office tonight, let's continue the conversation." It is still calm and tranquil in the evening. The freighter travels smoothly on the sea in the silver moonlight. The captain tells the young man the following words. 

<P>
``Among the mathematicians through the ages, there are three greatest mathematicians: Archimedes, Newton and Gauss. 
Most of Gauss's mathematical achievements are difficult to understand. Nevertheless, there are some comparatively easy. 
For instance, when it comes to solving multivariate system of linear equations, there is a solution called 
``Gauss Elimination". In the navigation business, many problems can be solved by ``Gauss elimination". 
If you are interested in it, I will show you a simple question. Try it."

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases. In the first line of each case, a number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicates that there are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> equations. 
The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines, each line has <SPAN CLASS="MATH"><I>n</I> + 1</SPAN>
<tex2html_verbatim_mark> numbers, <!-- MATH
 $a_{i1},a_{i2},a_{i3} \ldots a_{in}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>i1</SUB>, <I>a</I><SUB>i2</SUB>, <I>a</I><SUB>i3</SUB>...<I>a</I><SUB>in</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le i \le n)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4315img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4315img1.png
 ALT="$ \le$"><I>n</I>)</SPAN>
<tex2html_verbatim_mark>, these numbers indicate the coefficients of systems of the equations. <!-- MATH
 $a_{i1} \ast x_{1} + a_{i2} \ast x_{2} + \ldots a_{in} \ast x_{n} = b_{i}$
 -->
<SPAN CLASS="MATH"><I>a</I><SUB>i1</SUB> <TT>*</TT> <I>x</I><SUB>1</SUB> + <I>a</I><SUB>i2</SUB> <TT>*</TT> <I>x</I><SUB>2</SUB> +...<I>a</I><SUB>in</SUB> <TT>*</TT> <I>x</I><SUB>n</SUB> = <I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>. Input is terminated by the end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each given systems of equations, if there are solutions, output <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> solutions in the order of appearance in the equations (<SPAN CLASS="MATH"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4315img1.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>), each solution number is in one line. If solution is not integer, show it in fraction. If no solution, output ``<TT>No solution.</TT>" Leave a blank line after each case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
1000000000000000000000000 1000000000000000000000000 1000000000000000000000000 
-1000000000000000000000000 1000000000000000000000000 0 
1 
0 4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1/2 
1/2 

No solution.
</PRE>

<P>

______________________________________________________
4316||||||false||||||
<P>A deep-sea salvage company found out that there was a sunken ship in some deep-sea area of the Pacific with a case of priceless treasure in it. The senior leaders concluded as followed:<P>There may be some sea monsters, they may cause some distraction. The company had some most advanced intelligent underwater robots. They were equipped with enough weapons to kill the monster.<P>After they research a map, they got information as follow (according to the Sample Input): `<TT>S</TT>' indicated the starting place. `<TT>E</TT>' indicated the place of the treasure case. `<TT>D</TT>' indicated the doors of the rooms in the ship. `<TT>K</TT>' indicated the keys which were needed while opening the doors. `<TT>H</TT>' indicated the stairs went up. `<TT>L</TT>' indicated the stairs went down. `<TT>#</TT>' indicated the walls which separated the rooms. Every lowercase in the map indicated a monster.<P>The enclosed space formed by the doors and the walls was called a separated room. Entering a room needed a key `<TT>K</TT>' to open a door `<TT>D</TT>'. After that, the key could not be used any more, the door would be open for ever, and there would be no need to use the key. The total number of rooms in the ship was not exceeding 30, the total number of the monsters in the ship was not exceeding 26, and the number of the monsters in each room would not exceed 3. There was no monster in the rooms where `<TT>S</TT>' and `<TT>E</TT>', `<TT>H</TT>' and `<TT>L</TT>' were in.<P>The advanced intelligent underwater robot carried a machine gun whose cartridge clip capacity was 100 bullets and enough spare ammunition. It could re-load the bullets if given a chance. The surface of its body was equipped with 100 components. If all the components were destroyed while fighting with the monster, the robot could not function any more and would sink into the sea for ever. If only a part of the components was destroyed, the robot could recover if given a chance.The robot could attack the monsters in two ways; one is feign attack, and the other fierce attack. The feign attack would cause 1 reduction of the monsters' life value, and the fierce attack would cause a certain amount of deduction of the monsters' life value according to the degree of the fierce attack. The robot had 10 kinds of fierce attack tactics at most. Every attack tactics differed in bullet consumption and the certain reduction of the monsters' life value. For example, a certain kind of attack tactics would consume 30 bullets, and reduce 35 life value of the monster.<P>The life of the monster was so limited that when the injuries accumulated to a certain amount it would be killed. Suppose its life value was 100, and every attack would reduce a certain amount of life value.<P>When robot enters the treasure vessel, it searches the rooms one by one. As soon as it encounters the monsters, it will attack the monsters immediately. By consuming a certain amount of ammunition, a certain amount of the life value of the monsters is reduced. And then, the monsters attack the robot and destroy a certain number of robot's parts. Then they attack each other alternately like this. However, each time the robot launches attack firstly. If there are two or more monsters, the robot must kill the first one before another attack, and the monsters won't help each other in the battle.<P>The choice of the order of attack is decisive when a number of monsters are in a room, because it closely relates with the final result of this battle. The robot itself and machine guns it takes possess the capacity of restoration. The robot will re-load 2 bullets when it launches an attack. In the same room, the robot will repair 10 damaged parts of the body surface and re-filled cartridges after it kills a monster. The robot can't leave the room until all monsters are eradicated. At the time he leaves the room, 100 damaged parts are repaired and 100 cartridges are refilled again. It should be noted that, under no circumstances will the robot's parts and bullets of cartridges be more than 100.<P>Now intelligent underwater robot has been put into the sea, gradually approaching the location of the treasure vessel. Whether it can eradicate deep-sea monsters, and return the treasure box is the problem that you are supposed to resolve.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The first line of each case has 3 positive integers <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 \le k \le 3, 1 < n, m \le 100)$
 --><SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$">3, 1 &lt; <I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, indicating that the deep-sea shipwreck is of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> floors, each floor is a maze composed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> columns. (The Sample Input map is seen as below). That is, the maze is composed by characters of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, and each line has <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters. The following line has an integer <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$"><I>p</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark>, indicating that there are <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> kinds of fierce attack tactics for the robot. Then there are a lines and each line has two positive integers, indicating the consumption of the number of bullets and reduction of the life value of the monsters as a result of injury by the robot's tactics. Then there is an integer <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$"><I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4316img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark> taking up one line to indicate that there are <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> monsters in the treasure vessel. The following are <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> lines, and each line has one positive integer, indicating the number of damaged parts of the robot by those <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> monsters for one attack. Monsters are expressed in lowercase letters which are formed as a sequential increase from latter ``a" to the letter ``z". For example, when <SPAN CLASS="MATH"><I>q</I> = 10</SPAN> <tex2html_verbatim_mark>, then the names of the monsters are a, b, c, d, e, f, g, h, i, j, then the 10 lines of positive integers are the number of destroyed parts of robot as the result of the attack of those 10 monsters. Finally, there are <SPAN CLASS="MATH"><I>k</I> <TT>*</TT> <I>n</I></SPAN> <tex2html_verbatim_mark> lines, every <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines indicates a floor of the ship, each line has <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters. The <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> floors are given from high to low. Input is terminated by the end of the file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For Each test case, if it can arrive ``<TT>E</TT>" place, then output ``<TT>Yes</TT>", or output ``<TT>No</TT>". Each output takes up one line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 5 10 
0 
0 
##########  
#S #K # E# 
#  #K #  # 
#  D  D  # 
########## 
3 5 10 
1 
1 10 
3 
1 
2 
3 
########## 
#  #aKKKK# 
#LKDcKKKK# 
####bKKKK# 
########## 
########## 
#    DL K# 
#H ####### 
#  D  D E# 
########## 
########## 
#        # 
#  H     # 
#  S     # 
##########
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
No 
Yes
</PRE><P>
______________________________________________________
4317||||||false||||||

<P>
A luxury yacht with 100 passengers on board is sailing on the sea in the twilight. The yacht is ablaze with lights and there comes out laughers and singing from the hall where an evening party is in full swing. People are singing, dancing and enjoying themselves. 

<P>
The yacht is equipped with the most advanced navigation and driving system which can all be manipulated by a computer. When the captain notices that there is only gentle breeze and the sea waves are not high, he starts the autopilot. The yacht sails forward smoothly, ploughs the waves. When itâs completely dark, the passengers start to feel a little funny for sudden forward rushes or sudden decelerations or slight swings. The captain immediately walks to the driving platform and switches the autopilot to human manipulation. The yacht returns back to normal and the party restarts. Laughers come back, too. 

<P>
The captain summons the engineer on board to do a thorough check of the navigation system. It turns out that only the computer is out of order, but the exact failure is still unclear. There is a computer scientist among the passengers who is also invited to the cab to give a hand. He first inputs several groups of data to test the computer. When he inputs 1+2+3, the computer outputs 6, which is exactly right. But when he inputs 4+5+6, the computer outputs 5, which is wrong. Then he inputs 12+13+14, and gets 39, another right answer, while he inputs 14+15+16, and gets 35, another wrong answer. After the test, the computer scientist says smilingly: ``the failure is clear now. The computer's adder can not carry." After excluding the failure, the captain restarts the autopilot and the yacht returns back to normal, sailing smoothly on the sea. 

<P>

<P>
<BR>
The captain and the engineer invite the computer scientist to sit down and have a talk. The computer scientist tells a story as following: 

<P>
A former mathematician defined a kind of simple addition expression. 

<P>
If there is an expression <!-- MATH
 $(i) + (i+1) + (i+2)$
 -->
<SPAN CLASS="MATH">(<I>i</I>) + (<I>i</I> + 1) + (<I>i</I> + 2)</SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4317img1.png
 ALT="$ \ge$"> 0</SPAN>
<tex2html_verbatim_mark>, when carried out additive operations, no position 
has a carry, it is called simple addition expression. 

<P>

<P>
<BR>
For instance, when <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> equals 0, 0+1+2 is a simple addition expression, meanwhile when <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> equals 11, 11+12+13 is a simple addition expression, too. Because of that no position has a carry. 

<P>
However, when <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> equals 3, 3+4+5 is not a simple addition expression, that is because 3+4+5 equals 12, 
there is a carried number from unit digit to tens digit. In the same way, when <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> equals 13, 13+14+15 
is not a simple addition expression, either. However, when <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> equals 112, 112+113+114 is a simple 
addition expression. Because 112+113+114 equals 339, there is no carry in the process of adding. 

<P>

<P>
<BR>
When the students have got the definition of simple addition expression, the mathematician puts forward a new question: for a positive integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, how many simple addition expressions exist when <SPAN CLASS="MATH"><I>i</I> &lt; <I>n</I></SPAN>
<tex2html_verbatim_mark>. In addition, <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> is the first number of a simple addition expression. 

<P>
When the value of <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is large enough, the problem needs to be solved by means of computer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases, each case takes up a line, there is an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(n<10^{10})$
 -->
<SPAN CLASS="MATH">(<I>n</I> &lt; 10<SUP>10</SUP>)</SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Output the number of all simple addition expressions when <SPAN CLASS="MATH"><I>i</I> &lt; <I>n</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 
3 
4 
10 
11
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 
3 
3 
3 
4
</PRE>

<P>

______________________________________________________
4318||||||false||||||

<P>
In times of peace, various countries have held regular maneuvers to maintain military's vigilance. There is a navy fleet in a certain country which also starts a new round imaginary naval battle. 

<P>
At the maneuver stage, the admiral intends to assess the combat effectiveness of two warships, ``Victory" and ``Glory", so he lets two warships carry out countering exercises. Both of the warship commanders are young and promising, who graduated from naval academy as outstanding students. Not only have they had rich navigation direction experiences, but also have profound scientific knowledge, especially in mathematics. 

<P>
The admiral appoints one marine area dotted with many islets. Suppose all these islets are occupied by the enemy, and there are positive integers of enemy firebases. The hypothetical exercise situations given by the admiral and the rule of the competition are as follows: 

<P>
<DL COMPACT>
<DT>(1)</DT>
<DD>All the occupied islets are connected. There are some routes among these islets, but the route from one islet to another islet is unidirectional. In other words, if we take an islet as a node and an islet route as an edge, then we will get a directed non-cyclic connected graph. 
</DD>
<DT>(2)</DT>
<DD>There is a unique 1st islet in the graph. If we start from this islet, we can reach any other islet. (maybe the 1st islet is not the islet which is numbered 1) 
</DD>
<DT>(3)</DT>
<DD>At the beginning of the maneuver, two warships simultaneously sail to the 1st islets and eliminate all enemy firebases together. 
</DD>
<DT>(4)</DT>
<DD>The two warships, ``Victory" and ``Glory" take turns to navigate and exchange as soon as they arrive at an islet, then they move forward together. But each time they can only go along the unidirectional route, sail to the islet directly connected to the current, and eliminates all the enemy firebases on the islet. By the way, when start from 1st islet, ``Victory" first navigates. 
</DD>
<DT>(5)</DT>
<DD>Because each route is unidirectional, and graph is non-cycle, therefore the maneuver terminates when the two warships fail to go on navigating. 
</DD>
<DT>(6)</DT>
<DD>When the maneuver ends, sum the numbers of eliminated enemy firebases on the routing path. If the number is greater than or equal to certain number <SPAN CLASS="MATH"><I>f</I></SPAN>
<tex2html_verbatim_mark> assigned by the admiral, then ``Victory" wins. Otherwise, ``Glory" wins. 
</DD>
</DL>

<P>

<P>
<BR>
The warship commanders are both mathematicians. After being assigned to such task, they see it is a Graph Theory problem. On the first simple directed non-cyclic connected graph, each node has a certain positive integer,it indicates the enemy firebases. The assignment is that two captains take turn to move forward along the directed edge until they are unable to do so. Then sum the total positive integers of the nodes on the routing path. Compare the number with the certain number <SPAN CLASS="MATH"><I>f</I></SPAN>
<tex2html_verbatim_mark>, and decides the final winning or losses. Therefore, when it is the time for their own navigation, they are supposed to choose the route to win the final success.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are several test cases, in each case there are three positive integers <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN>
<tex2html_verbatim_mark> in first line. <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> indicates there are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1< n < 10000)$
 -->
<SPAN CLASS="MATH">(1 &lt; <I>n</I> &lt; 10000)</SPAN>
<tex2html_verbatim_mark> nodes in the graph. The node serial number is arranged from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> indicates that there are <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> edges in the graph. The following line has <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> positive integers, which indicate in sequence the positive integers in the nodes. Finally, there are <SPAN CLASS="MATH"><I>m</I></SPAN>
<tex2html_verbatim_mark> lines, and each line has two positive integers <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le a, b \le n)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4318img1.png
 ALT="$ \le$"><I>a</I>, <I>b</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4318img1.png
 ALT="$ \le$"><I>n</I>)</SPAN>
<tex2html_verbatim_mark>, indicating there is a directed edge from the <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> node to the <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> node. Input is terminated by the end of file.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
To each group of the test case, if ``Victory" wins, then output ``<TT>Victory</TT>". Otherwise, output ``<TT>Glory</TT>". 

<P>
The output each case takes up one line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 4 7 
2 2 2 2
4 2 
2 1 
4 3 
3 1 
4 5 6 
1 2 3 4
1 2 
1 3 
1 4 
2 3 
4 3
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Glory 
Victory
</PRE>

<P>

______________________________________________________
4319||||||false||||||
<P>During the process of the military exercise, there is a ship on the sea level .The ship will go to certain place to carry out a task. For every action, the ship has two ways to sail. They are normal sailing and accelerated sailing. The normal speed of the ship is certain, when the ship sails normally, it can only move 1 step to the adjacent normal sea level. The ship can also accelerate. There are 2 kinds of accelerated sailings, one is moving forward <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> steps <SPAN CLASS="MATH">(<I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4319img1.png ALT="$ \le$">5)</SPAN> <tex2html_verbatim_mark> in a straight line, and it must move forward <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> steps <SPAN CLASS="textbf">exactly</SPAN> every time it accelerates, The <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> steps must be on the normal sea level, otherwise, it can not accelerate. The other is accelerating while getting through the undercurrent. There are a lot of undercurrents on the sea, and entering the undercurrent area needs to accelerate when the ship is 1 step to the undercurrent. However, the ship itself will be damaged more or less by the undercurrent, After entering the undercurrent, the speed of the ship will become normal immediately. Every time it accelerates, the ship has to consume a certain B energy, and when it starts up ,it carries certain B energy.<P>While the ship is sailing on the sea, it needs to consume a certain A energy. One unit of distance will consume one unit of A energy, and when the ship starts up, it carries enough A energy.<P>There are many reefs on the sea, and the ship can not get through.<P>Now the ship is required to sail to the certain place, of course, to minimize the damage to the ship itself is a priority because the cost of ships is very expensive. The damage is, of course, the smaller, the better. At the same time, an attempt should be made to control the consumption of A energy to the smallest amount during the whole process because the cost of A energy is much more expensive than that of B energy, and you can use B energy which the ship carried when it started up as you wish.<P>Now the question is to work out the minimal times of action from the departure point to the destination under the condition that to minimize the damage to the ship is a priority and then the consumption of A energy to the smallest degree.<P><DIV ALIGN="CENTER"><IMG WIDTH="466" HEIGHT="476" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4319img1.png ALT="\epsfbox{p4319.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases, the first line contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, indicates the number of test cases. In each case the first line includes two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4319img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4319img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, which indicate the size of the sea level for military exercises, and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> columns are the current state of the sea level (`<TT>S</TT>' indicates the ship's initial position, `<TT>E</TT>' indicates the destination place, `<code>#</code>' indicates the reefs, `<code>*</code>' indicates the undercurrent , ` ' the normal sea level), followed a line with a number <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> in it, it indicates the distance of the first kind of acceleration, then another line includes two integers, indicate that the initial value of the B energy and the value of the B energy needed while accelerating every time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output an integer to indicate the smallest times of action, and if can not reach the task place, then output ``<TT>can not reach!</TT>"<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5 10
##########
#E       #
#*###### #
#S       #
##########
5 
10 2 
6 10 
##########
#E       # 
#*######*# 
#*######*# 
#S       #
##########
5 
3 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 
can not reach!
</PRE><P>
______________________________________________________
4320||||||false||||||

<P>
Wang Haiyang is a strong and optimistic Chinese youngster. Although born and brought up in the northern inland city Harbin, he has deep love and yearns for the boundless oceans. After graduation, he came to a coastal city and got a job in a marine transportation company. There, he held a position as a navigator in a freighter and began his new life. 

<P>
The cargo vessel, Wang Haiyang worked on, sails among 6 ports between which exist 9 routes. At the first sight of his navigation chart, the 6 ports and 9 routes on it reminded him of Graph Theory that he studied in class at university. In the way that Leonhard Euler solved The Seven Bridges of KÃ¶nigsberg, Wang Haiyang regarded the navigation chart as a graph of Graph Theory. He considered the 6 ports as 6 nodes and 9 routes as 9 edges of the graph. The graph is illustrated as below.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4320.eps}$
 -->
<IMG
 WIDTH="370" HEIGHT="140" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4320.png
 ALT="\epsfbox{p4320.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
According to Graph Theory, the number of edges related to a node is defined as Degree number of this node. 

<P>
Wang Haiyang looked at the graph and thought, ``If arranged, the Degree numbers of all nodes of graph G can form such a sequence: 4, 4, 3, 3, 2, 2, which is called the degree sequence of the graph. Of course, the degree sequence of any simple graph (according to Graph Theory, a graph without any parallel edge or ring is a simple graph) is a non-negative integer sequence" 

<P>
Wang Haiyang is a thoughtful person and tends to think deeply over any scientific problem that grabs his interest. So as usual, he also gave this problem further thought, ``as we know, any a simple graph always corresponds with a non-negative integer sequence. But whether a non-negative integer sequence always corresponds with the degree sequence of a simple graph? That is, if given a non-negative integer sequence, are we sure that we can draw a simple graph according to it." 

<P>
Let's put forward such a definition: provided that a non-negative integer sequence is the degree sequence of a graph without any parallel edge or ring, that is, a simple graph, the sequence is draw-possible, otherwise, non-draw-possible. Now the problem faced with Wang Haiyang is how to test whether a non-negative integer sequence is draw-possible or not. Since Wang Haiyang hasn't studied Algorithm Design course, it is difficult for him to solve such a problem. Can you help him?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark>, indicates the number of test cases. In each case, there are <SPAN CLASS="MATH"><I>n</I> + 1</SPAN>
<tex2html_verbatim_mark> numbers; first is an integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I> &lt; 1000)</SPAN>
<tex2html_verbatim_mark>, which indicates there are <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers in the sequence; then follow <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integers, which indicate the numbers of the degree sequence.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, the answer should be ``<TT>yes</TT>" or ``<TT>no</TT>", indicating this case is ``<TT>draw-possible</TT>" or ``<TT>non-draw-possible</TT>".

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
6 4 4 3 3 2 2 
4 2 1 1 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
yes 
no
</PRE>

<P>

______________________________________________________
4321||||||false||||||
<P>When a vessel sails on the vast and boundless sea, the captain must know his position in any time. There is a technique called triangle-navigation can solves this problem.<P>Suppose there are three islands in some sea area. They form a large triangle. There is a radio navigation station respectively on each island. The navigation station sends out radio signals continuously. After the vessel receives the signals, its position can be known by calculating those three different signals.<P>There is a raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral sea area which is formed by <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> islands. Each island has a radio navigation station. The <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> islands form a raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral graph. Every three islands form a triangle division area. Vessels sailing in this triangle area should determine the position by the signals from those three radio navigation stations in the three islands.<P>Of course, all navigation triangles divided from the raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral graph can not overlap one another. Consequently, this raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral graph is divided into <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> <tex2html_verbatim_mark> triangles areas.<P><DIV ALIGN="CENTER"><IMG WIDTH="466" HEIGHT="476" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4321.png ALT="\epsfbox{p4321.eps}"> <tex2html_verbatim_mark></DIV><P>By the way, there are some smaller islets in the raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral sea area and there is no navigation station in any islet. These small islets are related with our problem, we will explain it later.<P>An experienced captain had navigated in this sea area for several years. However, he found it is improper to divide the sea area to <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> <tex2html_verbatim_mark> navigation triangles as the current scheme. After deep thinking, he put forward a new method.<P>Of course, he still divided raised <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>-multilateral graph sea area into <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> <tex2html_verbatim_mark> navigation triangles which are not overlapped one another. The three vertexes of the triangles are three islands with navigation station. According to the scheme which is put forward by the old captain, a weight value is necessary for each triangle sea division area. Calculating formula of the weight value is as follows:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>V</I> = <I>S</I> + 2 <TT>*</TT> <I>a</I> + <I>b</I></DIV><P><tex2html_verbatim_mark></P><P><P><BR>In that formula, the letter ``<SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark>" expresses the weight value of the triangle sea area, the letter ``<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>" expresses the area of that triangle sea, The letter ``<SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>" expresses the number of smaller islets inside the triangle. The letter ``<SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>" expresses the number of those small islets on the common edge between the two triangle sea areas. After calculating according to the formula above, each triangle sea area division has a weight value. The old captain thought, for the <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> <tex2html_verbatim_mark> triangle areas, there will be <SPAN CLASS="MATH"><I>n</I> - 2</SPAN> <tex2html_verbatim_mark> weight values. Among these weight values, when the difference of the maximum weight value and the minimum weight value reaches a minimum, this scheme of division is optimum. That scheme will benefit sailing most.<P>As none people can solve that problem on the vessel. Now the captain is visiting you, he hopes you can help him.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4321.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4321.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4321.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4321.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark> are provided firstly in each test case. They take up one line respectively, then <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines of data follow, there are 2 floating numbers in each line expressing coordinates of radio navigation station, then following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines, there are 2 floating numbers in every line expressing coordinates of smaller islets which are not equipped with radio navigation station. Input is terminated by end of file.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, when the difference of weight value between the maximum weight value and minimum weight value is minimum, output this difference, the result should be a floating-point-number, having 2 digits after radix point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 2 
0 0 
1 0 
1 1 
0 1 
0.2 0.2 
0.5 0.9
4 10 
0 0 
1 0 
1 1 
0 1 
0.5 0.1 
0.5 0.2 
0.5 0.3 
0.5 0.4 
0.5 0.5 
0.5 0.6 
0.5 0.7 
0.5 0.8 
0.5 0.9 
0.2 0.1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.00 
2.00

______________________________________________________
4322||||||false||||||
<P>Gabiluso is one of the greatest spies in his country. Now he's trying to complete an ``impossible" mission --- to make it slow for the army of City Colugu to reach the airport. City Colugu has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> bus stations and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> roads. Each road connects two bus stations directly, and all roads are one way streets. In order to keep the air clean, the government bans all military vehicles. So the army must take buses to go to the airport. There may be more than one road between two bus stations. If a bus station is destroyed, all roads connecting that station will become no use. What's Gabiluso needs to do is destroying some bus stations to make the army can't get to the airport in <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> minutes. It takes exactly one minute for a bus to pass any road. All bus stations are numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>.<P>The No.1 bus station is in the barrack and the No. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> station is in the airport. The army always set out from the No. 1 station.<P>No.1 station and No. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> station can't be destroyed because of the heavy guard. Of course there is no road from No.1 station to No. <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> station.<P>Please help Gabiluso to calculate the minimum number of bus stations he must destroy to complete his mission.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Input ends with three zeros.<P><P><BR>For each test case:<P>The first line contains 3 integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. <!-- MATH
 $(0 < n \le 50, 0 < m \le 4000, 0 < k < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4322img1.png ALT="$ \le$">50, 0 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4322img1.png ALT="$ \le$">4000, 0 &lt; <I>k</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark><P>Then <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines follows. Each line contains 2 integers, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>, indicating that there is a road from station No. <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> to station No. <SPAN CLASS="MATH"><I>f</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the minimum number of stations Gabiluso must destroy.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 7 3 
1 3 
3 4 
4 5 
1 2 
2 5 
1 4 
4 5 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2
</PRE><P>
______________________________________________________
4323||||||false||||||
<P>After he has learned how to play Nim game, Mike begins to try another stone game which seems much easier.<P><P><BR>The game goes like this: Two players start the game with a pile of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> stones. They take stones from the pile in turn and every time they take at least one stone. The one who goes first can take at most <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> stones for his first move. From then on a player can take at most <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> times as many stones as his opponent has taken last time. For example, if one player take <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> stones in his turn, then the other player can take at most <SPAN CLASS="MATH"><I>k</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> stones next time. The player who takes the last stone wins the game. Suppose that those two players always take the best moves and never make mistakes, your job is to find out who will definitely win the game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains a integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, indicating that there are <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> test cases following <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4323img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>.<P>Each test case is a line consisting of two integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4323img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4323img1.png ALT="$ \le$">10<SUP>8</SUP>, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4323img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4323img1.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output one line starting with `<TT>Case <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>:</TT>', <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the case number. And then, if the first player can ensure a winning, print the minimum number of stones he should take in his first turn. Otherwise, print `<TT>lose</TT>'. Please note that there is a blank following the colon.<P><P><P><BR><SPAN CLASS="textbf">Hint:</SPAN> When <SPAN CLASS="MATH"><I>k</I> = 1</SPAN> <tex2html_verbatim_mark>, the first player will definitely lose if the initial amount of stones is in the set <SPAN CLASS="MATH">{2, 4, 8, 16, 32,...}</SPAN> <tex2html_verbatim_mark>. Let's call this kind of set ``first-player-lose set".<P>When <SPAN CLASS="MATH"><I>k</I> = 2</SPAN> <tex2html_verbatim_mark>, the first-player-lose set is <SPAN CLASS="MATH">{2, 3, 5, 8, 13, 21, 34, 57...}</SPAN> <tex2html_verbatim_mark>, which happens to be the Fibonacci sequence starting from 2.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
16 1 
11 1 
32 2 
34 2 
19 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: lose 
Case 2: 1 
Case 3: 3 
Case 4: lose 
Case 5: 4
</PRE><P>
______________________________________________________
4324||||||false||||||
<P>Sheryl works for a software company in the country of Brada. Her job is to develop a Windows operating system. People in Brada are incredibly conservative. They even never use graphical monitors! So Sheryl's operating system has to run in text mode and windows in that system are formed by characters. Sheryl decides that every window has an ID which is a capital English letter (`A' to `Z'). Because every window had a unique ID, there can't be more than 26 windows at the same time. And as you know, all windows are rectangular.<P>On the screen of that ugly Windows system, a window's frame is formed by its ID letters. Fig-1 shows that there is only one window on the screen, and that window's ID is `A'. Windows may overlap. Fig-2 shows the situation that window B is on the top of window A. And Fig-3 gives a more complicated overlapping. Of course, if some parts of a window are covered by other windows, you can't see those parts on the screen.<P><P><BR><PRE>
.........................
....AAAAAAAAAAAAA........
....A...........A........
....A...........A........
....A...........A........
....AAAAAAAAAAAAA........
.........................
</PRE><P><P><BR>Fig-1<P><P><BR><PRE>
.........................
....AAAAAAAAAAAAA........
....A...........A........
....A.......BBBBBBBBBB...
....A.......B........B...
....AAAAAAAAB........B...
............BBBBBBBBBB...
.........................
</PRE><P><P><BR>Fig-2<P><P><BR><PRE>
..........................
....AAAAAAAAAAAAA.........
....A...........A.........
....A.......BBBBBBBBBB....
....A.......B........BCCC.
....AAAAAAAAB........B..C.
.......C....BBBBBBBBBB..C.
.......CCCCCCCCCCCCCCCCCC.
..........................
</PRE><P><P><BR>Fig-3<P><P><BR>If a window has no parts covered by other windows, we call it a ``top window" (The frame is also considered as a part of a window). Usually, the top windows are the windows that interact with user most frequently. Assigning top windows more CPU time and higher priority will result in better user experiences. Given the screen presented as Figs above, can you tell Sheryl which windows are top windows?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases.<P>Each test case begins with two integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4324img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4324img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, indicating that the screen has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines, and each line consists of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters.<P>The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines describe the whole screen you see. Each line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> characters. For characters which are not on any window frame, we just replace them with `<TT>.</TT>' .<P>The input ends with a line of two zeros.<P><P><BR>It is guaranteed that:<P><DL COMPACT><DT>1)</DT><DD>There is at least one window on the screen.</DD><DT>2)</DT><DD>Any window's frame is at least 3 characters wide and 3 characters high.</DD><DT>3)</DT><DD>No part of any window is outside the screen.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the IDs of all top windows in a line without blanks and in alphabet order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
9 26 
..........................
....AAAAAAAAAAAAA.........
....A...........A.........
....A.......BBBBBBBBBB....
....A.......B........BCCC.
....AAAAAAAAB........B..C.
.......C....BBBBBBBBBB..C.
.......CCCCCCCCCCCCCCCCCC.
..........................
7 25
.........................
....DDDDDDDDDDDDD........
....D...........D........
....D...........D........
....D...........D..AAA...
....DDDDDDDDDDDDD..A.A...
...................AAA... 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
B 
AD
</PRE><P>
______________________________________________________
4325||||||false||||||

<P>
Professor Jonathan is a well-known Canadian physicist and meteorologist. People who know him well call him ``Wind Chaser". It is not only because of his outstanding tornado research which is the most influential in the academic community, but also because of his courageous act in collecting real data of tornados. Actually he has been leading his team chasing tornado by cars equipped with advanced instruments hundreds of times. 

<P>
In summer, tornado often occurs in the place where Professor Jonathan lives. After several years of research, Wind Chaser found many formation rules and moving patterns of tornados. In the satellite image, a tornado is a circle with radius of several meters to several kilometers. And its center moves between two locations in a straight line, back and forth at a fixed speed. After observing a tornado's movement, Wind Chaser will pick a highway, which is also a straight line, and chase the tornado along the highway at the maximum speed of his car. 

<P>
The smallest distance between the Wind Chaser and the center of the tornado during the whole wind chasing process, is called ``observation distance". Observation distance is critical for the research activity. If it is too short, Wind Chaser may get killed; and if it is too far, Wind Chaser can't observe the tornado well. After many times of risk on lives and upset miss, Wind Chaser turns to you, one of his most brilliant students, for help. The only thing he wants to know is the forthcoming wind chasing will be dangerous, successful or just a miss.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains multiple test cases. Each test case consists of three lines which are in the following format. 

<P>

<P>
<BR>

<TABLE COLS=5>
<COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT><COL ALIGN=LEFT>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>
<SPAN CLASS="MATH"><I>x</I><SUB>w1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>w1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>w2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>w2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>v</I><SUB>w</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>x</I><SUB>t1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>t1</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>x</I><SUB>t2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>y</I><SUB>t2</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>v</I><SUB>t</SUB></SPAN>
<tex2html_verbatim_mark> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>  
<SPAN CLASS="MATH"><I>d</I><SUB>l</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP> <SPAN CLASS="MATH"><I>d</I><SUB>u</SUB></SPAN>
<tex2html_verbatim_mark> </TD><TD></TD><TD></TD><TD></TD></TR>
</TABLE>

<P>

<P>
<BR>
In the first line, <!-- MATH
 $(x_{w1}, y_{w1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>w1</SUB>, <I>y</I><SUB>w1</SUB>)</SPAN>
<tex2html_verbatim_mark> means the start position of Wind Chaser; <!-- MATH
 $(x_{w2}, y_{w2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>w2</SUB>, <I>y</I><SUB>w2</SUB>)</SPAN>
<tex2html_verbatim_mark> is another position in the highway which Wind Chaser will definitely pass through; and <SPAN CLASS="MATH"><I>v</I><SUB>w</SUB></SPAN>
<tex2html_verbatim_mark> is the speed of the car. Wind chaser will drive to the end of the world along that infinite long highway. 

<P>
In the second line, <!-- MATH
 $(x_{t1}, y_{t1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>t1</SUB>, <I>y</I><SUB>t1</SUB>)</SPAN>
<tex2html_verbatim_mark> is the start position of tornado; <!-- MATH
 $(x_{t2}, y_{t2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>t2</SUB>, <I>y</I><SUB>t2</SUB>)</SPAN>
<tex2html_verbatim_mark> is the turn-around position and <SPAN CLASS="MATH"><I>v</I><SUB>t</SUB></SPAN>
<tex2html_verbatim_mark> is the tornado's speed. In other words, the tornado's center moves back and forth between <!-- MATH
 $(x_{t1}, y_{t1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>t1</SUB>, <I>y</I><SUB>t1</SUB>)</SPAN>
<tex2html_verbatim_mark> and <!-- MATH
 $(x_{t2}, y_{t2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>t2</SUB>, <I>y</I><SUB>t2</SUB>)</SPAN>
<tex2html_verbatim_mark> at speed <SPAN CLASS="MATH"><I>v</I><SUB>t</SUB></SPAN>
<tex2html_verbatim_mark>. 

<P>
The third line shows that if the observation distance is smaller than <SPAN CLASS="MATH"><I>d</I><SUB>l</SUB></SPAN>
<tex2html_verbatim_mark>, it will be very dangerous; and if the observation distance is larger than <SPAN CLASS="MATH"><I>d</I><SUB>u</SUB></SPAN>
<tex2html_verbatim_mark>, it will be a miss; otherwise it will lead to a perfect observation.

<P>
All numbers in the input are floating numbers. 

<P>

<P>
<BR>

<!-- MATH
 $-2000000000 \le x_{w1}, y_{w1}, x_{w2}, y_{w2}, x_{t1}, y_{t1}, x_{t2}, y_{t2} \le 2000000000$
 -->
<SPAN CLASS="MATH">-2000000000<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$"><I>x</I><SUB>w1</SUB>, <I>y</I><SUB>w1</SUB>, <I>x</I><SUB>w2</SUB>, <I>y</I><SUB>w2</SUB>, <I>x</I><SUB>t1</SUB>, <I>y</I><SUB>t1</SUB>, <I>x</I><SUB>t2</SUB>, <I>y</I><SUB>t2</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$">2000000000</SPAN>
<tex2html_verbatim_mark> 
<BR><!-- MATH
 $1 \le v_{w}, v_{t} \le 20000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$"><I>v</I><SUB>w</SUB>, <I>v</I><SUB>t</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$">20000</SPAN>
<tex2html_verbatim_mark> 
<BR><!-- MATH
 $0 \le d_{l}, d_{u} \le 2000000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$"><I>d</I><SUB>l</SUB>, <I>d</I><SUB>u</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4325img1.png
 ALT="$ \le$">2000000</SPAN>
<tex2html_verbatim_mark> 

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Note:</SPAN> 

<P>

<OL>
<LI>It's guaranteed that the observation distance won't be very close to dl or du during the whole wind chasing process. There will be at least 10-5 of difference. 
</LI>
<LI>Wind Chaser and the tornado start to move at the same time from their start position.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case output one line contains one word ``<TT>Dangerous</TT>", ``<TT>Perfect</TT>" or ``<TT>Miss</TT>" which describes the prediction of the observation.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
0 0 1 0 2 
10 -5 12 7 4 
1.3 2.7 
0 0 1 0 2 
10 -5 12 7 1 
0.3 0.4
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Dangerous 
Perfect
</PRE>

<P>

______________________________________________________
4326||||||false||||||
<P>For a tree, which nodes and edges are all weighted, the ratio of it is calculated according to the following equation.<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>Ratio</I> = <IMG WIDTH="122" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="$\displaystyle {\frac{{\sum edge \ weight}}{{\sum node \ weight}}}$"></DIV><P><tex2html_verbatim_mark></P><P>Given a complete graph of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes with all nodes and edges weighted, your task is to find a tree, which is a sub-graph of the original graph, with <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> nodes and whose ratio is the smallest among all the trees of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> nodes in the graph.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains multiple test cases. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="$ \le$">15)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark>, which stands for the number of nodes in the graph and the number of nodes in the minimal ratio tree. Two zeros end the input. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> numbers which stand for the weight of each node. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain a diagonally symmetrical <SPAN CLASS="MATH"><I>n</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> connectivity matrix with each element shows the weight of the edge connecting one node with another. Of course, the diagonal will be all 0, since there is no edge connecting a node with itself.<P>All the weights of both nodes and edges (except for the ones on the diagonal of the matrix) are integers and in the range of [1, 100].<P>The figure below illustrates the first test case in sample input. Node 1 and Node 3 form the minimal ratio tree.<P><DIV ALIGN="CENTER"><IMG WIDTH="387" HEIGHT="322" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4326img1.png ALT="\epsfbox{p4326.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output one line contains a sequence of the m nodes which constructs the minimal ratio tree. Nodes should be arranged in ascending order. If there are several such sequences, pick the one which has the smallest node number; if there's a tie, look at the second smallest node number, etc. Please note that the nodes are numbered from 1.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 
30 20 10 
0 6 2 
6 0 3 
2 3 0 
2 2 
1 1 
0 2 
2 0 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 
1 2
</PRE><P>
______________________________________________________
4327||||||false||||||
<P>Panagola, The Lord of city F likes to parade very much. He always inspects his city in his car and enjoys the welcome of his citizens. City F has a regular road system. It looks like a matrix with <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> west-east roads and <SPAN CLASS="MATH"><I>m</I> + 1</SPAN> <tex2html_verbatim_mark> north-south roads. Of course, there are <SPAN CLASS="MATH">(<I>n</I> + 1)&#215;(<I>m</I> + 1)</SPAN> <tex2html_verbatim_mark> road crosses in that system. The parade can start at any cross in the southernmost road and end at any cross in the northernmost road. Panagola will never travel from north to south or pass a cross more than once. Citizens will see Panagola along the sides of every west-east road. People who love Panagola will give him a warm welcome and those who hate him will throw eggs and tomatoes instead. We call a road segment connecting two adjacent crosses in a west-east road a ``love-hate zone". Obviously there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> love-hate zones in every west-east road. When passing a love-hate zone, Panagola may get happier or less happy, depending on how many people love him or hate him in that zone. So we can give every love-hate zone a ``welcome value" which may be negative, zero or positive. As his secretary, you must make Panagola as happy as possible. So you have to find out the best route --- of which the sum of the welcome values is maximal. You decide where to start the parade and where to end it.<P>When seeing his Citizens, Panagola always waves his hands. He may get tired and need a break. So please never make Panagola travel in a same west-east road for more than <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> minutes. If it takes <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> minutes to pass a love-hate zone, we say the length of that love-hate zone is <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>. Of course you know every love-hate zone's length.<P>The figure below illustrates the case in sample input. In this figure, a best route is marked by thicker lines.<P><DIV ALIGN="CENTER"><IMG WIDTH="604" HEIGHT="279" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4327.png ALT="\epsfbox{p4327.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases. Input ends with a line containing three zeros.<P><P><BR>Each test case consists of <SPAN CLASS="MATH">2&#215;<I>n</I> + 3</SPAN> <tex2html_verbatim_mark> lines.<P>The first line contains three integers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>.<!-- MATH
 $(0 < n \le 100,0 < m \le 10000, 0 \le k \le 3000000)$
 --> <SPAN CLASS="MATH">(0 &lt; <I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4327.png ALT="$ \le$">100, 0 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4327.png ALT="$ \le$">10000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4327.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4327.png ALT="$ \le$">3000000)</SPAN> <tex2html_verbatim_mark><P>The next <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> lines stands for <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> west-east roads in north to south order. Each line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers showing the welcome values of the road's <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> love-hate zones, in west to east order.<P>The last <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> lines also stands for <SPAN CLASS="MATH"><I>n</I> + 1</SPAN> <tex2html_verbatim_mark> west-east roads in north to south order. Each line contains <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers showing the lengths (in minutes) of the road's <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> love-hate zones, in west to east order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output the sum of welcome values of the best route. The answer can be fit in a 32 bits integer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3 2 
7 8 1 
4 5 6 
1 2 3 
1 1 1 
1 1 1 
1 1 1 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
27
</PRE><P>
______________________________________________________
4328||||||false||||||
<P>John is the only priest in his town. October 26th is the John's busiest day in a year because there is an old legend in the town that the couple who get married on that day will be forever blessed by the God of Love. This year <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> couples plan to get married on the blessed day. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th couple plan to hold their wedding from time <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> to time <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. According to the traditions in the town, there must be a special ceremony on which the couple stand before the priest and accept blessings. Moreover, this ceremony must be longer than half of the wedding time and can't be interrupted. Could you tell John how to arrange his schedule so that he can hold all special ceremonies of all weddings?<P><P><BR>Please note that:<P>John can not hold two ceremonies at the same time.<P>John can only join or leave the weddings at integral time.<P>John can show up at another ceremony immediately after he finishes the previous one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases and ends with a line containing a zero. In each test case, the first line contains a integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4328img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4328img1.png ALT="$ \le$">100, 000)</SPAN> <tex2html_verbatim_mark> indicating the total number of the weddings. In the next <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each line contains two integers <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> (<!-- MATH
 $0 \le S_{i} < T_{i} \le 2147483647$
 --> <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4328img1.png ALT="$ \le$"><I>S</I><SUB>i</SUB> &lt; <I>T</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4328img1.png ALT="$ \le$">2147483647</SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test, if John can hold all special ceremonies, print ``<TT>YES</TT>"; otherwise, print ``<TT>NO</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
1 5 
2 4 
3 6 
2 
1 5 
4 6 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
NO 
YES
</PRE><P>
______________________________________________________
4329||||||false||||||
<P><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$">20000)</SPAN> <tex2html_verbatim_mark> ping pong players live along a west-east street(consider the street as a line segment). Each player has a unique skill rank. To improve their skill rank, they often compete with each other. If two players want to compete, they must choose a referee among other ping pong players and hold the game in the referee's house. For some reason, the contestants can't choose a referee whose skill rank is higher or lower than both of theirs. The contestants have to walk to the referee's house, and because they are lazy, they want to make their total walking distance no more than the distance between their houses. Of course all players live in different houses and the position of their houses are all different. If the referee or any of the two contestants is different, we call two games different. Now is the problem: how many different games can be held in this ping pong street?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, indicating the number of test cases, followed by <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines each of which describes a test case.<P>Every test case consists of <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> integers. The first integer is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, the number of players. Then <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> distinct integers <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>...<I>a</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> follow, indicating the skill rank of each player, in the order of west to east ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4329img1.png ALT="$ \le$">100000</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>i</I> = 1...<I>N</I></SPAN> <tex2html_verbatim_mark>).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line contains an integer, the total number of different games.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
3 1 2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
</PRE><P>
______________________________________________________
4330||||||false||||||

<P>
Recently, some archaeologists discovered an ancient relic on a small island in the Pacific Ocean. In the relic, they found an interesting cone shaped container with transparent bottom. The container lay on the horizontal ground with its central axis parallel to the ground. Just beside the container, they found a manual telling them something about the container. The container was a timer for a special ceremony. Ancient people filled it all with water before the ceremony, and when the ceremony began, they pulled out the plug in the small hole on the tip of the cone to let the water out. There was a horizontal line called ``sacred line" carved on the bottom of the cone, and when the water level hit that line, they pushed the plug back and ended the ceremony. But the archaeologists could not found the sacred line on that cone. In order to sell the timer at a good prize, the archaeologists wanted to recover that very important line. By the manual they figured out how much water flew out when the ceremony ended, but they don't know what to do next, so they come to you for help. 

<P>
They measures the height of the cone, and the diameter of the bottom, you should tell them the sacred line's height above the ground.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4330.eps}$
 -->
<IMG
 WIDTH="978" HEIGHT="600" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="\epsfbox{p4330.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line of the input contains an integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le T \le 20)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \le$"><I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark>, indicating the number of test cases. Each line after that is a test case. It contains three real numbers, <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le H,D \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \le$"><I>H</I>, <I>D</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark>, indicating the height and bottom diameter of the timer, and the volume of water that flew out during the ceremony. That volume is guaranteed to be less than half volume of the container.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, output one line containing the height of the sacred line above the ground. You should round off the answers to the 5th decimal place. (For example, rounding off 4.000005 equals to 4.00001 and rounding off 4.000004 equals to 4.00000)

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Hint:</SPAN>
Here are some formulas you may need. Please notice that in these formulas, Log means log<!-- MATH
 $_{\mbox{e}}$
 -->
<SPAN CLASS="MATH"><SUB>e</SUB></SPAN>
<tex2html_verbatim_mark> or ln.

<P>
<!-- MATH
 $\int \sqrt{x^{2}-a^{2}}dx=\frac{1}{2}x \sqrt{x^{2}-a^{2}}-\frac{1}{2}a^{2} Log [x+\sqrt{x^{2}-a^{2}}]+C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}-a^{2}}}$"><I>dx</I> = <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{2}}}$"><I>x</I><IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}-a^{2}}}$"> - <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{2}}}$"><I>a</I><SUP>2</SUP><I>Log</I>[<I>x</I> + <IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}-a^{2}}}$">] + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\int \sqrt{x^{2}+a^{2}}dx=\frac{1}{2}x \sqrt{x^{2}+a^{2}}+\frac{1}{2}a^{2} Log [x+\sqrt{x^{2}+a^{2}}]+C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}+a^{2}}}$"><I>dx</I> = <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{2}}}$"><I>x</I><IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}+a^{2}}}$"> + <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{2}}}$"><I>a</I><SUP>2</SUP><I>Log</I>[<I>x</I> + <IMG
 WIDTH="75" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{x^{2}+a^{2}}}$">] + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\int \sqrt{a^{2}-x^{2}}dx=\frac{1}{2}(x \sqrt{a^{2}-x^{2}}+ a^{2} ArcTan [\frac{x}{\sqrt{a^{2}-x^{2}}}])+C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$"><I>dx</I> = <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{2}}}$">(<I>x</I><IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$"> + <I>a</I><SUP>2</SUP><I>ArcTan</I>[<IMG
 WIDTH="58" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{x}}{{\sqrt{a^{2}-x^{2}}}}}$">]) + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\int Log [a+ \sqrt{a^{2}-x^{2}}]dx= a \ ArcTan [\frac{x}{\sqrt{a^{2}-x^{2}}}] + x ( -1 + Log [a+ \sqrt{a^{2}-x^{2}}]) +C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><I>Log</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]<I>dx</I> = <I>a</I>&nbsp;<I>ArcTan</I>[<IMG
 WIDTH="58" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{x}}{{\sqrt{a^{2}-x^{2}}}}}$">] + <I>x</I>(- 1 + <I>Log</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]) + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\int x Log [a+ \sqrt{a^{2}-x^{2}}] dx= \frac{1}{4} (a^{2}-x^{2} - 2a \sqrt{a^{2}-x^{2}} + 2x^{2} Log [a+ \sqrt{a^{2} - x^{2}}]) +C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><I>xLog</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]<I>dx</I> = <IMG
 WIDTH="15" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{4}}}$">(<I>a</I><SUP>2</SUP> - <I>x</I><SUP>2</SUP> -2<I>a</I><IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$"> +2<I>x</I><SUP>2</SUP><I>Log</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]) + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>
<!-- MATH
 $\int x^{2} Log [a + \sqrt{a^{2}-x^{2}}] dx= \frac{1}{18} (-2x^{3} - 3ax \sqrt{a^{2}-x^{2}} + 3a^{3} ArcTan [\frac{a}{\sqrt{a^{2} - x^{2}}}] + 6x^{3} Log [a+ \sqrt{a^{2}-x^{2}}]) + C$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="15" HEIGHT="35" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \int$"><I>x</I><SUP>2</SUP><I>Log</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]<I>dx</I> = <IMG
 WIDTH="22" HEIGHT="40" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{1}}{{18}}}$">(- 2<I>x</I><SUP>3</SUP> -3<I>ax</I><IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$"> +3<I>a</I><SUP>3</SUP><I>ArcTan</I>[<IMG
 WIDTH="58" HEIGHT="33" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ {\frac{{a}}{{\sqrt{a^{2} - x^{2}}}}}$">] + 6<I>x</I><SUP>3</SUP><I>Log</I>[<I>a</I> + <IMG
 WIDTH="74" HEIGHT="42" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4330.png
 ALT="$ \sqrt{{a^{2}-x^{2}}}$">]) + <I>C</I></SPAN>
<tex2html_verbatim_mark>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 
5.0 10.0 0.0 
5.0 10.0 65.4498
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10.00000 
5.00000
</PRE>

<P>

______________________________________________________
4331||||||false||||||

<P>
Too worrying about the house price bubble, poor Mike sold his house and rent an apartment in a 50-floor building several months ago. This building has only one elevator because it is a so called ``rotten tail building". There are always a lot of people crowding at the gate of the elevator on every floor. Many people have to climb hundreds of steps in order to save time. 

<P>
After months of climbing, Mike feels that he can't stand it any more. He wants to sue the building owner. In order to let the judge understand how terrible the situation is, he decides to write a program to simulate the running of the elevator in a day. You'd better let him copy one from you. 

<P>
At first, the elevator is at the status of ``idle". If the three conditions below are all satisfied at the same time, we say the elevator is at ``idle" status: 

<P>
<DL COMPACT>
<DT>1)</DT>
<DD>The elevator is stopped. 
</DD>
<DT>2)</DT>
<DD>Nobody outside is waiting for the elevator. 
</DD>
<DT>3)</DT>
<DD>There is nobody in the elevator or all people in the elevator are just on their destination floor. 
</DD>
</DL>

<P>

<P>
<BR>
There are an up button and a down button at the elevator gate on every floor except that only up button on the first floor, and only down button on the 50th floor. When someone wants to take the elevator, he pushes a button according to the direction he wants to go, and then wait. If the elevator is not moving towards his destination floor, he will not get in even the elevator comes and opens its door. When someone pushes a button, we say that he send a request to the elevator. 

<P>
When the elevator is idle and then some requests are sent to it, it will move towards the direction from which the first request is sent. If more than one request is sent at the same time, the requests sent form the same floor where the elevator stays have higher priority. In other cases, requests which will make the elevator go up, have higher priority than the same time requests which will make the elevator go down. 

<P>
Once the elevator starts moving, it keeps its moving direction until the three conditions below are all satisfied at the same time: 

<P>
<DL COMPACT>
<DT>1)</DT>
<DD>All the people in the elevator have reached their destination floor. 
</DD>
<DT>2)</DT>
<DD>There is nobody waiting for the elevator at the elevator's moving direction. 
</DD>
<DT>3)</DT>
<DD>Nobody on the floor where the elevator stays wants to go towards the elevator's moving direction. 
</DD>
</DL>

<P>

<P>
<BR>
When the three conditions above are all satisfied at the same time, if there are requests from the direction opposite to the elevator's last moving direction, the elevator will turn around and start moving; and if there are no requests at that time, the elevator will stay there and become idle. 

<P>
When the elevator reaches a certain floor, it will stop and open its door when one of the two conditions below is satisfied: 

<P>
<DL COMPACT>
<DT>1)</DT>
<DD>Someone inside the elevator wants to get off on that floor. 
</DD>
<DT>2)</DT>
<DD>Someone on that floor wants to go towards the elevator's moving direction. 
</DD>
</DL>

<P>

<P>
<BR>
It takes one second for the elevator to move from one floor to another. 

<P>
It takes one second for the elevator to open the door or close the door. 

<P>
It takes one second for people outside the elevator to get in, no mater how many people. 

<P>
It takes one second for people inside the elevator go get out, no mater how many people. 

<P>

<P>
<BR>
The elevator can't stop between two floors.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first line is an integer <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> indicating the number of test cases <!-- MATH
 $(T \le 20)$
 -->
<SPAN CLASS="MATH">(<I>T</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4331img1.png
 ALT="$ \le$">20)</SPAN>
<tex2html_verbatim_mark> 

<P>

<P>
<BR>
For each test case: 

<P>
The first line contains two integers: <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>. The elevator is on the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th floor at first, and <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> is the total number of requests <!-- MATH
 $(1 \le i \le 50, 1 \le n \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4331img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4331img1.png
 ALT="$ \le$">50, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4331img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4331img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> 

<P>
Then <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines follow. Each line contains three integers: <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>. It means that at the time of <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>-th second, a person on the <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>-th floor sends a request, and he wants to go to the <SPAN CLASS="MATH"><I>d</I></SPAN>
<tex2html_verbatim_mark>-th floor.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print ``<SPAN  CLASS="textit">Case </SPAN><SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark><TT>:</TT>" in a line at first. <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> is the test case number starting from 1. Then, print the details of how the elevator runs. You should print information like: 

<P>

<P>
<BR>

<TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> The elevator starts to move <SPAN CLASS="MATH">(</SPAN>
<tex2html_verbatim_mark>up<SPAN CLASS="MATH">|</SPAN>
<tex2html_verbatim_mark>down<SPAN CLASS="MATH">)</SPAN>
<tex2html_verbatim_mark> from floor <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>.</TT> 
<BR><TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> The elevator stops at floor <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>.</TT> 
<BR><TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> The elevator door is opening.</TT> 
<BR><TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> people leave the elevator.</TT> 
<BR><TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> people enter the elevator.</TT> 
<BR><TT><SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>:<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark> The elevator door is closing.</TT> 

<P>

<P>
<BR>
``<SPAN CLASS="MATH"><I>mm</I> : <I>ss</I></SPAN>
<tex2html_verbatim_mark>" means time, ``<SPAN CLASS="MATH"><I>mm</I></SPAN>
<tex2html_verbatim_mark>" for minute, ``<SPAN CLASS="MATH"><I>ss</I></SPAN>
<tex2html_verbatim_mark>" for second. 

<P>
Please append a blank line to the end of the output of each test case. 

<P>
It is guaranteed that the elevator will finish all requests within 3600 secondsã

<P>

<P><P>
<BR>

<SPAN  CLASS="textbf">Hint:</SPAN>

<P>

<P>
<BR>
At time 00:00, there are 4 requests at the same time. The upwards request on the floor where the elevator stays has the highest priority. 

<P>
At time 00:07, because a new person comes, the elevator delays its door closing. 

<P>
At time 00:09, the door is just closed. But a new person comes, so the elevator has to reopen its door.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 
2 9 
4 1 3
5 1 3
6 1 3
7 1 3 
9 1 3 
0 2 1 
0 4 1 
0 5 6 
0 6 1
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 
00:00 The elevator door is opening. 
00:01 1 people enter the elevator. 
00:02 The elevator door is closing. 
00:03 The elevator starts to move down from floor 2. 
00:04 The elevator stops at floor 1. 
00:04 The elevator door is opening. 
00:05 1 people leave the elevator. 
00:06 3 people enter the elevator. 
00:07 1 people enter the elevator. 
00:08 The elevator door is closing. 
00:09 The elevator door is opening. 
00:10 1 people enter the elevator. 
00:11 The elevator door is closing. 
00:12 The elevator starts to move up from floor 1. 
00:14 The elevator stops at floor 3. 
00:14 The elevator door is opening. 
00:15 5 people leave the elevator. 
00:16 The elevator door is closing. 
00:17 The elevator starts to move up from floor 3. 
00:19 The elevator stops at floor 5. 
00:19 The elevator door is opening. 
00:20 1 people enter the elevator. 
00:21 The elevator door is closing. 
00:22 The elevator starts to move up from floor 5. 
00:23 The elevator stops at floor 6. 
00:23 The elevator door is opening. 
00:24 1 people leave the elevator. 
00:25 1 people enter the elevator. 
00:26 The elevator door is closing. 
00:27 The elevator starts to move down from floor 6. 
00:29 The elevator stops at floor 4. 
00:29 The elevator door is opening. 
00:30 1 people enter the elevator. 
00:31 The elevator door is closing.
00:32 The elevator starts to move down from floor 4. 
00:35 The elevator stops at floor 1. 
00:35 The elevator door is opening. 
00:36 2 people leave the elevator. 
00:37 The elevator door is closing.

______________________________________________________
4332||||||false||||||
<p>Wango is a brilliant maths teacher. He has two sons Kango and Dango. They are born two years apart on the same day! Kango is 9 and Dango is 7. Their birthdays are approaching again. Wango has to buy them a gift each. After long thought, this time Wango wanted to give each of his sons a piece of the Pango board and thus introduce them to higher mathematics.</p><p>A size n (n >= 0) Pango board is a 2 by n rectangle of unit squares. A pango board has to be tiled with Pango pieces. Any tiling with the Pango pieces is acceptable. A size 0 Pango board exists and is unique and serves as an example of the empty set.</p><p>Four types of Pango pieces are available.</p><pre>
1   2   3   4
==  ==  ==  ==
XX  X   X   X
XX  XX  X
</pre><p>Picture of the four kinds of pieces</p><img src="http://livearchive.onlinejudge.org/external/43/p4332.jpg /><p>When Wango presents a board to Kango or Dango, he has to tile the board completely with these pieces (unlimited number of pieces of each type are available) and then give them out. Note that pieces cannot be rotated for tiling. To cut costs (recession mind you), Wango decides to buy a single board of size N, then choose a k (0 <= k <= N), and give a size k board to Kango and a size (N-k) board to Dango, (tiled of course). Help him find the number of ways he can give the presents. Two ways are distinct if and only if either Dango gets a different board or Kango gets a different board. Two Pango boards are considered the same if and only if they have the same tiling (same set of tiles at the same places) from left to right (rotation of board is not allowed in comparing). </p>
<h2>Input</h2>
<p>The input consists of a sequence of cases, one per line.<br/>
Each case consists of one integer N (0 <= N <= 1000,000,000) representing the size of the board which Wango is going to buy.<br/>
The input will end with a line containing -1. This case should not be processed.
<br/>There will be a maximum of 300 test cases. </p>
<h2>Output</h2>
<p>One line per case, outputting the number of ways Wango can distribute the presents to his sons modulo 10,007. </p>
<h2>Sample Input</h2>
<pre>
0
1
2
-1
</pre>
<h2>Sample Output</h2>
<pre>
1
4
16
</pre>
<h2>Explanation</h2>
<p>
Number of different 0-sized Pango boards = 1<br />

Number of different 1-sized Pango boards = 2<br />

Number of different 2-sized Pango boards = 6<br />

For N = 0, he has to give 0-sized boards to both his sons. He can do this in 1*1 = 1 way<br />

For N = 1, he has to give 0-sized board to one of his sons, and 1-sized board to the other, for a total of 2*1 + 1*2 = 4 ways<br />

For N = 2, he can give the presents in 6*1 + 2*2 + 1*6 = 16 ways<br />
</p>

______________________________________________________
4333||||||false||||||
<p>2M scientists are supposed to present papers in a conference in a day. The day is divided into 2 slots, the morning slot and the evening slot. M scientists present their paper in the morning slot and the remaining in the evening slot. Both slots are separated by a lunch break.</p><p>Some scientists depend on a paper from some other scientists to be presented before theirs. So if Scientist A is presenting a paper on "Graph Theory" and Scientist B on "Max flow-Min cut", then A has to present before B. Lunch break is a time of merry making and partying, so attendees tend to forget the papers in the previous half. Due to this, the dependent scientist (B in this case) has to present the paper in the same slot as the scientist on whom he is dependent (A in this case). Given the dependencies, find the number of possible orderings of presenting the papers.</p><h2>Input</h2><p>The first line of input will contain an integer T <= 20 denoting the number of test cases.<br />
Each test case will be formatted as follows:-<br />
The first line will contain an integer denoting 1<= M <= 8.<br />
The next 2M lines will contain 2M characters each. Each character will either be 'Y' or 'N'. If the i th line's j th character is 'Y' it means that scientist i is dependent on scientist j. 'N' signifies no dependence. A scientist will never be dependent on himself.</p>
<h2>Output</h2>
<p>Output one line per case that contains an integer denoting the number of possible ordering of scientists.</p>
<h2>Sample Input</h2>
<pre>
3
2
NNNN
NNNN
NNNN
NNNN
2
NYNN
NNNN
NNNY
NNNN
2
NYYY
YNYY
YYNY
YYYN
</pre>
<h2>Sample Output</h2>
<pre>
24
2
0
</pre>

______________________________________________________
4334||||||false||||||
<p>Mr. Goldust (1817-1890) was one of the first gold prospectors in the California Gold Rush. He literally struck gold there and became the owner of a few hundred gold pits. Mr. Goldust's great great great grandson Mr. Stardust currently owns the gold pits. Most of the gold has been dug up already, so Mr. Stardust wants to finish digging and get going to Las Vegas. A corporate giant offered to help him by supplying machines. </p>
<p>The machines are worth their weight in gold, so Mr. Stardust can only buy exactly one such machine. This machine was built using advanced science and thus does not work unless given appropriate working conditions.</p>
<p>Each day, Mr. Stardust will assign the machine to exactly one of the gold pits. If he assigns it to pit 'i', two things can happen:</p>
<ul>
<li>The machine will break down - with probability bi (0 < bi <= 1) . The machine cannot be used any more</li>
<li>The machine will extract gold - with probability (1-bi) the machine will extract a proportion ri (0 <= ri <= 1) of the gold remaining in pit i</li>
</ul>
<p>
Theoretically the machine can last forever or break down very soon. So, Mr. Stardust's plan is to wait suitably long and then take off to Las Vegas. Of course, he will end up broke if the machine breaks down on day 1. He first needs to know how much gold he can expect to get using the machine optimally, that is, the best expected value of gold Mr. Stardust can achieve with an optimal strategy of allocating the machine to the pits.
</p>
<h2>Input</h2>
<p>The input consists of a sequence of cases.<br/>
Each case starts with N (0 < N <= 100) on a line, representing the number of gold pits. Following this line are N lines, each one describing one pit. The ith line has three integers xi, yi and gi where bi = xi/100 , ri = yi/100 and gi is the amount of gold in pit i. ( 1 <= xi <= 100 , 0 <= yi <= 100 , 1 <= gi <= 100).
<br/>The last case will be followed by a -1. This case should not be processed.
<br/>There will be a maximum of 50 test cases. </p>
<h2>Output</h2>
<p>Output one case per line, the best expected value of gold that can be obtained, rounded to six decimal places.</p>
<h2>Sample Input</h2>
<pre>
1
50 100 100
1
50 50 100
2
50 100 100
50 50 100
-1
</pre>
<h2>Sample Output</h2>
<pre>
50.000000
33.333333
66.666667
</pre>
<h2>Explanation </h2>
<p>
In the first and second sample cases, keep assigning the machine to the only pit available. In the third sample case, clearly it is better to assign the machine to pit 1 on day 1 and if it survives, assign it to pit 2 from day 2 onwards.
</p>

______________________________________________________
4335||||||false||||||
<p><strong>Minesweeper</strong> is a single-player computer game. The objective of the game is to clear an abstract minefield without detonating a mine. When the game is started, the player is presented with a grid of <strong>n</strong> x <strong>m</strong> blank squares. If the player clicks on a square without a mine, a digit is revealed in that square, the digit indicating the number of adjacent squares that contain mines. Two squares are adjacent if they share an edge or a corner, i. e. a square can have at most 8 adjacent squares. By using logic, players can in many instances use this information to deduce that certain other squares are mine-free (or mine-filled), and proceed to click on additional squares to clear them or mark them with flag graphics to indicate the presence of a mine.</p><p><img alt="minesweeper.png" src="http://livearchive.onlinejudge.org/external/43/p4335.png width="170" height="170"></p><p>Clark Kent is a Minesweeper addict. And with help from his Kryptonian (a planet far far away from earth) powers he solves them at lightning speed and gives them to you. Your job is to tell him whether the solved version is correct or not. A board is correctly solved iff all flagged squares <strong>should</strong> contain a mine and every square containing a number <strong>X</strong> has exactly <strong>X</strong> adjacent squares flagged.</p><h3>Input</h3><p>The first line of input will contain an integer T <= 20 denoting the number of test cases.<br/>
Each test case will be formatted as follows:-<br/>
<ul>
<li>
The first line will contain two integers separated by a single space denoting 1<=<strong>n</strong><=20 and 1 <= <strong>m</strong><=20 respectively.<br/>
</li>
<li>
The next <strong>n</strong> lines will contain <strong>m</strong>
characters each. Each character will either be a digit (0 to 8
inclusive) or 'F'. The presence of 'F' indicates that Clark has flagged
the square. The digits indicate the number of mines in the adjacent
squares.
</li>
</ul>
</p>
<h3>Output</h3>
<p>
Output one line per case:-<br/>
<ul>
<li>
'Well done Clark!' if the board was solved successfully.
</li>
<li>
'Please sweep the mine again!' otherwise.<br/>
</li>
</ul>
<I><strong>Note that quotes are for clarity only.</strong></I>
</p>
<h3>Sample Input</h3>
<pre>
2
8 8
F1012210
1101FF21
121234F1
F2F11F21
12111121
1100012F
F21101F2
12F10111
8 8
F1012210
1101FF21
121234F1
F2FF1F21
12111121
1100012F
F21101F2
12F10111
</pre>
<h3>Sample Output</h3>
<pre>
Well done Clark!
Please sweep the mine again!
</pre>

______________________________________________________
4336||||||false||||||
<p>In Ragannagar ( a small town in India), people are obsessed with palindromes . There are<strong> N </strong>road junctions(also callled points) labeled <strong>0</strong> to <strong>N-1</strong> and roads exist between every pair of points. Roads are onewayed and for the road connecting point <strong>i</strong> to point <strong>j</strong> ( <strong>i</strong> < <strong>j</strong>) the direction to travel is <strong>i</strong> to <strong>j.</strong> Each road is labeled with a letter between 'A' to 'Z' . Rajar ,the traveler, wants to travel from point <strong>0</strong> to point <strong>N-1</strong>. However he wants to cover the longest palindromic path.</p><p><img alt="" src="http://livearchive.onlinejudge.org/external/43/p4336.jpg width="400"></p><p>In the above arrangement the possible paths to take are:-</p><ul><li>ACCA</li> <li>ABA</li> <li>ACB</li> <li>BCA</li> <li>AD</li> <li>BB</li> <li>AA</li> <li>C</li></ul><p>The largest palindrome amongst these is ACCA, so Rajar will take this path. Given the above configuration, help him decide which path to take.</p><h3>Input</h3><p>The first line of input will contain an integer denoting the number of test cases<strong> T </strong><=25. Each test case will be formatted as follows:-
</p><ul>
<li>
The first line of each test case contains an integer denoting 2<= <strong>N</strong> <=50.</li>
<li>
The next<strong> N </strong>lines contain<strong> N </strong>characters each. Each character is a letter
between 'A' to 'Z'. The jth character in the ith line denotes the label
for the road between i to j and this will be equal to the ith character
in the jth line.The ith character of the ith line will be * denoting no
road exists.
</li>
</ul>
<h3>Output</h3>
<p>Output one line per case - <br/>
The longest palindromic path available or "NO PALINDROMIC PATH" if none exists.<I><strong>Note that quotes are for clarity only.</strong></I><br/>
In case more than one longest path exists output the lexicographically smallest one.<br/>

</p><p>
</p><h3><a name="Sample_Input"></a> Sample Input </h3>
<pre>
2
5
*ABAC
A*CBD
BC*CB
ABC*A
CDBA*
5
*AXYZ
A*BQR
XB*BT
YQB*A
ZRTA*
</pre>
<h3>Sample Output</h3>
<pre>
ACCA
ABBA
</pre>

______________________________________________________
4337||||||false||||||
<p>Sita and Gita are smart kids. Generally after completing their homework
they go out for some outdoor games. But it's raining today and they
have to stay home. They decide to break their piggy-bank and count
their savings. They find out that they have accumulated many coins over
the last few months and decide to play a game with these coins. First
they divide the coins into 2 piles containing <strong>X</strong> and <strong>Y</strong> coins respectively.</p>
<p>
<img alt="" src="http://livearchive.onlinejudge.org/external/43/p4337.gif width="148" height="155">
</p><p>
Now they start the game by alternating turns. In each turn a player can do one of the following: </p>
<ul>
<li> Remove any number of coins from a single pile.</li>
<li> Remove equal number of coins from both piles.</li>
<li> Pass on the turn to the next player. Note that this still counts as a turn.
</li>
</ul>
<p>
The game ends when no move is possible and the player who
cannot make a move loses. Both players play optimally. Being smart,
both players calculate the outcome of the game before the game begins.
The player who loses tries to maximize the number of turns in the game
and player who wins tries to minimize the turns. No player can pass
more than <strong>P</strong> times. Sita starts the game.</p>
<h3>Input</h3>
<p>
The first line of input will contain an interger T <= 200 denoting the number of test cases.<br/>
Each test case will contain a single line formatted as follows:-
</p>
<pre>
X Y P
</pre>
<p>
0<=X<= 1000<br/>
0<=Y<= 1000<br/>
0<=P<= 100
</p>
<h3>Output</h3>
<p>
Output one line per case.<br/>
The name of the winner and the number of moves in the game separated by a single space.
</p>
<h3>Sample Input</h3>
<pre>
2
3 4 0
4 5 1
</pre>
<h3>Sample Output</h3>
<pre>
Sita 3
Sita 5 Â 
</pre>

______________________________________________________
4338||||||false||||||
<p>Dice Poker is a version of Poker that is played using Dice. Two or more people can play this game. The detailed rules of the 2 player version of the game are mentioned in the section: Rules of the Game.</p><p>Two players A and B are playing the game of Dice Poker. Being experts in this game, both always play optimally. A always plays to maximize his chance of winning, and B tries to minimize the chance of A winning (draw is fine for B). In the first round, Player A rolls the Dice, followed by player B. You as an onlooker, look closely at the rolls and wonder what will A and B do next, and what is the probability of A winning. Haven't played this game much before, you decide to write a program to predict with what probability will A win this Game after the 2nd (final) round.</p><h4>Rules of the Game:-</h4><p>In the first round, two players start of by rolling 5 dice each, one after the other. For this problem we shall assume that all Dice are 6 sided and fair containing digits 1 to 6. Then a round of betting happens, which is irrelevant to this problem statement. In the second round the first player picks between 0 to 5 of his currently rolled dice and rolls them again. All the 5 dice are then merged (merge here simply means that all the 5 dice are taken together to form a set, including the ones rolled in the first round and are not re-rolled in the second) to form the final roll (or hand). Then the second player looks at the final hand of the first player and then similarly re-rolls between 0 to 5 dice to get her final hand. The hands are then compared and one with the higher weight wins.</p><p>In the real game, in case of a tie both the players share the pot, but since this problem specifically asks for the probability of A winning, we shall assume that a tie is considered as A not winning (hence B wins).</p><p>To determine which of the hands has higher weight, following arrangements are considered and are in descending order of weight. The first arrangement beats the second and so on.</p><h4>Arrangements:</h4><ul><li>5 of a kind: All the 5 dice show the same number. Example: 3, 3, 3, 3, 3</li> <li>4 of a kind: 4 of the dice show the same number. Example: 2, 2, 2, 2, 5</li> <li>Full house (3 of a kind + 2 of a kind): 3 of the 5 show the same number and the rest 2 show a different number. Example: 4, 4, 4, 6, 6</li> <li>Straight: All the 5 dice are in a sequence. Example: 1, 2, 3, 4, 5 (or the other possibility is 2, 3, 4, 5, 6)</li> <li>3 of a kind: 3 of the dice show the same number. Example: 6, 6, 6, 2, 4</li> <li>2 Pair: There are 2 pairs. Example: 4, 4, 1, 1, 3</li> <li>Pair: 2 of the dice show the same number. Example: 3, 3, 1, 2, 4</li> <li>Rest: Example: 1, 2, 3, 4, 6</li></ul><p>The highest weight arrangement that suits the hand is considered. For example a 5 of a kind is also a 4 of a kind, but the player would naturally call it 5 of a kind. Also in a particular arrangement, the higher weight arrangement is the one with the highest value of the most significant part of the arrangement. If a the tie still remains then it is broken by the next significant part and so on. For Example, In 4 of a kind the most significant part are the 4 dice with the same number. So the arrangement 4, 4, 4, 4, 1 is better than 3, 3, 3, 3, 6. In 3 of a kind the 3 with the same number is the most significant part. However in a 2 pair, there are 2 equally significant parts, and the one with the highest number will be considered first for breaking the tie. In the 'Rest' arrangement, first compare the highest numbers of the 2 hands, then the 2nd highest and so on.</p><h2>Input</h2><p>First line contains T (T <= 20) the number of test cases to follow For each case, the first line contains 5 space separated numbers, the arrangement of the dice after the first round for player A. The second line contains 5 space separated numbers, the arrangement of the dice after the first round for player B. Each of the numbers will be between 1 and 6 inclusive. </p>
<h2>Output</h2>
<p>Per test case output a single number in a line, giving the probability of A winning. You will need to round it off to 6 decimal places. (0.0000005 -> 0.000001 and 0.0000004 -> 0.000000). Always output exactly 6 decimal places.</p>
<h2>Sample Input</h2>
<pre>
5 
6 6 6 6 6 
1 2 3 4 5 
1 2 3 4 5 
2 3 4 5 6 
1 2 3 1 1 
1 2 3 4 5 
1 3 1 2 2 
2 2 3 4 6 
1 1 1 1 1 
5 4 5 5 5
</pre>
<h2>Sample Output</h2>
<pre>
0.999871
0.056503
0.430834
0.477623 
0.833333
</pre>
<h4>Explanation of the first case</h4>
<p>A already has the best possible set (all 6's) so he won't roll again. B has no chance of winning. However she can probably force a draw by throwing all 6's. So the only option for her is to re-roll all the 5 dice. The number of possible outcomes are 6*6*6*6*6 out of which only 1 will force a draw. So the answer is 1 - (1/6^5). </p>

______________________________________________________
4339||||||false||||||
<h2 align="center">H - Advise National Security!</h2>
<h4 align="center">Time limit: 10 seconds</h4>
<hr />
<p>It's 2015. Terrorists are still largely on the prowl. Governments however have decided to be smarter. Now, they monitor each higway, airway and seaway. Across each road, they built several cameras which can capture images ahead of them.</p>
<p>More specifically, there are N uniformly spaced cameras per kilometer along a highway of length M kms, making in total M*N cameras (there is no camera at the end of the M kms). The highway is oneway and goes from North to South. The cameras have a special property: </p>
<ul>
<li>They use direct vision to watch the next N (or less if the highway ends) cameras to their South thus covering 1 km.</li>
<li>They communicate via satellite with all the cameras beyond the next N southern cameras thus knowing their video feed. </li>
<li>They do not communicate with the next N southern cameras and only depend on their vision.</li>
</ul>
<p>A camera being destroyed by a terrorist will be caught by cameras to its north. Corrupt politicians have sold this secret to the terrorists and they know that they can't destroy a camera unless they are sure that this camera is no longer communicating or being watched by a camera to its North. There is one further complication: Corrupt technicians have not properly installed the direct vision equipment. Thus, some of the cameras are substandard and deficient. These cameras have perfectly good communication with far off cameras (i.e. after the first N cameras), but cannot see some of the next N cameras. However, the saving grace was that there were no more than 10 deficient cameras in any 1 km stretch (among any contiguous N cameras).</p>
<p>As Anti Corruption Task force, you, a non corrupt patriot have to submit a security report. For that, you need to solve the following problem: If <b>exactly two</b> terrorists decide to destroy all the cameras on the highway without being caught, how long would it take them? Each terrorist can destroy one camera in one FULL minute. They can work simultaneously. Of course, they cannot destroy two cameras A and B at the same time if A can watch B or B can watch A.</p>
<p>The cameras are numbered 1 to M*N North to South.</p>
<p>Note that Ci cannot watch or get the video feed of Cj if i > j where Ci is the camera numbered i. </p>
<h2>Input</h2>
<p>Input will be a sequence of cases. Each case starts with M and N on a single line (1 <= M <= 15 ,1 <= N <= 20). M*N - 1 lines follow. The Cth line describes camera number C. It starts with a number k. If k = -1 camera C is not deficient and there are no more numbers on this line. Otherwise, k numbers, aj (1<=j<=k) (C+1 <= aj <= C+N and aj <=M*N) follow on the same line meaning that camera C can watch camera aj. Note that camera C can always watch cameras C + N + 1 and later using satellite and will not be mentioned here. </p>
<p>The last case will be followed by a line containing two zeroes. </p>
<h2>Output</h2>
<p>Output one line per case, the minimum number of minutes required by two terrorists working in tandem to destroy all the cameras without being caught. </p>
<h2>Sample Input</h2>
<pre>
2 3 
1 4 
2 4 5 
2 4 5 
1 6 
-1
0 0
</pre>
<h2>Sample Output</h2>
<pre>
4
</pre>
<h2>Explanation</h2>
<p>Camera i is referred to as Ci. <br/>
There are a total of 6 cameras, 3 per km. <br/>
C1 can watch C4 and later but not C2 or C3 <br/>
C2 can watch C4 and later, but not C3 <br/>
C3 can watch C4 and C5 but not C6 <br/>
C4 can watch C6 but not C5 <br/>
C5 can watch C6 <br/>
C6 cannot watching anything. <br/>
T = 1: Destroy C1 and C2 <br/>
T = 2: Destroy C3 <br/>
T = 3: Destroy C4 and C5 <br/>
T = 4: Destroy C6 
</p>

______________________________________________________
4340||||||false||||||
<h2 align="center">I - Find Terrorists</h2><h4 align="center">Time limit: 5 seconds</h4><hr /><p>The Prime Minister and his Accumulated Council of Ministers(ACM) are trying hard to find all possible terrorist locations. In his dream, the Prime Minister gets a message from God suggesting that the answer to all terrorist problems are numbers(say one such number is X) such that the number of factors of X(including 1 and X) is prime. These numbers supposedly contain the encrypted locations of terrorists. Since the ACM has no programmer, the Prime Minister needs your help in finding out such numbers.</p><p>Note:- 1 is not considered a prime number .</p><h2>Input</h2><p>The first line of input will contain an integer T <= 20 denoting the number of test cases.<br/> 
T lines follow, one per test case. <br/> 
Each test case will be a line formatted as "L H" where L and H are integers and 0<L<=H<=10000 
</p>
<h2>Output</h2>
<p>Output one line per case a space separated list of all integers(sorted ascending) lying between L and H(both inclusive) such that the number of factors of each integer is prime.In case no such integer exist output -1. </p>
<h2>Sample Input</h2>
<pre>
3
1 1
1 2
2 5
</pre>
<h2>Sample Output</h2>
<pre>
-1
2
2 3 4 5
</pre>

______________________________________________________
4341||||||false||||||
<P>Nguyen is writing a small software for counting words in a string. He becomes bored after finishing the software very fast. He now wants to find the number of words <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> in the longest consecutive sequence of words of the same length.<P>Given a string containing only characters <SPAN CLASS="MATH"><I>a</I>...<I>z</I></SPAN> <tex2html_verbatim_mark> and spaces (ASCII code is 32), a word is defined to be the longest sequence of non-space characters. Your task is to write a program to help Nguyen find the number <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data test, there is one single line containing the string to count words. There are less than 1000 words in the string. The length of each word does not exceed 20 characters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line the number <SPAN CLASS="MATH"><I>P</I></SPAN> <tex2html_verbatim_mark> Nguyen wants to find.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
a aa bb cc def ghi 
a a a a a bb bb bb bb c c
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
5
</PRE><P>
______________________________________________________
4342||||||false||||||
<P>In some Asian countries, 8 and 6 are considered lucky digits. Any number containing only 8s and 6s is considered lucky number, e.g. 6, 8, 66, 668, 88, 886 <SPAN CLASS="MATH">...</SPAN> <tex2html_verbatim_mark>.<P>Nguyen is a student who likes mathematics very much. Nguyen likes lucky numbers but only of the form<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I> = 8...86...6</DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> has at least one digit and the number of 8s or 6s can be zero. Examples of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> are 8, 88, 6, 66, 86, 886, 8866 ...<P>Given a positive integer <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < X < 10 000)$
 --><SPAN CLASS="MATH">(1 &lt; <I>X</I> &lt; 10000)</SPAN> <tex2html_verbatim_mark>, Nguyen wants to find the smallest lucky number <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which has at most 200 digits and is divisible by <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>.<P>Your task is to write a program to find that number for Nguyen.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data test, there is one single line containing the integer <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line the smallest lucky number <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> which is divisible by <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>. In case there is no such a number which has at most 200 digits, write <TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
6 
8 
43 
5
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
8 
86 
-1
</PRE><P>
______________________________________________________
4343||||||false||||||
<P>Hanoi is constructing a subway system. The subway system consists of <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> stations which are numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> two-way subway lines connecting pairs of stations directly. Hanoi metropolitan area is covered by <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> separated resident blocks each described as convex polygons. Subway lines can run under resident blocks. When running under resident blocks including their boundary, the speed of the subway train is <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> while its speed is <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> when running under other parts <!-- MATH
 $(v_{1} < v_{2})$
 --><SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB> &lt; <I>v</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark>. The travel time between two stations <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> is the shortest time to go from <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, possibly via intermediate stations (the transit time is not significant). They now have to select the central station from those existing stations so that the travel time from the central station to the farthest station, whose travel time to the central station is longest, is shortest.<P>The figure below describes a subway system with four subway stations and four subway lines. There are three resident blocks in the metropolitan area. In this figure, there are two segments of subway lines under resident blocks where the subway train has to travel with speed of <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="907" HEIGHT="600" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4343.png ALT="\epsfbox{p4343.eps}"> <tex2html_verbatim_mark></DIV><P>Given a subway system, your task is to write a program to find the central station and to find the travel time from the farthest station to the central station.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains five integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(M < 31, K < 50, T < 10, 0 < v_{1} < v_{2} < 100)$
 --><SPAN CLASS="MATH">(<I>M</I> &lt; 31, <I>K</I> &lt; 50, <I>T</I> &lt; 10, 0 &lt; <I>v</I><SUB>1</SUB> &lt; <I>v</I><SUB>2</SUB> &lt; 100)</SPAN> <tex2html_verbatim_mark> separated by space indicating number of stations, number of subway lines, number of resident blocks, the subway train speed when travelling under resident blocks, and the subway train speed when not travelling under resident blocks respectively. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4343.png ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4343.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> separated by space representing the coordinates of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th station. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> lines contains two integers separated by space representing the two stations of the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th subway line. The <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> lines contains the description of the <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>-th resident block. The line starts with an integer <SPAN CLASS="MATH"><I>V</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(V_{g} < 8)$
 --><SPAN CLASS="MATH">(<I>V</I><SUB>g</SUB> &lt; 8)</SPAN> <tex2html_verbatim_mark> which is the number of vertices followed by <SPAN CLASS="MATH"><I>V</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark> pairs of integers (with absolute value not exceeding 10000) separated by space indicating the coordinates of <SPAN CLASS="MATH"><I>V</I><SUB>g</SUB></SPAN> <tex2html_verbatim_mark> vertices of the polygon in a traversal order around the polygon, representing the <SPAN CLASS="MATH"><I>g</I></SPAN> <tex2html_verbatim_mark>-th resident block.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, write in one line an integer indicating the integer part of <SPAN CLASS="MATH">(<I>t</I><SUB>max</SUB> <TT>*</TT> 100)</SPAN> <tex2html_verbatim_mark> where tmax is the travel time from the farthest station to the central station.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1
4 4 3 1 2 
1 8 
7 8 
7 1 
14 8 
1 2 
2 3 
2 4 
3 4 
3 4 8 6 5 2 5 
4 7 6 9 6 9 4 7 4 
6 10 8 11 9 12 9 13 8 12 7 11 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
500
</PRE><P>
______________________________________________________
4344||||||false||||||
<P>In 3010, a group of people from the Earth has moved to live in the planet Alpha. Because the climatic condition of the planet is very severe, only a certain part of land can be cultivated.<P>Suppose that the surface of the planet is a plane, and the cultivable land has the shape of a non self-cutting polygon which has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> vertices with coordinates <SPAN CLASS="MATH">(<I>X</I><SUB>1</SUB>, <I>Y</I><SUB>1</SUB>),(<I>X</I><SUB>2</SUB>, <I>Y</I><SUB>2</SUB>),...,(<I>X</I><SUB>n</SUB>, <I>Y</I><SUB>n</SUB>)</SPAN> <tex2html_verbatim_mark>, listed in a traversal order around the polygon. On the cultivable land, the group of people from Earth lives in a research station at position <SPAN CLASS="MATH">(<I>X</I><SUB>p</SUB>, <I>Y</I><SUB>p</SUB>)</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="591" HEIGHT="695" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="\epsfbox{p4344.eps}"> <tex2html_verbatim_mark></DIV><P>On the planet Alpha, earthquakes often occur. Each time an earthquake occurs, a crack is created that people can not move through. This crack can go through the cultivable land and divide the cultivable land into separated parts. Luckily, the crack never crosses the research station. The example in the figure above shows two cracks divide the cultivable land into three separated parts, and the area of cultivable land that the group of people living in the research station can reach after two earthquakes is 22.<P>Let's assume that there are <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> earthquakes occurred, which are numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>. Each earthquake generated a crack that is described by a line passing through two points <SPAN CLASS="MATH">(<I>X</I><SUP>j</SUP><SUB>1</SUB>, <I>Y</I><SUP>j</SUP><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>X</I><SUP>j</SUP><SUB>2</SUB>, <I>Y</I><SUP>j</SUP><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>j</I> = 1..<I>M</I>)</SPAN> <tex2html_verbatim_mark>.<P>Your task is to write a program to calculate the area of cultivable land that the group of people living in the research station in position <SPAN CLASS="MATH">(<I>X</I><SUB>p</SUB>, <I>Y</I><SUB>p</SUB>)</SPAN> <tex2html_verbatim_mark> can reach after <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> earthquakes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data test, the first line contains the integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$"><I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> separated by space, denoting the coordinates of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th vertex of the polygon, representing the cultivable land. The next line contains two integers <SPAN CLASS="MATH">(<I>X</I><SUB>p</SUB>, <I>Y</I><SUB>p</SUB>)</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$"><I>X</I><SUB>p</SUB>, <I>Y</I><SUB>p</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark> separated by space, denoting the coordinates of the research station. The next line contains the integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4344.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains four integers <SPAN CLASS="MATH"><I>X</I><SUP>j</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUP>j</SUP><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>X</I><SUP>j</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Y</I><SUP>j</SUP><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> separated by space, describing the line representing the crack created by the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th earthquake.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line an integer indicating the integer part of <SPAN CLASS="MATH">(<I>s</I> <TT>*</TT> 100)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> is the area of reachable cultivable land after <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> earthquakes.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
0 0 
2 0 
0 2 
0 0 
1 
1 1 1 0 
6 
1 1 
9 1 
9 5 
5 5 
5 8 
1 8 
5 3 
2 
1 1 5 8 
7 1 7 2
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
150 
2200
</PRE><P>
______________________________________________________
4345||||||false||||||

<P>
An IT company decided to publish an internal newsletter describing the projects that have been successfully completed. Each department submits a text paragraph that will be printed in a corresponding designated box of the newsletter. Let's assume that the paragraph contains only characters <!-- MATH
 $a \ldots z$
 -->
<SPAN CLASS="MATH"><I>a</I>...<I>z</I></SPAN>
<tex2html_verbatim_mark> and spaces (ASCII code is 32) in several lines, and a word is defined to be the longest sequence of non-space characters on a line. 

<P>

<P>
<BR>
The printing has to satisfy the following rules: 

<P>

<UL>
<LI>Text will be printed in a fixed-width font (meaning that every character occupies a fixed size width) from left to right and going down to the next line at the end of every line. 
</LI>
<LI>The number of printed characters in every line must be the same. 
</LI>
<LI>Words are printed in the box in the same order as they appear in the given paragraph. A word cannot be split or printed on more than one line. 
</LI>
<LI>Consecutive words on the same line are separated by exactly one space. 
</LI>
<LI>Every line contains only words from the original paragraph and spaces. 
</LI>
<LI>Any line that starts with a space must contain only spaces.
</LI>
</UL>

<P>

<P>
<BR>
The newsletter editor wants to formally assess the prettiness level of a paragraph printing by defining the <SPAN  CLASS="textit">unbalance</SPAN> of it as the sum of the cubes of the number of space characters at the end of each line including lines containing only spaces. The smaller the <SPAN  CLASS="textit">unbalance</SPAN>, the prettier the paragraph printing is. 

<P>
Consider the following example where the paragraph is printed in a box with three lines and each line has a 20-characters width in two ways: 

<P>

<IMG
 WIDTH="282" HEIGHT="123" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4345img1.png
 ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert l\vert}
...
...tt{eeeeeee ffffff} \\
\texttt{ggggggggg} \\
\hline
\end{tabular}\end{center}}$"><IMG
 WIDTH="277" HEIGHT="123" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4345img1.png
 ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\begin{tabular}{\vert l\vert}...
...dd eeeeeee} \\
\texttt{ffffff ggggggggg} \\
\hline
\end{tabular}\end{center}}$">
<P>
In this example, the <SPAN  CLASS="textit">unbalance</SPAN> of the paragraph printing on the left is <!-- MATH
 $0^{3} + 6^{3} + 11^{3} = 1547$
 -->
<SPAN CLASS="MATH">0<SUP>3</SUP> +6<SUP>3</SUP> +11<SUP>3</SUP> = 1547</SPAN>
<tex2html_verbatim_mark> while the <SPAN  CLASS="textit">unbalance</SPAN> of the paragraph printing on the right is <!-- MATH
 $7^{3} + 6^{3} + 4^{3} = 623$
 -->
<SPAN CLASS="MATH">7<SUP>3</SUP> +6<SUP>3</SUP> +4<SUP>3</SUP> = 623</SPAN>
<tex2html_verbatim_mark>. The paragraph printing on the right is considered prettier. 

<P>
Given a text paragraph and a box to be printed, your task is to write a program to find the prettiest printing that has the smallest unbalance.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.

<P>
For each data set, the first line contains an integer <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < L \le 100)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4345img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> representing the number of lines in the designated box. The second line contains an integer <SPAN CLASS="MATH"><I>W</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(0 < W \le 1000)$
 -->
<SPAN CLASS="MATH">(0 &lt; <I>W</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4345img1.png
 ALT="$ \le$">1000)</SPAN>
<tex2html_verbatim_mark> representing the number of characters width of the box. The remaining lines contain the paragraph with no more than 1000 words ended with a blank line.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each data test, write on one line the corresponding <SPAN  CLASS="textit">unbalance</SPAN> of the prettiest paragraph printing in the designated box. Write `<TT>-1</TT>' in case there does not exist any way to print the paragraph in the designated box.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
3 
3 
20
aaa bbbbbbbbb 
c dddd 
eeeeeee ffffff 
ggggggggg

2 
5 
abcde abcde 

2 
5 
abcde abcde 
a
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
623 
0 
-1
</PRE>

<P>

______________________________________________________
4346||||||false||||||
<P>The city traffic network consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nodes numbered from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> one-way roads connecting pairs of nodes. In order to reduce the length of the shortest path between two different critical nodes <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, a list of <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> two-way roads are proposed as candidates to be constructed.<P>Your task is to write a program to choose one two-way road from the proposed list in order to minimize the resulting shortest path between <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains five positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>k</I> &lt; 300)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$"><I>s</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$"><I>n</I>)</SPAN> <tex2html_verbatim_mark> separated by space. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains three integers <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> separated by space, representing the length <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < l_{i} \le 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>l</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th one-way road connecting node <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line of the next <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> lines contains three positive integers <SPAN CLASS="MATH"><I>u</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>v</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>q</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4346img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> separated by space, representing the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th proposed two-way road of length <SPAN CLASS="MATH"><I>q</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> connecting node <SPAN CLASS="MATH"><I>u</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>v</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set, write on one line the smallest possible length of the shortest path after building the chosen one two-way road from the proposed list. In case, there does not exist a path from <SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>, write `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
4 5 3 1 4 
1 2 13 
2 3 19 
3 1 25 
3 4 17 
4 1 18 
1 3 23 
2 3 5 
2 4 25
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
35
</PRE><P>
______________________________________________________
4347||||||false||||||
<P>A table has <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> rows labeled by numbers from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> columns also labeled by numbers from 0 to <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark>. The coordinate of a cell belonging to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th column is <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>. Each cell has a value of 0 or 1. In this table, there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> cells having the value of 0. The remaining cells in the table have the values of 1. Two players play a game by making moves in turn until no more moves can be made. The first player will make the move first. Each player can only make one move at each step. The player who cannot make a move loses and the other player wins the game. A legal move is an action to flip the value (from 0 to 1 or from 1 to 0) of four cells at four corners of a rectangle inside the table which satisfies the following conditions:<P><P><BR><DL COMPACT><DT>-</DT><DD>the rectangle is has more than 1 row and more than 1 column,</DD><DT>-</DT><DD>the cell with the highest row-column coordinates among the four cells must have the value of 0.</DD></DL><P><P><BR>Given the values of cells in the table, your task is to write a program to help the first player to find a winning strategy so that he will win the game no matter how the other player plays.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets. For each data set, the first line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < n < 1000)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 1000)</SPAN> <tex2html_verbatim_mark> representing the size of the table. The next line contains an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < m <100)$
 --><SPAN CLASS="MATH">(0 &lt; <I>m</I> &lt; 100)</SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le x,y < n)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4347img1.png ALT="$ \le$"><I>x</I>, <I>y</I> &lt; <I>n</I>)</SPAN> <tex2html_verbatim_mark> separated by space representing the coordinates of a cell with the value of 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line <TT>1</TT> if there exists a winning strategy for the first player with the given table or `<TT>0</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
100 
1 
0 0 
100 
3 
0 1 
0 20 
0 30 
100 
2 
2 3 
3 2 
10 
2 
1 2 
2 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
0 
0 
1
</PRE><P>
______________________________________________________
4348||||||false||||||
<P>Microhoo and Googloo are two competing IT companies from the same city. Each company has offices scattered across the city. To protect their critical information from each other, both companies have agreed to locate their headquarters as far from each other as possible.<P>Given the locations of Microhoo and Googloo existing offices, your task is to write a program to help the two companies to select their headquarters from existing offices so that the distance between their headquarters is longest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data set, the first line contains the integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$">30000)</SPAN> <tex2html_verbatim_mark> representing the total number of offices for both companies. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> line contains three integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$">| <I>x</I><SUB>i</SUB>|,| <I>y</I><SUB>i</SUB>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$">10<SUP>8</SUP>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$"><I>c</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4348img1.png ALT="$ \le$">1)</SPAN> <tex2html_verbatim_mark> separated by space, where <SPAN CLASS="MATH">(<I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> is the coordinate of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th office and it is Microhoo's office if <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB> = 0</SPAN> <tex2html_verbatim_mark> and Googloo's if <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB> = 1</SPAN> <tex2html_verbatim_mark>.<P>It is guaranteed that each company has at least one office.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line the integer part of the longest distance between Microhoo's and Googloo's headquarters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
0 0 0 
3 -2 1 
5 
1 5 1 
-5 2 0 
3 7 1 
6 -2 0 
5 1 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
9
</PRE><P>
______________________________________________________
4349||||||false||||||
<P>There has been a growing interest in adventure tourism lately. However, organizing adventure tours is not an easy task. It requires very careful preparation with attention to specific details.<P>This tour has <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> young male and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> female participants. In addition to the logistic and rescue team, the organizers also assign <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> more guides to join the tour. In the first stage of the tour, the road is quite narrow passing a cliff; the group will have to go in one line. To be able to help each other, a female participant has to go next to, i.e. before or after, a male participant or a guide. Furthermore, there must be at least one participant next to a guide. Given these constraints, there are several ways the group can form a line. Let's denote B, G and M as a male participant, a female participant and a guide respectively. A line formation can be represented by a string of length <SPAN CLASS="MATH">(<I>p</I> + <I>q</I> + <I>k</I>)</SPAN> <tex2html_verbatim_mark> containing characters from the set {B, G, M}. Two line formations are different if their string representations are different. For example, the group having 2 male, 2 female and a guide <SPAN CLASS="MATH">(<I>p</I> = <I>q</I> = 2, <I>k</I> = 1)</SPAN> <tex2html_verbatim_mark> has 24 different way to form a line as follows:<P><DIV ALIGN="CENTER"><IMG WIDTH="893" HEIGHT="374" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4349.png ALT="\epsfbox{p4349.eps}"> <tex2html_verbatim_mark></DIV><P>Given <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, let's denote <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> as the number of different ways to form a line. Your task is to write a program to calculate the remainder of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> divided by <SPAN CLASS="MATH">10<SUP>7</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data test, there is only one line containing three integers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4349.png ALT="$ \le$"><I>p</I>, <I>q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4349.png ALT="$ \le$">1000, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4349.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4349.png ALT="$ \le$">10)</SPAN> <tex2html_verbatim_mark> separated by space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line the remainder of the number of different line formations divided by <SPAN CLASS="MATH">10<SUP>7</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
2 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
24
</PRE><P>
______________________________________________________
4350||||||false||||||
<P>The game of Moebius is not well known, but there are some fanatics who spend their whole day playing Moebius. In this game, the player is to find the way to clear a pair of squares containing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> on a Moebius with the minimum cost.<P><DIV ALIGN="CENTER"><IMG WIDTH="570" HEIGHT="323" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="\epsfbox{p4350a.eps}"> <tex2html_verbatim_mark></DIV><P>A Moebius is made from a rectangular <SPAN CLASS="MATH"><I>M</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark> paper, namely ABCD. Each face of this paper consists of a rectangular grid of equivalent squares <SPAN CLASS="MATH">1&#215;1</SPAN> <tex2html_verbatim_mark>. On both grids, columns are sequentially numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and rows are sequentially numbered from 1 to <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, all starting at A corner. In addition, every square <SPAN CLASS="MATH">(<I>i</I>, <I>j</I>)</SPAN> <tex2html_verbatim_mark>, located at row <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> and column <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>, can contain <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> or nothing (empty square). Taking this paper and giving it a half-twist, then joining the ends together, A with C and B with D, to form a single band, we have a Moebius, which has only one surface, for this game.<P><DIV ALIGN="CENTER"><IMG WIDTH="1163" HEIGHT="483" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="\epsfbox{p4350b.eps}"> <tex2html_verbatim_mark></DIV><P>One clearance of a pair of squares containing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> could be executed only if there is a direct path between two squares through consecutive 4-neighbouring empty squares with at most two turns, either turn left or turn right. The intermediate empty squares may locate out of the Moebius. The cost to clear a pair of squares containing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> is the length of the shortest direct path between two squares. After a clearance, the two original squares containing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> become empty. The figure above shows two consecutive clearances with the cost of 5 and 8 respectively.<P>Your task is to write a program to perform one clearance to clear a given pair of squares containing <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> with the minimum total cost using at most one extra intermediate clearance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file consists of several data sets. The first line of the input file contains the number of data sets which is a positive integer and is not bigger than 20. The following lines describe the data sets.<P>For each data test, the first line contains 2 integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$"><I>M</I>, <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> separated by space. The next two lines contain 3-tuples of the form <SPAN CLASS="MATH"><I>C</I>&nbsp;<I>u</I>&nbsp;<I>v</I></SPAN> <tex2html_verbatim_mark> describing the two squares to remove, where <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is either `<TT>F</TT>' for the front surface or `<TT>B</TT>' for the back surface, <SPAN CLASS="MATH"><I>u</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$"><I>u</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$"><I>M</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$"><I>v</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4350a.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark> are integer coordinates on the original rectangular surface.<P>The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines describing the front surface of the Moebius. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line in these <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> consecutive characters where each character can be <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> or ``<TT>.</TT>" (``<TT>.</TT>" for empty), describing the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row of the front surface.<P>The next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines describing the back surface of the Moebius. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th line contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> consecutive characters where each character can be <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I></SPAN> <tex2html_verbatim_mark> or ``<TT>.</TT>" (``<TT>.</TT>" for empty), describing the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th row of the back surface.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data test, write in one line the minimum total cost. Write `<TT>-1</TT>' if the given pair cannot be cleared using at most one intermediate clearance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
3 10 
F 2 7 
B 2 1 
.....xxx.z
.....xzx.x
.....xxx.z
.z........
xz........
zz........
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
13

______________________________________________________
4351||||||false||||||
<P><P><BR>We say that two graphs are <SPAN CLASS="textit">equivalent</SPAN> if and only if a one-to-one correspondence between their nodes can be established and under such a correspondence their edges are exactly the same. Given A and B, two undirected simple graphs with the same number of vertexes, you are to find a series of operations with the minimum cost that will make the two graphs equivalent. An operation may be one of the following two types:<P><DL COMPACT><DT>a)</DT><DD>Add an arbitrary edge <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, provided that <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> does not exist before such an operation. Such an operation costs <SPAN CLASS="MATH"><I>I</I><SUB>A</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>I</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark> on two graphs, respectively.</DD><DT>b)</DT><DD>Delete an existing edge <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, which costs <SPAN CLASS="MATH"><I>D</I><SUB>A</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark> on two graphs, respectively.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with three integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>A</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$">8, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$"><I>M</I><SUB>A</SUB>, <I>M</I><SUB>B</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$"><IMG WIDTH="67" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ {\frac{{N \ast (N-1)}}{{2}}}$">)</SPAN> <tex2html_verbatim_mark>, the total number of vertexes, the number of edges in graph A, and the number of edges in graph B, respectively. Four integers <SPAN CLASS="MATH"><I>I</I><SUB>A</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>I</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>D</I><SUB>A</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>D</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark> come next, <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$"><I>I</I><SUB>A</SUB>, <I>I</I><SUB>B</SUB>, <I>D</I><SUB>A</SUB>, <I>D</I><SUB>B</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$">32767)</SPAN> <tex2html_verbatim_mark>, representing the costs as stated in the problem description. The next <SPAN CLASS="MATH"><I>M</I><SUB>A</SUB> + <I>M</I><SUB>B</SUB></SPAN> <tex2html_verbatim_mark> lines describe the edges in graph A followed by those in graph B. Each line consists of exactly two integers, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(X \neq Y, 0 \le X,Y < N)$
 --><SPAN CLASS="MATH">(<I>X</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \neq$"> <I>Y</I>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4351img1.png ALT="$ \le$"><I>X</I>, <I>Y</I> &lt; <I>N</I>)</SPAN> <tex2html_verbatim_mark>.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I><SUB>A</SUB> = 0</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>M</I><SUB>B</SUB> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Please print the minimum cost in the format as illustrated below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 0 0 
1 2 3 7 

4 2 3 
1 6 5 1
0 1
0 3
0 2
1 2
1 0

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 0 
Case #2: 1
</PRE><P>
______________________________________________________
4352||||||false||||||
<P><SPAN CLASS="textit">An antique machine with <SPAN CLASS="MATH"><I>(</I><IMG WIDTH="30" HEIGHT="50" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \choose3$"><I>)</I></SPAN> <tex2html_verbatim_mark> switches capable of processing integers in the range <SPAN CLASS="MATH">0..2<SUP>N</SUP> - 1</SPAN> <tex2html_verbatim_mark> has just been discovered. Each switch is associated to a distinct integer in <SPAN CLASS="MATH">0..2<SUP>N</SUP> - 1</SPAN> <tex2html_verbatim_mark> with exactly three ones in its binary representation. By setting switches associated with number <SPAN CLASS="MATH"><I>X</I><SUB>0</SUB>, <I>X</I><SUB>1</SUB>,..., <I>X</I><SUB>M-1</SUB></SPAN> <tex2html_verbatim_mark> to on, any integer <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> passing through the machine will render a result of <SPAN CLASS="MATH"><I>Y</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \oplus$"> <I>X</I><SUB>0</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \oplus$"> <I>X</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \oplus$">...<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \oplus$"> <I>X</I><SUB>M-1</SUB></SPAN> <tex2html_verbatim_mark> (here ``<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \oplus$"></SPAN> <tex2html_verbatim_mark>" stands for bitwise-XOR)</SPAN>.<P><P><BR>We are interested in the number of configurations capable of transforming integer <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> with exactly <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> switches set to on. Could you write a program to help us?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \le$">40, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \le$">min{20, <I>(</I><IMG WIDTH="30" HEIGHT="50" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4352img1b.png ALT="$ \choose3$"><I>)</I>})</SPAN> <tex2html_verbatim_mark> followed by two binary integers, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, each containing exactly <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> bits.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print a single integer, the total number of ways to transform the first integer into the second one. Since the answer could be quite large, you are only required to find the result <SPAN CLASS="MATH">%10007</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 
1101 
1001 

3 1 
101 
010 

5 3 
11010 
10111

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 1 
Case #2: 1 
Case #3: 6
</PRE><P>
______________________________________________________
4353||||||false||||||
<P><P><BR>What do researchers working at ICPC (Institute for Cryptographic Programming and Computing) do for fun? Well, as you probably have expected, in addition to solving algorithm-related problems on online judges, they also like to toy with various cryptographic schemes. Recently one of the researchers, Tom, has become interested in RSA algorithm implementations used in handheld devices.<P><P><BR><SPAN CLASS="textit">Note that the description of the general RSA algorithm is as follows:</SPAN><P><DL COMPACT><DT>1)</DT><DD><SPAN CLASS="textit">Choose two distinct prime numbers <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, and let <SPAN CLASS="MATH"><I>n</I> = <I>pq</I></SPAN> <tex2html_verbatim_mark>;</SPAN></DD><DT>2)</DT><DD><SPAN CLASS="textit">Choose an integer <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> such that <SPAN CLASS="MATH">gcd(<I>e</I>,(<I>p</I> - 1)(<I>q</I> - 1) = 1</SPAN> <tex2html_verbatim_mark>;</SPAN></DD><DT>3)</DT><DD><SPAN CLASS="textit">Compute the integer <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> that satisfies the congruence relation <SPAN CLASS="MATH"><I>de</I> <IMG WIDTH="18" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4353img1.png ALT="$ \equiv$"> 1( mod(<I>p</I> - 1)(<I>q</I> - 1))</SPAN> <tex2html_verbatim_mark>.</SPAN></DD></DL><P><SPAN CLASS="textit">Then, if person A wants to give person B a way to send an encrypted message to him, A can follow the above steps and release <SPAN CLASS="MATH">(<I>n</I>, <I>e</I>)</SPAN> <tex2html_verbatim_mark> as his public key. Upon receiving A's public key, B can simply encrypt message <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le x < n)$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4353img1.png ALT="$ \le$"><I>x</I> &lt; <I>n</I>)</SPAN> <tex2html_verbatim_mark> by computing <SPAN CLASS="MATH"><I>y</I> = <I>x</I><SUP>e</SUP> mod <I>n</I></SPAN> <tex2html_verbatim_mark>. This would result in a message which ideally only A could decrypt with his private key <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>x</I> = <I>y</I><SUP>d</SUP> mod <I>n</I></SPAN> <tex2html_verbatim_mark>.</SPAN><P><P><BR>As the computation power of handheld devices is usually limited, a relatively small <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> is usually used to encrypt data. However this can lead to great security risks. For example, it is quite simple to recover <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark> (i.e., factor <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>) when you have both the public key <SPAN CLASS="MATH">(<I>n</I>, <I>e</I>)</SPAN> <tex2html_verbatim_mark> and the private key <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>. Could you help Tom write a program to demonstrate this?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case contains three integers, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>e</I></SPAN> <tex2html_verbatim_mark> ( <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4353img1.png ALT="$ \le$">10<SUP>100</SUP>, 3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4353img1.png ALT="$ \le$"><I>e</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4353img1.png ALT="$ \le$">31</SPAN> <tex2html_verbatim_mark>). All three integers are given without any preceding zeros. It is guaranteed that all numbers satisfy the condition as given in the problem statement.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>n</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>e</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print two prime numbers, <SPAN CLASS="MATH"><I>p</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>q</I></SPAN> <tex2html_verbatim_mark>, such that <SPAN CLASS="MATH"><I>n</I> = <I>pq</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>p</I> &lt; <I>q</I></SPAN> <tex2html_verbatim_mark>, in the format as illustrated below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
55 27 3 

290203 168101 5 

0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 5 11 
Case #2: 29 10007
</PRE><P>
______________________________________________________
4354||||||false||||||
<P><P><BR><SPAN CLASS="textit">An antique machine with <SPAN CLASS="MATH"><I>(</I><IMG WIDTH="30" HEIGHT="50" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \choose3$"><I>)</I></SPAN> <tex2html_verbatim_mark> switches capable of processing integers in the range <SPAN CLASS="MATH">0..2<SUP>N</SUP> - 1</SPAN> <tex2html_verbatim_mark> has just been discovered. Each switch is associated to a distinct integer in <SPAN CLASS="MATH">0..2<SUP>N</SUP> - 1</SPAN> <tex2html_verbatim_mark> with exactly three ones in its binary representation. By setting switches associated with number <SPAN CLASS="MATH"><I>X</I><SUB>0</SUB>, <I>X</I><SUB>1</SUB>,..., <I>X</I><SUB>M-1</SUB></SPAN> <tex2html_verbatim_mark> to on, any integer <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> passing through the machine will render a result of <SPAN CLASS="MATH"><I>Y</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \oplus$"> <I>X</I><SUB>0</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \oplus$"> <I>X</I><SUB>1</SUB> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \oplus$">...<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \oplus$"> <I>X</I><SUB>M-1</SUB></SPAN> <tex2html_verbatim_mark> (here ``<SPAN CLASS="MATH"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \oplus$"></SPAN> <tex2html_verbatim_mark>" stands for bitwise-XOR)</SPAN>.<P>Further inspections reveal that contrary to what we assumed in problem B, some of the switches on the machine are damaged due to their old age. We are interested in whether a configuration transforming integer <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> into <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> still exists, and if so, the minimum number of switches that have to be set to <SPAN CLASS="textit">on</SPAN> to make it possible.<P><P><BR>WARNING: a na&#239;ve algorithm might not be sufficient to solve this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \le$">20)</SPAN> <tex2html_verbatim_mark>, representing the number of bits and the number of functioning switches, respectively. Two integers, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le S, T < 2^{N})$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \le$"><I>S</I>, <I>T</I> &lt; 2<SUP>N</SUP>)</SPAN> <tex2html_verbatim_mark>, come in the next line, followed by another <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th one describing the value <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> associated to the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th switch <!-- MATH
 $(0 \le V_{i} < 2^{N})$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4354img1b.png ALT="$ \le$"><I>V</I><SUB>i</SUB> &lt; 2<SUP>N</SUP>)</SPAN> <tex2html_verbatim_mark>.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print a single integer, the minimum number of operations, or `<TT>Impossible</TT>' (without quotes) if no feasible sequence exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 7 
55 21 
11 
22 
25
56 
41 
49 
28 

5 2 
0 21 
22 
28 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 2 
Case #2: Impossible
</PRE><P>
______________________________________________________
4355||||||false||||||

<P>

<P>
<BR>
The head technical person, Joey, at ACM (Association for Cyberspace Management) has just received a weird cable-like device -- supposedly invented by programmers during a competition -- for inspection. 

<P>
The device may be viewed as a straight bi-directional cable, which can be used for transmitting arbitrary number of data packages simultaneously. The speed with which each package is sent will be pre-determined by the device and furthermore may vary within a certain range; however it will remain constant throughout each package's entire transmission process. The time it takes for a single data package with speed <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark> to arrive at the opposite end of the cable is thus <!-- MATH
 $\frac{L}{V}$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="19" HEIGHT="41" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ {\frac{{L}}{{V}}}$"></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> is the length of the cable. 

<P>
In addition, the user may sometimes send a fixed-speed ``detector" package, which is capable of reporting the number of data packages alongside itself at any time. 

<P>
Finding this device highly amusing, Joey decides to perform an experiment on the odd ``cable". He has scheduled <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> packages to be sent from the left side and another <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> to be sent from the other side of the cable; also, he has calculated the possible speed range for each data package. With this information in hand, Joey wants to estimate the <SPAN  CLASS="textit">effectiveness</SPAN> of a detector he will send. For a detector that departs at a certain time, its <SPAN  CLASS="textit">effectiveness</SPAN> can be represented as a real number in the range <SPAN CLASS="MATH">[0..1]</SPAN>
<tex2html_verbatim_mark>, which is simply the ratio of the time during which the detector has a chance of <SPAN ID="txt52">reporting all <SPAN CLASS="MATH"><I>N</I> + <I>M</I></SPAN>
<tex2html_verbatim_mark> packages</SPAN> (<SPAN  CLASS="textit">explained below</SPAN>) to the total time. 

<P>
If Joey sends the detector at an arbitrary time in <SPAN CLASS="MATH">[<I>S</I>, <I>T</I>]</SPAN>
<tex2html_verbatim_mark> with speed <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark> from the left side of the cable, what is the <SPAN  CLASS="textit">average</SPAN> effectiveness he can achieve? 

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Note:</SPAN> For a detector to have a chance of <SPAN ID="txt56">reporting all <SPAN CLASS="MATH"><I>N</I> + <I>M</I></SPAN>
<tex2html_verbatim_mark> packages</SPAN> at time <SPAN CLASS="MATH"><I>T</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark>, the device must be able to schedule all data packages with such speeds so that all can share the same position with the detector at time <SPAN CLASS="MATH"><I>T</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input file.

<P>
Each test case starts with one integer, <SPAN CLASS="MATH"><I>L</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le L \le 10^{6})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ \le$">10<SUP>6</SUP>)</SPAN>
<tex2html_verbatim_mark>, the length of the cable. The next line contains one integer, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>, the number of packages Joey will send from the left side, followed by <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines, the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line with three real numbers, <SPAN CLASS="MATH"><I>MinV</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>MaxV</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Leave</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le MinV_{i} \le MaxV_{i}$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ \le$"><I>MinV</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ \le$"><I>MaxV</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>), which are the minimum speed, maximum speed, and departure time for package <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>, respectively. Another <SPAN CLASS="MATH">(<I>M</I> + 1)</SPAN>
<tex2html_verbatim_mark> lines follow, describing the packages departing from the right side. The last line of the input contains three real numbers, <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>T</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>V</I></SPAN>
<tex2html_verbatim_mark>, (<SPAN CLASS="MATH"><I>T</I> - <I>S</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4355img1.png
 ALT="$ \ge$">1</SPAN>
<tex2html_verbatim_mark>), whose meanings are described above. 

<P>
The total number of packages Joey sent will be in the interval <SPAN CLASS="MATH">[1, 5000]</SPAN>
<tex2html_verbatim_mark>. It is guaranteed that the speed of any data packet, including that of the detector, will be no less than 0.01; also, all real numbers in the input will be given with at most two digits after the decimal point, and will belong to the interval: <!-- MATH
 $[0,10^{6}]$
 -->
<SPAN CLASS="MATH">[0, 10<SUP>6</SUP>]</SPAN>
<tex2html_verbatim_mark>. 

<P>
Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>L</I> = 0</SPAN>
<tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Please print the average effectiveness of the detector's trip, with precision up to 0.00001. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
1 
5.00 10.00 2.00 
2 
10.05 11.50 0.05 
1.68 2.00 0.01 
3.00 4.00 1000 

5 
1 
1.25 2.50 1.0 
0 
1.00 5.00 2.50

0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case #1: 0.00000 
Case #2: 0.25000
</PRE>

<P>

______________________________________________________
4356||||||false||||||
<P><P><BR>A new mighty weapon has just been developed, which is so powerful that it can attack a sector of indefinite size, as long as the center of the circle containing the sector is the location of the weapon. We are interested in developing a fire-control system that calculates firing-solutions automatically.<P><P><BR><SPAN CLASS="textit">The following example gives an example of a firing solution:</SPAN><P><DIV ALIGN="CENTER"><IMG WIDTH="581" HEIGHT="692" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4356.png ALT="\epsfbox{p4356.eps}"> <tex2html_verbatim_mark></DIV><P><SPAN CLASS="textit">Here the firing region is the sector <SPAN CLASS="MATH"><IMG WIDTH="45" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4356.png ALT="$ \overline{{ABC}}$"></SPAN> <tex2html_verbatim_mark> that covers six points: A, B, C, D, E, H.</SPAN><P><SPAN CLASS="textit">You may further assume that the weapon is always located at point (0, 0), no targets will be on the point (0, 0) and the coordinates of the targets will be</SPAN> distinct.<P><P><BR>A firing solution is called <SPAN CLASS="textit">effective</SPAN> if and only if it covers a minimum of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> points out of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> given points (targets) on the two-dimensional Cartesian plane. Furthermore, since the cost of a particular fire solution is in direct proportion to the size of the area it covers, a firing could be quite costly; thus we are only interested in the optimal firing solution with the minimum cost.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with two non-negative integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4356.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4356.png ALT="$ \le$">5000, <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4356.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines each containing two integers, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, describing the distinct location of one target. It is guaranteed that the absolute value of any integer does not exceed 1000.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print the required size (to two decimal places), in the format as indicated in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 1 
0 1 
1 0 
-5 -6 

3 2 
0 2 
2 0 
-5 -6 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 0.00 
Case #2: 3.14
</PRE><P>
______________________________________________________
4357||||||false||||||
<P><P><BR>Peter has recently decided to hold a party at Stockholm, where the ACM/ICPC 2009 World Final will be held. Unfortunately, despite Peter's affluence, he is not able to invite all of his friends due to the astronomical price of the air ticket to Stockholm. He has devised the following rule to determine which subset of his friends will be invited:<P><P><BR><DL COMPACT><DT>a)</DT><DD>Any invited person must have at least <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> acquaintances at the party. This is to ensure everyone at the party will not feel alien.</DD><DT>b)</DT><DD>Any invited person must be unfamiliar with at least <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> people. Otherwise some people may not have the chance to communicate with a stranger.</DD></DL><P>Given the relationships between Peter's friends, you are to figure out whom Peter should invite to the party so as to maximize its size.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with four integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$">100, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><IMG WIDTH="67" HEIGHT="46" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ {\frac{{N\ast(N-1)}}{{2}}}$">, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>A</I>, <I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>N</I> - 1)</SPAN> <tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains two integers, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \le$"><I>N</I> - 1, <I>X</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4357img1.png ALT="$ \neq$"> <I>Y</I>)</SPAN> <tex2html_verbatim_mark>, indicating that friend <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and friend <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> are acquaintances.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>A</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print a single integer, the maximum number of friends Peter will be able to invite.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 1 1 
0 1 
1 2

4 4 2 1 
0 1 
1 2 
2 3 
0 3

0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 0 
Case #2: 4
</PRE><P>
______________________________________________________
4358||||||false||||||
<P><P><BR>We are examining two specific classes of languages (a possibly infinite set of strings) in this problem. Fortunately (or maybe unfortunately), we are not given the strings contained in each language directly, rather we are given two deterministic finite automatons that describe such languages.<P>Your task here is simple: to determine if the languages described by the two automatons are the same.<P>For those of you who are unfamiliar with the concept of deterministic finite automata, you may use the following information:<P><BLOCKQUOTE><SPAN CLASS="textit">A deterministic finite automata (DFA) is a 5-tuple, <SPAN CLASS="MATH">(<I>S</I>,<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \Sigma$">, <I>T</I>, <I>s</I>, <I>A</I>)</SPAN> <tex2html_verbatim_mark>, consisting of</SPAN></BLOCKQUOTE><P><UL><LI><SPAN CLASS="textit">a finite set of states (<SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>)</SPAN> </LI><LI><SPAN CLASS="textit">a finite set called the alphabet <SPAN CLASS="MATH">(<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \Sigma$">)</SPAN> <tex2html_verbatim_mark></SPAN> </LI><LI><SPAN CLASS="textit">a transition function <SPAN CLASS="MATH">(<I>T</I> : <I>S</I>&#215;<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \Sigma$"> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \rightarrow$"> <I>S</I>)</SPAN> <tex2html_verbatim_mark></SPAN> </LI><LI><SPAN CLASS="textit">a start state <SPAN CLASS="MATH">(<I>s</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \in$"> <I>S</I>)</SPAN> <tex2html_verbatim_mark></SPAN> </LI><LI><SPAN CLASS="textit">a set of accept states <SPAN CLASS="MATH">(<I>A</I> <IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \subseteq$"> <I>S</I>)</SPAN> <tex2html_verbatim_mark></SPAN> </LI></UL><P><BLOCKQUOTE><SPAN CLASS="textit">Let <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> be a DFA such that <SPAN CLASS="MATH"><I>M</I> = (<I>S</I>,<IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \Sigma$">, <I>T</I>, <I>s</I>, <I>A</I>)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>X</I> = <I>x</I><SUB>0</SUB><I>x</I><SUB>1</SUB>...<I>x</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> be a string over the alphabet <SPAN CLASS="MATH"><IMG WIDTH="17" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \Sigma$"></SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> accepts the string <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> if a sequence of states, <SPAN CLASS="MATH"><I>r</I><SUB>0</SUB>, <I>r</I><SUB>1</SUB>,..., <I>r</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark>, exists in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> with the following conditions:</SPAN></BLOCKQUOTE><P><OL><LI><SPAN CLASS="MATH"><I>r</I><SUB>0</SUB> = <I>s</I></SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH"><I>r</I><SUB>i+1</SUB> = <I>T</I>(<I>r</I><SUB>i</SUB>, <I>x</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="textit">for</SPAN> <SPAN CLASS="MATH"><I>i</I> = 0,..., <I>n</I> - 1</SPAN> <tex2html_verbatim_mark> </LI><LI><SPAN CLASS="MATH"><I>r</I><SUB>n</SUB> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \in$"> <I>A</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P><BLOCKQUOTE><DIV ALIGN="RIGHT">- Wikipedia</DIV></BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>The first line of each test case is one integer, <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>, the size of the alphabet. In each test case, the description of automaton A comes before that of automaton B. The description of each automaton starts with one line containing <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \le$">2000)</SPAN> <tex2html_verbatim_mark>, the number of states in the automaton, followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each line of the format: <SPAN CLASS="MATH"><I>F</I>, <I>X</I><SUB>0</SUB>, <I>X</I><SUB>1</SUB>,..., <I>X</I><SUB>T-1</SUB></SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $(F \in \{0,1\}, -1 \le X_{i} < N)$
 --><SPAN CLASS="MATH">(<I>F</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \in$"> {0, 1}, -1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4358img1.png ALT="$ \le$"><I>X</I><SUB>i</SUB> &lt; <I>N</I>)</SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>F</I> = 1</SPAN> <tex2html_verbatim_mark>, then the state is an accepting state; also, if <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB> = - 1</SPAN> <tex2html_verbatim_mark>, it means that the state has no corresponding transition available for character <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The start state of both finite automatons will always be state 0.<P>Two successive test cases are separated by a blank line. A case with a single `<TT>0</TT>' indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print `<TT>Yes</TT>' if the two languages described by the automatons are equivalent; output `<TT>No</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 
1 -1 1
0 -1 2
0 -1 0
2
1 -1 1
0 -1 0

3 
4 
1 -1 -1 1
1 -1 -1 2
1 -1 -1 3
1 -1 -1 1
2 
1 -1 -1 1
1 -1 -1 0

0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: No 
Case #2: Yes
</PRE><P>
______________________________________________________
4359||||||false||||||
<P><P><BR><SPAN CLASS="textit">According to Wikipedia, image processing is any form of signal processing for which the input is an image, such as photographs or frames of video; the output of image processing can be either an image or a set of characteristics or parameters related to the image. Most image-processing techniques involve treating the image as a two-dimensional signal and applying standard signal-processing techniques to it.</SPAN><P><P><BR>The task you are facing here is a relatively easy one (compared to our general conception of image processing!). Given a black-and-white image of size <SPAN CLASS="MATH"><I>R</I> <TT>*</TT> <I>C</I></SPAN> <tex2html_verbatim_mark> with some digits (and possibly other shapes) on it, your program needs to figure out the digits written on the image. Specifically, the digits drawn on the graph will adhere to the following rules:<P><OL><LI>Digits are drawn with a series of strokes. A stroke can be regarded as a rectangle of any size on the image, and its edges will always be parallel to either x-axis or y-axis. The number of strokes required to draw each digit will be exactly as follows:<P><DIV ALIGN="CENTER"><TABLE COLS=10 BORDER FRAME=BOX RULES=GROUPS><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><COLGROUP><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>6</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>7</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>9</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD></TR></TBODY></TABLE></DIV><P>Refer to Figure 2 if you're unclear about how the digits are drawn. </LI><LI>Although the width of strokes used to draw a digit might be different, the outer shapes of digits will strictly follow those specified in Figure 2. </LI><LI>In order for a digit to be recognizable, all parts (strokes and joints) presented in the graph below must also be clearly distinguishable in the image.<BR><SPAN CLASS="textit">(Refer to the last sample test case if you are unsure about this requirement; in that test case, when the middle stroke of 2 is omitted, the number should not be considered as recognizable.)</SPAN> </LI><LI>You may assume that the image is not rotated, and there is no noise in the input. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="891" HEIGHT="208" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4359.png ALT="\epsfbox{p4359.eps}"> <tex2html_verbatim_mark></DIV><P>Please output the sum of digits recognizable in the graph. In the case that no characters is recognizable, please output `<TT>0</TT>' instead.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with two integers, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4359.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4359.png ALT="$ \le$">500)</SPAN> <tex2html_verbatim_mark>, specifying the number of rows/columns of the graph. Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines contains consecutive <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> characters (`<TT>0</TT>' or `<TT>1</TT>'), describing the image to be processed.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>R</I> = 0</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print a single integer, the sum of recognizable numbers.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 12 
001101011111 
000101000011 
000101001111 
001101000011 
000000000111 

5 3 
111 
010 
110 
010 
110 

6 14 
11111000011111 
11001000000011 
11111001000000 
11111001001110 
11001011001010 
11111000001110 

5 2 
11
01 
11 
01 
11 

6 9 
111100111 
000100001 
000100011 
011100010 
010000011 
011110000 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 4 
Case #2: 0 
Case #3: 15
Case #4: 3 
Case #5: 2
</PRE><P>
______________________________________________________
4360||||||false||||||
<P><P><BR><SPAN CLASS="textit">Recognizing junk mails is a tough task. The method used here consists of two steps:</SPAN><P><P><BR><DL COMPACT><DT>1)</DT><DD><SPAN CLASS="textit">Extract the common characteristics from the incoming email.</SPAN></DD><DT>2)</DT><DD><SPAN CLASS="textit">Use a filter matching the set of common characteristics extracted to determine whether the email is a spam.</SPAN></DD></DL><P><P><BR>We want to extract the set of common characteristics from the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> sample junk emails available at the moment, and thus having a handy data-analyzing tool would be helpful. The tool should support the following kinds of operations:<P><P><BR><DL COMPACT><DT>a)</DT><DD>`<TT>M</TT> <SPAN CLASS="MATH"><I>X</I>&nbsp;<I>Y</I></SPAN> <tex2html_verbatim_mark>', meaning that we think that the characteristics of spam <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> are the same. Note that the relationship defined here is <SPAN CLASS="textit">transitive</SPAN>, so relationships (other than the one between <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>) need to be created if they are not present at the moment.</DD><DT>b)</DT><DD>`<TT>S</TT> <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>', meaning that we think spam <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> had been misidentified. Your tool should remove all relationships that spam <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> has when this command is received; after that, spam <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> will become an isolated node in the relationship graph.</DD></DL><P><P><BR>Initially no relationships exist between any pair of the junk emails, so the number of distinct characteristics at that time is <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>.<P>Please help us keep track of any necessary information to solve our problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input file.<P>Each test case starts with two integers, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4360img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4360img1.png ALT="$ \le$">10<SUP>5</SUP>, 0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4360img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4360img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>, the number of email samples and the number of operations. <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines follow, each line is one of the two formats described above.<P>Two successive test cases are separated by a blank line. A case with <SPAN CLASS="MATH"><I>N</I> = 0</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I> = 0</SPAN> <tex2html_verbatim_mark> indicates the end of the input file, and should not be processed by your program.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, please print a single integer, the number of distinct common characteristics, to the console. Follow the format as indicated in the sample below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 6 
M 0 1
M 1 2
M 1 3
S 1 
M 1 2
S 3 
 
3 1 
M 1 2 

0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case #1: 3 
Case #2: 2

______________________________________________________
4361||||||false||||||
<P>The game of Tobo is played on a plastic board designed into a 3 <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> 3 grid with cells numbered from 1 to 9 as shown in figure (a). The grid has four dials (labeled ``A" to ``D" in the figure.) Each dial can be rotated in 90 degrees increment in either direction. Rotating a dial causes the four cells currently adjacent to it to rotate along. For example, figure (b) shows the Tobo after rotating dial ``A" once in a clockwise direction. Figure (c) shows the Tobo in figure (b) after rotating dial ``D" once in a counterclockwise direction.<P><DIV ALIGN="CENTER"><IMG WIDTH="800" HEIGHT="263" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4361.png ALT="\epsfbox{p4361.eps}"> <tex2html_verbatim_mark></DIV><P>Kids love to challenge each other playing the Tobo. Starting with the arrangement shown in figure (a), (which we'll call <SPAN CLASS="textit">the standard arrangement,</SPAN>) one kid would randomly rotate the dials, <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> number of times, in order to ``shuffle" the board. Another kid then tries to bring the board back to its standard arrangement, taking no more than <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> rotations to do so. The less rotations are needed to restore it, the better. This is where you see a business opportunity. You would like to sell these kids a program to advise them on the minimum number of steps needed to bring a Tobo back to its standard arrangement.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on a line by itself. Each line is made of 10 decimal digits. Let's call the first digit <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark>. The remaining 9 digits are non-zeros and describe the current arrangement of the Tobo in a row-major top-down, left-to-right ordering. The first sample case corresponds to figure (c).<P>The last line of the input file is a sequence of 10 zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the result using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a single space, and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the minimum number of rotations needed to bring the Tobo back to its standard arrangement. If this can't be done in <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> dials or less, then <SPAN CLASS="MATH"><I>R</I> =</SPAN> <tex2html_verbatim_mark><TT>-1</TT>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
3413569728
1165432789
0000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1. 2
2. -1
</PRE><P>
______________________________________________________
4362||||||false||||||

<P>
A seven segment display, similar to the one shown on the right, is composed of seven light-emitting elements. Individually on or off, they can be combined to produce 127 different combinations, including the ten Arabic numerals. The figure below illustrates how the ten numerals are displayed. 7-seg displays (as they're often abbreviated) are widely used in digital clocks, electronic meters, and calculators. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4362a.eps}$
 -->
<IMG
 WIDTH="901" HEIGHT="128" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4362a.png
 ALT="\epsfbox{p4362a.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
A 7-seg has seven connectors, one for each element, (plus few more connectors for other electrical purposes.) Each element can be turned on by sending an electric current through its pin. Each of the seven pins is viewed by programmers as a single bit in a 7-bit number, as they are more comfortable dealing with bits rather than electrical signals. The figure below shows the bit assignment for a typical 7-seg, bit 0 being the right-most bit. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4362b.eps}$
 -->
<IMG
 WIDTH="699" HEIGHT="245" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4362a.png
 ALT="\epsfbox{p4362b.eps}">
<tex2html_verbatim_mark>
</DIV>

<P>
For example, in order to display the digit 1, the programmer knows that only bits 1 and 3 need to be on, i.e. the 7-bit binary number to display digit 1 is ``0001010", or 10 in decimal. Let's call the decimal number for displaying a digit, its <SPAN  CLASS="textit">display code</SPAN>, or just <SPAN  CLASS="textit">code</SPAN> for short. Since a 7-seg displays 127 different configurations, display codes are normally written using 3 decimal places with leading zeros if necessary, i.e. the display code for digit 1 is written as 010. 

<P>
In a 9-digit calculator, 9 7-seg displays are stacked next to each other, and are all controlled by a single controller. The controller is sent a sequence of <SPAN CLASS="MATH">3<I>n</I></SPAN>
<tex2html_verbatim_mark> digits, representing <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> display codes, where <!-- MATH
 $0 < n < 10$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 10</SPAN>
<tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>n</I> &lt; 9</SPAN>
<tex2html_verbatim_mark>, the number is right justified and leading zeros are automatically displayed. For example, the display code for 13 is 010079 while for 144 it is 010106106 

<P>
Write a program that reads the display codes of two numbers, and prints the display code of their sum. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Your program will be tested on one or more test cases. Each test case is specified on a single line in the form of <TT><SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>+<SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>=</TT> where both <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> are display codes for decimal numbers <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> respectively where <SPAN CLASS="MATH">0 &lt; <I>a</I></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $b < a + b < 1, 000, 000, 000$
 -->
<SPAN CLASS="MATH"><I>b</I> &lt; <I>a</I> + <I>b</I> &lt; 1, 000, 000, 000</SPAN>
<tex2html_verbatim_mark>. The last line of the input file is the word ``<TT>BYE</TT>'' (without the double quotes.) 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print <TT><SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark>+<SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark>=<SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark></TT> where <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> is the display code for <SPAN CLASS="MATH"><I>a</I> + <I>b</I></SPAN>
<tex2html_verbatim_mark>. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
010079010+010079=
106010+010=
BYE
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
010079010+010079=010106106
106010+010=106093
</PRE>

<P>

______________________________________________________
4363||||||false||||||
<P>In Computer Science, <SPAN CLASS="textit">pattern matching</SPAN> is the act of checking if a certain sequence conforms (matches) a given pattern. Patterns are usually specified using a language based on <SPAN CLASS="textit">regular expression</SPAN>. In this problem, we'll use a simple regular expression to express patterns on sequences of decimal digits. A pattern is a sequence of one or more decimal digits `0' ...`9', asterisks `*', and hash signs `#'. A `*' denotes a sequence of an even number of digits, whereas a `#' denotes a sequence of an odd number of digits. For example, the pattern ``129" only matches the sequence 129. The pattern ``1*3" matches all sequences beginning with 1, ending with 3, and having an even number of decimal digits between the first and last digits. As another example, the pattern ``#55" matches the sequences 155, 12355, 1234555, but none of the sequences 55, 1255, 123455. Your task is to write a program to find if a given sequence matches a given pattern.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more data sets. Each data set contains a single pattern and one or more sequences to match. The first line of each data set specifies the pattern, and the remaining lines specify the sequences to match against that pattern. The end of a data set (except the last) is identified by the word ``<TT>END</TT>" (without the double quotes.) The end of the last data set is identified by the word ``<TT>QUIT</TT>". All lines are 100,000 characters long or shorter.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>.</code><SPAN CLASS="MATH"><I>s</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>result</I></SPAN> <tex2html_verbatim_mark><P><P><BR><P>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at one,) and s is the sequence number (starting at one within each test case,) and result is either the word ``<TT>match</TT>" if the given string matches the pattern, or the word ``<TT>not</TT>" if it doesn't.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
129
1299
129
1129
END
1*3
123
1223
END
#55
155
12355
55
1255
QUIT
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.1. not
1.2. match
1.3. not
2.1. not
2.2. match
3.1. match
3.2. match
3.3. not
3.4. not
</PRE><P>
______________________________________________________
4364||||||false||||||
<P>Take a look at the triangle on the left of the figure below. It is made of 9 (unit) triangles arranged in three rows (<SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark>). Needless to say, a unit triangle is a triangle with <SPAN CLASS="MATH"><I>N</I> = 1</SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="572" HEIGHT="186" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4364.png ALT="\epsfbox{p4364.eps}"> <tex2html_verbatim_mark></DIV><P>If you study the figure for few seconds, you'll realize that you can find 13 different triangles (which we'll call sub-triangles.) Of these 13 sub-triangles we have: Nine unit triangle; three with <SPAN CLASS="MATH"><I>N</I> = 2</SPAN> <tex2html_verbatim_mark>, and one with <SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark>. The following table lists the number of sub-triangles in arrangements with <SPAN CLASS="MATH"><I>N</I> &lt; 5</SPAN> <tex2html_verbatim_mark>.<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=5 BORDER FRAME=HSIDES RULES=NONE><COL ALIGN=RIGHT><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT># of Rows:</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I> = 1</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I> = 2</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I> = 3</SPAN> <tex2html_verbatim_mark></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>N</I> = 4</SPAN> <tex2html_verbatim_mark></TD></TR><TR><TD VALIGN=BASELINE ALIGN=RIGHT NOWRAP><TT># of Sub-triangles:</TT></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>5</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>13</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>27</TD></TR></TABLE></DIV><P><P><BR>Let's define the value of a unit triangle to be the integer value written in that triangle. In general, the value of a triangle is the sum of values in all its unit triangles. The triangle on the right is the same as the other one but with the sub-triangle having the largest value being highlighted. Write a program to determine the sub-triangle with the largest value.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified in a single line made of integers (separated by spaces.) The first integer is the number of rows in the test case, and the remaining integers are the values of the unit triangles specified in a top-down, left-to-right order. (the first test case in the example below is the same as the one in the figure.) The last line of the input file contains the number 0 (which is not part of the test cases.)<P>The maximum number of rows is 400. The absolute value of a unit triangle is less than 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the result using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a single space, and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is the maximum value of a sub-triangle in that test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 6 -24 0 12 -10 12 40 -4 6
4 1 1 -1 1 1 -1 1 -1 1 1 -1 1 -1 1 -1 1
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 54
2. 4
</PRE><P>
______________________________________________________
4365||||||false||||||
<P><BLOCKQUOTE><TT>You:</TT> What's the score? Did I miss much?</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> It's 2-1 for elAhli and the second half just started. The first half was quite boring.</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> Who scored first? elAhli or ezZamalek?</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> What difference does it make?</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> Big difference! I can predict the outcome of the match if I knew the order of which goals were scored in the first half.</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> What do you mean?</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> It's 2-1 for elAhli, right? One of three things could have happened: elAhli scored two goals then ezZamalek scored; Or, elAhli scored its first goal, then ezZamalek, then elAhli again; Or, ezZamalek scored first, then elAhli scored its two goals.</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> <SPAN CLASS="textit">So?!!</SPAN> I still don't understand what difference does that make? It's still 2-1 for elAhli! Why don't you just relax and let us continue watching the game in peace.</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> <SPAN CLASS="textit">You don't understand!!</SPAN> I believe the probability of who'll win depends on the order of how goals were scored. Now I have to predict the outcome for 3 possibilities.</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> And what if the score was 3-2? What would you have done then?</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> I would have to work for 5 different possibilities. No?</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> <SPAN CLASS="textit">Of course not!</SPAN> The number of possibilities isn't always equal to the sum.</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> Can you tell me when will it be equal to the sum?</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> You're a programmer, why don't you write a program that counts the number of possibilities and compare it to the sum?</BLOCKQUOTE><P><BLOCKQUOTE><TT>You:</TT> I don't have the time, I want to watch the match. Besides, I have nine other problems to worry about.</BLOCKQUOTE><P><BLOCKQUOTE><TT>Me:</TT> I'll give you a hint. The possibilities will be equal to the sum only if one of the teams scored a certain number of goals.</BLOCKQUOTE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case specifies two natural numbers (<SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>) (separated by one or more spaces) representing the score of the first half. No team will be able to score more than 10 goals. The last line of the input file contains two <TT>-1</TT>'s (which is not part of the test cases.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Format For each test case where the number of possibilities is equal to the sum, print:<P><P><BR><TT><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>+<SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>=<SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR>Where <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are as above and <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is their sum. If the number of possibilities is not equal to the sum, replace the `<TT>=</TT>' sign with `<TT>!=</TT>' (without the quotes.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 1
1 0
-1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
2+1=3
1+0=1
</PRE><P>
______________________________________________________
4366||||||false||||||
<P>Einbahnstra<SPAN CLASS="MATH"><IMG WIDTH="15" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4366img1.png ALT="$ \beta$"></SPAN> <tex2html_verbatim_mark>e (German for a one-way street) is a street on which vehicles should only move in one direction. One reason for having one-way streets is to facilitate a smoother flow of traffic through crowded areas. This is useful in city centers, especially old cities like Cairo and Damascus. Careful planning guarantees that you can get to any location starting from any point. Nevertheless, drivers must carefully plan their route in order to avoid prolonging their trip due to one-way streets. Experienced drivers know that there are multiple paths to travel between any two locations. Not only that, there might be multiple roads between the same two locations. Knowing the shortest way between any two locations is a must! This is even more important when driving vehicles that are hard to maneuver (garbage trucks, towing trucks, etc.)<P>You just started a new job at a car-towing company. The company has a number of towing trucks parked at the company's garage. A tow-truck lifts the front or back wheels of a broken car in order to pull it straight back to the company's garage. You receive calls from various parts of the city about broken cars that need to be towed. The cars have to be towed in the same order as you receive the calls. Your job is to advise the tow-truck drivers regarding the shortest way in order to collect all broken cars back in to the company's garage. At the end of the day, you have to report to the management the total distance traveled by the trucks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2>Your program will be tested on one or more test cases. The first line of each test case specifies three numbers (<SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>) separated by one or more spaces. The city has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> locations with distinct names, including the company's garage. <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is the number of broken cars. <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> is the number of roads in the city. Note that <!-- MATH
 $0 < N < 100$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 100</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le C < 1000$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4366img1.png ALT="$ \le$"><I>C</I> &lt; 1000</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I> &lt; 10000</SPAN> <tex2html_verbatim_mark>. The second line is made of <SPAN CLASS="MATH"><I>C</I> + 1</SPAN> <tex2html_verbatim_mark> words, the first being the location of the company's garage, and the rest being the locations of the broken cars. A location is a word made of 10 letters or less. Letter case is significant. After the second line, there will be exactly <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines, each describing a road. A road is described using one of these three formats:<P><P><BR><TT><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> -<SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>-&gt; <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> &lt;-<SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>- <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT><BR><TT><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> &lt;-<SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark>-&gt; <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark></TT><P><P><BR><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are names of two different locations, while <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> is a positive integer (not exceeding 1000) denoting the length of the road. The first format specifies a one-way street from location <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark>, the second specifies a one-way street from <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, while the last specifies a two-way street between them. <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark>, ``the arrow", and <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> are separated by one or more spaces. The end of the test cases is specified with a line having three zeros (for <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>.)<P>The test case in the example below is the same as the one in the figure.<P><DIV ALIGN="CENTER"><IMG WIDTH="736" HEIGHT="367" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4366img1.png ALT="\epsfbox{p4366.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the total distance traveled using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is test case number (starting at 1,) <code></code>is a space, and <SPAN CLASS="MATH"><I>V</I></SPAN> <tex2html_verbatim_mark> is the result.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4 2 5
NewTroy Midvale Metrodale
NewTroy   &lt;-20-&gt; Midvale
Midvale   --50-&gt; Bakerline
NewTroy    &lt;-5-- Bakerline
Metrodale &lt;-30-&gt; NewTroy
Metrodale  --5-&gt; Bakerline
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
1. 80
</PRE><P>
______________________________________________________
4367||||||false||||||
<P>Falling Stocks. Bankrupted companies. Banks with no Cash. Seems like the best time to invest: ``<SPAN CLASS="textit">Think I'll buy me a football team!</SPAN>"<P>No seriously, I think I have the solution to at least the problem of cash in banks. Banks nowadays are all owing each other great amounts of money and no bank has enough cash to pay other banks' debts even though, on paper at least, they should have enough money to do so. Take for example the inter-bank loans shown in figure (a). The graph shows the amounts owed between four banks (A ...D). For example, A owes B 50M while, at the same time, B owes A 150M. (It is quite common for two banks to owe each other at the same time.) A total amount of 380M in cash is needed to settle all debts between the banks.<P><DIV ALIGN="CENTER"><IMG WIDTH="966" HEIGHT="394" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4367.png ALT="\epsfbox{p4367.eps}"> <tex2html_verbatim_mark></DIV><P>In an attempt to decrease the need for cash, and after studying the example carefully, I concluded that there's a lot of cash being transferred unnecessarily. Take a look:<P><OL><LI>C owes D the same amount as D owes A, so we can say that C owes A an amount of 30M and get D out of the picture. </LI><LI>But since A already owes C 100M, we can say that A owes C an amount of 70M. </LI><LI>Similarly, B owes A 100M only, (since A already owes B 50M.) This reduces the above graph to the one shown in figure (b) which reduces the needed cash amount to 190M (A reduction of 200M, or 53%.) </LI><LI>I can still do better. Rather than B paying A 100M and A paying 70M to C, B can pay 70M (out of A's 100M) directly to C. This reduces the graph to the one shown in figure (c). Banks can settle all their debts with only 120M in cash. A total reduction of 260M or 68%. <SPAN CLASS="textit">Amazing!</SPAN> </LI></OL><P>I have data about inter-bank debts but I can't seem to be able to process it to obtain the minimum amount of cash needed to settle all the debts. Could you please write a program to do that?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified on <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> lines where <!-- MATH
 $N < 1, 000$
 --><SPAN CLASS="MATH"><I>N</I> &lt; 1, 000</SPAN> <tex2html_verbatim_mark> is the number of banks and is specified on the first line. The remaining <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines specifies the inter-bank debts using an <SPAN CLASS="MATH"><I>N</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark> adjacency matrix (with zero diagonal) specified in row-major order. The ith row specifies the amounts owed by the ith bank. Amounts are separated by one or more spaces. All amounts are less than 1000. The last line of the input file has a single 0.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2>For each test case, print the result using the following format:<P><P><BR><SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark><code>. </code><SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark><P><P><BR>where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the test case number (starting at 1,) <code></code>is a space character, <SPAN CLASS="MATH"><I>B</I></SPAN> <tex2html_verbatim_mark> is the amount of cash needed before reduction and <SPAN CLASS="MATH"><I>A</I></SPAN> <tex2html_verbatim_mark> is the amount of cash after reduction.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
4
  0  50 100   0
150   0  20   0
  0   0   0  30
 30   0   0   0
0
</PRE><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1. 380 120
</PRE><P>
______________________________________________________
4368||||||false||||||
<P>In the traditional game of <SPAN CLASS="textit">Musical Chairs</SPAN>, <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> children run around <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> chairs (placed in a circle) as long as music is playing. The moment the music stops, children run and try to sit on an available chair. The child still standing leaves the game, a chair is removed, and the game continues with <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> children. The last child to sit is the winner.<P>In an attempt to create a similar game on these days' game consoles, you modify the game in the following manner: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> Children are seated on <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> chairs arranged around a circle. The chairs are numbered from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. Your program pre-selects a positive number <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>. The program starts going in circles counting the children starting with the first chair. Once the count reaches <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>, that child leaves the game, removing his/her chair. The program starts counting again, beginning with the next chair in the circle. The last child remaining in the circle is the winner.<P><DIV ALIGN="CENTER"><IMG WIDTH="624" HEIGHT="123" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4368.png ALT="\epsfbox{p4368.eps}"> <tex2html_verbatim_mark></DIV><P>For example, consider the game illustrated in the figure above for <SPAN CLASS="MATH"><I>N</I> = 5</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I> = 3</SPAN> <tex2html_verbatim_mark>. In the figure, the dot indicates where counting starts and <SPAN CLASS="MATH">&#215;</SPAN> <tex2html_verbatim_mark> indicates the child leaving. Starting off, child #3 leaves the game, and counting restarts with child #4. Child #1 is the second child to leave and counting restart with child #2 resulting in child #5 leaving. Child #2 is the last to leave, and child #4 is the winner. Write a program to determine the winning child given both <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case specifies two positive integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> on a single line, separated by one or more spaces, where <!-- MATH
 $N, D < 1, 000, 000$
 --><SPAN CLASS="MATH"><I>N</I>, <I>D</I> &lt; 1, 000, 000</SPAN> <tex2html_verbatim_mark>.<P>The last line of the input file contains two <TT>0</TT>'s and is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write the winner using the following format:<P><P><BR><SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark><code> </code><SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark><P><P><BR>Where <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> are as above, <code></code>is a space character, and <SPAN CLASS="MATH"><I>W</I></SPAN> <tex2html_verbatim_mark> is the winner of that game.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
5 3
7 4
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 3 4
7 4 2
</PRE><P>
______________________________________________________
4369||||||false||||||
<P>According to Wikipedia, a <SPAN CLASS="textit">Walsh matrix</SPAN> is a specific square matrix, with dimensions equal to a power of 2, the entries of which are +1 or -1, and the property that the dot product of any two distinct rows (or columns) is zero. Below are the first three Walsh Matrices. (The gray lines are imaginary lines for illustration purpose only.)<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>W</I><SUB>1</SUB> = [1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>W</I><SUB>2</SUB> = <IMG WIDTH="15" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left[\vphantom{\begin{array}{r\vert r}
1 &amp; 1 \\  \hline 1 &amp; -1 \\  \end{array} }\right.$"><IMG WIDTH="67" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \begin{array}{r\vert r}
1 &amp; 1 \\  \hline 1 &amp; -1 \\  \end{array}$"><IMG WIDTH="15" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left.\vphantom{\begin{array}{r\vert r}
1 &amp; 1 \\  \hline 1 &amp; -1 \\  \end{array} }\right]$">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>W</I><SUB>4</SUB> = <IMG WIDTH="17" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left[\vphantom{\begin{array}{rr\vert rr}
1 &amp; 1 &amp; 1 &amp; 1 \\  1 &amp; -1 &amp; 1 &amp; -1 \\  \hline 1 &amp; 1 &amp; -1 &amp; -1 \\  1 &amp; -1 &amp; -1 &amp; 1 \\  \end{array} }\right.$"><IMG WIDTH="143" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \begin{array}{rr\vert rr}
1 &amp; 1 &amp; 1 &amp; 1 \\  1 &amp; -1 &amp; 1 &amp; -1 \\  \hline 1 &amp; 1 &amp; -1 &amp; -1 \\  1 &amp; -1 &amp; -1 &amp; 1 \\  \end{array}$"><IMG WIDTH="17" HEIGHT="104" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left.\vphantom{\begin{array}{rr\vert rr}
1 &amp; 1 &amp; 1 &amp; 1 \\  1 &amp; -1 &amp; 1 &amp; -1 \\  \hline 1 &amp; 1 &amp; -1 &amp; -1 \\  1 &amp; -1 &amp; -1 &amp; 1 \\  \end{array} }\right]$"></DIV><P><tex2html_verbatim_mark></P><P>A Walsh Matrix of size <SPAN CLASS="MATH">2<SUP>N+1</SUP></SPAN> <tex2html_verbatim_mark> can be constructed as the ``union" of 4 Walsh Matrices of size <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark> arranged such that the lower right matrix is inverted whereas the other 3 matrices are not, i.e.:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>W</I><SUB>2<SUP>N+1</SUP></SUB> = <IMG WIDTH="15" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left[\vphantom{\begin{array}{r\vert r}
W_{2^N} &amp; W_{2^N} \\  \hline W_{2^N} &amp; -W_{2^N} \\  \end{array} }\right.$"><IMG WIDTH="120" HEIGHT="61" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \begin{array}{r\vert r}
W_{2^N} &amp; W_{2^N} \\  \hline W_{2^N} &amp; -W_{2^N} \\  \end{array}$"><IMG WIDTH="15" HEIGHT="65" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$\displaystyle \left.\vphantom{\begin{array}{r\vert r}
W_{2^N} &amp; W_{2^N} \\  \hline W_{2^N} &amp; -W_{2^N} \\  \end{array} }\right]$"></DIV><P><tex2html_verbatim_mark></P><P><P><BR>Let's number the rows of a given Walsh Matrix from the top starting with row 0. Similarly, let's number the columns of the matrix from the left starting with column 0. Given the four integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, write a program that will construct a Walsh Matrix of size <SPAN CLASS="MATH">2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark> and will print the sum of all the numbers in row #R between columns #S and #E (inclusive.)<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more test cases. Each test case is specified using a single line listing four integers in the following order: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>E</I></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$">60</SPAN> <tex2html_verbatim_mark>, <!-- MATH
 $0 \le R < 2^N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$"><I>R</I> &lt; 2<SUP>N</SUP></SPAN> <tex2html_verbatim_mark> , <!-- MATH
 $0 \le S \le E < 2N$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$"><I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$"><I>E</I> &lt; 2<I>N</I></SPAN> <tex2html_verbatim_mark> , and <SPAN CLASS="MATH"><I>E</I> - <I>S</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4369img1.png ALT="$ \le$">10, 000</SPAN> <tex2html_verbatim_mark>. The last line of the input file has four <TT>-1</TT>'s and is not part of the test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the output on a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE>
2 1 0 1
48 0 0 47
-1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><PRE>
0
48
</PRE><P>
______________________________________________________
4370||||||false||||||
<P><SPAN CLASS="textit">Formula One</SPAN> is the highest class of car racing sports. A typical <SPAN CLASS="textit">Formula One season</SPAN> consists of a series of races called ``<SPAN CLASS="textit">Grands Prix</SPAN>" which constructors like Ferrari, Renault, etc. and others participate with one or more cars driven by the best drivers in the world. During the season, teams compete in two parallel championships: the <SPAN CLASS="textit">drivers championship</SPAN> and the <SPAN CLASS="textit">teams championship</SPAN>.<P>In the <SPAN CLASS="textbf">drivers championship</SPAN>, drivers compete to achieve the maximum total number of points by the end of the season, the rules of the competition states that the top eight drivers at each Grand Prix receive 10,8,6,5,4,3,2,1 points respectively. In case of points tie, the driver with the highest number of first places leads. If still tied, then the highest second places, and so on till the highest 8th places. If still tied, then drivers are sorted lexicographically by their last and then by their first names.<P>After each race, the points received by each driver are added to his team's pocket, and at the end of the season the team with the highest number of points wins the <SPAN CLASS="textbf">teams championship</SPAN>. To add excitement to the season, team sponsors are allowed to buy drivers from other teams even within the same season. In case of points tie between teams, teams are sorted lexicographically by their names. In this problem, you are given data of a formula one season and you're asked to process these data according to the rules above to determine both the drivers and teams standings.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program will be tested on one or more data-sets, each representing a Formula One season. All input lines are 255 characters or less. Studying the sample I/O you'll discover that the first line of each season has an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, where <!-- MATH
 $0 < N < 32$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I> &lt; 32</SPAN> <tex2html_verbatim_mark> and representing the number of Grands Prix in that season. For each Grand Prix, the name of the Grand Prix appears on a line by itself (maximum length is 64 characters) followed by a table of the first name, last name and team name of the top eight drivers, from 1 to 8, in that Grand Prix. Each of the first and last names is a sequence of printable ASCII characters, no longer than 12 characters, and contains no spaces. Each team name is a sequence of printable ASCII characters, no longer than 18 characters, and may contain spaces (but no leading or trailing spaces.) Each team name is followed by a single period `<TT>.</TT>' which is not part of the name. Trailing white space may follow. A line of three <TT>-</TT>'s follows the listing of each Grand Prix. The last line of the input file contains a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each data set in the input you must print ``<TT>Season <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>:</TT>" where <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> is the data-set number (starting from 1.) The next line must state ``<TT>Drivers Standing:</TT>". On subsequent lines list the drivers standing for that season. For each driver, print their first and last names separated by exactly one space and left justified in a field of width 25, followed by a single space, followed by the total number of points achieved by the driver during the season. The drivers standing should be followed by a blank line.<P>The next line must state ``<TT>Teams Standing:</TT>" On subsequent lines list the teams standing for the that season. For each team, print the team name left justified in a field of width 25, followed by a single space, followed by the total number of points the team has scored during the season. The teams standing should be followed by a blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
FORMULA 1 Gran Premio Telefonica de Espana 2006
Pos  Driver                    Team
1    Fernando Alonso           Renault.
2    Michael Schumacher        Ferrari.
3    Giancarlo Fisichella      Renault.
4    Felipe Massa              Ferrari.
5    Kimi Raikkonen            McLaren-Mercedes.
6    Jenson Button             Honda.
7    Rubens Barrichello        Honda.
8    Nick Heidfeld             Sauber-BMW.
---
FORMULA 1 Grand Prix de Monaco 2006
Pos  Driver                    Team
1    Fernando Alonso           Renault.
2    Jaun-Pablo Montoya        McLaren-Mercedes.
3    David Coulthard           RBR-Ferrari.
4    Rubens Barrichello        Honda.
5    Michael Schumacher        Ferrari.
6    Giancarlo Fisichella      Renault.
7    Nick Heidfeld             Sauber-BMW.
8    Ralf Schumacher           Toyota.
---
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Season 1:
Drivers Standing:
Fernando Alonso          20
Michael Schumacher       12
Giancarlo Fisichella     9
Jaun-Pablo Montoya       8
Rubens Barrichello       7
David Coulthard          6
Felipe Massa             5
Kimi Raikkonen           4
Jenson Button            3
Nick Heidfeld            3
Ralf Schumacher          1

Teams Standing:
Renault                  29
Ferrari                  17
McLaren-Mercedes         12
Honda                    10
RBR-Ferrari              6
Sauber-BMW               3
Toyota                   1

______________________________________________________
4371||||||false||||||

Bill is working in a secret laboratory. He is developing missiles for
national security projects. Bill is the head of the aerodynamics department.

One surprising fact of aerodynamics is called Whitcomb area rule.
An object flying at high-subsonic speeds develops local 
supersonic airflows and the resulting shock waves create the effect called wave drag.
Wave drag does not depend on the exact form of the object, but rather
on its <SPAN  CLASS="textit">cross-sectional profile</SPAN>. 

Consider a coordinate system with <SPAN CLASS="MATH"><I>OZ</I></SPAN>
<tex2html_verbatim_mark> axis
pointing in the direction of object's motion. Denote the area of
a section of the object by a plane <SPAN CLASS="MATH"><I>z</I> = <I>z</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> as <SPAN CLASS="MATH"><I>S</I>(<I>z</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark>.
Cross-sectional profile of the object is a function <SPAN CLASS="MATH"><I>S</I></SPAN>
<tex2html_verbatim_mark> that maps <SPAN CLASS="MATH"><I>z</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> to
<SPAN CLASS="MATH"><I>S</I>(<I>z</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark>. There is a perfect aerodynamic shape called Sears-Haack body. 
The closer cross-sectional profile of an object to the cross-sectional 
profile of Sears-Haack body, the less wave drag it introduces.
That is an essence of Whitcomb area rule.

Bill's department makes a lot of computer simulations to study missile's aerodynamic properties 
before it is even built. To approximate missile's cross-sectional profile one
takes samples of <SPAN CLASS="MATH"><I>S</I>(<I>z</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark> for integer arguments <SPAN CLASS="MATH"><I>z</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> from  <SPAN CLASS="MATH"><I>z</I><SUB>min</SUB></SPAN>
<tex2html_verbatim_mark>
to <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN>
<tex2html_verbatim_mark>. 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4371.eps}$
 -->
<IMG
 WIDTH="869" HEIGHT="608" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="\epsfbox{p4371.eps}">
<tex2html_verbatim_mark>
</DIV>
Your task is to find the area <SPAN CLASS="MATH"><I>S</I>(<I>z</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark> for each integer
<SPAN CLASS="MATH"><I>z</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> from <SPAN CLASS="MATH"><I>z</I><SUB>min</SUB></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN>
<tex2html_verbatim_mark>, inclusive, given the description of the missile.
The description of the missile
is given to you as a set of points. The missile is the minimal convex
solid containing all the given points. It is guaranteed that there are
four points that do not belong to the same plane.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<B>
The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P><P>
<BR>
The first line of the input contains three integer numbers:
<SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>z</I><SUB>min</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $4 \le n \le 100$
 -->
<SPAN CLASS="MATH">4<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $0 \le z_{min} \le z_{max} \le 100$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="$ \le$"><I>z</I><SUB>min</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="$ \le$"><I>z</I><SUB>max</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4371.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>).
The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain three integer numbers each: <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>z</I></SPAN>
<tex2html_verbatim_mark> coordinates
of the given points. All coordinates do not exceed <SPAN CLASS="MATH">100</SPAN>
<tex2html_verbatim_mark> by their absolute values.
No two points coincide. There are four points that do not belong to the same plane.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<B>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P><P>
<BR>
For each integer <SPAN CLASS="MATH"><I>z</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> from <SPAN CLASS="MATH"><I>z</I><SUB>min</SUB></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>z</I><SUB>max</SUB></SPAN>
<tex2html_verbatim_mark>, inclusive, output one floating
point number: the area <SPAN CLASS="MATH"><I>S</I>(<I>z</I><SUB>0</SUB>)</SPAN>
<tex2html_verbatim_mark>. 
The area must be precise to
at least 5 digits after decimal point.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
9 0 5
0 0 5
-3 0 2
0 -1 2
3 0 2
0 1 2
2 2 0
2 -2 0
-2 -2 0
-2 2 0

4 0 10
0 -5 3
0 5 3
-3 0 8
3 0 8
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
16.00000
14.92000
10.08000
4.48000
1.12000
0.00000

0.0
0.0
0.0
0.0
9.6000000000
14.4000000000
14.4000000000
9.6000000000
0.0
0.0
0.0
</PRE>

______________________________________________________
4372||||||false||||||

This is an interactive problem.

Your task is to write a program that controls a robot which blindly walks through a maze. 
The maze is <!-- MATH
 $n \times m$
 -->
<SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le n, m \le 30$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4372img1.png
 ALT="$ \le$"><I>n</I>, <I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4372img1.png
 ALT="$ \le$">30</SPAN>
<tex2html_verbatim_mark>) rectangular grid that consists of square 
cells. Each cell is either empty or blocked. All cells on the border of the maze are blocked. 
The robot starts in an empty cell. It can move south, west, north, or east to an adjacent empty cell. 
The robot is blind and has only bump sensors, so when it attempts to move it
can either succeed or bump into blocked cell and fail.

The robot has to visit all empty cells in the maze. All cells are guaranteed to be reachable.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4372.eps}$
 -->
<IMG
 WIDTH="248" HEIGHT="198" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4372img1.png
 ALT="\epsfbox{p4372.eps}">
<tex2html_verbatim_mark>
</DIV>
The picture shows sample maze where blocked cells are, filled and initial robot's location is
designated with a circle.

<P>
<BR>

<B>Interaction protocol</B>

The program must write to the standard output one line with robot's action and wait for
a line in the standard input with a response, then write next action and read next 
response, and so on until all empty cells in the maze had been visited. The program must exit
only when all cells have been visited. Empty cells may be visited multiple times. It is acceptable to 
move even after all cells had been visited.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Output</A>&nbsp;</FONT>
</H2>

Each line of the standard output represents robot's action. It is one of the following five strings:
<TT>SOUTH</TT>, <TT>WEST</TT>, <TT>NORTH</TT>, <TT>EAST</TT>, or <TT>DONE</TT>. <TT>DONE</TT> must be printed when the robot has
visited all empty cells. After printing <TT>DONE</TT> your program must exit. You must flush standard output 
after printing each action.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Input</A>&nbsp;</FONT>
</H2>

Each line of the standard input represents response on robot's action. 
It is either a string <TT>EMPTY</TT> if robot has successfully moved in the specified direction to an adjacent cell or 
a string <TT>BLOCKED</TT> if robot's movement has failed because the corresponding adjacent cell was blocked.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
NORTH
EAST
SOUTH
EAST
SOUTH
WEST
SOUTH
WEST
NORTH
WEST
WEST
NORTH
EAST
NORTH
DONE
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
BLOCKED
BLOCKED
EMPTY
BLOCKED
BLOCKED
EMPTY
BLOCKED
BLOCKED
EMPTY
EMPTY
BLOCKED
BLOCKED
EMPTY
BLOCKED
</PRE>

______________________________________________________
4373||||||false||||||

One famous Russian architect plans to build
a new monumental construction. It will be 
a huge clock that indicates the time from
the beginning of the universe.

The face of this clock contains hands, moving
at constant speeds. They are numbered
from 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> from the fastest to the slowest one.
The fastest hand makes
one revolution per minute (60 seconds). Each next hand moves
slower than previous, the <SPAN CLASS="MATH">(<I>i</I> + 1)</SPAN>
<tex2html_verbatim_mark>-th hand makes one revolution 
when the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th hand makes <SPAN CLASS="MATH"><I>d</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> revolutions.

The setting mechanism of this clock is
very simple. You can take a hand by the handle,
located on its end, and move it in any direction.
When you move the hand, slower hands are moving
in proportion to their usual speeds, and faster
hands are not moving. Remember that hands are huge, 
so setting this clock is a hard job.

Consider an example with three hands: a second hand,
a minute hand, and an hour hand. Their lengths are
5, 15 and 10 meters respectively. You want to set
the clock from 2:30 to 6:00 (fig.&nbsp;1). The easiest way to do it
is to rotate the minute hand <!-- MATH
 $180^{\circ}$
 -->
<SPAN CLASS="MATH">180<SUP><TT>o</TT></SUP></SPAN>
<tex2html_verbatim_mark> clockwise,
and then move the hour hand <!-- MATH
 $90^{\circ}$
 -->
<SPAN CLASS="MATH">90<SUP><TT>o</TT></SUP></SPAN>
<tex2html_verbatim_mark> clockwise.
The total distance you moved the handles of the hands
is approximately 62.83 meters.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4373.eps}$
 -->
<IMG
 WIDTH="1012" HEIGHT="280" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="\epsfbox{p4373.eps}">
<tex2html_verbatim_mark>

Fig.&nbsp;1. Setting clock from 2:30 to 6:00.

</DIV>
Your task is to write a program that finds the way 
to set the clock that minimizes the total distance
you have to move the handles.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The first line of the input contains one integer <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> -- the number of 
hands (<!-- MATH
 $0 < n \le 50$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="$ \le$">50</SPAN>
<tex2html_verbatim_mark>). The second line contains <SPAN CLASS="MATH"><I>n</I> - 1</SPAN>
<tex2html_verbatim_mark> integer numbers
<!-- MATH
 $d_1, d_2, \dots, d_{n-1}$
 -->
<SPAN CLASS="MATH"><I>d</I><SUB>1</SUB>, <I>d</I><SUB>2</SUB>,..., <I>d</I><SUB>n-1</SUB></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $2 \le d_i \le 10^6$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="$ \le$"><I>d</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="$ \le$">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>). The third line 
contains <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integer numbers <!-- MATH
 $l_1, l_2, \dots, l_n$
 -->
<SPAN CLASS="MATH"><I>l</I><SUB>1</SUB>, <I>l</I><SUB>2</SUB>,..., <I>l</I><SUB>n</SUB></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le l_i \le 10^6$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="$ \le$"><I>l</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4373.png
 ALT="$ \le$">10<SUP>6</SUP></SPAN>
<tex2html_verbatim_mark>) --
lengths of clock hands.
Next two lines contain two non-negative integer numbers (one number per line): time indicated by
the clock and the actual time that should be set. Both times are measured in
seconds from the beginning of the universe and are less than <SPAN CLASS="MATH">2<SUP>63</SUP></SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, print the minimal possible total distance
you have to move the handles, on a line by itself. The answer must be precise to
at least 4 digits after decimal point.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
3
60 12
5 15 10
52200
453600
3
60 12
5 15 10
18048
8133
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
62.831853072
47.12388980384689
</PRE>

______________________________________________________
4374||||||false||||||

MegaCity of the future is a rectangular grid of streets. Each intersection 
has integer Cartesian coordinates <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN>
<tex2html_verbatim_mark>. To get from intersection 
<SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> with coordinates <SPAN CLASS="MATH"><I>x</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark> to intersection <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> with coordinates 
<SPAN CLASS="MATH"><I>x</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark> you need to drive exactly
<!-- MATH
 $|x_a-x_b| + |y_a-y_b|$
 -->
<SPAN CLASS="MATH">| <I>x</I><SUB>a</SUB> - <I>x</I><SUB>b</SUB>| + | <I>y</I><SUB>a</SUB> - <I>y</I><SUB>b</SUB>|</SPAN>
<tex2html_verbatim_mark> blocks. Usually, it takes 10 time units to drive one block,
so one can easily compute the time it takes to get from <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark>.
However, traffic jams that occur in MegaCity turn estimation 
of minimal driving time into a complex problem that you have to solve.

Traffic jams in MegaCity affect a rectangular area that is specified
by coordinates of its bottom-left and top-right corners.
The time to travel one block in the traffic jam is specified.
All streets that are strictly inside the rectangular region are affected by the traffic 
jam. Sometimes, it is better to drive around the traffic jams to save time, 
but sometimes it is better to drive through some traffic jams as shown in the example -- 17
blocks are driven outside of traffic jams, taking 10 time units per block, and 2 blocks
in the light traffic jam with 11 time units per block.

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4374.eps}$
 -->
<IMG
 WIDTH="799" HEIGHT="515" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4374.png
 ALT="\epsfbox{p4374.eps}">
<tex2html_verbatim_mark>
</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The first line of the input contains four integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>a</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>y</I><SUB>b</SUB></SPAN>
<tex2html_verbatim_mark>
-- coordinates of the start and finish intersections. The second line
of the input contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $0 \le n \le 1000$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4374.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4374.png
 ALT="$ \le$">1000</SPAN>
<tex2html_verbatim_mark>) which
specifies the number of traffic jams. The following <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines describe traffic jams. Each traffic jam is described
by five integer numbers <SPAN CLASS="MATH"><I>x</I><SUB>1, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2, i</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>, where
first four numbers are coordinates of the bottom-left and top-right corners of
the jammed area (<!-- MATH
 $x_{1,i} < x_{2,i}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1, i</SUB> &lt; <I>x</I><SUB>2, i</SUB></SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $y_{1,i} < y_{2,i}$
 -->
<SPAN CLASS="MATH"><I>y</I><SUB>1, i</SUB> &lt; <I>y</I><SUB>2, i</SUB></SPAN>
<tex2html_verbatim_mark>), and <SPAN CLASS="MATH"><I>t</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>
(<!-- MATH
 $10 < t_i \le 10^8$
 -->
<SPAN CLASS="MATH">10 &lt; <I>t</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4374.png
 ALT="$ \le$">10<SUP>8</SUP></SPAN>
<tex2html_verbatim_mark>) is the time it takes to travel one block inside this traffic
jam. All coordinates in the input are from 0 to <SPAN CLASS="MATH">10<SUP>8</SUP></SPAN>
<tex2html_verbatim_mark> inclusive. 
Areas of
traffic jams neither intersect nor touch each other. Start and finish points are different 
and do not lie inside nor on the border of any traffic jam.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, write to the output a single integer -- the minimal driving time 
from intersection <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> to intersection <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> -- on a line by itself.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1 6 15 3
4
2 1 3 7 44
5 2 10 4 33
8 5 11 9 22
12 1 14 8 11
2 8 10 3
0
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
192
130
</PRE>

______________________________________________________
4375||||||false||||||

One important problem in concurrent programming is to ensure exclusive access to 
shared resources by multiple threads. It is also known as Mutual Exclusion protocol. 
A code that needs to be protected from concurrent execution is called 
<SPAN  CLASS="textit">critical section</SPAN> (<SPAN  CLASS="textit">CS</SPAN>). In order to coordinate access to CS, application threads use
a set of shared variables to send information to each other. These shared variables 
are distinct from all the variables that are used by application code. In practice, 
mutual exclusion protocol is implemented as two methods -- <SPAN  CLASS="textit">enterCS</SPAN> and
<SPAN  CLASS="textit">exitCS</SPAN>. When application needs to execute
some code in CS, it calls enterCS, then executes CS, then calls exitCS. 

For theoretical analysis of mutual exclusion protocol one must consider running
application as a whole. Each thread of application is represented
as an infinite loop that repeatedly performs some work unrelated to CS, which is called
<SPAN  CLASS="textit">non-critical section</SPAN> (<SPAN  CLASS="textit">NCS</SPAN>), then calls enterCS, then executes CS, then calls exitCS, 
then the loop repeats. The code inside NCS and CS is not relevant; it is considered to 
perform no operations related to the protocol and does not modify shared variables used by the protocol.

We consider a system with two concurrently running threads. Threads
use a set of shared one-bit variables to implement mutual exclusion protocol. 
Each variable can store a value of zero or one that can be read or written by a single instruction. 
Shared variables are initialized to zero.
Each thread has a local pointer to the instruction (<SPAN  CLASS="textit">IP</SPAN>) that it is going to execute 
next. Execution starts from the top of the code. During each step of execution one of the 
threads is arbitrarily chosen, it executes one instruction, and then changes its IP
to the next instruction to execute. 
This infinite sequence of steps is called <SPAN  CLASS="textit">history</SPAN>.
A history is called <SPAN  CLASS="textit">legal</SPAN> if either both threads execute infinitely many steps or just one thread 
does, while the other thread, having taken a finite number of steps, stops with IP at NCS.

The table below contains several algorithms in pseudo-code that attempt to implement mutual exclusion protocol.
In this pseudo-code <SPAN  CLASS="textit">id</SPAN> is 0 for the first thread and 1 for the second. Variables
<SPAN  CLASS="textit">want</SPAN>[0], <SPAN  CLASS="textit">want</SPAN>[1], and <SPAN  CLASS="textit">turn</SPAN> are shared between threads to implement mutual 
exclusion protocol. Lines marked with ``<code>+</code>'' implement enterCS, lines marked with ``<code>-</code>''
implement exitCS. Lines NCS() and CS() are placeholders for some code that works inside non-critical and critical 
sections respectively and is not relevant for this problem.

<P>
<BR>

<TABLE COLS=3 BORDER FRAME=BOX RULES=GROUPS>
<COLGROUP><COL ALIGN=JUSTIFY WIDTH="5.0cm"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5.2cm"><COLGROUP><COL ALIGN=JUSTIFY WIDTH="5.6cm">
<TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="142">
Algorithm 1 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="147"> Algorithm 2 </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="159"> Algorithm 3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="142">
<BR><PRE>loop forever
  NCS()
+ loop while 
+   (turn == 1 - id)
  CS()
- turn &lt;- (1 - id)
end loop
</PRE>
<BR> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="147">
<BR><PRE>loop forever
  NCS()
+ want[id] &lt;- 1
+ loop while 
+   (want[1 - id] == 1)
  CS()
- want[id] &lt;- 0
end loop
</PRE>
<BR> </TD><TD VALIGN=BASELINE ALIGN=LEFT WIDTH="159">
<BR><PRE>loop forever
   NCS()
+  want[id] &lt;- 1
+  turn &lt;- (1 - id)
+  loop while 
+    (want[1 - id] == 1 and 
+     turn == 1 - id)
   CS()
-  want[id] &lt;- 0
end loop
</PRE>
<BR> </TD></TR>
</TBODY>
</TABLE>

<P>
<BR>
The task is to figure out if the given algorithm satisfies three important properties:

<UL>
<LI>The algorithm satisfies <SPAN  CLASS="textit">mutual exclusion</SPAN> if in any legal history CS is not executed
concurrently by two threads (that is, there is no step where IP of both threads is at CS).
</LI>
<LI>The algorithm satisfies <SPAN  CLASS="textit">deadlock freedom</SPAN> if any legal history has infinitely many
executions of CS. 
</LI>
<LI>The algorithm satisfies <SPAN  CLASS="textit">starvation freedom</SPAN> if in any legal history
a thread that executes infinitely many steps has infinitely many executions of CS.
</LI>
</UL>

The property of mutual exclusion is trivial. 
The algorithm that simply loops forever doing nothing will satisfy it.
The sample algorithms above all satisfy mutual exclusion, but the first two fail to achieve deadlock freedom.
The algorithm 3 (originally created by Gary Peterson) satisfies all three properties.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The input starts with a line with two integer numbers -- <SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> 
is the number of lines of code for <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th thread (<!-- MATH
 $2 \le m_i \le 9$
 -->
<SPAN CLASS="MATH">2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4375img1.png
 ALT="$ \le$"><I>m</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4375img1.png
 ALT="$ \le$">9</SPAN>
<tex2html_verbatim_mark>). 
It is followed by <SPAN CLASS="MATH"><I>m</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> lines with the code for the first thread and <SPAN CLASS="MATH"><I>m</I><SUB>2</SUB></SPAN>
<tex2html_verbatim_mark> lines with the code for the
second thread. 

The code for each thread contains one instruction per line. Instruction starts
with an integer line number from <SPAN CLASS="MATH">1</SPAN>
<tex2html_verbatim_mark> to <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> (lines are numbered in ascending order and are included
to aid readability), 
followed by instruction mnemonic, 
followed by a list of instruction arguments, all separated by spaces. 
The last arguments of instruction 
represent line numbers of the next instructions to execute (<SPAN  CLASS="textit">NIP</SPAN> -- from 1 to <SPAN CLASS="MATH"><I>m</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>). 
There are three variables shared between 
threads -- A, B, and C. Instruction mnemonics are:

<UL>
<LI>NCS -- non-critical section placeholder. Its single argument is NIP.
</LI>
<LI>CS -- critical section placeholder. Its single argument is NIP.
</LI>
<LI>SET -- write value to the shared variable. It has three arguments <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>g</I></SPAN>
<tex2html_verbatim_mark>,
where <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> is the variable to write (A, B, or C), <SPAN CLASS="MATH"><I>x</I></SPAN>
<tex2html_verbatim_mark> is the value to write (0 or 1), and <SPAN CLASS="MATH"><I>g</I></SPAN>
<tex2html_verbatim_mark> is NIP.
</LI>
<LI>TEST -- read and test the value of the shared variable. It has three arguments <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>g</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>g</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>
where <SPAN CLASS="MATH"><I>v</I></SPAN>
<tex2html_verbatim_mark> is the variable to read (A, B, or C), 
<SPAN CLASS="MATH"><I>g</I><SUB>0</SUB></SPAN>
<tex2html_verbatim_mark> is NIP if the value of the variable is zero, and
<SPAN CLASS="MATH"><I>g</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> is NIP if the value of the variable is one.
</LI>
</UL>

NCS and CS appear in the code for each thread exactly once. The code may or may not represent a simple loop, but 
is guaranteed to alternate
executions of CS and NCS by one thread, that is, in every legal history two executions of CS by one thread always 
have NCS execution by the same thread in between and, vice versa, two executions of NCS by one thread
have CS execution by the same thread in between.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, write to the output a string of three letters on a line by itself. Letters represent properties 
of mutual exclusion, deadlock freedom, and starvation freedom.
Write letter Y if the corresponding property is satisfied and N otherwise.

<P>
<BR>

<B>Note:</B>

Three first samples below represent algorithms 1-3 from the problem statement.

The fourth one is an algorithm (originally created by Leslie Lamport) that uses just two shared bits 
(A and B) and satisfies mutual exclusion and deadlock freedom, but is not free from starvation.

Last two are trivial algorithms. First one never executes CS nor NCS and thus guarantees mutual exclusion,
but does not have deadlock freedom, nor starvation freedom properties. Second one loops between NCS and CS, thus
fails to achieve mutual exclusion, but is free from deadlock and starvation.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
4 4
1 NCS 2
2 TEST C 3 2
3 CS 4
4 SET C 1 1
1 NCS 2
2 TEST C 2 3
3 CS 4
4 SET C 0 1
5 5
1 NCS 2
2 SET A 1 3
3 TEST B 4 3
4 CS 5
5 SET A 0 1
1 NCS 2
2 SET B 1 3
3 TEST A 4 3
4 CS 5
5 SET B 0 1
7 7
1 NCS 2
2 SET A 1 3
3 SET C 1 4
4 TEST B 6 5
5 TEST C 6 4
6 CS 7
7 SET A 0 1
1 NCS 2
2 SET B 1 3
3 SET C 0 4
4 TEST A 6 5
5 TEST C 4 6
6 CS 7
7 SET B 0 1
5 7
1 NCS 2
2 SET A 1 3
3 TEST B 4 3
4 CS 5
5 SET A 0 1
1 NCS 2
2 SET B 1 3
3 TEST A 6 4
4 SET B 0 5
5 TEST A 2 5
6 CS 7
7 SET B 0 1
3 3
1 SET A 0 1
2 CS 2
3 NCS 3
1 TEST A 1 1
2 CS 2
3 NCS 3
2 2
1 CS 2
2 NCS 1
1 NCS 2
2 CS 1
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
YNN
YNN
YYY
YYN
YNN
NYY
</PRE>

______________________________________________________
4376||||||false||||||

Little John studies numeral systems. After learning all about fixed-base systems, he
became interested in more unusual cases. Among those cases he found
a <SPAN  CLASS="textit">Fibonacci system</SPAN>, which represents all natural numbers in an unique way
using only two digits: zero and one. But unlike usual binary scale of notation,
in the Fibonacci system you are not allowed to place two <TT>1</TT>s in adjacent positions.

One can prove that if you have number <!-- MATH
 $N = \overline{a_{n}a_{n-1}\ldots a_1}_F$
 -->
<SPAN CLASS="MATH"><I>N</I> = <IMG
 WIDTH="112" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4376img1.png
 ALT="$ \overline{{a_{n}a_{n-1}\ldots a_1}}_{F}^{}$"></SPAN>
<tex2html_verbatim_mark> in Fibonacci
system, its value is equal to <!-- MATH
 $N = a_{n} \cdot F_{n} + a_{n-1} \cdot F_{n-1} + \ldots + a_{1} \cdot F_{1}$
 -->
<SPAN CLASS="MATH"><I>N</I> = <I>a</I><SUB>n</SUB><SUP> . </SUP><I>F</I><SUB>n</SUB> + <I>a</I><SUB>n-1</SUB><SUP> . </SUP><I>F</I><SUB>n-1</SUB> +...+ <I>a</I><SUB>1</SUB><SUP> . </SUP><I>F</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark>,
where <SPAN CLASS="MATH"><I>F</I><SUB>k</SUB></SPAN>
<tex2html_verbatim_mark> is a usual Fibonacci sequence defined by <!-- MATH
 $F_{0}=F_{1}=1$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>0</SUB> = <I>F</I><SUB>1</SUB> = 1</SPAN>
<tex2html_verbatim_mark>, <!-- MATH
 $F_{i}=F_{i-1}+F_{i-2}$
 -->
<SPAN CLASS="MATH"><I>F</I><SUB>i</SUB> = <I>F</I><SUB>i-1</SUB> + <I>F</I><SUB>i-2</SUB></SPAN>
<tex2html_verbatim_mark>.

For example, first few natural numbers have the following unique representations in
Fibonacci system:

<BR>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<!-- MATH
 \begin{eqnarray*}
1&=&1_F\cr
2&=&10_F\cr
3&=&100_F\cr
4&=&101_F\cr
5&=&1000_F\cr
6&=&1001_F\cr
7&=&1010_F\cr
\end{eqnarray*}
 -->
<TABLE CELLPADDING="0" ALIGN="CENTER" WIDTH="100%">
<TR VALIGN="MIDDLE"><TD NOWRAP WIDTH="50%" ALIGN="RIGHT">1</TD>
<TD WIDTH="10" ALIGN="CENTER" NOWRAP>=</TD>
<TD ALIGN="LEFT" NOWRAP WIDTH="50%">1<SUB>F</SUB><IMG
 WIDTH="5" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4376img1.png
 ALT="$\displaystyle \cr$">2</TD>
<TD CLASS="eqno" WIDTH=10 ALIGN="RIGHT">
&nbsp;</TD></TR>
</TABLE></DIV>
<BR CLEAR="ALL">

John wrote a very long string (consider it infinite) consisting of consecutive
representations of natural numbers in Fibonacci system. For example, the first
few digits of this string are <TT>110100101100010011010</TT>...

He is very interested, how many times the digit <TT>1</TT> occurs in the <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th prefix of
the string. Remember that the <SPAN  CLASS="textit"><SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th prefix</SPAN> of the string is just a string consisting of 
its first <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> characters.

Write a program which determines how many times the digit <TT>1</TT> occurs in 
<SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th prefix of John's string.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The input contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $0\le N\le 10^{15}$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4376img1.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4376img1.png
 ALT="$ \le$">10<SUP>15</SUP></SPAN>
<tex2html_verbatim_mark>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, output a single integer -- the number of <TT>1</TT>s in <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark>-th prefix of John's string --  on a line by itself.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
21
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
10
</PRE>

______________________________________________________
4377||||||false||||||

You are working in Advanced Computer Monitors (ACM), Inc. The company is building and selling
giant computer screens that are composed from multiple smaller screens. Your are responsible for
design of the screens for your customers. 

Customers order screens of the specified horizontal 
and vertical resolution in pixels and a specified horizontal and vertical size in millimeters. 
Your task is to design a screen that has a required resolution in each dimension or more, and has
required size in each dimension or more, with a minimal possible price. The giant screen is always 
built as a grid of monitors of the same type. The total resolution, size, and price of the resulting
screen is simply the sum of resolutions, sizes, and prices of the screens it is built from.

You have a choice of regular monitor types that you can order and you know their resolutions, sizes, and prices.
The screens of each type can be mounted both vertically and horizontally, but the whole giant 
screen must be composed of the screens of the same type in the same orientation. You can use as many
screens of the chosen type as you need. 

<DIV ALIGN="CENTER">

<!-- MATH
 $\epsfbox{p4377.eps}$
 -->
<IMG
 WIDTH="531" HEIGHT="257" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4377.png
 ALT="\epsfbox{p4377.eps}">
<tex2html_verbatim_mark>
</DIV>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The first line of the input contains four integer numbers <SPAN CLASS="MATH"><I>r</I><SUB>h</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>v</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>h</SUB></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>s</I><SUB>v</SUB></SPAN>
<tex2html_verbatim_mark>
(all from 100 to 10000 inclusive) -- horizontal and vertical resolution and horizontal and vertical size
of the screen you have to build, respectively. The next line contains a single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le n \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4377.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/p4377.png
 ALT="$ \le$">100</SPAN>
<tex2html_verbatim_mark>) 
-- the number of different screen types available to you. The next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines contain descriptions
of the available screen types. Each description occupies one line and consists of five integer numbers --
<SPAN CLASS="MATH"><I>r</I><SUB>h, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>r</I><SUB>v, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>h, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>s</I><SUB>v, i</SUB></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> (all from 100 to 10000 inclusive), where first 
four numbers are horizontal and vertical resolution and horizontal and vertical size of <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th screen type, 
and <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> is the price.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, write to the output a single integer -- the minimal price of the specified giant screen -- on a line by itself.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
1024 1024 300 300
3
1024 768 295 270 200
1280 1024 365 301 250
1280 800 350 270 210
2400 2000 800 700
3
1024 768 295 270 200
1280 1024 365 301 250
1280 800 350 270 210
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
250
1260
</PRE>

______________________________________________________
4378||||||false||||||

Most financial institutions had become insolvent during financial crisis
and went bankrupt or were bought by larger institutions, usually by banks. 
By the end of financial crisis of all the financial institutions only two
banks still continue to operate. Financial markets had remained closed throughout
the crisis and now regulators are gradually opening them. To prevent speculation 
and to gradually ramp up trading they will initially allow trading in only one financial 
instrument and the volume of trading will be limited to <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark> contracts for 
<SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th minute of market operation.

Two banks had decided to cooperate with the government to kick-start the market operation. 
The boards of directors had agreed on trading volume for each minute of this first trading session.
One bank will be buying <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> contracts (<!-- MATH
 $1 \le a_i \le i$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>i</I></SPAN>
<tex2html_verbatim_mark>) during <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th minute (<!-- MATH
 $1 \le i \le n$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>n</I></SPAN>
<tex2html_verbatim_mark>), 
while the other one will be selling. They do not really care whether to buy or to sell, and
the outside observer will only see the volume <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> of contracts traded per minute.
However, they do not want to take any extra risk and want to have no position 
in the contract by the end of the trading session. Thus, if we define <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> = 1</SPAN>
<tex2html_verbatim_mark> when the first
bank is buying and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB> = - 1</SPAN>
<tex2html_verbatim_mark> when the second one is buying (and the first one is selling), 
then the requirement for the trading session is that <!-- MATH
 $\sum_{i=1}^{n}a_i b_i = 0$
 -->
<SPAN CLASS="MATH"><IMG
 WIDTH="44" HEIGHT="34" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \sum_{{i=1}}^{{n}}$"><I>a</I><SUB>i</SUB><I>b</I><SUB>i</SUB> = 0</SPAN>
<tex2html_verbatim_mark>.

Your lucky team of three still works in the data center (due to the crisis,
banks now share the data center and its personnel) 
and your task is to find such <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> or to report that this is impossible.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The first line of the input contains the single integer number <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> 
(<!-- MATH
 $1 \le n \le 100\,000$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$">100&nbsp;000</SPAN>
<tex2html_verbatim_mark>).

The second line of the input contains <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> integer numbers -- <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark> (<!-- MATH
 $1 \le a_i \le i$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4378img1.png
 ALT="$ \le$"><I>i</I></SPAN>
<tex2html_verbatim_mark>).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

For each test case, the first line of the output must contain ``<TT>Yes</TT>'' if the
trading session with specified volumes is possible and ``<TT>No</TT>'' otherwise.
In the former option a second line must contain <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> numbers -- <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
4
1 2 3 3
4
1 2 3 4
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
No
Yes
1 -1 -1 1
</PRE>

______________________________________________________
4379||||||false||||||

You are developing a new fashionable language that is not quite unlike C, C++, and Java. 
Since your language should become an object of art and fashion, you call it <SPAN CLASS="MATH"><I>i</I><SUP>#</SUP></SPAN>
<tex2html_verbatim_mark> (spelled i-sharp).
This name combines all the modern naming trends and also hints at how smart you are.

Your language caters for a wide auditory of programmers and its type system includes
arrays (denoted with ``<TT>[]</TT>''), references (denoted with ``<TT>&amp;</TT>''), and pointers
(denoted with ``<TT>*</TT>''). Those type constructors can be freely combined in any order, 
so that a pointer to an array of references of references of integers 
(denoted with ``<TT>int&amp;&amp;[]*</TT>'') is a valid type.

Multiple variables in <SPAN CLASS="MATH"><I>i</I><SUP>#</SUP></SPAN>
<tex2html_verbatim_mark> can be declared on a single line with a very convenient 
syntax where common type of variables is given first, followed by a list of variables, 
each optionally followed by additional variable-specific type constructors. For example, 
the following line:

<P>
<BR>

<TT>int&amp; a*[]&amp;, b, c*;</TT>

<P>
<BR>
declares variables <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> with types ``<TT>int&amp;&amp;[]*</TT>'', ``<TT>int&amp;</TT>'', and 
``<TT>int&amp;*</TT>'' correspondingly. Note, that type constructors on the right-hand sides of variables in 
<SPAN CLASS="MATH"><I>i</I><SUP>#</SUP></SPAN>
<tex2html_verbatim_mark> bind to variable and their order is reversed when they are moved to the left-hand side next to type. 
Thus ``<TT>int*&amp; a</TT>'' is equivalent to ``<TT>int a&amp;*</TT>''.

However, you discover that coding style with multiple variable declarations per line is confusing and 
is outlawed in many corporate coding standards. You decide to get rid of it and refactor 
all existing <SPAN CLASS="MATH"><I>i</I><SUP>#</SUP></SPAN>
<tex2html_verbatim_mark> code to a single variable declaration per line and always specify type
constructor next to the type it refers to (instead of the right-hand side of variable). Your
task it to write such refactoring tool.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

The input file contains several test cases, each of them    as described below.

The input contains a single line with a declaration of multiple variables in <SPAN CLASS="MATH"><I>i</I><SUP>#</SUP></SPAN>
<tex2html_verbatim_mark>.
The line starts with a type name, followed by zero, one, or more type constructors, 
followed by a space, followed by one or more variable descriptors separated by ``<TT>,</TT>''
(comma) and space, and terminated by ``<TT>;</TT>'' (semicolon). 
Each variable descriptor contains variable name, followed by zero, 
one, or more type constructors.

Type name and variable names are distinct and consist of lowercase and uppercase English letters from
``<TT>a</TT>'' to ``<TT>z</TT>'' or ``<TT>A</TT>'' to ``<TT>Z</TT>''. 
The line contains at most 120 characters and does not contain any extra spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<B>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P><P>
<BR>
Write to the output a line for each variable declared in the input. For each variable
write its declaration on a single line in the same format as in the input, but with 
all type constructors next to its type. Separate type with all type constructors from 
a variable name by a single space. Do not write any extra spaces.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
int& a*[]&, b, c*;
Double[][] Array[];
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
int&&[]* a;
int& b;
int&* c;

Double[][][] Array;
</PRE>

______________________________________________________
4380||||||false||||||

Javanese is the language of the people in the Central and Eastern parts of
the island of Java, Indonesia.

In 1926, a standard orthography using the English Alphabet was created for the
Javanese language. This writing system uses all letters from A to Z.
The five letters A, E, I, O, and U are vowels, while all other
letters are consonants. In Javanese words vowels and consonants always
alternate. This property is quite useful when deciphering encrypted Javanese
texts.

A text <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> consists of words, each word contains only capital letters.
Let's call text <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> <SPAN  CLASS="textit">legitimate</SPAN> if in each word of <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> vowels and
consonants alternate (no two vowels and no two consonants are located next to
each other).

A <SPAN  CLASS="textit">simple substitution cipher</SPAN> is applied to a text <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>. That is,
a bijection <!-- MATH
 $f: A \to A$
 -->
<SPAN CLASS="MATH"><I>f</I> : <I>A</I><IMG
 WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/43/4380img1.png
 ALT="$ \to$"><I>A</I></SPAN>
<tex2html_verbatim_mark> is chosen, where <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> is the set of capital letters.
The encoded text <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> is obtained from <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> by substituting each letter
<SPAN CLASS="MATH"><I>c</I></SPAN>
<tex2html_verbatim_mark> with <SPAN CLASS="MATH"><I>f</I> (<I>c</I>)</SPAN>
<tex2html_verbatim_mark>.

You're given the encoded text <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>. Find any legitimate text <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> that can be
encoded as <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, or detect that there is no such legitimate <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<B>
The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P><P>
<BR>
The input contains the encoded text <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>, a list of words separated by
spaces and/or line breaks. Each word consists only of capital letters (A to Z).

The input contains no more than <SPAN CLASS="MATH">100&nbsp;000</SPAN>
<tex2html_verbatim_mark> characters.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<B>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P><P>
<BR>
If the text <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark> cannot be an encoded legitimate text, output only one word
`<TT>impossible</TT>'.

Otherwise, output any legitimate text <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> that can be encoded into <SPAN CLASS="MATH"><I>t</I></SPAN>
<tex2html_verbatim_mark>.
Separate words of <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> with spaces and/or line breaks. All letters in <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>
should be capital.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
O RISK LIP FOCUS LUCKY

NEERC
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
A CODE FOR VALID FILES

impossible
</PRE>

______________________________________________________
4381||||||false||||||

When introducing new terms consisting of several words, it is useful to use
abbreviations. An <SPAN  CLASS="textit">abbreviation</SPAN> is a word that consists of
the first letters of several consecutive words.

An abbreviation is called <SPAN  CLASS="textit">unambiguous</SPAN> if the following two conditions
are satisfied:

<UL>
<LI>It corresponds to exactly one sequence of words in a given text
(although this sequence can appear in the text more than once);
</LI>
<LI>It does not appear in the text by itself.
</LI>
</UL>

For example, in the text
``<TT>A recursive acronym KINA means "KINA is not abbreviation"</TT>'',
strings ``<TT>ARA</TT>'' and ``<TT>K</TT>'' are unambiguous abbreviations,
strings ``<TT>A</TT>'' and ``<TT>KINA</TT>'' are ambiguous abbreviations,
and strings ``<TT>RAA</TT>'' and ``<TT>KNA</TT>'' are not abbreviations.

To introduce an abbreviation in a text, it is placed in parentheses
right after the sequence of words it corresponds to. Future occurrences
of this sequence of words can be replaced by the abbreviation.
In the example text above, introduction of the abbreviation ``<TT>K</TT>'' produces the
following text:
``<TT>A recursive acronym KINA (K) means "K is not abbreviation"</TT>''.

If two occurrences of a sequence of words overlap,
only one of them can be replaced by the abbreviation.
Words in a sequence are separated by one or more non-alphabetic characters. 
Comparison of words is case-insensitive.
For example, ``<TT>i18n</TT>'' is an occurrence of the word sequence ``<TT>I n</TT>''.

The <SPAN  CLASS="textit">effectiveness</SPAN> of an abbreviation is the decrease in
the number of letters after introduction of this abbreviation.
Only letters are taken into account;
spaces, parentheses and all other non-alphabetical characters do not count.

Given a text, find an unambiguous abbreviation with the maximum effectiveness.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<B>
The input will contain several test cases, each of them as described below.
Consecutive test cases are separated by a single blank line.
</B>

<P><P>
<BR>
The input contains a text with at most <SPAN CLASS="MATH">4&nbsp;000</SPAN>
<tex2html_verbatim_mark> characters.
The text contains only characters with ASCII codes 32 (space) to
126 (``<TT>~</TT>''), 13 (carriage return), and 10 (line feed).

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<B>
For each test case, the output must follow the description below. 
The outputs of two consecutive cases will be separated by a blank line.
</B>

<P><P>
<BR>
If there is no unambiguous abbreviation with positive effectiveness,
then the output  should contain the single number <SPAN CLASS="MATH">0</SPAN>
<tex2html_verbatim_mark>.

Otherwise, the first line of the output  should contain the effectiveness
of the optimal abbreviation.
The second line should contain the unambiguous abbreviation itself.
If there are multiple unambiguous abbreviations with the maximum effectiveness,
output any one of them.

<P><P>
<BR>

<B>Note:</B> 
<BR>
In the first example, the optimal abbreviations are ``<TT>NA</TT>'' and ``<TT>INA</TT>''.
<BR>
In the third example, the optimal abbreviations are ``<TT>JB</TT>'' and ``<TT>BJ</TT>''.

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<PRE>
This problem name is "KINA is not abbreviation".
Once again: KINA is not abbreviation.

To be or not to be: that is the question.

Here is the chorus of the song "Jingle Bells":
Jingle bells, jingle bells,
Jingle all the way;
Oh what fun it is to ride
In a one-horse open sleigh.
</PRE>
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<PRE>
11
NA

0

16
JB

______________________________________________________
4382||||||false||||||
<P>The math department has been having problems lately. Due to immense amount of unsolicited automated programs which were crawling across their pages, they decided to put Yet-Another-PublicTuring-Test-to-Tell-Computers-and-Humans-Apart on their webpages. In short, to get access to their scientific papers, one have to prove yourself eligible and worthy, i.e. solve a mathematic riddle.<P>However, the test turned out difficult for some math PhD students and even for some professors. Therefore, the math department wants to write a helper program which solves this task (it is not irrational, as they are going to make money on selling the program).<P>The task that is presented to anyone visiting the start page of the math department is as follows: given a natural <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, compute<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>S</I><SUB>n</SUB> = <IMG WIDTH="29" HEIGHT="63" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle \sum^{{n}}_{{k=1}}$"><IMG WIDTH="15" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle \left[\vphantom{\frac{(3k+6)!+1}{3k+7} - \left[ \frac{(3k+6)!}{3k+7}\right]}\right.$"><IMG WIDTH="105" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle {\frac{{(3k+6)!+1}}{{3k+7}}}$"> - <IMG WIDTH="15" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle \left[\vphantom{ \frac{(3k+6)!}{3k+7}}\right.$"><IMG WIDTH="75" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle {\frac{{(3k+6)!}}{{3k+7}}}$"><IMG WIDTH="15" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle \left.\vphantom{ \frac{(3k+6)!}{3k+7}}\right]$"><IMG WIDTH="15" HEIGHT="58" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$\displaystyle \left.\vphantom{\frac{(3k+6)!+1}{3k+7} - \left[ \frac{(3k+6)!}{3k+7}\right]}\right]$"></DIV><P><tex2html_verbatim_mark></P>where <SPAN CLASS="MATH">[<I>x</I>]</SPAN> <tex2html_verbatim_mark> denotes the largest integer not greater than <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the number of queries <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>. Each query consist of one natural number <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4382img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> given in the input output the value of <SPAN CLASS="MATH"><I>S</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> .<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
13 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
100 
1000 
10000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
1 
1 
2 
2 
2 
2 
3 
3 
4 
28 
207 
1609
</PRE><P>
______________________________________________________
4383||||||false||||||
<P>In a seaside village, there is an avenue of skyscrapers. Each skyscrapers is 100m wide and has certain height. Due to very high price of parcels, any two consecutive skyscrapers are adjacent. The avenue lies close to the beach so the street is exactly at the sea level.<P>Unfortunately, this year, due to the global warming, the sea level started to increase by one meter each day. If the skyscraper height is no greater than the current sea level, it is considered flooded.<P>A <SPAN CLASS="textit">region</SPAN> is a maximal set of non-flooded, adjacent skyscrapers. This term is of particular importance, as it is sufficient to deliver goods (like current, carrots or cabbages) to any single skyscraper in each region. Hence, the city major wants to know how many regions there will be in the hard days that come.<P>An example of an avenue with 5 skyscrapers after 2 days is given below.<P><DIV ALIGN="CENTER"><IMG WIDTH="508" HEIGHT="200" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="\epsfbox{p4383.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains an integer <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$">15)</SPAN> <tex2html_verbatim_mark> denoting the number of test cases. Then <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> test cases follow. Each of them begins with a line containing two numbers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$"><I>n</I>, <I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of skyscrapers and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> is the number of days which the major wants to query. Skyscrapers are numbered from left to right. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>h</I><SUB>1</SUB>, <I>h</I><SUB>2</SUB>,..., <I>h</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$"><I>h</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark> is the height of skyscraper <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>. The third line of a single test case contains <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> numbers <SPAN CLASS="MATH"><I>t</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> such that <!-- MATH
 $0 \le t_{1} < t_{2} < \ldots < t_{d-1} < t_{d} \le 10^{9}$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$"><I>t</I><SUB>1</SUB> &lt; <I>t</I><SUB>2</SUB> &lt;...&lt; <I>t</I><SUB>d-1</SUB> &lt; <I>t</I><SUB>d</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4383.png ALT="$ \le$">10<SUP>9</SUP></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> numbers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,..., <I>r</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark>, where <SPAN CLASS="MATH"><I>r</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark> is the number of regions on day <SPAN CLASS="MATH"><I>t</I><SUB>j</SUB></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Input</A>&nbsp;</FONT></H2><P><PRE>
2 
3 3 
1 2 3 
1 2 3 
5 3 
1 3 5 1 3 
0 2 4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 1 0 
1 2 1
</PRE><P>
______________________________________________________
4384||||||false||||||
<P>Running a paper shop is not an easy job, especially with harsh customers. Today they brought their own rectangular sheets of paper, asking you to cut it into rectangular business cards of specific size. Moreover, they require that all the paper (which may not be cheap, but is definitely not that expensive!) has to be used, i.e. no tiny bit may be left over. Moreover, the brilliant idea of cutting the sheet into very small pieces, and then gluing them together in desired sheets was laughed at.<P>An example of a <SPAN CLASS="MATH">9&#215;6</SPAN> <tex2html_verbatim_mark> paper sheet divided into <SPAN CLASS="MATH">2&#215;3</SPAN> <tex2html_verbatim_mark> cards is given below.<P><DIV ALIGN="CENTER"><IMG WIDTH="289" HEIGHT="195" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4384.png ALT="\epsfbox{p4384.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains the number of test cases <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4384.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>. Then <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> test cases follow. Each of them consists of one line containing four integers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4384.png ALT="$ \le$"><I>a</I>, <I>b</I>, <I>c</I>, <I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4384.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>. Numbers <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> are dimensions of each business card; <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> are dimensions of the paper sheet.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output one line containing word `<TT>YES</TT>' if it is possible to divide the whole sheet into business cards, and `<TT>NO</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 3 9 6
2 3 8 6
2 3 6 8
2 3 5 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
YES 
YES 
NO
</PRE><P>
______________________________________________________
4385||||||false||||||
<P>There is this big museum, full of fancy rooms and shiny corridors. It is so large that planning any tour in it becomes a serious issue. This is where your help is necessary. You are to help in planning signs that will make navigation through the whole building much easier. The idea is that if a room has d doors leading through corridors to other rooms, these doors and corresponding corridors are (locally) labeled with numbers <SPAN CLASS="MATH">1, 2,..., <I>d</I></SPAN> <tex2html_verbatim_mark>. Then all visitors are advised to follow a simple procedure. If they are in room <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> at the very beginning of their tour, they should choose door labelled with 1 and pass through the corresponding corridor If they are in room <SPAN CLASS="MATH"><I>v</I></SPAN> <tex2html_verbatim_mark> and they entered it through door labelled with <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, they should pick the door labelled with the next number (i.e. <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>i</I> &lt; <I>d</I></SPAN> <tex2html_verbatim_mark> and 1 if <SPAN CLASS="MATH"><I>i</I> = <I>d</I></SPAN> <tex2html_verbatim_mark>) and pass through corresponding corridor. Here is a simple example, in which tourists start in room 1 and visit rooms 1, 2, 3, 4, 5, 6 in this order passing through each corridor at least once:<P><DIV ALIGN="CENTER"><IMG WIDTH="447" HEIGHT="372" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="\epsfbox{p4385.eps}"> <tex2html_verbatim_mark></DIV><P>Exhibits in this museum are not only in rooms but also in corridors connecting different rooms. After all, the corridors are well suited for displaying paintings and photography! Thus we want to ensure that the tourists that follow the rules will pass through each corridor at least once, assuming they do not get bored easily and walk long enough, <SPAN CLASS="textbf">irrespectively of the room they started the tour in</SPAN>. Your task is to find such a labelling.<P>It turns out that there are at most 3 corridors outgoing from each room and the whole museum is connected, i.e. it is possible to walk between any two rooms, possibly passing through other rooms along the way. All corridors outgoing from a single room lead to different rooms.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains the number of test cases <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>. Each test begins with a line containing the number of rooms <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain description of all corridors. <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th of them described corridors connecting the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th room with others. It begins with an integer <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$">3)</SPAN> <tex2html_verbatim_mark>, the number of doors in this room. <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> integers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB>, <I>r</I><SUB>2</SUB>,..., <I>r</I><SUB>d</SUB></SPAN> <tex2html_verbatim_mark> follow, giving numbers of rooms that those doors lead to ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$"><I>r</I><SUB>j</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>j</SUB> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \neq$"> <I>r</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark> if <SPAN CLASS="MATH"><I>j</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \neq$"> <I>k</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>r</I><SUB>j</SUB> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4385.png ALT="$ \neq$"> <I>i</I></SPAN> <tex2html_verbatim_mark>). All corridors are bidirectional, so if there is door from room <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> to room <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, there is door from room <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> to room <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> as well. Total size of the input will not exceed 50MB.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th of them should contain numbers of rooms directly connected by corridors with room <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>, in order of their assigned labels. You may assume that a valid labelling of doors always exists, you just need to find one.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
6 
3 4 2 3
3 5 1 3
3 6 1 2
1 1
1 2
1 3
4 
2 2 4
2 1 3
2 2 4
2 1 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sampe Output</A>&nbsp;</FONT></H2><P><PRE>
3 4 2 3 
3 5 3 1
3 6 1 2 
1 1 
1 2
1 3
2 2 4
2 1 3
2 2 4
2 1 3
</PRE><P>
______________________________________________________
4386||||||false||||||
<P>Morphic is a tree that grows very rapidly, bringing happiness to its owner. It has a single trunk consisting of a number of cells stacked one on top of another. Each cell has one of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> possible colors which determine the way it mutates during the night, while nobody can see it. Florists denote these colors by the first <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> small letters of the English alphabet and know exactly into how many cells, and of what colors, a cell of each color divides. In fact, they have wrote their knowledge down simply with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> nonempty words, each word representing the resulting sequence of colors.<P>A seed of a Morphic has a single cell of color <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> and is rooted firmly in the ground. As long as the Morphic is still alive, each night all its cells simultaniously morph according to the aforementioned rules, possibly causing an exponential growth because each new cell is of the same size as the original one. For example, if rules say that <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark> becomes <SPAN CLASS="MATH"><I>ab</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> becomes <SPAN CLASS="MATH"><I>ca</I></SPAN> <tex2html_verbatim_mark>, then after two nights a seed will evolve to a trunk consisting of 4 cells: <SPAN CLASS="MATH"><I>abca</I></SPAN> <tex2html_verbatim_mark>.<P>Therefore the top of a Morphic is usually hidden in clouds. The only way to tell if it is still alive is to check if visible part of the trunk is changing colors. In order to do so, one can build enormously high (yet still of constant height) tower, and watch from its top a fixed fragment of the trunk.<P>As you can easily see, it is either sufficient to observe first <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> cells from the bottom for some fixed <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, or no matter how high the tower is, you will not be able to tell for sure if a Morphic died. The latter happens when for every <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, rules cause the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th cell to eventually stop changing colors, even though the tree is still alive and mutating.<P>To prevent waste of money on building such enormous towers, you are to write a program that determines if it is possible to monitor health of a Morphic.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several Morphics descriptions. The first line contains the number of descriptions <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4386img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN> <tex2html_verbatim_mark> that follow. Each of them begins with the number of colors <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4386img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4386img1.png ALT="$ \le$">26)</SPAN> <tex2html_verbatim_mark>. Next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain the rules by which the Morphic grows. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th one describes the sequence of colors in bottom-up order obtained from a single cell of <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th color. Each line contains at most 100 lowercase English letters.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output one line containing `<TT>YES</TT>' if building of a tower is pointless (as in: <TT>YES</TT>, we can save money!). Otherwise output `<TT>NO</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
ab 
a 
3 
ba 
c 
c 
3 
ba 
c 
b 
3 
bbbbbbbbbbbbbbb 
ccccccccccccccc 
c
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
YES 
YES 
NO 
YES
</PRE><P>
______________________________________________________
4387||||||false||||||
<P>Alan loves to construct the towers of building bricks. His towers consist of many cuboids with square base. All cuboids have the same height <SPAN CLASS="MATH"><I>h</I> = 1</SPAN> <tex2html_verbatim_mark>. Alan puts the consecutive cuboids one over another:<P><DIV ALIGN="CENTER"><IMG WIDTH="709" HEIGHT="440" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="\epsfbox{p4387a.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 1: Tower of three bricks when Alan fixes <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 2</SPAN> <tex2html_verbatim_mark>.</DIV><P>Recently in math class, the concept of volume was introduced to Alan. Consequently, he wants to compute the volume of his tower now. The lengths of cuboids bases (from top to bottom) are constructed by Alan in the following way:<P><P><BR><OL><LI>Length <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> of the first square is one. </LI><LI>Next, Alan fixes the length <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> of the second square. </LI><LI>Next, Alan calculates the length <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I> &gt; 2)</SPAN> <tex2html_verbatim_mark> by <SPAN CLASS="MATH">2<I>a</I><SUB>2</SUB><I>a</I><SUB>n-1</SUB> - <I>a</I><SUB>n-2</SUB></SPAN> <tex2html_verbatim_mark>. Do not ask why he chose such a formula; let us just say that he is a really peculiar young fellow. </LI></OL><P><P><BR>For example, if Alan fixes <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 2</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>a</I><SUB>3</SUB> = 8 - <I>a</I><SUB>1</SUB> = 7</SPAN> <tex2html_verbatim_mark>; see Figure 1. If Alan fixes <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>a</I><SUB>n</SUB> = 1</SPAN> <tex2html_verbatim_mark> holds for all <SPAN CLASS="MATH"><I>n</I> <IMG WIDTH="16" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \in$"> <IMG WIDTH="4" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \N$"></SPAN> <tex2html_verbatim_mark>; see Figure 2.<P>Now Alan wonders if he can calculate the volume of tower of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> consecutive building bricks. Help Alan and write the program that computes this volume. Since it can be quite large, it is enough to compute the answer modulo given natural number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains the number <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark> denoting the number of test cases. Then <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> test cases follow. Each of them is given in a separate line containing three integers <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \le$"><I>a</I><SUB>2</SUB>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \le$">10<SUP>9</SUP>, 2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark> separated by a single space, where <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> denotes the fixed length of second square in step 2, while <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> denotes the number of bricks constructed by Alan.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case <SPAN CLASS="MATH">(<I>a</I><SUB>2</SUB>, <I>N</I>, <I>m</I>)</SPAN> <tex2html_verbatim_mark> compute the volume of tower of <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> consecutive bricks constructed by Alan according to steps (1-3) and output its remainder modulo <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><DIV ALIGN="CENTER"><IMG WIDTH="280" HEIGHT="693" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4387a.png ALT="\epsfbox{p4387b.eps}"> <tex2html_verbatim_mark></DIV><P><DIV ALIGN="CENTER">Figure 2: Tower of four bricks when Alan fixes <SPAN CLASS="MATH"><I>a</I><SUB>2</SUB> = 1</SPAN> <tex2html_verbatim_mark>.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
2 3 100 
1 4 1000 
3 3 1000000000
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
54 
4 
299
</PRE><P>
______________________________________________________
4388||||||false||||||
<P>Given a text <SPAN CLASS="MATH"><I>s</I>[1..<I>n</I>]</SPAN> <tex2html_verbatim_mark> of length <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, we create its suffix array by taking all its suffixes:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>s</I>[1..<I>n</I>], <I>s</I>[2..<I>n</I>],..., <I>s</I>[<I>n</I>..<I>n</I>]</DIV><P><tex2html_verbatim_mark></P>and sorting them lexicographically. As a result we get a sorted list of suffixes:<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>s</I>[<I>p</I>(1)..<I>n</I>], <I>s</I>[<I>p</I>(2)..<I>n</I>],..., <I>s</I>[<I>p</I>(<I>n</I>)..<I>n</I>]</DIV><P><tex2html_verbatim_mark></P>and call the sequence <SPAN CLASS="MATH"><I>p</I>(1), <I>p</I>(2),..., <I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> the suffix array of <SPAN CLASS="MATH"><I>s</I>[1..<I>n</I>]</SPAN> <tex2html_verbatim_mark>. For example, if <TT><SPAN CLASS="MATH"><I>s</I> =</SPAN> <tex2html_verbatim_mark> abbaabab</TT>, the sorted list of all suffixes becomes:<P><P><BR><DIV ALIGN="CENTER"><TT>aabab</TT>, <TT>ab</TT>, <TT>abab</TT>, <TT>abbaabab</TT>, <TT>b</TT>, <TT>baabab</TT>, <TT>bab</TT>, <TT>bbaabab</TT></DIV><P><P><BR>and the suffix array is 4, 7, 5, 1, 8, 3, 6, 2.<P>It turns out that it is possible to construct this array in a linear time. Your task will be completely different, though: given <SPAN CLASS="MATH"><I>p</I>(1), <I>p</I>(2), <I>p</I>(3),..., <I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark> you should check if there exist at least one text consisting of lowercase letters of the English alphabet for which this sequence is the suffix array. If so, output any such text. Otherwise output `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several descriptions of suffix arrays. The first line contains the number of descriptions <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4388img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>. Each description begins with a line containing the length of both the text and the array <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4388img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4388img1.png ALT="$ \le$">500000)</SPAN> <tex2html_verbatim_mark>. Next line contains integers <SPAN CLASS="MATH"><I>p</I>(1), <I>p</I>(2),..., <I>p</I>(<I>n</I>)</SPAN> <tex2html_verbatim_mark>. You may assume that <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4388img1.png ALT="$ \le$"><I>p</I>(<I>i</I>)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4388img1.png ALT="$ \le$"><I>n</I></SPAN> <tex2html_verbatim_mark> and no value of <SPAN CLASS="MATH"><I>p</I>(<I>i</I>)</SPAN> <tex2html_verbatim_mark> occurs twice. Total size of the input will not exceed 50MB.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output any text resulting in the given suffix array. In case there is no such text consisting of lowercase letters of the English alphabet, output `<TT>-1</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
2 
1 2 
2 
2 1 
3 
2 3 1 
6 
3 4 5 1 2 6 
14 
3 10 2 12 14 5 13 4 1 8 6 11 7 9 
7 
5 1 7 4 3 2 6
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sampe Output</A>&nbsp;</FONT></H2><P><PRE>
ab 
aa 
bab 
suffix 
reconstruction 
issofun
</PRE><P>
______________________________________________________
4389||||||false||||||
<P>There are two professors at the great Academy of X that really do not get along with each other. In order not to reveal their names, we will call them 1 and 2. The Academy employs exactly <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> professors; each of them has to give exactly one lecture. As their schedules are rather tight (they are professors, remember?), the starting and the ending time of each lecture is already fixed. However, it is not yet fixed where each lecture will take place. Obviously, it is impossible to schedule two lectures in the same room if their durations overlap; on the other hand, it is possible if one of them starts exactly at the same time that the other one ends. Your tasks is to find the minimal number of rooms allowing to arrange all the lectures. But know that professors 1 and 2 hate each other so much that they will never give their lectures in the same room.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line contains the number of test cases <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4389img1.png ALT="$ \le$">250)</SPAN> <tex2html_verbatim_mark>. Each test begins with a line containing the number of professors <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4389img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4389img1.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>. Next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines follow, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th of which contains two integers <SPAN CLASS="MATH"><I>start</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>end</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 \le start_{i} < end_{i} \le 10^{9})$
 --><SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4389img1.png ALT="$ \le$"><I>start</I><SUB>i</SUB> &lt; <I>end</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4389img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>, the starting and the ending time of the lecture that the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th professor gives, respectively. Total size of the input will not exceed 50MB.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output the minimal number of rooms necessary to schedule all the lectures.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 
0 10 
10 20 
3 
0 10 
10 20 
10 20 
5 
4 14 
3 13 
2 12 
1 11 
0 10 
4 
0 10 
10 20 
20 30 
30 40
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
5 
2
</PRE><P>
______________________________________________________
4390||||||false||||||
<P>We are given a rooted tree of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> vertices. The vertices are to be labeled with numbers <SPAN CLASS="MATH">1, 2,..., <I>n</I></SPAN> <tex2html_verbatim_mark> so that each label is unique and the heap condition holds, i.e. the label of any vertex is less than the label of its parent. How many such labellings exist? Since this number may be quite large, calculate only its remainder modulo <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several tree descriptions. The first line contains the number of input trees <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$">250)</SPAN> <tex2html_verbatim_mark>. Each tree description begins with a line containing the size of the tree <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$">500000)</SPAN> <tex2html_verbatim_mark> and an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>n</I> - 1</SPAN> <tex2html_verbatim_mark> lines follow, <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th of which contains <SPAN CLASS="MATH"><I>p</I>(<I>i</I> + 1)</SPAN> <tex2html_verbatim_mark>, the number of the parent of the <SPAN CLASS="MATH"><I>i</I> + 1</SPAN> <tex2html_verbatim_mark>-th vertex <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$"><I>p</I>(<I>i</I> + 1)<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="$ \le$"><I>i</I>)</SPAN> <tex2html_verbatim_mark>. Vertex number 1 will be the root in each tree, so its parent will not be given. Total size of the input will not exceed 50MB.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each tree output the number of its valid labellings modulo given <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>.<P><P><P><BR><SPAN CLASS="textbf">Explanation for sample:</SPAN> The 8 possible labellings from the last example test case are as follows:<P><DIV ALIGN="CENTER"><IMG WIDTH="874" HEIGHT="355" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4390img1.png ALT="\epsfbox{p4390.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
3 1000000
1 
1 
4 1000000
1 
1 
1 
5 1000000
1 
2 
3 
4 
5 1000000
1 
1 
3 
3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
6 
1 
8
</PRE><P>
______________________________________________________
4391||||||false||||||
<P>To help their clients deal with faulty Cash Machines, the board of The Planar Bank has decided to stick a label expressing sincere regret and sorrow of the bank about the failure on every ATM. The very same label would gently ask the customer to calmly head to the nearest Machine (that should hopefully work fine).<P>In order to do so, a list of two-dimensional locations of all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> ATMs has been prepared, and your task is to find for each of them the one closest with respect to the Euclidean distance.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The very first line contains the number of cases <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4391img1.png ALT="$ \le$">15)</SPAN> <tex2html_verbatim_mark> that follow. Each test cases begin with the number of Cash Machines <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4391img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4391img1.png ALT="$ \le$">10<SUP>5</SUP>)</SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain the coordinates of one Cash Machine <SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4391img1.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4391img1.png ALT="$ \le$">10<SUP>9</SUP>)</SPAN> <tex2html_verbatim_mark> separated by a space. No two points in one test case will coincide.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines. <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th of them should contain the squared distance between the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th ATM from the input and its nearest neighbour.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
10 
17 41 
0 34 
24 19 
8 28 
14 12 
45 5 
27 31 
41 11 
42 45 
36 27 
15 
0 0 
1 2 
2 3 
3 2 
4 0 
8 4 
7 4 
6 3 
6 1 
8 0 
11 0 
12 2 
13 1 
14 2 
15 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
200 
100 
149 
100 
149 
52 
97 
52 
360 
97 
5 
2 
2 
2 
5 
1 
1 
2 
4 
5 
5 
2 
2 
2 
5

______________________________________________________
4392||||||false||||||
<P><P><BR>Process scheduling is a very important problem in operating system design. Each process requires some amount of resources to run. The process will release all the resources allocated to it when completes. Different resource allocating strategy varies much in efficiency. Even some unsuitable strategy can result in dead lock.<P>Now there are <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> processes and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> kinds of resources. At the beginning, each process has been allocated some amount of resources for each kind. However, the allocated resources might not be enough. They still need some extra resources for each kind. And you are given the available resources for each kind in the computer now. Can you tell whether it is possible to schedule these processes in a suitable order so that all of them can be executed successfully?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are four parts in the input.<P>The first part contains two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4392img1.png ALT="$ \le$">50000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4392img1.png ALT="$ \le$">3)</SPAN> <tex2html_verbatim_mark> representing the number of processes and the number of resources.<P>The second part is the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. Each of the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers. These integers make the allocation table.<P>The third part is also the following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines. Each of the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers. These integers make the request table.<P>The last line containing <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> integers is the fourth part. This part tells you the amount of available resources for each kind currently.<P>You may assume all integers that appear are less than or equal to 10<code>^</code>9.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output contains only `<TT>Yes</TT>' or `<TT>No</TT>'.<P>If all processes can be executed, output `<TT>Yes</TT>'. Otherwise, output `<TT>No</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 3 
1 6 2 0 
0 1 1 0 
0 2 1 2  
2 0 1 4 
2 0 0 2 
2 1 3 0 
0 1 1 
4 3 
2 5 2 0 
0 1 1 0 
1 1 1 2 
1 1 1 4 
2 0 0 2 
1 2 3 0 
0 1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes 
No
</PRE><P>
______________________________________________________
4393||||||false||||||
<P><P><BR>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> boxes on the ground, which are labeled by numbers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>. The boxes are magical, the size of each one can be enlarged or reduced arbitrarily.<P>Jack can perform the ``<TT>MOVE</TT> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN> <tex2html_verbatim_mark>" operation to the boxes: take out box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>; if <SPAN CLASS="MATH"><I>y</I> = 0</SPAN> <tex2html_verbatim_mark>, put it on the ground; Otherwise, put it inside box <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>. All the boxes inside box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> remain the same. It is possible that an operation is illegal, that is, if box <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is contained (directly or indirectly) by box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, or if <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> is equal to <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>.<P>In the following picture, box 2 and 4 are directly inside box 6, box 3 is directly inside box 4, box 5 is directly inside box 1, box 1 and 6 are on the ground.<P><DIV ALIGN="CENTER"><IMG WIDTH="553" HEIGHT="240" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="\epsfbox{p4393a.eps}"> <tex2html_verbatim_mark></DIV><P>The picture below shows the state after Jack performs ``<TT>MOVE 4 1</TT>":<P><DIV ALIGN="CENTER"><IMG WIDTH="553" HEIGHT="241" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="\epsfbox{p4393b.eps}"> <tex2html_verbatim_mark></DIV><P>Then he performs ``<TT>MOVE 3 0</TT>", the state becomes:<P><DIV ALIGN="CENTER"><IMG WIDTH="658" HEIGHT="239" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="\epsfbox{p4393c.eps}"> <tex2html_verbatim_mark></DIV><P>During a sequence of MOVE operations, Jack wants to know the root box of a specified box. The root box of box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> is defined as the most outside box which contains box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. In the last picture, the root box of box 5 is box 1, and box 3's root box is itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several test cases.<P>For each test case, the first line has an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$">50000)</SPAN> <tex2html_verbatim_mark>, representing the number of boxes.<P>Next line has <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers: <SPAN CLASS="MATH"><I>a</I><SUB>1</SUB>, <I>a</I><SUB>2</SUB>, <I>a</I><SUB>3</SUB>,..., <I>a</I><SUB>N</SUB></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>N</I>)</SPAN> <tex2html_verbatim_mark>, describing the initial state of the boxes. If <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is 0, box <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is on the ground, it is not contained by any box. Otherwise, box <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark> is directly inside box <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>. It is guaranteed that the input state is always correct (No loop exists). <P>Next line has an integer <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$">100000)</SPAN> <tex2html_verbatim_mark>, representing the number of MOVE operations and queries.<P>On the next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines, each line contains a `<TT>MOVE</TT>' operation or a query:<P><OL><LI><TT>MOVE</TT> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, which is described above. If an operation is illegal, just ignore it. </LI><LI><TT>QUERY</TT> <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4393a.png ALT="$ \le$"><I>N</I></SPAN> <tex2html_verbatim_mark>, output the root box of box <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, output the result on a single line. Use a blank line to separate each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
0 1 
5 
QUERY 1 
QUERY 2 
MOVE 2 0 
MOVE 1 2 
QUERY 1 6 
0 6 4 6 1 0 
4 
MOVE 4 1 
QUERY 3 
MOVE 1 4 
QUERY 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
2 

1 
1
</PRE><P>
______________________________________________________
4394||||||false||||||

<P>

<P>
<BR>
There are two strings A and B with equal length. Both strings are made up of lower case letters. Now you have a powerful string painter. With the help of the painter, you can change a segment of characters of a string to any other character you want. That is, after using the painter, the segment is made up of only one kind of character. Now your task is to change A to B using string painter. What's the minimum number of operations?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains multiple cases. Each case consists of two lines: 

<P>

<UL>
<LI>The first line contains string A. 
</LI>
<LI>The second line contains string B. 
</LI>
</UL>

<P>
The length of both strings will not be greater than 100.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
A single line contains one integer representing the answer.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
zzzzzfzzzzz 
abcdefedcba 
abababababab 
cdcdcdcdcdcd
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
6 
7
</PRE>

<P>

______________________________________________________
4395||||||false||||||
<P><BLOCKQUOTE>Is there really a monster living in Loch Ness?</BLOCKQUOTE><P><BLOCKQUOTE>Did the lost city of Atlantis ever exist?</BLOCKQUOTE><P><BLOCKQUOTE>Are UFOs tricks of the light, or actually vehicles from outer space?</BLOCKQUOTE><P><BLOCKQUOTE>Who is responsible for the strange patterns called crop circles-clever hoaxers or alien beings?</BLOCKQUOTE><P>As we can see, there are so many mysterious places, creatures and events in the world which puzzled people for centuries. In this problem, we won't go through all that puzzles. Which we are interested in is this one - crop circles.<P><DIV ALIGN="CENTER"><IMG WIDTH="862" HEIGHT="537" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="\epsfbox{p4395a.eps}"> <tex2html_verbatim_mark></DIV><P>You have probably seen pictures of crop circles. (i.e. see above) They are circular patterns which mysteriously appear in fields of crop, such as wheat and barley. For research, we model these patterns as <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> circles in the plane and number them with <SPAN CLASS="MATH">1, 2,..., <I>N</I></SPAN> <tex2html_verbatim_mark>. Each of them has its center <SPAN CLASS="MATH">(<I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark>, radius <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> and an importance value <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> which is evaluated by the scientists.<P>After our observation, we found that there aren't any two circles touch each other in the crop circles. But it's possible that a circle is completely within another one. When we are in a certain circle, we should pass through its borderline once in order to get out from it.<P>For two distinct circles A and B, if one can go to B from A without passing through more than <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> borderlines, we say that A and B are connected. Here comes the problem: For all connected cycle pairs (A, B), what's the maximum difference of the importance value between them? The difference of the importance value between A and B can be defined as <SPAN CLASS="MATH">| <I>VA</I> - <I>VB</I>|</SPAN> <tex2html_verbatim_mark>.<P><P><BR>For example, look at the picture below. For <SPAN CLASS="MATH"><I>K</I> = 3</SPAN> <tex2html_verbatim_mark>, the optimal solution is to select the circle 1 and 3 which make the difference of importance value 220. And there are 3 borderlines between circle 1 and 3.<P><SPAN CLASS="MATH">| <I>V</I>5 - <I>V</I>1| = 300</SPAN> <tex2html_verbatim_mark>, which is larger than 220, but circle 5 and circle 1 are not connected. There're 4 borderlines between them, so we won't consider these kinds of pairs.<P><DIV ALIGN="CENTER"><IMG WIDTH="548" HEIGHT="324" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="\epsfbox{p4395b.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input gives the number of cases <SPAN CLASS="MATH"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>. <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> test cases follow.<P>The first line of each case contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> as described above. <!-- MATH
 $(1 < N < 50001, 1 < K < 101)$
 --><SPAN CLASS="MATH">(1 &lt; <I>N</I> &lt; 50001, 1 &lt; <I>K</I> &lt; 101)</SPAN> <tex2html_verbatim_mark>.<P>Next follow <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each contains four integers <SPAN CLASS="MATH"><I>X</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>Y</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark>, separated by spaces. The <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line specifying the information of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th circle, where <SPAN CLASS="MATH">(<I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>)</SPAN> <tex2html_verbatim_mark> are the coordinates of the center, <SPAN CLASS="MATH"><I>R</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> specifies the radius and <SPAN CLASS="MATH"><I>V</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the importance value. <!-- MATH
 $(0 < R_{i} \le 2 \ast 10^{\wedge}8, -10^{\wedge}9 < X_{i}, Y_{i}, V_{i} < 10^{\wedge}9)$
 --><SPAN CLASS="MATH">(0 &lt; <I>R</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="$ \le$">2 <TT>*</TT> 10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="$\scriptstyle \wedge$"></SUP>8, -10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="$\scriptstyle \wedge$"></SUP>9 &lt; <I>X</I><SUB>i</SUB>, <I>Y</I><SUB>i</SUB>, <I>V</I><SUB>i</SUB> &lt; 10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4395a.png ALT="$\scriptstyle \wedge$"></SUP>9)</SPAN> <tex2html_verbatim_mark><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case you should output a single line containing ``<TT>Case <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark>: <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark></TT>" (quotes for clarity) where <SPAN CLASS="MATH"><I>X</I></SPAN> <tex2html_verbatim_mark> is the number of the test case (starting at 1) and <SPAN CLASS="MATH"><I>Y</I></SPAN> <tex2html_verbatim_mark> is the maximum difference of importance value between two connected circles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
5 3 
10 10 1 -200 
0 0 8 10 
-2 2 2 20 
3 -3 3 2 
3 -3 1 100 
3 2 
-200 0 1 0 
0 0 100 2 
200 0 1 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 220 
Case 2: 10
</PRE><P>
______________________________________________________
4396||||||false||||||
<P><P><BR>There are <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> slides lying on the table. Each of them is transparent and formed as a rectangle. In a traditional problem, one may have to calculate the intersecting area of these <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> slides. The definition of intersection area is such area which belongs to all of the slides.<P>But this time I want to take out some one of the <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> slides, so that the intersecting area of the left <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> slides should be maximal. Tell me the maximum answer.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of the input contains a single integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of rectangles. Followed by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines, each line contains four integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I><SUB>2</SUB></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(-10000 \le x_{1} < x_{2} \le 10000, -10000 \le y_{1} < y_{2} \le 10000)$
 --><SPAN CLASS="MATH">(- 10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$"><I>x</I><SUB>1</SUB> &lt; <I>x</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$">10000, -10000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$"><I>y</I><SUB>1</SUB> &lt; <I>y</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4396img1.png ALT="$ \le$">10000)</SPAN> <tex2html_verbatim_mark>, pair <SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> <tex2html_verbatim_mark> gives out the bottom-left corner and pair <SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> <tex2html_verbatim_mark> gives out the top-right corner of the rectangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There should be one line per test case containing the maximum intersecting area of corresponding <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> <tex2html_verbatim_mark> slides.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
0 0 2 2 
1 1 2 2 
3 
0 0 2 2 
1 0 3 2 
1 1 3 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
2
</PRE><P>
______________________________________________________
4397||||||false||||||
<P><P><BR>The former king of Gridland - CR - has just passed away, leaving his <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> sons that all desire the throne. Then the war of succession breaks out and the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark>-King era begins.<P>Gridland is a rectangle of <SPAN CLASS="MATH"><I>N</I> <TT>*</TT> <I>M</I></SPAN> <tex2html_verbatim_mark>, with each grid unit as a city. Each city supports one and only one of the <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> kings as its leader. Cities supporting the same king will always endeavor to establish a kingdom through fighting the rival, and they will not stop until they establish a kingdom satisfying the following rules:<P><OL><LI>The kingdom is a rectangle on the map. </LI><LI>Every city on the Gridland supporting that king should be inside the kingdom. </LI></OL><P>Sadly, through the process of establishing a kingdom, once the opposite cities find that an overlapping of domain is unavoidable, they will inevitably engage in a conflict.<P>Sometimes for a temporary benefit a bunch of kings may ally into a party. It is certain that one king can only take part in one party at one time, and the cities following a king will correspondingly support the party he joins.<P>Rather than fighting each other fiercely, cities supporting the same party cooperate and strive to establish a kingdom of the whole party.<P>Such kingdoms follow the similar rules:<P><OL><LI>The kingdom is a rectangle on the map. </LI><LI>Every city on the Gridland supporting that party should be inside the kingdom. </LI></OL><P>And the fighting trigger with other kingdoms is exactly the same as the above one.<P>A established kingdom is called stable if and only if:<P><OL><LI>No city in the kingdom has to fight with another kingdom.. </LI><LI>If the kingdom stands for a party, the party must never have more than <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> kings. </LI></OL><P><P><BR>Now, your job is to find the largest possible stable kingdom. By `largest' we mean the one with the largest number of cities.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains multiple cases. Each case consists of:<P><DL><DT><STRONG>Line 1:</STRONG></DT><DD>Two integers: <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4397img1.png ALT="$ \le$"><I>N</I>, <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4397img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark></DD><DT><STRONG>Line 2:</STRONG></DT><DD>Two integers: <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4397img1.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4397img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark></DD><DT><STRONG>Line 3..<SPAN CLASS="MATH"><I>N</I> + 2</SPAN> <tex2html_verbatim_mark>:</STRONG></DT><DD><SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> integers each line. the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th integer on the <SPAN CLASS="MATH"><I>i</I> + 2</SPAN> <tex2html_verbatim_mark>-th line will be between 1 and <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>, indicating which king that city supports.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output one line containing an integer that is the area of the largest possible stable kingdom.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
5 3 
4 1 1 
2 3 1 
2 2 5 
10 10 
13 5 
1 1 1 4 4 4 4 4 3 11 
1 1 1 4 4 4 4 4 11 3 
1 1 1 2 2 2 2 2 3 3 
1 1 1 2 2 2 2 2 3 11 
1 1 1 2 2 2 2 2 11 11 
1 1 1 2 2 2 2 2 3 11 
1 1 1 6 6 6 7 7 3 3 
1 1 1 6 6 6 7 7 3 3 
5 5 5 5 10 13 8 12 9 9 
5 5 5 5 13 10 8 8 9 9 
2 2 
2 1 
2 2 
2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
64 
0
</PRE><P>
______________________________________________________
4398||||||false||||||
<P><P><BR>The alliance of thieves decides to steal the treasure from country A. There are n cities in country A. Cities are connected by directional or bidirectional road. To avoid the risk, the king of country A divides his treasure and hides them in some place on the road.<P>The alliance has found out the secret of the king. They get a map of country A which shows the location and the quantity of treasure on each road. In order to make the maximum profit and reduce the least loss, the alliance determines to send <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> thieves respectively to each city (one city one thief). At the appointed time, each thief chooses one road (if there is a road and notice that the road may have direction) to get to its corresponding city. Then he can steal the treasure on that road. After stealing, all the thieves return back to their base immediately.<P>The heads of the alliance wonder to know the quantity of the treasure they can steal at most.<P><DIV ALIGN="CENTER"><IMG WIDTH="383" HEIGHT="222" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="\epsfbox{p4398.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple cases. Input is terminated by EOF. For each case, the first line contains two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>n</I> <TT>*</TT> (<I>n</I> - 1)/2)</SPAN> <tex2html_verbatim_mark>, representing the number of cities and the number of roads in country A. The following <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines, each line contains four integers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>n</I>, <I>x</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \neq$"> <I>y</I>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>d</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$">1)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/p4398.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark>, which means that there is a road from city <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> to city <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>d</I> = 0</SPAN> <tex2html_verbatim_mark> shows this road is bidirectional and <SPAN CLASS="MATH"><I>d</I> = 1</SPAN> <tex2html_verbatim_mark> shows it is directional and <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> the starting point, <SPAN CLASS="MATH"><I>w</I></SPAN> <tex2html_verbatim_mark> is the quantity of treasure on the road.<P>We guarantee that the road <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">(<I>y</I>, <I>x</I>)</SPAN> <tex2html_verbatim_mark> will never appear together in the same case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output the maximum quantity of treasure the alliance can get.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 1 
1 2 0 10 
5 5 
1 2 1 0 
1 3 1 10 
2 3 0 20 
3 4 0 30 
4 2 1 40
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
100
</PRE><P>
______________________________________________________
4399||||||false||||||
<P><P><BR>On birthday, Anthony got a toy. It is constructed with <SPAN CLASS="MATH"><I>N</I> + 1</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$ \ge$">3)</SPAN> <tex2html_verbatim_mark> balls and <SPAN CLASS="MATH">2 <TT>*</TT> <I>N</I></SPAN> <tex2html_verbatim_mark> sticks. All balls are in a same plane. One of them is special, while the other <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> balls are connected to it by <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> sticks with the same length. The angles between any two adjacent sticks are equal. And finally, any two adjacent balls(except the central one) are connected by a stick. Here are two examples:<P><DIV ALIGN="CENTER"><IMG WIDTH="500" HEIGHT="234" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="\epsfbox{p4399.eps}"> <tex2html_verbatim_mark></DIV><P>Anthony wanted to remove <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> sticks, leaving all balls still connected. He wanted to know the number of all legal solutions. Your task is to solve this problem for him.<P>Notice that if a solution will be the same as another one by rotation, these two solutions should be consider as the same.<P>The answer may be quite large. You just need to calculate the remainder of the answer when divided by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains several test cases.<P>For each test case, there is only one line containing two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$ \le$">10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$\scriptstyle \wedge$"></SUP>9, 2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$ \le$">10<SUP><IMG WIDTH="14" HEIGHT="14" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/43/4399img1.png ALT="$\scriptstyle \wedge$"></SUP>9)</SPAN> <tex2html_verbatim_mark>.<P>Input is terminated by EOF.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output one integer in one line, representing the remainder of the number of all solutions when divided by <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 10000 
4 10000 
4 10
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
6 
13 
3
</PRE><P>
______________________________________________________
4400||||||false||||||
<P>Henry decides to develop a web site, which will provide the service of transit search. But he can only get the transit data of Guangzhou, so his web site can only support the transit search of Guangzhou. We suppose Guangzhou is 10240 meters by 10240 meters. The coordinate of the top-left corner is (0,0). The coordinate of the bottom-right corner is (10240,10240). The X-axis is from top to bottom and the Y-axis is from left to right. At the beginning, four pictures of the size 10cm by 10 cm make up of the whole map of Guangzhou. They are numbered from 0 to 3. It is to say at the beginning the scale of the map is 1cm:512 meters. We call the four pictures are at level 1.<P><DIV ALIGN="CENTER"><IMG WIDTH="974" HEIGHT="757" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="\epsfbox{p4400a.eps}"> <tex2html_verbatim_mark></DIV><P>When you double-click on the map using the mouse, the map will zoom in. The pictures at next level will be shown on the screen. For example, when you double-click on the above map, picture 0 will be replaced by four pictures 00, 01, 02, 03, all of whose sizes are 10 cm by 10 cm. and the scale of the map change to 1cm:256 meters. (notice that, pictures 00,01,02,03 together describe the same area as picture 0). When you continue double-click, picture 01 will be replaced by pictures 010,011,012,013, and so on.<P>Now, a position's coordinate can be given by(str, x,y). str consists of 8 characters each from 0 to 3. It describes the id of the picture which the position is located at. <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(0<I>cm</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$">10<I>cm</I>)</SPAN> <tex2html_verbatim_mark> describe the position's offset relative to the top-left corner on picture str. Notice that the X-axis is from top to bottom and the Y-axis is from left to right.<P><DIV ALIGN="CENTER"><IMG WIDTH="975" HEIGHT="823" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="\epsfbox{p4400b.eps}"> <tex2html_verbatim_mark></DIV><P>Now, the start position and end position are given as <SPAN CLASS="MATH">(<I>start</I>, <I>s</I><SUB>x</SUB>, <I>s</I><SUB>y</SUB>)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">(<I>end</I>, <I>e</I><SUB>x</SUB>, <I>e</I><SUB>y</SUB>)</SPAN> <tex2html_verbatim_mark>. And some information about the bus line will be also given. First, each bus stop will be described by <SPAN CLASS="MATH">(<I>name</I>, <I>x</I>, <I>y</I>)</SPAN> <tex2html_verbatim_mark>, its name and its coordinate. Second, each bus line will be described by <SPAN CLASS="MATH">(<I>name</I><SUB>1</SUB>, <I>name</I><SUB>2</SUB>, <I>name</I><SUB>3</SUB>...<I>name</I><SUB>k</SUB>)</SPAN> <tex2html_verbatim_mark> which are the bus stops the bus line travels through. If the distance between the start position and end position is no more than 2000 meters, the web site will suggest walking there. Otherwise, the web site will find a bus stop whose distance is no more than 1000 meters from the start position. You can take buses to a bus stop whose distance is no more than 1000 meters from the end position. Along the way, you can change buses at any bus stop. If you can take buses according the above rules, the web site will find a route with fewest number of changing buses. If you can't take buses according the above rules, the web site will suggest taking a taxi.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases.<P>For each case, the first two lines describe the start position and the end position as followed.<P><P><BR><SPAN CLASS="MATH"><I>Start</I>&nbsp;<I>s</I><SUB>x</SUB>&nbsp;<I>s</I><SUB>y</SUB></SPAN> <tex2html_verbatim_mark><BR><SPAN CLASS="MATH"><I>End</I>&nbsp;<I>e</I><SUB>x</SUB>&nbsp;<I>e</I><SUB>y</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>Start</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>End</I></SPAN> <tex2html_verbatim_mark> both contain 8 characters each from 0 to 3. <SPAN CLASS="MATH">0<I>cm</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$"><I>s</I><SUB>x</SUB>, <I>s</I><SUB>y</SUB>, <I>e</I><SUB>x</SUB>, <I>e</I><SUB>y</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$">10<I>cm</I></SPAN> <tex2html_verbatim_mark>. Notice that all the numbers in the input are integers.<P>The next line contains an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0<n<5001)$
 --><SPAN CLASS="MATH">(0 &lt; <I>n</I> &lt; 5001)</SPAN> <tex2html_verbatim_mark>, indicating the total number of bus stops in Guangzhou. The following <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines each describe a bus stop in the format:<P><P><BR><SPAN CLASS="MATH"><I>Name</I>&nbsp;<I>x</I>&nbsp;<I>y</I></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>Name</I></SPAN> <tex2html_verbatim_mark> contains no more than 20 characters. <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$"><I>x</I>, <I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$">10240</SPAN> <tex2html_verbatim_mark>.<P><P><BR>Next comes an integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0 < m \le 100)$
 --><SPAN CLASS="MATH">(0 &lt; <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, indicating the number of bus lines in Guangzhou.<P>Then following is the description of the <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> bus lines.<P>Each bus line is described as followed:<P><P><BR><SPAN CLASS="MATH"><I>K</I><BR><I>Name</I><SUB>1</SUB>&nbsp;<I>Name</I><SUB>2</SUB>&nbsp;<I>Name</I><SUB>3</SUB>...<I>Name</I><SUB>k</SUB></SPAN> <tex2html_verbatim_mark><P><P><BR><SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(0<K\le30)$
 --><SPAN CLASS="MATH">(0 &lt; <I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4400a.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> is the number of bus stops along the bus line.<P><SPAN CLASS="MATH"><I>Name</I><SUB>i</SUB></SPAN> <tex2html_verbatim_mark> is the ith bus stop along the bus line. Notice that the bus line is bidirectional.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P><DL COMPACT><DT>(1)</DT><DD>If the distance between the start position and end position is no more than 2000 meters, print ``<TT>walk there</TT>" in a single line.</DD><DT>(2)</DT><DD>If you can take buses according to the above rule, print the fewest number of buses you have to take. For example, if you can take a bus directly to end position without changing bus line, print <TT>1</TT>.</DD><DT>(3)</DT><DD>Otherwise, print ``<TT>take a taxi</TT>" in a single line.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
00000000 1 1 
00001000 3 3 
4 
a 1 1 
b 20 30 
c 40 50 
d 100 100 
2 
3 
a b c 
3 
b c d 
00000000 1 1 
03231130 5 5 
5 
a 1 1 
b 1000 1000 
c 3000 3000 
d 3000 4000 
e 4500 4000 
2 
3 
a b c 
3 
c d e 
00000000 1 1 
03231130 5 5 
4 
a 1 1 
b 1000 1000 
c 3000 3000 
d 3000 4000 
2 
3 
a b c 
3 
b c d
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
walk there 
2 
take a taxi
</PRE><P>
______________________________________________________
4401||||||false||||||
<P><P><BR>There is a matrix of size <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> rows by <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> columns. Each element in the matrix is either `<TT>0</TT>' or `<TT>1</TT>'. A square is called magic square if it meets the following three conditions.<P><DL COMPACT><DT>(1)</DT><DD>The elements on the four borders are all `<TT>1</TT>'.</DD><DT>(2)</DT><DD>Inside the square (excluding the elements on the borders), the number of <TT>1</TT>'s and the number of <TT>0</TT>'s are different at most by 1.</DD><DT>(3)</DT><DD>The size of the square is at least 2 by 2. Now given the matrix, please tell me how many magic square are there in the matrix.</DD></DL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input begins with a line containing an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark>, the number of test cases. Each case begins with two integers <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4401img1.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4401img1.png ALT="$ \le$">300)</SPAN> <tex2html_verbatim_mark>, representing the size of the matrix. Then <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark> lines follow. Each contains <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> integers, either `<TT>0</TT>' or `<TT>1</TT>'. The integers are separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, output the number of magic square in a single line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
4 4 
1 1 1 1 
1 0 1 1 
1 1 0 1 
1 1 1 1 
5 5 
1 0 1 1 1 
1 0 1 0 1 
1 1 0 1 1  
1 0 0 1 1 
1 1 1 1 1 
2 2 
1 1 
1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
1
</PRE><P>
______________________________________________________
4402||||||false||||||

<P>

<P>
<BR>
One of our judges gets bored! Fortunately a toy named Hanoi Tower is there, which may help him to kill time. You know it well that the toy consists of three stacks and some disks. The size of each disk can be indicated by its radius and thickness. Tired of the usual ways of playing the toy, he devises his new rule. He uses only one stack in the game. Before the game, he colors one disk red, the others blue. Starting with an empty peg, the game runs on turn by turn. Each turn, he puts all the valid blue disks as well as the special red disk, which is not on the stack at the time, into a black box and picks out one blindly. By this way he can select one of the disks in the box with equal possibility. Which disk is so-called valid? It is decided by comparing its radius to the radius of the top-most disk on the stack. If its radius is strictly less than the top-most disk's, it's considered valid. If no disk is on the stack at that time, all the disks are considered valid. If a disk is chosen, our cute judge then puts it on the top of the stack, with one exceptional case, the red one. If the special red disk is chosen, instead of putting it onto the stack, the disk currently at the top of the stack should be removed. Wired, isn't it? 

<P>
The stack's height is given. The game ends when after some turns the total thickness of all the disks on the stack is greater than the stack's height, or the red disk is picked but the stack is empty. By then, the guy may get bored again and start to complain about his tedious work (doesn't he suppose to be a judge?) Could you help us to figure out, after how many turns expectedly will the game last?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
Input contains no more than 60 cases. There is one empty line between two cases. Your program should process to the end of file. 

<P>
For each test case, the first line contains two integers, <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le N, H\le100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4402img1.png
 ALT="$ \le$"><I>N</I>, <I>H</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4402img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. The toy contains <SPAN CLASS="MATH"><I>N</I> + 1</SPAN>
<tex2html_verbatim_mark> disks, and the stack's height is <SPAN CLASS="MATH"><I>H</I></SPAN>
<tex2html_verbatim_mark>. Then <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> lines follow. Each contains two integers <SPAN CLASS="MATH"><I>r</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>h</I><SUB>1</SUB></SPAN>
<tex2html_verbatim_mark> <!-- MATH
 $(1 \le r_{1}, h_{1} \le100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4402img1.png
 ALT="$ \le$"><I>r</I><SUB>1</SUB>, <I>h</I><SUB>1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4402img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>, describing one blue disk by giving its radius and thickness.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each case, output one line containing the expected turns the game lasts, to three (3) digits after the decimal point. If the answer is greater than 18000 (that's the 5 hours contest time measured in seconds), output a line ``<TT>INF</TT>" instead (without quotation).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2 2 
1 1 
2 2 

1 1 
1 2
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2.800 
1.000

______________________________________________________
4403||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="a_files/filelist.xml"><link rel=Edit-Time-Data href="a_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem A - ASCII Diamond</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="State"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place" downloadurl="http://www.5iantlavalamp.com/"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="City" downloadurl="http://www.5iamas-microsoft-com:office:smarttags"/><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:3020308;
	mso-list-template-ids:1994687894;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>ASCII diamonds can be drawn with integer side lengths. Each layer of this diamond is drawn with a single ASCII alphabet, starting with <b>a</b> and ending with <b>z</b> (starting from the center) and continues in cyclic order. </span></p><div align=center><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='margin-left:-174.6pt;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:207.85pt'><td width=639 valign=top style='width:479.45pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:207.85pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'><img width=604 height=269 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4403a.jpg></span></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=639 valign=top style='width:479.45pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure 1: ASCII diamond for different side lengths.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p></td></tr></table></div><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Any one of these <b>ASCII</b> diamonds can be used to draw an infinite plane by using this as a tile. For example <b>ASCII</b> diamond of length <b>5</b> can be used to draw such an infinite grid. Only first <b>20</b> row and <b>60</b> columns are shown below:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><img width=613 height=345 id="_x0000_i1027" src="http://livearchive.onlinejudge.org/external/44/p4403a.jpg></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Here rows and columns are numbered starting from zero. By specifying the topmost row (<b>row<sub>1</sub></b>), leftmost column (<b>col<sub>1</sub></b>), bottommost row (<b>row<sub>2</sub></b>) and rightmost column (<b>col<sub>2</sub></b>) we can specify a portion of such an infinite grid (also shown in figure above).</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Given the side length of the tile to be used, the topmost row (<b>row<sub>1</sub></b>), leftmost column (<b>col<sub>1</sub></b>), bottommost row (<b>row<sub>2</sub></b>) and rightmost column (<b>col<sub>2</sub></b>) you have to print the pattern within these four boundaries (inclusive).</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt'>&nbsp;&nbsp; </span></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input contains at most <b>125</b> sets of inputs. But not all cases are extreme.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each set of input contains five integers: <b>N (0&lt;N</b></span><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'>20000)</span></b><span style='font-size:10.0pt;font-family:Verdana'>, <b>row<sub>1</sub></b>, <b>col<sub>1</sub></b>, <b>row<sub>2</sub></b>, <b>col<sub>2</sub></b><sub> </sub><b>(0</b></span><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> row<sub>1 </sub></span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> row<sub>2 </sub></span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 20000, 0 </span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> col<sub>1 </sub></span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> col<sub>2 </sub></span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 20000, 0</span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> (row<sub>2</sub>- row<sub>1</sub>+1)* (col<sub>2</sub>- col<sub>1</sub>+1) </span></b><b><span style='font-size:10.0pt;
font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:
Verdana'> 40000)</span></b><span style='font-size:10.0pt;font-family:Verdana'>. Here <b>N</b> denotes that the side length of the tiles used to draw the plane should be <b>N</b>. The meaning of <b>row<sub>1</sub>, col<sub>1</sub>, row<sub>2</sub>, <span class=GramE>col<sub>2</sub></span></b><sub> </sub>are given in the problem statement. The first sample input corresponds to the figure above.</span></p><p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoBodyText2><span style='font-size:10.0pt;font-family:Verdana'>Input is terminated by a line where the first integer is zero.</span></p><p class=MsoBodyText2>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span class=GramE><span style='font-size:10.0pt;font-family:Verdana'>For each line of input produce <b>(row<sub>2</sub>- row<sub>1</sub>+2)</b> lines of output.</span></span><span style='font-size:
10.0pt;font-family:Verdana'> First line contains serial of output. Each of the next lines contain <b>(col<sub>2</sub>- col<sub>1</sub>+1)</b> characters. These lines describe the patterns within the specified rows and columns. Look at the output for sample input for details. The output file size is less than <b>1</b> MB.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><a name="OLE_LINK1"><span style='font-size:10.0pt;font-family:"Courier New"'>5 3 18 10 46</span></a></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New"'>100 50 <span class=SpellE>50</span> 69 <span class=SpellE>69</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New"'>0 2 3 4 5</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Case 1:</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>.<span class=SpellE>edcbcde<span class=GramE>..edcbcde</span>..<span class=GramE>edcbcde</span>..e</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>edcbabcdeedcbabcdeedcbabcdeed</span></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>.<span class=SpellE>edcbcde<span class=GramE>..edcbcde</span>..<span class=GramE>edcbcde</span>..e</span></span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>..<span class=SpellE><span class=GramE>edcde</span></span>....<span class=SpellE>edcde</span>....<span class=SpellE>edcde</span>....</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>...<st1:City w:st="on"><span class=SpellE>ede</span></st1:City>......<st1:City w:st="on"><span class=SpellE>ede</span></st1:City>......<st1:City w:st="on"><st1:place w:st="on"><span class=SpellE>ede</span></st1:place></st1:City>.....</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>....e........e........e......</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>....e........e........e......</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>...<st1:City w:st="on"><span class=SpellE>ede</span></st1:City>......<st1:City w:st="on"><span class=SpellE>ede</span></st1:City>......<st1:City w:st="on"><st1:place w:st="on"><span class=SpellE>ede</span></st1:place></st1:City>.....</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Case 2:</span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>utsrqponmlkjihgfedcb</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>tsrqponmlkjihgfedcba</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>srqponmlkjihgfedcbaz</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>rqponmlkjihgfedcbazy</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>qponmlkjihgfedcbazyx</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>ponmlkjihgfedcbazyxw</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>onmlkjihgfedcbazyxwv</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>nmlkjihgfedcbazyxwvu</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>mlkjihgfedcbazyxwvut</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>lkjihgfedcbazyxwvuts</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>kjihgfedcbazyxwvutsr</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>jihgfedcbazyxwvutsrq</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>ihgfedcbazyxwvutsrqp</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>hgfedcbazyxwvutsrqpo</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>gfedcbazyxwvutsrqpon</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>fedcbazyxwvutsrqponm</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>edcbazyxwvutsrqponml</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>dcbazyxwvutsrqponmlk</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>cbazyxwvutsrqponmlkj</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:10.0pt;
  font-family:"Courier New"'>bazyxwvutsrqponmlkji</span></span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar <span class=SpellE>Manzoor</span>, Special Thanks: <st1:place w:st="on"><st1:City w:st="on"><span class=SpellE>Sohel</span> Hafiz</st1:City>, <st1:State w:st="on">Md.</st1:State></st1:place> <span class=SpellE>Arifuzzaman</span> <span class=SpellE>Arif</span></span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4404||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="b_files/filelist.xml"><link rel=Edit-Time-Data href="b_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem B - Match Maker</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="State"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="address"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="Street"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place" downloadurl="http://www.5iantlavalamp.com/"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="City" downloadurl="http://www.5iamas-microsoft-com:office:smarttags"/><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:654452284;
	mso-list-template-ids:91287674;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=355 valign=top style='width:266.0pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>There are <b>N</b> men and <b>N</b> women in a certain institution. Each of the <b>N</b> men provides you with a list that contains the names of the women who they would prefer to marry. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>You would like to apply your programming knowledge into this match making to make all the men satisfied.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>A man is satisfied if he is assigned with a woman whom he has in his preference list. You must ensure that each man is assigned to exactly one woman and vice versa.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p></td><td width=289 valign=top style='width:216.4pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'><img width=274 height=222 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4404.jpg></span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><b><span style='font-size:16.0pt'>&nbsp;</span></b></p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first line of input is an integer <span class=GramE><b>T(</b></span><b>T &lt; 50)</b> that indicates the total number of test cases. Each case starts with a line containing a positive integer <span class=GramE><b>N(</b></span><b>N &lt; 16)</b>. The next line gives the names of the <b>N</b> men. Consecutive names are separated by a single space character <span class=GramE>and</span> each name can be up to <b>20</b> lowercase characters. The next line gives the names of the <b>N</b> women in the same format. The next <b>N</b> lines give you the list of the women that each man prefers. Each of these <b>N</b> lines starts with the name of a man followed by a colon followed by a list of the women in his corresponding list. All the name of women <span class=GramE>are</span> preceded by a single space.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>You may assume that all the names of the <b>N</b> men and <b>N</b> women are distinct. However a man and a woman can have the same name. The list of women in each mans list will be from the given set of women and there wont be any duplicates. </span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each case, output the case number first. In the next line output the total number of distinct assignments that are valid. Two assignments are different if there is a matching between one man and one woman that is not common to both. In the next line, output the assignment that is lexicographically the smallest. You should print the names of each pair one after another with the mans name preceding that of his matched woman. The sample clarifies what lexicographically smallest means.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>If the case is such that its not possible to satisfy all the men, then output <b>No Way</b> instead. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Note that there are no trailing/leading spaces in the input and output. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Look at the samples for clarifications and detailed analysis.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><b><i><span style='font-size:16.0pt;font-family:Arial;mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";color:black;
mso-font-kerning:18.0pt;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:#0845'><br clear=all style='page-break-before:always'></span></i></b><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>bill john <st1:City w:st="on"><st1:place w:st="on"><span class=SpellE>adrian</span></st1:place></st1:City></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>seher</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'> <span class=SpellE>sabah</span> <span class=SpellE>marsha</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>john: <span class=SpellE>sabah</span></span></p><p class=MsoNormal><st1:City w:st="on"><st1:place w:st="on"><span class=SpellE><span style='font-size:11.0pt;font-family:"Courier New"'>adrian</span></span></st1:place></st1:City><span style='font-size:11.0pt;font-family:"Courier New"'>: <span class=SpellE>seher</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>bill: <span class=SpellE>marsha</span> </span></p><p class=MsoNormal><span lang=FR style='font-size:11.0pt;font-family:"Courier New";
  mso-ansi-language:FR'>2</span><span lang=FR style='mso-ansi-language:FR'><o:p></o:p></span></p><p class=MsoNormal><span class=SpellE><span lang=FR style='font-size:11.0pt;
  font-family:"Courier New";mso-ansi-language:FR'>lou</span></span><span lang=FR style='font-size:11.0pt;font-family:"Courier New";mso-ansi-language:
  FR'> <span class=SpellE>liu</span></span><span lang=FR style='mso-ansi-language:
  FR'><o:p></o:p></span></p><p class=MsoNormal><span class=SpellE><span lang=FR style='font-size:11.0pt;
  font-family:"Courier New";mso-ansi-language:FR'>zai</span></span><span lang=FR style='font-size:11.0pt;font-family:"Courier New";mso-ansi-language:
  FR'> <span class=SpellE>kai</span></span><span lang=FR style='mso-ansi-language:
  FR'><o:p></o:p></span></p><p class=MsoNormal><span class=SpellE><span lang=FR style='font-size:11.0pt;
  font-family:"Courier New";mso-ansi-language:FR'>lou</span></span><span lang=FR style='font-size:11.0pt;font-family:"Courier New";mso-ansi-language:
  FR'>: <span class=SpellE>kai</span> <span class=SpellE>zai</span></span><span lang=FR style='mso-ansi-language:FR'><o:p></o:p></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>liu</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'>:</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>andy</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'> <span class=SpellE>simon</span> bob</span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>donna</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'> <span class=SpellE>steph</span> <span class=SpellE>mary</span></span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>simon</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'>: <span class=SpellE>donna</span> <span class=SpellE>steph</span> <span class=SpellE>mary</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>bob: <span class=SpellE>donna</span> <span class=SpellE>mary</span> <span class=SpellE>steph</span></span></p><p class=MsoNormal style='text-autospace:none'><span class=SpellE><span style='font-size:11.0pt;font-family:"Courier New"'>andy</span></span><span style='font-size:11.0pt;font-family:"Courier New"'>: <span class=SpellE>steph</span> <span class=SpellE>mary</span> <span class=SpellE>donna</span></span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1:</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1</span></p><p class=MsoNormal><st1:City w:st="on"><st1:place w:st="on"><span class=SpellE><span style='font-size:11.0pt;font-family:"Courier New"'>adrian</span></span></st1:place></st1:City><span style='font-size:11.0pt;font-family:"Courier New"'> <span class=SpellE>seher</span> bill <span class=SpellE>marsha</span> john <span class=SpellE>sabah</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2:</span></p><p class=MsoNormal><st1:Street w:st="on"><st1:address w:st="on"><span style='font-size:11.0pt;font-family:"Courier New"'>No Way</span></st1:address></st1:Street></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3:</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>6</span></p><p class=MsoNormal><span class=SpellE><span style='font-size:11.0pt;
  font-family:"Courier New"'>andy</span></span><span style='font-size:11.0pt;
  font-family:"Courier New"'> <span class=SpellE>donna</span> bob <span class=SpellE>mary</span> <span class=SpellE>simon</span> <span class=SpellE>steph</span></span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: <span class=SpellE>Sohel</span> Hafiz, Special Thanks: <span class=SpellE>Shamim</span> Hafiz, <st1:place w:st="on"><st1:City w:st="on"><span class=SpellE>Rujia</span> Liu</st1:City>, <st1:State w:st="on">Md.</st1:State></st1:place> <span class=SpellE>Arifuzzaman</span> <span class=SpellE>Arif</span></span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:16.0pt;
font-family:Arial'>Illustration</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:16.0pt'>&nbsp;</span></b></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Case 1:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each man likes exactly one woman and each woman is liked by exactly one man. So there is only one assignment possible.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Case 2:</span></p><p class=MsoNormal style='text-align:justify'><span class=SpellE><span class=GramE><span style='font-size:10.0pt;font-family:Verdana'>liu</span></span></span><span style='font-size:10.0pt;font-family:Verdana'> doesnt like anyone and so its impossible to satisfy all the men.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Case 3:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>All the <b>3</b> men like every women and so any permutation is a valid assignment. Of all the <b>6</b> assignments <span class=SpellE><span class=GramE>andy</span></span> <span class=SpellE>donna</span> bob <span class=SpellE>mary</span> <span class=SpellE>simon</span> <span class=SpellE>steph</span> is the lexicographically smallest string. Note that <span class=SpellE><span class=GramE>andy</span></span> <span class=SpellE>donna</span> bob <span class=SpellE>mary</span> <span class=SpellE>simon</span> <span class=SpellE>steph</span> and </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><span class=GramE>bob</span> <span class=SpellE>mary</span> <span class=SpellE>andy</span> <span class=SpellE>donna</span> <span class=SpellE>simon</span> <span class=SpellE>steph</span> are same assignment. The former gets printed since its lexicographically smaller.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4405||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="c_files/filelist.xml"><link rel=Edit-Time-Data href="c_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem C - Tariff Plan</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:714157409;
	mso-list-template-ids:1107854500;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=648 style='width:6.75in;margin-left:5.4pt;border-collapse:collapse;mso-padding-alt:
 0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:202.5pt'><td width=156 valign=top style='width:117.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:202.5pt'><p class=MsoNormal><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" alt="" style='position:absolute;
   margin-left:0;margin-top:-185.2pt;width:111pt;height:190.5pt;z-index:1;
   mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/c_files/image009.jpg/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=148 height=254 src="http://livearchive.onlinejudge.org/external/44/c_files/image009.jpg align=left hspace=12 v:shapes="_x0000_s1026"><![endif]><span style='color:windowtext'><o:p></o:p></span></p></td><td width=492 valign=top style='width:369.0pt;padding:0in 5.4pt 0in 5.4pt;
  height:202.5pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Ampang Communications &amp; Mobile (ACM) provides telecom services for various types of users. Since the people of Ampang are quite talkative, they are always seeking for packages that are best suited for them. To have an edge over their competitors, ACM provides various packages. Two of the most popular packages are:</span></p><ul style='margin-top:0in' type=square><li class=MsoNormal style='text-align:justify;mso-list:l0 level1 lfo1;
       tab-stops:list .5in'><span style='font-size:10.0pt;font-family:Verdana'>Mile</span></li> <li class=MsoNormal style='text-align:justify;mso-list:l0 level1 lfo1;
       tab-stops:list .5in'><span style='font-size:10.0pt;font-family:Verdana'>Juice</span></li></ul><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:10.0pt;
  font-family:Verdana'>Mile</span></b><i><span style='font-size:10.0pt;
  font-family:Verdana'> </span></i><span style='font-size:10.0pt;font-family:
  Verdana'>charges every <b>30</b> seconds at a rate of <b>10</b> cents. That means if you talk for <b>29</b> seconds or less, you will be charged with <b>10</b> cents. If you talk for <b>30</b> to <b>59</b> seconds, you will be charged with <b>20</b> cents and so on.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:10.0pt;
  font-family:Verdana'>Juice</span></b><span style='font-size:10.0pt;
  font-family:Verdana'> charges every <b>60</b> seconds at a rate of <b>15</b> cents. That means if you talk for <b>59</b> seconds or less, you will be charged with <b>15</b> cents. Similarly, if you talk for <b>60</b> seconds to <b>119</b> seconds, you will be charged with <b>30</b> cents and so on.</span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Given a list of call durations, can you determine the package that is cheaper?</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first line of input is an integer <span class=GramE><b>T(</b></span><b>T&lt;50)</b> that denotes the total number of test cases. Each case starts with a line containing an integer <span class=GramE><b>N(</b></span><b>0&lt;N&lt;20)</b>. The next line gives a list of <b>N</b> call durations (In second). <span class=GramE>Each call duration</span> is an integer in the range <b>[1, 2000]</b>. Consecutive integers are separated by a single space character.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each case, output the case number first. Then output the name of the cheaper package followed by the corresponding cost in cents. If both package gives the same total cost, then output both the names (<b>Mile</b> preceding <b>Juice</b>) followed by the cost. Look at the output for sample input for details.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>3</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>61 10</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>3</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>40 40 40</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>60 65</span></b></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 1: Mile 40</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 2: Juice 45</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 3: Mile Juice 60</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Sohel Hafiz, Special Thanks: Shamim Hafiz, Rujia Liu</span></p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:10.0pt;
font-family:Verdana'>Illustration: </span></b><span style='font-size:10.0pt;
font-family:Verdana'>Case 1: <span class=GramE><b>Mile</b>(</span>30+10=40) &amp; <b>Juice</b>(30+15=45). Case 2: <span class=GramE><b>Mile</b>(</span>20+20+20=60) &amp; <b>Juice</b>(15+15+15=45). Case 3: <span class=GramE><b>Mile</b>(</span>30+30=60) &amp; <b>Juice</b>(30+30=60).</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p></div></body></html>
______________________________________________________
4406||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="d_files/filelist.xml"><link rel=Edit-Time-Data href="d_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem D - Irreducible Fractions</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1768453774;
	mso-list-template-ids:-114510240;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1027" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:121.5pt;height:127.5pt;
 z-index:1;mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=162 height=170 src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg align=left hspace=12 v:shapes="_x0000_s1027"><![endif]>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>A fraction is irreducible if its numerator and denominator dont have any common factor greater than <b>1</b>. For example <b><sub><img width=85 height=43 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg></sub></b>&nbsp;are all irreducible fractions. But there are some fractions <span class=GramE>like </span><sub><img width=67 height=45 id="_x0000_i1027" src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg></sub>, which is irreducible for any integer value of <b>n</b>. It is not quite straightforward to identify such fractions.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Now consider the fraction with general form<span class=GramE>, </span><sub><img width=53 height=49 id="_x0000_i1028" src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg></sub>, where <b>a, b, x, y</b> are always integers satisfying <b>0 </b></span><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> x, y </span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 10<sup>7</sup></span></b><span style='font-size:10.0pt;font-family:Verdana'> and <b>(0 </b></span><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> a, b </span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 32000, (a+b) &gt; 0)</span></b><span style='font-size:10.0pt;font-family:Verdana'> . If values of <b>a</b> and <b>b</b> are given then we will be able to find some pair of values <b>(x<span class=GramE>,y</span>)</b> such that for any integer value of <b>n</b>, fraction <sub><img width=58 height=53 id="_x0000_i1029" src="http://livearchive.onlinejudge.org/external/44/d_files/image011.jpg></sub>&nbsp;is irreducible. One possible way of finding some of such pairs <b>(x<span class=GramE>,y</span>)</b> is by using the theorem If there exist integers <b>p</b> and <b>q</b> such that <b>rp+sq = 1</b> (r and s are also integers), then <b>r</b> and <b>s</b> are relatively prime. So if <b>(an+x)</b> and <b>(bn+y)</b> are relative prime then we can write </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>(an+x<span class=GramE>)p</span> + (bn+y)q = 1</b></span></p><p class=MsoNormal style='text-align:justify'><b><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt;<span class=GramE>n(</span>ap+bq) + (px+qy) = 1 (i)</span></b></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The relation (i) above can hold for any value of <b>n</b>, if <span class=GramE><b>ap+</b></span><b>bq=0</b> and <b>px+qy=1</b>. Given the value of <b>a</b> and <b>b</b> your job is to count how many different <b>(x, y)</b> pairs there are such that there exist integers <b>p, q</b> satisfying <span class=GramE><b>ap</b></span><b> + bq = 0</b> and <b>px + qy = 1</b>.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>There can be up to <b>100000</b> lines of inputs. Each line contains two non-negative integers which denote the value of <span class=GramE><b>a</b> and</span> <b>b</b> <b>(0 </b></span><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> a, b </span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 32000, (a+b) &gt; 0)</span></b><span style='font-size:10.0pt;font-family:Verdana'> respectively.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input is terminated by a line containing two zeroes. These two zeroes need not be processed.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each line of input except the last one, produce one line of output. This line contains an integer <b>P</b>. This <b>P</b> denotes the total number of different pair of integer values for <b>x</b> and <b>y</b>, which ensures that <span class=GramE><b>ap+</b></span><b>bq = 0</b> and <b>px+qy = 1</b>, where <b>(0 </b></span><b><span style='font-size:10.0pt;font-family:
Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> x, y </span></b><b><span style='font-size:10.0pt;font-family:Symbol'>£</span></b><b><span style='font-size:10.0pt;font-family:Verdana'> 10<sup>7</sup>)</span></b><span style='font-size:10.0pt;font-family:Verdana'>.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>100 223</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>2300 1000</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>0 0</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>89686</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>869565</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor, Special Thanks: Derek Kisman (Moderator), Rujia Liu</span></p></div></body></html>
______________________________________________________
4407||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="e_files/filelist.xml"><link rel=Edit-Time-Data href="e_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem E - Gun Fight</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 6 6 2 2 2 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 2048 0 0 159 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1099256116;
	mso-list-template-ids:366660482;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 align=left style='border-collapse:collapse;mso-table-lspace:9.0pt;margin-left:6.75pt;
 mso-table-rspace:9.0pt;margin-right:6.75pt;mso-table-anchor-vertical:paragraph;
 mso-table-anchor-horizontal:column;mso-table-left:left;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=276 valign=top style='width:207.0pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify;line-height:11.0pt;mso-element:
  frame;mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:column;mso-height-rule:exactly'><span style='font-size:10.0pt;font-family:Verdana'><img width=276 height=269 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4407.jpg></span></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=276 valign=top style='width:207.0pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-element:frame;mso-element-frame-hspace:9.0pt;
  mso-element-wrap:around;mso-element-anchor-vertical:paragraph;mso-element-anchor-horizontal:
  column;mso-height-rule:exactly'><b><span style='font-size:10.0pt;font-family:
  "Arial Narrow"'>The above diagram illustrates sample #1.</span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;mso-element:
  frame;mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:column;mso-height-rule:exactly'><span style='font-size:10.0pt;font-family:"Arial Narrow"'>The imaginary line is represented by the red line passing through two watch towers shown in red. There are 5 gun towers in total. The two groups are represented by two colors blue and black of which blue group is smaller in size. The yellow arrows show the two fights where the black ones get defeated.</span></p></td></tr></table><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 align=left style='mso-cellspacing:0in;mso-table-lspace:2.25pt;mso-table-rspace:2.25pt;
 mso-table-anchor-vertical:paragraph;mso-table-anchor-horizontal:column;
 mso-table-left:left;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td valign=top style='padding:0in 9.0pt 0in 9.0pt'><p class=MsoNormal style='text-align:justify;mso-element:frame;mso-element-frame-hspace:
  2.25pt;mso-element-wrap:around;mso-element-anchor-vertical:paragraph;
  mso-element-anchor-horizontal:column;mso-height-rule:exactly'>&nbsp;</p></td></tr></table><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>Here we are in a gun fight again. We have a battlefield similar to a <b>2</b>-dimensional Cartesian plane. In some of the grid points there are some watch towers.&nbsp; Some of the watch towers have gunmen inside them. Let us denote them as gun towers. The power of each gun tower is given as an integer number <b>P</b>. When a fight takes place between two gun towers, the tower with higher <b>P</b> wins (No result in case of equal <b>P</b>). </span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>Now, there are two opposing groups in the battle. The groups are separated by a boundary line. This boundary line is an imaginary infinite line drawn through two given free watch towers (watch towers without gunmen). The two groups stay in either side of the field. Interestingly, there are always an odd number of gun towers in the field at the start of a battle. This implies that the two groups will be of unequal size. The smaller group wants to adopt a strategy to ensure maximum possible success. A gun tower can fight with at most one of the opposing gun towers. Again, a gun tower can attack an enemy gun tower if the Euclidean distance between them is not greater than a particular distance <b>R</b>. Each gun tower of the smaller group is given the choice to select its opponent. </span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>What is the maximum number of fight the smaller group can win?</span></p><p class=MsoNormal>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>There are at most <b>60</b> test cases in the input. Every test case starts with an integer <b>N</b> <b>(5&#8804;N&#8804;300)</b>, the number of watch towers. Each of the next <b>N</b> lines contains <b>3</b> non-negative integers <b>x, y</b> and <b>P</b>. The first two integers<b> (0 &#8804; <span class=SpellE>x<span class=GramE>,y</span></span> &#8804; 10000)</b> denote co-ordinates of the tower. The final integer <b>P (0 &#8804; P &#8804; 10000)</b> denotes the power of the tower. Note that, a watch tower with <b>P=0</b> means a free watch tower. The <b>(i+1<span class=GramE>)<span class=SpellE><sup>th</sup></span></span></b> line corresponds to watch tower number <span class=SpellE><b>i</b></span><b> (1 &#8804; <span class=SpellE>i</span> &#8804; N)</b>. Two watch towers will never be placed in the same location. </span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>The next line contains three integers <b>a, b (1 &#8804; <span class=SpellE>a<span class=GramE>,b</span></span> &#8804; N, a!=b)</b> and <b>R (1&#8804;R&#8804;10000)</b>, here <b>a</b> and <b>b</b> are the IDs of two free towers to draw the separation line through and meaning of <b>R</b> is given in the problem statement. There will be at least two free towers in the field. There will be no gun towers on the separation line.</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>The end of input is denoted by a case with <b>N = 0</b>. This case should not be processed.</span></p><p class=MsoNormal><b>&nbsp;</b></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Output</span></span></h5><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:10.0pt;font-family:Verdana'>For each test case, print a line in this format, <b>Case X: Y</b>, where <b>X</b> is the case number and <b>Y</b> is the maximum possible number of fight the smaller group can win.</span></p><p class=MsoNormal>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=638 style='width:6.65in;background:#CCCCCC;border-collapse:collapse;mso-padding-alt:
 0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:45.2pt'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:45.2pt'><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><a name="DDE_LINK"></a><a name="DDE_LINK1"></a><span style='mso-bookmark:
  DDE_LINK'><span style='font-size:11.0pt;font-family:"Courier New"'>7</span></span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 <span class=SpellE>3</span></span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 2</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 0</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>4 <span class=SpellE>4</span> <span class=SpellE>4</span></span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>7 4 0</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>6 2 1</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>7 3 6</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 5 50</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>7</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 1</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 4</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 0</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>4 <span class=SpellE>4</span> 2</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>5 3 0</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>6 2 5</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>7 3 6</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>3 5 50</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>0</span></p></td><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt;height:45.2pt'><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 2</span></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt;layout-grid-mode:
  char'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 0</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Problem setter: Mohammad <span class=SpellE>Mahmudur</span> <span class=SpellE><span class=GramE>Rahman</span></span><span class=GramE> ,</span> Special Thanks: <span class=SpellE>Sohel</span> Hafiz, <span class=SpellE>Rujia</span> Liu<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p></div></body></html>
______________________________________________________
4408||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="f_files/filelist.xml"><link rel=Edit-Time-Data href="f_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem F - Unlock the Lock</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:234055722;
	mso-list-template-ids:-504872004;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1028" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:190.5pt;height:151.5pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/f_files/image017.jpg/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=254 height=202 src="http://livearchive.onlinejudge.org/external/44/f_files/image017.jpg align=left hspace=12 v:shapes="_x0000_s1028"><![endif]><span style='font-size:10.0pt;font-family:Verdana'>Mr. Ferdaus has created a special type of 4-digit lock named FeruLock shown in the picture on the left. It always shows a <b>4</b>-digit value and has a specific unlock code (An integer value). The lock is unlocked only when the unlock code is displayed. This unlock code can be made to appear quickly with the help of some of the special buttons available with that lock. Each button has a number associated with it. When any of these buttons is pressed, the number associated with that button is added with the displayed value and so a new number is displayed. The lock always uses least significant <b>4</b> digits after addition. After creating such a lock, he has found that, it is also very difficult for him to unlock the Ferulock.&nbsp; As a very good friend of Ferdaus, your task is to create a program that will help him to unlock the Ferulock by pressing these buttons minimum number of times. </span></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>&nbsp;</span></span></h5><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>There will be at most <b>100</b> test cases. For each test case, there will be <b>3</b> numbers: <b>L, U</b> and <b>R</b> where <b>L (0000 &#8804; L &#8804; 9999)</b> represents the current lock code, <b>U (0000 &#8804; U &#8804; 9999)</b> represents the unlock code and <b>R (1 &#8804; R &#8804; 10)</b> represents the number of available buttons. After that, there are <b>R</b> numbers <b>(0&#8804; RV<sub>i</sub> &#8804;9999)</b> in a line representing the value of buttons. The values of <b>L, U, <span class=GramE>RV<sub>i</sub></span></b> will always be denoted by a four digit number (even if it is by padding with leading zeroes). Input will be terminated when <b>L = U = R = 0</b>.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case, there will be one line of output which represents the serial of output followed by the minimum number of button press required to unlock the lock. If it is not possible to unlock the lock, then print a line <b>Permanently Locked</b> instead (without quotes).</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0000 9999 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1000</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0000 9999 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0001</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>5234 1212 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1023 0101 0001</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 0 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=324 valign=top style='width:243.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: Permanently Locked</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 9999</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: 48</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Syed Monowar Hossain, Special Thanks: Shahriar Manzoor, Sohel Hafiz</span></p><p class=MsoNormal align=center style='text-align:center'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4409||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="g_files/filelist.xml"><link rel=Edit-Time-Data href="g_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem G - Ironman Race in Treeland</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1862237376;
	mso-list-template-ids:884525848;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>In Treeland, towns are connected as a tree, by two-way roads. That means, between each pair of different towns <b>u</b> and <b>v</b>, there is exactly one way to travel from <b>u</b> to <b>v</b> (and vice versa), if you don't travel along a road twice.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The King of Treeland is a sports fan. He wants to hold an Ironman Race. The race track will be the unique simple path between two towns. During the race, civil vehicles <b>cannot</b> travel along roads which are part of the track. This definitely damages Treeland's economy. Precisely, every road is assigned to an estimate of damage value. The King does not want his Ironman Race to do too much damage, so the total damage value of the race should not exceed some predefined value, <b>m</b>. But recall that the King is a sports fan. In order to make the race as exciting as possible, the total length of the track should be maximized without exceeding the damage value.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=674 valign=top style='width:505.45pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'><img width=658 height=273 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4409.jpg></span></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=674 valign=top style='width:505.45pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
  font-family:Verdana'>Figure: Figure A corresponds to first sample input and figure B corresponds to second sample input. The race track is marked with pink color. The track and place not included in the race track is colored black.</span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Write a program to compute the maximal total length of the track, under the condition that the total damage does not exceed <b>m</b>.</span></p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>Input</span></b></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first line of input contains one integer <b>T</b> (1 &#8804; <b>T</b> &#8804; 10), the number of cases followed. Each case begins with two integers <b>n</b> and <b>m</b> (1 &#8804; <b>n</b> &#8804; 30000, 1 &#8804; <b>m</b> &#8804; 100000000), the number of towns and the maximal damage. In the next <b>n</b>-1 lines, each line describes a road by four integers <b>a</b>, <b>b</b>, <b>D</b>, <b>L</b>, that means town <b>a</b> and town <b>b</b> are connected by a road with damage <b>D</b> and length <span class=GramE><b>L </b>&nbsp;(</span>1 &#8804; <b>a</b>, <b>b</b> &#8804; <b>n</b>, 1 &#8804; <b>D</b>, <b>L</b> &#8804; 1000). It is guaranteed that the towns will be connected as a tree and there will be no such input for which a race track cannot be formed.</span></p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>&nbsp;</span></b></p><p class=MsoNormal><b><span style='font-size:16.0pt;font-family:Arial'>Output</span></b></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each case, print the case number and the maximal length. Look at the output for sample input for details.</span></p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.95pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 1 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 3 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 4 2 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 1 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 3 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 4 2 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=341 valign=top style='width:256.1pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 5</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Rujia Liu, Special Thanks: Derek Kisman</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4410||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="h_files/filelist.xml"><link rel=Edit-Time-Data href="h_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem H - Shooting the Monster</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1722291103;
	mso-list-template-ids:-567007956;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>In a Video game, you want to shoot a projectile towards a monster. The monster is a polygon in the right half (i.e. positive <b><i>x</i></b>) of the screen. He's too big to be able to move. Your projectile will also be a polygon which flies <i>horizontally</i> from the left half of the screen to the right boundary of the screen, at a <i>constant</i> speed <b><i>v</i></b> = 1. The projectile will not stop until its leftmost point hits the right boundary of the screen (i.e. it goes <i>through</i> the monster completely). See Fig 1. <span class=GramE>for</span> an example screen. Note that even though the projectile goes through it, the monster never moves, and it will never change its shape.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=337 valign=top style='width:252.7pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'><img width=322 height=237 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4410a.jpg></span></p></td><td width=337 valign=top style='width:252.75pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'><img width=289 height=233 id="_x0000_i1027" src="http://livearchive.onlinejudge.org/external/44/p4410a.jpg></span></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=674 colspan=2 valign=top style='width:505.45pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:9.0pt;font-family:Verdana'>Fig 1. In a video game, you shoot a projectile (green) towards a monster (red). The left picture corresponds to the initial situation (t=0), the right picture corresponding to the situation when t=3. The intersection area is in yellow.</span></p></td></tr></table><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 align=left style='border-collapse:collapse;mso-table-lspace:9.0pt;margin-left:6.75pt;
 mso-table-rspace:9.0pt;margin-right:6.75pt;mso-table-anchor-vertical:paragraph;
 mso-table-anchor-horizontal:column;mso-table-left:left;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=331 valign=top style='width:3.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-element:frame;mso-element-frame-hspace:9.0pt;
  mso-element-wrap:around;mso-element-anchor-vertical:paragraph;mso-element-anchor-horizontal:
  column;mso-height-rule:exactly'><img width=305 height=203 id="_x0000_i1028" src="http://livearchive.onlinejudge.org/external/44/p4410a.jpg></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=331 valign=top style='width:3.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal align=center style='text-align:center;mso-element:frame;
  mso-element-frame-hspace:9.0pt;mso-element-wrap:around;mso-element-anchor-vertical:
  paragraph;mso-element-anchor-horizontal:column;mso-height-rule:exactly'><b><span style='font-size:10.0pt;font-family:Verdana'>Fig 2. The change of intersection area</span></b></p><p class=MsoNormal style='mso-element:frame;mso-element-frame-hspace:9.0pt;
  mso-element-wrap:around;mso-element-anchor-vertical:paragraph;mso-element-anchor-horizontal:
  column;mso-height-rule:exactly'><span style='font-size:10.0pt;font-family:
  Verdana'>&nbsp;</span></p></td></tr></table><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The video game is highly realistic, so the damage you do to the monster is exactly the integral of the intersection area of your projectile and the monster, over time. Formally, the damage D is computed as follows:</span></p><p class=MsoNormal align=center style='text-align:center'><sub><span style='font-size:10.0pt;font-family:Verdana'><img width=111 height=35 id="_x0000_i1029" src="http://livearchive.onlinejudge.org/external/44/p4410a.jpg></span></sub></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Where <span class=GramE><i>area</i>(</span><i>t</i>) is the intersection area at time <i>t</i>. In the right picture in Fig 1, you can see <span class=GramE><i>area</i>(</span>3) = 1, which is the area of the yellow triangle.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For the scenario in Fig 1, we can see how <span class=GramE><i>area</i>(</span><i>t</i>) changes over time in Fig 2 (we can examine area(3) = 1). By the definition of integral, D is exactly the area below the curve, i.e. the blue area in Fig 2. </span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Your task is to compute the damage, given the information of the projectile and the monster.</span></p><p class=MsoNormal>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>The first line contains <span class=GramE><b>T(</b></span><b>1 &#8804; T &#8804; 25)</b>, the number of test cases. Each test case contains the description of the monster, then the projectile, in the same format. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Each polygon begins with a line containing an integer <b>n (3 &#8804; n &#8804; 50)</b>, the number of vertices. Then <b>n</b> lines <span class=GramE>followed,</span> the coordinates of the vertices, in counterclockwise order. The middle line of the screen is <b>x </b>= 0, the left and right boundaries are <b>x = -500</b> and <b>x = 500</b>, respectively.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For the first polygon (monster), all <b>x</b> coordinates satisfy <b>0 &lt; x &lt; 500</b>, while for the second polygon (projectile), all <b>x</b> coordinates satisfy <b>-500 &lt; x &lt; 0</b>. All <b>y</b> coordinates satisfy <b>-500 &lt; y &lt; 500</b>. All coordinates are integers.</span></p><p class=MsoBodyText2>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output</span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case, print the case number and the damage to the monster, to six decimal places. Look at the output for sample input for details.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>4</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>4</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-1 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-1 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-3 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-3 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>4</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-1 0</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-3 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-3 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3 0</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>1 -1</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-1 0</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>-3 1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-family:"Courier New"'>-3 -1</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-family:"Courier New"'>Case 1: 8.000000</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>Case 2: 4.000000</span></p><p class=MsoNormal><span style='font-family:"Courier New"'>Case 3: 2.666667</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Rujia Liu, Special Thanks: Mahmudur Rahman</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4411||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="i_files/filelist.xml"><link rel=Edit-Time-Data href="i_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem I - Addition-Subtraction Game</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place" downloadurl="http://www.5iantlavalamp.com/"/><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1878659206;
	mso-list-template-ids:1327114880;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>You and your friend are playing a <b>2</b> player game. The game is played in a graph of <b>V</b> vertices. The vertices are numbered from <b>0</b> to <b>V-1</b>. The graph has some directed edges. But the graph does not contain any cycles or loops. The rule of the game is as follows.</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>1.</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>Initially vertex <b>i</b> has a positive value <b>value<sub>i</sub></b></span></p><p class=listparagraphcxspmiddle style='text-align:justify;text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>2.</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>Both players make their moves by turns. In his turn the player chooses a vertex with the following properties.</span></p><p class=listparagraphcxspmiddle style='margin-left:1.0in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=GramE><span style='font-size:10.0pt;line-height:115%;
font-family:Verdana'>The</span></span><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'> value of the vertex is strictly positive.</span></p><p class=listparagraphcxsplast style='margin-left:1.0in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class=GramE><span style='font-size:10.0pt;line-height:115%;
font-family:Verdana'>The</span></span><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'> vertex has one or more outgoing edges.</span></p><p class=MsoNormal style='margin-left:.5in;text-align:justify'><span style='font-size:10.0pt;font-family:Verdana'>If there is no such vertex the player loses and the game terminates.</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>3.</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1029" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:197.25pt;height:156pt;
 z-index:1;mso-position-horizontal:left;mso-position-horizontal-relative:text;
 mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/i_files/image023.jpg/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=263 height=208 src="http://livearchive.onlinejudge.org/external/44/i_files/image023.jpg align=left hspace=12 v:shapes="_x0000_s1029"><![endif]><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>If the player can select a vertex the player will decrease the value of the selected vertex <b>i</b> by <b>1</b>. Then from the set of vertices which have an incoming edge from vertex <b>i,</b> the player will select <b>K<sub>i</sub></b> (this value will be given as input) vertices and increase the value of those vertices by <b>1</b>.&nbsp; Among these selected <b>K<sub>i</sub></b> vertices there can be duplicated vertices. And if a vertex is selected <b>n</b> times its value will be increased by <b>1</b> every time. Or in another word its value will be increased by <b>n</b>. For example if the <b>K<sub>i</sub>=6</b> and the selected vertex set is <b>{2,2,2,3,3,5}</b> then <b>value<sub>2</sub></b> will be increased by <b>3</b>, <b>value<sub>3</sub></b> will be <span class=GramE>increased</span> by <b>2</b> and <b>value<sub>5</sub></b> will be increased by <b>1</b>.</span></p><p class=MsoNormal style='margin-left:.25in;text-align:justify'><span style='font-size:10.0pt;font-family:Verdana'>Now consider the graph on the right.</span></p><p class=MsoNormal style='margin-left:.25in'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='margin-left:.25in'><span style='font-size:10.0pt;
font-family:Verdana'>Let the values of <b>K</b> be <b>{2<span class=GramE>,1,3,2</span>}</b>.</span></p><p class=MsoNormal style='margin-left:.25in'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='margin-left:.25in'><span style='font-size:10.0pt;
font-family:Verdana'>Now the value set <b>{0<span class=GramE>,0,0,5</span>}</b> is a losing terminating position because the player cannot select any vertex which have outgoing edges and positive values.</span></p><p class=MsoNormal style='margin-left:.25in'><span style='font-size:10.0pt;
font-family:Verdana'>For the value set <b>{3<span class=GramE>,4,5,6</span>}</b> the current player can go to the following value states by <b>1</b> move.</span></p><p class=listparagraph style='margin-left:.75in;text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{2<span class=GramE>,5,6,6</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>0</b>, decrease its value by <b>1</b>. And increase both of <b>1</b> and <b>2</b> by <b>1</b>. Here <b>K<sub>0</sub>=2</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{2<span class=GramE>,6,5,6</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>0</b>, decrease its value by <b>1</b> and increase its adjacent <b>1</b> by <b>2</b>. Here <b>K<sub>0</sub>=2</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{2<span class=GramE>,4,7,6</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>0</b>, decrease its value by <b>1</b> and increase its adjacent<b> 2</b> by <b>2</b>. Here <b>K<sub>0</sub>=2</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{3<span class=GramE>,3,5,7</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>1</b>, decrease its value by <b>1</b> and increase its adjacent <b>3</b> by <b>1</b>. Here <b>K<sub>1</sub>=1</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{3<span class=GramE>,7,4,6</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>2</b>, decrease its value by <b>1</b> and increase its adjacent <b>1</b> by <b>3</b>. Here <st1:place w:st="on"><b>K<sub>2</sub></b></st1:place><b>=3</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{3<span class=GramE>,5,4,8</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>2</b>, decrease its value by <b>1</b> and increase its adjacent <b>1</b> by <b>1</b> and <b>3</b> by <b>2</b>. Here <st1:place w:st="on"><b>K<sub>2</sub></b></st1:place><b>=3</b>.</span></p><p class=listparagraphcxspmiddle style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{3<span class=GramE>,6,4,7</span>}</span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'>  select the vertex <b>2</b>, decrease its value by <b>1</b> and increase its adjacent <b>1</b> by <b>2</b> and <b>3</b> by <b>1</b>. Here <st1:place w:st="on"><b>K<sub>2</sub></b></st1:place><b>=3</b>.</span></p><p class=listparagraphcxsplast style='margin-left:.75in;text-align:justify;
text-indent:-.25in'><span style='font-size:10.0pt;line-height:115%;font-family:
Symbol'>·</span><span style='font-size:7.0pt;line-height:115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><b><span style='font-size:10.0pt;line-height:115%;font-family:Verdana'>{3<span class=GramE>,4,4,9</span>} </span></b><span style='font-size:10.0pt;line-height:
115%;font-family:Verdana'> select the vertex 2, decrease its value by 1 and increase its adjacent 3 by 3. Here <st1:place w:st="on"><b>K<sub>2</sub></b></st1:place><b>=3</b>.</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Now given the graph and initial values of each of the vertices your task is to determine if the first player wins or loses given that both players play perfectly.</span></p><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>Input contains multiple <span class=GramE>number</span> of test cases. First line contains <span class=GramE><b>T(</b></span><b>1 &#8804; T &#8804; 20)</b> the number of test cases. Each test case starts with a line <span class=GramE><b>V(</b></span><b>2 &#8804; V &#8804; 100)</b> and <b>E(2 &#8804; E &#8804; 1500)</b>. <b>V</b> is the number of vertices and <b>E</b> is the number of edges. Each of the next <b>E</b> lines contains <b>2</b> integers <span class=GramE><b>FROM(</b></span><b>0 &#8804; FROM &lt; V)</b> and <b>TO(0 &#8804; TO &lt; V)</b> denoting that there is a directed edge from <b>FROM</b> to <b>TO</b>. <span class=GramE><b>FROM</b> and <b>TO</b> will not be equal.</span><b> Also each vertex will have at most 15 outgoing edges</b>.&nbsp; Next line contains <b>V</b> integers <b>K<sub>0</sub>, K<sub>1</sub><span class=GramE>,</span> <span class=GramE>K<sub>V-1</sub><span style='font-weight:normal'>.</span></span></b> Each of the value of <b>K</b> is between <b>1</b> and <b>100</b> inclusive. Next line contains <span class=GramE><b>R(</b></span><b>1 &#8804; R &#8804; 100)</b> the number of rounds. There will be <b>R</b> round of game with this graph. Each of the next <b>R</b> lines contains the description of each round. Each round consists of <b>V</b> integers <b>Value<sub>0</sub> Value<sub>1</sub> Value<sub>V-1</sub></b> denoting the initial value of each vertex. Each of these <b>Value<sub>i</sub></b> will be between <b>1</b> and <b>100</b> inclusive.</span></p><p class=MsoNormal><b>&nbsp;</b></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Output</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each test case output consist of <b>R+1</b> <span class=GramE>lines</span>. First line is <b>Game#i:</b> where <b>i</b> <span class=GramE>is</span> the game number. Game number starts from <b>1</b>. Each of the next <b>R</b> lines contains <b>Round#j: RESULT</b><span class=GramE>&nbsp; where</span> <b>j</b> is the number of round. <b>RESULT</b> is either <b>WINNING</b> when the initial values of this round is a winning position for the first player or <b>LOSING</b> when the initial values of this round is a losing position for the first player. We will assume that both players play perfectly. Print a blank line after the output of each test case. See the output for sample input for more clarification. </span></p><p class=MsoNormal>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 </span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>5</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3 0 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>5 0 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 1 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 2 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>5</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 0 0 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 0 0 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 0 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 0 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 0 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=355 valign=top style='width:266.05pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Game#1:</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#1: LOSING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#2: WINNING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#3: WINNING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#4: WINNING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#5: LOSING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Game#2:</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#1: LOSING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#2: LOSING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#3: WINNING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#4: WINNING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Round#5: LOSING</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Abdullah al Mahmud, Special Thanks: Rujia Liu</span></p></div></body></html>
______________________________________________________
4412||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="j_files/filelist.xml"><link rel=Edit-Time-Data href="j_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem J - The Great Game</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1306665347;
	mso-list-template-ids:-1499708424;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>Tic-<span class=SpellE>Tac</span>-Toe, <span class=SpellE>Awari</span>, <span class=SpellE>Gomoku</span>, Connect Four, Checkers... the list of games that computers have solved perfectly is ever-increasing.&nbsp; And yet, the most popular game of all remains shrouded in mystery.&nbsp; From the vast libraries of openings to the crucial final moves, nobody has come close to encoding the complex strategy required to master this ever-changing game.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1030" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:226.5pt;height:181.5pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/j_files/image024.jpg/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=302 height=242 src="http://livearchive.onlinejudge.org/external/44/j_files/image024.jpg align=left hspace=12 v:shapes="_x0000_s1030"><![endif]><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>I refer, of course, to Rock, Paper, <span class=GramE>Scissors</span> - the game that has been responsible for millions of critical decisions over the course of humankind's existence!&nbsp; From the aggressive yet vulnerable &quot;Avalanche&quot; (three Rocks in a row) to the cautious but flexible &quot;Crescendo&quot; (Paper, Scissors, Rock), the sheer variety of viable strategies in Rock, Paper, Scissors is truly breathtaking.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>Asking you to SOLVE the generalized form of this hallowed game would, of course, be ridiculous; thousands have been driven mad in the attempt.&nbsp; Nay, such is not your task.&nbsp; You must merely figure out how to defeat a single known opponent in fair Rock-to-Paper-to-Scissors combat.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>The tournament you will compete in is similar to a Tennis match.&nbsp; It is divided into sets, which are themselves divided into <b>G</b> individual games.&nbsp; Each game consists of one throw of Rock, Paper, <span class=GramE>Scissors</span>.&nbsp; You and your opponent simultaneously pick one of Rock, <span class=GramE>Paper,</span> or Scissors.&nbsp; Rock beats Scissors, Scissors beats Paper, and Paper beats Rock.&nbsp; The winner gains one point; if you both pick the same thing, nobody gains a point.&nbsp; Whoever has more points after the <b>G</b> games wins the set.&nbsp; (Sets may also end in draws.)&nbsp; You will lose the tournament if, at any time, your opponent has won <b>L</b> more sets than you. Similarly, you will win if, at any time, you have won <b>W</b> more sets than your opponent.&nbsp; <b>L</b> may be different from <b>W</b>; this is not necessarily a fair contest!</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>Your opponent's strategy is simple: for each of the <b>G</b> games in a set, he has a fixed probability of choosing Rock, Paper, or Scissors.&nbsp; For instance, his strategy might be: for game <b>1</b>, pick Rock <b>50%</b> of the time and Paper <b>50%</b> of the time; for game <b>2</b>, always pick Scissors.&nbsp; Figure out your odds of winning the tournament if you play as well as you possibly can.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>Input will be at most <b>40</b> test cases.&nbsp; Each case starts with a line containing three positive integers: <b>G</b>, <b>W</b>, and <b>L</b> satisfying <b>1</b> &#8804; <b>G</b> &#8804; <b>1000</b>, <b>1 &#8804; W, L &#8804; 100</b>.&nbsp; The next <b>G</b> lines contain three integers between <b>0</b> and <b>100</b> inclusive, giving the percent probability of your opponent choosing Rock, Paper, or Scissors in that game of each set.&nbsp; The three integers will always sum to <b>100</b>.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>Input is terminated by a line containing three zeros.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h4 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:10.0pt;font-family:Verdana;color:windowtext'>For each case, output your chance of best possible odds of winning the tournament, formatted as a percentage and rounded to three fractional digits.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>2 1 <span class=SpellE>1</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>50 <span class=SpellE>50</span> 0</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>0 <span class=SpellE>0</span> 100</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>1 2 1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>20 <span class=SpellE>20</span> 60</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>0 <span class=SpellE>0</span> <span class=SpellE>0</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=324 valign=top style='width:243.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>100.000%</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>69.231%</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Derek <span class=SpellE>Kisman</span>, Special Thanks: <span class=SpellE>Rujia</span> Liu</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p></div></body></html>
______________________________________________________
4413||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="k_files/filelist.xml"><link rel=Edit-Time-Data href="k_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem K - Triangle Hazard</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.mathematicaformatstandardform
	{mso-style-name:mathematicaformatstandardform;
	font-family:Courier;
	mso-ascii-font-family:Courier;
	mso-hansi-font-family:Courier;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in .5in .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:225067691;
	mso-list-template-ids:-587686254;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>In the picture below you can see a triangle <b>ABC</b>. Point <b>D</b>, <b>E</b> and <b>F</b> divides the sides <b>BC</b>, <b>CA</b> and <b>AB</b> into <b>m<sub>1</sub>:m<sub>2</sub></b>, <b>m<sub>3</sub>:m<sub>4</sub></b> and <b>m<sub>5</sub>:m<sub>6</sub></b> ratios respectively. <b>A, D</b>; <b>B, E</b> and <b>C, F</b> are connected. <b>AD</b> and <b>BE</b> intersects at <b>P</b>, <b>BE</b> and <b>CF</b> intersects at <b>Q</b> and <b>CF</b> and <b>AD</b> intersects at <b>R</b>.</span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:10.0pt;font-family:Verdana'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <img width=417 height=293 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/p4413.jpg></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>So now a new triangle <b>PQR</b> is formed. Given triangle <b>ABC</b> it is very easy to find triangle <b>PQR</b>, but given triangle <b>PQR</b> it is not straight forward to find <b>ABC</b>. Your task is now to do that.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>First line of the input file contains an integer <b>N (0 &lt; N &lt; 25001)</b> which denotes how many sets of inputs are there. Input for each set contains six floating-point number <b>P<sub>x</sub>, P<sub>y</sub>, Q<sub>x</sub>, Q<sub>y</sub>, R<sub>x</sub>, R<sub>y</sub></b>. <b>(0 &#8804; P<sub>x</sub>, P<sub>y</sub>, Q<sub>x</sub>, Q<sub>y</sub>, R<sub>x</sub>, R<sub>y</sub> &#8804; 10000)</b> in one line and six positive integers <b>m<sub>1</sub>, m<sub>2</sub>, m<sub>3</sub>, m<sub>4</sub>, m<sub>5</sub>, m<sub>6</sub> (m<sub>1</sub>&lt;m<sub>2</sub>, m<sub>3</sub>&lt;m<sub>4</sub> </b>and<b> m<sub>5</sub>&lt;m<sub>6</sub>)</b> in another line. These six numbers denote that the coordinate of points <b>P, Q</b> and <b>R</b> are <b>(P<sub>x</sub>, P<sub>y</sub>), (Q<sub>x</sub>, Q<sub>y</sub>)</b> and <b>(R<sub>x</sub><span class=GramE>,R<sub>y</sub></span>)</b> respectively. <b>P, Q</b> and <b>R</b> will never be collinear and will be distinct and there will always be a triangle <b>ABC</b> for the given input triangle <b>PQR</b>. Also note that <b>P</b>, <b>Q</b> and <b>R</b> will be given in counter clockwise order in the input.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>For each line of input produce one line of output. This line contains six floating-point numbers. These six integers denote the coordinates of <b>A, B</b> and <b>C</b>. That is the first two integers denote the coordinate of <b>A</b>, the third and fourth integers denote the coordinate of <b>B</b> and fifth and sixth integers denotes the coordinate of <b>C</b>. <b>A, B</b> and <b>C</b> will appear counter clockwise order. All the output numbers should have eight digits after the decimal point.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=631 valign=top style='width:473.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>3</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>4467.61586728 8492.59551366 7060.96479020 6775.46633005 6725.89311907 9028.87449315</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>11 56 38 97 49 60</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>5779.32806104 1918.19337634 7490.69623286 4845.34535926 6419.53729066 4864.56878239</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>18 80 56 87 58 59</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>8991.93033007 6724.32910758 7219.48100000 7527.95330769 8549.92222645 3068.19948096</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>13 86 11 44 20 35</span></b></p></td></tr></table><h1 align=left style='text-align:left'><span style='font-style:normal'>&nbsp;</span></h1><b><span style='font-size:16.0pt;font-family:Arial;mso-fareast-font-family:
"Times New Roman";mso-bidi-font-family:"Times New Roman";color:black;
mso-font-kerning:18.0pt;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:#0845'><br clear=all style='page-break-before:always'></span></b><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=631 valign=top style='width:473.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>9231.81800000 9623.96300000 3537.20000000 9108.65000000 7337.89000000 4913.10199999</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>7424.76700001 9490.84399999 4757.24799999 170.01100001 9262.77299999 4813.54299999</span></b></p><p class=MsoNormal><b><span style='font-size:9.0pt;font-family:"Courier New"'>8242.99300000 529.39300000 9373.35300000 6551.39300000 6655.90700000 9417.10200000</span></b></p></td></tr></table><div class=MsoNormal align=center style='text-align:center'><hr size=2 width="100%" align=center></div><p class=MsoNormal><span style='font-size:10.0pt;font-family:Verdana'>Problem setter: Shahriar Manzoor, Special Thanks: Rujia Liu</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal>&nbsp;</p></div></body></html>
______________________________________________________
4414||||||false||||||
<P>Apple trees in a garden form a rectangular grid. A group of monkeys lives on these trees. Not more than one monkey lives in each tree. A monkey feels happy to believe that it is the lord of all apple trees it views from the top of the tree it lives in. However, as the trees are of different heights a monkey can view trees that are not obstructed from its view by other trees. A monkey that views the maximum number <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> of trees is a lord of lords. The undisputed monarch is the lord of lords that lives in the highest tree. In case two or more lord of lords have the claim to be the monarch then monarchy is disputed.<P>Assume that the ground of the garden is plane; vertical straight lines represent trees; trees are at a distance of unity row-wise or column-wise; and the height of each tree is an integer in the unit of the distance. A tree of height zero in a position indicates absence of a tree on that position. Visibility of a tree R from the top of a tree P depends on heights and locations of P, R and other trees. A tree R is invisible from the top of a tree P if and only if there exists a visible tree Q that lies on the vertical plane containing P and R and is located between P and R so that the top of R is either on or below, the line joining tops of P and Q.<P>Write a program to locate the undisputed monarch, given heights of all trees.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case, the first line gives two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> representing respectively the total number of rows and columns of trees in the garden. Each of the next <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers representing heights of trees in a row. The <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th integer in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row represents the height of the tree in <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th column of the garden. Assume that the garden contains no more than 200 trees.<P>The input terminates with an input 0 as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output three integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> in one line. Integers <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> represent the location of the undisputed monarch, where <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> is the row number and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> is the column number of the tree on which the monarch lives. In case monarchy is disputed, both <SPAN CLASS="MATH"><I>r</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> are zero. The integer <SPAN CLASS="MATH"><I>T</I></SPAN> <tex2html_verbatim_mark> represents the total number of trees visible to a lord of lords.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 3 
1 2 3 
4 5 6 
7 0 9 
3 4 
4 4 4 4 
4 4 4 4 
4 4 4 4 
1 10 
5 3 2 1 6 4 2 8 7 1 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2 7 
0 0 10 
1 5 6
</PRE><P>
______________________________________________________
4415||||||false||||||
<P>Bio-HRQ-Comparator is a fully automatic computer based neurological scanning system that scans brains of three persons simultaneously and ranks them 1, 2, 3 with respect to their HRQ (Human Resource Quotient) for a given activity. Bio-HRQ-Comparator has three specially designed chairs each fitted with brain scanning devise. Exactly three persons are to sit on the chairs and just think independently and simultaneously on the best possible solution of a given problem related to an activity for which HRQ is tested. The thinking process continues for a specified duration of time that is dependent on the complexity of the given problem. Bio-HRQ-Comparator captures the thinking process and ranks them with respect to their HRQ without any further scrutiny. Through rigorous testing and analysis, ranking by BioHRQ-comparator has been found to be so precise that no two ranked persons are identified to have different rank order or found to have the same HRQ.<P>The system has the potential to replace the traditional method of selection of candidates through interview, where the basic problem is to arrive at total ordering and ranking of a given set of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (assume <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4415img1.png ALT="$ \le$">20</SPAN> <tex2html_verbatim_mark>) candidates with respect to their HRQ for a specific job. It is proposed to select arbitrarily <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> sets of three candidates each and rank candidates in each set using Bio-HRQ-comparator hoping that total ordering and ranking of candidates can be done successfully. However it is not always possible to arrive at total ordering and ranking of all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> candidates using arbitrarily selected <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> sets of candidates.<P>You are required to write a program that either ranks all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> candidates, if possible, using the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> results obtained so far or determines the minimum number <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> of additional BioHRQ-comparator testing required for determining the total ordering and ranking of all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> candidates. In case <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> additional testing are required, the program should identify <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> sets of three candidates each, for additional Bio-HRQ-comparator testing. Assume for simplicity that a candidate is not required to appear more than twice for additional testing.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. Each test case contains two lines.<P>The 1-st line gives <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and a string of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> letters. Each letter in the string identifies a candidate and letters appear in an arbitrary order.<P>The 2-nd line gives <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> results of Bio-HRQ-comparator testing. The first field is the integer <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> and it is followed by <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> strings of three letters each representing <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> results. The three letters in a string appear in order of ranks 1, 2 and 3 of candidates represented by the letters.<P>Input terminates with a line that contains `<TT>0</TT>' (zero) as the first and the only character.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print output in one line.<P>The first field in the line gives the integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. If <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is equal to <TT>0</TT> then a string of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> letters follows it; the string represents the total rank order of all <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> candidates.<P>Otherwise <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> strings each of length three follow the integer <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. Each string contains either three letters or two letters followed by an asterisk (<TT>*</TT>). Each letter identifies a specified candidate while an asterisk represents an option to have any candidate. Letters in a string appear in alphabetic order and strings appear in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 axdpf 
3 adf xdp axp 
5 xapfd 
3 afd xdp axf 
7 adgbnem 
4 aem egn dgm emb 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 fp* 
0 axfdp 
2 ade bmn
</PRE><P>
______________________________________________________
4416||||||false||||||
<P>Chain shopping is a new scheme introduced at a Mall to promote sale. Mall offers normal discount on every item. Under the scheme a customer makes a list of distinct items to be purchased. The list is called a purchase chain. For the <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark>-th item in the chain Mall offers <SPAN CLASS="MATH"><I>k</I></SPAN> <tex2html_verbatim_mark> times the normal discount. This policy attracts customers to form long judicious chains. Assume that an item under sale is identified by an integer <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> and normal discount <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> offered for an item is an amount in whole number.<P>Chain shopping is permitted under certain conditions. Any one of the available items may be included as the first item in the purchase chain. However for any other item in the purchase chain option is dependent on the previous selection. For each item <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> Mall displays prominently a list <SPAN CLASS="MATH"><I>P</I>(<I>ID</I>)</SPAN> <tex2html_verbatim_mark> of next potential items. If <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> is in the chain then the next item could only be any one of the items listed in <SPAN CLASS="MATH"><I>P</I>(<I>ID</I>)</SPAN> <tex2html_verbatim_mark>. For example if Mall has four items with <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> 24 29 61 81 and next potential items <SPAN CLASS="MATH"><I>P</I>(24)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I>(29)</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>P</I>(61)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>P</I>(81)</SPAN> <tex2html_verbatim_mark> are respectively 24: 29 61 29: 24 61 81 61: 24 81 29 81: 24 61 then the chain of three items 61 81 24 is valid while the chain 61 24 81 is invalid.<P>Write a program to print purchase chain(s) of specified length <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>, for which the total discount <SPAN CLASS="MATH"><I>MD</I></SPAN> <tex2html_verbatim_mark> is maximum, given <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> for each item under sale and all lists of next potential items.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains multiple test cases. Each case contains three lines.<P>The 1-st line gives an integer specifying <SPAN CLASS="MATH"><I>L</I></SPAN> <tex2html_verbatim_mark>.<P>The 2-nd line gives a certain number (assume 20 or less) of pairs of integers in an arbitrary order. Each pair represents <SPAN CLASS="MATH"><I>ID</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>D</I></SPAN> <tex2html_verbatim_mark> in order, for an item under sale.<P>The 3-rd line gives all lists of potential items in the form of a string of integers, space and colon (<TT>:</TT>). An integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> followed by colon identifies the beginning of a list. Integers separated by space that follow colon, identify items in the list. Either the end of the line or the beginning of another list indicates the end of a list.<P>Input terminates with an input `<TT>0</TT>' as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case the 1-st line contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>MD</I></SPAN> <tex2html_verbatim_mark>. Integer <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> is the total number of purchase chains for each one of which the total discount is <SPAN CLASS="MATH"><I>MD</I></SPAN> <tex2html_verbatim_mark>. Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> lines contains one chain and chains appear in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
24 30 81 20 29 40 61 50 
24: 81 29 81: 24 29 61 29: 81 61: 81 24 
4 
24 20 29 15 61 10 81 5 
24: 29 61 29: 24 61 81 61: 24 81 29 81: 24 61 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 230 
29 81 61 
61 24 29 
1 150 
81 61 29 24
</PRE><P>
______________________________________________________
4417||||||false||||||
<P>Development of unused land is an essential first step for creation of infrastructure. An entrepreneur ventures into a project for creation of a state-of-the-art health-care centre in a city. Government is prepared to allocate under certain conditions, a part of an unused block of land for the project. The block exists in the form of an <SPAN CLASS="MATH"><I>M</I>&#215;<I>N</I></SPAN> <tex2html_verbatim_mark> grid of square plots each of unit area. The entrepreneur has estimated for each plot, the cost of development in certain unit and rounded it to an integer. He requires for the project, a total number of <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> connected plots. However he is allowed to select only a rectangular/ square block of plots so that at least one side of the selected block either coincides with or is a part of a side of the existing block. In addition, on removal of the selected block, plots in the existing block should remain connected.<P>Given the cost of development for each plot in the grid and the total number <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> of plots to be selected, write a program to select all feasible blocks (say <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> in number), for each one of which the total cost of development <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> is the least.<P>Tables below illustrate the selection of all 3 feasible blocks <SPAN CLASS="MATH">(<I>b</I> = 3)</SPAN> <tex2html_verbatim_mark>, each containing 4 plots <SPAN CLASS="MATH">(<I>K</I> = 4)</SPAN> <tex2html_verbatim_mark> with least total cost of development <SPAN CLASS="MATH">(<I>C</I> = 47)</SPAN> <tex2html_verbatim_mark>. Integers on the grid represent cost of development of plots and shaded plots identify selected blocks.<P><DIV ALIGN="CENTER"><IMG WIDTH="1023" HEIGHT="125" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4417.png ALT="\epsfbox{p4417.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases.<P>For each test case the first line gives three integers <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> as defined above. Each of the next <SPAN CLASS="MATH"><I>M</I></SPAN> <tex2html_verbatim_mark> lines contains <SPAN CLASS="MATH"><I>N</I></SPAN> <tex2html_verbatim_mark> integers; the <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th integer in the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line represents the cost of development of the plot in <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th row and <SPAN CLASS="MATH"><I>j</I></SPAN> <tex2html_verbatim_mark>-th column of the grid.<P>Input terminates with a line containing `<TT>0</TT>' as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print in the first line, the least total cost of development <SPAN CLASS="MATH"><I>C</I></SPAN> <tex2html_verbatim_mark> and the total number of feasible blocks <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>.<P>The first line is followed by <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark> more lines; each line contains two pairs of integers identifying a feasible block. The 1-st pair identifies the first and the last row of the selected block, while the 2-nd pair identifies the first and the last columns of the block. The lines appear in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 4 
3 20 29 6 
21 9 6 11 
7 10 25 5 
3 4 3 
3 20 29 6 
21 9 6 11 
7 10 25 5 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
47 3 
2 3 1 2 
2 3 3 4 
3 3 1 4 
22 1 
1 3 4 4
</PRE><P>
______________________________________________________
4418||||||false||||||
<P>Editing of original version of a document produces the final version after certain corrections, insertions, deletions and/or reorganization of text. The original as well as the final version of the document may be considered as a string of only case-sensitive letters, digits, space and standard punctuation symbols: comma, full stop, semicolon and colon. In order to avoid confusion the character `<code>#</code>' is used to represent a space character in a string. Often the two versions contain common sub-strings of characters intermixed with uncommon substrings scattered throughout the document.<P>A publishing house wants to have a computer program that will identify the difference between the two versions of a document, given the two versions as input. You are required to write a program for the publishing house.<P>The difference between the two versions is considered to be a single string containing reduced forms of original and edited versions, separated by the underscore (<code>_</code>) character. The reduced forms of two versions are obtained by deleting successively the longest common sub-strings of length two or more from the two versions simultaneously until no more common sub-strings exist in the two versions. In case there exist two or more longest common substrings, the rightmost longest sub-string in the original version is selected first for deletion. If the selected sub-string in the original version occurs more than once in the edited version then the right most sub-string is selected for deletion.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases.<P>Each test case contains two lines. The first line contains the original version while the second line contains the edited version of the document. Assume that each version contains not more than 250 characters.<P>Input terminates with a line containing `<code>#</code>' as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print output in one line. The line contains two fields separated by a space. The first field is an integer representing the total number of common sub-strings deleted; the second field is the string representing the difference between the two versions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
docu#giori#nal#,#ment. 
Original#,#document#. 
ready#and#explore 
explore#and#ready 
gty#frsirheir:sig 
eir:sigtyfr#ssirh 
#
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 o#._O. 
3 _ 
4 g_s
</PRE><P>
______________________________________________________
4419||||||false||||||
<P>Full connectivity of network of roads in a new developing industrial city does not exist. Due to existing partial connectivity it is not always possible to reach a location on a road from another location on another road. It is considered desirable to connect all unconnected existing network of roads with minimum cost. You are required to write a program to determine the total minimum cost required for connecting all unconnected roads.<P>At the time of development of each sector, axes parallel roads are constructed in the sector, parallel to either of the two mutually perpendicular axes passing through the city center. The <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-axis extends from west to east while the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-axis extends from south to north. The roads extending from west to east are called Streets while the roads extending from south to north are called avenues. A pair of points with the same <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate identifies the extremities of each street. Likewise a pair of points with the same <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate identifies the extremities of each avenue. Assume for simplicity that integer coordinates represent each extremity and the cost of construction of roads is equal, in certain unit, to the length of the road constructed.<P>For illustration consider the connectivity of the network of roads shown in the figure below, with three streets S1, S2, S3 and three avenues A1, A2, A3. The network is not fully connected. However, connection with minimum cost can be established by construction of additional roads at locations indicated by block arrows:<P><OL><LI>Extend either S1 or S2 and join the two streets constructing a new avenue. </LI><LI>Extend the avenue A2 and connect it to S3. </LI></OL><P><DIV ALIGN="CENTER"><IMG WIDTH="627" HEIGHT="190" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4419.png ALT="\epsfbox{p4419.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. Each case contains two lines.<P>The first line identifies all streets in an arbitrary order while the second line identifies all avenues, again in an arbitrary order. Each street is represented by three integers: the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>x</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> of the extremity towards west, the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> of the extremity towards east and the common <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>y</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark>. Likewise, each avenue is represented by three integers: the common <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>x</I><SUB>c</SUB></SPAN> <tex2html_verbatim_mark>, the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>y</I><SUB>0</SUB></SPAN> <tex2html_verbatim_mark> of the extremity towards south and the <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>-coordinate <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB></SPAN> <tex2html_verbatim_mark> of the extremity towards north.<P>Input terminates with a line containing `<TT>0</TT>' as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the total minimum cost required for connecting all unconnected roads.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 20 0 1 15 10 -9 -2 8 
-7 2 10 8 3 11 19 -4 2 
-6 20 10 -16 12 -6 -12 12 4 
-8 -4 8 8 -12 8 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
8 
2
</PRE><P>
______________________________________________________
4420||||||false||||||
<P>Game U-turn is a card game of patience, played by a single player. Given a sequence of cards with some cards face up and others face down at arbitrary positions, a player is required to perform a series of operation called U-turn to make all cards face up without altering positions of cards in the sequence. A U-turn operation is performed on a sub-string of cards of any length to u-turn the face of each card in the sub-string, i.e., if the face of a card is up then put it down and if it is down then put it up, without altering positions of cards in the sub-string. The effort of a U-turn operation is the length of the sub-string on which the operation is performed. The series of U-turns should be such that the effort of each U-turn operation is distinct and the total effort of the series of operations is minimum.<P>Write a program to find the total minimum effort required to make all cards of a given sequence face up using a series of U-turn operation. Assume that the sequence of cards is represented by a string of <TT>0</TT>'s and <TT>1</TT>'s where a zero represents a card with face up and a one represents a card with face down.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. Each test case has a single input line containing a string of <TT>0</TT>'s and <TT>1</TT>'s. The length of the string is fifteen or less. Input terminates with a line containing `<TT>0</TT>' as the input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the total minimum effort required.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1000101 
001100010 
1010100000 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9 
3 
7
</PRE><P>
______________________________________________________
4421||||||false||||||
<P>Homework to primary school children often becomes primary home engagement for parents. In order to lessen the burden of parents a software firm proposes to develop a package that includes solutions to problems on Arithmetic, which are commonly given as homework. As a programmer of the software firm you are required to write a program to solve such a problem.<P>The problem is to add triplets of integers from a given set <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> of <SPAN CLASS="MATH"><I>n</I>(<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4421img1.png ALT="$ \le$">30)</SPAN> <tex2html_verbatim_mark> distinct positive integers and determine all <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> subsets <SPAN CLASS="MATH">{<I>a</I>&nbsp;<I>b</I>&nbsp;<I>c</I>&nbsp;<I>d</I>&nbsp;<I>e</I>&nbsp;<I>f</I>}</SPAN> <tex2html_verbatim_mark> of six distinct elements in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> so that the sum of three elements in the subset, say <SPAN CLASS="MATH">(<I>a</I> + <I>b</I> + <I>c</I>)</SPAN> <tex2html_verbatim_mark>, is equal to the sum <SPAN CLASS="MATH">(<I>d</I> + <I>e</I> + <I>f</I> )</SPAN> <tex2html_verbatim_mark> of the other three.<P>For example, given the set <SPAN CLASS="MATH"><I>S</I> = {1001&nbsp;2001&nbsp;3001&nbsp;4001&nbsp;5001&nbsp;6001&nbsp;7001}</SPAN> <tex2html_verbatim_mark> there exists exactly three subsets <SPAN CLASS="MATH">(<I>K</I> = 3) :</SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">{1001&nbsp;2001&nbsp;3001&nbsp;4001&nbsp;5001&nbsp;7001}</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">{1001&nbsp;2001&nbsp;3001&nbsp;5001&nbsp;6001&nbsp;7001}</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH">{1001&nbsp;3001&nbsp;4001&nbsp;5001&nbsp;6001&nbsp;7001}</SPAN> <tex2html_verbatim_mark> each one of which satisfies the stated condition.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input may contain multiple test cases. Each test case contains two lines.<P>The first line gives two integers: <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the total number of elements in <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark>, an indicator that indicates the output format. The indicator <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark>, is either <TT>0</TT> or <TT>1</TT>.<P>The second line gives <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> elements of <SPAN CLASS="MATH"><I>S</I></SPAN> <tex2html_verbatim_mark> in an arbitrary order.<P>Input terminates with an input `<TT>0</TT>' as the first input for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print output in either of two formats.<P>If the indicator <SPAN CLASS="MATH"><I>I</I></SPAN> <tex2html_verbatim_mark> is <TT>0</TT> then print only the total number <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> of subsets in one line.<P>Otherwise the line is followed by <SPAN CLASS="MATH"><I>K</I></SPAN> <tex2html_verbatim_mark> more lines each containing elements of a subset. The elements of each subset appear in ascending order and the subsets appear in lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 0 
50 22 87 180 65 115 
7 1 
1001 2001 3001 4001 5001 6001 
7001 
8 0 
12 20 35 38 46 23 18 58 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0 
3 
1001 2001 3001 4001 5001 7001 
1001 2001 3001 5001 6001 7001 
1001 3001 4001 5001 6001 7001 
4

______________________________________________________
4422||||||false||||||
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Problem A: Combination Lock</title> <style type="text/css"><!-- html{margin-left:4em;}h1{margin-left:-2em;font-size:14pt;}tt,pre{font-weight:bold;font-size:12pt;}--></style> </head><body><img src="http://livearchive.onlinejudge.org/external/44/p4422.jpg width="325" height="227" align="right" /><p>The combination lock of this problem, as shown in the figure, consists of a circular dial, which can be turned (clockwise or counterclockwise) and is embedded into the "fixed" part of the lock. The dial has <var>N</var> evenly spaced "ticks". The ticks are numbered from 0 to <var>N</var>-1, increasing in the clockwise direction. The fixed part of the lock has a "mark" which always "points to" a particular tick on the dial. Of course, the mark points to different ticks as the dial is turned. (In the figure, <var>N</var> = 40 and the mark points to tick 14.)</p><p>The lock comes with three code numbers <var>T</var><sub>1</sub>,<var>T</var><sub>2</sub>, <var>T</var><sub>3</sub>. These are non-negative integers and each of them is less than <var>N</var>. No two of the three are the same.</p><p>The lock is opened in three stages of operations:<ol><li>If the mark initially points to tick <var>T</var><sub>1</sub>, turn the dial exactly two full revolutions clockwise and stop. Otherwise, turn the dial clockwise exactly two full revolutions, and continue to turn it clockwise until the mark points to tick <var>T</var><sub>1</sub>.</li> <li>Turn the dial one full revolution counterclockwise and continue to turn it counterclockwise until the mark points to tick <var>T</var><sub>2</sub>.</li> <li>Turn the dial clockwise until the mark points to tick <var>T</var><sub>3</sub>. The lock should now open.</li></ol></p><p>Given the numbers <var>N</var>, <var>T</var><sub>1</sub>, <var>T</var><sub>2</sub>, <var>T</var><sub>3</sub>, the goal of this problem is to find the average number of ticks the dial must be turned in order to open the lock. For any particular <var>N</var>, <var>T</var><sub>1</sub>, <var>T</var><sub>2</sub>, <var>T</var><sub>3</sub> and a particular initial configuration of the lock, the number of ticks turned is defined to be the sum of the ticks turned in the three stages outlined above.</p><h1>Input</h1><p>The input file consists of a number of test cases, one test case per line. Each line of the input file contains four integers: <var>N</var>, <var>T</var><sub>1</sub>, <var>T</var><sub>2</sub>, <var>T</var><sub>3</sub>, in this order, separated by blank spaces. The integer <var>N</var> is a multiple of 5, 25 &lt;= <var>N</var> &lt;= 100. The numbers <var>T</var><sub>1</sub>, <var>T</var><sub>2</sub> and <var>T</var><sub>3</sub> satisfy the constraints stated under the description above. The input will be terminated by a line containing only four zeroes, separated by blank spaces.</p><h1>Output</h1><p>For each test case, print the average number of ticks (rounded to three decimal places) the dial must be turned in order to open the lock. Assume that each of the <var>N</var> possible initial configurations of the lock is equally likely.</p><h1>Sample Input</h1><pre>
80 20 40 50
80 10 79 12
0 0 0 0
</pre><h1>Sample Output</h1><pre>
369.500
415.500
</pre></body></html>
______________________________________________________
4423||||||false||||||
<P><TT>Stringld</TT>(left delete) is a function that gets a string and deletes its leftmost character (for instance <TT>Stringld</TT>(``<TT>acm</TT>") returns ``<TT>cm</TT>").<P><P><BR>You are given a list of distinct words, and at each step, we apply <SPAN CLASS="textit">stringld</SPAN> on every word in the list. Write a program that determines the number of steps that can be applied until at least one of the conditions become true:<P><P><BR><OL><LI>A word becomes empty string, or </LI><LI>a duplicate word is generated. </LI></OL><P><P><BR>For example, having the list of words <TT>aab</TT>, <TT>abac</TT>, and <TT>caac</TT>, applying the function on the input for the first time results in <TT>ab</TT>, <TT>bac</TT>, and <TT>aac</TT>. For the second time, we get <TT>b</TT>, <TT>ac</TT>, and <TT>ac</TT>. Since in the second step, we have two <TT>ac</TT> strings, the condition 2 is true, and the output of your program should be 1. Note that we do not count the last step that has resulted in duplicate string. More examples are found in the sample input and output section.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. The first line of each test case is <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4423img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4423img1.png ALT="$ \le$">100)</SPAN> <tex2html_verbatim_mark>, the number of words.<P>Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contains a string of at most 100 lower case characters.<P>The input terminates with a line containing `<TT>0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing the maximum number of <TT>stringld</TT> we can call.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
aaba 
aaca 
baabcd 
dcba 
3 
aaa 
bbbb 
ccccc 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1
2
</PRE><P>
______________________________________________________
4424||||||false||||||
<P>Ethan wants to draw a painting on an <SPAN CLASS="MATH"><I>m</I>&#215;<I>n</I></SPAN> <tex2html_verbatim_mark> board. He can draw some strips on the board using a paintbrush of width one. In each step, he must choose a new color and paint a full column or a full row. He has a great image to be drawn on the board, but he doesn't know which color to use first. You must help him in finding out the order of colors.<P><DIV ALIGN="CENTER"><IMG WIDTH="509" HEIGHT="505" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4424.png ALT="\epsfbox{p4424.eps}"> <tex2html_verbatim_mark></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. The first line of each test case contains two integers <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark>, the size of the board <!-- MATH
 $(0 < m, n < 100)$
 --><SPAN CLASS="MATH">(0 &lt; <I>m</I>, <I>n</I> &lt; 100)</SPAN> <tex2html_verbatim_mark>. Following the first line, there are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> lines with <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> integers denoting the color in each cell. All the colors are positive integer numbers less than 10000. The input is terminated with a single line containing two consecutive zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing the order of colors used to paint the board. If there are several answers, output the one which is lexicographically smallest (considering each number as a symbol).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 4 
1 5 4 3
6 5 6 6
2 2 2 2
1 5 4 3
3 2 
1 1 
2 3 
2 3 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 3 4 6 5 2 
2 3 1
</PRE><P>
______________________________________________________
4425||||||false||||||

<P>
After years as a brick-layer, you've been called upon to analyze the instability of brick walls. The instability of a wall can be approximated by the maximum damage to a wall in case of taking one brick out. A brick will fall if all bricks that are directly underneath it are removed. Note that if the space underneath a brick is partially empty, it does not fall. You are given the description of all bricks in a wall, and must determine the instability of the wall as described in the following sections.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There are multiple test cases in the input. Each test case consists of a single line, ``<SPAN CLASS="MATH"><I>M</I>&nbsp;<I>N</I></SPAN>
<tex2html_verbatim_mark>" <!-- MATH
 $(1 \le M, N \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4425img1.png
 ALT="$ \le$"><I>M</I>, <I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4425img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> indicate the height and width (in units), respectively, of the input wall. 

<P>

<P>
<BR>
Each of the next <SPAN CLASS="MATH"><I>M</I></SPAN>
<tex2html_verbatim_mark> lines is a string of <SPAN CLASS="MATH"><I>N</I></SPAN>
<tex2html_verbatim_mark> digits which specifies a row in the wall. Each brick in a row is represented by a substring of the row (like <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark>) such that every digit in <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> is the same, which is equal to the length of <SPAN CLASS="MATH"><I>s</I></SPAN>
<tex2html_verbatim_mark> too. For example, 333 and 22 are two bricks of length 3 and 2 respectively, but 111 specifies three bricks of length one. A 0 in a row means there is no brick in that place of wall. Note that the height of each brick is one. The input terminates with a line containing `<TT>0 0</TT>'. You may assume that the input is correct. This means: 

<P>

<P>
<BR>

<OL>
<LI>There is no brick such that the length of the brick does not conform to the digits in the brick (like 222 in the row 12221). 
</LI>
<LI>No brick can fall initially.
</LI>
</OL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write a single line containing maximum sum of the bricks' lengths that will fall if we take one brick out (including that brick).

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 5 
33322 
22333 
33322 
22333 
4 6 
122333 
444422 
111111 
333333 
3 3 
022 
220 
111 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 
8 
4
</PRE> 

<P>

______________________________________________________
4426||||||false||||||

<P>
A new computer game has just arrived and as an active and always-in-the-scene player, you should finish it before the next university term starts. At each stage of this game, you have to shoot an enemy robot on its weakness point. The weakness point of a robot is always the ``center of mass" of its 2D shape in the screen. Fortunately, all robot shapes are simple polygons with uniform density and you can write programs to calculate exactly the center of mass for each polygon. 

<P>
Let's have a more formal definition for center of mass (COM). The center of mass for a square, (also circle, and other symmetric shapes) is its center point. And, if a simple shape <SPAN CLASS="MATH"><I>C</I></SPAN>
<tex2html_verbatim_mark> is partitioned into two simple shapes <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>B</I></SPAN>
<tex2html_verbatim_mark> with areas <SPAN CLASS="MATH"><I>S</I><SUB>A</SUB></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>S</I><SUB>B</SUB></SPAN>
<tex2html_verbatim_mark>, then <SPAN CLASS="MATH"><I>COM</I>(<I>C</I>)</SPAN>
<tex2html_verbatim_mark> (as a vector) can be calculated by

<P>
<P><!-- MATH
 \begin{displaymath}
COM (C) = \frac{S_{A} \times COM(A) + S_{B} \times COM(B)}{S_{A} + S_{B}}.
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>COM</I>(<I>C</I>) = <IMG
 WIDTH="263" HEIGHT="58" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4426img1.png
 ALT="$\displaystyle {\frac{{S_{A} \times COM(A) + S_{B} \times COM(B)}}{{S_{A} + S_{B}}}}$">.
</DIV><P>
<tex2html_verbatim_mark></P>

<P>
As a more formal definition, for a simple shape <SPAN CLASS="MATH"><I>A</I></SPAN>
<tex2html_verbatim_mark> with area <SPAN CLASS="MATH"><I>S</I><SUB>A</SUB></SPAN>
<tex2html_verbatim_mark>:

<P>
<P><!-- MATH
 \begin{displaymath}
COM(A) = \frac{\int \int_{A} \vec{a}.ds}{S_{A}}
\end{displaymath}
 -->
</P>
<DIV ALIGN="CENTER" CLASS="mathdisplay">
<I>COM</I>(<I>A</I>) = <IMG
 WIDTH="75" HEIGHT="60" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4426img1.png
 ALT="$\displaystyle {\frac{{\int \int_{A} \vec{a}.ds}}{{S_{A}}}}$">
</DIV><P>
<tex2html_verbatim_mark></P>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains a number of robot definitions. Each robot definition starts with a line containing <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, the number of vertices in robot's polygon <!-- MATH
 $(n \le 100)$
 -->
<SPAN CLASS="MATH">(<I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4426img1.png
 ALT="$ \le$">100)</SPAN>
<tex2html_verbatim_mark>. The polygon vertices are specified in the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines (in either clockwise or counter-clock-wise order). Each of these lines contains two space-separated integers showing the coordinates of the corresponding vertex. The absolute value of the coordinates does not exceed 100. The case of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> shows the end of input and should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
The <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th line of the output should be of the form ``<TT>Stage #</TT><SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark><TT>:</TT> <SPAN CLASS="MATH"><I>x</I>&nbsp;<I>y</I></SPAN>
<tex2html_verbatim_mark>" (omit the quotes), where (<SPAN CLASS="MATH"><I>x</I>, <I>y</I></SPAN>
<tex2html_verbatim_mark>) is the center of mass for the <SPAN CLASS="MATH"><I>i</I></SPAN>
<tex2html_verbatim_mark>-th robot in the input. The coordinates must be rounded to exactly 6 digits after the decimal point.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 
0 0
0 1
1 1
1 0
3 
0 1
1 0
2 2
8 
1 1
2 1
2 7
3 7
3 0
0 0
0 7
1 7
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Stage #1: 0.500000 0.500000 
Stage #2: 1.000000 1.000000 
Stage #3: 1.500000 3.300000
</PRE> 

<P>

______________________________________________________
4427||||||false||||||
<P>You have just run out of disk space and decided to delete some of your directories. Rationally, you will first have an exploration of what you have in your file system. And more rationally, you will do this exploration through a command line interface. The interface used in this problem is called ``<TT>MSDOS-</TT>", since it is something like <TT>MSDOS</TT> with fewer features. The commands of <TT>MSDOS-</TT> are as follows:<P><P><BR><UL><LI><TT>cd</TT> <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>Assuming <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark> to be the name of a relative descendant of <SPAN CLASS="textbf">current directory</SPAN>, this command changes the current directory to <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark>. For example, when the <SPAN CLASS="textbf">current directory</SPAN> is ``<code>\A\B\</code>" and one of its descendants is ``<code>C\D</code>", the execution of ``<code>cd C\D</code>" will change the <SPAN CLASS="textbf">current directory</SPAN> to ``<code>\A\B\C\D\</code>". </LI><LI><TT>cd</TT> <code>\</code><P><P><BR>This command changes the <SPAN CLASS="textbf">current directory</SPAN> to ``<code>\</code>" (the root of the file system). For example, when the current directory is ``<code>\A\B\</code>", the execution of ``<code>cd \</code>" will change the <SPAN CLASS="textbf">current directory</SPAN> to ``<code>\</code>". </LI><LI><code>cd ..</code><P><P><BR>Assuming the <SPAN CLASS="textbf">current directory</SPAN> to be anything except ``<code>\</code>", this command changes <SPAN CLASS="textbf">the current directory</SPAN> to its parent directory. For example, when the current directory is ``<code>\A\B\</code>", the execution of ``<code>cd ..</code>" will change the current directory to ``<code>\A\</code>". </LI><LI><code>cd \</code><!-- $<directory>$
 --> <SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>This command is equivalent to the execution of the following two commands:<P><code>cd \</code><P><code>cd</code> <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark> </LI><LI><code>dir</code><P><P><BR>This command lists the name of files and directories directly in the <SPAN CLASS="textbf">current directory</SPAN>, each on a separate line. These filedirectory names are made up of (lowercase and uppercase) letters, digits, and dots (``<TT>.</TT>"). Directory names precede the file names in the list, and each one, comes alone in a single line. On the contrary, each file name is accompanied by its size separated by a space. A sample output of ``<TT>dir</TT>" is as follows:<P><PRE>
HW1 
HW1.old 
Syllab.pdf 10000 
notes.txt 3241
</PRE><P></LI><LI><TT>deltree</TT> <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>Assuming <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark> to be the name of a relative descendant of <SPAN CLASS="textbf">current directory</SPAN>, this command tries to delete <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark> and all its descendant files and subdirectories (and thus, freeing that much of space). For example, when the <SPAN CLASS="textbf">current directory</SPAN> is ``<code>\A\B\</code>" and one of its descendants is ``<code>C\D</code>", the execution of ``<code>deltree C\D</code>" will try to delete directory ``<code>\A\B\C\D\</code>" and all of its descendant files and directories. </LI><LI><code>deltree \</code><!-- MATH
 $<directory>$
 --> <SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark><P><P><BR>This command is equivalent to the execution of the following two commands:<P><code>cd \</code><P><code>deltree</code> <!-- MATH
 $<directory>$
 --><SPAN CLASS="MATH">&lt; <I>directory</I> &gt;</SPAN> <tex2html_verbatim_mark> </LI><LI><code>exit</code><P><P><BR>This command terminates the command line interface. </LI></UL><P><P><BR>A ``scenario" is an exploration (a consistent series of ``<TT>cd</TT>" and ``<TT>dir</TT>" commands and their results, starting from root) followed by exactly one ``<TT>deltree</TT>" command. Given a scenario, you are to find the maximum space guaranteed to be freed by executing its ``<TT>deltree</TT>" command.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input contains multiple independent scenarios. There is an empty line after each scenario. The input ends with an ``<TT>exit</TT>" command. There is a ``<TT>&gt;</TT>" sign before each command in the input (with no spaces in between). The length of each file name does not exceed 50. You may assume that the input is correct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write the result of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th scenario as a single integer on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
&gt;cd A 
&gt;dir 
B 
C 
d 12 
e 62 
&gt;cd B 
&gt;cd .. 
&gt;cd .. 
&gt;deltree A 

&gt;dir 
G 
s 2 
&gt;cd G 
&gt;dir 
&gt;cd \ 
&gt;deltree G 

&gt;dir 
A 
B 
x 3 
&gt;cd A 
&gt;dir 
AA 
AB 
ax 10 
ay 12 
&gt;cd AA 
&gt;dir 
d 32 
a 28 
&gt;cd .. 
&gt;cd AB 
&gt;dir 
F 
x 100 
&gt;cd F 
&gt;dir 
G 
&gt;cd \ 
&gt;deltree A 

&gt;cd D1\D2 
&gt;dir 
D3 
a 32 
&gt;cd D3 
&gt;dir 
b 31 
&gt;cd \D1\D3 
&gt;dir 
d 7 
&gt;deltree \D1 
&gt;exit
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
74 
0 
182 
70
</PRE><P>
______________________________________________________
4428||||||false||||||
<P>A new Solar Eclipse is going to happen in Mars. Scientists from different parts of the world are travelling to Mars to watch and study this phenomenon. You just managed to calculate exactly the best point of Mars lands for your study of the eclipse, and want to land your flying saucer on that place. But, you notice that there are already other spacecrafts landed on near that area.<P>In the bird's eye view, all the spacecrafts (including yours) are circles with constant radius <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. Logically, you hate to land your spacecraft on the others (no intersection of areas is allowed, but touching the other crafts is acceptable), though, the other saucers did not obey this rule on their own landings (i.e. their circles might have positive-area intersections with each other). In order to land your own craft on Mars, you want to find the place which minimizes the distance between the center of your flying saucer and your already calculated best point (and obeys the no-intersection rule). That's what you should do in this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input has multiple test cases. Each test case starts with a line containing an integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> (number of already landed spacecrafts), and a real number <SPAN CLASS="MATH"><I>R</I></SPAN> <tex2html_verbatim_mark>. The land is small enough for us to be modeled by a two-dimensional plane, and (0,0) is conventionally the best point for us to land. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines specifies the location of a landed flying saucer by giving two real numbers <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark> as the coordinates of its center.<P>The input ends with a case of <SPAN CLASS="MATH"><I>n</I> = <I>R</I> = 0</SPAN> <tex2html_verbatim_mark> which must not be processed. Assume <SPAN CLASS="MATH"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4428img1.png ALT="$ \le$">100</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>R</I> &gt; 0</SPAN> <tex2html_verbatim_mark>, and their absolute value does not exceed 1000.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write the result of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th test case on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of the output. You should just write the minimum possible distance between the center of your landed craft and the origin of the plane, rounded to exactly 6 digits after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1.234 
2.468 0 
1 2 
2 2 
2 1 
1 1 
-1 -1 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.000000 
1.171573 
1.414214
</PRE><P>
______________________________________________________
4429||||||false||||||
<P>A <SPAN CLASS="textit">plotter</SPAN> is a vector graphics printing device that connects to a computer to print graphical plots. There are two types of plotters: <SPAN CLASS="textit">pen plotters</SPAN> and <SPAN CLASS="textit">electrostatic plotters</SPAN>. Pen plotters print by moving a pen across the surface of a piece of paper. They can draw complex line art, including text, but do so very slowly because of the mechanical movement of the pens. In this problem, we are considering this matter of slowness for our special type of pen plotter. A <SPAN CLASS="textit">discrete horizontal pen plotter</SPAN> can draw only horizontal line segments whose end points have discrete coordinates (integer <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>'s). The drawing method is quite simple. The pen starts its journey from the upper left corner of the page <SPAN CLASS="MATH">(<I>x</I> = <I>y</I> = 0)</SPAN> <tex2html_verbatim_mark> and moves only right while drawing the specified lines on that row. Then, it moves back completely to the left, moves one row down <SPAN CLASS="MATH">(<I>y</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \leftarrow$"> <I>y</I> + 1)</SPAN> <tex2html_verbatim_mark>, and repeats this task for the second row. The same is done for the next rows. In other words, the pen can move down only when it is far on the left side (i.e. when <SPAN CLASS="MATH"><I>x</I> = 0</SPAN> <tex2html_verbatim_mark>), and can have at most one left-to-right pass and at most one right-to-left pass on each row.<P>It takes one unit of time to move the pen one unit of length to the left <SPAN CLASS="MATH">(<I>x</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \leftarrow$"> <I>x</I> - 1)</SPAN> <tex2html_verbatim_mark>, or to the right <SPAN CLASS="MATH">(<I>x</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \leftarrow$"> <I>x</I> + 1)</SPAN> <tex2html_verbatim_mark>. This time is doubled if the pen is on the paper and is drawing a line segment. It takes no time to move one row down (when <SPAN CLASS="MATH"><I>x</I> = 0</SPAN> <tex2html_verbatim_mark>).<P>Since it might take a long time for the plotter to draw all the given line segments, we have decided to add a new feature to our plotter: drawing <SPAN CLASS="textit">time-limit</SPAN>. By specifying the time-limit, the plotter should draw the maximum number of lines (using the same drawing method given above) that can be drawn within that time-limit. Given the time-limit and line segments, you should find this maximum number.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of line segments <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$">1000)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>t</I></SPAN> <tex2html_verbatim_mark> is the time-limit <SPAN CLASS="MATH">(<I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines specifies a line segment by giving three integers <SPAN CLASS="MATH"><I>y</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>x</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>x</I><SUB>t</SUB></SPAN> <tex2html_verbatim_mark>. Integer y indicates the row of that line segment <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$">2000)</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>x</I><SUB>s</SUB></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>x</I><SUB>t</SUB></SPAN> <tex2html_verbatim_mark> are the <SPAN CLASS="MATH"><I>x</I></SPAN> <tex2html_verbatim_mark>-coordinates of its end points <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$"><I>x</I><SUB>s</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$"><I>x</I><SUB>t</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4429img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN> <tex2html_verbatim_mark>. The line segments are disjoint and do not have any intersections. A case of <SPAN CLASS="MATH"><I>n</I> = <I>t</I> = 0</SPAN> <tex2html_verbatim_mark> shows the end of input and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Write the result of the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th test case on the <SPAN CLASS="MATH"><I>i</I></SPAN> <tex2html_verbatim_mark>-th line of output. Each line should have only one integer, indicating the maximum number of line segments that can be drawn in its corresponding test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 3 
0 1 2
3 5 
1 1 2
3 1 3
1 3 4
3 6 
1 1 2
3 1 3
1 3 4
4 11 
1 3 4
1 1 2
2 1 2
2 3 4
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
1 
2 
3
</PRE><P>
______________________________________________________
4430||||||false||||||
<P>In the recent parliament election, none of the parties have vast majority of seats, so there should be a coalition to select the members of the Management Board, which are one speaker, two deputy speakers and six secretaries. The board has a special voting system: the speaker has 25 votes, deputy speakers have 8 votes and each secretary has 1 vote.<P>ACM party decides to take a commanding role and shape the coalition, but they are <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> seats short to have a majority. They know the number of seats that every other party has taken. To participate in the coalition, each party demands its share from the Management Board in the form of a triplet <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH"><I>a</I></SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH"><I>b</I></SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH"><I>c</I></SPAN> <tex2html_verbatim_mark> are the number of speakers, deputy speakers, and secretaries that are expected to be selected from that party. For example, if the party BDN has a demand of (1, 1, 2), it expects that the speaker, one of the deputy speakers, and two of the secretaries are selected from BDN. A party may have multiple demands, meaning that the party accepts to participate in the coalition if one of its demands is satisfied.<P>Knowing the demands of all other parties, ACM wants to know how powerful it can be in Management Board. This means that ACM wants to maximize its number of votes while forming a coalition with other parties such that it overcomes its shortage of <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> seats.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple test cases. Each test case starts with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark>. The integer <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> is the number of line parties <SPAN CLASS="MATH">(<I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$">50)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> is the number of seats ACM party needs. The next <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> lines contain other parties' information, each beginning with number of seats the party has, followed by a colon, a space, and a list of demands for that party. The list of demands is in the form of triplets <SPAN CLASS="MATH">(<I>a</I>, <I>b</I>, <I>c</I>)</SPAN> <tex2html_verbatim_mark> where <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$"><I>a</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$">1</SPAN> <tex2html_verbatim_mark>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$"><I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$">2</SPAN> <tex2html_verbatim_mark>, and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4430img1.png ALT="$ \le$">6</SPAN> <tex2html_verbatim_mark>. The triplets are separated by the string ``<TT> or </TT>" and are terminated with a semicolon in the end (see the sample input). The input is terminated with a line containing `<TT>0 0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing three integers, which represent speaker, deputy speaker and secretaries which ACM party can have in the coalition to have maximum votes in board's voting system.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 
1: (0,0,0); 
2: (1,2,0); 
3: (1,0,5) or (1,2,0) or (0,2,6); 
1 0 
1: (1,1,1); 
1 1 
1: (1,1,1); 
4 6 
6: (1,0,0) or (1,2,6); 
2: (0,2,0); 
2: (0,0,3); 
2: (0,0,3); 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 0 0
1 2 6
0 1 5
1 0 0
</PRE><P>
______________________________________________________
4431||||||false||||||

<P>
Have you ever thought about comparing the weight of fruits? That's what you should do in this problem! Given a series of fruit weight comparisons, you should anticipate the result of another comparison. In this problem, all fruits of the same kind are identical and have the same weights. Each fruit weight comparison is something like ``<!-- MATH
 $a \ X \le b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4431img1.png
 ALT="$ \le$"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>" in which <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> are positive integers, and <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark> are fruit names. Such a comparison means that the weight of <SPAN CLASS="MATH"><I>a</I></SPAN>
<tex2html_verbatim_mark> fruits of type <SPAN CLASS="MATH"><I>X</I></SPAN>
<tex2html_verbatim_mark> is less than or equal to the weight of <SPAN CLASS="MATH"><I>b</I></SPAN>
<tex2html_verbatim_mark> fruits of type <SPAN CLASS="MATH"><I>Y</I></SPAN>
<tex2html_verbatim_mark>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains multiple test cases. Each test case starts with a line containing <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark>, which is the number of given comparisons. Each of the next <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> lines gives a comparison in the form of ``<!-- MATH
 $a \ X \ b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I>&nbsp;<I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>" meaning that ``<!-- MATH
 $a \ X \le b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4431img1.png
 ALT="$ \le$"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>". The last line of each test case contains the comparison query in the same form of ``<!-- MATH
 $a \ X \ b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I>&nbsp;<I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>" inquiring the comparison of ``<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I></SPAN>
<tex2html_verbatim_mark>" and ``<SPAN CLASS="MATH"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>". 

<P>
A case of <SPAN CLASS="MATH"><I>n</I> = 0</SPAN>
<tex2html_verbatim_mark> shows the end of input and should not be processed. All integers in the input (except the last <SPAN CLASS="MATH"><I>n</I></SPAN>
<tex2html_verbatim_mark> which is 0) are positive and are not greater than 100. Fruit names are case-sensitive strings of (lowercase and uppercase) letters with length no more than 50.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, write one line with your result for that test case. Your result can be one of the followings (assume the comparison query was ``<!-- MATH
 $a \ X \ b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I>&nbsp;<I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>"): 

<P>

<UL>
<LI>``<TT>&lt;=</TT>": meaning you are sure that ``<!-- MATH
 $a \ X \le b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4431img1.png
 ALT="$ \le$"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>". 
</LI>
<LI>``<TT>&gt;=</TT>": meaning you are sure that ``<!-- MATH
 $a \ X \ge b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4431img1.png
 ALT="$ \ge$"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>". 
</LI>
<LI>``<TT>==</TT>": meaning you are sure that ``<!-- MATH
 $a \ X = b \ Y$
 -->
<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I> = <I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>" (i.e. you have reached both of the above results). 
</LI>
<LI>``<TT>UNAVAILABLE</TT>": meaning that you can say nothing for sure in comparing ``<SPAN CLASS="MATH"><I>a</I>&nbsp;<I>X</I></SPAN>
<tex2html_verbatim_mark>" and ``<SPAN CLASS="MATH"><I>b</I>&nbsp;<I>Y</I></SPAN>
<tex2html_verbatim_mark>" (i.e. you have reached none of the above results). 
</LI>
<LI>``<TT>INCONSISTENT</TT>": meaning that there is an inconsistency in the given comparisons (i.e. you are sure that all the given comparisons for 
that test case cannot hold at the same time).
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
2 
2 Orange 3 Apple
1 Apple 1 Peach 
2 Orange 3 Peach
1 
2 Orange 3 Apple
2 Orange 2 Apple
2 
3 a 2 A 
2 A 3 a 
5 A 5 a 
2 
3 B 2 A 
2 A 3 B 
2 A 3 B 
3 
2 b 2 A
2 A 2 C
3 C 2 b
1 A 1 b
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
&lt;= 
UNAVAILABLE 
&gt;= 
== 
INCONSISTENT
</PRE>

<P>

______________________________________________________
4432||||||false||||||
<P>In the game of Royal Gems, you are given an <SPAN CLASS="MATH"><I>n</I>&#215;<I>m</I></SPAN> <tex2html_verbatim_mark> board and arbitrarily large number of ruby, emerald, sapphire, and diamond gemstones. You must put one gemstone in each cell of the board according to the following rules:<P><P><BR><OL><LI>Every ruby has an emerald, a sapphire and a diamond in his neighbors. </LI><LI>Every emerald has a sapphire and a diamond in her neighbors. </LI><LI>Every sapphire has a diamond in his neighbors. </LI></OL><P><P><BR>A neighbor of a cell is one of the four cells that are directly above, below, left, or right of the cells. Write a program that finds the maximum number of ruby gemstones that could be put on the board satisfying the above rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are multiple test cases in the input. Each test case consists of <SPAN CLASS="MATH"><I>n</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < n < 8)$
 --><SPAN CLASS="MATH">(1 &lt; <I>n</I> &lt; 8)</SPAN> <tex2html_verbatim_mark> and <SPAN CLASS="MATH"><I>m</I></SPAN> <tex2html_verbatim_mark> <!-- MATH
 $(1 < m < 8)$
 --><SPAN CLASS="MATH">(1 &lt; <I>m</I> &lt; 8)</SPAN> <tex2html_verbatim_mark>. The input terminates with a line containing `<TT>0 0</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, write a single line containing the maximum number of ruby gemstones on the board.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2
2 3
3 3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0
1
2

______________________________________________________
4433||||||false||||||
<P>
Mystery Science Theater 3000 is about to start, which means it's time for ``Robot Roll Call", where the name of each robot is called out, as per the list received from Earth. The expectation is that if a robot is there, it will respond by adding its name to a data stream which is then sent back to Earth. Unfortunately today, once the roll is received, communication with Earth is temporarily lost. In the meantime, the robots that are present for roll call have saved their names to the data stream. However, lots of other things are also being saved to this same stream. To help extract data later, any data placed in the stream is separated by whitespace. Once the communication problems are resolved, the contents of this stream are relayed to Earth. 

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4433.eps}$
 -->
<IMG
 WIDTH="764" HEIGHT="572" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4433.png
 ALT="\epsfbox{p4433.eps}">
</DIV>

<P>
Your task is as follows. Given a list of names for roll call, you must scan the accompanying data stream and determine if a given name is there. For each name that is in the roll call, report whether or not that name was in the data stream. For a name to be a match, it must appear <SPAN  CLASS="textbf">EXACTLY</SPAN> as shown in the roll. This means a match is case-sensitive and sub-string matches are not allowed. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The first entry in the file will be an integer value <SPAN CLASS="MATH"><I>t</I></SPAN> (<SPAN CLASS="MATH"><I>t</I> &gt; 0</SPAN>) that represents the number of test data sets the file contains. Following this entry, will be t test sets. Each test set will start with an integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $0 < n < 26$
 -->
<SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 26</SPAN>) representing the number of names in the roll. On the lines that follow will be n entries, one per line, containing the individual names in the roll. No name will have more than 25 characters. Names will only contain the characters 
<TT>A</TT>-<TT>Z</TT>, <TT>a</TT>-<TT>z</TT>, and <TT>0</TT>-<TT>9</TT>. Names will be unique. 

<P>
Following the names will be an integer <SPAN CLASS="MATH"><I>d</I></SPAN> (<!-- MATH
 $0 < d < 100$
 -->
<SPAN CLASS="MATH">0 &lt; <I>d</I> &lt; 100</SPAN>) representing the number of lines in the data stream. On each subsequent line will be the characters that make up the data stream. Each line of the data stream will contain at least one character and at most 100. Furthermore, the data on a given line will be separated by whitespace (space, tab, or combination of the two). Finally, any names from the roll that might occur as part of the data stream will be found on one line (a name will not be split across lines). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Write the test set number (starting at 1) on a line of its own, followed by the names in the roll and whether or not a given name was found in the data stream. Each of these names should occur on a line of their own. Add a blank line to the end of each test case. Output format must be identical to the sample output shown below.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
2
4
Gypsy
TomServo
CrowTRobot
Cambot
2
Manos Torgo Joel 101010 Gypsy tomservo
Fugitive Alien Time of the Apes crowTrobot Cambot
2
R2D2
C3PO
1
Boba Fett c3Po R2D22 Jar Jar Binks Luke give in to the dark side
</PRE> 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Test set 1:
Gypsy is present
TomServo is absent
CrowTRobot is absent
Cambot is present

Test set 2:
R2D2 is absent
C3PO is absent
</PRE> 

<P>

______________________________________________________
4434||||||false||||||
<P>R2D2 was exploring a tunnel when a cave-in suddenly occurred. Oh no, is he trapped?<P><DIV ALIGN="CENTER"><IMG WIDTH="1332" HEIGHT="430" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="\epsfbox{p4434.eps}"></DIV><P><DIV ALIGN="CENTER">Figure1: Overhead view of the cave crisis from the third example test case.</DIV><P>From an overhead view, we can see all the obstacles (debris) on a two-dimensional Cartesian plane. The tunnel is <SPAN CLASS="MATH"><I>w</I></SPAN> cm wide, bounded by the lines <SPAN CLASS="MATH"><I>y</I> = <I>w</I>/2</SPAN> and <SPAN CLASS="MATH"><I>y</I> = - <I>w</I>/2</SPAN>. R2D2 starts at <SPAN CLASS="MATH">(0, 0)</SPAN>, and has a perfectly circular footprint of radius <SPAN CLASS="MATH"><I>r</I></SPAN>. The exit of the tunnel lies to the right of the line <SPAN CLASS="MATH"><I>x</I> = 1000</SPAN>. Between R2D2 and the exit lie a number of polygonal obstacles.<P>Is it possible for R2D2 to navigate between the obstacles and make it to the exit?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain multiple test cases. Each test case begins with a single line containing an even integer <SPAN CLASS="MATH"><I>w</I></SPAN> ( <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>w</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$">1000</SPAN>), the width of the tunnel, and an integer <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$">100</SPAN>), the number of obstacles. The next <SPAN CLASS="MATH"><I>N</I></SPAN> lines each contain the description of a single obstacle. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th obstacle is a simple polygon, specified on a single line containing an integer <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>n</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$">10</SPAN>), the number of vertices, followed by <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN> pairs of integers, <SPAN CLASS="MATH"><I>x</I><SUB>ij</SUB></SPAN> and <SPAN CLASS="MATH"><I>y</I><SUB>ij</SUB></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>x</I><SUB>ij</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$">1000</SPAN> and <SPAN CLASS="MATH">- <I>w</I>/2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>y</I><SUB>ij</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4434.png ALT="$ \le$"><I>w</I>/2</SPAN> for <SPAN CLASS="MATH"><I>j</I> = 1,..., <I>ni</I></SPAN>), specifying the coordinates of the vertices in counterclockwise order. Note that obstacles in the input may touch or even overlap. However, you are guaranteed that R2D2's initial location will not touch or overlap any obstacle. The vertices of each polygon are unique, no two nonconsecutive edges of the polygon intersect (even at their endpoints), and each polygon is guaranteed to have nonzero area.<P>The end-of-input is denoted by an invalid test case with <SPAN CLASS="MATH"><I>w</I> = <I>N</I> = 0</SPAN> and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input test case, you must determine the maximum radius <SPAN CLASS="MATH"><I>r</I> &gt; 0</SPAN> that R2D2 could have and still be able to plan a path from his starting location <SPAN CLASS="MATH">(0, 0)</SPAN> to the tunnel exit without overlapping with any of the obstacles. You should print either this maximum radius <SPAN CLASS="MATH"><I>r</I></SPAN> (rounded to two decimal places) or the message ``<TT>impossible</TT>" if no such radius exists.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 2
4 2 -1 4 -1 4 1 2 1
3 3 0 6 -1 6 1
8 2
3 1 -1 4 -1 4 4
3 3 -4 6 1 3 1
10 7
4 0 5 4 2 5 3 4 5
3 4 -5 9 -5 9 0
4 8 -5 11 -5 11 -2 8 -2
3 8 3 16 1 11 5
4 21 -5 23 -3 20 -2 15 -4
3 22 3 26 -1 28 0
3 24 0 29 4 25 3
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.00
impossible
1.33
</PRE><P>
______________________________________________________
4435||||||false||||||
<P>You are working on the team assisting with programming for the Mars rover. To conserve energy, the rover needs to find optimal paths across the rugged terrain to get from its starting location to its final location. The following is the first approximation for the problem.<P><SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> square matrices contain the expenses for traversing each individual cell. For each of them, your task is to find the minimum-cost traversal from the top left cell <SPAN CLASS="MATH">[0][0]</SPAN> to the bottom right cell <SPAN CLASS="MATH">[<I>N</I> - 1][<I>N</I> - 1]</SPAN>. Legal moves are up, down, left, and right; that is, either the row index changes by one or the column index changes by one, but not both.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Each problem is specified by a single integer between 2 and 125 giving the number of rows and columns in the <SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>N</I></SPAN> square matrix. The file is terminated by the case <SPAN CLASS="MATH"><I>N</I> = 0</SPAN>.<P>Following the specification of <SPAN CLASS="MATH"><I>N</I></SPAN> you will find <SPAN CLASS="MATH"><I>N</I></SPAN> lines, each containing <SPAN CLASS="MATH"><I>N</I></SPAN> numbers. These numbers will be given as single digits, zero through nine, separated by single blanks.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each problem set will be numbered (beginning at one) and will generate a single line giving the problem set and the expense of the minimum-cost path from the top left to the bottom right corner, exactly as shown in the sample output (with only a single space after ``<TT>Problem</TT>" and after the colon).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3
5 5 4
3 9 1
3 2 7
5
3 7 2 0 1
2 8 0 9 1
1 2 1 8 1
9 8 9 2 0
3 6 5 1 5
7
9 0 5 1 1 5 3
4 1 2 1 6 5 3
0 7 6 1 6 8 5
1 1 7 8 3 2 3
9 4 0 7 6 4 1
5 8 3 2 4 8 3
7 4 8 4 8 3 4
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Problem 1: 20
Problem 2: 19
Problem 3: 36
</PRE><P>
______________________________________________________
4436||||||false||||||
<P>The following is taken from the official rules for the International Collegiate Programming Contest, as reported at http://www.acmicpc-pacnw.org/rules.htm<P><BLOCKQUOTE>The total time is the sum of the time consumed for each problem solved. The time consumed for a solved problem is the time elapsed from the beginning of the contest to the submittal of the first accepted run plus 20 penalty minutes for every previously rejected run for that problem. There is no time consumed for a problem that is not solved.</BLOCKQUOTE><P>Quite simply, one element of the optimal strategy is <SPAN CLASS="textbf">not</SPAN> to have any erroneous submissions, so the androids do not have to worry about the penalty minutes. All that remains is to determine the order in which they should submit problems.<P>Let's assume perfect knowledge -- hey, these androids are <SPAN CLASS="textbf">good</SPAN> -- so that they can make a very good estimate of the development time required for each of the problems. The task is to determine the <SPAN CLASS="textit">order</SPAN> in which the problems should be submitted. The androids realize that their best approach is for each to think independently about different problems rather than having all three work on a single problem. Furthermore, each android types infinitely fast, and does not use the computer terminal while thinking. Hence, up to three problems can be simultaneously in progress at any given time, and it is actually possible for all three bots to submit a problem within the same minute. For the same reason, the number of problems posed is larger than those posed in the contest for biological entities. Being innately fussy, if there are multiple ways to submit the problems and obtain the same score, they will submit the problem order that comes lexicographically first.<P>Determine the algorithm to solve the most problems and to obtain the best possible score for those problems. Then implement it.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line of input to your program is a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> (<!-- MATH
 $0 < n < 100$
 --> <SPAN CLASS="MATH">0 &lt; <I>n</I> &lt; 100</SPAN>), giving the number of data sets -- one for each set of problems. Following that are exactly <SPAN CLASS="MATH"><I>n</I></SPAN> lines, giving information about each data set. The first number is the number of problems in that dataset as an integer <SPAN CLASS="MATH"><I>k</I></SPAN> (<!-- MATH
 $5 < k < 15$
 --> <SPAN CLASS="MATH">5 &lt; <I>k</I> &lt; 15</SPAN>). On the same line, separated by single spaces, are <SPAN CLASS="MATH"><I>k</I></SPAN> integers, all between 1 and 300 inclusive, giving the estimated time required to solve each problem. The problems themselves are labeled by alphabetic characters starting with A. Note that there are exactly 300 minutes in the contest.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Each data set generates one line of output, giving the data set number, the sequence the problems are submitted, the total number solved, and the final penalty score. See the sample output for format -- all non-blank entries are separated by single blank spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4
9 25 50 100 150 100 100 150 225 300
10 60 120 99 129 15 150 225 135 50 123
12 6 60 99 45 135 66 231 63 96 39 50 123
15 75 75 75 75 75 75 75 75 75 75 75 75 75 75 75
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Data set 1: A B C D E F G H 8 1450 9
Data set 2: E I A J C B F H D 9 1473
Data set 3: A J D B K F H I C E L 11 1452
Data set 4: A B C D E F G H I J K L 12 2250
</PRE><P>
______________________________________________________
4437||||||false||||||
<P>Marvin, the robot with a brain the size of a planet, followed some . . . markedly less successful robots as the product line developed. One such was Monroe, the robot -- except, to help him recognize his name, he was referred to as Moe. He is sufficiently mentally challenged that he needs external assistance to handle symbolic logic.<P>Polish notation is the prefix symbolic logic notation developed by Jan Lukasiewicz (1929). [Hence postfix expressions are referred to as being in Reverse Polish Notation -- RPN.] The notation developed by Lukasiewicz (referred to as PN below) uses upper-case letters for the logic operators and lower-case letters for logic variables (which can only be <SPAN CLASS="textbf">true</SPAN> or <SPAN CLASS="textbf">false</SPAN>). Since prefix notation is self-grouping, there is no need for precedence, associativity, or parentheses, unlike infix notation. In the following table the PN operator is shown, followed by its operation. Operators not having exactly equivalent C/C++/Java operators are shown in the truth table (using <TT>1</TT> for <SPAN CLASS="textbf">true</SPAN> and <TT>0</TT> for <SPAN CLASS="textbf">false</SPAN>). [The operator J is not found in Lukasiewicz' original work but is included from A.N.Prior's treatment.]<P><P><BR><IMG WIDTH="282" HEIGHT="256" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4437img1.png ALT="$\textstyle \parbox{.5\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert c...
... \\
\hline
\texttt{Jpq} &amp; exclusive or \\
\hline
\end{tabular}
\end{center}}$"><IMG WIDTH="277" HEIGHT="191" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4437img1.png ALT="$\textstyle \parbox{.49\textwidth}{
\begin{center}
\begin{tabular}{\vert c\vert ...
... 0 &amp; 1 &amp; 0 \\
\hline
1 &amp; 1 &amp; 1 &amp; 0 &amp; 1 \\
\hline
\end{tabular}
\end{center}}$"><P>For every combination of PN operators and variables, an expression is a ``well-formed formula" (WFF) if and only if it is a variable or it is a PN operator followed by the requisite number of operands (WFF instances). A combination of symbols will fail to be a ``well-formed formula" if it is composed of a WFF followed by extraneous text, it uses an unrecognized character [uppercase character not in the above table or a non-alphabetic character], or it has insufficient operands for its operators. For invalid expressions, report the <SPAN CLASS="textbf"><SPAN CLASS="textit">first</SPAN></SPAN> error discovered in a left-toright scan of the expression. For instance, immediately report an error on an invalid character. If a valid WFF is followed by extraneous text, report that as the error, even if the extraneous text has an invalid character.<P>In addition, every WFF can be categorized as a tautology (true for all possible variable values), a contradiction (false for all possible variable values), or a contingent expression (true for some variable values, false for other variable values).<P>The simplest contingent expression is simply ``<TT>p</TT>", true when <TT>p</TT> is true, false when <TT>p</TT> is false. One very simple contradiction is ``<TT>KpNp</TT>", both <TT>p</TT> and not-<TT>p</TT> are true. Similarly, one very simple tautology is ``<TT>ApNp</TT>", either <TT>p</TT> is true or not-<TT>p</TT> is true. For a more complex tautology, one expression of De Morgan's Law is ``<TT>EDpqANpNq</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your program is to accept lines until it receives an empty character string. Each line will contain only alphanumeric characters (no spaces or punctuation) that are to be parsed as potential ``WFFs". Each line will contain fewer than 256 characters and will use at most 10 variables. There will be at most 32 non-blank lines before the terminating blank line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each line read in, echo it back, followed by its correctness as a WFF, followed (if a WFF) with its category (tautology, contradiction, or contingent). In processing an input line, immediately terminate and report the line as not a WFF if you encounter an unrecognized operator (even though it may fail to be well-formed in another way as well). If it has extraneous text following the WFF, report it as incorrect. If it has insufficient operands, report that. Use <SPAN CLASS="textbf"><SPAN CLASS="textit">exactly</SPAN></SPAN> the format shown in the Sample Output below.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
q
Cp
Cpq
A01
Cpqr
ANpp
KNpp
Qad
CKNppq
JDpqANpNq
CDpwANpNq
EDpqANpNq
KCDpqANpNqCANpNqDpq
[this is an empty line]
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
q is valid: contingent
Cp is invalid: insufficient operands
Cpq is valid: contingent
A01 is invalid: invalid character
Cpqr is invalid: extraneous text
ANpp is valid: tautology
KNpp is valid: contradiction
Qad is invalid: invalid character
CKNppq is valid: tautology
JDpqANpNq is valid: contradiction
CDpwANpNq is valid: contingent
EDpqANpNq is valid: tautology
KCDpqANpNqCANpNqDpq is valid: tautology
</PRE><P>
______________________________________________________
4438||||||false||||||
<P>You are given the locations of where the <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$">16</SPAN>) PoliceBots have been deployed, and the maximum number ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$"><I>c</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$"><I>n</I></SPAN>) of repair depots that RoboCorp is willing to construct. Your job is to locate these repair depots to minimize the distance any bot has to be transported for repair, and return what that maximum distance is. You can assume that any bot can be repaired at any depot.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The first line contains the integer <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4438img1.png ALT="$ \le$">350</SPAN>), the number of cases. Each case starts with a line containing <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>c</I></SPAN>. Following this line is one line per deployed bot; that line contains two floating point values, separated by a single space, giving the Cartesian coordinates of the bot. Each such value will be between 0.0 and 10.0, inclusive (<SPAN CLASS="textbf">NOTE:</SPAN> the Sample Input shows integer values for brevity).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>You are to print for each input set the minimum value that can be obtained, such that each PoliceBot is within that distance of some depot. You should print your result with at least one digit before and exactly six digits after the decimal point; your value should be within <SPAN CLASS="textbf">5e-7</SPAN> of the true result. To make round-off error less of a concern, the true result will never have a 4 or a 5 as the seventh digit after the decimal point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
9 3
1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
4 2
0 0
1 1
2 4
3 9
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1.000000
2.236068
</PRE><P>
______________________________________________________
4439||||||false||||||
<P>The junctions on the board are labeled <SPAN CLASS="MATH">1,..., <I>N</I></SPAN>, except for two special junctions labeled <TT>+</TT> and <TT>-</TT> where the power supply terminals are connected. The <TT>+</TT> terminal only connects <TT>+</TT> leads, and the <TT>-</TT> terminal only connects <TT>-</TT> leads. All current that enters a junction from the <TT>-</TT> leads of connected components exits through connected <TT>+</TT> leads, but you are able to control how much current flows to each connected <TT>+</TT> lead at every junction (though methods for doing so are beyond the scope of this problem. For those who are electronics-inclined, imagine that you have the ability to adjust the potential on any component without altering its current requirement, or equivalently that there is an accurate variable potentiometer connected in series with each component that you can adjust. Your power supply will have ample potential for the circuit. ). Moreover, you know you have assembled the circuit in such a way that there are no feedback loops (components chained in a manner that allows current to flow in a loop).<P><DIV ALIGN="CENTER"><IMG WIDTH="1207" HEIGHT="455" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="\epsfbox{p4439.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 1: Examples of two valid circuit diagrams. In (a), all components can be powered along directed paths from the positive terminal to the negative terminal. In (b), components 4 and 6 cannot be powered, since there is no directed path from junction 4 to the negative terminal.</DIV><P>In the interest of saving power, and also to ensure that your circuit does not overheat, you would like to use as little current as possible to get your robot to work. What is the smallest amount of current that you need to put through the <TT>+</TT> terminal (which you can imagine all necessarily leaving through the <TT>-</TT> terminal) so that every component on your robot receives its required supply of current to function?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file will contain multiple test cases. Each test case begins with a single line containing two integers: <SPAN CLASS="MATH"><I>N</I></SPAN> ( <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$">50</SPAN>), the number of junctions not including the positive and negative terminals, and <SPAN CLASS="MATH"><I>M</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$">200</SPAN>), the number of components in the circuit diagram. The next <SPAN CLASS="MATH"><I>M</I></SPAN> lines each contain a description of some component in the diagram. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th component description contains three fields: <SPAN CLASS="MATH"><I>p</I><SUB>i</SUB></SPAN>, the positive junction to which the component is connected, <SPAN CLASS="MATH"><I>n</I><SUB>i</SUB></SPAN>, the negative junction to which the component is connected, and an integer <SPAN CLASS="MATH"><I>I</I><SUB>i</SUB></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$"><I>I</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4439.png ALT="$ \le$">100</SPAN>), the minimum amount of current required for component i to function. The junctions pi and ni are specified as either the character `<TT>+</TT>' indicating the positive terminal, the character `<TT>-</TT>' indicating the negative terminal, or an integer (between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN>) indicating one of the numbered junctions. No two components have the same positive junction and the same negative junction. The end-of-file is denoted by an invalid test case with <SPAN CLASS="MATH"><I>N</I> = <I>M</I> = 0</SPAN> and should not be processed.<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each input test case, your program should print out either a single integer indicating the minimum amount of current that must be supplied at the positive terminal in order to ensure that every component is powered, or the message ``<TT>impossible</TT>" if there is no way to direct a sufficient amount of current to each component simultaneously.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 10
+ 1 1
1 2 1
1 3 2
2 4 5
+ - 1
4 3 2
3 5 5
4 6 2
5 - 1
6 5 3
4 6
+ 1 8
1 2 4
1 3 5 
2 4 6
3 - 1
3 4 3
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9
impossible
</PRE><P>
______________________________________________________
4440||||||false||||||
<P>You have been selected to write the navigation module for PropBot. Unfortunately, the mechanical engineers have not provided a lot of flexibility in movement; indeed, the PropBot can only make two distinct movements. It can either move 10 cm forward, or turn towards the right by 45 degrees. Each of these individual movements takes one second of time.<P><DIV ALIGN="CENTER"><IMG WIDTH="483" HEIGHT="444" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4440.png ALT="\epsfbox{p4440.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Your module has two inputs: the Cartesian coordinates of a point on the plane that the PropBot wants to get as close to as possible, and the maximum number of seconds that can be used to do this. At the beginning of the navigation, the robot is located at the origin, pointed in the <SPAN CLASS="MATH">+ <I>x</I></SPAN> direction.<P>The number of seconds will be an integer between 0 and 24, inclusive. Both the <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> coordinates of the desired destination point will be a real number between -100 and 100, inclusive.<P>The first entry in the input file will be the number of test cases, <SPAN CLASS="MATH"><I>t</I></SPAN> (<!-- MATH
 $0 < t \le 100$
 --> <SPAN CLASS="MATH">0 &lt; <I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4440.png ALT="$ \le$">100</SPAN>). Following this line will be <SPAN CLASS="MATH"><I>t</I></SPAN> lines, with each line containing three entries separated by spaces. The first entry will be the number of seconds PropBot has to get close to the point. The second entry is the <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate of the point, and the third entry is the <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate of the point.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Your program must return the distance between the goal point and the closest point the robot can get to within the given time.<P>Your result should include at least one digit to the left of the decimal point, and exactly six digits to the right of the decimal point. To eliminate the chance of round off error affecting the results, we have constructed the test data so the seventh digit to the right of the decimal point of the true result is never a 4 or a 5.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2
24 5.0 5.0
9 7.0 17.0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
0.502525
0.100505

______________________________________________________
4441||||||false||||||
<P>Big Fen Industries has a large web presence. From the outside all looks modern, but the internal interfaces are still built on files consisting of 80-character lines that are a legacy of the punch card days.<P>Normally no one need be aware that data is moving around on 80-character lines in fixed fields, but from time to time it is necessary to add or modify some data. Last week a 30 minute outage, during the busy part of the day, was caused by a line added manually that had some characters in the wrong position. The job of your team is to write a utility that will make it easy to put data into specific locations on 80-character card-image lines.<P>An output card image has 80 characters, numbered 1-80 from the left.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of three types of items, separated by one or more spaces:<P><UL><LI>Position command: a decimal integer in the range 1-80. </LI><LI>String: a sequence of characters, starting with a non-whitespace and non-numeric character that is not `<TT>!</TT>' and ending when that same character occurs again. (Example: <TT>Athis is a stringA</TT>.) The value of the string is the characters without the initial and final delimiting characters. An end-of-line is not allowed in a string, hence it must fit on one line. </LI><LI>Punch command: `<TT>!</TT>'. </LI></UL><P>The input is a series of lines of at most 100 characters, consisting of pairs of positions and strings interspersed with punch commands.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>There is an 80-character output <TT>"</TT>card<TT>"</TT> buffer, initially all blank. The characters making up the value of each string are placed in the buffer starting at the location specified by the preceding position command. Characters added beyond the 80th character in the output buffer are ignored. The punch command causes the buffer to be output (with a final new-line) and reset to all blanks.<P><P><BR><B>For example:</B><P><PRE> 
12 /this is a test/ 20 /1/ !
</PRE><P>results in:<P><PRE> 
           this is 1 test
</PRE><P>Note that there are 11 spaces at the beginning and 55 spaces at the end of this output line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><PRE> 
1 #@# 3 @duplicate the deck@ ! 1 @F@ 2 @0180@ ! 1 @APBP@ 14 @LF00180@
! 1 @#@ !  
1 @this is the first card@ 77 @0010@ ! 
1 @this is the second card@ 77 @0020@ ! 
1 @this is the third card@ 77 @0030@ !
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE> 
@ duplicate the deck                                                            
F0180                                                                           
APBP         LF00180                                                            
#                                                                               
this is the first card                                                      0010
this is the second card                                                     0020
this is the third card                                                      0030
</PRE><P>
______________________________________________________
4442||||||false||||||
Modern data centers often use large storage arrays to hold the
storage used by the servers.  The arrays take a set of physical disk
drives, remap them to LUNs (logical units), then present those LUNs
to the servers.  To the server operating system, these LUNs appear to
be disk drives that are connected to the server, in the same way that
physical drives connected directly by cables do.  The storage arrays
can present logical units of arbitrary sizes, provide built-in
redundancy for reliability, and provide other advanced storage
management features.
<P>
There are several protocols that can be used between servers and
storage arrays, but the most common at present is Fibre Channel.  A
server has one or more Fibre Channel Host Bus Adapter (HBA) ports that
connect to Fibre Channel switch(es).  An array also has one or more
(usually several) Fibre Channel ports that connect to the switches.
Logical paths between the servers and arrays are defined in the
switches-these paths are known as zones.
<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4442.eps}$
 -->
<IMG
 WIDTH="1404" HEIGHT="535" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4442.png
 ALT="\epsfbox{p4442.eps}">
</DIV>

<P>
An array has LUNs of varying sizes defined on it, and these LUNs are
presented to specific servers using specified Fibre Channel ports on
the array.  A LUN may be presented to more than one server.
<P>
Server and array Fibre Channel ports are identified by their ``Port
World Wide Name" (PWWN).  A PWWN is a globally-unique 64-bit address.
A server sees the PWWNs of the arrays it uses storage on; the array
sees the PWWNs of the servers that connect to it.  The server PWWNs
are used to define which servers have access to each LUN.
<P>
Over time, servers are added and removed from large data centers.
The storage administrators are certainly notified when servers are
added so they can create and allocate new LUNs-but they are not
necessarily notified when servers are removed or server
configurations change.  This means that there may be storage on an
array that is configured but not actually in use (``dark" or
``stranded" storage).  It is not unheard of for terabytes of storage
to be stranded in large data centers.
<P>
There are commercial tools that cost thousands of dollars to help
find this storage (among other features).  However, in the interest
of saving money, the management of one such data center has decided
to ask programming contest teams to develop a tool to find stranded
storage instead.

<P>
The relationships between the storage array LUNs, the servers, and
the switches are defined in pairwise relationships:

<P>

<UL>
<LI>A LUN is mapped to a storage port (possibly more than one)
</LI>
<LI>A LUN is masked to a server HBA (possibly more than one)
</LI>
<LI>A storage port has a PWWN
</LI>
<LI>A server has one or more server HBAs, each with a PWWN
</LI>
<LI>A switch zone connects a storage PWWN to a server HBA PWWN
 (a given storage PWWN may be zoned to multiple server HBA PWWNs, and
 a given server HBA PWWN may be zoned to multiple storage PWWNs)
</LI>
<LI>A server file system resides on a LUN or logical volume
 (a LUN may hold multiple server file systems)
</LI>
<LI>A server logical volume uses one or more LUNs
</LI>
</UL>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
These relationships are defined on a series of input lines for your
program.  Each line describes one relationship as described below.
Words in uppercase appear literally in the input.  Elements on a line
are separated from each other by one or more spaces.  
A line may contain leading and/or trailing spaces.
No input line is longer than 80 columns.  Relationships can appear in 
any order in the input.  There will be no more than 3000 relationships.

<P>

<P>
<BR>

<TT>LUNMAP  <!-- MATH
 $< Array \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Array</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< LUN \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>LUN</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< Port \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Port</I>&nbsp;<I>ID</I> &gt;</SPAN> 
<BR>
LUNMASK  <!-- MATH
 $< Array \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Array</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< LUN \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>LUN</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< Server \ PWWN >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>PWWN</I> &gt;</SPAN> 
<BR>
ARRAYPORT  <!-- MATH
 $< Array \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Array</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< Port \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Port</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< Port \ PWWN >$
 -->
<SPAN CLASS="MATH">&lt; <I>Port</I>&nbsp;<I>PWWN</I> &gt;</SPAN> 
<BR>
ZONE  <!-- MATH
 $< Port \ PWWN >$
 -->
<SPAN CLASS="MATH">&lt; <I>Port</I>&nbsp;<I>PWWN</I> &gt;</SPAN> <!-- MATH
 $< Server \ PWWN >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>PWWN</I> &gt;</SPAN> 
<BR>
SERVERHBA  <!-- MATH
 $< Server \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>name</I> &gt;</SPAN> <!-- MATH
 $< Server \ PWWN >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>PWWN</I> &gt;</SPAN> 
<BR>
SERVERFS  <!-- MATH
 $< Server \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>name</I> &gt;</SPAN> <!-- MATH
 $< File \ system \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>File</I>&nbsp;<I>system</I>&nbsp;<I>name</I> &gt;</SPAN> LUN  <!-- MATH
 $< Array \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Array</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< LUN \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>LUN</I>&nbsp;<I>ID</I> &gt;</SPAN> 
<BR>
SERVERFS  <!-- MATH
 $< Server \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>name</I> &gt;</SPAN> <!-- MATH
 $< File \ system \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>File</I>&nbsp;<I>system</I>&nbsp;<I>name</I> &gt;</SPAN> LV  <!-- MATH
 $< Logical \ volume \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Logical</I>&nbsp;<I>volume</I>&nbsp;<I>name</I> &gt;</SPAN> 
<BR>
SERVERLV  <!-- MATH
 $< Server \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Server</I>&nbsp;<I>name</I> &gt;</SPAN> <!-- MATH
 $< Logical \ volume \ name >$
 -->
<SPAN CLASS="MATH">&lt; <I>Logical</I>&nbsp;<I>volume</I>&nbsp;<I>name</I> &gt;</SPAN> <!-- MATH
 $< Array \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>Array</I>&nbsp;<I>ID</I> &gt;</SPAN> <!-- MATH
 $< LUN \ ID >$
 -->
<SPAN CLASS="MATH">&lt; <I>LUN</I>&nbsp;<I>ID</I> &gt;</SPAN> 
<BR></TT>

<P>
Each array ID, port ID, server name, file system name, and logical
volume name is a string of one to twenty alphanumeric characters.  
Case is significant.
<P>
A server HBA or port PWWN is a 64-bit value expressed as eight pairs
of hexadecimal digits separated from each other by colons (for
example, 01:23:45:67:89:AB:CD:EF).  Case is not significant.
<P>
A LUN ID is a hexadecimal value from 0 to FFFF<SPAN CLASS="MATH"><SUB>16</SUB></SPAN>.  Case is not
significant.  The same LUN ID value may be used on different storage
arrays.
<P>
For a storage LUN to be used, it must be mapped to a storage port,
masked to one or more HBAs on one or more servers, connected with one
or more zones between the storage port(s) and the server(s), and then
used on one or more file systems.  A server file system may reside
directly on a LUN or use a logical volume that is made up of one or
more LUNs.
<P>
Your program is to read a set of descriptions as defined above and
determine which storage LUNs are defined in LUN mapping or masking
entries but are not actually in use.
<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
Your program should produce a list of the ``dark" unused LUNs, one per
line.  The list should be sorted by array name in ASCII order, and
within an array, by increasing hexadecimal LUN value.  Each line 
should contain the array name starting in the first column, followed 
immediately by a colon and the four-digit hexadecimal LUN number 
(including leading zeroes, with the values A-F in upper case).
No trailing whitespace is to appear on an output line.
 
<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>
<P>
<PRE> 
LUNMAP S6 1 C1
LUNMAP S6 2 C1
LUNMAP CX 10 SPA0
LUNMAP CX 11 SPA0
LUNMAP CX 10 SPB0
LUNMAP CX 11 SPB0
ARRAYPORT S6 C1   20:00:00:10:00:0A:00:C1
ARRAYPORT CX SPA0 50:06:00:60:00:00:00:00
ARRAYPORT CX SPB0 50:06:00:68:00:00:00:00
 SERVERHBA PRD1    10:00:00:00:C9:01:00:01
 SERVERHBA PRD2    10:00:00:00:C9:01:01:01
 SERVERHBA PRD2    10:00:00:00:C9:01:01:02
LUNMASK S6 1      10:00:00:00:C9:01:00:01
LUNMASK S6 1      10:00:00:00:C9:02:00:01
LUNMASK S6 2      10:00:00:00:C9:02:00:01
 ZONE  20:00:00:10:00:0a:00:C1   10:00:00:00:C9:01:00:01
 ZONE  50:06:00:60:00:00:00:00   10:00:00:00:C9:01:01:01
 ZONE  50:06:00:68:00:00:00:00   10:00:00:00:C9:01:01:02
LUNMASK CX 10     10:00:00:00:C9:01:01:01
LUNMASK CX 11     10:00:00:00:C9:01:01:01
LUNMASK CX 10     10:00:00:00:C9:01:01:02
LUNMASK CX 11     10:00:00:00:C9:01:01:02
SERVERFS PRD1 tempdb LUN S6 1
SERVERFS PRD1 scratchfs LUN S6 2
SERVERFS PRD2 bigsas LV SASLV
SERVERLV PRD2 SASLV CX 11
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>
<P>
<PRE> 
CX:0010
S6:0002
</PRE>

<P>

______________________________________________________
4443||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><title>404 Not Found</title> </head><body><h1>Not Found</h1><p>The requested URL /external/44/4443.html was not found on this server.</p><hr><address>Apache Server at livearchive.onlinejudge.org Port 80</address></body></html>
______________________________________________________
4444||||||false||||||
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"><html><head><title>404 Not Found</title> </head><body><h1>Not Found</h1><p>The requested URL /external/44/4444.html was not found on this server.</p><hr><address>Apache Server at livearchive.onlinejudge.org Port 80</address></body></html>
______________________________________________________
4445||||||false||||||
<P>
If you think participating in a programming contest is stressful, imagine being an air traffic controller. With human lives at stake, an air traffic controller has to focus on tasks while working under constantly changing conditions as well as dealing with unforeseen events. 

<P>
Consider the task of scheduling the airplanes that are landing at an airport. Incoming airplanes report their positions, directions, and speeds, and then the controller has to devise a landing schedule that brings all airplanes safely to the ground. Generally, the more time there is between successive landings, the ``safer" a landing schedule is. This extra time gives pilots the opportunity to react to changing weather and other surprises. 

<P>
Luckily, part of this scheduling task can be automated - this is where you come in. You will be given scenarios of airplane landings. Each airplane has a time window during which it can safely land. You must compute an order for landing all airplanes that respects these time windows. Furthermore, the airplane landings should be stretched out as much as possible so that the minimum time gap between successive landings is as large as possible. For example, if three airplanes land at 10:00am, 10:05am, and 10:15am, then the smallest gap is five minutes, which occurs between the first two airplanes. Not all gaps have to be the same, but the smallest gap should be as large as possible. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input file contains several test cases consisting of descriptions of landing scenarios. Each test case starts with a line containing a single integer <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(2 \le n \le 8)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4445img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4445img1.png
 ALT="$ \le$">8)</SPAN>, which is the number of airplanes in the scenario. This is followed by <SPAN CLASS="MATH"><I>n</I></SPAN> lines, each containing two integers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN>, which give the beginning and end of the closed interval <!-- MATH
 $[a_{i}, b_{i}]$
 -->
<SPAN CLASS="MATH">[<I>a</I><SUB>i</SUB>, <I>b</I><SUB>i</SUB>]</SPAN> during which the <SPAN CLASS="MATH"><I>i</I></SPAN>-th plane can land safely. The numbers <SPAN CLASS="MATH"><I>a</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>b</I><SUB>i</SUB></SPAN> are specified in minutes and satisfy <!-- MATH
 $0 \le a_i \le b_i \le 1440$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4445img1.png
 ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4445img1.png
 ALT="$ \le$"><I>b</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4445img1.png
 ALT="$ \le$">1440</SPAN>. 

<P>
The input is terminated with a line containing the single integer zero. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case in the input, print its case number (starting with 1) followed by the minimum achievable time gap between successive landings. Print the time split into minutes and seconds, rounded to the closest second. Follow the format of the sample output. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
0 10 
5 15 
10 15 
2 
0 10 
10 20 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 7:30 
Case 2: 20:00
</PRE> 

<P>

______________________________________________________
4446||||||false||||||
<P>A logic circuit maps its input through various gates to its output with no feedback loops in the circuit. The input and output are an ordered set of logical values, represented here by ones and zeros. The circuits we consider are comprised of <SPAN CLASS="textit">and</SPAN> gates (which output 1 only when their two inputs are both 1), <SPAN CLASS="textit">or</SPAN> gates (which output 1 when one or both of their inputs are 1), <SPAN CLASS="textit">exclusive or</SPAN> (xor) gates (which output 1 only when exactly one of the two inputs is 1), and <SPAN CLASS="textit">not</SPAN> gates (which output the complement of their single input). The figures below show two circuits.<P><DIV ALIGN="CENTER"><IMG WIDTH="1051" HEIGHT="327" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4446.png ALT="\epsfbox{p4446.eps}"></DIV><P>Unfortunately, real gates sometimes fail. Although the failures may occur in many different ways, this problem limits attention to gates that fail in one of three ways: 1) always inverting the correct output, 2) always yielding 0, and 3) always yielding 1. In the circuits for this problem, at most one gate will fail.<P>You must write a program that analyzes a circuit and a number of observations of its input and output to see if the circuit is performing correctly or incorrectly. If at least one set of inputs produces the wrong output, your program must also attempt to determine the unique failing gate and the way in which this gate is failing. This may not always be possible.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases, each representing a circuit with input and output descriptions. Each test case has the following parts in order.<P><UL><LI>A line containing three positive integers giving the number of inputs <SPAN CLASS="MATH">(<I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4446.png ALT="$ \le$">8)</SPAN>, the number of gates <SPAN CLASS="MATH">(<I>G</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4446.png ALT="$ \le$">19)</SPAN>, and the number of outputs <SPAN CLASS="MATH">(<I>U</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4446.png ALT="$ \le$">19)</SPAN> in the circuit. </LI><LI>One line of input for each gate. The first line describes gate <SPAN CLASS="MATH"><I>g</I><SUB>1</SUB></SPAN>. If there are several gates, the next line describes gate <SPAN CLASS="MATH"><I>g</I><SUB>2</SUB></SPAN>, and so on. Each of these lines contains the gate type (<TT>a</TT> = <SPAN CLASS="textit">and</SPAN>, <TT>n</TT> = <SPAN CLASS="textit">not</SPAN>, <TT>o</TT> = <SPAN CLASS="textit">or</SPAN>, and <TT>x</TT> = <SPAN CLASS="textit">exclusive or</SPAN>), and identification of the input(s) to the gate. Gate input comes from the circuit inputs (<TT>i1</TT>, <TT>i2</TT>, ...) or the output of another gate (<TT>g1</TT>, <TT>g2</TT>, ...). </LI><LI>A line containing the numbers of the gates connected to the <SPAN CLASS="MATH"><I>U</I></SPAN> outputs <SPAN CLASS="MATH"><I>u</I><SUB>1</SUB>, <I>u</I><SUB>2</SUB>,...</SPAN>. For example, if there are three outputs, and <SPAN CLASS="MATH"><I>u</I><SUB>1</SUB></SPAN> comes from <SPAN CLASS="MATH"><I>g</I><SUB>5</SUB></SPAN>, <SPAN CLASS="MATH"><I>u</I><SUB>2</SUB></SPAN> from <SPAN CLASS="MATH"><I>g</I><SUB>1</SUB></SPAN>, and <SPAN CLASS="MATH"><I>u</I><SUB>3</SUB></SPAN> from <SPAN CLASS="MATH"><I>g</I><SUB>4</SUB></SPAN>, then the line would contain: <TT>5 1 4</TT> </LI><LI>A line containing an integer which is the number of observations of the circuit's behavior (<SPAN CLASS="MATH"><I>B</I></SPAN>). </LI><LI>Finally <SPAN CLASS="MATH"><I>B</I></SPAN> lines, each containing <SPAN CLASS="MATH"><I>N</I></SPAN> values (ones and zeros) giving the observed input values and <SPAN CLASS="MATH"><I>U</I></SPAN> values giving the corresponding observed output values. No two observations have the same input values. </LI></UL><P><P><BR>Consecutive entries on any line of the input are separated by a single space. The input is terminated with a line containing three zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each circuit in the input, print its case number (starting with 1), followed by a colon and a blank, and then the circuit analysis, which will be one of the following (with <code>#</code> replaced by the appropriate gate number):<P><PRE>
No faults detected 
Gate # is failing; output inverted 
Gate # is failing; output stuck at 0 
Gate # is failing; output stuck at 1 
Unable to totally classify the failure
</PRE><P><P><BR>The circuits pictured in Figure 1 and Figure 2 are used in the first and last sample test cases.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 2 1 
o i1 i2 
n g1 
2 
2 
1 0 0 
0 0 1 
2 1 1 
a i1 i2 
1 
1 
1 0 1 
2 1 1 
a i1 i2 
1 
2 
1 0 1 
1 1 1 
1 1 1 
n i1 
1 
2 
1 1 
0 0 
3 4 4 
n g4 
a i1 i2 
o i2 i3 
x i3 i1 
2 3 4 1 
4 
0 1 0 0 1 0 1
0 1 1 0 1 1 0
1 1 1 0 1 0 1
0 0 0 0 0 0 1
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: No faults detected 
Case 2: Unable to totally classify the failure 
Case 3: Gate 1 is failing; output stuck at 1 
Case 4: Gate 1 is failing; output inverted 
Case 5: Gate 2 is failing; output stuck at 0
</PRE><P>
______________________________________________________
4447||||||false||||||
<P>Carl the ant is back! When we last left him (Problem A, 2004 World Finals), Carl was a little mixed-up, always taking strange, zigzag paths when traveling. But now, Carl has straightened out his life - literally. He now always takes the straightest, shortest path between any pair of points. This sounds simple, except for one small thing: Carl now spends most of his time on a paperweight in the shape of a regular octahedron. You may recall that an octahedron is one of the five Platonic solids and consists of eight equilateral triangles, as shown in Figure 3.<P><DIV ALIGN="CENTER"><IMG WIDTH="732" HEIGHT="662" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="\epsfbox{p4447.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 3: Regular octahedron</DIV><P>Carl has an innate (some say in-ant) ability to always take the shortest path when going from any starting point to any destination point on the paperweight. Your job is to verify this by determining the length of the shortest path when given two such points, not necessarily distinct.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains multiple test cases. Each test case consists of four integers <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Theta_{{1}}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Phi_{{1}}^{}$"></SPAN>, <SPAN CLASS="MATH"><IMG WIDTH="26" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Theta_{{2}}^{}$"></SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="24" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Phi_{{2}}^{}$"></SPAN>, where <!-- MATH
 $0 \le \Theta_{i} < 360$
 --><SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \le$"><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Theta_{{i}}^{}$"> &lt; 360</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \le$"><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Phi_{{i}}^{}$"><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \le$">180</SPAN>. The first two are the spherical coordinates of the start point, and the last two are the spherical coordinates of the destination point. As shown in Figure 3, <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Theta_{{i}}^{}$"></SPAN> is the <SPAN CLASS="textit">azimuth</SPAN> and <SPAN CLASS="MATH"><IMG WIDTH="23" HEIGHT="32" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4447.png ALT="$ \Phi_{{i}}^{}$"></SPAN> is the <SPAN CLASS="textit">zenith angle</SPAN>, both of them given in degrees.<P>The input is terminated by a line containing four negative ones.<P>The paperweight is fixed for all test cases as follows: the octahedron is centered on the origin and each vertex lies on one of the axes. Every edge is exactly 10 cm long. You should suppose that Carl's size is zero and ignore any supporting mechanisms that may be necessary to hold the paperweight in the correct position.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1) and the length in centimeters of the shortest path from the start point to the destination point, rounded to the nearest thousandth. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
0 90 90 90
0 90 90 45
0 0 0 180
-1 -1 -1 -1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10.000
Case 2: 8.660
Case 3: 17.321
</PRE><P>
______________________________________________________
4448||||||false||||||
<P>Allied Conduit Manufacturing (ACM) makes metal conduit tubes with round cross-sections that enclose many different types of wires. The circular cross-section of a wire can have a diameter up to 20 millimeters (20000 micrometers). ACM needs a program to compute the minimum diameter of a conduit that can hold 4 wires with specified diameters.<P>Figure 4 shows examples of fitting four wires of different sizes into conduits of minimum diameters.<P><DIV ALIGN="CENTER"><IMG WIDTH="1188" HEIGHT="377" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4448.png ALT="\epsfbox{p4448.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 4: Fitting wires inside conduits</DIV><P>Your program must take the diameters of wires and determine the minimum inside diameter of the conduit that can hold the wires.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains several test cases. Each test case consists of a line with four integers, <SPAN CLASS="MATH"><I>d</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>d</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>d</I><SUB>3</SUB></SPAN>, and <SPAN CLASS="MATH"><I>d</I><SUB>4</SUB></SPAN>, which are the diameters of the wires in micrometers. The integers satisfy <SPAN CLASS="MATH">20000<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4448.png ALT="$ \ge$"><I>d</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4448.png ALT="$ \ge$"><I>d</I><SUB>2</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4448.png ALT="$ \ge$"><I>d</I><SUB>3</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4448.png ALT="$ \ge$"><I>d</I><SUB>4</SUB> &gt; 0</SPAN>. The last test case is followed by a line containing a single integer zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the number of the test case (starting with 1) followed by the minimum conduit diameter in micrometers, rounded to the nearest integer. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10000 10000 10000 10000 
10000 10000 10000 3000 
12000 12000 3600 3600 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 24142 
Case 2: 21547 
Case 3: 24000
</PRE><P>
______________________________________________________
4449||||||false||||||
<P>
Handling traffic congestion is a difficult challenge for young urban planners. Millions of drivers, each with different goals and each making independent choices, combine to form a complex system with sometimes predictable, sometimes chaotic behavior. As a devoted civil servant, you have been tasked with optimizing rushhour traffic over collections of roads. 

<P>
All the roads lie between a residential area and a downtown business district. In the morning, each person living in the residential area drives a route to the business district. The morning commuter traffic on any particular road travels in only one direction, and no route has cycles (morning drivers do not backtrack). 

<P>
Each road takes a certain time to drive, so some routes are faster than others. Drivers are much more likely to choose the faster routes, leading to congestion on those roads. In order to balance the traffic as much as possible, you are to add tolls to some roads so that the perceived ``cost" of every route ends up the same. However, to avoid annoying drivers too much, you must not levy a toll on any driver twice, no matter which route he or she takes. 

<P>
Figure 5 shows a collection of five roads that form routes from the residential area (at intersection 1) to the downtown business district (at intersection 4). The driving cost of each road is written in large blue font. The dotted arrows show the three possible routes from 1 to 4. Initially the costs of the routes are 10, 8 and 12. After adding a toll of cost 2 to the road connecting 1 and 4 and a toll of cost 4 to the road connecting 3 and 4, the cost of each route becomes 12.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4449.eps}$
 -->
<IMG
 WIDTH="1032" HEIGHT="537" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="\epsfbox{p4449.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Figure 5: Roads connecting residential area at intersection 1 to business district at intersection 4

</DIV>

<P>
You must determine which roads should have tolls and how much each toll should be so that every route from start to finish has the same cost (driving time cost + possible toll) and no route contains more than one toll road. Additionally, the tolls should be chosen so as to minimize the final cost. In some settings, it might be impossible to impose tolls that satisfy the above conditions. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input consists of several test cases. A test case starts with a line containing an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(2 \le N \le 50000)$
 -->
<SPAN CLASS="MATH">(2<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$">50000)</SPAN>, which is the number of road intersections, and <SPAN CLASS="MATH"><I>R</I></SPAN> <!-- MATH
 $(1 \le R \le 50000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$"><I>R</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$">50000)</SPAN>, which is the number of roads. Each of the next <SPAN CLASS="MATH"><I>R</I></SPAN> lines contains three integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN>, and <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> <!-- MATH
 $(1 \le x_{i}, y_{i} \le N, 1 \le c_{i} \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$"><I>x</I><SUB>i</SUB>, <I>y</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$"><I>N</I>, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$"><I>c</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4449.png
 ALT="$ \le$">1000)</SPAN>, indicating that morning traffic takes road i from intersection <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> to intersection <SPAN CLASS="MATH"><I>y</I><SUB>i</SUB></SPAN> with a base driving time cost of <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN>. Intersection 1 is the starting residential area, and intersection <SPAN CLASS="MATH"><I>N</I></SPAN> is the goal business district. Roads are numbered from 1 to <SPAN CLASS="MATH"><I>R</I></SPAN> in the given input order. Every intersection is part of a route from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>, and there are no cycles. 

<P>
The last test case is followed by a line containing two zeros. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, print one line containing the case number (starting with 1), the number of roads to toll (<SPAN CLASS="MATH"><I>T</I></SPAN>), and the final cost of every route. On the next <SPAN CLASS="MATH"><I>T</I></SPAN> lines, print the road number <SPAN CLASS="MATH"><I>i</I></SPAN> and the positive cost of the toll to apply to that road. If there are multiple minimal cost solutions, any will do. If there are none, print `<TT>No solution</TT>'. Follow the format of the sample output.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 5 
1 3 5 
3 2 1 
2 4 6 
1 4 10 
3 4 3 
3 4 
1 2 1 
1 2 2 
2 3 1 
2 3 2 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
Case 1: 2 12 
4 2 
5 4 
Case 2: No solution
</PRE>

<P>

______________________________________________________
4450||||||false||||||
<P>Uncle Magnus has planted some young saplings on his farm as part of his reforestation project. Unfortunately, deer like to eat tender sapling shoots and leaves, making it necessary to build protective fences around them. Since deer and other sapling nibblers can reach partway over the fence, every fence must lie at least a minimum distance (a <SPAN CLASS="textit">margin</SPAN>) from each sapling.<P>Deer-proof fencing is quite expensive, so Uncle Magnus wants to minimize the total length of fencing used. Your job is to write a program that computes the minimum length of fencing that is required to enclose and protect the saplings. Fences may include both straight and curved segments. You may design a single fence that encloses all saplings or multiple fences that enclose separate groups of saplings.<P>Figure 6 shows two example configurations, each consisting of three saplings with different margin requirements. In the top configuration, which corresponds to the first sample input, the minimum-length solution consists of two separate fences. In the bottom configuration, which corresponds to the second sample input, the minimum-length solution consists of a single fence.<P><DIV ALIGN="CENTER"><IMG WIDTH="1033" HEIGHT="974" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4450.png ALT="\epsfbox{p4450.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 6: Deer-proof fences.</DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases. The first line of each test case contains integers <SPAN CLASS="MATH"><I>N</I></SPAN> <!-- MATH
 $(0 < N \le 9)$
 --><SPAN CLASS="MATH">(0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4450.png ALT="$ \le$">9)</SPAN>, which is the number of saplings, and <SPAN CLASS="MATH"><I>M</I></SPAN> <!-- MATH
 $(0 < M \le 200)$
 --><SPAN CLASS="MATH">(0 &lt; <I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4450.png ALT="$ \le$">200)</SPAN>, which is the margin required around each sapling. This line is followed by <SPAN CLASS="MATH"><I>N</I></SPAN> additional lines. Each of these <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains two integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> that describe the Cartesian coordinates of a sapling ( <SPAN CLASS="MATH">| <I>x</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4450.png ALT="$ \le$">100</SPAN> and <SPAN CLASS="MATH">| <I>y</I>|<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4450.png ALT="$ \le$">100</SPAN>). No two saplings are in the same location. For simplicity the saplings can all be considered as points and the thickness of deer-proof fences can be considered zero.<P>The last test case is followed by a line containing two zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1) followed by the minimum total length of fencing required to protect the saplings with the given margin. Print the length with two digits to the right of the decimal point. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 
0 0 
2 0 
10 0 
3 4 
0 0 
2 0 
10 0 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: length = 29.13 
Case 2: length = 45.13
</PRE><P>
______________________________________________________
4451||||||false||||||
<P>Axel and Birgit like to play a card game in which they build a house of cards, gaining (or losing) credits as they add cards to the house. Since they both have very steady hands, the house of cards never collapses. They use half a deck of standard playing cards. A standard deck has four suits, two are red and two are black. Axel and Birgit use only two suits, one red, one black. Each suit has 13 ranks. We use the notation <TT>1R</TT>, <TT>2R</TT>, <SPAN CLASS="MATH">...</SPAN>, <TT>13R</TT>, <TT>1B</TT>, <TT>2B</TT>, <SPAN CLASS="MATH">...</SPAN>, <TT>13B</TT> to denote ranks and colors.<P>The players begin by selecting a subset of the cards, usually all cards of rank up to some maximum value <SPAN CLASS="MATH"><I>M</I></SPAN>. After shuffling the modified deck, they take eight cards from the top of the deck and place them consecutively from left to right to form four ``peaks." For instance, if <SPAN CLASS="MATH"><I>M</I> = 13</SPAN> and if the first ten cards (from 26) are:<P><TT>6B 3R 5B 2B 1B 5R 13R 7B 11R 1R</TT> <SPAN CLASS="MATH">...</SPAN><P>then the game starts off with four peaks and three valleys as shown in Figure 7.<P><DIV ALIGN="CENTER"><IMG WIDTH="469" HEIGHT="190" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4451.png ALT="\epsfbox{p4451.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 7: Peaks and valleys formed by the top 8 cards in the deck.</DIV><P>The remaining cards are placed face up, in a single row.<P>Each player is identified with a color, red or black. Birgit is always black and Axel is always red. The color of the first card used for the peaks and valleys determines which player has the first turn. For the example in Figure 7, Birgit has the first turn since the first card is <TT>6B</TT>.<P>Players alternate taking turns. A turn consists of removing the card from the front of the row of cards and then doing one of the following:<P><OL><LI>Holding the card until the next turn (this is a ``held card"). </LI><LI>Covering the valley between two peaks with the drawn card or the held card, forming a ``floor". The remaining card, if any, is held. </LI><LI>Placing two cards over a floor, forming a peak (one of the cards must be a ``held'' card). </LI></OL><P>Not all options are always available. At most one card may be held at any time, so the first option is possible only if the player is not already holding a card.<P>Since the cards in the row are face up, both players know beforehand the order in which the cards are drawn.<P>If the player forms a downward-pointing triangle by adding a floor, or an upward-pointing triangle by adding a peak, then the scores are updated as follows. The sum of the ranks of the three cards in the triangle is added to the score of the player whose color is the same as the majority of cards in the triangle. If no triangle is formed during a play, both scores remain unchanged.<P>In the example from Figure 7, if Birgit places her card (<TT>11R</TT>) on the middle valley, she gains 14 points. If she places her card on the left valley, Axel gains 19 points. If she places her card on the right valley, Axel gains 29 points.<P>If no more cards remain to be drawn at the end of a turn, the game is over. If either player holds a card at this time, the rank of that card is added to (subtracted from) that player's score if the color of the card is the same as (different from) that player's color.<P>When the game is over, the player with the lower score pays a number of Swedish Kronor (Kronor is the plural of Krona) equal to the difference between the two scores to the other player. In case of a tie there is no pay out.<P>You must write a program that takes a description of a shuffled deck and one of the players' names and find the highest amount that player can win (or the player's minimum loss), assuming that the other player always makes the best possible moves.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input file contains multiple test cases representing different games. Each test case consists of a name (either `<TT>Axel</TT>' or `<TT>Birgit</TT>'), followed by a maximum rank <SPAN CLASS="MATH"><I>M</I></SPAN> ( <SPAN CLASS="MATH">5<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4451.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4451.png ALT="$ \le$">13</SPAN>), followed by the rank and color of the <SPAN CLASS="MATH">2<I>M</I></SPAN> cards in the deck in their shuffled order. Every combination of rank (from 1 through <SPAN CLASS="MATH"><I>M</I></SPAN>) and color will appear once in this list. The first eight cards form the initial row of peaks from left to right in the order drawn, and the remaining items show the order of the rest of the cards.<P>The final test case is followed by a line containing the word `<TT>End</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the test case number (starting with 1), the name of the player for the test case, and the amount that the player wins or loses. If there is a tie, indicate this instead of giving an amount. Follow the sample output format.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
Axel 
5 
1R 2R 3R 4R 5R 5B 4B 3B 2B 1B 
Birgit 
5 
1R 2R 3R 4R 5R 5B 4B 3B 2B 1B 
Birgit 
5 
1R 1B 3R 4R 5R 5B 4B 3B 2R 2B 
End
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: Axel wins 1 
Case 2: Birgit loses 1 
Case 3: Axel and Birgit tie
</PRE><P>
______________________________________________________
4452||||||false||||||
<P>
The ministers of the remote country of Stanistan are having severe problems with their decision making. It all started a few weeks ago when a new process for deciding which bills to pass was introduced. This process works as follows. During each voting session, there are several bills to be voted on. Each minister expresses an opinion by voting either ``yes" or ``no" for some of these bills. Because of limitations in the design of the technical solution used to evaluate the actual voting, each minister may vote on only at most four distinct bills (though this does not tend to be a problem, as most ministers only care about a handful of issues). Then, given these votes, the bills that are accepted are chosen in such a way that each minister gets more than half of his or her opinions satisfied. 

<P>
As the astute reader has no doubt already realized, this process can lead to various problems. For instance, what if there are several possible choices satisfying all the ministers, or even worse, what if it is impossible to satisfy all the ministers? And even if the ministers' opinions lead to a unique choice, how is that choice found? 

<P>
Your job is to write a program to help the ministers with some of these issues. Given the ministers' votes, the program must find out whether all the ministers can be satisfied, and if so, determine the decision on those bills for which, given the constraints, there is only one possible choice. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
Input consists of multiple test cases. Each test case starts with integers <SPAN CLASS="MATH"><I>B</I></SPAN> <!-- MATH
 $(1 \le B \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$"><I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$">100)</SPAN>, which is the number of distinct bills to vote on, and <SPAN CLASS="MATH"><I>M</I></SPAN> <!-- MATH
 $(1 \le M \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$">500)</SPAN>, which is the number of ministers. The next <SPAN CLASS="MATH"><I>M</I></SPAN> lines give the votes of the ministers. Each such line starts with an integer <!-- MATH
 $1 \le k \le 4$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4452img1.png
 ALT="$ \le$">4</SPAN>, indicating the number of bills that the minister has voted on, followed by the <SPAN CLASS="MATH"><I>k</I></SPAN> votes. Each vote is of the format <!-- MATH
 $<bill> <vote>$
 -->
<SPAN CLASS="MATH">&lt; <I>bill</I> &gt; &lt; <I>vote</I> &gt;</SPAN>, where <SPAN CLASS="MATH">&lt; <I>bill</I> &gt;</SPAN> is an integer between 1 and <SPAN CLASS="MATH"><I>B</I></SPAN> identifying the bill that is voted on, and <SPAN CLASS="MATH">&lt; <I>vote</I> &gt;</SPAN> is either `<TT>y</TT>' or `<TT>n</TT>', indicating that the minister's opinion is ``yes" or ``no." No minister votes on the same bill more than once. The last test case is followed by a line containing two zeros. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
For each test case, print the test case number (starting with 1) followed by the result of the process. If it is impossible to satisfy all ministers, the result should be `<TT>impossible</TT>'. Otherwise, the result should be a string of length <SPAN CLASS="MATH"><I>B</I></SPAN>, where the <SPAN CLASS="MATH"><I>i</I></SPAN>-th character is `<TT>y</TT>', `<TT>n</TT>', or `<TT>?</TT>', depending on whether the decision on the <SPAN CLASS="MATH"><I>i</I></SPAN>-th bill should be ``yes," whether it should be ``no," or whether the given votes do not determine the decision on this bill. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
5 2 
4 2 y 5 n 3 n 4 n
4 4 y 3 y 5 n 2 y 
4 2 
4 1 y 2 y 3 y 4 y 
3 1 n 2 n 3 n 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: ?y??n 
Case 2: impossible
</PRE>

<P>

______________________________________________________
4453||||||false||||||
<P><SPAN CLASS="textit">Struts</SPAN> and <SPAN CLASS="textit">springs</SPAN> are devices that determine the way in which rectangular windows on a screen are resized or repositioned when the enclosing window is resized. A window occupies a rectangular region of the screen, and it can enclose other windows to yield a hierarchy of windows. When the outermost window is resized, each of the immediately enclosed windows may change position or size (based on the placement of struts and springs); these changes may then affect the position and/or size of the windows they enclose.<P>A <SPAN CLASS="textit">strut</SPAN> is conceptually a fixed length rod placed between the horizontal or vertical edges of a window, or between an edge of a window and the corresponding edge of the immediately enclosing window. When a strut connects the vertical or horizontal edges of a window, then the height or width of that window is fixed. Likewise, when a strut connects an edge of a window to the corresponding edge of the immediately enclosing window, then the distance between those edges is fixed. <SPAN CLASS="textit">Springs</SPAN>, however, may be compressed or stretched, and may be used in place of struts.<P>Each window except the outermost has six struts or springs associated with it. One connects the vertical edges of the window, and another connects the horizontal edges of the window. Each of the other four struts or springs connects an edge of the window with the corresponding edge of the enclosing window. The sum of the lengths of the three vertical struts or springs equals the height of the enclosing window; similarly, the sum of the lengths of the three horizontal struts or springs equals the width of the enclosing window. When the enclosing window's width changes, any horizontal springs connected to the window are stretched or compressed in equal proportion, so that the new total length of struts and springs equals the new width. A similar action takes place for a change in the enclosing window's height. If all three vertical or horizontal components are struts, then the top or rightmost strut, respectively, is effectively replaced by a spring.<P>You must write a program that takes the initial sizes and positions of a set of windows (with one window guaranteed to enclose all others), the placement of struts and springs, and requests to resize the outermost window and then determines the modified size and position of each window for each size request.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple test cases corresponding to different sets of windows. Each test case begins with a line containing four integers <SPAN CLASS="MATH"><I>nwin</I></SPAN>, <SPAN CLASS="MATH"><I>nresize</I></SPAN>, <SPAN CLASS="MATH"><I>owidth</I></SPAN>, and <SPAN CLASS="MATH"><I>oheight</I></SPAN>. <SPAN CLASS="MATH"><I>nwin</I></SPAN> is the number of windows (excluding the outer window which encloses all others), <SPAN CLASS="MATH"><I>nresize</I></SPAN> is the number of outer window resize requests, and <SPAN CLASS="MATH"><I>owidth</I></SPAN> and <SPAN CLASS="MATH"><I>oheight</I></SPAN> are the initial width and height of the outer window.<P>Each of the next <SPAN CLASS="MATH"><I>nwin</I></SPAN> lines contains 10 non-negative integers and describes a window. The first two integers give the initial <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> displacement of the upper left corner of the window with respect to the upper left corner of the outermost window. The next two integers give the initial width and height of the window. Each of the final six integers is either 0 (for a strut) or 1 (for a spring). The first two specify whether a strut or spring connects the vertical and horizontal edges of the window respectively, and the last four specify whether a strut or spring connects the tops, bottoms, left sides and right sides of the window and its immediately enclosing window.<P>Each of the last <SPAN CLASS="MATH"><I>nresize</I></SPAN> lines in a test gives a new width and height for the outermost window - a resize operation. For each of these, your program must determine the size and placement of each of the <SPAN CLASS="MATH"><I>nwin</I></SPAN> inner windows. The test data is such that, after every resizing operation, every strut and spring has a positive integral length, and different window boundaries do not touch. Also, resizing never causes one window to jump inside another.<P>There are at most 100 windows and 100 resize operations in a test case, and the outermost window's width and height never exceed 1,000,000. The last test case is followed by a line with four zeros.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each resize operation in a test case, print the test case number (starting with 1) followed by the resize operation number <SPAN CLASS="MATH">(1, 2,...)</SPAN> on a line by itself. Then on each of the next <SPAN CLASS="MATH"><I>nwin</I></SPAN> lines, print the window number, position (<SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>) and size (width and height) of each of the inner windows of the test case as a result of resizing the outer window. Windows in each test case are numbered sequentially <SPAN CLASS="MATH">(1, 2,...)</SPAN> to match their position in the input, and should be output in that order. Follow the format shown in the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 1 50 100 
10 10 30 10 1 0 0 0 0 0
70 150 
2 1 50 100 
10 10 30 10 1 0 0 0 0 0
10 80 20 10 1 1 0 0 0 0
70 150 
1 2 60 60 
10 10 20 30 1 0 1 1 1 1
90 90 
120 120 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1, resize operation 1: 
    Window 1, x = 10, y = 60, width = 50, height = 10
Case 2, resize operation 1: 
    Window 1, x = 10, y = 60, width = 50, height = 10
    Window 2, x = 10, y = 80, width = 40, height = 60
Case 3, resize operation 1: 
    Window 1, x = 15, y = 20, width = 30, height = 30
Case 3, resize operation 2: 
    Window 1, x = 20, y = 30, width = 40, height = 30
</PRE><P>
______________________________________________________
4454||||||false||||||
<P>Like most modern cities, Stockholm has a well-developed public transportation system. The heart of public transportation in Stockholm is the subway. A topological map of the subway system illustrates the different subway lines and how they are connected, as illustrated in Figure 8. For this problem you should assume that a subway map is always tree-shaped, even though this is not quite true for Stockholm because of the cycle formed by the green and blue lines.<P><DIV ALIGN="CENTER"><IMG WIDTH="1121" HEIGHT="775" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="\epsfbox{p4454.eps}"></DIV><P><DIV ALIGN="CENTER">Figure 8: Stockholm subway map</DIV><P>A topological map says very little about the geometry of a subway system, such as the distances (and consequently travel times) between different subway stations. For instance, as most students in Stockholm know, the distance between ``<SPAN CLASS="textit">Tekniska H&#246;gskolan</SPAN>" (The Royal Institute of Technology) and ``<SPAN CLASS="textit">Universitetet</SPAN> (Stockholm University) is quite large, even though there is no indication of this on the map.<P>You must write a program that can augment a topological map by writing down the time required to travel between every pair of adjacent subway stations. Fortunately, those travel times are known, so you do not have to measure the times yourself. But the actual travel times are given in seconds, while the times must be written on the map as estimates of integral numbers of minutes.<P>A natural way of estimating times might be to simply round all the travel times to the nearest minute. However, this can cause huge cumulative errors. For instance, in the Stockholm map, this estimation method could result in an error as large as 15 minutes in the total travel time between some pairs of stations. In order to counter this, your program may choose to round some travel times up and round other travel times down. The rounding must be done in such a way that the largest cumulative error between any pair of stations is minimized.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each test case starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$">100)</SPAN>, which is the number of subway stations. The <SPAN CLASS="MATH"><I>N</I></SPAN> stations are identified using the integers from 1 to <SPAN CLASS="MATH"><I>N</I></SPAN>. Each of the next <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> lines contains three integers <SPAN CLASS="MATH"><I>a</I></SPAN>, <SPAN CLASS="MATH"><I>b</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$"><I>a</I>, <I>b</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$"><I>N</I></SPAN>, and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$"><I>t</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4454.png ALT="$ \le$">300</SPAN>), indicating that stations <SPAN CLASS="MATH"><I>a</I></SPAN> and <SPAN CLASS="MATH"><I>b</I></SPAN> are adjacent and that it takes <SPAN CLASS="MATH"><I>t</I></SPAN> seconds to travel between them. For simplicity, ignore the time a train spends standing still at a station.<P>The last test case is followed by the integer zero on a line by itself.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (starting with 1) then the largest rounding error in seconds of travel time between any pair of stations when the times for adjacent pairs of stations are rounded optimally. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
1 2 110 
4 
1 2 40 
2 3 40 
3 4 40 
4 
1 2 90 
1 3 90 
1 4 90 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 10 
Case 2: 40 
Case 3: 60
</PRE><P>
______________________________________________________
4455||||||false||||||
<P>As computer programmers, you have likely heard about regular expressions and context-free grammars. These are rich ways of generating sets of strings over a small alphabet (otherwise known as a formal language). There are other, more esoteric ways of generating languages, such as tree-adjoining grammars, context-sensitive grammars, and unrestricted grammars. This problem uses a new method for generating a language: a suffixreplacement grammar.<P>A suffix-replacement grammar consists of a starting string <SPAN CLASS="MATH"><I>S</I></SPAN> and a set of suffix-replacement rules. Each rule is of the form <SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"> <I>Y</I></SPAN>, where <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> are equal-length strings of alphanumeric characters. This rule means that if the suffix (that is, the rightmost characters) of your current string is <SPAN CLASS="MATH"><I>X</I></SPAN>, you can replace that suffix with <SPAN CLASS="MATH"><I>Y</I></SPAN>. These rules may be applied arbitrarily many times.<P>For example, suppose there are 4 rules A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> B, AB <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BA, AA <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> CC, and CC <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BB. You can then transform the string AA to BB using three rule applications: AA <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> AB (using the A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> B rule), then AB <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BA (using the AB <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BA rule), and finally BA <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BB (using the A <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> B rule again). But you can also do the transformation more quickly by applying only 2 rules: AA <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> CC and then CC <SPAN CLASS="MATH"><IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"></SPAN> BB.<P>You must write a program that takes a suffix-replacement grammar and a string <SPAN CLASS="MATH"><I>T</I></SPAN> and determines whether the grammar's starting string <SPAN CLASS="MATH"><I>S</I></SPAN> can be transformed into the string <SPAN CLASS="MATH"><I>T</I></SPAN>. If this is possible, the program must also find the minimal number of rule applications required to do the transformation.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of several test cases. Each case starts with a line containing two equal-length alphanumeric strings <SPAN CLASS="MATH"><I>S</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> (each between 1 and 20 characters long, and separated by whitespace), and an integer <SPAN CLASS="MATH"><I>NR</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \le$"><I>NR</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \le$">100)</SPAN>, which is the number of rules. Each of the next <SPAN CLASS="MATH"><I>NR</I></SPAN> lines contains two equal-length alphanumeric strings <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> (each between 1 and 20 characters long, and separated by whitespace), indicating that <SPAN CLASS="MATH"><I>X</I> <IMG WIDTH="22" HEIGHT="16" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4455img1.png ALT="$ \rightarrow$"> <I>Y</I></SPAN> is a rule of the grammar. All strings are case-sensitive. The last test case is followed by a line containing a period.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number (beginning with 1) followed by the minimum number of rule applications required to transform <SPAN CLASS="MATH"><I>S</I></SPAN> to <SPAN CLASS="MATH"><I>T</I></SPAN>. If the transformation is not possible, print `<TT>No solution</TT>'. Follow the format of the sample output.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
AA BB 4 
A B 
AB BA 
AA CC 
CC BB 
A B 3 
A C 
B C 
c B 
.
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 2 
Case 2: No solution

______________________________________________________
4456||||||false||||||
<P>If a chessboard position can be evaluated and assigned a numerical value, then it should be possible to do the same for a contest problem set. The following rules outline one possible scoring system:<P><DL COMPACT><DT>A.</DT><DD><SPAN ID="txt49">Fairness</SPAN>:<P>One point if every problem has been solved by at least one team.<P></DD><DT>B.</DT><DD><SPAN ID="txt50">Inclusiveness</SPAN>:<P>Two points if more than 90% of the teams solved a minimum of two problems.<P></DD><DT>C.</DT><DD><SPAN ID="txt51">Challenge</SPAN>:<P>Two points if no team solved all the problems.</DD></DL><P>Your task is to write a program to score a problem set based on the above rules.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple cases. Each case starts with two integers on a separate line. The first integer <SPAN CLASS="MATH"><I>C</I></SPAN> <SPAN CLASS="MATH">(10<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$">100)</SPAN> represents the number of teams in the contest, and the second integer <SPAN CLASS="MATH"><I>P</I></SPAN> <SPAN CLASS="MATH">(8<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$">20)</SPAN> represents the number of problems in the set. The last case is followed by a line containing two zeros that indicates the end of the input data and should not be processed as a valid case. Each of the next <SPAN CLASS="MATH"><I>C</I></SPAN> lines describes the performance of a single team. Each such line starts with the name of a team followed, after a blank space, by <SPAN CLASS="MATH"><I>P</I></SPAN> integers. The <SPAN CLASS="MATH"><I>k</I></SPAN>-th integer  <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4456img1.png ALT="$ \le$"><I>P</I>)</SPAN> has a value of one (1) to indicate that the team has solved the <SPAN CLASS="MATH"><I>k</I></SPAN>-th problem, or zero (0) otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each contest, print the contest number (starting with 1, and using the format in the sample) followed by an integer indicating the calculated score.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
10 8 
Gladiators 1 1 1 1 1 1 1 1 
Just4Pizza 1 1 1 1 1 0 1 0 
The_greatests 1 1 1 0 1 0 0 0 
2+1=us 1 0 1 0 0 1 0 1 
we_are_1+2 0 0 1 1 0 1 1 1 
random 1 0 0 0 1 1 1 1 
cfjaszmubdfub 1 1 0 0 1 1 0 1 
wbkdfevtmismxg 0 1 0 1 1 1 0 0 
soxkukbmirk 0 1 1 0 0 1 0 0 
axoqjkpwequsara 0 1 0 0 0 0 1 1 
10 8 
Gladiators 0 1 0 1 1 0 0 1 
Just4Pizza 0 1 1 1 1 0 0 0 
we_are_1+2 0 0 1 0 1 0 0 0 
random 0 0 1 0 1 0 1 0 
ugjzbdglfbktscq 0 1 0 0 0 0 0 1 
vxxltjgrexz 0 0 0 1 0 0 1 0 
xqapfogqfilqbta 0 1 1 0 0 0 1 0 
mbgjlmcgmkkan 0 1 1 0 0 0 1 0 
The_greatests 0 1 0 0 0 0 0 0 
2+1=us 0 0 0 0 0 1 1 0 
10 8 
Gladiators 0 0 1 0 1 0 0 0 
Just4Pizza 0 1 1 0 1 1 0 0 
random 1 0 0 0 0 1 1 0 
we_are_1+2 1 1 1 1 0 1 0 1 
2+1=us 0 1 1 1 1 0 1 0 
zumwuoezqqcmmc 1 0 1 1 0 0 0 0 
fqabkrsrjg 0 1 0 1 1 1 0 1 
pocdkprlpeva 1 0 1 0 0 1 1 0 
The_greatests 0 0 0 0 0 0 0 1 
nurtvuldyyrsa 1 1 1 1 0 1 1 1 
10 8 
Gladiators 1 1 1 1 1 1 1 1 
Just4Pizza 0 0 0 1 1 1 0 0 
The_greatests 0 0 0 0 0 0 0 0 
we_are_1+2 1 1 1 0 1 0 1 1 
random 0 0 1 1 0 0 1 0 
ytypiowjhsok 0 1 1 0 0 1 0 0 
gxvelxfbprutp 1 1 1 1 1 0 0 1 
bdahyifafvrtzrc 0 0 1 1 1 1 1 1 
2+1=us 1 0 1 0 0 1 1 1 
koyzvguhyj 1 0 1 0 1 1 1 1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Contest 1: 3
Contest 2: 2
Contest 3: 3
Contest 4: 1
</PRE><P>
______________________________________________________
4457||||||false||||||
<P>During junior chess tournaments, a player may be paired in matches with another player of a different age. However, at the end of the tournament, players with the best score for each age (where age is calculated on the day of the tournament) are recognized separately. In the case of a tie, all players attaining the highest score are recognized. For the sake of clarity, a birthday is defined as the day that a person turns a year older. For example, a person born on the 2nd June 1996 is five (5) years old on the 1st June 2002, is six (6) years old on the 2nd June 2002 and will be considered in the age category of six (6) in a tournament held on the 2nd June 2002. Note that a person born on the 29th February becomes a year older on the 29th February in leap years and on the 1st March in non-leap years.<P>Your task is to write a program to identify the winners, and co-winners, amongst those participating in a junior chess tournament.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4457img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4457img1.png ALT="$ \le$">200</SPAN>, on a separate line that represents the number of contests to be processed. The description of each contest starts with the contest date. The date is given as three entries on a separate line in the form: &lt;day&gt; &lt;month&gt; &lt;year&gt;, where&lt;day&gt; is an integer whose value is inclusive of one (1) and the number of days in the month, &lt;month&gt; is a string with no white spaces and &lt;year&gt; is an integer. Entries are separated by a blank space.<P>The following line consists of an integer <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4457img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4457img1.png ALT="$ \le$">1000</SPAN>, which represents the number of contestants followed by <SPAN CLASS="MATH"><I>M</I></SPAN> lines. Each of the <SPAN CLASS="MATH"><I>M</I></SPAN> lines contains information about a single contestant. Contestant information is given as three entries on a separate line in the form:<P><P><BR><TT><!-- MATH
 $<LastName> \ <FirstName>$
 --><SPAN CLASS="MATH">&lt; <I>LastName</I> &gt; &nbsp; &lt; <I>FirstName</I> &gt;</SPAN> : <SPAN CLASS="MATH"><I>date</I>&nbsp;<I>of</I>&nbsp;<I>birth</I></SPAN> : <SPAN CLASS="MATH"><I>score</I></SPAN></TT><P><P><BR>Names are separated by a single space and there are no white spaces in a name, date of birth uses the same format as the contest date and score is an integer inclusive of 200 and 2000. Entries are separated by a colon (<TT>:</TT>) with a white space on each side.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each contest the output starts with a line that contains the contest number (starting with 1) followed by a colon (<TT>:</TT>), followed by a space and then followed by the contest date in the same format as that used in the input. The next line contains the profound statement All participants are winners with.<P>Each of the following lines identifies the winner in an age category in the following form:<P><P><BR><!-- MATH
 $<LastName> \ < FirstName>$
 --><SPAN CLASS="MATH">&lt; <I>LastName</I> &gt; &nbsp; &lt; <I>FirstName</I> &gt;</SPAN> <TT>is best under</TT> <SPAN CLASS="MATH">&lt; <I>age</I> &gt;</SPAN><P><P><BR>There are no white spaces in a name and age is an integer that represents the age categories in years. In the case of a tie, a separate line is added in the form:<P><P><BR><TT>and also</TT> <!-- MATH
 $<LastName> \ < FirstName>$
 --><SPAN CLASS="MATH">&lt; <I>LastName</I> &gt; &nbsp; &lt; <I>FirstName</I> &gt;</SPAN><P><P><BR>The age categories are listed in increasing order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
24 february 2017 
10 
dnuyixad uft : 28 october 2009 : 253 
gzadkv eyht : 1 october 2004 : 1103 
uxnlbc nu : 1 july 2007 : 700 
ekrasl rtf : 18 september 2005 : 349 
kjbu pgc : 18 november 2001 : 299 
gtysh veuvzb : 1 april 2003 : 856 
ldywn klyj : 6 november 1999 : 268 
hmincdt mym : 6 july 2009 : 705 
pcik nomm : 11 march 2004 : 755 
dmjldfx rzlilm : 3 november 2000 : 901 
12 june 2010 
10 
tydruqdh jfypo : 30 june 1996 : 1183 
rhkefcr cz : 16 july 2001 : 981 
bdpoq ltgrh : 26 october 1997 : 823 
kcobbp rctwd : 23 december 1998 : 280 
ssbdsoty auhk : 26 november 2001 : 511 
vglu bn : 4 august 1997 : 823 
cnenbiyu dia : 4 august 1997 : 500 
hodjuadh pbl : 13 october 1995 : 835 
rtzrtepz zlpk : 7 july 1995 : 493 
qlyczjxf ppmvx : 15 april 1994 : 226
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Contest 1: 24 february 2017 
All participants are winners with 
hmincdt mym is best under 8 
uxnlbc nu is best under 10 
ekrasl rtf is best under 12 
gzadkv eyht is best under 13 
gtysh veuvzb is best under 14 
kjbu pgc is best under 16 
dmjldfx rzlilm is best under 17 
ldywn klyj is best under 18 
Contest 2: 12 june 2010 
All participants are winners with 
rhkefcr cz is best under 9 
kcobbp rctwd is best under 12 
bdpoq ltgrh is best under 13 
and also vglu bn 
tydruqdh jfypo is best under 14 
hodjuadh pbl is best under 15 
qlyczjxf ppmvx is best under 17
</PRE><P>
______________________________________________________
4458||||||false||||||
<P>A simple polygon of size <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$"><I>M</I></SPAN>, is a planar piecewise-linear closed curve of <SPAN CLASS="MATH"><I>M</I></SPAN> distinct vertices that does not intersect itself. A chord is a line segment between two non-adjacent vertices of the polygon that lies entirely inside the polygon. In other words, the endpoints of the chord are the only points of the chord that touch the boundary of the polygon. A triangulation of the polygon is any choice of <SPAN CLASS="MATH"><I>M</I> - 3</SPAN> chords, such that the polygon is divided into triangles. In a triangulation, no two of the chosen chords intersect each other, except at endpoints.<P><DIV ALIGN="CENTER"><IMG WIDTH="754" HEIGHT="396" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="\epsfbox{p4458.eps}"></DIV><P><DIV ALIGN="CENTER">An example of a simple polygon (border shown by solid line)<BR>and one possible triangulation (with chords shown by dashed lines)</DIV><P>Constructing an arbitrary triangulation is fairly easy, but what is needed is to construct a triangulation whose largest area triangle is the smallest amongst all possible triangulations of a given simple polygon. Your task is to write a program to identify such a triangulation and produce the area of its largest triangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of triangulation requests with the first line being a single positive integer <SPAN CLASS="MATH"><I>N</I></SPAN>, <!-- MATH
 $0 < N \le 20$
 --><SPAN CLASS="MATH">0 &lt; <I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$">20</SPAN>, that represents the number of polygons to follow. The description of each simple polygon starts with a line containing one positive integer <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$">49</SPAN>, which represents the number of vertices of the polygon. Each of the following <SPAN CLASS="MATH"><I>M</I></SPAN> lines contains a vertex of the polygon in order of their appearance along the border, going clockwise or counterclockwise, starting at an arbitrary vertex. Each vertex is described by a pair of integers <SPAN CLASS="MATH"><I>x</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$">10000</SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4458img1.png ALT="$ \le$">10000</SPAN>, which represent its <SPAN CLASS="MATH"><I>x</I> -</SPAN> and <SPAN CLASS="MATH"><I>y</I> -</SPAN>coordinates.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each polygon, output one line that contains the area of the largest triangle in the identified triangulation. The area should be presented with one fractional decimal digit, using standard rounding rules. For example, 9.0<SPAN CLASS="MATH"><I>x</I></SPAN> is truncated to 9.0 for all values of <SPAN CLASS="MATH"><I>x</I></SPAN> in the range of one (1) to four (4), and 9.0<SPAN CLASS="MATH"><I>y</I></SPAN> is rounded up to 9.1 for all values of <SPAN CLASS="MATH"><I>y</I></SPAN> in the range of five (5) to nine (9).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1 
6 
7 0 
6 2 
9 5 
3 5 
0 3 
1 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
9.0
</PRE><P>
______________________________________________________
4459||||||false||||||
<P>
In the land of ACMania the calendar is somewhat different to the Gregorian 
calendar that we are familiar with and use. The ACManian Calendar does not 
have 12 months and the months have an irregular number of days in them. 
They do, however still have a moon and it has a regular cycle with full moons 
being exactly the same number of days apart from each other. When the moon 
is full for the second time in the month, they call that a Blue Moon. Whenever 
there is a Blue Moon, the ACManians have a Blue Moon Festival that 
sometimes incorporates a programming competition. 

<P>
Because of the irregularity in the calendar's cycle, the ACManians have trouble 
knowing the date of the next Blue Moon Festival. They have approached you 
to write a program that will calculate the date of the next festival. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input consists of a series of scenarios for calculating the date of the next 
Blue Moon Festival. The first line in each scenario consists of a positive 
integer, <SPAN CLASS="MATH"><I>M</I></SPAN>, which is the number of months in the year <!-- MATH
 $(1 \le M \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4459img1.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4459img1.png
 ALT="$ \le$">1000)</SPAN>. The 
next line contains <SPAN CLASS="MATH"><I>M</I></SPAN> positive integers that represent the number of days in each 
month of the calendar. Each of the <SPAN CLASS="MATH"><I>M</I></SPAN> integers has a value inclusive of one (1) 
and five hundred (500). Consecutive integers are separated by a single space. 
The next line consists of a single positive integer that represents the number of 
days in the moon's cycle <!-- MATH
 $(1 \le P \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4459img1.png
 ALT="$ \le$"><I>P</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4459img1.png
 ALT="$ \le$">1000)</SPAN>. The final line in the scenario gives 
the date of the last known full moon in <SPAN CLASS="MATH"><I>d</I> /<I>m</I>/<I>y</I></SPAN> format where <SPAN CLASS="MATH"><I>d</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN> and <SPAN CLASS="MATH"><I>y</I></SPAN> are all 
positive integers. The date given will be a valid date based on the number of 
days in each month of the calendar. The <SPAN CLASS="MATH"><I>d</I></SPAN> value will be inclusive of one (1) 
and the number of days in the month, and the <SPAN CLASS="MATH"><I>m</I></SPAN> value will be inclusive of one 
(1) and the number of months in the calendar. A scenario with <SPAN CLASS="MATH"><I>M</I></SPAN> equals zero 
(0) terminates the input data.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2> 

<P>
Output consists of one line for each scenario. It will be in one of the following 
two formats: 

<P>

<P>
<BR>

<TT>The next Blue Moon Festival will be held on <SPAN CLASS="MATH"><I>d</I></SPAN>/<SPAN CLASS="MATH"><I>m</I></SPAN>/<SPAN CLASS="MATH"><I>y</I></SPAN>.</TT> 
<BR><TT>There can never be a Blue Moon Festival.</TT>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
10 
20 20 20 20 25 20 20 25 20 25 
21 
4/2/2009 
5 
2 3 4 5 6 
7 
2/3/45 
0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
The next Blue Moon Festival will be held on 23/10/2009. 
There can never be a Blue Moon Festival.
</PRE> 

<P>

______________________________________________________
4460||||||false||||||
<P>My high school mathematics teacher was fond of challenging us to find as many distinct solutions of a given polynomial equation. There was a reward for the first pupil to report a correct solution, and a special reward for the pupil who declares that the last value has been reported. A polynomial of degree <SPAN CLASS="MATH"><I>M</I></SPAN> has <SPAN CLASS="MATH"><I>M</I></SPAN> solutions. Most pupils worked hard to quickly find any solution for the polynomial equation. However the clever ones aimed for solutions with multiplicity larger than one and thus got a shot at the special reward.<P>Your task is to write a program to check whether a given polynomial of degree <SPAN CLASS="MATH"><I>M</I></SPAN> has <SPAN CLASS="MATH"><I>M</I></SPAN> distinct, real or complex, solutions. The average students will greatly appreciate your help.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input starts with an integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$">100)</SPAN> on a separate line that represents the number of equations to be checked. The description of each equation is given on a single line as a series of integers, which are separated by single blank spaces. The first integer <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$">10)</SPAN> on each line represents the degree of the polynomial, followed by the <SPAN CLASS="MATH"><I>M</I> + 1</SPAN> coefficients <SPAN CLASS="MATH"><I>a</I><SUB>0</SUB>, <I>a</I><SUB>1</SUB>,...<I>a</I><SUB>M</SUB></SPAN> <SPAN CLASS="MATH">(- 30<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$"><I>a</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \le$">30, <I>a</I><SUB>0</SUB> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \neq$"> 0)</SPAN> to form the equation <SPAN CLASS="MATH"><IMG WIDTH="66" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4460img1.png ALT="$ \sum_{{i=0 .. M}}^{}$">(<I>a</I><SUB>i</SUB><I>x</I><SUP>M-i</SUP>) = 0</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of a single line for each equation. It will be in one of the following two forms:<P><P><BR><TT>Yes!</TT> -- when the equation has <SPAN CLASS="MATH"><I>M</I></SPAN> distinct solutions.<BR><TT>No!</TT> -- when the equation has less than <SPAN CLASS="MATH"><I>M</I></SPAN> distinct solutions.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
2 1 1 1 
2 1 2 1 
4 1 2 1 2 1 
4 1 2 2 2 1
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Yes! 
No! 
Yes! 
No!
</PRE><P>
______________________________________________________
4461||||||false||||||
<P>The motivation for this problem is a directionally impaired friend, who doesn't care about the shortest or quickest routes - instead, easier is better. Your task is to read the map information from a database of the entire country and produce the route with the smallest number of roads to use for a trip between an origin city and a destination city. You are guaranteed that there will be a path between origin and destination for any query asked.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple cases. The input for each case consists of three sections: the first lists the cities, the second lists the roads, and the third lists the queries. Each case starts with an integer <SPAN CLASS="MATH"><I>C</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$">200)</SPAN> that represents the number of cities followed by <SPAN CLASS="MATH"><I>C</I></SPAN> lines each containing the name of a city. There is no white space in a city's name.<P>The next line consists of an integer <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$">100)</SPAN> that represents the number of roads followed by <SPAN CLASS="MATH"><I>R</I></SPAN> lines each describing a road. Each road description has the following form:<P><P><BR><!-- MATH
 $<RoadName> \ <CityA> \ <ABDistance> \ <CityB> \ [<BCDistance> \ <CityC> \ [\ldots]]$
 --><SPAN CLASS="MATH">&lt; <I>RoadName</I> &gt; &nbsp; &lt; <I>CityA</I> &gt; &nbsp; &lt; <I>ABDistance</I> &gt; &nbsp; &lt; <I>CityB</I> &gt; &nbsp;[ &lt; <I>BCDistance</I> &gt; &nbsp; &lt; <I>CityC</I> &gt; &nbsp;[...]]</SPAN><P><P><BR>There is no white space in a road's name. Roads may pass through any number of cities. The cities appear in the order the road passes through them, and no road passes through the same city more than once. Roads are bidirectional. The distance (an integer number) it takes to follow a road between each pair of cities is the distance listed between these two names.<P>The next line consists of an integer <SPAN CLASS="MATH"><I>Q</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4461img1.png ALT="$ \le$">100)</SPAN> that represents the number of queries followed by <SPAN CLASS="MATH"><I>Q</I></SPAN> lines each describing a query. Each query description has the following form: <!-- MATH
 $<origin> \ <destination>$
 --><SPAN CLASS="MATH">&lt; <I>origin</I> &gt; &nbsp; &lt; <I>destination</I> &gt;</SPAN>, where <SPAN CLASS="MATH">&lt; <I>origin</I> &gt;</SPAN> and <!-- MATH
 $<destination>$
 --><SPAN CLASS="MATH">&lt; <I>destination</I> &gt;</SPAN> are the names of cities.<P>A case with <SPAN CLASS="MATH"><I>C</I></SPAN> equals zero (0) terminates the input data, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each query, the output consists of a single line of the following form:<P><P><BR><TT>Number of roads needed from <SPAN CLASS="MATH">&lt; <I>origin</I> &gt;</SPAN> to <!-- MATH
 $<destination>$
 --><SPAN CLASS="MATH">&lt; <I>destination</I> &gt;</SPAN> is <SPAN CLASS="MATH">&lt; <I>number</I> &gt;</SPAN>.</TT><P><P><BR><SPAN CLASS="MATH">&lt; <I>origin</I> &gt;</SPAN> and <!-- MATH
 $<destination>$
 --><SPAN CLASS="MATH">&lt; <I>destination</I> &gt;</SPAN> are the names of cities, and <SPAN CLASS="MATH">&lt; <I>number</I> &gt;</SPAN> is the smallest number of roads needed for the trip.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
Adelaide 
Melbourne 
Sydney 
WestSydney 
Brisbane 
4 
OR Adelaide 300 Melbourne 
HH Melbourne 850 WestSydney 105 Sydney 
M7 WestSydney 1130 Brisbane 
BushTrack Adelaide 2448 Brisbane 
1 
Adelaide Brisbane 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Number of roads needed from Adelaide to Brisbane is 1.
</PRE><P>
______________________________________________________
4462||||||false||||||
<P>A travel agency that specializes in the sale of theme trips is currently planning a few theme trips for the coming holiday season. The agency wants to use regional airlines for traveling, to take advantage of their cheap prices, without affecting the following important features of their trips:<P><P><BR><OL><LI>The order of cities in a trip cannot be altered. </LI><LI>Each city in a planned trip can be visited once and only once. </LI></OL><P><P><BR>For example, a theme trip of ``Recent Democracies" that consists of the following sequence of cities: Cairo, Kabul, Baghdad, and Benghazi may be altered to Cairo, Damascus, Nairobi, Kabul, Baghdad, Damascus and Benghazi. The altered trip may contain multiple visits to other cities in transit (Damascus in the above example) to take advantage of cheap flights without violating the above two important features.<P>Your task is to write a program to verify that the agency's trips can be planned using the available cheap regional airlines.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of a series of trips whose plan is to be verified. The first line in each trip consists of a positive integer, <SPAN CLASS="MATH"><I>M</I></SPAN>, <SPAN CLASS="MATH">2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4462img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4462img1.png ALT="$ \le$">50</SPAN>, which is the number of cities in the planned trips. The next line contains <SPAN CLASS="MATH"><I>M</I></SPAN> strings that represent the unique names of cities to be visited in the given order. Each pair of city names is separated by a single blank space, and names of cities do not contain white spaces. The next line consists of a single positive integer <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4462img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4462img1.png ALT="$ \le$">300</SPAN>, which is the number of available flight segments followed by <SPAN CLASS="MATH"><I>P</I></SPAN> lines each describing a flight segment. Each flight segment is a one-way flight whose description has the following form: <!-- MATH
 $<CityA> \ <CityB>$
 --><SPAN CLASS="MATH">&lt; <I>CityA</I> &gt; &nbsp; &lt; <I>CityB</I> &gt;</SPAN>. The pair of city names is separated by a single blank space, and names of cities do not contain white spaces.<P>A tour with <SPAN CLASS="MATH"><I>M</I></SPAN> equals zero (0) terminates the input data, and should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of one line for each tour. It will be in one of the following two formats:<P><P><BR><TT>The tour can be planned.</TT><BR><TT>The tour cannot be planned with the given flight segments.</TT><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
Cairo Kabul Baghdad Benghazi 
6 
Cairo Damascus 
Cairo Benghazi 
Kabul Baghdad 
Baghdad Damascus 
Kabul Moscow 
Kabul Damascus 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
The tour cannot be planned with the given flight segments.
</PRE><P>
______________________________________________________
4463||||||false||||||
<P>The ACM, which is a charitable society for men, runs a program to support troubled adolescents via the help of mature volunteers. The program aims to pair an adolescent with a volunteer to provide the adolescent with the best possible mentoring and to provide the volunteer with a rewarding experience. Towards that goal, each volunteer and each adolescent is required to perform a personality- profiling test. A test reports a score for each of the <SPAN CLASS="MATH"><I>N</I></SPAN> different personality traits. The scores are inclusive of one to a hundred. The report has the following form:<P><P><BR><!-- MATH
 $PersonCategory \ <name> \ s1 \ s2 \ s3 \ldots s_N$
 --><SPAN CLASS="MATH"><I>PersonCategory</I>&nbsp; &lt; <I>name</I> &gt; &nbsp;<I>s</I>1&nbsp;<I>s</I>2&nbsp;<I>s</I>3...<I>s</I><SUB>N</SUB></SPAN>,<P><P><BR>where <SPAN CLASS="MATH"><I>PersonCategory</I></SPAN> is either <TT>Adolescent</TT> or <TT>Volunteer</TT>, and each <SPAN CLASS="MATH"><I>si</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>i</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>N</I>)</SPAN> is an integer value in the range of one (1) to one hundred (100), inclusive.<P>The ACM decided to assign weights to indicate the importance of each trait. The weights <SPAN CLASS="MATH">(<I>w</I><SUB>1</SUB>, <I>w</I><SUB>2</SUB>,...<I>w</I><SUB>N</SUB>)</SPAN> used for adolescents are different from those weights <SPAN CLASS="MATH">(<I>v</I><SUB>1</SUB>, <I>v</I><SUB>2</SUB>,...<I>v</I><SUB>N</SUB>)</SPAN> used for volunteers. The function<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>f</I><SUB>1</SUB>(<I>A</I>, <I>V</I>) = (<I>w</I><SUB>1</SUB>(<I>A</I><SUB>s1</SUB> - <I>V</I><SUB>s1</SUB>)<SUP>2</SUP> + <I>w</I><SUP>2</SUP>(<I>A</I><SUB>s2</SUB> - <I>V</I><SUB>s2</SUB>)<SUP>2</SUP> +...+ <I>w</I><SUB>N</SUB>(<I>A</I><SUB>sN</SUB> - <I>V</I><SUB>sN</SUB>)<SUP>2</SUP>)</DIV><P></P>is used to assign a numerical value to the quality of mentoring an adolescent <SPAN CLASS="MATH"><I>A</I></SPAN> receives from volunteer <SPAN CLASS="MATH"><I>V</I></SPAN>, and the function<P><P></P><DIV ALIGN="CENTER" CLASS="mathdisplay"><I>f</I><SUB>2</SUB>(<I>A</I>, <I>V</I>) = (<I>v</I><SUB>1</SUB>(<I>A</I><SUB>s1</SUB> - <I>V</I><SUB>s1</SUB>)<SUP>2</SUP> + <I>v</I><SUP>2</SUP>(<I>A</I><SUB>s2</SUB> - <I>V</I><SUB>s2</SUB>)<SUP>2</SUP> +...+ <I>v</I><SUB>N</SUB>(<I>A</I><SUB>sN</SUB> - <I>V</I><SUB>sN</SUB>)<SUP>2</SUP>)</DIV><P></P>is used to assign a numerical value to the quality of experience volunteer <SPAN CLASS="MATH"><I>V</I></SPAN> gets from mentoring adolescent <SPAN CLASS="MATH"><I>A</I></SPAN>. A smaller value of <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB></SPAN> indicates a higher quality of adolescent mentoring and a smaller value of <SPAN CLASS="MATH"><I>f</I><SUB>2</SUB></SPAN> indicates a higher quality of volunteer experience.<P>Assuming the names in each category are unique, your task is to write a program to prescribe a pairing of adolescents with volunteers such that no pair would be a better fit with each other than the pairing that your program prescribed for them. That is, no pair of an adolescent <SPAN CLASS="MATH"><I>X</I></SPAN> and a volunteer <SPAN CLASS="MATH"><I>Y</I></SPAN> has both values of <SPAN CLASS="MATH"><I>f</I><SUB>1</SUB>(<I>X</I>, <I>Y</I>)</SPAN> and <SPAN CLASS="MATH"><I>f</I><SUB>2</SUB>(<I>X</I>, <I>Y</I>)</SPAN> smaller than the values prescribed by your program for both of them.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple situations. Each situation starts with two integers on a separate line. The first integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$">100)</SPAN> represents the number of personality traits to be used, and the second integer <SPAN CLASS="MATH"><I>P</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$">1000)</SPAN> represents the number of adolescents and also the number of volunteers. The last situation is followed by a line containing two zeros that indicates the end of input data and should not be processed as a valid situation.<P>The second line contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers that describe the weights to be used for adolescents. Consecutive integers are separated by a single blank space, and each integer has a value of one (1) and ten (10) inclusive.<P>The third line contains <SPAN CLASS="MATH"><I>N</I></SPAN> integers that describe the weights to be used for volunteers. Consecutive integers are separated by a single blank space, and each integer has a value of one (1) and ten (10) inclusive.<P>The following 2<SPAN CLASS="MATH"><I>P</I></SPAN> lines describe the reports of 2<SPAN CLASS="MATH"><I>P</I></SPAN> personality tests. Each such line starts with the PersonCategory followed, after a blank space, by a string with no white spaces that represents the name followed, after a blank space, by <SPAN CLASS="MATH"><I>N</I></SPAN> integers. The <SPAN CLASS="MATH"><I>k</I></SPAN>-th integer <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>k</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4463img1.png ALT="$ \le$"><I>N</I>)</SPAN> has a value in the range of one (1) to one hundred (100) that represents the score for the <SPAN CLASS="MATH"><I>k</I></SPAN>-th trait. The scores are separated by a blank space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each situation, print the situation number (starting with 1, and using the format in the sample) on a separate line. The next <SPAN CLASS="MATH"><I>P</I></SPAN> lines list the pairing of adolescents and volunteers (using the format in the sample) such that the adolescent names are listed in increasing lexicographic order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 3 
1 1 
1 1 
Volunteer Smith 20 10 
Adolescent Paul 20 30 
Adolescent Peter 30 30 
Volunteer Kevin 20 40 
Volunteer Peter 50 10 
Adolescent John 10 20 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Situation 1: 
Adolescent John Volunteer Smith 
Adolescent Paul Volunteer Kevin 
Adolescent Peter Volunteer Peter
</PRE><P>
______________________________________________________
4464||||||false||||||
<P>In a sensational scene in the 8-th installment of the <SPAN CLASS="textit">Voldemort</SPAN> book series, the robot <SPAN CLASS="textit">Weighd</SPAN> was attacked and its rotating top and wings were severely damaged. <SPAN CLASS="textit">Weighd</SPAN> cannot rotate its famous top and can only fly forward or make a right-turn. However, the brave <SPAN CLASS="textit">Weighd</SPAN> must still navigate a magically created series of mazes to deliver its precious message to <SPAN CLASS="textit">Ttoper</SPAN>.<P><SPAN CLASS="textit">Weighd</SPAN> enters each maze at the top-left square of the maze, takes one unit of time to travel between adjacent squares in the magic maze (forward or right), and cannot stay in one square to rotate itself, and thus change direction, for fear of evil jinx. Your task is to write a program to calculate the smallest number of squares that <SPAN CLASS="textit">Weighd</SPAN> must travel to reach a certain square in each maze. Do not you worry about how? <SPAN CLASS="textit">Weighd</SPAN> will feel its correct way through the force. Examples are:<P><DIV ALIGN="CENTER"><IMG WIDTH="971" HEIGHT="268" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="\epsfbox{p4464a.eps}"></DIV><P><DIV ALIGN="CENTER"></DIV><P><DIV ALIGN="CENTER"><IMG WIDTH="984" HEIGHT="180" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="\epsfbox{p4464b.eps}"></DIV><P><SPAN CLASS="textit">Weighd</SPAN> can reach the location marked ``X" of the top maze in ``19" steps, but it cannot reach the marked location in the bottom maze at all.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>Input consists of multiple mazes. Each maze description starts with two integers, on a separate line, that represent its dimensions. The first integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$">1000)</SPAN> represents the number of rows and the second <SPAN CLASS="MATH"><I>M</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$">1000)</SPAN> represents the number of columns. The last maze is followed by a line containing two zeros that indicate the end of the input data and should not be processed as a valid situation.<P>The second line contains two integers, <SPAN CLASS="MATH"><I>C</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>N</I>)</SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4464a.jpg ALT="$ \le$"><I>M</I>)</SPAN>, that represent the column number and the row number of the square where <SPAN CLASS="textit">Weighd</SPAN> must reach in the maze. Consecutive integers are separated by a blank space.<P>Each of the following <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains a sequence of <TT>0</TT>s and <TT>1</TT>s. The sequence is <SPAN CLASS="MATH"><I>M</I></SPAN> characters long. The sequence does not contains blank spaces. A value one (1) represents a wall in the maze (that is, a square into which <SPAN CLASS="textit">Weighd</SPAN> cannot fly).<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output consists of one line for each maze. It will be in one of the following two formats:<P><OL><LI>an integer that represents the number of steps to be taken, inside the maze, by <SPAN CLASS="textit">Weighd</SPAN> to reach its destination. </LI><LI>The string ``<TT>NOOO!</TT>", if no path can be found. </LI></OL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 13 
13 4 
0000001111000 
0111101111000 
0000000000000 
0000001111110 
0000001111110 
0000000000000 
6 13 
13 4 
0000001111000 
1111101111000 
0000000000000 
0001101111110 
0001101111110 
0001100000000 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
19 
NOOO!

______________________________________________________
4465||||||false||||||
<P>Given a <SPAN CLASS="MATH">3 <TT>x</TT> 4</SPAN> grid of distinct letters. The letters in the grid are rearranged so that no letter remains in the same row or in the same column. In addition it is known that, in the new arrangement, certain given sets of letters appear in the same row or in the same column. You are required to write a program to determine the new arrangement of letters in the grid, assuming that there exists such a unique arrangement.<P>As an illustration, consider the arrangement given on the left. Assume that after rearrangement of letters no letter remains in the same row or in the same column. In addition, assume that letters in each string of letters: <TT>LAJ</TT>, <TT>KIG</TT>, <TT>HDB</TT>, <TT>ACJ</TT> and <TT>EIG</TT> appear in the same row while the pair of letters appearing in each string: <TT>KL</TT>, <TT>AH</TT>, <TT>ID</TT>, <TT>GB</TT>, <TT>JD</TT> and <TT>LF</TT> appears in the same column. On the basis of this information the program should find the new arrangement shown on the right.<P><DIV ALIGN="CENTER"><IMG WIDTH="658" HEIGHT="167" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4465.png ALT="\epsfbox{p4465.eps}"></DIV><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>Each test case contains three lines.<P>The first line gives a sequence of three strings of distinct letters, each of length four. The <SPAN CLASS="MATH"><I>j</I></SPAN>-th letter in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th string (<SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN>; <SPAN CLASS="MATH"><I>j</I> = 1, 2, 3, 4</SPAN>) represents the letter in <SPAN CLASS="MATH"><I>j</I></SPAN>-th column and <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of the grid. The second line gives a sequence of strings of distinct letters, each of length three. The letters in each string appear in the same row, after rearrangement. The third line gives a sequence of strings of distinct letters, each of length two. The letters in each string appear in the same column, after rearrangement.<P>A blank character separates two consecutive strings in a line.<P>The input terminates with an input line containing `<TT>0</TT>' for a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print in one line, a sequence of three strings of distinct letters, each of length four. The <SPAN CLASS="MATH"><I>j</I></SPAN>-th letter in the <SPAN CLASS="MATH"><I>i</I></SPAN> string (<SPAN CLASS="MATH"><I>i</I> = 1, 2, 3</SPAN>; <SPAN CLASS="MATH"><I>j</I> = 1, 2, 3, 4</SPAN>) represents the letter in <SPAN CLASS="MATH"><I>j</I></SPAN>-th column and <SPAN CLASS="MATH"><I>i</I></SPAN>-th row of the grid after rearrangement.<P>Use a blank character to separates two consecutive strings in a line.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ABCD EFGH IJKL 
LAJ KIG HDB ACJ EIG 
KL AH ID GB JD LF 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
KEIG LAJC FHDB
</PRE><P>
______________________________________________________
4466||||||false||||||
<P>Mr. Walker is a person who is known for his ability to walk fast. He accepts an attractive offer to get as much free land as he can cover by a walk on an open uneven huge piece of land within a specified time and following certain conditions.<P>A walk is a sequence of paths, starting at a marked spot on the land and ending at the same spot where the walk starts. The first path in a walk begins at the marked spot and extends in one of the four directions: North (<TT>N</TT>), South (<TT>S</TT>), East (<TT>E</TT>) or West (<TT>W</TT>). It ends at the point where the direction changes.<P>Each of the other paths in a walk begins at the point where the previous path ends and ends either at a point where the direction changes or when the walk ends. Mr. Walker may change directions, as and when he feels like, depending on the constraint of time and/or quality/quantity of the land he decides to get. When he changes a direction he must keep the direction always to one of the four directions <TT>N</TT>, <TT>S</TT>, <TT>E</TT> or <TT>W</TT>. Paths are distinct and nonintersecting; for example, a path in <TT>E</TT> or <TT>W</TT> direction cannot cross another in <TT>N</TT> or <TT>S</TT> direction.<P>Given a walk, you are required to write a program that finds the area of land covered by the walk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input consists of multiple test cases.<P>For each test case there is only one input line. The line gives a walk defined by a sequence of paths. A direction followed, without any space, by a distance represents a path. A direction is denoted by one of the four letters <TT>N</TT>, <TT>S</TT>, <TT>E</TT> or <TT>W</TT> while a distance is measured in meters and is denoted by an integer. A space character appears between two paths in the given sequence.<P>The input terminates when a line containing `<TT>0</TT>' appears as a test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case print the area of land covered by the given walk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
N3 W4 S8 E4 N5 
W6 N2 E9 S6 W3 N4 
W6 N2 W3 S4 W5 S4 E14 N6 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
32 
30 
80
</PRE><P>
______________________________________________________
4467||||||false||||||
<P>Delete the least number of integers from a given set of integers so that the product of the remaining integers in the set is a perfect square. In case there is more than one solution then find the solution that gives the largest perfect square. Assume that each integer contains five or less number of digits. The total number of integers in the given set is twenty or less. You are required to write a program for a problem as simple as this.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>For each test case there is a single input line. The line contains the given set of integers. The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case there is only one output line. The line simply prints the integers to be deleted in ascending order. There are two special cases; print output for these cases as indicated below.<P>Case 1: No integer is to be deleted: Print `<TT>0</TT>' as output.<P>Case 2: All integers are to be deleted: Print all integers in ascending order.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2   3 12 18 24 
12 10 15 18 
4  12 10 15 
10 12 15 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
24 
0 
10 12 15 
10 12 15
</PRE><P>
______________________________________________________
4468||||||false||||||
<P>Professor Anupam Shukla is fond of playing with matrix. One day in his class he has defined a matrix which is filled up with scores but these scores can be positive, negative or zero. Professor Shukla has called the position of an element in a matrix by cell. Every cell is connected to its right, left, top and bottom only if the corresponding cell exists. Score of a connected component is the sum of scores in the cells of the connected component.<P>Professor Shukla has asked his students to write a program to find a connected component of cells from the matrix that has the highest aggregate score. If there are two or more connected components with the same maximal score, return the one with the largest size, i.e., the one with the largest number of cells.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>First line of the input of the program will be the dimensions of the matrix and the scores are given on the next line onwards.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>The output should be the total score followed by the matrix showing the cells in the connected component. Other cells should be represented by `<TT>X</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
 3  4 
-1  4 -6  7 
 3  2 -9 -9 
-3  0 -5  4
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
10 
X 4 -6 7 
3 2  X X 
X 0  X X
</PRE><P>
______________________________________________________
4469||||||false||||||
<P>Suppose there are some groups of friends who all believe fervently in numerology. They decide to choose the best group among them by aligning the vowels of their names. In order to account for mismatches in the number of vowels, a special symbol `<TT>-</TT>' is introduced that can augment the total number of vowels to make them the same. A symmetric matrix of size <SPAN CLASS="MATH">6 <TT>x</TT> 6</SPAN> is conceived to encode the scores of matching each vowel plus the gap to every other vowel and the gap. Even though the scores can be positive and negative, certain constraints apply.<P>For example, the score of a vowel with itself is positive, while that of a gap with any character (including another gap) is negative. When aligning their names, the column-wise scores are accumulated. For each column, the score is the cumulative of the pair-wise scores. For example, if the alignment of vowels of three names AEI, AO and EU is<P><PRE>
AEI 
A-O 
-EU
</PRE><P>then the score for the first column is <SPAN CLASS="MATH"><I>score</I>(<I>A</I>, <I>A</I>) + <I>score</I>(<I>A</I>, -) + <I>score</I>(- , <I>A</I>)</SPAN>, while that of the second and third columns are <SPAN CLASS="MATH"><I>score</I>(<I>E</I>, -) + <I>score</I>(- , <I>E</I>) + <I>score</I>(<I>E</I>, <I>E</I>)</SPAN> and <SPAN CLASS="MATH"><I>score</I>(<I>I</I>, <I>O</I>) + <I>score</I>(<I>O</I>, <I>U</I>) + <I>score</I>(<I>U</I>, <I>I</I>)</SPAN> respectively. The total score is the sum of the scores of the three columns.<P>Write an algorithm to compute the maximum possible score of a group of friends. Assume that there are 3 to 5 friends in a group.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>The first line contains the information about the number of friends in the group. If the number is <SPAN CLASS="MATH"><I>n</I></SPAN>, then the next <SPAN CLASS="MATH"><I>n</I></SPAN> lines contain the names of these <SPAN CLASS="MATH"><I>n</I></SPAN> friends. Next six lines provide the <SPAN CLASS="MATH">6 <TT>x</TT> 6</SPAN> score matrix ordered according to A, E, I, O, U, <TT>-</TT>. For example, <SPAN CLASS="MATH"><I>score</I>(<I>I</I>, <I>O</I>)</SPAN> is the value in the <SPAN CLASS="MATH">3</SPAN>-rd column of the <SPAN CLASS="MATH">4</SPAN>-th row. The input terminates with a line containing <TT>0</TT> as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the maximum total score followed by the corresponding alignments.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 
SATTEKI DRY 
ANMOL WRY 
SEMI FRY 
+3 +1 +1 -1 -2 -4 
+1 +5 +2 -3 -3 -4 
+1 +2 +3 +0 -1 -4 
-1 -3 +0 +3 +2 -4 
-2 -3 -1 +2 +4 -4 
-4 -4 -4 -4 -4 -4 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
-2 
AEI 
-AO 
-EI
</PRE><P>
______________________________________________________
4470||||||false||||||
<P>Assume, in a forest there are <SPAN CLASS="MATH"><I>n</I></SPAN> trees and <SPAN CLASS="MATH"><I>i</I></SPAN>-th tree is at position <SPAN CLASS="MATH"><I>i</I></SPAN>, for <SPAN CLASS="MATH"><I>i</I> = 1...<I>n</I></SPAN>. These trees are having different heights. Let us assume that the tree <SPAN CLASS="MATH"><I>i</I></SPAN> is having nonnegative heights <SPAN CLASS="MATH"><I>h</I></SPAN> feet. One day the forester has decided to trim the heights or uproot the trees to arrange the rooted trees with respect to their heights. That is, at the end of the operation, rooted trees satisfy the property of <!-- MATH
 $h_{i} < h_{j}$
 --><SPAN CLASS="MATH"><I>h</I><SUB>i</SUB> &lt; <I>h</I><SUB>j</SUB></SPAN> for <SPAN CLASS="MATH"><I>i</I> &lt; <I>j</I></SPAN>. Note that if one uproots a tree, then it cannot be placed back in any place and hence it is no longer in the forest.<P>The problem is to determine is the minimum cutting of wood required to make sure that all remaining trees satisfy the height property.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>Each test case contains a sequence of <SPAN CLASS="MATH"><I>n</I></SPAN> integers to indicate the heights of <SPAN CLASS="MATH"><I>n</I></SPAN> trees in the forest.<P>The <SPAN CLASS="MATH"><I>i</I></SPAN>-th integer indicates the height of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th tree.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output is the total length of the wood cut. It is followed by a line which tells the amount of cut from each tree, i.e., <SPAN CLASS="MATH"><I>i</I></SPAN>-th element in the line tells the amount of cut in the <SPAN CLASS="MATH"><I>i</I></SPAN>-th tree. Next line contains the information about the final height of each tree which means that <SPAN CLASS="MATH"><I>i</I></SPAN>-th element in that line tells the current height of the <SPAN CLASS="MATH"><I>i</I></SPAN>-th tree. If a tree is uprooted, then mark its final height as `<TT>x</TT>'.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 5 1 2 7
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
0 0 1 2 0 
2 5 x x 7
</PRE><P>
______________________________________________________
4471||||||false||||||
<P>Assume that there are <SPAN CLASS="MATH"><I>n</I></SPAN> vectors each of size <SPAN CLASS="MATH">2<I>k</I></SPAN>. Number the dimensions of the vector as <SPAN CLASS="MATH">1, 2,..., 2<I>k</I></SPAN>. Define the badness of a vector by the sum of the absolute values of the <SPAN CLASS="MATH"><I>k</I></SPAN> differences of the <SPAN CLASS="MATH"><I>k</I></SPAN> consecutive pairs.<P>For example, the badness of the vector <SPAN CLASS="MATH">{1, 4, 3, 2}</SPAN> is <SPAN CLASS="MATH">| 14| + | 32| = 4</SPAN>.<P>The badness of the set of <SPAN CLASS="MATH"><I>n</I></SPAN> vectors is the cumulative badness of the elements. However, the dimensions can be shuffled to produce another vector.<P>For example, the above vector can be shuffled to produce <SPAN CLASS="MATH">{2, 1, 4, 3}</SPAN> which improves the badness to 2.<P>The problem is to choose a shuffling of the vectors such that the cumulative badness is minimized. Note that the shuffling must be consistent and must be applied to all the vectors in the set, i.e., if two columns are interchanged, they must be interchanged for all the vectors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input may contain multiple test cases.<P>First line of a test case contains two information. First one is the number of vectors while second one tells about the length of the vector. If the number of vectors is <SPAN CLASS="MATH"><I>n</I></SPAN>, each of the length say, <SPAN CLASS="MATH">2<I>k</I></SPAN>, then next lines provide the vectors. The input terminates with a line containing `<TT>0</TT>' as input.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>Output the total badness value followed by the shuffled vectors.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 4 
1 5 4 2 
2 2 3 3
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
2 1 5 4 
3 2 2 3

______________________________________________________
4472||||||false||||||
<P>A couple of years ago, a new world wide crisis started, leaving many people with economical problems. Some workers of a particular company are trying to ask for an increase in their salaries.<P>The company has a strict hierarchy, in which each employee has exactly one direct boss, with the exception of the owner of the company that has no boss. Employees that are not bosses of any other employee are called <SPAN CLASS="textit">workers</SPAN>. The rest of the employees and the owner are called <SPAN CLASS="textit">bosses</SPAN>.<P>To ask for a salary increase, a worker should file a petition to his direct boss. Of course, each boss is encouraged to try to make their subordinates happy with their current income, making the company's profit as high as possible. However, when at least <SPAN CLASS="MATH"><I>T</I></SPAN> percent of its direct subordinates have filed a petition, that boss will be pressured and have no choice but to file a petition himself to his own direct boss. Each boss files at most 1 petition to his own direct boss, regardless on how many of his subordinates filed him a petition. A boss only accounts his direct subordinates (the ones that filed him a petition and the ones that didn't) to calculate the pressure percentage.<P>Note that a boss can have both workers and bosses as direct subordinates at the same time. Such a boss may receive petitions from both kinds of employees, and each direct subordinate, regardless of its kind, will be accounted as 1 when checking the pressure percentage.<P>When a petition file gets all the way up to the owner of the company, all salaries are increased. The workers' union is desperately trying to make that happen, so they need to convince many workers to file a petition to their direct boss.<P>Given the company's hierarchy and the parameter <SPAN CLASS="MATH"><I>T</I></SPAN>, you have to find out the minimum number of workers that have to file a petition in order to make the owner receive a petition.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The input for each test case is given in exactly two lines. The first line contains two integers <SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>T</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$">10<SUP>5</SUP></SPAN> , <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$">100</SPAN>), separated by a single space. <SPAN CLASS="MATH"><I>N</I></SPAN> indicates the number of employees of the company (not counting the owner) and <SPAN CLASS="MATH"><I>T</I></SPAN> is the parameter described above. Each of the employees is identified by an integer between 1 and <SPAN CLASS="MATH"><I>N</I></SPAN>. The owner is identified by the number 0. The second line contains a list of integers separated by single spaces. The integer <SPAN CLASS="MATH"><I>B</I><SUB>i</SUB></SPAN>, at position <SPAN CLASS="MATH"><I>i</I></SPAN> on this list (starting from 1), indicates the identification of the direct boss of employee <SPAN CLASS="MATH"><I>i</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$"><I>B</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4472img1.png ALT="$ \le$"><I>i</I> - 1)</SPAN>.<P>The last test case is followed by a line containing two zeros separated by a single space.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output a single line containing a single integer with the minimum number of workers that need to file a petition in order to get the owner of the company to receive a petition.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 100 
0 0 0 
3 50 
0 0 0 
14 60 
0 0 1 1 2 2 2 5 7 5 7 5 7 5 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
2 
5
</PRE><P>
______________________________________________________
4473||||||false||||||
<P>In the land of ACM ruled a great King who became obsessed with order. The kingdom had a rectangular form, and the King divided the territory into a grid of small rectangular <SPAN CLASS="textit">counties</SPAN>. Before dying, the King distributed the counties among his sons.<P>However, he was unaware that his children had developed a strange rivalry: the first heir hated the second heir, but not the rest; the second heir hated the third heir, but not the rest, and so on ...Finally, the last heir hated the first heir, but not the other heirs.<P>As soon as the King died, the strange rivalry among the King's sons sparked off a generalized war in the kingdom. Attacks only took place between pairs of adjacent counties (adjacent counties are those that share one vertical or horizontal border). A county <SPAN CLASS="MATH"><I>X</I></SPAN> attacked an adjacent county <SPAN CLASS="MATH"><I>Y</I></SPAN> whenever the owner of <SPAN CLASS="MATH"><I>X</I></SPAN> hated the owner of <SPAN CLASS="MATH"><I>Y</I></SPAN>. The attacked county was always conquered by the attacking brother. By a rule of honor all the attacks were carried out simultaneously, and a set of simultaneous attacks was called a <SPAN CLASS="textit">battle</SPAN>. After a certain number of battles, the surviving sons made a truce and never battled again.<P>For example, if the King had three sons, named 0, 1 and 2, the figure below shows what happens in the first battle for a given initial land distribution:<P><DIV ALIGN="CENTER"><IMG WIDTH="790" HEIGHT="259" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="\epsfbox{p4473.eps}"></DIV><P>You were hired to help an ACM historian determining, given the number of heirs, the initial land distribution and the number of battles, what was the land distribution after all battles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains four integers <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN>, <SPAN CLASS="MATH"><I>C</I></SPAN> and <SPAN CLASS="MATH"><I>K</I></SPAN>, separated by single spaces. <SPAN CLASS="MATH"><I>N</I></SPAN> is the number of heirs <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$">100)</SPAN>, <SPAN CLASS="MATH"><I>R</I></SPAN> and <SPAN CLASS="MATH"><I>C</I></SPAN> are the dimensions of the kingdom <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$"><I>R</I>, <I>C</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$">100)</SPAN>, and <SPAN CLASS="MATH"><I>K</I></SPAN> is the number of battles <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$"><I>K</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$">100)</SPAN>. Heirs are identified by sequential integers starting from zero (0 is the first heir, 1 is the second heir, <SPAN CLASS="MATH">...</SPAN>, <SPAN CLASS="MATH"><I>N</I> - 1</SPAN> is the last heir). Each of the next <SPAN CLASS="MATH"><I>R</I></SPAN> lines contains <SPAN CLASS="MATH"><I>C</I></SPAN> integers <SPAN CLASS="MATH"><I>H</I><SUB>r, c</SUB></SPAN> separated by single spaces, representing initial land distribution: <SPAN CLASS="MATH"><I>H</I><SUB>r, c</SUB></SPAN> is the initial owner of the county in row <SPAN CLASS="MATH"><I>r</I></SPAN> and column <SPAN CLASS="MATH"><I>c</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$"><I>H</I><SUB>r, c</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4473.png ALT="$ \le$"><I>N</I> - 1)</SPAN>.<P>The last test case is followed by a line containing four zeroes separated by single spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, your program must print <SPAN CLASS="MATH"><I>R</I></SPAN> lines with <SPAN CLASS="MATH"><I>C</I></SPAN> integers each, separated by single spaces in the same format as the input, representing the land distribution after all battles.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 4 4 3
0 1 2 0
1 0 2 0
0 1 2 0
0 1 2 2
4 2 3 4
1 0 3 
2 1 2 
8 4 2 1
0 7 
1 6 
2 5 
3 4 
0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 2 2 0
2 1 0 1
2 2 2 0
0 2 0 0
1 0 3 
2 1 2 
7 6 
0 5 
1 4 
2 3
</PRE><P>
______________________________________________________
4474||||||false||||||
<P>A lock you use has a code system to be opened instead of a key. The lock contains a sequence of wheels. Each wheel has the 26 letters of the English alphabet `<TT>a</TT>' through `<TT>z</TT>', in order. If you move a wheel up, the letter it shows changes to the next letter in the English alphabet (if it was showing the last letter `<TT>z</TT>', then it changes to `<TT>a</TT>'). If you move the wheel down, it changes to show the previous letter in the English alphabet (if it was showing `<TT>a</TT>', then it changes to `<TT>z</TT>').<P>It is also possible to move any subsequence of contiguous wheels in the same direction with only one movement. This has the same effect of moving each of the wheels within the subsequence on that direction, but saves the effort of doing that one wheel at a time.<P>The lock opens when the wheels show a secret sequence of letters. Currently all wheels are showing the letter `<TT>a</TT>'. You want to know the minimum number of movements you need to open the lock.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input has several test cases. Each of them is given in exactly one line containing a nonempty string of at most 1000 lowercase letters. The string represents the secret sequence of letters that opens the lock.<P>The last test case is followed by a line containing a single asterisk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a line containing a single integer with the minimum number of movements to open the lock.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
abcxyz 
abcdefghijklmnopqrstuvwxyz 
aaaaaaaaa 
zzzzzzzzz 
zzzzbzzzz 
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
5 
25 
0 
1 
3
</PRE><P>
______________________________________________________
4475||||||false||||||
<P>The University administration plans to build a new dinner hall, to replace the several small (and rather inadequate) dinner halls spread over the campus. To estimate the number of places needed in the new dinner hall, they performed an experiment to measure the maximum total number of clients inside the existing dinner halls at any time. They hired several students as <SPAN CLASS="textit">pollers</SPAN>, and positioned one poller at each entrance and each exit of the existing dinner halls. The pollers' task was to note in small cards the time each client entered or exited the hall (one card for each event). In each card they wrote the time, in the format HH:MM:SS, and the associated event (letter `<TT>E</TT>' for an entry, letter `<TT>X</TT>' for and exit).<P>The experiment started in the morning, before breakfast, and ended in the evening, after dinner. The pollers had their watches synchronized, and the halls were empty both before and after the experiment (that is, no client was inside a hall before the experiment began, and no client remained in a hall after the experiment ended). The pollers wrote exactly one card for every client who entered a hall and for every client who exited a hall.<P>After the experiment, the cards were collected and sent to the administration for processing. The task, however, was not as easy as planned, because two problems were detected. Firstly, the cards were bunched together in no particular order and therefore needed sorting; that is fairly easy, but time-consuming to do by hand. But what is worse is that, although all cards had a valid time, some pollers forgot to write the letter specifying the event. The University administration decided they needed help from an expert!<P>Given a set of cards with times and the indication of the event (the indication of the event may be missing), write a program to determine the maximum number of clients that could possibly had been inside the dinner halls in a given instant of time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. The first line of a test case contains one integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of cards collected in the experiment <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$">64800)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains the information written in a card, consisting of a <SPAN CLASS="textit">time specification</SPAN>, followed by a single space, followed by an <SPAN CLASS="textit">event specification</SPAN>. A time specification has the format <SPAN CLASS="MATH"><I>HH</I> : <I>MM</I> : <I>SS</I></SPAN>, where <SPAN CLASS="MATH"><I>HH</I></SPAN> represents hours <SPAN CLASS="MATH">(06<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$"><I>HH</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$">23)</SPAN>, <SPAN CLASS="MATH"><I>MM</I></SPAN> represents minutes <SPAN CLASS="MATH">(00<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$"><I>MM</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$">59)</SPAN> and <SPAN CLASS="MATH"><I>SS</I></SPAN> represents seconds <SPAN CLASS="MATH">(00<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$"><I>SS</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4475img1.png ALT="$ \le$">59)</SPAN>. Within a test case, no two cards have the same time. An event specification is a single character: uppercase `<TT>E</TT>' for entry, uppercase `<TT>X</TT>' for exit and `<TT>?</TT>' for unknown. Information may be missing, but the information given is always correct. That is, the times noted in all cards are valid. Also, if a card describes an entry, then a client did enter a hall at the informed time; if a card describes an exit, then a client did leave a hall at the informed time; and if a card describes an unknown event, then a client did enter or leave a hall at the informed time.<P>The last test case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, your program must print a single line, containing one single integer, the maximum total number of clients that could have been inside the dinner halls in a given instant of time.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 
07:22:03 X
07:13:22 E
08:30:51 E
21:59:02 X
4 
09:00:00 E
20:00:01 X
09:05:00 ?
20:00:00 ?
8 
10:21:00 E
10:25:00 X
10:23:00 E
10:24:00 X
10:26:00 X
10:27:00 ?
10:22:00 ?
10:20:00 ?
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
1 
2 
4
</PRE><P>
______________________________________________________
4476||||||false||||||

<P>
It's year 2100. Electricity has become very expensive. Recently, your electricity company 
raised the power rates once more. The table below shows the new rates (consumption is always 
a positive integer): 

<P>
<DIV ALIGN="CENTER">
</DIV>
<P>
<BR>
<DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=GROUPS>
<COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN  CLASS="textbf">Range</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textbf">Price</SPAN> </TD></TR>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>  
<SPAN  CLASS="textbf">(Crazy-Watt-hour)</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> <SPAN  CLASS="textbf">(Americus)</SPAN> </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $1 \sim 100$
 -->
<SPAN CLASS="MATH">1 <IMG
 WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4476img1.png
 ALT="$ \sim$"> 100</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 2 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $101 \sim 10000$
 -->
<SPAN CLASS="MATH">101 <IMG
 WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4476img1.png
 ALT="$ \sim$"> 10000</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 3 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><!-- MATH
 $10001 \sim 1000000$
 -->
<SPAN CLASS="MATH">10001 <IMG
 WIDTH="18" HEIGHT="18" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4476img1.png
 ALT="$ \sim$"> 1000000</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 5 </TD></TR>
</TBODY><TBODY>
<TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH">&gt; 1000000</SPAN> </TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP> 7 </TD></TR>
</TBODY><TBODY>
<TR><TD></TD><TD></TD></TR>
</TBODY>
</TABLE>

</DIV>

<P>

<P>
<BR>
This means that, when calculating the amount to pay, the first 100 CWh have a price of 2 
Americus each; the next 9900 CWh (between 101 and 10000) have a price of 3 Americus each 
and so on. 

<P>
For instance, if you consume 10123 CWh you will have to pay <!-- MATH
 $2 \times 100+3 \times 9900 +
5 \times 123 = 30515$
 -->
<SPAN CLASS="MATH">2 <TT>x</TT> 100 + 3 <TT>x</TT> 9900 + 5 <TT>x</TT> 123 = 30515</SPAN> Americus. 

<P>
The evil mathematicians from the company have found a way to gain even more money. Instead 
of telling you how much energy you have consumed and how much you have to pay, they will 
show you two numbers related to yourself and to a random neighbor: 

<P>
<DL COMPACT>
<DT>A:</DT>
<DD>the total amount to pay if your consumptions were billed together; and 
</DD>
<DT>B:</DT>
<DD>the absolute value of the difference between the amounts of your bills. 
</DD>
</DL>

<P>
If you can't figure out how much you have to pay, you must pay another 100 Americus for such 
a ``service". You are very economical, and therefore you are sure you cannot possibly 
consume more than any of your neighbors. So, being smart, you know you can compute how 
much you have to pay. For example, suppose the company informed you the following two 
numbers: <SPAN CLASS="MATH"><I>A</I> = 1100</SPAN> and <SPAN CLASS="MATH"><I>B</I> = 300</SPAN>. Then you and your neighbor's consumptions had to be 150 CWh 
and 250 CWh respectively. The total consumption is 400 CWh and then <SPAN CLASS="MATH"><I>A</I></SPAN> is <!-- MATH
 $2 \times 100 + 3
\times 300 = 1100$
 -->
<SPAN CLASS="MATH">2 <TT>x</TT> 100 + 3 <TT>x</TT> 300 = 1100</SPAN>. You have to pay <!-- MATH
 $2 \times 100 + 3 \times 50 = 350$
 -->
<SPAN CLASS="MATH">2 <TT>x</TT> 100 + 3 <TT>x</TT> 50 = 350</SPAN> Americus, while your 
neighbor must pay <!-- MATH
 $2 \times 100 + 3 \times 150 = 650$
 -->
<SPAN CLASS="MATH">2 <TT>x</TT> 100 + 3 <TT>x</TT> 150 = 650</SPAN> Americus, so <SPAN CLASS="MATH"><I>B</I></SPAN> is <!-- MATH
 $|350 - 650| = 300$
 -->
<SPAN CLASS="MATH">| 350 - 650| = 300</SPAN>.

<P>
Not willing to pay the additional fee, you decided to write a computer program to find out 
how much you have to pay.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
The input contains several test cases. Each test case is composed of a single line, 
containing two integers A and B, separated by a single space, representing the numbers 
shown to you <!-- MATH
 $(1 \le A, B \le 10^{9})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4476img1.png
 ALT="$ \le$"><I>A</I>, <I>B</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4476img1.png
 ALT="$ \le$">10<SUP>9</SUP>)</SPAN>. You may assume there is always a unique solution, 
that is, there exists exactly one pair of consumptions that produces those numbers. 

<P>
The last test case is followed by a line containing two zeros separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input, your program must print a single line containing one 
integer, representing the amount you have to pay. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
1100 300 
35515 27615 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
350 
2900
</PRE>

<P>

______________________________________________________
4477||||||false||||||
<P>Your school has a computer that is used as a web server for hosting its institutional web site, personal pages of the staff, sites for research groups, subjects, and many others.<P>Recently, the hard disk table was corrupted, so the organization of all the files was lost. Sadly enough, there are no backups of that information. The only hope is to look through the entire disk data and try to find out which parts correspond to each file. Fortunately, the disk was using a file system that kept each individual file contiguous, so only contiguous pieces of data need to be inspected.<P>The disk data is a sequence of bytes. Each byte in this particular disk can store an English alphabet letter (distinguishing lowercase and uppercase), a decimal digit, a point or a comma, making a total of 64 different characters.<P>While you were thinking about how to solve the problem, you suddenly remembered that the file system also maintained multiple copies of each file, so only the pieces of contiguous bytes that are repeated had a chance of being a file. Moreover, for each repetition of the same contiguous bytes, only one copy needs to be checked. For instance, if the data is `<TT>ababcabb</TT>', the contiguous subsequences `<TT>a</TT>', `<TT>b</TT>' and `<TT>ab</TT>' are repeated, but nothing containing `<TT>c</TT>', nor `<TT>ba</TT>' or `<TT>bb</TT>' is. Therefore, we have 3 pieces of contiguous bytes that need checking in this case.<P>You decide to write a program that computes exactly how many sequences need checking, that is, the number of different sequences of contiguous bytes that appear at least twice in the data.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. The input of each test case is given in exactly one line, containing a non-empty string of at most <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN> characters that represents the disk data. Each character in the string is either a lowercase letter, an uppercase letter, a digit, a point or a comma.<P>The last test case is followed by a line containing a single asterisk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output a single line with an integer, representing the number of different contiguous subsequences that appear at least twice in the input string.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
ababcabb 
mississippi 
aaaaaaaaaaaaaaaaaaaaaaaaaa 
012345678,abcdefg.STUVWXYZ 
say.twice,say.twice 
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
3 
9 
25 
0 
45
</PRE><P>
______________________________________________________
4478||||||false||||||

<P>
In Quadradonia, all rural properties are square, all have the same area, all are perfectly 
flat and all have the sides aligned to the North-South and West-East axes. 

<P>
Since properties are flat, the hills in Quadradonia look like a series of huge stairs' 
steps, with different heights. In a certain mountain, an interesting situation occurs in a 
rectangular area of <!-- MATH
 $N \times M$
 -->
<SPAN CLASS="MATH"><I>N</I> <TT>x</TT> <I>M</I></SPAN> properties. Starting from anywhere within the region, 
traversing it in the West to East direction, the properties have non-descending heights. 
Similarly, traversing that region in the North to South direction, starting from anywhere, 
the properties have also non-descending heights. 

<P>
A large wine company in Quadradonia wants to rent some properties from that region to grow 
wine grapes. The company is interested in some special varieties of wine grapes, which are 
productive only if grown in properties whose heights are within a certain interval. That 
is, the company is interested in renting properties whose heights are equal to or higher 
than a given altitude <SPAN CLASS="MATH"><I>L</I></SPAN>, and equal to or lower than a given altitude <SPAN CLASS="MATH"><I>U</I></SPAN>. To make it easier 
for harvesting, the rented properties must form a contiguous area. And since everyone in 
Quadradonia likes squares, the area to be rented must have the shape of a square. 

<P>
The company has not yet decided which variety of grapes it will grow, and therefore it has 
a list of queries involving intervals, one for each grape variety. The figure below shows 
an area of interest of dimensions <!-- MATH
 $4 \times 5$
 -->
<SPAN CLASS="MATH">4 <TT>x</TT> 5</SPAN> (in number of properties) with examples of areas 
the company could rent to grow grapes in heights within the intervals given in the picture.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4478.eps}$
 -->
<IMG
 WIDTH="1009" HEIGHT="273" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="\epsfbox{p4478.eps}">
</DIV>

<P>
You must write a program that, given the description of the rectangular area of interest 
in the mountain, and a list of queries containing height intervals, determines, for each 
query, the largest side, in number of properties, of a contiguous square area with heights 
within the specified interval. 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2> 

<P>
The input contains several test cases. The first line of a test case contains two integers 
<SPAN CLASS="MATH"><I>N</I></SPAN> and <SPAN CLASS="MATH"><I>M</I></SPAN>, separated by a single space, representing respectively the number of properties 
in the North-South direction <!-- MATH
 $(1 \le N \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>N</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$">500)</SPAN> and the number of properties in the West-East 
direction <!-- MATH
 $(1 \le M \le 500)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>M</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$">500)</SPAN> of the region of interest. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines contains <SPAN CLASS="MATH"><I>M</I></SPAN> 
integers <SPAN CLASS="MATH"><I>H</I><SUB>i, j</SUB></SPAN>, separated by single spaces, indicating the heights of the properties 
in the region of interest (<!-- MATH
 $0 \le H_{i,j} \le 10^{5}$
 -->
<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>H</I><SUB>i, j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$">10<SUP>5</SUP></SPAN>, for <!-- MATH
 $1 \le i \le N$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>i</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>N</I></SPAN> and <!-- MATH
 $1 \le j \le M$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>j</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>M</I></SPAN>; 
also, <!-- MATH
 $H_{i-1,j} \le H_{i,j}$
 -->
<SPAN CLASS="MATH"><I>H</I><SUB>i-1, j</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>H</I><SUB>i, j</SUB></SPAN> and <!-- MATH
 $H_{i,j-1} \le H_{i,j}$
 -->
<SPAN CLASS="MATH"><I>H</I><SUB>i, j-1</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>H</I><SUB>i, j</SUB></SPAN>). The next line contains an integer 
<SPAN CLASS="MATH"><I>Q</I></SPAN> indicating the number of queries <!-- MATH
 $(1 \le Q \le 10^{4})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>Q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$">10<SUP>4</SUP>)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>Q</I></SPAN> lines describes a 
query, and contains two integers <SPAN CLASS="MATH"><I>L</I></SPAN> and <SPAN CLASS="MATH"><I>U</I></SPAN>, separated by a single space, indicating one 
interval of heights <!-- MATH
 $(0 \le L \le U \le 10^{5})$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$"><I>U</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4478.png
 ALT="$ \le$">10<SUP>5</SUP>)</SPAN>. The heights of properties to be rented must 
be greater than or equal to <SPAN CLASS="MATH"><I>L</I></SPAN> and less than or equal to <SPAN CLASS="MATH"><I>U</I></SPAN>. 

<P>
The last test case is followed by a line containing two zeros separated by a single space.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case in the input your program must print <SPAN CLASS="MATH"><I>Q</I> + 1</SPAN> lines. Each of the first <SPAN CLASS="MATH"><I>Q</I></SPAN> 
lines must contain a single integer, indicating the largest side, in number of properties, 
of a contiguous square area with heights within the interval specified in the respective 
input query. The last line to be printed for each test case is used as a separator and must 
contain a single character `<TT>-</TT>' (known as hyphen or minus sign). 

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
4 5 
13 21 25 33 34
16 21 33 35 35
16 33 33 45 50
23 51 66 83 93
3 
22 90 
33 35 
20 100 
4 4 
1 7 9 11 
5 8 10 12 
7 10 15 17 
11 19 30 41 
4 
6 20 
7 9 
10 10 
13 14 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2> 

<P>
<PRE>
3 
2 
4 
-
3 
1 
1 
0 
-
</PRE>

<P>

______________________________________________________
4479||||||false||||||
<P>Soccer is the American English word used to describe Football, the British English word applied to the most popular sport in Latin America (and in the world). Hooligan is sometimes used to describe an aggressive, troublemaking, soccer fan.<P>In Linearonia, a soccer tournament is in progress. There, the ranking process is as follows: for each game, the winner gets two points and the loser gets no points; in case of a tie, both competitors get one point each. The champion is the team with the highest number of points. Every pair of distinct teams play against each other exactly the same number of times, called the <SPAN CLASS="textit">matching number</SPAN>.<P>You have your favorite team, your <SPAN CLASS="textit">dream team</SPAN>, and you wonder whether it is possible for your dream team to be champion. You know the number of teams, the matching number and the results of some games that have already been played. Write a program to decide whether at the end of the tournament your dream team can still be the <SPAN CLASS="textit">only</SPAN> champion, with strictly more points than any other team.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases, each case consists of one or more lines. The first line contains three integers, <SPAN CLASS="MATH"><I>N</I></SPAN>, <SPAN CLASS="MATH"><I>M</I></SPAN> and <SPAN CLASS="MATH"><I>G</I></SPAN>, separated by single spaces, representing respectively the number of teams playing in the tournament <SPAN CLASS="MATH">(2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$">40)</SPAN>, the matching number <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$"><I>M</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$">4)</SPAN> and the number of games already played <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$"><I>G</I>)</SPAN>. Your dream team is identified by the number <TT>0</TT>, the other teams are identified by the integers 1, 2, <SPAN CLASS="MATH">..., <I>N</I> - 1</SPAN>.<P>Each of the next <SPAN CLASS="MATH"><I>G</I></SPAN> lines describes a game already played. The line contains an integer <SPAN CLASS="MATH"><I>I</I></SPAN>, a character <SPAN CLASS="MATH"><I>C</I></SPAN> and an integer <SPAN CLASS="MATH"><I>J</I></SPAN>, separated by single spaces. Integers <SPAN CLASS="MATH"><I>I</I></SPAN> and <SPAN CLASS="MATH"><I>J</I></SPAN> are the teams that played that game (<SPAN CLASS="MATH"><I>I</I> <IMG WIDTH="18" HEIGHT="34" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \neq$"> <I>J</I></SPAN> and <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$"><I>I</I>, <I>J</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4479img1.png ALT="$ \le$"><I>N</I> - 1)</SPAN>. Character <SPAN CLASS="MATH"><I>C</I></SPAN> is `<TT>&lt;</TT>' if team <SPAN CLASS="MATH"><I>I</I></SPAN> lost to team <SPAN CLASS="MATH"><I>J</I></SPAN>, or `<TT>=</TT>' if the game ended in a tie. The last test case is followed by a line containing three zeros separated by single spaces.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case in the input, your program must print a single line, containing one single character, uppercase `<TT>Y</TT>' if your dream team can be the champion, or uppercase `<TT>N</TT>' otherwise.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 2 6
0 &lt; 3
3 = 2
2 &lt; 0
1 &lt; 0
2 = 0
3 &lt; 0
4 1 5
2 = 0
0 &lt; 1
1 = 3
2 &lt; 1
0 &lt; 3
4 2 5
2 = 0
0 &lt; 1
1 = 3
2 &lt; 1
0 &lt; 3
2 1 1
1 &lt; 0
4 1 1
0 &lt; 1
4 1 2
0 &lt; 1
0 &lt; 2
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Y 
N 
Y 
Y 
Y 
N
</PRE><P>
______________________________________________________
4480||||||false||||||
<P>A given triangle can be either equilateral (three sides of the same length), scalene (three sides of different lengths), or isosceles (two sides of the same length and a third side of a different length). It is a known fact that points with all integer coordinates cannot be the vertices of an equilateral triangle.<P>You are given a set of different points with integer coordinates on the <SPAN CLASS="MATH"><I>XY</I></SPAN> plane, such that no three points in the set lay on the same line. Your job is to calculate how many of the possible choices of three points are the vertices of an isosceles triangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Each test case is given in several lines. The first line of each test case contains an integer <SPAN CLASS="MATH"><I>N</I></SPAN> indicating the number of points in the set <SPAN CLASS="MATH">(3<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4480img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4480img1.png ALT="$ \le$">1000)</SPAN>. Each of the next <SPAN CLASS="MATH"><I>N</I></SPAN> lines describes a different point of the set using two integers <SPAN CLASS="MATH"><I>X</I></SPAN> and <SPAN CLASS="MATH"><I>Y</I></SPAN> separated by a single space <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4480img1.png ALT="$ \le$"><I>X</I>, <I>Y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4480img1.png ALT="$ \le$">10<SUP>6</SUP>)</SPAN>; these values represent the coordinates of the point on the <SPAN CLASS="MATH"><I>XY</I></SPAN> plane. You may assume that within each test case no two points have the same location and no three points are collinear.<P>The last test case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case output a single line with a single integer indicating the number of subsets of three points that are the vertices of an isosceles triangle.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
5 
1 2 
2 1 
2 2 
1 1 
1000 1000000 
6 
1000 1000 
996 1003 
996 997 
1003 996 
1003 1004 
992 1000 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
10
</PRE><P>
______________________________________________________
4481||||||false||||||
<P>A. C. Marcos is taking his first steps in the direction of jingle composition. He is having some troubles, but at least he is achieving pleasant melodies and attractive rhythms.<P>In music, a <SPAN CLASS="textit">note</SPAN> has a pitch (its frequency, resulting in how high or low is the sound) and a duration (for how long the note should sound). In this problem we are interested only in the duration of the notes.<P>A jingle is divided into a sequence of <SPAN CLASS="textit">measures</SPAN>, and a measure is formed by a series of notes.<P>The duration of a note is indicated by its shape. In this problem, we will use uppercase letters to indicate a note's duration. The following table lists all the available notes:<P><DIV ALIGN="CENTER"><IMG WIDTH="738" HEIGHT="136" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4481.png ALT="\epsfbox{p4481.eps}"></DIV><P>The duration of a measure is the sum of the durations of its notes. In Marcos' jingles, each measure has the same duration. As Marcos is just a beginner, his famous teacher Johann Sebastian III taught him that the duration of a measure must always be 1.<P>For example, Marcos wrote a composition containing five measures, of which the first four have the correct duration and the last one is wrong. In the example below, each measure is surrounded with slashes and each note is represented as in the table above.<P><P><BR><DIV ALIGN="CENTER"><TT>/HH/QQQQ/XXXTXTEQH/W/HW/</TT></DIV><P><P><BR>Marcos likes computers as much as music. He wants you to write a program that determines, for each one of his compositions, how many measures have the right duration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The input contains several test cases. Each test case is described in a single line containing a string whose length is between 3 and 200 characters, inclusive, representing a composition. A composition begins and ends with a slash `<code>/</code>'. Measures in a composition are separated by a slash `<code>/</code>'. Each note in a measure is represented by the corresponding uppercase letter, as described above. You may assume that each composition contains at least one measure and that each measure contains at least one note. All characters in the input will be either slashes or one of the seven uppercase letters used to represent notes, as described above.<P>The last test case is followed by a line containing a single asterisk.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case your program must output a single line, containing a single integer, the number of measures that have the right duration.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
/HH/QQQQ/XXXTXTEQH/W/HW/ 
/W/W/SQHES/ 
/WE/TEX/THES/ 
*
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
4 
3 
0
</PRE><P>
______________________________________________________
4482||||||false||||||
<P>In a Latin American high school, the klingon language has become so popular that many of the students have begun learning this artificial language on their own. After becoming aware of the situation, the directors have decided to implement formal klingon courses. The problem is that kids have different starting levels of knowledge of the language. Therefore, the directors decided to offer two course levels: basic and advanced.<P>The school has several divisions, with each student belonging to exactly one division. Because of bureaucracy and schedule conflicts, students of different divisions cannot be in the same klingon course. Also, to be fair, the basic and advanced klingon levels should be offered to all divisions, and have the same level of difficulty among the divisions.<P>Therefore, each division will be partitioned into two groups: one group will be assigned a basic level course, and the other group an advanced level course. It is possible, also, that a division does not contain any students in one of the levels.<P>To assign the levels, a klingon test has been previously taken by all students of the school, each getting an integer grade between 0 and 1000, inclusive. To accomplish the aforementioned goals, the school directors have decided that all students with a score greater than or equal to some <SPAN CLASS="MATH"><I>T</I></SPAN> will be assigned the advanced level, and all students with a score less than <SPAN CLASS="MATH"><I>T</I></SPAN> will be assigned the basic level.<P>However, they cannot decide on the best value of <SPAN CLASS="MATH"><I>T</I></SPAN>. They would like a value that evenly splits all divisions. For this, they came up with a metric: They want the value of <SPAN CLASS="MATH"><I>T</I></SPAN> that minimizes the accumulated difference, that is, the sum of the difference between the number of students in the two groups (basic and advanced) within each division.<P>For example, if the school has two divisions, where one division has 10 students in the basic level and 20 in the advanced level, while the other one has 17 and 15, respectively, the accumulated difference would be <SPAN CLASS="MATH">| 10 - 20| + | 17 - 15| = 12</SPAN>.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There are several test cases. Each test case is given in several lines. The first line of each test case contains a single integer <SPAN CLASS="MATH"><I>N</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4482img1.png ALT="$ \le$"><I>N</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4482img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN>, the number of divisions in the school. <SPAN CLASS="MATH">2 <TT>x</TT> <I>N</I></SPAN> lines follow, with each division being described in two consecutive lines. The first line of each group of two contains a single integer <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4482img1.png ALT="$ \le$"><I>K</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4482img1.png ALT="$ \le$">10<SUP>4</SUP>)</SPAN> the number of students in division <SPAN CLASS="MATH"><I>i</I></SPAN>. The second line contains <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN> integers between 0 and 1000, inclusive, separated by single spaces, representing the scores of each of the students in division <SPAN CLASS="MATH"><I>i</I></SPAN>. You may assume that the total number of students within each test case (that is, the sum of the values of all <SPAN CLASS="MATH"><I>K</I><SUB>i</SUB></SPAN>) is not greater than <SPAN CLASS="MATH">10<SUP>5</SUP></SPAN>.<P>The last test case is followed by a line containing a single zero.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, output a single line with a single integer representing the minimum value for the accumulated difference if <SPAN CLASS="MATH"><I>T</I></SPAN> is chosen optimally.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 
2 
1 2 
2 
3 4 
2 
2 
1 4 
2 
2 3 
3 
4 
1 10 100 1000 
3 
5 55 555 
5 
4 16 64 256 1000 
1 
4 
500 500 500 500 
0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
2 
0 
2 
4

______________________________________________________
4483||||||false||||||
<P>In this problem, you need to simulate the execution of <SPAN CLASS="MATH"><I>n</I></SPAN> service programs <SPAN CLASS="MATH"><I>P</I><SUB>1</SUB>, <I>P</I><SUB>2</SUB>,..., <I>P</I><SUB>n</SUB></SPAN>. Each program is described with a sequence of integers: <SPAN CLASS="MATH"><I>T</I>&nbsp;<I>I</I>&nbsp;<I>in</I><SUB>1</SUB>&nbsp;<I>in</I><SUB>2</SUB>...<I>in</I><SUB>I</SUB>&nbsp;<I>O</I>&nbsp;<I>out</I><SUB>1</SUB>&nbsp;<I>out</I><SUB>2</SUB>...<I>out</I><SUB>O</SUB></SPAN>, that means it takes <SPAN CLASS="MATH"><I>T</I></SPAN> unit time to execute, needs <SPAN CLASS="MATH"><I>I</I></SPAN> input variables (i.e. <SPAN CLASS="MATH"><I>in</I><SUB>1</SUB>&nbsp;<I>in</I><SUB>2</SUB>...<I>in</I><SUB>I</SUB></SPAN>), and sets <SPAN CLASS="MATH"><I>O</I></SPAN> output variables (i.e. <SPAN CLASS="MATH"><I>out</I><SUB>1</SUB>&nbsp;<I>out</I><SUB>2</SUB>...<I>out</I><SUB>O</SUB></SPAN>) when it finishes running. A program can be started if and only if all these <SPAN CLASS="MATH"><I>T</I></SPAN> input variables are ready (initially available, or set by some other programs).<P>Imagine you have a super-computer which can execute as many programs in parallel as you like, and every variable can be read and written simultaneously by multiple programs. Your task is to calculate a particular ``target" variable, as soon as possible.<P>Assume there are 4 programs, shown in the table below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=4 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Program No.</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Time</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Requires</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Produces</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>2</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>2</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>1</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>3</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>3</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>2</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>4</SUB></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>3</SUB>, <I>X</I><SUB>4</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>X</I><SUB>5</SUB></SPAN></TD></TR></TBODY></TABLE></DIV><P><P><BR>The quickest time to get <SPAN CLASS="MATH"><I>X</I><SUB>5</SUB></SPAN> is 7, if only <SPAN CLASS="MATH"><I>X</I><SUB>1</SUB></SPAN> is available at startup.<P>You also need to construct an expression that shows <SPAN CLASS="textbf">how to execute the programs to achieve the minimal time</SPAN>. The grammar of the expression is recursive:<P><P><BR><UL><LI><SPAN CLASS="textbf">Single Program</SPAN>: <TT>P</TT><SPAN CLASS="MATH"><I>x</I></SPAN>, where <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>n</I></SPAN>. (i.e. <TT>P2</TT>, <TT>P499</TT>, etc). Meaning: execute the program immediately. Then end of this program marks the end of this expression. </LI><LI><SPAN CLASS="textbf">Execute in serial</SPAN>: <SPAN CLASS="MATH">(<I>S</I><SUB>1</SUB><I>S</I><SUB>2</SUB>...<I>S</I><SUB>k</SUB>)</SPAN>, where every <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> is an expression. Note that the outermost pair of parentheses is mandatory. Meaning: execute expression <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN>, then <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> immediately after <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB></SPAN> ends, then <SPAN CLASS="MATH"><I>S</I><SUB>3</SUB></SPAN> immediately after <SPAN CLASS="MATH"><I>S</I><SUB>2</SUB></SPAN> ends, <SPAN CLASS="MATH">...</SPAN>, and finally <SPAN CLASS="MATH"><I>S</I><SUB>k</SUB></SPAN> immediately after <SPAN CLASS="MATH"><I>S</I><SUB>k-1</SUB></SPAN> ends. Then end of expression <SPAN CLASS="MATH"><I>S</I><SUB>k</SUB></SPAN> marks the end of the whole expression. </LI><LI><SPAN CLASS="textbf">Execute in parallel</SPAN>: <SPAN CLASS="MATH">(<I>S</I><SUB>1</SUB>| <I>S</I><SUB>2</SUB>|...| <I>S</I><SUB>k</SUB>)</SPAN>, where every <SPAN CLASS="MATH"><I>S</I><SUB>i</SUB></SPAN> is an expression. Note that the outermost pair of parentheses is mandatory. Meaning: execute expressions <SPAN CLASS="MATH"><I>S</I><SUB>1</SUB>, <I>S</I><SUB>2</SUB>,...</SPAN>, and <SPAN CLASS="MATH"><I>S</I><SUB>k</SUB></SPAN> simultaneously. The end of last finished expression marks the end of the whole expression. </LI></UL><P>One of the possible expressions for the example above is <TT>(((P1P3)|P2)P4)</TT>. <TT>(P1P2P3P4)</TT> is not acceptable, since <SPAN CLASS="MATH"><I>X</I><SUB>5</SUB></SPAN> is available at time 10 in that expression, later than the optimal time 7.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 100 test cases. Each case begins with three integers <SPAN CLASS="MATH"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>m</I></SPAN>, <SPAN CLASS="MATH"><I>o</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>n</I>, <I>m</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$">500, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>o</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>m</I>)</SPAN>. The number of programs is <SPAN CLASS="MATH"><I>n</I></SPAN>, the number of variables is <SPAN CLASS="MATH"><I>m</I></SPAN>, and the target variable is <SPAN CLASS="MATH"><I>X</I><SUB>o</SUB></SPAN>. Variables are numbered 1 to <SPAN CLASS="MATH"><I>m</I></SPAN>, programs are numbered 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. The next line contains a 01 string of <SPAN CLASS="MATH"><I>m</I></SPAN> characters. The <SPAN CLASS="MATH"><I>i</I></SPAN>-th character is 1 if and only if the <SPAN CLASS="MATH"><I>i</I></SPAN>-th variable is initially available. The target variable is guaranteed to be unavailable at startup. The following <SPAN CLASS="MATH"><I>n</I></SPAN> lines describe the programs. Each line begins with an integer <SPAN CLASS="MATH"><I>T</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$">100)</SPAN>, the execution time, and an integer <SPAN CLASS="MATH"><I>I</I></SPAN> followed by <SPAN CLASS="MATH"><I>I</I></SPAN> integers <SPAN CLASS="MATH"><I>in</I><SUB>1</SUB>, <I>in</I><SUB>2</SUB>,..., <I>in</I><SUB>I</SUB></SPAN>, as stated above, then an integer <SPAN CLASS="MATH"><I>O</I></SPAN> followed by <SPAN CLASS="MATH"><I>O</I></SPAN> integers <SPAN CLASS="MATH"><I>out</I><SUB>1</SUB>, <I>out</I><SUB>2</SUB>,..., <I>out</I><SUB>O</SUB></SPAN>. <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>in</I><SUB>i</SUB>, <I>out</I><SUB>i</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>m</I></SPAN>, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$"><I>I</I>, <I>O</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4483img1.png ALT="$ \le$">10</SPAN>. The last test case is followed by <SPAN CLASS="MATH"><I>n</I> = <I>m</I> = <I>o</I> = 0</SPAN>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the total time needed to get the target variable. If it's not possible to get the target variable, print `<TT>-1</TT>' instead.<P>If it's possible to get the target variable, print the expression after that, in the same line. Be sure to print a valid expression having at most 10,000 characters, with each program printed at most once. There should be no whitespace characters within the expression.<P>To make this problem a little bit easier, it's allowed that some programs finish <SPAN CLASS="textbf">after</SPAN> the optimal time, as long as the target variable is available at the optimal time. You're also allowed to print redundant parentheses (pay attention to the expression length, though). If such an expression does not exist, print ``<TT>Can't do in serial-parallel.</TT>", without quotes.<P>Print a blank line after the output of each test case.<P><P><BR><SPAN CLASS="textbf">Explanation:</SPAN><P>After a variable is set, it'll keep available forever. That's why <TT>P3</TT> can be executed, in the third example.<P>Also note that there are some other correct expressions for the first sample, e.g.<TT>((P1P3P4)|P2)</TT>. You can even print <TT>(((P1P3)P4)|P2)</TT> or <TT>((P1(P3P4))|P2)</TT>. Any one of them is acceptable in this problem.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
4 5 5 
10000 
2 1 1 1 2 
3 1 1 1 3 
4 1 2 1 4 
1 2 3 4 1 5 
1 2 1 
01 
31 1 2 1 1 
3 5 5 
10100 
3 1 1 1 2 
1 1 3 1 4 
3 2 4 2 1 5 
1 3 3 
100 
1 1 1 1 2 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 7 (((P1P3)|P2)P4) 
Case 2: 31 P1 
Case 3: 6 ((P1P3)|P2) 
Case 4: -1
</PRE><P>
______________________________________________________
4484||||||false||||||
<P>There are <SPAN CLASS="MATH"><I>n</I></SPAN> boxes <SPAN CLASS="MATH"><I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>,..., <I>C</I><SUB>n</SUB></SPAN> in 3D space. The edges of the boxes are parallel to the <SPAN CLASS="MATH"><I>x</I></SPAN>, <SPAN CLASS="MATH"><I>y</I></SPAN> or <SPAN CLASS="MATH"><I>z</I></SPAN>-axis. We provide some relations of the boxes, and your task is to construct a set of boxes satisfying all these relations.<P>There are four kinds of relations (<SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>i</I></SPAN>,<SPAN CLASS="MATH"><I>j</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>n</I></SPAN>, <SPAN CLASS="MATH"><I>i</I></SPAN> is different from <SPAN CLASS="MATH"><I>j</I></SPAN>):<P><UL><LI><TT>I</TT> <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I></SPAN>: The intersection volume of <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> and <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN> is positive. </LI><LI><TT>X</TT> <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I></SPAN>: The intersection volume is zero, and any point inside <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> has smaller <SPAN CLASS="MATH"><I>x</I></SPAN>-coordinate than any point inside <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN>. </LI><LI><TT>Y</TT> <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I></SPAN>: The intersection volume is zero, and any point inside <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> has smaller <SPAN CLASS="MATH"><I>y</I></SPAN>-coordinate than any point inside <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN>. </LI><LI><TT>Z</TT> <SPAN CLASS="MATH"><I>i</I>&nbsp;<I>j</I></SPAN>: The intersection volume is zero, and any point inside <SPAN CLASS="MATH"><I>C</I><SUB>i</SUB></SPAN> has smaller z-coordinate than any point inside <SPAN CLASS="MATH"><I>C</I><SUB>j</SUB></SPAN>. </LI></UL><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 30 test cases. Each case begins with a line containing two integers <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$">1, 000)</SPAN> and <SPAN CLASS="MATH"><I>R</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>R</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$">100, 000)</SPAN>, the number of boxes and the number of relations. Each of the following <SPAN CLASS="MATH"><I>R</I></SPAN> lines describes a relation, written in the format above. The last test case is followed by <SPAN CLASS="MATH"><I>n</I> = <I>R</I> = 0</SPAN>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and either the word `<TT>POSSIBLE</TT>' or `<TT>IMPOSSIBLE</TT>'. If it's possible to construct the set of boxes, the <SPAN CLASS="MATH"><I>i</I></SPAN>-th line of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines contains six integers <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB></SPAN>, that means the <SPAN CLASS="MATH"><I>i</I></SPAN>-th box is the set of points <SPAN CLASS="MATH">(<I>x</I>, <I>y</I>, <I>z</I>)</SPAN> satisfying <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>x</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>x</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>y</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>y</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>y</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>z</I><SUB>1</SUB><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>z</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4484img1.png ALT="$ \le$"><I>z</I><SUB>2</SUB></SPAN>. The absolute values of <SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>z</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>z</I><SUB>2</SUB></SPAN> should not exceed 1,000,000.<P>Print a blank line after the output of each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 
I 1 2
X 2 3
3 3 
Z 1 2
Z 2 3
Z 3 1
1 0 
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: POSSIBLE
0 0 0 2 2 2
1 1 1 3 3 3
8 8 8 9 9 9

Case 2: IMPOSSIBLE 

Case 3: POSSIBLE 
0 0 0 1 1 1
</PRE><P>
______________________________________________________
4485||||||false||||||

<P>
You live in a village but work in another village. You decided to follow the straight path 
between your house (A) and the working place (B), but there are several rivers you need 
to cross. Assume B is to the right of A, and all the rivers lie between them. 

<P>
Fortunately, there is one ``automatic" boat moving smoothly in each river. When you arrive 
the left bank of a river, just wait for the boat, then go with it. You're so slim that 
carrying you does not change the speed of any boat. 

<P>
Days and days after, you came up with the following question: assume each boat is 
independently placed at random at time 0, what is the <SPAN  CLASS="textbf">expected time</SPAN> to 
reach B from A? Your walking speed is always 1. 

<P>
To be more precise, for a river of length <SPAN CLASS="MATH"><I>L</I></SPAN>, the distance of the boat (which could be 
regarded as a mathematical point) to the left bank at time 0 is 
<SPAN  CLASS="textbf">uniformly chosen</SPAN> from interval <SPAN CLASS="MATH">[0, <I>L</I>]</SPAN>, and the boat is equally 
like to be moving left or right, if it's not precisely at the river bank.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be at most 10 test cases. Each case begins with two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>D</I></SPAN>, 
where <SPAN CLASS="MATH"><I>n</I></SPAN> <!-- MATH
 $(0 \le n \le 10)$
 -->
<SPAN CLASS="MATH">(0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$">10)</SPAN> is the number of rivers between A and B, <SPAN CLASS="MATH"><I>D</I></SPAN> 
<!-- MATH
 $(1 \le D \le 1000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$"><I>D</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$">1000)</SPAN> is the distance from A to B. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines 
describes a river with 3 integers: <SPAN CLASS="MATH"><I>p</I></SPAN>, <SPAN CLASS="MATH"><I>L</I></SPAN> and <SPAN CLASS="MATH"><I>v</I></SPAN> (<SPAN CLASS="MATH">0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$"><I>p</I> &lt; <I>D</I></SPAN>, <SPAN CLASS="MATH">0 &lt; <I>L</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$"><I>D</I></SPAN>, 
<!-- MATH
 $1 \le v \le 100$
 -->
<SPAN CLASS="MATH">1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$"><I>v</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4485img1.png
 ALT="$ \le$">100</SPAN>). <SPAN CLASS="MATH"><I>p</I></SPAN> is the distance from A to the left bank of this river, 
<SPAN CLASS="MATH"><I>L</I></SPAN> is the length of this river, <SPAN CLASS="MATH"><I>v</I></SPAN> is the speed of the boat on this river. It is 
guaranteed that rivers lie between A and B, and they don't overlap. The last test case 
is followed by <SPAN CLASS="MATH"><I>n</I> = <I>D</I> = 0</SPAN>, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the expected time, rounded to 3 digits 
after the decimal point. 

<P>
Print a blank line after the output of each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
1 1 
0 1 2
0 1 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 1.000 

Case 2: 1.000
</PRE>

<P>

______________________________________________________
4486||||||false||||||
<P>Jiajia downloads a lot, a lot more than you can even imagine. Some say that he starts downloading up to 20,000 files together. If 20,000 files try to share a limited bandwidth then it will be a big hazard and no files will be downloaded properly. That is why, he uses a download manager.<P>If there are <SPAN CLASS="MATH"><I>T</I></SPAN> files to download, the download manger uses the following policy while downloading files:<P><OL><LI>The download manager gives the smaller files higher priority, so it starts downloading the smallest <SPAN CLASS="MATH"><I>n</I></SPAN> files at startup. If there is a tie, download manager chooses the one with less bytes remaining (for download). We assume that with at least 50 Mega Bytes/sec of bandwidth, <SPAN CLASS="MATH"><I>n</I></SPAN> files can be downloaded simultaneously without any problem. </LI><LI>The available bandwidth is equally shared by the all the files that are being downloaded. When a file is completely downloaded its bandwidth is instantaneously given to the next file. If there are no more files left except the files that are being downloaded, this bandwidth is immediately shared equally by all remaining files that are being downloaded. </LI></OL><P>Given the size and completed percentage of each file, your task is to intelligently simulate the behavior of the download manager to find the total time required to download all the files.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>The will be at most 10 test cases. Each case begins with three integers <SPAN CLASS="MATH"><I>T</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>T</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$">20000)</SPAN>, <SPAN CLASS="MATH"><I>n</I></SPAN> ( <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$">2000</SPAN> and <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>T</I></SPAN>) and <SPAN CLASS="MATH"><I>B</I></SPAN> <SPAN CLASS="MATH">(50<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>B</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$">1000)</SPAN>. Here <SPAN CLASS="MATH"><I>B</I></SPAN> denotes the total bandwidth available to Jiajia (In Megabytes/sec). Please note that the download manager always downloads <SPAN CLASS="MATH"><I>n</I></SPAN> files in parallel unless there are less than <SPAN CLASS="MATH"><I>n</I></SPAN> files available for download. Each of next <SPAN CLASS="MATH"><I>T</I></SPAN> lines contains one non-negative floating-point number <SPAN CLASS="MATH"><I>S</I></SPAN> (less than 20,000, containing at most 2 digits after the decimal places) and one integer <SPAN CLASS="MATH"><I>P</I></SPAN> <SPAN CLASS="MATH">(0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$"><I>P</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4486img1.png ALT="$ \le$">100)</SPAN>. These two numbers denote a file whose size is <SPAN CLASS="MATH"><I>S</I></SPAN> megabyte and which has been downloaded exactly <SPAN CLASS="MATH"><I>P</I>%</SPAN> already. Also note that although theoretically it is not possible that the size of a file or size of its remaining part is a fraction when expressed in bytes, for simplicity please assume that such thing is possible in this problem. The last test case is followed by <SPAN CLASS="MATH"><I>T</I> = <I>n</I> = <I>B</I> =</SPAN><TT>0</TT>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each case, print the case number and the total time required to download all the files, expressed in hours and rounded to 2 digits after the decimal point. Print a blank line after the output of each test case.<P><P><BR><SPAN CLASS="textbf">Explanation:</SPAN><P>In the first sample, there are 6 files and the download manager can download 3 files simultaneously. The size of the smallest file is 40.40 Megabyte but there are four such files (2nd, 4th, 5th and 6th files). So the download manager chooses the 6th, 5th and 4th files for download as they have less bytes remaining. All these files get equal bandwidth (30.00 Megabyte/Sec). Of these three files the 8th file is finished first. So instantaneously the 2nd file starts downloading. Then, 5th file is finished. So the next larger file (3rd file) starts downloading. This process goes on until all files are downloaded.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
6 3 90 
100.00 90 
40.40 70 
60.30 70 
40.40 80 
40.40 85 
40.40 88 
1 1 56 
12.34 100 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 0.66 
Case 2: 0.00
</PRE><P>
______________________________________________________
4487||||||false||||||
<P>You are <SPAN CLASS="textbf">not</SPAN> given <SPAN CLASS="MATH"><I>n</I></SPAN> non-negative integers <SPAN CLASS="MATH"><I>X</I><SUB>0</SUB>, <I>X</I><SUB>1</SUB>,..., <I>X</I><SUB>n-1</SUB></SPAN> less than <SPAN CLASS="MATH">2<SUP>20</SUP></SPAN>, but they do exist, and their values never change.<P>I'll gradually provide you some facts about them, and ask you some questions.<P>There are two kinds of facts, plus one kind of question:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=2 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=LEFT><COL ALIGN=LEFT><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Format</TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Meaning</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>I</TT> <SPAN CLASS="MATH"><I>p</I>&nbsp;<I>v</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I tell you <SPAN CLASS="MATH"><I>X</I><SUB>p</SUB> = <I>v</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>I</TT> <SPAN CLASS="MATH"><I>p</I>&nbsp;<I>q</I>&nbsp;<I>v</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>I tell you <SPAN CLASS="MATH"><I>X</I><SUB>p</SUB>&nbsp;<I>XOR</I>&nbsp;<I>X</I><SUB>q</SUB> = <I>v</I></SPAN></TD></TR><TR><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP><TT>Q</TT> <SPAN CLASS="MATH"><I>k</I>&nbsp;<I>p</I><SUB>1</SUB>&nbsp;<I>p</I><SUB>2</SUB>...<I>p</I><SUB>k</SUB></SPAN></TD><TD VALIGN=BASELINE ALIGN=LEFT NOWRAP>Please tell me the value of <SPAN CLASS="MATH"><I>Xp</I><SUB>1</SUB>&nbsp;<I>XOR</I>&nbsp;<I>Xp</I><SUB>2</SUB>&nbsp;<I>XOR</I>...<I>XOR</I>&nbsp;<I>X</I><SUB>pk</SUB></SPAN></TD></TR></TBODY></TABLE></DIV><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 10 test cases. Each case begins with two integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>Q</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4487img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4487img1.png ALT="$ \le$">20, 000, 2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4487img1.png ALT="$ \le$"><I>Q</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4487img1.png ALT="$ \le$">40, 000)</SPAN>. Each of the following lines contains either a fact or a question, formatted as stated above. The <SPAN CLASS="MATH"><I>k</I></SPAN> parameter in the questions will be a positive integer not greater than 15, and the <SPAN CLASS="MATH"><I>v</I></SPAN> parameter in the facts will be a non-negative integer less than <SPAN CLASS="MATH">2<SUP>20</SUP></SPAN>. The last case is followed by <SPAN CLASS="MATH"><I>n</I> = <I>Q</I> = 0</SPAN>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number on its own line, then the answers, one on each one. If you can't deduce the answer for a particular question, from the facts I provide you <SPAN CLASS="textbf">before</SPAN> that question, print ``<TT>I don't know.</TT>", without quotes. If the <SPAN CLASS="MATH"><I>i</I></SPAN>-th fact (don't count questions) <SPAN CLASS="textbf">cannot</SPAN> be consistent with <SPAN CLASS="textbf">all</SPAN> the facts before that, print ``<TT>The first <SPAN CLASS="MATH"><I>i</I></SPAN> facts are conflicting.</TT>", then keep silence for everything after that (including facts and questions). Print a blank line after the output of each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
2 6 
I 0 1 3
Q 1 0 
Q 2 1 0
I 0 2 
Q 1 1 
Q 1 0 
3 3 
I 0 1 6
I 0 2 2
Q 2 1 2
2 4 
I 0 1 7
Q 2 0 1
I 0 1 8
Q 2 0 1
0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 
I don't know. 
3 
1 
2 

Case 2: 
4 

Case 3: 
7 
The first 2 facts are conflicting.
</PRE><P>
______________________________________________________
4488||||||false||||||
<P>You're playing an RPG, which is arguably the best Chinese RPG in 2007. You got to the final combat. You want to win as soon as possible. Do you know what I am talking about?<P><P><BR><SPAN CLASS="textbf">For competitors who're not familiar with the game:</SPAN> we're giving a brief introduction to the combat system and the characters involved in that last combat very soon.<P><P><BR><SPAN CLASS="textbf">For competitors who're too familiar with the game:</SPAN> we're simplifying and/or changing the rules and facts for this problem. We apologize if you feel unhappy about that.<P><DIV ALIGN="CENTER"><IMG WIDTH="1203" HEIGHT="901" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="\epsfbox{p4488.eps}"></DIV><P><DIV ALIGN="CENTER">Fig. The final combat</DIV><P>The screenshot above gives you some idea about the combat system and the characters, which can be summarized as follows:<P><P><BR><UL><LI>You have 4 heroes: Yun Tianhe (YTH), Han Lingsha (HLS), Liu Mengli (LML) and Murong Ziying (MRZY). Before the combat begins, you need to choose <SPAN CLASS="textbf">exactly</SPAN> three heroes and rearrange them in some order. Let's call the 1st, 2nd and 3rd hero <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN>, respectively. In this screenshot above, <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN> is YTH, <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN> is HLS and <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN> is LML. (Sorry for the Ziying fans!) </LI><LI>There are two bosses: Xuan Xiao (XX) and Su Yao (SY), both in the back of the screenshot. </LI><LI>The goal of this combat is to defeat SY. In this problem, you can assume that XX is immortal, although it's possible to defeat him in the real game. </LI></UL><P><P><BR>The key to this problem is to understand the ``semi" round-based combat system. See the ``<SPAN CLASS="textbf">progress bar</SPAN>" on the top of the screen? Each hero has a very small <SPAN CLASS="textbf">progress ball</SPAN> (in light-blue) on the bar, with an icon above the ball. Similarly, each boss also has a ball (in red), but the icon is below the ball. When the combat begins, all the progress balls start moving from the left corner of the bar. When a ball reaches the right corner, the corresponding character is able to act. If more than one character can act, they make actions one by one, according to this precedence order: YTH, HLS, LML, MRZY, XX, SY. When a character is acting, all progress balls stopped moving. After a character finished an action, his/her progress ball is reset to the left corner of the progress bar. When nobody is acting, all progress balls go right simultaneously (but possibly with different speeds, see below).<P><P><BR>In this problem, each character has 4 main properties: <SPAN CLASS="MATH"><I>Jing</I></SPAN>, <SPAN CLASS="MATH"><I>Qi</I></SPAN>, <SPAN CLASS="MATH"><I>Shen</I></SPAN>, <SPAN CLASS="MATH"><I>Su</I></SPAN>.<P><UL><LI><SPAN CLASS="textbf">Jing</SPAN> means ``health". When a character's <SPAN CLASS="MATH"><I>Jing</I></SPAN> reaches zero or negative, he/she is defeated. A character's maximum <SPAN CLASS="MATH"><I>Jing</I></SPAN> is denoted by parameter <SPAN CLASS="MATH"><I>maxjing</I></SPAN>. </LI><LI><SPAN CLASS="textbf">Qi</SPAN> means ``vitality". It is used by special-skill attacks. When <SPAN CLASS="MATH"><I>Qi</I></SPAN> is not enough, certain special-skill attacks cannot be performed. A character's maximum <SPAN CLASS="MATH"><I>Qi</I></SPAN> is always 100. </LI><LI><SPAN CLASS="textbf">Shen</SPAN> means ``spirit". It is used by Xian Shu (something similar to, but more amazing than ``magic"). When <SPAN CLASS="MATH"><I>Shen</I></SPAN> is not enough, certain Xian Shu cannot be performed. A character's maximum <SPAN CLASS="MATH"><I>Shen</I></SPAN> is denoted by parameter <SPAN CLASS="MATH"><I>maxshen</I></SPAN>. </LI><LI><SPAN CLASS="textbf">Su</SPAN> means ``speed". It affects how quick a character's progress ball moves. Su is always a positive integer <SPAN CLASS="textbf">less</SPAN> than 5. If a character's <SPAN CLASS="MATH"><I>Su</I></SPAN> is <SPAN CLASS="MATH"><I>x</I></SPAN>, it takes <SPAN CLASS="MATH">5 - <I>x</I></SPAN> units time for his/her progress ball to move from left corner to the right corner of the progress bar. A character's <SPAN CLASS="MATH"><I>Su</I></SPAN> (which is never changed during the combat) is denoted by parameter <SPAN CLASS="MATH"><I>su</I></SPAN>. </LI></UL><P><P><BR>For simplicity, you may assume that both XX and SY use the same strategy:<P><P><BR><UL><LI>In his/her <SPAN CLASS="MATH">(4<I>n</I> + 1)</SPAN>-th action <SPAN CLASS="MATH">(<I>n</I> = 0, 1, 2,...)</SPAN>, make a weapon attack upon <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>. </LI><LI>In his/her <SPAN CLASS="MATH">(4<I>n</I> + 2)</SPAN>-th action <SPAN CLASS="MATH">(<I>n</I> = 0, 1, 2,...)</SPAN>, make a weapon attack upon <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN>. </LI><LI>In his/her <SPAN CLASS="MATH">(4<I>n</I> + 3)</SPAN>-th action <SPAN CLASS="MATH">(<I>n</I> = 0, 1, 2,...)</SPAN>, make a weapon attack upon <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN>. </LI><LI>In his/her <SPAN CLASS="MATH">(4<I>n</I> + 4)</SPAN>-th action <SPAN CLASS="MATH">(<I>n</I> = 0, 1, 2,...)</SPAN>, make a special-skill attack upon all the heroes. </LI></UL><P>Now we introduce four more parameters for each hero. The first two, <SPAN CLASS="MATH"><I>d</I>1<I>x</I></SPAN> and <SPAN CLASS="MATH"><I>d</I>2<I>x</I></SPAN>, are the damages that the hero takes on XX's weapon attack and special-skill attack, respectively. For SY's attacks, we define <SPAN CLASS="MATH"><I>d</I>1<I>s</I></SPAN> and <SPAN CLASS="MATH"><I>d</I>2<I>s</I></SPAN> similarly.<P>You're very tired, so you don't want to waste your time designing complex tactics. When a hero is about to act, you only consider the following actions:<P><P><BR><UL><LI><SPAN CLASS="textbf">Make a physical weapon attack</SPAN> upon either XX or SY (cannot attack both). Be warned though, SY is surrounded by swords (see the screenshot), so making weapon attacks upon her would hurt the attacker himself/herself. The amount of ``reflection damage" that the attacker takes is the same as the ``physical damage" that SY takes. Attacking XX (yes, you <SPAN CLASS="textbf">can</SPAN> do that, if you like) does <SPAN CLASS="textbf">not</SPAN> suffer from physical reflection. </LI><LI><SPAN CLASS="textbf">Use Xian Shu to recover Jing.</SPAN> To make your brain easier, you decided <SPAN CLASS="textbf">not</SPAN> to recover other heroes' <SPAN CLASS="MATH"><I>Jing</I></SPAN>. In this problem, the only Xian Shu that you can use is called "Yu Run", which recovers <SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_jing$"></SPAN> points of Jing (if the resulting Jing exceeds his/her maximum Jing, it is reduced to the maximum) and uses <SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN> points of <SPAN CLASS="MATH"><I>Shen</I></SPAN>. </LI><LI><SPAN CLASS="textbf">Use items to recover Shen.</SPAN> To make your brain easier, you decided <SPAN CLASS="textbf">not</SPAN> to recover other heroes' <SPAN CLASS="MATH"><I>Shen</I></SPAN>. In this problem, the only item that you can use is called "Shu Er Guo", which recovers <SPAN CLASS="MATH"><I>shuerguo</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN> points of <SPAN CLASS="MATH"><I>Shen</I></SPAN> (if the resulting <SPAN CLASS="MATH"><I>Shen</I></SPAN> exceeds his/her maximum <SPAN CLASS="MATH"><I>Shen</I></SPAN>, it is reduced to the maximum). You have an infinite number of Shu Er Guo. </LI><LI><SPAN CLASS="textbf">Make a special-skill attack</SPAN> if his/her <SPAN CLASS="MATH"><I>Qi</I></SPAN> is enough. Each hero has exactly one special-skill attack, attacking both XX and SY. Note that some special-skill attacks are physical. Using a physical special-skill attack makes you take the same damage as SY, just like weapon attacks. </LI></UL><P><P><BR>Now it's time to introduce four more parameters for each hero: <SPAN CLASS="MATH"><I>wad</I></SPAN>, <SPAN CLASS="MATH"><I>ssd</I></SPAN>, <SPAN CLASS="MATH"><I>ssq</I></SPAN> and <SPAN CLASS="MATH"><I>ssp</I></SPAN>. The number of Jing points that SY takes by the hero's weapon attacks and special-skill attacks are denoted by <SPAN CLASS="MATH"><I>wad</I></SPAN> and <SPAN CLASS="MATH"><I>ssd</I></SPAN>, respectively. The special-skill attack is physical if and only if <SPAN CLASS="MATH"><I>ssp</I> = 1</SPAN> (otherwise, <SPAN CLASS="MATH"><I>ssp</I> = 0</SPAN>). It needs <SPAN CLASS="MATH"><I>ssq</I></SPAN> points of <SPAN CLASS="MATH"><I>Qi</I></SPAN>.<P>As you may have noticed, <SPAN CLASS="MATH"><I>Qi</I></SPAN> cannot be recovered by Xian Shu or items. There are only two ways to increase <SPAN CLASS="MATH"><I>Qi</I></SPAN>: make a weapon attack, or get hit by a weapon attack. Being hurt by physical reflection does <SPAN CLASS="textbf">not</SPAN> earn you extra <SPAN CLASS="MATH"><I>Qi</I></SPAN>.<P>So here come the last two parameters for each hero: <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB></SPAN> and <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB></SPAN>, that means making a weapon attack increases <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB></SPAN> points of <SPAN CLASS="MATH"><I>Qi</I></SPAN> (whether or not you're reflected), while getting hit by a weapon attack increases <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB></SPAN> points of <SPAN CLASS="MATH"><I>Qi</I></SPAN>. If the resulting <SPAN CLASS="MATH"><I>Qi</I></SPAN> exceeds his/her maximum <SPAN CLASS="MATH"><I>Qi</I></SPAN> (which is always 100), it is reduced to the maximum. Again, performing a special-skill attack never increases your <SPAN CLASS="MATH"><I>Qi</I></SPAN>. Getting hurt by the bosses' special-skill attacks never increases your <SPAN CLASS="MATH"><I>Qi</I></SPAN>, either.<P>As a perfectionist, you don't want any hero to be defeated even temporarily (in the real game you can rebirth a hero with certain Xian Shu or items) -- for example, it's <SPAN CLASS="textbf">not</SPAN> allowed to make YTH and SY defeated at the same time (it can happen, for example, after YTH has performed a powerful physical special-skill attack).<P>Finally comes the question: what is the earliest time (we only care about ball-moving time, not including time needed to make attacks) that you can win the combat, if you play optimally? To play optimally, you need to choose between the options listed above, for each act. It's not as easy as it sounds. Be <SPAN CLASS="textbf">careful</SPAN>!<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 100 test cases. Each case begins with 6 positive integers, <SPAN CLASS="MATH"><I>SY</I><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_jing$"></SPAN> (SY's initial Jing), <SPAN CLASS="MATH"><I>XX</I><IMG WIDTH="29" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_su$"></SPAN> (XX's Su), <SPAN CLASS="MATH"><I>SY</I><IMG WIDTH="29" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_su$"></SPAN> (SY's Su), <SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_jing$"></SPAN>, <SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN> and <SPAN CLASS="MATH"><I>shuerguo</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN>. The next four lines contain descriptions of YTH, HLS, LML and MRZY, in this order. Each line contains 16 non-negative integers: <SPAN CLASS="MATH"><I>maxjing</I></SPAN>, <SPAN CLASS="MATH"><I>maxshen</I></SPAN>, <SPAN CLASS="MATH"><I>su</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>1<I>x</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>2<I>x</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>1<I>s</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>2<I>s</I></SPAN>, <SPAN CLASS="MATH"><I>wad</I></SPAN>, <SPAN CLASS="MATH"><I>ssd</I></SPAN>, <SPAN CLASS="MATH"><I>ssq</I></SPAN>, <SPAN CLASS="MATH"><I>ssp</I></SPAN>, <SPAN CLASS="MATH"><I>q</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>q</I><SUB>2</SUB></SPAN>, <SPAN CLASS="MATH"><I>jing</I></SPAN>, <SPAN CLASS="MATH"><I>qi</I></SPAN>, <SPAN CLASS="MATH"><I>shen</I></SPAN>. The last three parameters are the initial Jing, Qi and Shen values of this hero before the combat begins. The limits of most parameters are listed below:<P><P><BR><DIV ALIGN="CENTER"><TABLE COLS=3 BORDER FRAME=HSIDES RULES=GROUPS><COL ALIGN=CENTER><COL ALIGN=CENTER><COL ALIGN=CENTER><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>Parameter(s)</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>min</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>max</TD></TR></TBODY><TBODY><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>SY</I><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_jing$"></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="44" HEIGHT="33" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_jing$"></SPAN>, <SPAN CLASS="MATH"><I>maxjing</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>1<I>x</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>2<I>x</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>1<I>s</I></SPAN>, <SPAN CLASS="MATH"><I>d</I>2<I>s</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>8,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>yurun</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN>, <SPAN CLASS="MATH"><I>shuerguo</I><IMG WIDTH="47" HEIGHT="15" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_shen$"></SPAN>, <SPAN CLASS="MATH"><I>maxshen</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>800</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>XX</I><IMG WIDTH="29" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_su$"></SPAN>, <SPAN CLASS="MATH"><I>SY</I><IMG WIDTH="29" HEIGHT="18" ALIGN="BOTTOM" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \_su$"></SPAN>, <SPAN CLASS="MATH"><I>su</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>4</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>wad</I></SPAN>, <SPAN CLASS="MATH"><I>ssd</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100,000</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>ssp</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>0</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD></TR><TR><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP><SPAN CLASS="MATH"><I>q</I>1</SPAN>, <SPAN CLASS="MATH"><I>q</I>2</SPAN>, <SPAN CLASS="MATH"><I>ssq</I></SPAN></TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>1</TD><TD VALIGN=BASELINE ALIGN=CENTER NOWRAP>100</TD></TR></TBODY></TABLE></DIV><P><P><BR>And finally, <SPAN CLASS="MATH">1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$"><I>jing</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$"><I>maxjing</I></SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$"><I>qi</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$">100</SPAN>, <SPAN CLASS="MATH">0<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$"><I>shen</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/p4488.png ALT="$ \le$"><I>maxshen</I></SPAN>. The last test case is followed by 6 zeros, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the earliest time that you can win, and all possible orderings to achieve this. Each ordering is expressed as the concatenation of the first letters of <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>, <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN> and <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN>'s names. For example, if <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB> =</SPAN><TT> HLS</TT>, <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB> =</SPAN><TT> LML</TT>, <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB> =</SPAN><TT> YTH</TT>, the ordering is expressed as <TT>HLY</TT>. The orderings should be sorted in increasing order lexicographically. If you can't win the combat within 12 units of ball-moving time, print `<TT>-1</TT>'. Print a blank line after the output of each test case.<P><P><BR><SPAN CLASS="textbf">Explanation</SPAN><P>In the first sample, you can win the combat just after one action for each hero (at time 4, since all the su values are 1), but you need to be careful.<P><TT>YTH</TT>'s special-skill attack is powerful (damage=900), but his Qi is not enough (<SPAN CLASS="MATH">10 &lt; 20</SPAN>). You can't use <TT>HLS</TT>'s weapon attack, since she'll get defeated by physical reflection. <TT>LML</TT>'s weapon attack is weak, but she can use her special-skill attack even though she'll get hurt by reflection (her special-skill attack is physical), since <SPAN CLASS="MATH">400 &lt; 450</SPAN>. For <TT>MRZY</TT>, his special-skill is physical, and too powerful, so we can't use it, since <SPAN CLASS="MATH">700 &gt; 600</SPAN>.<P>To summarize, we can use <TT>YTH</TT>'s weapon attack (damage=300), <TT>HLS</TT>'s special-skill attack (damage=300), <TT>LML</TT>'s weapon attack (damage=100) and special-skill attack (damage=400), and <TT>MRZY</TT>'s weapon attack (damage=250). It's not hard to see, the only possible combination that can finish the combat in the quickest way is <TT>YTH</TT>, <TT>HLS</TT> and <TT>LML</TT> (use special-skill attack), the ordering is arbitrary. Note that the combat ends immediately after SY is defeated, so don't worry about the terrible attacks of XX and SY.<P>In the second sample, <TT>YTH</TT> is too weak so we ignore him immediately. You can't avoid XX's first attack, which is able to defeat everyone except <TT>LML</TT>, so <TT>LML</TT> seems to be the only possible <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>. However, <TT>HLS</TT> moves before XX, so she can also be <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN> if she uses Yu Run in her first action. Unfortunately, <TT>MRZY</TT> can't be <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>, since he's not quick enough to recover Jing before XX attacks.<P>All the weapon attacks are too weak, so the best strategy is to accumulate <SPAN CLASS="MATH"><I>Qi</I></SPAN> first, then perform the powerful special-skill attacks when possible. <TT>LML</TT>'s su is too low, but her <SPAN CLASS="MATH"><I>Qi</I></SPAN> is enough at startup. All she needs to do is to recover <SPAN CLASS="MATH"><I>Shen</I></SPAN>, then recover <SPAN CLASS="MATH"><I>Jing</I></SPAN>, and then do the attack (Why so complex? because her powerful special-skill attack is physical <SPAN CLASS="MATH">...</SPAN>). Note that SY is only able to attack two heroes before the combat ends, so <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN> has one fewer chance to increase <SPAN CLASS="MATH"><I>Qi</I></SPAN> by reflection. Actually, it can be proven that neither <TT>HLS</TT> nor <TT>MRZY</TT> can be <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB></SPAN> -- if so, they'll be unable to gain enough <SPAN CLASS="MATH"><I>Qi</I></SPAN> for their special-skill attacks.<P>To summarize, <TT>HLS</TT> can be <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN> or <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB></SPAN>, <TT>LML</TT> can be all, while <TT>MRZY</TT> can only be <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB></SPAN>. So the only possible ordering is <SPAN CLASS="MATH"><I>H</I><SUB>1</SUB> =</SPAN><TT> HLS</TT>, <SPAN CLASS="MATH"><I>H</I><SUB>2</SUB> =</SPAN><TT> MRZY</TT>, <SPAN CLASS="MATH"><I>H</I><SUB>3</SUB> =</SPAN><TT> LML</TT>.<P>In the third sample, it seems that you can defeat SY with HLS's special-skill attack (damage=6861) and <TT>LML</TT>'s specialskill attack (damage=24850). However, <TT>LML</TT> needs to recover <SPAN CLASS="MATH"><I>Jing</I></SPAN> to avoid being defeated, but her initial <SPAN CLASS="MATH"><I>Shen</I></SPAN> is not enough. If we changed her initial Shen to 543 (enough for Yu Run), the answer would become ``<TT>6 LYH LYM</TT>".<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
1000 1 1 200 15 75 
1000 100 1 2000 2000 2000 2000 300 800 20 0 5 5 
900 10 100 
1000 100 1 2000 2000 2000 2000 120 300 10 0 5 5 
100 80 100 
1000 100 1 2000 2000 2000 2000 100 400 30 1 5 5 
450 40 100 
1000 100 1 2000 2000 2000 2000 250 700 10 1 5 5 
600 50 100 
3000 4 1 800 15 75 
2000 100 3 2 2 2 2 1 1 1 0 2 1 1000 100 100 
2000 100 4 2 2 2 2 1 1000 25 0 2 1 1 1 100 
2000 100 1 2 2 2 2 1 1000 1 1 1 1 300 100 0 
2000 100 3 2 2 2 2 1 1000 30 0 5 1 1 6 100 
26399 3 2 3182 543 800 
4462 353 2 4300 4875 6856 5527 31497 5633 61 0 68 
63 4355 0 351 
5444 300 3 7682 1037 597 4214 6744 6861 68 0 65 12 
2136 32 143 
5875 705 2 2097 118 2366 978 14276 24850 48 0 55 
70 3562 40 277 
6413 33 1 6305 1898 340 5238 13989 25287 25 1 72 
34 3176 4 30 
0 0 0 0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 4 HLY HYL LHY LYH YHL YLH 

Case 2: 12 HML 

Case 3: -1
</PRE><P>
______________________________________________________
4489||||||false||||||
<P>After winning two coupons for the largest shopping mart in your city, you can't wait inviting your girlfriend for gift hunting. Having inspected hundreds of kinds of souvenirs, toys and cosmetics, you finally narrowed down the candidate list to only <SPAN CLASS="MATH"><I>n</I></SPAN> gifts, numbered 1 to <SPAN CLASS="MATH"><I>n</I></SPAN>. Each gift has a happiness value that measures how happy your girlfriend would be, if you get this gift for her. Some of them are special -- you <SPAN CLASS="textbf">must</SPAN> get it for your girlfriend (note that whether a gift is special has nothing to do with its happiness value).<P>Coupon 1 can be used to buy gifts with total price not greater than <SPAN CLASS="MATH"><I>V</I>1</SPAN> (RMB). Like most other coupons, you <SPAN CLASS="textbf">can't</SPAN> get any money back if the total price is strictly smaller than <SPAN CLASS="MATH"><I>V</I>1</SPAN>. Coupon 2 is almost the same, except that it's worth <SPAN CLASS="MATH"><I>V</I>2</SPAN>. Coupons should be used separately. That means you cannot combine them into a super-coupon that's worth <SPAN CLASS="MATH"><I>V</I>1 + <I>V</I>2</SPAN>. You have to divide the gifts you choose into two part, one uses coupon 1, the other uses coupon 2.<P>It is your girlfriend's birthday today. According to the rules of the mart, she can take one (only one) gift for FREE! Here comes your challenge: how to make your girlfriend as happy as possible?<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">Input</A>&nbsp;</FONT></H2><P>There will be at most 20 test cases. Each case begins with 3 integers <SPAN CLASS="MATH"><I>V</I>1</SPAN>, <SPAN CLASS="MATH"><I>V</I>2</SPAN> and <SPAN CLASS="MATH"><I>n</I></SPAN> <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$"><I>V</I>1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$">500, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$"><I>V</I>2<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$">50, 1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$"><I>n</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$">300)</SPAN>, the values of coupon 1 and coupon 2 respectively, and the number of candidate gifts. Each of the following <SPAN CLASS="MATH"><I>n</I></SPAN> lines describes a gift with 3 integers: <SPAN CLASS="MATH"><I>P</I></SPAN>, <SPAN CLASS="MATH"><I>H</I></SPAN> and <SPAN CLASS="MATH"><I>S</I></SPAN>, where <SPAN CLASS="MATH"><I>P</I></SPAN> is the price, <SPAN CLASS="MATH"><I>H</I></SPAN> is the happiness <SPAN CLASS="MATH">(1<IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$"><I>P</I>, <I>H</I><IMG WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0" SRC="http://livearchive.onlinejudge.org/external/44/4489img1.png ALT="$ \le$">1000)</SPAN>, <SPAN CLASS="MATH"><I>S</I> = 1</SPAN> if and only if this is a special gift -- you must buy it (or get it for free). Otherwise <SPAN CLASS="MATH"><I>S</I> = 0</SPAN>. The last test case is followed by <SPAN CLASS="MATH"><I>V</I>1 = <I>V</I>2 = <I>n</I> = 0</SPAN>, which should not be processed.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">Output</A>&nbsp;</FONT></H2><P>For each test case, print the case number and the maximal total happiness of your girlfriend. If you can't finish the task, i.e. you are not able to buy all special gifts even with the 1-FREE bonus, the happiness is `<TT>-1</TT>' (negative happiness means she's unhappy). Print a blank line after the output of each test case.<P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">Sample Input</A>&nbsp;</FONT></H2><P><PRE>
3 2 4 
3 10 1 
2 10 0 
5 100 0 
5 80 0 
3 2 4 
3 10 1 
2 10 0 
5 100 0 
5 80 1 
0 0 0
</PRE><P><H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">Sample Output</A>&nbsp;</FONT></H2><P><PRE>
Case 1: 120 

Case 2: 100
</PRE><P>
______________________________________________________
4490||||||false||||||

<P>
Bubu's bookshelf is in a mess! Help him! 

<P>
There are <SPAN CLASS="MATH"><I>n</I></SPAN> books on his bookshelf. We define the 
mess value to be the number of segments of <SPAN  CLASS="textbf">consecutive equal-height books</SPAN>. 
For example, if the book heights are 30, 30, 31, 31, 32, the mess value is 3, that of 30, 32, 32, 31 
is also 3, but the mess value of 31, 32, 31, 32, 31 is 5 -- it's indeed in a mess! 

<P>
Bubu wants to reduce the mess value as much as possible, but he's a little bit tired, so he 
decided to take out at most <SPAN CLASS="MATH"><I>k</I></SPAN> books, then put them back somewhere in the shelf. Could you 
help him?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be at most 20 test cases. Each case begins with two positive integers <SPAN CLASS="MATH"><I>n</I></SPAN> and <SPAN CLASS="MATH"><I>k</I></SPAN> 
<!-- MATH
 $(1 \le k \le n \le 100)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4490img1.png
 ALT="$ \le$"><I>k</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4490img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4490img1.png
 ALT="$ \le$">100)</SPAN>, the total number of books, and the maximum number of books to 
take out. The next line contains <SPAN CLASS="MATH"><I>n</I></SPAN> integers, the heights of each book, from left to right.
 Each height is an integer between 25 and 32, inclusive. The last test case is followed 
by <SPAN CLASS="MATH"><I>n</I> = <I>k</I> = 0</SPAN>, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and the minimal final mess value. Print a blank 
line after the output of each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
5 2 
25 25 32 32 25 
5 1 
25 26 25 26 25 
0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 2 

Case 2: 3
</PRE>

<P>

______________________________________________________
4491||||||false||||||

<P>
I live in a crazy city full of crossings and bidirectional roads connecting them. On most 
of the days, there will be a celebration in one of the crossings, that's why I call this 
city crazy. 

<P>
Everyday, I walk from my home (at crossing <SPAN CLASS="MATH"><I>s</I></SPAN>) to my office (at crossing <SPAN CLASS="MATH"><I>t</I></SPAN>). I don't like 
crowds, but I don't want to waste time either, so I always choose a shortest path among 
all possible paths that does not visit the crossing of the celebration. If no such path 
exists, I don't go to work (it's a good excuse, isn't it)! 

<P>
In order to analyze this ``celebration effect" in detail, I need <SPAN CLASS="MATH"><I>n</I></SPAN> pairs of values <!-- MATH
 $(l_{i}, c_{i})$
 -->
<SPAN CLASS="MATH">(<I>l</I><SUB>i</SUB>, <I>c</I><SUB>i</SUB>)</SPAN>, 
where <SPAN CLASS="MATH"><I>l</I><SUB>i</SUB></SPAN> is the length of the shortest path from crossing <SPAN CLASS="MATH"><I>s</I></SPAN> to crossing <SPAN CLASS="MATH"><I>t</I></SPAN>, not visiting 
crossing <SPAN CLASS="MATH"><I>i</I></SPAN>, <SPAN CLASS="MATH"><I>c</I><SUB>i</SUB></SPAN> is the number of such shortest paths (not visiting crossing <SPAN CLASS="MATH"><I>i</I></SPAN>). Could 
you help me? Note that if I can't go to work when celebration is held at crossing <SPAN CLASS="MATH"><I>i</I></SPAN>, 
define <!-- MATH
 $l_{i}=c_{i}=0$
 -->
<SPAN CLASS="MATH"><I>l</I><SUB>i</SUB> = <I>c</I><SUB>i</SUB> = 0</SPAN>. This includes the case when there is no path between <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> even if 
there's no celebration at all. 

<P>
Ah, wait a moment. Please don't directly give me the values - that'll drive me crazy 
(too many numbers!). All I need is finding some interesting conclusions behind the 
values, but currently I've no idea what exactly I want. 

<P>
Before I know what you should calculate, please prove that you can indeed find all the 
pairs <!-- MATH
 $(l_{i}, c_{i})$
 -->
<SPAN CLASS="MATH">(<I>l</I><SUB>i</SUB>, <I>c</I><SUB>i</SUB>)</SPAN> by telling me the value of <!-- MATH
 $f(x) = (l_{1}+c_{1}x+l_{2}x^{2}+c_{2}x^{3}+
l_{3}x^{4}+c_{3}x^{5}+\ldots +l_{n}x^{2n-2}+c_{n}x^{2n-1}) \bmod 19880830$
 -->
<SPAN CLASS="MATH"><I>f</I> (<I>x</I>) = (<I>l</I><SUB>1</SUB> + <I>c</I><SUB>1</SUB><I>x</I> + <I>l</I><SUB>2</SUB><I>x</I><SUP>2</SUP> + <I>c</I><SUB>2</SUB><I>x</I><SUP>3</SUP> + <I>l</I><SUB>3</SUB><I>x</I><SUP>4</SUP> + <I>c</I><SUB>3</SUB><I>x</I><SUP>5</SUP> +...+ <I>l</I><SUB>n</SUB><I>x</I><SUP>2n-2</SUP> + <I>c</I><SUB>n</SUB><I>x</I><SUP>2n-1</SUP>) mod 19880830</SPAN>, for some given <SPAN CLASS="MATH"><I>x</I></SPAN>.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be at most 20 test cases. Each case begins with 5 integers <!-- MATH
 $n, m, s, t, q$
 -->
<SPAN CLASS="MATH"><I>n</I>, <I>m</I>, <I>s</I>, <I>t</I>, <I>q</I></SPAN> 
<!-- MATH
 $(1 \le s,t \le n \le 100,000, 0 \le m \le 500,000, 1 \le q \le 5)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>s</I>, <I>t</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>n</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$">100, 000, 0<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>m</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$">500, 000, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>q</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$">5)</SPAN>. <SPAN CLASS="MATH"><I>n</I></SPAN> is the number of 
crossings, <SPAN CLASS="MATH"><I>m</I></SPAN> is the number of roads and <SPAN CLASS="MATH"><I>q</I></SPAN> is the number of queries. <SPAN CLASS="MATH"><I>s</I></SPAN> and <SPAN CLASS="MATH"><I>t</I></SPAN> are 
different integers that represent my home and office, respectively. Each of the following 
<SPAN CLASS="MATH"><I>m</I></SPAN> lines describes a road with three integers: <SPAN CLASS="MATH"><I>u</I>, <I>v</I>, <I>w</I></SPAN> <!-- MATH
 $(1 \le u,v \le n, 1 \le w \le
10,000)$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>u</I>, <I>v</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>n</I>, 1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>w</I><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$">10, 000)</SPAN>, indicating a bidirectional road connecting crossing <SPAN CLASS="MATH"><I>u</I></SPAN> and crossing <SPAN CLASS="MATH"><I>v</I></SPAN>, with 
length <SPAN CLASS="MATH"><I>w</I></SPAN>. There may be multiple roads connecting the same pair of crossings, but a road 
cannot be connecting a crossing and itself. The next line contains <SPAN CLASS="MATH"><I>q</I></SPAN> integers <SPAN CLASS="MATH"><I>x</I><SUB>i</SUB></SPAN> 
<!-- MATH
 $(1 \le x_{i} \le 10^{9})$
 -->
<SPAN CLASS="MATH">(1<IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$"><I>x</I><SUB>i</SUB><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/4491img1.png
 ALT="$ \le$">10<SUP>9</SUP>)</SPAN>. The last test case is following by five zeros, 
which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the case number and <SPAN CLASS="MATH"><I>q</I></SPAN> integers <!-- MATH
 $f(x_{1}), f(x_{2}), \dots, f(x_{q})$
 -->
<SPAN CLASS="MATH"><I>f</I> (<I>x</I><SUB>1</SUB>), <I>f</I> (<I>x</I><SUB>2</SUB>),..., <I>f</I> (<I>x</I><SUB>q</SUB>)</SPAN> 
separated by a single space between consecutive items, on one line. Print a blank line 
after the output of each test case.

<P>

<P>
<BR>

<SPAN  CLASS="textbf">Explanation</SPAN>

<P>
In the first sample, <!-- MATH
 $l_{1}=c_{1}=0, l_{2}=4, c_{2}=2, l_{3}=3, c_{3}=1, l_{4}=c_{4}=0$
 -->
<SPAN CLASS="MATH"><I>l</I><SUB>1</SUB> = <I>c</I><SUB>1</SUB> = 0, <I>l</I><SUB>2</SUB> = 4, <I>c</I><SUB>2</SUB> = 2, <I>l</I><SUB>3</SUB> = 3, <I>c</I><SUB>3</SUB> = 1, <I>l</I><SUB>4</SUB> = <I>c</I><SUB>4</SUB> = 0</SPAN>. In 
the second sample, everything is zero.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
4 5 1 4 2 
1 2 1 
1 3 1 
2 4 2 
3 4 3 
1 4 4 
1 10 
3 2 1 3 1 
1 2 12 
2 3 2 
1 
0 0 0 0 0
</PRE>  

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 10 132400 
Case 2: 0
</PRE>

<P>

______________________________________________________
4492||||||false||||||

<P>
Jiajia wants to do some experiments on his two-eyed robot. Each eye of the robot shoots a 
very thin laser beam from it, which goes infinitely (i.e. a mathematical ``ray"). Restricted 
by the internal structure, the two laser beams from the eyes must always form a right 
angle (i.e. two rays must be perpendicular to each other). 

<P>
To help the robot localize 
itself, Jiajia placed two linear-shaped special materials called MA and MB. If one of the 
rays intersects with MA, while the other ray intersects with MB, the robot is able to 
gather enough spatial information for the localization.

<P>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfbox{p4492.eps}$
 -->
<IMG
 WIDTH="348" HEIGHT="338" ALIGN="BOTTOM" BORDER="0"
 SRC="http://livearchive.onlinejudge.org/external/44/p4492.png
 ALT="\epsfbox{p4492.eps}">
</DIV>
<P>
<DIV ALIGN="CENTER">Fig. The collection of points from which the robot can localize itself.

</DIV>

<P>
The weird shape in the picture above is the collection of points from which the robot can 
localize itself. MA and MB are drawn as two line segments. 

<P>
Though the task seems a little bit difficult, can you tell me the total area of these points?

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001001000000000000000">
Input</A>&nbsp;</FONT>
</H2>

<P>
There will be at most 50 test cases. Each case contains a single line of 8 positive 
integers <!-- MATH
 $x_{1}, y_{1}, x_{2}, y_{2}, x_{3}, y_{3}, x_{4}, y_{4}$
 -->
<SPAN CLASS="MATH"><I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>, <I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>, <I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>, <I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB></SPAN> not greater than 500, 
where <!-- MATH
 $(x_{1},y_{1})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>1</SUB>, <I>y</I><SUB>1</SUB>)</SPAN> and <!-- MATH
 $(x_{2},y_{2})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>2</SUB>, <I>y</I><SUB>2</SUB>)</SPAN> are two endpoints of MA, <!-- MATH
 $(x_{3},y_{3})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>3</SUB>, <I>y</I><SUB>3</SUB>)</SPAN> and 
<!-- MATH
 $(x_{4},y_{4})$
 -->
<SPAN CLASS="MATH">(<I>x</I><SUB>4</SUB>, <I>y</I><SUB>4</SUB>)</SPAN> are two endpoints of MB. Note that MA and MB 
can have at most one common point. Neither MA nor MB will be degenerated to a 
point. The last test case is followed by 8 zeros, which should not be processed.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001002000000000000000">
Output</A>&nbsp;</FONT>
</H2>

<P>
For each test case, print the total area of ``self-localizable point", to 3 digits after 
the decimal point. Print a blank line after the output of each test case.

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001003000000000000000">
Sample Input</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
264 280 147 360 162 335 320 334 
203 165 288 227 149 295 153 344 
0 0 0 0 0 0 0 0
</PRE>

<P>

<H2><FONT size=4 COLOR=#ff0000><A NAME="SECTION0001004000000000000000">
Sample Output</A>&nbsp;</FONT>
</H2>

<P>
<PRE>
Case 1: 26634.633 
Case 2: 27436.383

______________________________________________________
4493||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="a_files/filelist.xml"><link rel=Edit-Time-Data href="a_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem A - That is Your Queue</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>A</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>That is Your Queue</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/a_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify;text-autospace:none'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1026" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:289.5pt;height:218.25pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/a_files/image004.gif/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=386 height=291 src="http://livearchive.onlinejudge.org/external/44/a_files/image004.gif align=left hspace=12 v:shapes="_x0000_s1026"><![endif]><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>Your government has finally solved the problem of universal health care!&nbsp; Now everyone, rich or poor, will finally have access to the same level of medical care.&nbsp; Hurrah!</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>There's one minor complication.&nbsp; All of the country's hospitals have been condensed down into one location, which can only take care of one person at a time.&nbsp; But don't worry!&nbsp; There is also a plan in place for a fair, efficient computerized system to determine who will be admitted.&nbsp; You are in <span class=GramE>charge</span> of programming this system.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>Every citizen in the nation will be assigned a <b>unique</b> number, from 1 to P (where P is the current population).&nbsp; They will be put into a queue, with 1 in front of 2, 2 in front of 3, and so on.&nbsp; The hospital will process patients one by one, in order, from this queue.&nbsp; Once a citizen has been admitted, they will immediately move from the front of the queue to the back.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>Of course, sometimes emergencies arise; if you've just been run over by a steamroller, you can't wait for half the country to get a routine checkup before you can be treated!&nbsp; So, for these (hopefully rare) occasions, an expedite command can be given to move one person to the front of the queue. Everyone else's relative order will remain unchanged.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>Given the sequence of processing and expediting commands, output the order in which citizens will be admitted to the hospital.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>Input consists of at most ten test cases.&nbsp; Each test case starts with a line containing P, the population of your country (1 &#8804; P &#8804; 1000000000), and C, the number of commands to process (1 &#8804; C &#8804; 1000).</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>The next C lines each contain a command of the form &quot;N&quot;, indicating the next citizen is to be admitted, or &quot;E x&quot;, indicating that citizen x is to be expedited to the front of the queue.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>The last test case is followed by a line containing two zeros.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='font-size:11.0pt;font-family:Verdana;color:windowtext'>For each test case print the serial of output. This is followed by one line of output for each &quot;N&quot; command, indicating which citizen should be processed next.&nbsp; Look at the output for sample input for details.</span></p><p class=MsoNormal style='text-align:justify;text-autospace:none'><span style='color:windowtext'>&nbsp;</span></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>3 6</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>E 1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>10 2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>N</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:windowtext'>0 <span class=SpellE>0</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 1:</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>3</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 2:</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>1</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'>&nbsp;<span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Derek <span class=SpellE>Kisman</span>, Special Thanks: Shahriar <span
class=SpellE>Manzoor</span><o:p></o:p></span></p--></div></body></html>
______________________________________________________
4494||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="b_files/filelist.xml"><link rel=Edit-Time-Data href="b_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem B - How Many Ones Needed?</title> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>manzoor</o:Author>
  <o:LastAuthor>shahriar</o:LastAuthor>
  <o:Revision>4</o:Revision>
  <o:TotalTime>9</o:TotalTime>
  <o:LastPrinted>2008-11-04T08:08:00Z</o:LastPrinted>
  <o:Created>2009-10-22T17:05:00Z</o:Created>
  <o:LastSaved>2009-10-22T17:06:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>192</o:Words>
  <o:Characters>1101</o:Characters>
  <o:Company>ACM-ICPC</o:Company>
  <o:Lines>9</o:Lines>
  <o:Paragraphs>2</o:Paragraphs>
  <o:CharactersWithSpaces>1291</o:CharactersWithSpaces>
  <o:Version>11.9999</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:Vrinda;
	panose-1:1 1 6 0 1 1 1 1 1 1;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:65539 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1 -369098753 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-font-kerning:0pt;
	mso-bidi-language:AR-SA;
	font-weight:normal;
	font-style:italic;}
h4
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 3.0in right 6.0in;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	mso-bidi-language:AR-SA;
	mso-bidi-font-weight:bold;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";
	mso-bidi-language:AR-SA;}
span.StyleArial16pt
	{mso-style-name:"Style Arial 16 pt";
	mso-ansi-font-size:16.0pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	mso-bidi-font-family:Arial;
	font-weight:bold;}
p.TableContents, li.TableContents, div.TableContents
	{mso-style-name:"Table Contents";
	mso-style-parent:"Body Text";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:none;
	mso-hyphenate:none;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:Verdana;
	mso-bidi-font-family:"Times New Roman";
	mso-fareast-language:#00FF;
	mso-bidi-language:AR-SA;}
p.ListParagraph, li.ListParagraph, div.ListParagraph
	{mso-style-name:"List Paragraph";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	mso-add-space:auto;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-language:AR-SA;}
p.ListParagraphCxSpFirst, li.ListParagraphCxSpFirst, div.ListParagraphCxSpFirst
	{mso-style-name:"List ParagraphCxSpFirst";
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-language:AR-SA;}
p.ListParagraphCxSpMiddle, li.ListParagraphCxSpMiddle, div.ListParagraphCxSpMiddle
	{mso-style-name:"List ParagraphCxSpMiddle";
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-add-space:auto;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-language:AR-SA;}
p.ListParagraphCxSpLast, li.ListParagraphCxSpLast, div.ListParagraphCxSpLast
	{mso-style-name:"List ParagraphCxSpLast";
	mso-style-type:export-only;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	mso-add-space:auto;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:Calibri;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-language:AR-SA;}
span.WW-Absatz-Standardschriftart11111
	{mso-style-name:WW-Absatz-Standardschriftart11111;
	mso-style-parent:"";}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("b_files/header.html") fs;
	mso-footnote-continuation-separator:url("b_files/header.html") fcs;
	mso-endnote-separator:url("b_files/header.html") es;
	mso-endnote-continuation-separator:url("b_files/header.html") ecs;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-title-page:yes;
	mso-header:url("b_files/header.html") h1;
	mso-even-footer:url("b_files/header.html") ef1;
	mso-footer:url("b_files/header.html") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1;
	mso-list-template-ids:1;}
@list l0:level1
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level2
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level3
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level4
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level5
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level6
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level7
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level8
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l0:level9
	{mso-level-number-format:none;
	mso-level-suffix:none;
	mso-level-text:"";
	mso-level-tab-stop:0in;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l1
	{mso-list-id:2;
	mso-list-type:simple;
	mso-list-template-ids:2;
	mso-list-name:WW8Num1;}
@list l1:level1
	{mso-level-tab-stop:0in;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l2
	{mso-list-id:332607550;
	mso-list-type:hybrid;
	mso-list-template-ids:242620238 2060515254 -1119580022 -1855157646 -1345920516 533335168 -370744322 629056050 -680484542 -128008786;}
@list l2:level1
	{mso-level-number-format:image;
	list-style-image:url("PicExportError");
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3
	{mso-list-id:461658610;
	mso-list-type:hybrid;
	mso-list-template-ids:-411379712 67698703 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l3:level1
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;}
@list l4
	{mso-list-id:944192877;
	mso-list-type:hybrid;
	mso-list-template-ids:-2082577780 -1520136608 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l4:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:Vrinda;}
@list l4:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:2.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l5
	{mso-list-id:1325013475;
	mso-list-type:hybrid;
	mso-list-template-ids:-1580575764 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l5:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l6
	{mso-list-id:1984964980;
	mso-list-type:hybrid;
	mso-list-template-ids:320789526 67698689 67698691 67698693 67698689 67698691 67698693 67698689 67698691 67698693;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
table.MsoTableGrid
	{mso-style-name:"Table Grid";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .25pt;
 mso-yfti-tbllook:480;mso-padding-alt:0in 5.4pt 0in 5.4pt;mso-border-insideh:
 .25pt solid windowtext;mso-border-insidev:.25pt solid windowtext'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .25pt;background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;tab-stops:143.25pt'><b
  style='mso-bidi-font-weight:normal'><span style='font-size:60.0pt;font-family:
  Arial;mso-bidi-font-family:Arial'>B<o:p></o:p></span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .25pt;mso-border-alt:
  solid windowtext .25pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;tab-stops:143.25pt'><span
  style='font-size:28.0pt;font-family:Impact;mso-bidi-font-family:Arial'>How
  Many Ones Needed?<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center;tab-stops:143.25pt'><b
  style='mso-bidi-font-weight:normal'><span style='font-family:Arial;
  mso-bidi-font-family:Arial'>Input:</span></b><span style='font-family:Arial;
  mso-bidi-font-family:Arial'> Standard Input<o:p></o:p></span></p>
  <p class=MsoNormal align=center style='text-align:center;tab-stops:143.25pt'><b
  style='mso-bidi-font-weight:normal'><span style='font-family:Arial;
  mso-bidi-font-family:Arial'>Output:</span></b><span style='font-family:Arial;
  mso-bidi-font-family:Arial'> Standard Output<o:p></o:p></span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .25pt;mso-border-alt:
  solid windowtext .25pt;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;tab-stops:143.25pt'>
  <!--[if gte vml 1]><v:shapetype
   id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
   path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
   <v:stroke joinstyle="miter"/>
   <v:formulas>
    <v:f eqn="if lineDrawn pixelLineWidth 0"/>
    <v:f eqn="sum @0 1 0"/>
    <v:f eqn="sum 0 0 @1"/>
    <v:f eqn="prod @2 1 2"/>
    <v:f eqn="prod @3 21600 pixelWidth"/>
    <v:f eqn="prod @3 21600 pixelHeight"/>
    <v:f eqn="sum @0 0 1"/>
    <v:f eqn="prod @6 1 2"/>
    <v:f eqn="prod @7 21600 pixelWidth"/>
    <v:f eqn="sum @8 21600 0"/>
    <v:f eqn="prod @7 21600 pixelHeight"/>
    <v:f eqn="sum @10 21600 0"/>
   </v:formulas>
   <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
   <o:lock v:ext="edit" aspectratio="t"/>
  </v:shapetype><v:shape id="_x0000_i1026" type="#_x0000_t75" alt="" style='width:64.5pt;
   height:63.75pt'>
   <v:imagedata src="http://livearchive.onlinejudge.org/external/44/b_files/image001.png o:href="http://www.informatik.uni-ulm.de/acm/images/acmlogo.gif"/>
  </v:shape><![endif]--><![if !vml]><!--img width=86 height=85
  src="http://livearchive.onlinejudge.org/external/44/b_files/image001.png v:shapes="_x0000_i1026"><![endif]></p></td></tr></table></div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shape id="_x0000_s1055" type="#_x0000_t75" style='position:absolute;left:0;text-align:left;
 margin-left:0;margin-top:.85pt;width:73.75pt;height:207pt;z-index:-1;
 mso-position-horizontal:left' wrapcoords="-139 0 -139 21550 21600 21550 21600 0 -139 0"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/b_files/image001.png o:title=""/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=98 height=276 src="http://livearchive.onlinejudge.org/external/44/b_files/image001.png align=left hspace=12 v:shapes="_x0000_s1055"><![endif]><span style='font-size:11.0pt;font-family:Verdana'>To write binary numbers we need only two digits 0 and 1. To write a specific value we need a fixed number of ones, but of course number of zeroes may vary because of leading zeroes. For example to write values between 5 and 10 (inclusive) we need total 12 ones as shown in the figure on the left. You have to write a program that finds total number of ones that are required to write numbers in binary within a given range a and b.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><h5 style='text-align:justify'><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt'>Input</span></span><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:10.0pt;
mso-fareast-font-family:"Arial Unicode MS"'><o:p></o:p></span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The input file can contain up to 11000 lines of inputs. Each line contains two positive integers a and b (0 &#8804; a &#8804; b &#8804; 2000000000). <o:p></o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'><o:p>&nbsp;</o:p></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Input is terminated by a line containing two zeroes. This line should not be processed.<o:p></o:p></span></p><p class=MsoNormal><o:p>&nbsp;</o:p></p><h4><span class=StyleArial16pt><span style='font-size:16.0pt;mso-bidi-font-size:
10.0pt'>Output <o:p></o:p></span></span></h4><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><span style='font-size:11.0pt;font-family:Verdana'>For each line of input of input produce one line of output. This line contains the serial of output followed by an integer which denotes the number of 1 s required to write all the values between a and b (inclusive) in binary. Look at the output for sample input for details.<o:p></o:p></span></p><p class=MsoNormal style='text-align:justify;tab-stops:143.25pt'><o:p>&nbsp;</o:p></p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:Arial;
font-style:normal'>Sample Input<span style='mso-spacerun:yes'>                              </span>Output for Sample Input<o:p></o:p></span></b></h1><table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;border:none;mso-border-alt:
 solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>5 10<o:p></o:p></span></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>20 30<o:p></o:p></span></p><p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span style='font-size:11.0pt;mso-bidi-font-size:12.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Courier New";mso-bidi-font-weight:bold'>0 0<o:p></o:p></span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 1: 12<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'>Case 2: 35<o:p></o:p></span></p><p class=MsoNormal><span style='font-size:11.0pt;mso-bidi-font-size:10.0pt;
  font-family:"Courier New";mso-bidi-font-family:"Courier New"'><o:p>&nbsp;</o:p></span></p></td></tr></table><!--t 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt'><span
style='font-family:Tahoma'>Problem Setter: Shahriar Manzoor, Special Thanks:
Sohel Hafiz<o:p></o:p></span></p--></div></body></html>
______________________________________________________
4495||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="c_files/filelist.xml"><link rel=Edit-Time-Data href="c_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem C - Foot Notes</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><span style='font-size:12.0pt;
  font-family:"Times New Roman";mso-fareast-font-family:"Times New Roman";
  mso-bidi-font-family:"Times New Roman";color:black;mso-ansi-language:EN-US;
  mso-fareast-language:EN-US;mso-bidi-language:#0845'><br clear=all
  style='page-break-before:always'>
  </span>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>C</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Foot Notes</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/c_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>I think most of you are familiar with the footnotes. They reside at the bottom of the page, describing various terms in that page. Some authors describe them as Footnotes, the little dogs yapping at the heels of the text.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>You are given an article of N lines, where some of which has keywords that need to be footnoted. Say, if you have the word <span class=SpellE>copotron</span>* in pages 1, 3, 7 and 8, then all these 4 pages should have a footnote about <span class=SpellE>copotron</span>. Since, a page can have at most N lines, if you place M<sub>i</sub> lines from the article in one page, you can place at most (N-M<sub>i</sub>) numbers of footnotes at that page.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Each page will have a number of consecutive lines, and if, the last line of page <span class=SpellE>i</span> is line b, then first line of page (i+1) will be line (b+1).</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Given the number of lines in the article, and the positions of the referenced words, find the minimum number of footnotes that has to be added.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>First line contains an integer <b>T</b> <b>(1 &#8804; T &#8804; 35)</b>, the number of test cases. This is followed by three integers <b>N (1 &#8804; N &#8804; 500)</b>, <b>S (1 &#8804; S &#8804; 100)</b> and <b>W (0 &#8804; W &#8804; 100)</b>, the number of lines in the article, number of lines that can fit in a page and the number of keywords. Next <b>W</b> lines each describe the positions of each keyword. Each of these <b>W</b> lines starts with an integer <span class=SpellE><span class=GramE><b>K<sub>i</sub></b></span></span><span class=GramE><b>(</b></span><b>1 &#8804; <span class=SpellE>K<sub>i</sub></span><sub> </sub>&#8804; N)</b>, the frequency of keyword <span class=SpellE><b>i</b></span>, followed by <span class=SpellE><b>K<sub>i</sub></b></span> integers, the lines in the article, where they can be found. The line numbers will be between 1 and <b>N</b>.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each test case, output the case number, followed by the minimum number of footnotes to add. If it's not possible to fit them, output -1.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=301 valign=top style='width:225.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=tablecontents style='layout-grid-mode:char'><span style='font-size:
  11.0pt;font-family:"Courier New"'>3</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>5 <span class=SpellE>5</span> 3</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 2</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 4</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>1 5</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>5 2 3</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 2</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 4</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>1 5</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>1 <span class=SpellE>1</span> <span class=SpellE>1</span></span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>1 <span class=SpellE>1</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=315 valign=top style='width:236.35pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=tablecontents style='layout-grid-mode:char'><span style='font-size:
  11.0pt;font-family:"Courier New"'>Case 1: 3</span></p><p class=tablecontents><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 5</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: -1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><p class=MsoNormal><i>*<span class=SpellE>Copotron</span>: As described in science fiction novel <span class=SpellE>Copotronic</span> <span class=SpellE>Shukh</span> <span class=SpellE>Dukhkho</span> (Aka Emotions) by M. <span class=SpellE>Zafar</span> <span class=SpellE>Iqbal</span>, <span class=SpellE>Copotron</span> is the brain of a robot. </i></p><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: <span class=SpellE>Manzurur</span> <span class=SpellE>Rahman</span>
Khan, Special Thanks: <span class=SpellE>Arifuzzaman</span> Arif<o:p></o:p></span></p--><p class=MsoNormal><i><o:p>&nbsp;</o:p></i></p><p class=MsoNormal><i>&nbsp;</i></p><p class=MsoNormal><b><span style='font-family:Arial'>Description of the sample input/output</span></b></p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Verdana'>In case 1: if you place two lines in the first page, and 3 on the second, then, first page will require 1 foot note for first keyword since it contains keyword 1 in lines 1 and 2, and 2<sup>nd</sup> page will require 2 footnotes&nbsp; for keywords 2 and 3, since they appear in lines 3,4 and 5. You can achieve similar result, if you place lines 1-2 on first page, 3-4 on second, and 5 on third page.</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Verdana'>In case 2: You can place at most 2 lines per page. There are 3 keywords, keyword 1 in lines 1 and 2, keyword 2 in lines 3 and 4, and keyword 3 in <span class=GramE>line</span> 5. So, lines 1-5 each contain one keyword. We can fit at most two lines in a page. If we place 1 line in each page, then, we have to add 1 footnote as well. So, for 5 lines with keywords, we need 5 more footnotes. Please note that, it's not possible to place 2 lines in any page, since, it would require 2 footnotes, and thus a total of 2 + 2 = 4 lines, which is more than S.</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:Verdana'>In case 3: You can not place line 1 in any page, if you place it anywhere, there wont be any space available to place the footnote, since maximum number of lines per page is 1.</span></p></div></body></html>
______________________________________________________
4496||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="d_files/filelist.xml"><link rel=Edit-Time-Data href="d_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem D - A Match Making Problem</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='margin-left:.25in;text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>D</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>A Match Making Problem</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/d_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1028" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:179.25pt;height:180pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/d_files/image004.gif/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=239 height=240 src="http://livearchive.onlinejudge.org/external/44/d_files/image004.gif align=left hspace=12 v:shapes="_x0000_s1028"><![endif]><span style='font-size:11.0pt;font-family:Verdana'>Match-making is a tough job and even then its long term success (A happy family) depends on two people who are often not involved in the match making process. But now, sites like <span class=SpellE>facebook</span>, twitter and communication devices/software like mobile phones, messengers have made the professional match makers jobless. So these angry and jobless match makers have gathered together to make the government pass a law in the parliament that will stop people from choosing their life partners. The law is stated below:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>In a certain community, the most senior bachelor must marry a spinster (Female Bachelor) whose age is nearest to him. Then next senior bachelor will then marry a spinster whose age is nearest to him (of course if there is a tie, marrying anyone of them will do) excluding the spinster that has already got married. This process continues until there is no bachelor or spinster left. Of course a bachelor cannot marry two spinsters and a spinster cannot marry two bachelors. For example in a community there are four bachelors who are 21, 25, 26, 2 years old and four spinsters who are 26, 24, 25 and 35 years old. The diagram below shows the only possibility of marriage: (<span class=SpellE>eg</span>: The 26 year old bachelor marries the 25 years old spinster)</span></p><p class=MsoNormal align=center style='text-align:center'><span style='font-size:11.0pt;font-family:Verdana'><img width=226 height=205 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/d_files/image004.gif></span></p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:11.0pt;font-family:Verdana;font-weight:normal'>Now given the ages of the bachelors and the Spinsters in a community you will have to find the number of bachelors left, after all the marriages have taken place according to the law mentioned above. Also you have to report the age of the youngest bachelor left in the community if there is one.&nbsp; </span></span></p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:11.0pt;font-family:Verdana'>&nbsp;</span></span></p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The input file contains at most 25 sets of inputs. The description of each set is given below:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The first line of each set contains two integers B (0&lt;B&lt;10000) and S (0&lt;S&lt;10000) which denotes the total number of bachelors and spinsters in the community respectively. Each of <span class=GramE>the</span> next B lines contains one integer between 2 and 60 (inclusive) which denotes the age of one bachelor in the community. Each of the next S lines contains one integer between 2 and 60 (inclusive) which denotes the age of one spinster in the community. For simplicity you dont need to worry about getting married at a very small age in this problem. That means unmarried people of all ages are valid bachelor or spinster. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Input is terminated by a line containing two zeroes.</span></p><h4><span class=stylearial16pt>&nbsp;</span></h4><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each set of input produce one line of output. This line contains the serial of output followed by one or two integers. The first integer denotes the number of bachelors left in the community after all potential marriages have been completed. If this integer is not zero then print a second integer which denotes the age of the youngest bachelor left in the community after all possible marriages have been completed. Look at the output for sample input for details.&nbsp; </span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>4 <span class=SpellE>4</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>26</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>25</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>21</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>35</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>25</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>23</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>24</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>1 2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>20</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>30</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>40</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>4 2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>5</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>5</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>10</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>15</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>20</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>18</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>0 <span class=SpellE>0</span></span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: 2 5</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Shahriar <span class=SpellE>Manzoor</span>, Special Thanks: <span
class=SpellE>Sohel</span> Hafiz, <span class=SpellE>Arifuzzaman</span> <span
class=SpellE>Arif</span><o:p></o:p></span></p--></div></body></html>
______________________________________________________
4497||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="e_files/filelist.xml"><link rel=Edit-Time-Data href="e_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem E - Game of Blocks</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>E</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Game of Blocks</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>SOHA and TARA are playing <i>Game of Blocks</i>. Game of Blocks is a two player game played on a 4x4 board. At the start of the game, each cell contains a piece colored red or blue. The two players make moves alternately  SOHA, being player 1, makes the first move. In each move, a player chooses a colored cell (that is a cell with a blue or a red piece in it). After making a move, all the reachable cells from that selected cell vanishes. Two cells are reachable if you can start from one and end on the other by making moves in the direction up, down, left or right and all the pieces in the path has the same color. After each move, all the pieces will come down to fill the empty spaces.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span><o:p></o:p></p><p class=MsoNormal align=center style='text-align:center'><img width=159 height=159 src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span><o:p></o:p></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Consider an initial grid shown above. The blue pieces have white centers to differentiate them from the red pieces in order to facilitate the colored blind people.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Say, SOHA makes a move by selecting the cell at row 2 and column 3 or in other words cell (2, 3). The diagrams below shows what happens to the pieces after the move is made.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span><o:p></o:p></p><p align=center style='text-align:center'><img src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></p><!--span
style='position:absolute;z-index:-8'><img width=172 height=176 id="_x0000_i1028"
src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></span><span style='position:absolute;z-index:-6'><img
width=53 height=51 id="_x0000_i1029" src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></span><span
style='position:absolute;z-index:-7'><img width=164 height=167 id="_x0000_i1030"
src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif><span style='font-size:11.0pt;font-family:Verdana'></span><img
width=172 height=175 id="Picture_x0020_3" src="http://livearchive.onlinejudge.org/external/44/e_files/image004.gif></span--></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The player to remove the last piece wins the game. If both of the players play perfectly, can you determine whether SOHA will be able to win the game? If a player can win, (s<span class=GramE>)he</span> will try to finish the game in minimum number of moves possible. However, if a player finds (s<span class=GramE>)he</span> has no way to win, (s)he will make moves in order to delay the game as long as possible.</span></p><p class=MsoNormal>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The first line of input is an integer <span class=GramE>T(</span>T&#8804;1000) that indicates the number of test cases. Each case consists of 4 lines with 4 characters in each. The characters are B or R to indicate blue and red pieces respectively. There is a blank line after each case.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal><b>&nbsp;</b></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Output</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each case, output the case number first. If SOHA can win the game, print win X, otherwise print loss X where X indicates the total number of moves before all the pieces vanishes.</span></p><p class=MsoNormal>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=655 style='width:491.4pt;background:#CCCCCC;border-collapse:collapse;mso-padding-alt:
 0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:20.45pt'><td width=331 valign=top style='width:3.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:20.45pt'><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>3</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>&nbsp;</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>RRRR</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BBBB</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>RRRR</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>&nbsp;</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BRBR</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BRBR</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BRBR</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>BRBR</span></b></p><p class=MsoNormal style='text-align:justify;line-height:11.0pt'><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=324 valign=top style='width:243.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt;height:20.45pt'><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>Case 1: win 1</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>Case 2: win 3</span></b></p><p class=MsoNormal style='text-align:justify'><b><span style='font-family:
  "Courier New"'>Case 3: loss 4</span></b></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span><span class=SpellE><span style='font-family:
Tahoma'>Problemsetter</span></span><span style='font-family:Tahoma'>: <span
class=SpellE>Sohel</span> Hafiz, Special Thanks: <span class=SpellE>Arifuzzaman</span>
<span class=SpellE>Arif</span><o:p></o:p></span></p--><p class=MsoNormal><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4498||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="f_files/filelist.xml"><link rel=Edit-Time-Data href="f_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem F - Password Remembering</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>F</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Password Remembering</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/f_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Nadia wants to create two email accounts (one for her personal use and another for official use) in a popular emailing site named <span class=SpellE>bestmail</span>. One of the important parts of creating an account is choosing a password. <span class=SpellE>Bestmail</span> provides some rules for choosing a password. Here are the rules:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-family:Verdana'>1.</span><span style='font-size:7.0pt;line-height:
115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-family:Verdana'>Password should be an integer number with no leading zero.</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-family:Verdana'>2.</span><span style='font-size:7.0pt;line-height:
115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-family:Verdana'>Password should not be less than a given integer A.</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-family:Verdana'>3.</span><span style='font-size:7.0pt;line-height:
115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-family:Verdana'>Password should not be greater than another given integer B.</span></p><p class=listparagraph style='text-align:justify;text-indent:-.25in'><span style='font-family:Verdana'>4.</span><span style='font-size:7.0pt;line-height:
115%;font-family:"Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span style='font-family:Verdana'>Both A and B are provided by best mail as the range of password.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Nadia thinks choosing two different passwords for two different accounts is difficult to remember. So she decided she will choose one integer satisfying the rules for her first account and will use reverse of that integer for the second account. By this way she has to remember the password of first account only. Reverse of an integer can be found by reversing the order of the digits of the integer and removing the leading zeros. For example, reverse of 1203 is 3021, reverse of 1050 is 501.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>After deciding this, she found that many integers are satisfying the rules but reverse of those are not always satisfying the rules. So she is interested about how many options she has to choose a password for her first account so that she can set the password for her second account just by reversing the first password.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Input will start with an integer number T (1 &#8804; T &#8804; 5000), the number of test cases. Each test case contains two integers A and B (0 &lt; A &#8804; B &lt; 2<sup>64</sup>), range of password as described above.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each test case, output a single line of the form Case X: N, where X denotes the case number and N denotes the number of options for Nadia for choosing a password for her first account.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=638 style='width:6.65in;background:#CCCCCC;border-collapse:collapse;mso-padding-alt:
 0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=307 valign=top style='width:3.2in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><pre style='layout-grid-mode:char'><span
  style='font-size:11.0pt'>3</span></pre><pre><span style='font-size:11.0pt'>5 <span
  class=SpellE>5</span></span></pre><pre><span style='font-size:11.0pt'>1 100</span></pre><pre><span
  style='font-size:11.0pt'>100 200</span></pre></td><td width=331 valign=top style='width:3.45in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='margin-bottom:10.0pt;layout-grid-mode:char'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 1<br>Case 2: 100<br>Case 3: 10</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span><span class=SpellE><span style='font-family:
Tahoma'>Problemsetter</span></span><span style='font-family:Tahoma'>: <span
class=SpellE>Arifuzzaman</span> <span class=SpellE>Arif</span>, Special Thanks:
Derek <span class=SpellE>Kisman</span>, <span class=SpellE>Manzurur</span> <span
class=SpellE>Rahman</span> Khan <o:p></o:p></span></p--><p class=MsoNormal style='text-align:justify'><o:p>&nbsp;</o:p></p><p class=MsoNormal><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
4499||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="g_files/filelist.xml"><link rel=Edit-Time-Data href="g_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem G - Camera in the Museum</title> <o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="PlaceType"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="PlaceName"/><o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"/><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object> <style>
st1\:*{behavior:url(#ieooui) }
</style> <![endif]--><style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>G</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Camera in the Museum</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/44/g_files/image014.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1029" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:216.75pt;height:129pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/44/g_files/image014.gif/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=289 height=172 src="http://livearchive.onlinejudge.org/external/44/g_files/image014.gif align=left hspace=12 v:shapes="_x0000_s1029"><![endif]><span style='font-size:11.0pt;font-family:Verdana'>The <st1:place w:st="on"><st1:PlaceName w:st="on"><span class=SpellE>Catenari</span></st1:PlaceName> <st1:PlaceType w:st="on">Museum</st1:PlaceType></st1:place> is world renowned for the valuable antique items it has. The total market value of all its items is around 20 trillion dollars and so guarding them is a very difficult job as antique buyers and businessmen are willing to pay any amount to get hold of them. So the Museum authority does not depend on human guards any more. They have placed many CCTV cameras in the Museum. Now they want to place one high powered, fast revolving CCTV camera at one position of the ceiling. As this type of camera is very costly, so they have decided to install only one such camera per floor.&nbsp; </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>All floors in the Museum are rectangular shaped and so it is possible to place the camera in a place from where all the valuables items on display can be seen. But there is a problem in the ground floor which also consists of the Head Office of the Museum. The head office has a circular shape and is somewhere strictly within the rectangular room. So it is possible that there are places in the floor from where all the valuable items are not visible. Your job is to find a place from where maximum number of items is visible and report this maximum number of valuable items. You can assume that the museum is so large compared to the valuable items that each valuable items can be denoted by a point in the 2 dimensional Cartesian coordinate system.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><div align=center><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'><td width=421 valign=top style='width:315.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'><img width=392 height=315 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/44/g_files/image014.gif></p></td></tr><tr style='mso-yfti-irow:1;mso-yfti-lastrow:yes'><td width=421 valign=top style='width:315.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-align:justify'>Figure: This denotes the first sample input. From location A six items are visible. But from location B <span class=GramE>less</span> items are visible.</p></td></tr></table></div><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The input file can contain up to 225 cases. But most of the cases are not extreme. The description of each test case is given below:</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Each test case starts with six integers H, W (50 &#8804;<span class=GramE>&nbsp; H</span>, W &#8804; 10000), R (0 &lt; 2R &lt; 10000), <span class=SpellE>C<sub>x</sub></span>, C<sub>y</sub>, N (N &le; 10000). Here H and W denote the length and width of the room respectively, R denotes the radius of the circle that denotes Museum office, and (<span class=SpellE>C<sub>x</sub></span>, <span class=GramE>C<sub>y</sub></span>) denotes the coordinate of the center of the circle. The circle is strictly within the rectangular room. You can also assume that walls of the museum are axis-parallel and the coordinate of the lower left corner of the room is at the origin (0, 0). So the coordinate of the upper right corner is (W, H). Each of the next N lines contains two integers which denote the coordinate of one valuable items of the museum. You can safely assume that no two items will be on the same coordinate, all items will be strictly inside the room but no items will be inside the Museum office or even on the boundary of office or room.&nbsp; </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Input is terminated by a line containing six zeroes. The size of the input file is less than 5 Megabyte.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each line of input produce one line of output. This line contains the serial of output followed by an integer T which denotes the maximum number of valuable items that is visible from at least one point in the museum room. So if the coordinate of the point is (s, t) it must satisfy (0 &#8804; s &#8804; W and 0 &#8804; t &#8804; W). You dont need to print the coordinate of the place from where maximum number of items is visible because there may be more than one such place. Look at the output for sample input for details. You can assume that small precision errors will not affect the result. Use double-precision floating-point numbers for calculation.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=319 valign=top style='width:239.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>75 91 20 60 47 6</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>39 10</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>48 18</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>72 21</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>82 33</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>18 36</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>31 52</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>0 <span class=SpellE>0</span> <span class=SpellE>0</span> <span class=SpellE>0</span> <span class=SpellE>0</span> <span class=SpellE>0</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=330 valign=top style='width:247.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 6</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span style='font-family:Arial'>&nbsp;</span><span
style='font-size:10.0pt;font-family:Verdana'>&nbsp;</span><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Shahriar <span class=SpellE>Manzoor</span>, Special Thanks: Derek <span
class=SpellE>Kisman</span> <o:p></o:p></span></p--></div></body></html>
______________________________________________________
4500||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="h_files/filelist.xml"><link rel=Edit-Time-Data href="h_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem H - Traffic Jam</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><a name="OLE_LINK1"></a><a
  name="OLE_LINK2"></a><span style='mso-bookmark:OLE_LINK1'><b><span
  style='font-size:60.0pt;font-family:Arial'>H</span></b></span></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Traffic Jam</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/45/h_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"/><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"/><v:f eqn="sum @0 1 0"/><v:f eqn="sum 0 0 @1"/><v:f eqn="prod @2 1 2"/><v:f eqn="prod @3 21600 pixelWidth"/><v:f eqn="prod @3 21600 pixelHeight"/><v:f eqn="sum @0 0 1"/><v:f eqn="prod @6 1 2"/><v:f eqn="prod @7 21600 pixelWidth"/><v:f eqn="sum @8 21600 0"/><v:f eqn="prod @7 21600 pixelHeight"/><v:f eqn="sum @10 21600 0"/></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/><o:lock v:ext="edit" aspectratio="t"/></v:shapetype><v:shape id="_x0000_s1030" type="#_x0000_t75" alt="" style='position:absolute;
 left:0;text-align:left;margin-left:0;margin-top:0;width:270pt;height:215.25pt;
 z-index:1;mso-position-horizontal:left;mso-position-vertical-relative:line' o:allowoverlap="f"><v:imagedata src="http://livearchive.onlinejudge.org/external/45/h_files/image004.gif/><w:wrap type="square"/></v:shape><![endif]--><![if !vml]><img width=360 height=287 src="http://livearchive.onlinejudge.org/external/45/h_files/image004.gif align=left hspace=12 v:shapes="_x0000_s1030"><![endif]><span style='font-size:11.0pt;font-family:Verdana'>Traffic Jam is becoming a major problem in the city of '<span class=SpellE>Faka</span>' these days. Every day, you need to go to work from home through a one-way road that can be modeled as a series of straight line segments (aka piece-wise linear) of positive length. To be more explicit, suppose there are one way straight line paths named P, Q and R in your way. P starts at your home &amp; ends at the starting point of Q. Q starts from the ending point of P &amp; ends at starting point of R. Similarly, R starts at ending point of Q &amp; ends at your destination. Two non-adjacent line segments in a road will never intersect with each other. </span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Now, you start from home for work and immediately get irritated by the heavy and annoying traffic jam. So you wish you could fly to your destination in order to avoid spending the whole day on road. Your new vehicle <span class=SpellE>Aerocar</span> comes as the solution to you. With this car, you can fly from any point on the road (The <span class=SpellE>aerocar</span> has a vertical take-off &amp; landing similar to that of a helicopter) and land back to any point on the road any time. Now, though you would have liked to fly all the way and thus avoiding the traffic, you need to resist the temptation due to the fact that flying requires more fuel than driving. You need 1 unit of fuel to travel every unit distance along the path while F units per unit distance while flying. Now you need to write a program that, given the description of the road, can calculate the minimum possible fuel amount needed to complete your journey.</span></p><p class=MsoBodyText><a name=mhvd></a><span style='font-size:10.0pt;font-family:
Verdana'>&nbsp;</span></p><h5 style='margin-left:.7in;text-align:justify;text-indent:-.7in'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>Input file contains less than 60 test cases. Each test case starts with a couple of integers N (1 &#8804; N &#8804; 25) &amp; F (2 &#8804; F &#8804; 5). N is the number of line segments in the road. F is the amount of fuel required for every unit distance traveled while flying. Next (N+1) lines each has two integers, x (-1000 &#8804; x &#8804; 1000) &amp; y (-1000 &#8804; y &#8804; 1000). Assuming the road is placed on a planar 2d grid, the integers in the <span class=SpellE>i'th</span> line denotes the x and y co-ordinates of the starting point of the <span class=SpellE>i'th</span> line segment while the <span class=SpellE>the</span> end point co-ordinates by the <span class=SpellE>i'th</span> line segment are given at the (i+1)'<span class=SpellE>th</span> line. The last test case will be followed by a case with N = F = 0 indicating the end of input. This case should not be processed.</span></p><p class=MsoNormal>&nbsp;</p><h4 style='margin-left:.6in;text-indent:-.6in'><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each test case except the last one, print one line of the form Case X: Y, where X is the serial number of output &amp; Y is the minimal possible units of fuel required. Print 3 digits after decimal point for Y. The output will be tested by a special judge program and outputs with precision error smaller than 10<sup>-3</sup> shall be considered as correct.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><h1 align=left style='margin-left:.3in;text-align:left;text-indent:-.3in'><b><span style='font-size:16.0pt;font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='margin-left:-1.25pt;background:#CCCCCC;border-collapse:collapse;
 mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes;
  height:26.5pt'><td width=319 valign=top style='width:239.4pt;border:solid black 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:26.5pt'><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><a name="DDE_LINK"></a><a name="DDE_LINK1"></a><span style='mso-bookmark:DDE_LINK'><span style='font-size:11.0pt;font-family:"Courier New"'>2 5</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>5 0</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>10 0</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>2 <span class=SpellE>2</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>2 <span class=SpellE>2</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>2 -2</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>3 5</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>1 <span class=SpellE>1</span></span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>-7 0</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>1 10</span></p><p class=MsoBodyText style='margin-bottom:14.15pt'><span style='font-size:
  11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span></span></p></td><td width=351 valign=top style='width:263.5pt;border:solid black 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt;height:26.5pt'><p class=MsoNormal style='layout-grid-mode:char'><span style='font-size:11.0pt;
  font-family:"Courier New"'>Case 1: 10.000</span></p><p class=MsoNormal style='text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 5.464</span></p><p class=MsoNormal style='layout-grid-mode:char;text-autospace:ideograph-numeric'><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: 22.283</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span><span class=SpellE><span style='font-family:
Tahoma'>Problemsetter</span></span><span style='font-family:Tahoma'>: Mohammad <span
class=SpellE>Mahmudur</span> <span class=SpellE>Rahman</span>, Special Thanks: Derek
<span class=SpellE>Kisman</span> <o:p></o:p></span></p--><p class=MsoNormal align=center style='text-align:center'>&nbsp;</p><p class=MsoNormal><b>Illustration:</b></p><p class=MsoNormal><b>&nbsp;</b></p><p class=MsoNormal>The following figure illustrates the second test case of sample input. Your home is placed in the (0<span class=GramE>,0</span>) point whereas the destination is at (2,-2). If the travel is completed through the roads, the fuel consumption will be 6.828 units (2.828 units to go to (2<span class=GramE>,2</span>) from (0,0) and 4 for the (2,2) to (2,-2) part). Alternatively, one can fly from (0<span class=GramE>,0</span>) to (2,-1.154) with the required amount of fuel being 4.618 units (2.309 * 2), and then through the road to (2,-2) consumpting .846 more units of fuel, being the total 5.464 units. So, the best result is achieved by flying a part.</p><p class=MsoNormal>&nbsp;</p><p class=MsoNormal align=center style='text-align:center'><img src="http://livearchive.onlinejudge.org/external/45/h_files/image004.gif><br clear=all style='mso-special-character:line-break'></p></div></body></html>
______________________________________________________
4501||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="i_files/filelist.xml"><link rel=Edit-Time-Data href="i_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem I - Rectangle of Permutations</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>I</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Rectangle of Permutation</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>We want to build a rectangle where each row is a permutation of 0 to N-1.&nbsp; We want to make this rectangle with as many rows as possible while maintaining the following constraints.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p><p class=MsoNormal style='text-align:justify'><sub><span style='font-size:11.0pt;
font-family:Verdana'><img width=84 height=50 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></span></sub><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;<span class=GramE>and </span><sub><img width=87 height=49 id="_x0000_i1027" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>, where <sub><img width=258 height=58 id="_x0000_i1028" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub></span></p><p class=MsoNormal style='text-align:justify'><sub><span style='font-size:11.0pt;
font-family:Verdana'><img width=28 height=25 id="_x0000_i1029" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></span></sub><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;<span class=GramE>is</span> the number of occurrences of integer j in the column <span class=SpellE>i</span>. C is a matrix of N rows and N columns will be given as input. <span class=GramE>A and</span> B are two sequences of size N will be given as input. Given N, A, B, C build a rectangle with the largest possible number of rows.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:10.0pt;
font-family:Verdana'>&nbsp;</span></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>First line of the input contains T (<sub><img width=68 height=19 id="_x0000_i1030" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>) the number of test cases. Then <span class=GramE>T test cases follows</span>. Each test case starts with an integer N (<sub><img width=71 height=19 id="_x0000_i1031" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>) indicates the number of columns in the rectangle. Next Line contains N <span class=GramE>integers</span> <span class=SpellE>seperated</span> by a single space. These integers are A<sub>0</sub> to A<sub>N-1 </sub>(<sub><img width=73 height=24 id="_x0000_i1032" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>). Next line contains N integers separated by a single space. These integers are B<sub>0</sub> to B<sub>N-1 </sub>(<sub><img width=73 height=24 id="_x0000_i1033" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>). Each of the next N line contains N integers in each <span class=GramE>lines</span>. The integer on row <span class=SpellE>i</span> and column j is <span class=SpellE>C<sub>i<span class=GramE>,j</span></sub></span> (<sub><img width=76 height=25 id="_x0000_i1034" src="http://livearchive.onlinejudge.org/external/45/i_files/image004.gif></sub>) ( <span class=SpellE>i</span> and j starts from zero). A blank line will follow each test case. </span></p><p class=MsoNormal><b>&nbsp;</b></p><h5 style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Output</span></span></h5><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each test case the first line of the output will be in the following format Case #C: R. Quotes are for clarity only. C is the test case number starting from 1. R is the maximum possible rows of the rectangle. Each of the next R lines should contain N integer in each line <span class=SpellE>seperated</span> by spaces. Each of these<span class=GramE>&nbsp; N</span> integers in each line should be a permutation of 0 to N-1. The whole RXN rectangle should maintain the constraints as described in the problem statement.</span></p><p class=MsoNormal>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=331 valign=top style='width:3.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span> <span class=SpellE>0</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span> <span class=SpellE>0</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 0 <span class=SpellE>0</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 0 </span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 <span class=SpellE>0</span> 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3 2 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 2 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>3 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td><td width=343 valign=top style='width:257.05pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 7</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 1 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 0 2</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 1 0</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>0 2 1</span></p><p class=MsoNormal><b><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></b></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Abdullah al Mahmud, Special Thanks: Derek <span class=SpellE>Kisman</span>,
Mohammad <span class=SpellE>Mahmudur</span> Rahman </span></p--></div></body></html>
______________________________________________________
4502||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="j_files/filelist.xml"><link rel=Edit-Time-Data href="j_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>Problem J - How Many Bases?</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'><span style='font-size:12.0pt;
  font-family:"Times New Roman";mso-fareast-font-family:"Times New Roman";
  mso-bidi-font-family:"Times New Roman";color:black;mso-ansi-language:EN-US;
  mso-fareast-language:EN-US;mso-bidi-language:#0845'><br clear=all
  style='page-break-before:always'>
  </span>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>J</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>How Many Bases?</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'>
  Standard Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/45/j_files/image014.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>A classical problem of number theory is Find the number of trailing zeroes in N<sup>M</sup>, in base B. This problem is quite conventional and easy. But a number can have same number of trailing zeroes in more than one base. For example, if decimal number 24 is written in 3, 4, 6, 8, 12 and 24 based number system, it will look like 80, 60, 40, 30, 20 and 10 respectively. So in all number systems it has only one trailing zero. Given a number N<sup>M</sup>, your job is to find out the number of integer bases in which it has exactly T trailing zeroes.&nbsp; </span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>The input file contains at most 10000 line of input. Each line contains three integers N (1 &#8804; N &#8804; 10<sup>8</sup>), M (0&lt; M&#8804; 10<sup>7</sup>) and T (0&lt; T &#8804; 10<sup>4</sup>). The meaning of N, M and T is given in the problem statement. Input is terminated by a line containing three zeroes, which obviously should not be processed for calculation.</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each line of input produce one line of output. This line contains the serial of output followed by an integer NB, which is modulo 100000007 value of number of bases in which N<sup>M</sup> has exactly T trailing zeroes.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>24 1 <span class=SpellE>1</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>100 200 10</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>23 18 2</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>0 <span class=SpellE>0</span> <span class=SpellE>0</span></span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>&nbsp;</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 6</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 312</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Shahriar <span class=SpellE>Manzoor</span>, Special Thanks: Derek <span
class=SpellE>Kisman</span></span></p--></div></body></html>
______________________________________________________
4503||||||false||||||
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=windows-1252"><meta name=ProgId content=Word.Document><meta name=Generator content="Microsoft Word 11"><meta name=Originator content="Microsoft Word 11"><link rel=File-List href="k_files/filelist.xml"><link rel=Edit-Time-Data href="k_files/editdata.mso"><!--[if !mso]><style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style> <![endif]--><title>The 2008 ACM ASIA</title> <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:Zoom>150</w:Zoom>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]--> <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520078593 -1073717157 41 0 66047 0;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1610611985 1073750139 0 0 159 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-1593833729 1073750107 16 0 415 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;
	font-style:italic;}
h4
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
h5
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:5;
	font-size:12.0pt;
	font-family:"Times New Roman";
	color:black;
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:7;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:8;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	font-style:italic;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Courier New";}
p.tablecontents, li.tablecontents, div.tablecontents
	{mso-style-name:tablecontents;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Verdana;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraph, li.listparagraph, div.listparagraph
	{mso-style-name:listparagraph;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspfirst, li.listparagraphcxspfirst, div.listparagraphcxspfirst
	{mso-style-name:listparagraphcxspfirst;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxspmiddle, li.listparagraphcxspmiddle, div.listparagraphcxspmiddle
	{mso-style-name:listparagraphcxspmiddle;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.listparagraphcxsplast, li.listparagraphcxsplast, div.listparagraphcxsplast
	{mso-style-name:listparagraphcxsplast;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:Calibri;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
span.stylearial16pt
	{mso-style-name:stylearial16pt;
	font-family:Arial;
	mso-ascii-font-family:Arial;
	mso-hansi-font-family:Arial;
	font-weight:bold;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:.5in .7in 38.9pt .7in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style> <!--[if gte mso 10]><style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style> <![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--> </head><body lang=EN-US style='tab-interval:.5in'><div class=Section1><!--div align=center>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'>
  <td width=97 valign=top style='width:73.1pt;border:solid windowtext 1.0pt;
  background:#E6E6E6;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-size:60.0pt;font-family:Arial'>K</span></b></p>
  </td>
  <td width=446 valign=top style='width:4.65in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><span
  style='font-size:28.0pt;font-family:Impact'>Integer Game</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Input:</span></b><span style='font-family:Arial'> Standard
  Input</span></p>
  <p class=MsoNormal align=center style='text-align:center'><b><span
  style='font-family:Arial'>Output:</span></b><span style='font-family:Arial'>
  Standard Output</span></p>
  </td>
  <td width=100 valign=top style='width:75.3pt;border:solid windowtext 1.0pt;
  border-left:none;background:#E0E0E0;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center'><img width=86
  height=85 id="_x0000_i1025" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></p>
  </td>
 </tr>
</table>

</div--><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>You are playing a single player game where you can convert one integer from another through a sequence of moves.&nbsp; The integer Y is reachable from X in a single move if the following is satisfied.</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><sub><span style='font-size:11.0pt;
font-family:Verdana'><img width=80 height=48 id="_x0000_i1026" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></span></sub><span class=GramE><span style='font-size:11.0pt;font-family:Verdana'>, where k is a positive integer, <sub><img width=16 height=23 id="_x0000_i1027" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;and <sub><img width=19 height=23 id="_x0000_i1028" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;are prime numbers and X is divisible by<sub><img width=21 height=24 id="_x0000_i1029" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>.</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>&nbsp;</span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For example 18 <span class=GramE>is</span> reachable from 8 in one move, because you can divide 8 by 4 and then multiply by 9. But 6 <span class=GramE>is</span> not reachable from 8. Given two integers A and B calculate the minimum number of moves necessary to transform A into B. Both A and B can be very large. So each of them is needed to be expressed as a multiplication of a sequence of small integers: <sub><img width=92 height=36 id="_x0000_i1030" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;<span class=GramE>and </span><sub><img width=89 height=36 id="_x0000_i1031" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>. Both of the sequences <sub><img width=16 height=24 id="_x0000_i1032" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;and <sub><img width=15 height=24 id="_x0000_i1033" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;will be given as inputs.</span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><p class=MsoNormal style='text-align:justify'><span class=stylearial16pt><span style='font-size:16.0pt'>Input</span></span></p><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>First line of the input contains T (1 &#8804; T &#8804; 40) the number of test cases. Then T blocks of test cases follows. First line of the test case contains N (1 &#8804; N &#8804; 300) followed by N integers.&nbsp; N is the length of the sequence <sub><img width=16 height=24 id="_x0000_i1034" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;and the following N integers form the <span class=GramE>sequence </span><sub><img width=16 height=24 id="_x0000_i1035" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>. The second line starts with an integer M&nbsp;(1 &#8804; M &#8804; 300). M is the length of the sequence <sub><img width=15 height=24 id="_x0000_i1036" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>&nbsp;and the following M integers form the <span class=GramE>sequence </span><sub><img width=15 height=24 id="_x0000_i1037" src="http://livearchive.onlinejudge.org/external/45/k_files/image004.gif></sub>. Each of integers in these two sequences will be between 2 and 200 (inclusive).</span></p><p class=MsoNormal>&nbsp;</p><h4><span class=stylearial16pt><span style='font-size:16.0pt'>Output </span></span></h4><p class=MsoNormal style='text-align:justify'><span style='font-size:11.0pt;
font-family:Verdana'>For each case of input, print the serial of output followed by an integer: the minimum number of moves required to transform A to B. If it is impossible to transform A to B with any number of moves output -1 instead. If the minimum number of moves is greater than or equal to 20 print a -1 as well. </span></p><p class=MsoNormal style='text-align:justify'>&nbsp;</p><h1 align=left style='text-align:left'><b><span style='font-size:16.0pt;
font-family:Arial;font-style:normal'>Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output for Sample Input</span></b></h1><table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 style='background:#CCCCCC;border-collapse:collapse;mso-padding-alt:0in 0in 0in 0in'><tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;mso-yfti-lastrow:yes'><td width=313 valign=top style='width:234.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>4</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 4</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 9</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 <span class=SpellE>2</span> <span class=SpellE>2</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 3 <span class=SpellE>3</span></span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 8</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>1 6</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>2 32 11</span></p><p class=MsoNormal style='text-autospace:none'><span style='font-size:11.0pt;
  font-family:"Courier New"'>3 27 25 13</span></p></td><td width=336 valign=top style='width:3.5in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt'><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 1: 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 2: 1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 3: -1</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>Case 4: 3</span></p><p class=MsoNormal><span style='font-size:11.0pt;font-family:"Courier New"'>&nbsp;</span></p></td></tr></table><!--div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p class=MsoNormal style='text-align:justify'><span class=SpellE><span
style='font-family:Tahoma'>Problemsetter</span></span><span style='font-family:
Tahoma'>: Abdullah al Mahmud, Special Thanks: <span class=SpellE>Arifuzzaman</span>
Arif</span></p--><p class=MsoNormal><o:p>&nbsp;</o:p></p></div></body></html>
______________________________________________________
