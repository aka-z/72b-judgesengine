1000||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Calculate a + b </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">a and b</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">a+b</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 5</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Use + operator</DIV></DIV>
______________________________________________________
1001||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The problem is so easy, that the authors were lazy to write a statement for it!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input stream contains a&nbsp;set of&nbsp;integer numbers <i>A<sub>i</sub></i> (0&nbsp;&le; <i>A<sub>i</sub></i> &le; 10<sup>18</sup>). The numbers are separated by&nbsp;any number of&nbsp;spaces and line breaks. A&nbsp;size of&nbsp;the input stream does not exceed 256&nbsp;KB.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each number <i>A<sub>i</sub></i> from the last one till the first one you should output its square root. Each square root should be&nbsp;printed in&nbsp;a&nbsp;separate line with at&nbsp;least four digits after decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable"> 1427  0   

   876652098643267843 
5276538
  
   </PRE></TD><TD><PRE CLASS="intable">2297.0716
936297014.1164
0.0000
37.7757
</PRE></TD></TR></TABLE>
______________________________________________________
1002||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the present world you frequently meet a lot of call numbers and
they are going to be longer and longer. You need to remember such a
kind of numbers. One method to do it in an easy way is to assign
letters to digits as shown in the following picture:
</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">1 ij    2 abc   3 def
4 gh    5 kl    6 mn
7 prs   8 tuv   9 wxy
        0 oqz
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This way every word or a group of words can be assigned a unique
number, so you can remember words instead of call numbers. It is
evident that it has its own charm if it is possible to find some
simple relationship between the word and the person itself. So you can
learn that the call number 941837296 of a chess playing friend of
yours can be read as WHITEPAWN, and the call number 2855304 of your
favourite teacher is read BULLDOG.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program to find the shortest sequence of words (i.e. one
having the smallest possible number of words) which corresponds to a
given number and a given list of words. The correspondence is
described by the picture above.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains a series of tests. The first line of each test contains the call number, the
transcription of which you have to find. The number consists of at
most 100 digits. The second line contains the total number of the
words in the dictionary (maximum is 50 000). Each of the remaining
lines contains one word, which consists of maximally 50 small letters
of the English alphabet. The total size of the input doesn't
exceed 300 KB. The last line contains call number &minus;1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of output contains the shortest sequence
of words which has been found by your program. The words are separated
by single spaces. If there is no solution to the input data, the line
contains text “<code>No solution.</code>”. If there are more solutions having the
minimum number of words, you can choose any single one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7325189087
5
it
your
reality
real
our
4294967296
5
it
your
reality
real
our
-1
</PRE></TD><TD><PRE CLASS="intable">reality our
No solution.
</PRE></TD></TR></TABLE>
______________________________________________________
1003||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now and then you play the following game with your friend. Your friend
writes down a sequence consisting of zeroes and ones. You choose a
continuous subsequence (for example the subsequence from the third to
the fifth digit inclusively) and ask him, whether this subsequence
contains even or odd number of ones. Your friend answers your question
and you can ask him about another subsequence and so on. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is
to guess the entire sequence of numbers.
You suspect some of your friend's answers may not be correct and you
want to convict him of falsehood. Thus you have decided to write a
program to help you in this matter. The program will receive a series
of your questions together with the answers you have received from
your friend. The aim of this program is to find the first answer which
is provably wrong, i.e. that there exists a sequence satisfying
answers to all the previous questions, but no such sequence satisfies
this answer.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains a series of tests. The first line of each test contains one number, which is
the length of the sequence of zeroes and ones. This length is less or
equal to 10<sup>9</sup>. In the second line, there is one non-negative integer
which is the number of questions asked and answers to them. The number
of questions and answers is less or equal to 5 000. The remaining lines
specify questions and answers. Each line contains one question and the
answer to this question: two integers (the position of the first and
last digit in the chosen subsequence) and one word which is either
“<code>even</code>” or “<code>odd</code>” (the answer, i.e. the parity of the number of ones in
the chosen subsequence, where “<code>even</code>” means an even number of ones and
“<code>odd</code>” means an odd number). The input is ended with a line containing <nobr>&minus;1</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of output containing one
integer <i>X</i>. Number <i>X</i> says that there exists a sequence of zeroes and
ones satisfying first <i>X</i> parity conditions, but there exists none
satisfying <i>X</i> + 1 conditions. If there exists a sequence of zeroes and
ones satisfying all the given conditions, then number <i>X</i> should be the
number of all the questions asked.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
5
1 2 even
3 4 odd
5 6 even
1 6 even
7 10 odd
-1
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1004||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a travel agency in Adelton town on Zanzibar island. It has decided to
offer its clients, besides many other attractions, sightseeing the town. To
earn as much as possible from this attraction, the agency has accepted a
shrewd decision: it is necessary to find the shortest route which begins and
ends at the same place.  
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program which finds such a route.
In the town there are <i>N</i> crossing points numbered from 1 to <i>N</i> and <i>M</i> two-way
roads numbered from 1 to <i>M</i>.  Two crossing points can be connected by multiple
roads, but no road connects a crossing point with itself.  Each sightseeing
route is a sequence of road numbers <i>y</i><sub>1</sub>, …, <i>y<sub>k</sub></i>, <i>k</i> &gt; 2. The road <i>y<sub>i</sub></i>
<nobr>(1 &le; <i>i</i> &le; <i>k</i> &minus; 1)</nobr> connects crossing points <i>x<sub>i</sub></i> and <i>x</i><sub><i>i</i>+1</sub>, the road <i>y<sub>k</sub></i> connects
crossing points <i>x<sub>k</sub></i> and <i>x</i><sub>1</sub>. All the numbers <i>x</i><sub>1</sub>, …, <i>x<sub>k</sub></i> should be different.
The length of the sightseeing route is the sum of the lengths of all roads on
the sightseeing route, i.e. L(<i>y</i><sub>1</sub>) + L(<i>y</i><sub>2</sub>) + … + L(<i>y<sub>k</sub></i>) where L(<i>y<sub>i</sub></i>) is the
length of the road <i>y<sub>i</sub></i> (1 &le; <i>i</i> &le; <i>k</i>).  Your program has to find such a sightseeing
route, the length of which is minimal, or to specify that it is not possible,
because there is no sightseeing route in the town.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains a series of tests.
The first line of each test contains two positive integers: the
number of crossing points <i>N</i> &le; 100 and the number of roads <i>M</i> &le; 10000. Each of the
next <i>M</i> lines describes one road. It contains 3 positive integers: the number
of its first crossing point, the number of the second one, and the length of
the road (a positive integer less than 500).
Input is ended with a “&minus;1” line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of output is an answer. It contains either a string
“No&nbsp;solution.” in case there isn't any sightseeing route, or it contains the
numbers of all crossing points on the shortest sightseeing route in the order
how to pass them (i.e. the numbers <i>x</i><sub>1</sub> to <i>x<sub>k</sub></i> from our definition of a
sightseeing route), separated by single spaces. If there are multiple
sightseeing routes of the minimal length, you can output any one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 7
1 4 1
1 3 300
3 1 10
1 2 16
2 3 100
2 5 15
5 3 20
4 3
1 2 10
1 3 20
1 4 30
-1
</PRE></TD><TD><PRE CLASS="intable">1 3 5 2
No solution.
</PRE></TD></TR></TABLE>
______________________________________________________
1005||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have a number of stones with known weights <i>W</i><sub>1</sub>, …, <i>W<sub>n</sub></i>.  Write a program that will rearrange the stones into two piles such that weight difference between the piles is minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains the number of stones <i>N</i> (1 &le; <i>N</i> &le; 20) and weights of the stones <i>W</i><sub>1</sub>, …, <i>W<sub>n</sub></i> (integers, 1 &le; <i>W<sub>i</sub></i> &le; 100000) delimited by white spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should output a number representing the minimal possible weight difference between stone piles.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
5 8 13 27 14
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1006||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Frame consists of the following characters:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table align="center">
<tr>
 <th>Character</th>
 <th>ASCII code</th>
 <th>Description</th>
</tr>
<tr>
 <td align="center">┌</td>
 <td align="center">218</td>
 <td>Left upper corner</td>
</tr>
<tr>
 <td align="center">┐</td>
 <td align="center">191</td>
 <td>Right upper corner</td>
</tr>
<tr>
 <td align="center">└</td>
 <td align="center">192</td>
 <td>Left bottom corner</td>
</tr>
<tr>
 <td align="center">┘</td>
 <td align="center">217</td>
 <td>Right bottom corner</td>
</tr>
<tr>
 <td align="center">│</td>
 <td align="center">179</td>
 <td>Vertical (left and right) border line</td>
</tr>
<tr>
 <td align="center">─</td>
 <td align="center">196</td>
 <td>Horizontal (top and bottom) border line</td>
</tr>
</table></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> square frames (1 &le; <i>N</i> &le; 15) were sequentially drawn on screen 50 characters wide 20 lines tall. If parts of some frames intersect, only the part of the frame drawn latter remains visible. Each frame lies fully on the screen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You need to write a program that builds a possible sequence of frames that (if drawn sequentially) would produce the same picture on the screen. Your sequence does not have to be the same with the original sequence used to build the picture on the screen. However, it should not contain more than 2000 frames.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The screen area was originally filled with dots (ASCII 46). Input contains the final picture on the screen after the sequence of frames is drawn.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should write to output the number of frames in the sequence built and the frames coordinates as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>K</i><BR>
<i>X</i><sub>1</sub> <i>Y</i><sub>1</sub> <i>A</i><sub>1</sub><BR>
&hellip;<BR>
<i>X<sub>k</sub></i> <i>Y<sub>k</sub></i> <i>A<sub>k</sub></i>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <i>K</i> is the number of frames, <i>X<sub>i</sub></i> and <i>Y<sub>i</sub></i> are coordinates of the upper left frame corner (0 &le; <i>X<sub>i</sub></i> &le; 49, 0 &le; <i>Y<sub>i</sub></i> &le; 19) and <i>A<sub>i</sub></i> is the length of the frame side (2 &le; <i>A<sub>i</sub></i>). All numbers must be delimited with one or more spaces and/or line breaks.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">(see the figure above)</PRE></TD><TD><PRE CLASS="intable">6
16 11 7
32 14 4
4 8 8
11 6 7
36 11 3
28 8 3
</PRE></TD></TR></TABLE>
______________________________________________________
1007||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A transmitter sends over a noisy line some binary code words. The receiver on the other end uses special technique to recover the original words.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every word originally consists of symbols 0 and 1. All words have the same length <i>N</i> (4 &le; <i>N</i> &le; 1000). After traveling through the noisy line one (but no more) of the following modifications to a word may occur:
<OL>
<LI>Any (but only one) symbol 0 is replaced by 1.</LI>
<LI>Any (but only one) symbol is removed.</LI>
<LI>A symbol (0 or 1) is inserted at any position.</LI>
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that the original words all have the following property: the sum of positions where symbols 1 are located is a multiple of (<i>N</i>+1) or equal to zero.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains number <i>N</i> followed by received words. The words are delimited with line breaks. There will be no more than 2001 words. There is nothing else in the input data, except maybe for some extra spaces or line breaks.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print to output the original sequence of words as they were transmitted. The words should be delimited by line breaks.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4    
0000 
011  
1011 
11011
</PRE></TD><TD><PRE CLASS="intable">0000
0110
1001
1111
</PRE></TD></TR></TABLE>
______________________________________________________
1008||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are several ways to encode an image. In this problem we will consider two representations of an image. We assume that the image consists of black and white pixels. There is at least one black pixel and all black pixels are connected with their sides. Coordinates of black pixels are not less than 1 and not greater than 10. An example of such an image is at the figure.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Both representations describe arrangement of black pixels only.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the first representation we specify in the first line number of black pixels and coordinates of each black pixel in the following lines. Pixels are listed in order of increasing X. In case of equality of X they are listed in order of increasing Y. Image at the figure is encoded as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>
6<BR>
2 3<BR>
2 4<BR>
3 3<BR>
3 4<BR>
4 2<BR>
4 3<BR>
</B></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the second representation we specify in the first line coordinates of the lowest left black pixel. Each of the following lines contains a description of neighbors for one of the pixels. At first, neighbors of the lowest left pixel are specified, then neighbors of its first neighbor (if it exists) are specified, then neighbors of its second neighbor (if it also exists) follow. When all its neighbors are described the description of the neighbors of its first neighbor follows. The description of the neighbors of its second neighbor follows then and so on.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each descriptive line contains at most one letter for each neighbor: R for the right, T for the top, L for the left, B for the bottom. If the neighbor was already specified it is not included into the descriptive line and vice-versa. Also there is only one descriptive line for each pixel. Neighbors are listed counter-clockwise starting with the right. Each descriptive line except the last ends with a comma. The last line ends with a full stop. Image at the figure is encoded as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>
2 3<BR>
RT,<BR>
RT,<BR>
,<BR>
B,<BR>
,<BR>
.<BR>
</B>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are no leading or tailing spaces in any representation. There is exactly one space between X and Y coordinates.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One representation of the image will be given to your program in the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program has to write other representation of the image to the output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
2 3
2 4
3 3
3 4
4 2
4 3
</PRE></TD><TD><PRE CLASS="intable">2 3
RT,
RT,
,
B,
,
.
</PRE></TD></TR></TABLE>
______________________________________________________
1009||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s consider <i>K</i>-based numbers, containing exactly <i>N</i> digits. We define a number to be valid if its <i>K</i>-based notation doesn’t contain two successive zeros. For example:
<UL>
<LI>1010230 is a valid 7-digit number;
<LI>1000198 is not a valid number;
<LI>0001235 is not a 7-digit number, it is a 4-digit number.
</UL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given two numbers <i>N</i> and <i>K</i>, you are to calculate an amount of valid <i>K</i> based numbers, containing <i>N</i> digits.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that 2 &le; <i>K</i> &le; 10; <i>N</i> &ge; 2; <i>N</i> + <i>K</i> &le; 18.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The numbers <i>N</i> and <i>K</i> in decimal notation separated by the line break.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result in decimal notation.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
10
</PRE></TD><TD><PRE CLASS="intable">90
</PRE></TD></TR></TABLE>
______________________________________________________
1010||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a discrete function. It is specified for integer arguments from 1 to <i>N</i> (2 &le; <i>N</i> &le; 100000). Each value of the function is longint (signed long in C++). You have to find such two points of the function for which all points between them are below than straight line connecting them and inclination of this straight line is the largest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is an <i>N</i> in the first line. Than <i>N</i> lines follow with the values of the function for the arguments 1, 2, &hellip;, <i>N</i> respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A pair of integers, which are abscissas of the desired points, should be written into one line of output. The first number must be less then the second one. If it is any ambiguity your program should write the pair with the smallest first number.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2
6
4
</PRE></TD><TD><PRE CLASS="intable">1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1011||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone making translations from English to Russian knows an English phrase "Naked conductor runs along the bus". It has two very different meanings.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every bus in the Ekaterinburg city has a special man (or woman) called 
conductor. When you ride the bus, you have to give money to the conductor.
We know that there are more then <i>P</i>% conductors and less then <i>Q</i>% conductors.
Your task is to determine a minimal possible number of Ekaterinburg citizens.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two numbers <i>P</i>,<i>Q</i> such that 0.01 &le; <i>P</i>, <i>Q</i> &le; 99.99. Numbers are given with 2 digits precision. These numbers are separated by some spaces or "end of line" symbols.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The minimal number of Ekaterinburg citizens.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">13
14.1
</PRE></TD><TD><PRE CLASS="intable">15</PRE></TD></TR></TABLE>
______________________________________________________
1012||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s consider <i>K</i>-based numbers, containing exactly <i>N</i> digits. We define a number to be valid if its <i>K</i>-based notation doesn’t contain two successive zeros. For example:
<UL>
<LI>1010230 is a valid 7-digit number;
<LI>1000198 is not a valid number;
<LI>0001235 is not a 7-digit number, it is a 4-digit number.
</UL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given two numbers <i>N</i> and <i>K</i>, you are to calculate an amount of valid <i>K</i> based numbers, containing <i>N</i> digits.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that 2 &le; <i>K</i> &le; 10; <i>N</i> &ge; 2; <i>N</i> + <i>K</i> &le; 180.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The numbers <i>N</i> and <i>K</i> in decimal notation separated by the line break.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result in decimal notation.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
10
</PRE></TD><TD><PRE CLASS="intable">90
</PRE></TD></TR></TABLE>
______________________________________________________
1013||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s consider <i>K</i>-based numbers, containing exactly <i>N</i> digits. We define a number to be valid if its <i>K</i>-based notation doesn’t contain two successive zeros. For example:
<UL>
<LI>1010230 is a valid 7-digit number;
<LI>1000198 is not a valid number;
<LI>0001235 is not a 7-digit number, it is a 4-digit number.
</UL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given two numbers <i>N</i> and <i>K</i>, you are to calculate an amount of valid <i>K</i> based numbers, containing <i>N</i> digits.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that 2 &le; <i>K</i> &le; 10; <i>N</i> &ge; 2; <i>N</i> + <i>K</i> &le; 1800.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The numbers <i>N</i> and <i>K</i> in decimal notation separated by the line break.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result in decimal notation.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
10
</PRE></TD><TD><PRE CLASS="intable">90
</PRE></TD></TR></TABLE>
______________________________________________________
1014||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find the minimal positive integer number <i>Q</i> so that the product of digits of <i>Q</i> is exactly equal to <i>N</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the single integer number <i>N</i> (0 &le; <i>N</i> &le; 10<sup>9</sup>). </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print to the output the only number <i>Q</i>. If such a number does not exist print &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
</PRE></TD><TD><PRE CLASS="intable">25
</PRE></TD></TR></TABLE>
______________________________________________________
1015||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>N</i> (1 &le; <i>N</i> &le; 10<sup>5</sup>) dice at the casino’s "Royal Flush" storehouse. Some of them are equal, i.e. one can transform one die to another by properly rotating it. Let’s say that two dice have the same scheme if it’s possible to obtain one of them from another by a series of rotation. In other case (no rotations of the first die lead us to the second die) let’s say that dice have different schemes. Your task is to define the dice with the same scheme.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number <i>N</i>. Next <i>N</i> lines contain descriptions of the dice. Each line contains exactly one description of the die. A line describes the die in 6 numbers (separated with spaces): the number of points on the left side of the die, then on the right side, on the top, on the forward side, on the bottom and on the backward side. Certainly, those 6 numbers represent a permutation of integer numbers from 1 to 6 inclusively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain the only number <i>Q</i> of different die’s schemes at the storehouse. Next <i>Q</i> lines should contain the numbers of dice with the same scheme. To be more precisely the second line must begin with 1 and after that (separated by spaces) numbers of dice with the same as die #1 scheme must follow. 
We assume that all dice from the input are numbered from 1 to <i>N</i>. The third line (if not all the dice have the same scheme) must begin with the smallest possible number with the scheme different from the scheme of the die #1. This number (say <i>P</i>) is followed by numbers of dice with the same scheme as the scheme of the die #<i>P</i>. All next lines must be printed in the same manner. Numbers in each line of the output must be sorted in increasing order.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2 6 4 5 3
4 3 6 2 5 1
4 1 3 6 2 5
</PRE></TD><TD><PRE CLASS="intable">2
1 2
3
</PRE></TD></TR></TABLE>
______________________________________________________
1016||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cube placed on some square of a usual chessboard. A cube completely covers one square of the chessboard but not anything more, i.e. size of cube’s edge is equal to the size of square’s edge. The integer number <i>N</i> (0&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000) is written on the each side of the cube. However it does not imply that the same number is written on all sides. On the different sides there are might be different numbers.
One can move a cube to the next square by rotating it around the common edge of the cube and the square. During this motion the sum of the numbers on the bottom of the cube is calculated (each number is added as much times as it appeared at the bottom of the cube).
Your task is to find the route between two given squares with the minimal sum of numbers on the bottom side. The numbers on the bottom at the beginning and at the end of walk are also counted. The start and the end positions are different.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains the necessary data set (only spaces used as delimiters). First, the start position is given, and then the end position. Each position is composed from the character (from ‘a’ to ‘h’ inclusively, it defines the number of the column on the chessboard) and the digit (from ‘1’ to ‘8’ inclusively, it defines the number of the row). That positions are followed by 6 numbers which are currently written on the near, far, top, right, bottom and left sides of the cube correspondingly.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the output must contain the minimal sum followed by the optimal route (one of possible routes with minimal sum). The route must be represented by the sequence of cube’s positions during the walk. It begins with the start square and ends with the finish square. All square positions on the chessboard should be given in the same format as in input. Use spaces as delimiters.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">e2 e3 0 8 1 2 1 1
</PRE></TD><TD><PRE CLASS="intable">5 e2 d2 d1 e1 e2 e3
</PRE></TD></TR></TABLE>
______________________________________________________
1017||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One curious child has a set of <i>N</i> little bricks (5 &le; <i>N</i> &le; 500). From these bricks he builds different staircases. Staircase consists of steps of different sizes in a strictly descending order. It is not allowed for staircase to have steps equal sizes. Every staircase consists of at least two steps and each step contains at least one brick. Picture gives examples of staircase for <i>N</i>=11 and <i>N</i>=5:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that reads the number <i>N</i> and writes the only number <i>Q</i> — amount of different staircases that can be built from exactly <i>N</i> bricks.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Number <i>N</i></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Number <i>Q</i></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">212
</PRE></TD><TD><PRE CLASS="intable">995645335
</PRE></TD></TR></TABLE>
______________________________________________________
1018||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's imagine how apple tree looks in binary computer world. You're right, it looks just like a binary tree, i.e. any biparous branch splits up to exactly two new branches. We will enumerate by integers the root of binary apple tree, points of branching and the ends of twigs. This way we may distinguish different branches by their ending points. We will assume that root of tree always is numbered by 1 and all numbers used for enumerating are numbered in range from 1 to <i>N</i>, where <i>N</i> is the total number of all enumerated points. For instance in the picture below <i>N</i> is equal to 5. Here is an example of an enumerated tree with four branches:</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">2   5
 \ / 
  3   4
   \ /
    1
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you may know it's not convenient to pick an apples from a tree when there are too much of branches. That's why some of them should be removed from a tree. But you are interested in removing branches in the way of minimal loss of apples.
So your are given amounts of apples on a branches and amount of branches that should be preserved. Your task is to determine how many apples can remain on a tree after removing of excessive branches.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line of input contains two numbers: <i>N</i> and <i>Q</i> (<nobr>2 &le; <i>N</i> &le; 100;</nobr> <nobr>1 &le; <i>Q</i> &le; <i>N</i> &minus; 1</nobr>). <i>N</i> denotes the number of enumerated points in a tree. <i>Q</i> denotes amount of branches that should be preserved. Next <i>N</i>&nbsp;&minus;&nbsp;1 lines contains descriptions of branches. Each description consists of a three integer numbers divided by spaces. The first two of them define branch by it's ending points. The third number defines the number of apples on this branch. You may assume that no branch contains more than 30000 apples.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain the only number&nbsp;&mdash; amount of apples that can be preserved. And don't forget to preserve tree's root ;-)</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 2
1 3 1
1 4 10
2 3 20
3 5 20
</PRE></TD><TD><PRE CLASS="intable">21
</PRE></TD></TR></TABLE>
______________________________________________________
1019||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The segment of numerical axis from 0 to 10<sup>9</sup> is painted into white color. After that some parts of this segment are painted into black, then some into white again and so on. In total there have been made <i>N</i> re-paintings (1 &le; <i>N</i> &le; 5000). You are to write a program that finds the longest white open interval after this sequence of re-paintings.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the only number <i>N</i>. Next <i>N</i> lines contain information about re-paintings. Each of these lines has a form:<BR>
<B><i>a<sub>i</sub></i>  <i>b<sub>i</sub></i>  <i>c<sub>i</sub></i></B><BR>
where <i>a<sub>i</sub></i> and <i>b<sub>i</sub></i> are integers, <i>c<sub>i</sub></i> is symbol 'b' or 'w', <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>, <i>c<sub>i</sub></i> are separated by spaces. <BR>
This triple of parameters represents repainting of segment from <i>a<sub>i</sub></i> to <i>b<sub>i</sub></i> into color <i>c<sub>i</sub></i> ('w' — white, 'b' — black). You may assume that 0 &lt; <i>a<sub>i</sub></i> &lt; <i>b<sub>i</sub></i> &lt; 10<sup>9</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain two numbers <i>x</i> and <i>y</i> (<i>x</i> &lt; <i>y</i>) divided by space(s). These numbers should define the longest white open interval. If there are more than one such an interval output should contain the one with the smallest <i>x</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 999999997 b
40 300 w
300 634 w
43 47 b
</PRE></TD><TD><PRE CLASS="intable">47 634
</PRE></TD></TR></TABLE>
______________________________________________________
1020||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Plotters have barbarously hammered <i>N</i> nails into an innocent plane shape, so that one can see now only heads. Moreover, pursuing their mean object, they have hammered all the nails into the vertices of a convex polygon. After that they…it is awful… have roped off the nails, so that the shape felt upset (the rope was very thin). They’ve done it as it is shown in the figure.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find out a length of the rope.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There two numbers in the first line of the standard input: <i>N</i> — a number of nails (1 &le; <i>N</i> &le; 100), and a real number <i>R</i> — a radius of heads of nails. All the heads have the same radius. Further there are <i>N</i> lines, each of them contains a pair of real coordinates (separated by a space) of centers of nails. An absolute value of the coordinates doesn’t exceed 100. The nails are described either in a clockwise or in a counterclockwise order starting from an arbitrary nail. Heads of different nails don’t adjoin.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a real number with two digits precision (after a decimal point) — a length of the rope.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 1
0.0 0.0
2.0 0.0
2.0 2.0
0.0 2.0

</PRE></TD><TD><PRE CLASS="intable">14.28
</PRE></TD></TR></TABLE>
______________________________________________________
1021||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>— The Brother of mine, the Head of Monastic Order wants to know tomorrow about the results long-term researches. He wants to see neither more nor less than the Summering Machine! Even moreover, he wants our Machine — only a machine — to demonstrate its comprehension of the Sacrament of the Sum as deeply as it is possible. He wants our Machine to find two numbers that give the sum equal to the Sacred Number 10 000.<br>
— Tsh-sh-sh! This is madness that borders on blasphemy! How can the Machine calculate the Sacred Number? Twenty seven years we work on it, but we’ve could teach it to tell if the sum of two introduced numbers greater or lower than 10 000. Can an ordinary mortal find two numbers that there sum will be equal to 10 000?<br>
— But we’ll have to do it with the help of our Machine, even if it is not capable. Otherwise we’ll have… let’s say, big problems, if it is possible to call boiling oil like this. However, I have an idea. Do you remember, last week we’ve entered two numbers -7 and 13 into the Machine, and it answered that their sum is lower than 10 000. I don’t know how to check this, but nothing’s left for us than to believe to the fruit of our work. Let’s enter now a greater number than -7 and start up the Machine again. We’ll do like this again and again until we find a number that being added to 13 will give us 10 000. The only thing we are to do is to prepare an ascending list of numbers.<br>
— I don’t believe in this… Let’s start with the sum that is obviously greater than the Sacred Number and we’ll decrease one of the summand. So we have more chances to avoid boilin… big problems.</I>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Haven’t come to an agreement, the Brothers went away to their cells. By next day everyone of them has prepared a list of numbers that, to his opinion, could save them… Can both of the lists save them together?</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should decide, if it is possible to choose from two lists of integers such two numbers that their sum would be equal to 10 000.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given both of these lists one by one. Format of each of these lists is as follows: in the first line of the list  the quantity of numbers <i>N<sub>i</sub></i> of the <i>i</i>-th list is written. Further there is an <i>i</i>-th list of numbers each number in its line (<i>N<sub>i</sub></i> lines).The following conditions are satisfied: 1 &le; <i>N<sub>i</sub></i> &le; 50 000, each element of the lists lays in the range from -32768 to 32767. The first list is ascending and the second one is descending. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write "YES" to the standard output if it is possible to choose from the two lists of integers such two numbers that their sum would be equal to 10 000. Otherwise you should write "NO".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
-175
19
19
10424
3
8951
-424
-788</PRE></TD><TD><PRE CLASS="intable">YES</PRE></TD></TR></TABLE>
______________________________________________________
1022||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The system of Martians’ blood relations is confusing enough. Actually, Martians bud when they want and where they want. They gather together in different groups, so that a Martian can have one parent as well as ten. Nobody will be surprised by a hundred of children. Martians have got used to this and their style of life seems to them natural.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And in the Planetary Council the confusing genealogical system leads to some embarrassment. There meet the worthiest of Martians, and therefore in order to offend nobody in all of the discussions it is used first to give the floor to the old Martians, than to the younger ones and only than to the most young childless assessors. However, the maintenance of this order really is not a trivial task. Not always Martian knows all of his parents (and there’s nothing to tell about his grandparents!). But if by a mistake first speak a grandson and only than his young appearing great-grandfather, this is a real scandal.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which would define once and for all, an order that would guarantee that every member of the Council takes the floor earlier than each of his descendants.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the standard input contains an only number <i>N</i>, 1 &le; <i>N</i> &le; 100 — a number of members of the Martian Planetary Council. According to the centuries-old tradition members of the Council are enumerated with integers from 1 up to <i>N</i>. Further, there are exactly <i>N</i> lines, moreover, the <i>i</i>-th line contains a list of <i>i</i>-th member’s children. The list of children is a sequence of serial numbers of children in a arbitrary order separated by spaces. The list of children may be empty. The list (even if it is empty) ends with 0.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The standard output should contain in its only line a sequence of speakers’ numbers, separated by spaces. If several sequences satisfy the conditions of the problem, you are to write to the standard output any of them. At least one such sequence always exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
0
4 5 1 0
1 0
5 3 0
3 0
</PRE></TD><TD><PRE CLASS="intable">2 4 5 3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1023||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you surely already know, Yekaterinburg has gotten its right to hold The Summer Olympic Games of the 2032. It is planned that it will be allowed to Russia as a country-organizer to emend a program of the games a bit. So, in order to improve the command result it has been decided to replace the competition in gymnastics by the competition in the new game "Buttons".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rules of the game are very simple. There’s a small heap of K buttons before two players. The players in turns take buttons from the heap, moreover, at a time one can take a number of buttons from 1 up to <i>L</i>. The one who takes the last button is the winner.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rules of the Olympic Games will be a bit harder then usual. The one, who is to make a first step according to a lot, has an opportunity to fix a number <i>K</i> with the following restriction to it: 3 &le; <i>K</i> &le; 10<sup>8</sup> (that is the exact number of buttons that has been prepared for the Olympic tournament). The player who is to make the second step fixes a number <i>L</i> that satisfies the following conditions <nobr>2 &le; <i>L</i> &lt; <i>K</i></nobr>.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A very crucial task is given to your team: you are to write a program that should help the second player to make his choice. In other words, given a number <i>K</i> your program is to find a number <i>L</i> that guaranties a victory to the second player with a proper game of both sides.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, for instance, there are only three buttons in the heap, the choice <i>L</i> = 2 provides for the victory of the second player. Really, if the first player takes only one button at his turn, the second one wins, taking the two last buttons. On the contrary, if the first one takes two buttons, the second one wins, taking the last button.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The standard input consists of one line, which contains an only integer number <i>K</i> — a number of buttons in the heap, that has fixed the first player at his turn.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To the standard output you are to write the only number <i>L</i> — the maximal number of buttons that can be taken at a time which provides for the victory of the second player. If there are several those numbers <i>L</i>, you should write the least. If there are no such numbers, you are to write 0 to the standard output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1024||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We remind that the permutation of some final set is a one-to-one mapping of the set onto itself. Less formally, that is a way to reorder elements of the set. For example, one can define a permutation of the set {1,2,3,4,5} as follows:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This record defines a permutation P as follows: P(1) = 4, P(2) = 1, P(3) = 5, etc.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">What is the value of the expression P(P(1))? It’s clear, that P(P(1)) = P(4) = 2. And P(P(3)) = P(5) = 3. One can easily see that if P(<i>n</i>) is a permutation then P(P(<i>n</i>)) is a permutation as well. In our example (check it by yourself)</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is natural to denote this permutation by P<sup>2</sup>(<i>n</i>) = P(P(<i>n</i>)). In a general form the definition is as follows: P(<i>n</i>) = P<sup>1</sup>(<i>n</i>), P<sup><i>k</i></sup>(<i>n</i>) = P(P<sup><i>k</i>-1</sup>(<i>n</i>)).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Among the permutations there is a very important one — that moves nothing:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is clear that for every <i>k</i> the following relation is satisfied: (E<sub>N</sub>)<sup><i>k</i></sup> = E<sub>N</sub>. The following less trivial statement is correct (we won’t prove it here, you may prove it yourself incidentally):</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Let P(<i>n</i>) be some permutation of an N elements set. Then there exists a positive integer <i>k</i>, that P<sup><i>k</i></sup> = E<sub>N</sub>.</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The least positive integer <i>k</i> such that P<sup><i>k</i></sup> = E<sub>N</sub> is called an order of the permutation P.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The problem that your program should solve is formulated now in a very simple manner: <I>“Given a permutation find its order.”</I></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the only integer <i>N</i> (1 &le; <i>N</i> &le; 1000), that is a number of elements in the set that is rearranged by this permutation. In the second line there are <i>N</i> integers of the range from 1 up to <i>N</i>, separated by a space, that define a permutation — the numbers P(1), P(2),…, P(<i>N</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write the order of the permutation. You may consider that an answer shouldn’t exceed 10<sup>9</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
4 1 5 2 3
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1025||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In one of the countries of Caribbean basin all decisions were accepted by the simple majority of votes at the general meeting of citizens (fortunately, there were no lots of them). One of the local parties, aspiring to come to power as lawfully as possible, got its way in putting into effect some reform of the election system. The main argument was that the population of the island recently had increased and it was to longer easy to hold general meetings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The essence of the reform is as follows. From the moment of its coming into effect all the citizens were divided into K (may be not equal) groups. Votes on every question were to be held then in each group, moreover, the group was said to vote “for” if more than half of the group had voted “for”, otherwise it was said to vote “against”. After the voting in each group a number of group that had voted “for” and “against” was calculated. The answer to the question was positive if the number of groups that had voted “for” was greater than the half of the general number of groups.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At first the inhabitants of the island accepted this system with pleasure. But when the first delights dispersed, some negative properties became obvious. It appeared that supporters of the party, that had introduced this system, could influence upon formation of groups of voters. Due to this they had an opportunity to put into effect some decisions without a majority of voters “for” it.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s consider three groups of voters, containing 5, 5 and 7 persons, respectively. Then it is enough for the party to have only three supporters in each of the first two groups. So it would be able to put into effect a decision with the help of only six votes “for” instead of nine, that would be necessary in the case of general votes.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program, which would determine according to the given partition of the electors the minimal number of supporters of the party, sufficient for putting into effect of any decision, with some distribution of those supporters among the groups.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line an only odd integer <i>K</i> — a quantity of groups — is written (1 &le; <i>K</i> &le; 101). In the second line there are written <i>K</i> odd integers, separated with a space. Those numbers define a number of voters in each group. The population of the island does not exceeds 9999 persons.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write a minimal quantity of supporters of the party, that can put into effect any decision.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
5 7 5
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1026||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The database of the Pentagon contains a top-secret information. We don’t know what the information is — you know, it’s top-secret, — but we know the format of its representation. It is extremely simple. We don’t know why, but all the data is coded by integers from 1 up to 5000. The size of the main base (we’ll denote it be <i>N</i>) is rather big — it may contain up to 100 000 those numbers. The database is to process quickly every query. The most often query is: "Which element is <i>i</i>-th by its value?"— with <i>i</i> being an integer in a range from 1 to <i>N</i>.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to play a role of a controller of the database. In the other words, it should be able to process quickly queries like this.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input of the problem consists of two parts. At first, a database is written, and then there’s a sequence of queries. The format of database is very simple: in the first line there’s a number <i>N</i>, in the next <i>N</i> lines there are numbers of the database one in each line in an arbitrary order. A sequence of queries is written simply as well: in the first line of the sequence a number of queries <i>K</i> (1 &le; <i>K</i> &le; 100) is written, and in the next <i>K</i> lines there are queries one in each line. The query "Which element is <i>i</i>-th by its value?" is coded by the number <i>i</i>. A database is separated from a sequence of queries by the string of three symbols "#".</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should consist of <i>K</i> lines. In each line there should be an answer to the corresponding query. The answer to the query "i" is an element from the database, which is <i>i</i>-th by its value (in the order from the least up to the greatest element).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
7
121
123
7
121
###
4
3
3
2
5
</PRE></TD><TD><PRE CLASS="intable">121
121
7
123
</PRE></TD></TR></TABLE>
______________________________________________________
1027||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The language D++, that was perfected by the participants of our March competition, continues improving. Its founders try to make the syntax as clear as it is possible in order to make the programming simpler in the future. Of course, some minimal set of rules is to stay without changes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to check the observance of rules, concerning the arrangement of brackets and comments.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A text of a correct D++ program contains a symbol part, arithmetic expressions and comments. Comments may appear everywhere and may contain any symbols. A comment is always opened by a pair of symbols "(*" and is closed by a pair of symbols "*)". Each comment must be closed. An arithmetic expression in D++ is always opened by "(", is closed by ")" and may contain only symbols "=+-*/0123456789)(" and "end of line" symbols. An arithmetic expression can't start with a pair of symbols "(*". You may run across embedded brackets in an arithmetic expression. In this case these brackets are to be balanced. It means that "((1)))" as well as "(23))((+)" are not correct arithmetic expressions. An arithmetic expression is correct if and only if brackets placed correctly. At last, all the rest of the program text (the result of rejection of all comments and arithmetic expressions from the initial text of the program) may contain every symbol excluding "(" and ")".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We would like to especially notice that the spaces are possible anywhere in a text of a program except when appearing in arithmetic expressions.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some text is written in the standard input. There are not more than 10000 symbols in the text. There may be Latin letters, digits, brackets, symbols of arithmetic operations, spaces and "end of line" symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should write "YES" to the output if the introduced text is a correct D++ program, and "NO" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">Hello, here is a sample D++ program. It contains some arithmetical expressions like
(2+2=4), (2+-/*) and ((3+3)*3=20(*this is not true, but you don’t have to verify it :-) *)+8)
 (* the closing bracket in the previous comment is also in order, since this bracket
does not belong to any arithmetical expression*)
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1028||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Astronomers often examine star maps where stars are represented by points on a plane and each star has Cartesian coordinates. Let the level of a star be an amount of the stars that are not higher and not to the right of the given star. Astronomers want to know the distribution of the levels of the stars.
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, look at the map shown on the figure above. Level of the star number 5 is equal to 3 (it's formed by three stars with a numbers 1, 2 and 4). And the levels of the stars numbered by 2 and 4 are 1. At this map there are only one star of the level 0, two stars of the level 1, one star of the level 2, and one star of the level 3.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that will count the amounts of the stars of each level on a given map.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains a number of stars <i>N</i> (1 &le; <i>N</i> &le; 15000). The following <i>N</i> lines describe coordinates of stars (two integers <i>X</i> and <i>Y</i> per line separated by a space, 0 &le; <i>X</i>,<i>Y</i> &le; 32000). There can be only one star at one point of the plane. Stars are listed in ascending order of <i>Y</i> coordinate. Stars with equal <i>Y</i> coordinates are listed in ascending order of <i>X</i> coordinate.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain <i>N</i> lines, one number per line. The first line contains amount of stars of the level 0, the second does amount of stars of the level 1 and so on, the last line contains amount of stars of the level <i>N</i>&minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1 1
5 1
7 1
3 3
5 5
</PRE></TD><TD><PRE CLASS="intable">1
2
1
1
0
</PRE></TD></TR></TABLE>
______________________________________________________
1029||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. F. wants to get a document be signed by a minister. A minister signs a document only if it is approved by his ministry. The ministry is an <i>M</i>-floor building with floors numbered from 1 to <i>M</i>, 1 &le; <i>M</i> &le; 100. Each floor has <i>N</i> rooms (1 &le; <i>N</i> &le; 500) also numbered from 1 to <i>N</i>. In each room there is one (and only one) official.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A document is approved by the ministry only if it is signed by at least one official from the <i>M</i>-th floor. An official signs a document only if at least one of the following conditions is satisfied:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL TYPE="a">
<LI>the official works on the 1st floor;</LI>
<LI>the document is signed by the official working in the room with the same number but situated one floor below;</LI>
<LI>the document is signed by an official working in a neighbouring room (rooms are neighbouring if they are situated on the same floor and their numbers differ by one).</LI>
</OL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each official collects a fee for signing a document. The fee is a non-negative integer not exceeding 10<sup>9</sup>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should find the cheapest way to approve the document.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of an input contains two integers, separated by space. The first integer <i>M</i> represents the number of floors in the building, and the second integer <i>N</i> represents the number of rooms per floor. Each of the next <i>M</i> lines contains <i>N</i> integers separated with spaces that describe fees (the <i>k</i>-th integer at <i>l</i>-th line is the fee required by the official working in the <i>k</i>-th room at the <i>l</i>-th floor).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should print the numbers of
rooms in the order they should be visited to
approve the document in the cheapest way. If there are more
than one way leading to the cheapest cost you may print an any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4
10 10 1 10
2 2 2 10
1 10 10 10
</PRE></TD><TD><PRE CLASS="intable">3 3 2 1 1
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You can assume that for each official there always exists a way to get the approval of a document (from the 1st floor to this official inclusively) paying no more than 10<sup>9</sup>.</DIV></DIV>
______________________________________________________
1030||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is a historical fact that during the legendary voyage of "Titanic" the wireless telegraph machine had delivered 6 warnings about the danger of icebergs. Each of the telegraph messages described the point where an iceberg had been noticed. The first five warnings were transferred to the captain of the ship. The sixth one came late at night and a telegraph operator did not notice that the coordinates mentioned were very close to the current ship's position. </DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program that will warn the operator about the danger of icebergs! </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input messages are of the following format: 
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">Message #&lt;n&gt;.
Received at &lt;HH&gt;:&lt;MM&gt;:&lt;SS&gt;. 
Current ship's coordinates are 
&lt;X1&gt;^&lt;X2&gt;'&lt;X3&gt;" &lt;NL/SL&gt; 
and &lt;Y1&gt;^&lt;Y2&gt;'&lt;Y3&gt;" &lt;EL/WL&gt;.
An iceberg was noticed at 
&lt;A1&gt;^&lt;A2&gt;'&lt;A3&gt;" &lt;NL/SL&gt; 
and &lt;B1&gt;^&lt;B2&gt;'&lt;B3&gt;" &lt;EL/WL&gt;. 
=== 
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here &lt;n> is a positive integer, &lt;HH>:&lt;MM>:&lt;SS> is the
time of the message reception,
&lt;X1>^&lt;X2>'&lt;X3>" &lt;NL/SL> and &lt;Y1>^&lt;Y2>'&lt;Y3>" &lt;EL/WL> means
<b>"X1 degrees X2 minutes X3 seconds of North (South) latitude and
Y1 degrees Y2 minutes Y3 seconds of East (West) longitude."</b></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print to the output message in the following format:
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">The distance to the iceberg: &lt;s&gt; miles. 
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Where &lt;s> should be the distance between the ship and the iceberg, (that is the length of the shortest path on the sphere between the ship and the iceberg). This distance should be printed up to (and correct to) two decimal digits. If this distance is less than (but not equal to!) 100 miles the program should print one more line with the text:
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">DANGER!
</PRE></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Message #513.
Received at 22:30:11. 
Current ship’s coordinates are 
41^46'00" NL 
and 50^14'00" WL.
An iceberg was noticed at
41^14'11" NL 
and 51^09'00" WL.
=== 
</PRE></TD><TD><PRE CLASS="intable">The distance to the iceberg: 52.04 miles. 
DANGER!
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For simplicity of calculations assume that the Earth is an ideal sphere with the diameter of 6875 miles completely covered with water. Also you can be sure that lines 
break exactly as it is shown in the input samples. The ranges of the ship and the iceberg coordinates are the same as the usual range for geographical coordinates, i.e. from 0 to 90 degrees inclusively for NL/SL and from 0 to 180 degrees inclusively for EL/WL.</DIV></DIV>
______________________________________________________
1031||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The railway line “Yekaterinburg-Sverdlovsk” with several stations has been built. This railway line can be represented as a line segment, railway stations being points on it. The railway line starts at the station “Yekaterinburg” and finishes at the station “Sverdlovsk”, so stations are numbered starting from “Yekaterinburg” (it has number 1) and “Sverdlovsk” is the last station.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Cost of the ticket between any two stations depends only on a distance between them. The prices for the tickets are specified in the following table.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE BORDER=1 CELLSPACING=0 CELLPADDING=3 WIDTH=473 ALIGN="CENTER">
<COL ALIGN="CENTER" WIDTH="50%">
<COL ALIGN="CENTER" WIDTH="50%">
<TR>
<TD>distance <I>X</I> between stations</TD>
<TD>price for the ticket</TD>
</TR>
<TR>
<TD>0 &lt; <I>X</I> &le; <I>L</I><SUB>1</SUB></TD>
<TD><I>C</I><SUB>1</SUB></TD>
</TR>
<TR>
<TD><I>L</I><SUB>1</SUB> &lt; <I>X</I> &le; <I>L</I><SUB>2</SUB></TD>
<TD><I>C</I><SUB>2</SUB></TD>
</TR>
<TR>
<TD><I>L</I><SUB>2</SUB> &lt; <I>X</I> &le; <I>L</I><SUB>3</SUB></TD>
<TD><I>C</I><SUB>3</SUB></TD>
</TR>
</TABLE></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Direct tickets from one station to another can be booked if and only if the distance between these station does not exceed <i>L</i><SUB>3</SUB>. So sometimes it is necessary to book several tickets to pay for the parts of the whole way between stations.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, on the railway line shown at the figure above there are seven stations. The direct ticket from the second station to the sixth one can not be booked. There are several ways to pay for the travel between these stations. One of them is to book two tickets: one ticket at price <I>C</I><SUB>2</SUB> to travel between the second and the third stations, and other at price <I>C</I><SUB>3</SUB> to travel between the third and the sixth stations. Note, that though the distance between the second and the sixth stations is equal to 2<I>L</I><SUB>2</SUB>, the whole travel can not be paid by booking two tickets at price <I>C</I><SUB>2</SUB>, because each ticket is valid for only one travel and each travel should start and end only at stations.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, that will find the minimal cost of the travel between two given stations.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains 6 integers <I>L</I><SUB>1</SUB>, <I>L</I><SUB>2</SUB>, <I>L</I><SUB>3</SUB>, <I>C</I><SUB>1</SUB>, <I>C</I><SUB>2</SUB>, <I>C</I><SUB>3</SUB> (1 &le; <I>L</I><SUB>1</SUB> &lt; <I>L</I><SUB>2</SUB> &lt; <I>L</I><SUB>3</SUB> &le; 10<sup>9</sup>, 
1 &le; <I>C</I><SUB>1</SUB> &lt; <I>C</I><SUB>2</SUB> &lt; <I>C</I><SUB>3</SUB>  &le; 10<sup>9</sup>) in the specified order with one space between. The second line contains the amount of stations <I>N</I> (2 &le; <I>N</I> &le; 10000). The third line contains two different integers separated by space. They represent serial numbers of stations, the travel between which must be paid. Next <I>N</I>&minus;1 lines contain distances from the first station (“Yekaterinburg”) on the railway line to others. These distances are given as different positive integers and are arranged in the ascending order. The distance from “Yekaterinburg” to “Sverdlovsk” does not exceed 10<sup>9</sup>. The distance between any neighboring stations does not exceed <I>L</I><SUB>3</SUB>. The minimal travel cost between two given stations will not exceed 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Program should print to the output the only number, which is the minimal travel cost between two given stations.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 6 8 20 30 40
7
2 6
3
7
8
13
15
23
</PRE></TD><TD><PRE CLASS="intable">70
</PRE></TD></TR></TABLE>
______________________________________________________
1032||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains <i>N</i> positive integers (<i>N</i> &le; 10000). Each of that numbers is not greater than 15000. This numbers are not necessarily different (so it may happen that two or more of them will be equal). Your task is to choose a few of given numbers (1 &le; few &le; <i>N</i>) so that the sum of chosen numbers is multiple for <i>N</i> (i.e. <i>N</i> * <i>k</i> = (sum of chosen numbers) for some integer <i>k</i>).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the single number <i>N</i>. Each of next <i>N</i> lines contains one number from the given set. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In case your program decides that the target set of numbers can not be found it should print to the output the single number 0. Otherwise it should print the number of the chosen numbers in the first line followed by the chosen numbers themselves (on a separate line each) in arbitrary order.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are more than one set of numbers with required properties you should print to the output only one (preferably your favorite) of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1
2
3
4
1
</PRE></TD><TD><PRE CLASS="intable">2
2
3
</PRE></TD></TR></TABLE>
______________________________________________________
1033||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Administration of the labyrinth has decided to start a new season with new wallpapers. For this purpose they need a program to calculate the square of the walls inside the labyrinth. This job is just for you!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The labyrinth is represented by a matrix <i>N</i>&times;<i>N</i> (3 &le; <i>N</i> &le; 33, you see, ‘3’ is a magic digit!). Some matrix cells contain a dot character (‘.’) that denotes an empty square. Other cells contain a diesis character (‘#’) that denotes a square filled by monolith block of stone wall. All squares are of the same size 3&times;3 meters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The walls are constructed around the labyrinth (except for the upper left and lower right corners, which are used as entrances) and on the cells with a diesis character. No other walls are constructed. There always will be a dot character at the upper left and lower right corner cells of the input matrix.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to calculate the square of visible part of the walls inside the labyrinth. In other words, the square of the walls' surface visible to a visitor of the labyrinth. Note that there's no holes to look or to move through between any two adjacent blocks of the wall. The blocks are considered to be adjacent if they touch each other in any corner. See picture for an example: visible walls inside the labyrinth are drawn with bold lines. The height of all the walls is 3 meters.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the single number <i>N</i>. The next <i>N</i> lines contain <i>N</i> characters each. Each line describes one row of the labyrinth matrix. In each line only dot and diesis characters will be used and each line will be finished with a new line character. There will be no spaces in the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print to the output a single integer — the exact value of the square of the wallpaper needed.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
.....
...##
..#..
..###
.....
</PRE></TD><TD><PRE CLASS="intable">198

</PRE></TD></TR></TABLE>
______________________________________________________
1034||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On a chessboard of size <i>N</i>&times;<i>N</i> (<i>N</i> &le; 50) <i>N</i> queens are placed. We'll say that queens are in peaceful position if none of them can attack another. You are to find the total amount of peaceful positions that can be obtained from the given peaceful position by rearranging of exactly three queens.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input will contain an integer number <i>N</i> that represents the size of a chessboard (and the number of queens also). It will be followed by <i>N</i> lines describing positions of queens. Each line will contain two integers <i>X</i> and <i>Y</i> separated by a space. These numbers represent horizontal and vertical coordinates and lay in a range from 1 to <i>N</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output consists of a single integer representing the number of peaceful positions that can be achieved from initial position by moving of exactly three queens. Note: queens are not numbered so if you rearrange them on the chessboard using only squares they already occupied you’ll always get the same peaceful position, not the new one.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
2 1
1 3
3 4
4 2
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1035||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Archaeologists have found a cloth decorated with needlework. This needlework is a cross-stitch made with several threads. The following rules have been observed:
<OL>
<LI>The cloth has a grid with square cells.</LI>
<LI>Each stitch covers a diagonal of one cell of the grid. Stitches can lie on both sides of the cloth, but each of them lies only at one side of the cloth (the thread can start, finish and cross the cloth only at the grid vertices).</LI>
<LI>At most one stitch can lie on each diagonal of each cell at each side of the cloth.</LI>
<LI>Each thread makes up several stitches arranged alternately at different sides of the cloth. (It means that two consecutive stitches formed by one thread lay at the different sides of the cloth and are connected in the grid vertex)</LI>
<LI>A needle can go through the cloth only in the vertexes of the grid.</LI>
</OL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the figure you can see an example of a pattern made with six stitches. The grid has size 4*5. The face of the cloth is drawn on the upper half of the figure. The stitches lying on the face are drawn with solid lines. The rear stitches uncovered with those of the face are drawn with dot-lines. On the lower half of the figure the cloth is oriented as on the upper half. All the rear stitches are drawn with solid lines there. The face stitches, which do not cover rear stitches, are drawn with dot-lines. It can be seen that there are the stitches at both sides of one of the cell diagonals. This cross-stitch cannot be made with less than four threads.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Archaeologists want to know if the pattern was made with the least number of threads. You have to write a program, which will determine the minimal number of threads needed to make the given pattern.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers <I>N</I> and <I>M</I> separated by a space. They are vertical (<I>N</I>) and horizontal (<I>M</I>) sizes of the grid, i.e. amounts of the cells in a vertical and horizontal rows respectively (1 &le; <I>N</I>,<I>M</I> &le; 200). Each of the following 2<I>N</I> lines contains <I>M</I> symbols. Each symbol describes one square of the grid. The first <I>N</I> lines correspond to the face of the cloth and the last <I>N</I> lines correspond to the rear of the cloth. The symbols used are “.”, “/”, “\” and “X” (a dot means an empty square).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For more information see the sample. It corresponds to the cloth drawn at the figure.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain one integer — the minimal number of threads needed to make the described pattern.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 5
.....
.\...
..\..
.....
.....
....\
.\X..
.....
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE>
______________________________________________________
1036||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a number 1 &le; <i>N</i> &le; 50. Every ticket has its 2<i>N</i>-digit number. We call a ticket lucky, if the sum of its first <i>N</i> digits is equal to the sum of its last <i>N</i> digits. You are also given the sum of ALL digits in the number.
Your task is to count an amount of lucky numbers, having the specified sum of ALL digits.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two space-separated numbers: <i>N</i> and <i>S</i>. Here <i>S</i> is the sum of all digits. Assume that 0 &le; <i>S</i> &le; 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The amount of lucky tickets.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The tickets are 0101, 0110, 1001, 1010 in the example above</DIV></DIV>
______________________________________________________
1037||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Don't you know that at school pupils’ programming contest a new computer language has been developed. We call it D++. Generally speaking it doesn't matter if you know about it or not. But to run programs written in D++ we need a new operating system. It should be rather powerful and complex. It should work fast and have a lot of possibilities. But all this should be done in a future.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And now you are to… No. You should not devise the name for the operating system. You are to write the first module for this new OS. And of course it's the memory management module. Let's discuss how it is expected to work.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Our operating system is to allocate memory in pieces that we’ll call “blocks”. The blocks are to be numbered by integers from 1 up to <i>N</i>. When operating system needs more memory it makes a request to the memory management module. To process this request the memory management module should find free memory block with the least number. You may assume that there are enough blocks to process all requests.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now we should define the meaning of words “free block”. At the moment of first request to the memory management module all blocks are considered to be free. Also a block becomes free when there were no requests to it during <i>T</i> minutes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may wonder about a notion “request to allocated blocks”. What does it mean, “request to allocated block”? The answer is simple: at any time the memory management module may be requested to access a given block. To process this request the memory management module should check if the requested block is really allocated. If it is, the request is considered to be successful and the block remains allocated for <i>T</i> minutes more. Otherwise the request is failed.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">That's all about the algorithms of the memory management block. You are to implement them for <i>N</i> = 30 000 and <i>T</i> = 10 minutes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of input contains a request for memory block allocation or memory block access. Memory allocation request has a form:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><code>&lt;Time&gt; +</code></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where &lt;Time&gt; is a nonnegative integer number not greater than 65 000. Time is given in seconds. Memory block access request has a form:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><code>&lt;Time&gt; . &lt;BlockNo&gt;</code></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where &lt;Time&gt;  meets conditions mentioned above for the memory allocation request and &lt;BlockNo&gt;  is an integer value in range from 1 to <i>N</i>. There will be no more than 80000 requests.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each line of input you should print exactly one line with a result of request processing. For memory allocation request you are to write an only integer — a number of allocated block. As it was mentioned above you may assume that every request can be satisfied, there will be no more than <i>N</i> simultaneously allocated blocks. For memory block access request you should print the only character:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><UL>
<LI>'+' if request is successful (i.e. block is really allocated);</LI>
<LI>'-' if request fails (i.e. block with number given is free, so it can't be accessed).</LI>
</UL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Requests are arranged by their times in an increasing order. Requests with equal times should be processed as they appear in input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 +
1 +
1 +
2 . 2
2 . 3
3 . 30000
601 . 1
601 . 2
602 . 3
602 +
602 +
1202 . 2
</PRE></TD><TD><PRE CLASS="intable">1
2
3
+
+
-
-
+
-
1
3
-
</PRE></TD></TR></TABLE>
______________________________________________________
1038||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The boss of a firm that you are employed with is dissatisfied with the text processor Word. He wants you to write a better text processor by tomorrow. The interface of the new processor should be clearer, there should be more options, and the resulting text should be more beautiful. You told the boss that this work would take not less than four days. Then your boss asked you to begin with a spell checking program. This program should check capital and small letters. It should detect a mistake in each of the following cases.

<OL>
<LI>The first letter in a sentence is small.
<LI>A capital letter is not the first letter in a word.
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A word is a sequence of letters not containing any other symbols or ends of line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The end of a sentence is defined a full stop, a question-mark or an exclamation mark.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains a text that consists of capital and small letters of the Latin alphabet (A–Z, a–z), digits (0–9), punctuation marks (.,;:-!?) and space characters. The text length is not more than 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain a number of mistakes in the input text.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">This sentence iz correkt! -It Has,No mista;.Kes et oll.
But there are two BIG mistakes in this one!
and here is one more.
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1039||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The president of the Ural State University is going to make an 80'th Anniversary party. The university has a hierarchical structure of employees; that is, the supervisor relation forms a tree rooted at the president. Employees are numbered by integer numbers in a range from 1 to <i>N</i>, The personnel office has ranked each employee with a conviviality rating. In order to make the party fun for all attendees, the president does not want both an employee and his or her immediate supervisor to attend.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to make up a guest list with the maximal conviviality rating of the guests.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains a number <i>N</i>. 1 &le; <i>N</i> &le; 6000.
Each of the subsequent <i>N</i> lines contains the conviviality rating of the corresponding employee.
Conviviality rating is an integer number in a range from –128 to 127. After that the supervisor relation tree goes.
Each line of the tree specification has the form</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;L&gt; &lt;K&gt;
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">which means that the <i>K</i>-th employee is an  immediate supervisor  of <i>L</i>-th employee.
Input is ended with the line
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">0 0
</PRE></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the maximal total rating
of the guests.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
1
1
1
1
1
1
1
1 3
2 3
6 4
7 4
4 5
3 5
0 0
</PRE></TD><TD><PRE CLASS="intable">5</PRE></TD></TR></TABLE>
______________________________________________________
1040||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An airline company is a sponsor of the 80-th Anniversary celebration at the Ural State University. In return for it the company wants the University to help it. The company serves <i>N</i> airports and carries out flights between some of them. In order to simplify the work the flights are numbered with integers from 1 up to <i>M</i>. If there is a flight between two airports a plane flies in the both directions with the same flight number. There may be only one flight between any two airports. <b>One can fly between any pair of airports served by company using only its flights.</b></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The airline company understands that its planes may attract terrorists. In order to create difficulties for terrorists the company wants to number the flights in some special manner. If there are several flights that depart from one airport then the greatest common divisor of their flight numbers should be equal to 1. The company turns to you for help (remember, this is a sponsor; you are to work properly).</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write a program that finds a required numbering or informs that it is impossible to satisfy the requirements. If several numberings are possible, it is sufficient to find any one of them.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains numbers <i>N</i> and <i>M</i> separated with a space (2 &le; <i>N</i> &le; 50). The next <i>M</i> lines contain information on flights. Each flight is determined by the numbers of the airports that it connects. The numbers of the airports are separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of an output should contain YES, if it is possible to find a required numbering, and NO otherwise. If the answer is YES, the second line should contain a possible numbering of flights. The numbers are to be ordered as it is done in the input. Flight numbers are to be separated with a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 6
1 2
2 3
2 4
4 3
5 6
4 5
</PRE></TD><TD><PRE CLASS="intable">YES
4 2 3 1 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1041||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor has decided to present the dean of the Department of Mathematics and Mechanics with a linearly independent vector system (you know, that we’ve just celebrated jubilees of the University and of the Department). A store sells <i>M</i> items of <i>N</i>-dimensional vectors, 3 &le; <i>N</i> &le; <i>M</i> &le; 2000; <i>N</i> &le; 50. For each vector its price <i>c<sub>i</sub></i> is known, 0 &lt; <i>i</i> &le; <i>M</i>. Nikifor wants to buy <i>N</i> linearly independent vectors paying for them minimal sum of money. </DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program that would determine which vectors Nikifor should buy or would inform that it is impossible to satisfy his requirements. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of an input contains numbers <i>M</i> and <i>N</i> separated with a space. The next <i>M</i> lines contain the vectors on sale. All of the coordinates are integers with an absolute value not exceeding 2 000. The numbers are separated from each other with a space. The next <i>M</i> lines contain prices <i>c<sub>i</sub></i>, one number in each line. The prices are positive integers not exceeding 15 000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of an output should contain the minimal amount of money that Nikifor is to pay or the number 0, if Nikifor’s requirements cannot be satisfied in this store. If it is possible to make a purchase, then the next <i>N</i> lines should contain the numbers of the vectors that Nikifor should buy. If several sets of such numbers are possible, then you should write one of them which is minimal according to the lexicographic order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
1 0 0
0 1 0
0 0 1
0 0 2
0 0 3
10
20
30
10
10
</PRE></TD><TD><PRE CLASS="intable">40
1 
2 
4
</PRE></TD></TR></TABLE>
______________________________________________________
1042||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Winter has come, but at the Ural State University heating is not turned on yet. There’s one little problem: the University is heated only if all of the valves are opened. There are some technicians at the University. Each of them is responsible for one or more valves. There may be several technicians responsible for the same valve. When a technician gets an instruction to turn on the heating he goes round all of his valves and turns them. It means that if a valve was opened then he closes it, and if it was closed then he opens it. It is well known that every technician earns his money not in vain so it’s impossible to replace any technician by any combination of other technicians. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine who of the technicians is to get an instruction “to turn on the heating” in order to heat all the Ural State University. Note that there are <i>N</i> technicians and <i>N</i> valves at the University (1 &le; <i>N</i> &le; 250).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number <i>N</i>. The next <i>N</i> lines contain lists of the valves in charge of each of the technicians. It means that the line number <i>i</i> + 1 contains numbers of the valves that the <i>i</i>-th technician is responsible for. Each list of valves is followed by –1.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An output should contain a list of technicians’ numbers sorted in ascending order. If several lists are possible, you should send to an output the shortest one. If it’s impossible to turn on the heating at the University, you should write “No solution”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 2 -1
2 3 4 -1
2 -1
4 -1
</PRE></TD><TD><PRE CLASS="intable">1 2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1043||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A huge dancing-hall was constructed for the Ural State University’s 80-th anniversary celebration. The size of the hall is 2000&nbsp;&times;&nbsp;2000 metres! The floor was made of square mirror plates with side equal to 1 metre. Then the walls were painted with an indelible paint. Unfortunately, in the end the painter flapped the brush and the beautiful mirror floor was stained with the paint. But not everything is lost yet! The stains can be covered with a carpet.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nobody knows why, but the paint on the floor formed an arc of a circle (a centre of the circle lies inside the hall). The dean of the Department of Mathematics and Mechanics measured the coordinates of the arc's ends and of some other point of the arc (he is sure that this information is quite enough for any student of the Ural State University). The dean wants to cover the arc with a rectangular carpet. The sides of a carpet must go along the sides of the mirror plates (so, the corners of the carpet must have integer coordinates).</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should find the minimal square of such a carpet.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input consists of six integers. The first two lines contain the coordinates of the arc's ends. The coordinates of an inner point of the arc follow them. Absolute values of all coordinates don't exceed 1000. The points don't belong the same straight line. The arc lies inside the square <nobr>[-1000,1000]<sup>2</sup></nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write the minimal square of the carpet covering this arc.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">476 612
487 615
478 616
</PRE></TD><TD><PRE CLASS="intable">66
</PRE></TD></TR></TABLE>
______________________________________________________
1044||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The public transport administration of Ekaterinburg is anxious about the fact that passengers don’t like to pay for passage doing their best to avoid the fee. All the measures that had been taken (hard currency premiums for all of the chiefs, increase in conductors’ salaries, reduction of number of buses) were in vain. An advisor especially invited from the Ural State University says that personally he doesn’t buy tickets because he rarely comes across the lucky ones (a ticket is lucky if the sum of the first three digits in its number equals to the sum of the last three ones). So, the way out is found — of course, tickets must be numbered in sequence, but the number of digits on a ticket may be changed. Say, if there were only two digits, there would have been ten lucky tickets (with numbers 00, 11, …,  99). Maybe under the circumstances the ratio of the lucky tickets to the common ones is greater? And what if we take four digits? A huge work has brought the long-awaited result: in this case there will be 670 lucky tickets. But what to do if there are six or more digits?</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So you are to save public transport of our city. Write a program that determines a number of lucky tickets for the given number of digits. By the way, there can’t be more than nine digits on one ticket. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains a positive even integer not greater than 9.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain a number of tickets such that the sum of the first half of digits is equal to the sum of the second half of digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4</PRE></TD><TD><PRE CLASS="intable">670</PRE></TD></TR></TABLE>
______________________________________________________
1045||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are several airports in one country, and there are flights between some of them. One can fly from any airport to any other, probably with some changes. For any pair of airports there exists only one sequence of flights that connects them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two terrorists play a game. They make moves in turn. Each move consists of the following operations. A player mines an airport, chooses a flight and flies away together with his colleague. After the take-off he actuates a radio-controlled fuse. As a result the airport that the terrorists have just left is destroyed, and all the flights to and from this airport are no longer possible. After the aircraft lands the other player makes his move, and so forth. One loses if one cannot make a move.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given an initial list of flights and the number of an airport where the terrorists are at the start of the game, write a program which would determine who wins if the terrorists play a perfect game (each chooses the best move).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers: <i>n</i> and <i>k</i> separated with a space. Here <i>n</i> is the number of airports (<i>n</i>&nbsp;&le;&nbsp;1000) and <i>k</i>&nbsp;is the number of an airport, which is the starting point of the game (1&nbsp;&le;&nbsp;<i>k</i>&nbsp;&le;&nbsp;<i>n</i>). The next <i>n</i>&nbsp;&minus;&nbsp;1 lines contain pairs of integers separated with a space. These integers are numbers of airports, connected with a flight (all the flights are symmetric and are mentioned only once). There are at most 20 flights to each airport.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the player who starts the game wins, the program should write “First player wins flying to airport L” where <i>L</i> is the number of an airport to which the players should fly first. If there are several such airports, the program should find one of them that has the minimal number. Otherwise the program should write “First player loses”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
3 2 
3 1
1 4
</PRE></TD><TD><PRE CLASS="intable">First player wins flying to airport 2
</PRE></TD></TR></TABLE>
______________________________________________________
1046||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a polygon <i>A</i><SUB>1</SUB><i>A</i><SUB>2</SUB>&#133;<i>A</i><SUB><i>N</i></SUB> (the vertices 
<i>A</i><SUB><i>i</i></SUB> are numbered in clockwise order). On each side <i>A</i><SUB><i>i</i></SUB><i>A</i><SUB><i>i</i>+1</SUB> an isosceles triangle <i>A</i><SUB><i>i</i></SUB><i>M</i><SUB><i>i</i></SUB><i>A</i><SUB><i>i</i>+1</SUB> is built on the outer side of the polygon (<i>M</i><SUB><i>i</i></SUB><i>A</i><SUB><i>i</i></SUB> = <i>M</i><SUB><i>i</i></SUB><i>A</i><SUB><i>i</i>+1</SUB>). The angle <i>A</i><SUB><i>i</i></SUB><i>M</i><SUB><i>i</i></SUB><i>A</i><SUB><i>i</i>+1</SUB> is equal to &alpha;<SUB><i>i</i></SUB>. Here we assume that <i>A</i><SUB><i>N</i>+1</SUB> = <i>A</i><SUB>1</SUB>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The set of angles &alpha;<SUB><i>i</i></SUB> satisfies a condition that the sum of angles in any of its nonempty subsets is not aliquot to 360 degrees.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given <i>N</i>, coordinates of vertices <i>M</i><SUB><i>i</i></SUB> and angles &alpha;<SUB><i>i</i></SUB> (measured in degrees). Write a program, which restores coordinates of the polygon vertices.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> (3 &le; <i>N</i> &le; 50). The next <i>N</i> lines contain pairs of real numbers <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> which are coordinates of points <i>M</i><SUB><i>i</i></SUB> (–100 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 100). And the last <i>N</i> lines of the input consist of degree values of angles &alpha;<SUB><i>i</i></SUB>. All real numbers in the input contain at most 2 digits after decimal point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> lines with points coordinates, <i>i</i>-th line should contain the coordinates of <i>A</i><SUB><i>i</i></SUB>. Coordinates must be accurate to 2 digits after decimal point. You may assume that solution always exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 2
3 3
2 0
90
90
90
</PRE></TD><TD><PRE CLASS="intable">1 1
1 3
3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1047||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a sequence of <i>N</i>&nbsp;+&nbsp;2 elements <i>a</i><SUB>0</SUB>, <i>a</i><SUB>1</SUB>, &#133;, 
<i>a</i><SUB><i>N</i>+1</SUB> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;3000, 
&minus;2000&nbsp;&le;&nbsp;<i>a</i><SUB><i>i</i></SUB>&nbsp;&le;&nbsp;2000). It is known that 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>a</i><SUB><i>i</i></SUB>&nbsp;=&nbsp;(<i>a</i><SUB><i>i</i>&minus;1</SUB>&nbsp;+&nbsp;<i>a</i><SUB><i>i</i>+1</SUB>)/2&nbsp;&minus;&nbsp;<i>c</i><SUB><i>i</i></SUB></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">for each <i>i</i>&nbsp;=&nbsp;1, 2, …, <i>N</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given <i>a</i><SUB>0</SUB>, <i>a</i><SUB><i>N</i>+1</SUB>, <i>c</i><SUB>1</SUB>, …, <i>c</i><SUB><i>N</i></SUB>. Write a program which calculates <i>a</i><SUB>1</SUB>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>. The next two lines consist of numbers <i>a</i><SUB>0</SUB> and <i>a</i><SUB><i>N</i>+1</SUB> each having two digits after decimal point, and the next <i>N</i> lines contain numbers <i>c</i><SUB><i>i</i></SUB> (also with two digits after decimal point), one number per line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>a</i><SUB>1</SUB> in the same format as <i>a</i><SUB>0</SUB> and <i>a</i><SUB><i>N</i>+1</SUB>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
50.50
25.50
10.15
</PRE></TD><TD><PRE CLASS="intable">27.85
</PRE></TD></TR></TABLE>
______________________________________________________
1048||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The creators of a new programming language D++ have found out that whatever limit for SuperLongInt type they make, sometimes programmers need to operate even larger numbers. A limit of 1000 digits is so small&hellip; You have to find the sum of two numbers with maximal size of 1 000 000 digits.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single number <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1 000 000)&nbsp;&mdash; the length of the integers (in order to make their lengths equal, some leading zeroes can be added). It is followed by these integers written in columns. That is, the next <i>N</i> lines contain two digits each, divided by a space. Each of the two given integers is not less than 1, and the length of their sum does not exceed <i>N</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output exactly <i>N</i> digits in a single line representing the sum of these two integers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 4
4 2
6 8
3 7
</PRE></TD><TD><PRE CLASS="intable">4750</PRE></TD></TR></TABLE>
______________________________________________________
1049||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ten mathematicians are flying on a balloon over the Pacific ocean. When they are crossing the equator they decide to celebrate this event and open a bottle of champagne. Unfortunately, the cork makes a hole in the balloon. Hydrogen is leaking out and the balloon is descending now. Soon it will fall into the ocean and all the balloonists will be eaten by hungry sharks.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But not everything is lost yet. One of the balloonists can sacrifice himself jumping out, so that his friends would live a little longer. Only one problem still exists: who is the one to get out. There is a fair way to solve this problem. First, each of them writes an integer <i>a<SUB>i</SUB></i> not less than 1 and not more than 10000. Then they calculate the magic number <i>N</i> that is the number of positive divisors of the product 
<i>a</i><SUB>1</SUB>*<i>a</i><SUB>2</SUB>*…*<i>a</i><SUB>10</SUB>. For example, the number of positive integer divisors of 6 is 4 (they are 1,2,3,6). The hero (a mathematician who will be thrown out) is determined according to the last digit of <i>N</i>. Your task is to find this digit.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains ten integer numbers (each number is in separate line).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single digit from 0 to 9&nbsp;&mdash; the last digit of <i>N</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
2
6
1
3
1
1
1
1
1
</PRE></TD><TD><PRE CLASS="intable">9
</PRE></TD></TR></TABLE>
______________________________________________________
1050||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">TeX is the leading typesetting system for mathematics, science, and 
engineering and has been adopted as standard by the American Mathematical 
Society. LaTeX was developed later by Leslie Lamport. It is based on TeX and 
provides a set of higher level commands for production of complex documents. In 
TeX or LaTeX, any text editor program may be used to enter and modify the input 
text.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The source text contains the actual text as well as formatting commands 
beginning with \. Commands are delimited by any non-alphabetic character. 
One example of beautification by TeX is that it uses `` (two 
left-single-quotes) and '' (two right-single-quotes) to delimit 
quotations, rather than the mundane " (one double quote) which is provided by 
most keyboards. Keyboards typically do not have an oriented double-quote, 
but they do have a left-single-quote (`) and right-single-quote ('). 
TeX lets the user type two left-single-quotes (``) to create a 
left-double-quote and two right-single-quotes ('') to 
create a right-double-quote.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now, you have a text only file containing 
at most 250 lines at most 80 symbols each, as source or input, and you want to 
use TeX to beautify it. Rather than doing everything by hand, as the first step 
of automation you want to convert the quotes into the TeX format by using a 
program. This program will convert the text with double-quotes (") into an 
identical text except that double quotes have been replaced by the 
two-character sequences required by TeX for delimiting quotations with 
oriented double-quotes. The double-quote (") characters should be 
replaced appropriately by proper double single quotes depending on whether it is 
an opening or closing quotation mark. Question of nested quotations does not 
arise. The first " must be replaced by ``, the next by '', the next by 
``, the next by '', and so on. An opening 
double quote must have its closing quote in the same paragraph. If a match is 
not found in the same paragraph for an opening quote, this quote has to be 
deleted. Paragraph ends in the source text are marked either by at least one 
blank line, or a \par command or both. Your program must also be careful about 
the \" command which is used to produce umlaut or dieresis (\"e 
leads to &euml;). These are to be left untouched.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input will consist of several lines of text containing a number of double 
quotes ("), as well as some TeX commands. End of input will be marked by an 
\endinput command.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output will be an exact replica of the input, except the double quotes are to 
be modified according to the rules described above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">There is no "q in this sentence. \par 
"Talk child," said the unicorn. 

She s\"aid, "\thinspace `Enough!', he said." 
\endinput 
</PRE></TD><TD><PRE CLASS="intable">There is no q in this sentence. \par 
``Talk child,'' said the unicorn. 

She s\"aid, ``\thinspace `Enough!', he said.'' 
\endinput 
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Double-quote (") has ASCII code 34,<BR>
left-single-quote (`) has ASCII code 96,<BR>
right-single-quote (') has ASCII code 39.</DIV></DIV>
______________________________________________________
1051||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is an infinite grid and an <i>M</i>&nbsp;&times;&nbsp;<i>N</i> rectangle of stones on it (1&nbsp;&le;&nbsp;<i>M</i>,&nbsp;<i>N</i>&nbsp;&le;&nbsp;10000). The stones are located in the knots of the grid.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A following game for a single player is being played. One stone can jump over another along a vertical or a horizontal line. A stone which had been overjumped is taken away. The purpose of the game is to minimize number of stones on a 
grid.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given a pair of numbers <i>M</i> and <i>N</i> separated with one space you are to write a program which should determine a minimal number of the stones left on the grid.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Numbers <i>M</i> and <i>N</i> separated by space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The minimal number of the stones left on the grid.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1052||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A good hunter kills two rabbits with one shot. Of course, it can be easily done since for any two points we can always draw a line containing the both. But killing three or more rabbits in one shot is much more difficult task. To be the best hunter in the world one should be able to kill the maximal possible number of rabbits. Assume that rabbit is a point on the plane with integer <i>x</i> and <i>y</i> coordinates. Having a set of rabbits you are to find the largest number of rabbits that can be killed with single shot, i.e. maximum number of points lying exactly on the same line. No two rabbits sit at one point.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An input contains an integer <i>N</i> (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;200) specifying the number of rabbits. Each of the next <i>N</i> lines in the input contains the <i>x</i> coordinate and the <i>y</i> coordinate (in this order) separated by a space (&minus;1000&nbsp;&le;&nbsp;<i>x</i>,&nbsp;<i>y</i>&nbsp;&le;&nbsp;1000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output contains the maximal number of rabbits situated in one line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
7 122
8 139
9 156
10 173
11 190
-100 1
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE>
______________________________________________________
1053||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Father Carlo got the commission to make Pinocchio. Client expressed a wish to be unknown and he left material and insisted on finding Pinocchio's nose length as a result of performing the following algorithm:

<OL>
 <LI>There's a set of <i>N</i> numbered blanks with integer lengths.
 <LI>If the set consists of only one blank, then it's length can be admitted as the length of Pinocchio's nose
 <LI>Let's choose some 2 blanks
 <OL TYPE="a">
  <LI>If lengths of the blanks coincide, then one of the blanks is eliminated from the set and algorithm goes back to point 2 to be repeated.
  <LI>If lengths of the blanks are different, then the piece of the long blank is sawed off and its length must be equal to the length of the other blank. Then the algorithm is repeated from point 2.
 </OL>
</OL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Example</I>. There are 3 blanks in a set with lengths: 2, 3, 4. Then the change of the blank lengths can be shown in the following table. As a result Pinocchio will get the nose with length of 1.
<TABLE BORDER="1" CELLSPACING="0" CELLPADDING="5">
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>Length of the<BR>first blank</TD>
 <TD>Length of the<BR>second blank</TD>
 <TD>Length of the<BR>third blank</TD>
 <TD>Comments</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>2</TD>
 <TD>3</TD>
 <TD>4</TD>
 <TD>Initial blank lengths</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>2</TD>
 <TD>1</TD>
 <TD>4</TD>
 <TD>Sawing off the second blank</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>2</TD>
 <TD>1</TD>
 <TD>3</TD>
 <TD>Sawing off the third blank</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>2</TD>
 <TD>1</TD>
 <TD>2</TD>
 <TD>Sawing off the third blank</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>1</TD>
 <TD>1</TD>
 <TD>2</TD>
 <TD>Sawing off the first blank</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>-</TD>
 <TD>1</TD>
 <TD>2</TD>
 <TD>The first blank is eliminated</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>-</TD>
 <TD>1</TD>
 <TD>1</TD>
 <TD>Sawing off the third blank</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
 <TD>-</TD>
 <TD>-</TD>
 <TD>1</TD>
 <TD>The second blank is eliminated</TD>
</TR>
</TABLE>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>N</i> <nobr>(1 &le; <i>N</i> &le; 1000)</nobr>. The other <i>N</i> successive lines contain integers <i>L</i><SUB>1</SUB>, <i>L</i><SUB>2</SUB>, &hellip;, <i>L<SUB>N</SUB></i>. <br><nobr>1 &le; <i>L</i><SUB>1</SUB>, <i>L</i><SUB>2</SUB>, …, <i>L<SUB>N</SUB></i> &le; MaxLongInt</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain either one number (Pinocchio nose length), or the word IMPOSSIBLE (in upper case) if the nose length cannot be defined.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2
3
4
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1054||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"Hanoi tower" puzzle is well known. There are 3 pegs with numbers: #1, #2 and #3. <i>N</i> disks of different diameters are set on the first peg in the following order: the lower disk is set, the larger diameter it has. Your aim is to move all disks onto the second peg using the peg #3 as an auxiliary one. Following the rules within a move it's allowed to replace only one uppermost disk. Besides it's forbidden to put the disk of the bigger diameter onto the disk of the smaller one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Distribution of disks on the pegs during the game must be assigned as sequence <i>D</i> (element #<i>i</i> of the sequence is equal to the number of peg where the disk #<i>i</i> is placed on). For instance, game status after the third move is apparently determined by sequence <i>D</i>=(3, 3, 1) (the first and the second disks are set on the third peg and the third disk is on the peg #1).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Example</I>. Let's assume that 3 disks are set on the peg #1. Then the movement of the disks can be depicted in the following table (disks are numbered in ascending order of diameters):

<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=656>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>Point of move</TD>
<TD>Peg #1 disks</TD>
<TD>Peg #2 disks</TD>
<TD>Peg #3 disks</TD>
<TD>sequence <i>D</i></TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>0</TD>
<TD>1, 2, 3</TD>
<TD>-</TD>
<TD>-</TD>
<TD>1, 1, 1</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>1</TD>
<TD>2, 3</TD>
<TD>1</TD>
<TD>-</TD>
<TD>2, 1, 1</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>2</TD>
<TD>3</TD>
<TD>1</TD>
<TD>2</TD>
<TD>2, 3, 1</TD>
</TR>
<TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>3</TD>
<TD>3</TD>
<TD>-</TD>
<TD>1, 2</TD>
<TD>3, 3, 1</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>4</TD>
<TD>-</TD>
<TD>3</TD>
<TD>1, 2</TD>
<TD>3, 3, 2</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>5</TD>
<TD>1</TD>
<TD>3</TD>
<TD>2</TD>
<TD>1, 3, 2</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>6</TD>
<TD>1</TD>
<TD>2, 3</TD>
<TD>-</TD>
<TD>1, 2, 2</TD>
</TR><TR ALIGN="CENTER" VALIGN="MIDDLE">
<TD>7</TD>
<TD>-</TD>
<TD>1, 2, 3</TD>
<TD>-</TD>
<TD>2, 2, 2</TD>
</TR>
</TABLE></DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your aim is either to determine (using arbitrary sequence <i>D</i>) the number of moves from the beginning of the game to the given position on condition of performing the optimal algorithm; or to print "&minus;1" in the case of incorrect sequence declaration (i.e. the given position cannot be achieved performing the optimal algorithm).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Reference notes</I>. Optimal algorithm can be specified with the following recursive procedure.
<PRE>
procedure Hanoi(N:integer; From, To_, Temp : integer);
 Begin
  if N&gt;0 then
  begin
     Hanoi(N-1, From, Temp, To_);
     writeln (N, From, To_);
     Hanoi(N-1, Temp, To_, From)
  end
End;
</PRE>
For example, to move 5 disks it's enough to call Hanoi(5,1,2,3)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Admonition</I>. It is obvious that during the game process simultaneous setting of disks on all the pegs (#1, #2, #3) is never repeated, thus the answer will always be unequivocal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains integer <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;31). The other <i>N</i> successive lines contain integers <i>D</i><SUB>1</SUB>, <i>D</i><SUB>2</SUB>, &hellip;, <i>D<SUB>N</SUB></i>.
<nobr>1 &le; <i>D</i><SUB>1</SUB>, <i>D</i><SUB>2</SUB>, &hellip;, <i>D<SUB>N</SUB></i> &le; 3</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain either the number of moves, or &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
3
3
1
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1055||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you have known MMM corporation lab researches the matter of haricot proportions in soup For every day. As we wrote in the previous problem (T) the ladle is placed down into the soup pan. But now we are not interested in the form and linear sizes of the ladle. This time the ladle holds exactly <i>M</i> haricot seeds of <i>N</i> got into the pan. All the seeds are of different size.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Experimenters calculate the quantity of possible methods to proportion <i>M</i> seeds in the pan. Requisite quantity of methods is calculated with the formula: <i>C</i>=<i>N</i>!/(<i>M</i>!&middot;(<i>N</i>&minus;<i>M</i>)!). The main feature of these experiments is the quantity of different prime divisors of number <i>C</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Example.</I> <i>N</i>=7, <i>M</i>=3. <i>C</i>=7!/(3!*4!)=5040/(6*24)=35=5*7. This example shows that the quantity of different prime divisors is 2.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lest money would be spent for programmer, MMM corporation board decided to make necessary estimating during trial tour of quarterfinal world programming contest in Rybinsk.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thus, your aim is to find the quantity of different prime divisors of number <i>C</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains integers <i>N</i> and <i>M</i>.
You may assume that 1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;50000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain one integer.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 3</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1056||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Computer net is created by consecutive computer plug-up to one that has already been connected to the net. Each new computer gets an ordinal number, but the protocol contains the number of its parent computer in the net. Thus, protocol consists of several numbers; the first of them is always 1, because the second computer can only be connected to the first one, the second number is 1 or 2 and so forth. The total quantity of numbers in the protocol is <i>N</i>&nbsp;&minus;&nbsp;1 (<i>N</i> is a total number of computers).
For instance, protocol 1, 1, 2, 2 corresponds to the following net:

</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">1 - 2 - 5
|   |
3   4
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The distance between the computers is the quantity of mutual connections (between each other) in chain. Thus, in example mentioned above the distance between computers #4 and #5 is 2, and between #3 and #5 is 3.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Definition.</I> Let the center of the net be the computer which has a minimal distance to the most remote computer. In the shown example computers #1 and #2 are the centers of the net.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find all the centers using the set protocol.

</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains an integer <i>N</i>, the quantity of computers (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10000). Successive <i>N</i>&nbsp;&minus;&nbsp;1 lines contain protocol.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain ordinal numbers of the determined net centers in ascending order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1
1
2
2
</PRE></TD><TD><PRE CLASS="intable">1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1057||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Create a code to determine the amount of integers, lying in the set [<i>X</i>;<i>Y</i>] and being a sum of exactly <i>K</i> different integer degrees of <i>B</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Example.</I> Let <i>X</i>=15, <i>Y</i>=20, <i>K</i>=2, <i>B</i>=2. By this example 3 numbers are the sum of exactly two integer degrees of number 2:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">17 = 2<SUP>4</SUP>+2<SUP>0</SUP>,<BR>
18 = 2<SUP>4</SUP>+2<SUP>1</SUP>,<BR>
20 = 2<SUP>4</SUP>+2<SUP>2</SUP>.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains integers <i>X</i> and <i>Y</i>, separated with a space (1&nbsp;&le;&nbsp;<i>X</i>&nbsp;&le;&nbsp;<i>Y</i>&nbsp;&le;&nbsp;2<sup>31</sup>&minus;1). The next two lines contain integers <i>K</i> and <i>B</i> (1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;20;
2&nbsp;&le;&nbsp;<i>B</i>&nbsp;&le;&nbsp;10).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain a single integer&nbsp;&mdash; the amount of integers, lying between <i>X</i> and <i>Y</i>, being a sum of exactly <i>K</i> different integer degrees of <i>B</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15 20
2
2
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1058||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fishburg confectionery factory produces convex polygon-shaped chocolates. Little Boy and Karlsson bought one and wanted to break it into two fragments. The areas of the fragments must be equal. Create a code to find out the length of breakage-line of a minimal length using the given chocolate form.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains an integer <i>N</i>&nbsp;&mdash; the number of polygon vertices (4&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50). The other <i>N</i> lines contain coordinates of the vertices in the counter-clockwise order. Coordinates are real numbers from &minus;100 to 100 and given with at most 3 digits after decimal point.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain the minimal length of breakage-line with accuracy to 0.0001.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
4 0
4 3
0 3
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1059||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr got an assignment to cipher out the value of polynomial <i>P</i> with calculator working in mode of reverse polish record. His calculator is able only to add and multiply numbers of any length (capacity). Input data&nbsp;&mdash; degree of the polynomial, argument <i>x</i> and coefficient values.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Petr to set correct and at the same time the shortest sequence of operands and signs of operations in the order of entering in calculator. Reference notes. Expression written in mode of reverse polish record consists of operands and signs of operations; the sign of operation is preceded by operands. The brackets in reverse polish record are eliminated. The algorithm to compute such an expression is the following:
<ol>
<li>If the expression consists of only one operand, then the value of the operand is the value of the expression.</li>
<li>Otherwise:
<ul>
<li>seek for the first operation sign leftmost in the expression</li>
<li>process the operation with those operands that stand to the left from this sign</li>
<li>write the result instead of the sign and operands</li>
<li>recalculate the ultimate expression using rules 1-2</li>
</ul></li>

<li>If rules 1-2 are unacceptable, then the expression hasn’t been properly written.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Example. Expression of reverse polish record “a b c d + * e - /” is the equivalence of ordinary expression “a / (b * (c + d) – e)”
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains an integer <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000). Here you assume that polynom is <i>a</i><sub>0</sub><i>x</i><sup><i>N</i></sup>+
<i>a</i><sub>1</sub><i>x</i><sup><i>N</i>&minus;1</sup> + &hellip;&nbsp;.
Instead of the coefficient <i>a<sub>i</sub></i> you may just write the number <i>i</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain a sequence of minimal length corresponding to polynomial in reverse polish record. This record can include only signs of operations ('+', '*'), capital Latin letter X and unsigned integers that set the weights of coefficients of <i>x</i> degrees.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each element (sign of operation, symbol X, weight of coefficient) should be written without initial space characters by one in a line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">0
X
*
1
+
</PRE></TD></TR></TABLE>
______________________________________________________
1060||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Flip game is played on a rectangular 4&times;4 field with
two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it's black or white side up. Each round
you flip 3 to 5 pieces, thus changing the color of their
upper side from black to white and vice versa. The pieces
to be flipped are chosen every round according to the
following rules:
<ol>
<li>Choose any one of the 16 pieces.</li>
<li>Flip the chosen piece and also all adjacent pieces
    to the left, to the right, to the top, and to the bottom
    of the chosen piece (if there are any).</li>
</ol></DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider the following position as an example:
</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">bwbw
wwww
bbwb
bwwb
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here &quot;b&quot; denotes pieces lying their black side up and &quot;w&quot;
denotes pieces lying their white side up. If we choose to flip
the 1st piece from the 3rd row (this choice is shown at the picture),
then the field will become:</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">bwbw
bwww
wwwb
wwwb
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The goal of the game is to flip either all pieces white side up or
all pieces black side up. You are to write a program that 
will search for the minimum number of rounds needed to 
achieve this goal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of 4 lines with 4 characters "w" or "b" each that denote game field position.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output a single integer number&nbsp;&mdash; the minimum number of rounds needed to achieve the goal of the game from the given position. If the goal is initially achieved, then write 0. If it's impossible to achieve the goal, then write the word "Impossible" (without quotes).

</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">bwbw
wwww
bbwb
bwwb
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1061||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><strong>Data blocks</strong> being read by DBMS from the hard drive
are stored in the main memory
in a fixed number of pre-allocated <strong>buffers</strong>. 
Each buffer can hold one  data block.
Each buffer can be either <strong>free</strong>
(does not contain any useful information) or <strong>occupied</strong> by some data.
When DBMS is going to read data block from the hard drive it has 
to decide which buffer to use for data storing.
If there 
are any free buffers, then one of them is used for that purpose.
If there are no free buffers, then one of the occupied buffers
has to be flushed to become free, unless it was <strong>locked</strong> by  
some part of DBMS.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The choice of the buffer to flush is critical to DBMS performance.
A lot of different algorithms were developed, LRU (Least Recently
Used) algorithm being the
one used most often. However, your DBMS is
going to implement the Advanced Buffer Management algorithm
which takes advantage
of the fact  that maximal
performance is achieved when
a number of consecutive data blocks from the hard drive are read
into consecutive memory buffers.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Buffers are numbered from 1 to <em>N</em>, where <em>N</em>
(1&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;100000)
is a total number of buffers.
Each buffer can be in any one of the following states:
free, occupied or locked. 
Each occupied
buffer is assigned an integer number from 1 to 9 &ndash;
the <strong>worthiness</strong> of
the currently stored information in that
buffer. The worthiness of 
free buffers is considered to be zero. Locked buffers cannot be 
neither used nor flushed and their worthiness is undefined.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having received the request to read <em>K</em>
(1&nbsp;&le;&nbsp;<em>K</em>&nbsp;&le;&nbsp;10000)
data blocks from the hard drive, Buffer Manager has to choose
<em>K</em> consecutive non-locked
buffers numbered from <em>L</em> to 
<em>L</em>+<em>K</em>-1 that have minimal possible sum of their
worthiness, or to report that it is impossible to find <em>K</em>
consecutive non-locked buffers. The latter can also happen 
if total number of buffers is less than <em>K</em>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that models the processing
of one request to Buffer Manager using the above algorithm.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers,
<em>N</em> and <em>K</em>, separated by a space.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Starting from the second line there is a description of a buffers' state.
The state of each buffer is represented by a single character:

<ul>
  <li><strong><tt>0</tt></strong> &ndash; when the corresponding buffer is free.</li>
  <li><strong><tt>1</tt></strong> &ndash; when the corresponding buffer is occupied 
         and has worthiness of 1.</li>
  <li><strong><tt>2</tt></strong> &ndash; when the corresponding buffer is occupied
         and has worthiness of 2.</li>
  <li>...</li>
  <li><strong><tt>9</tt></strong> &ndash; when the corresponding buffer is occupied
         and has worthiness of 9.</li>
  <li><strong><tt>*</tt></strong> &ndash; when the corresponding buffer is locked.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Those characters are situated on the consecutive lines grouped by 80 
characters per line without any spaces. Thus, each line starting
from the second one contains exactly 80 characters with a possible exception
for the last line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output the single integer number <em>L</em>.
This number gives the buffer number where first of the
<em>K</em> 
blocks from the hard drive shall be read to ensure the minimal
possible total worthiness of the blocks that
have to be flushed. 
If there are more than one such value for <em>L</em>,
then write the smallest one.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output a single number 0 if it's impossible to find
<em>K</em> consecutive non-locked buffers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">100 53
2165745216091853477755800393859785807207523169954341**7363*9*94664808*4777717089
09825185827659480548
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1062||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Triathlon is an athletic contest consisting of three consecutive sections that 
should be completed as fast as possible as a whole. 
The first section is swimming, the second section is riding bicycle 
and the third one is running.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The speed of each contestant in all three sections is known. The judge 
can choose the length of each section arbitrarily provided that no section 
has zero length. 
As a result sometimes she could choose their lengths in such a way 
that some particular contestant would win the competition.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains integer number <em>N</em>
(1&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;100),
denoting the number of contestants.
Then <em>N</em> lines follow, each line contains three integers
<em>V<sub>i</sub></em>, <em>U<sub>i</sub></em> and <em>W<sub>i</sub></em>
(1&nbsp;&le;&nbsp;<em>V<sub>i</sub></em>, <em>U<sub>i</sub></em>,
<em>W<sub>i</sub></em>&nbsp;&le;&nbsp;10000),
separated by spaces, denoting the speed of <em>i</em><sup>th</sup>
contestant in each section.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For every contestant write to the output one line, that contains
word &quot;Yes&quot; if the judge could choose the lengths of the sections in such a way
that this particular contestant would win (i.e. she is the only one who 
would come first), or word &quot;No&quot; if this is impossible.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9
10 2 6
10 7 3
5 6 7
3 2 7
6 2 6
3 5 7
8 4 6
10 4 2
1 8 7
</PRE></TD><TD><PRE CLASS="intable">Yes
Yes
Yes
No
No
No
Yes
No
Yes
</PRE></TD></TR></TABLE>
______________________________________________________
1063||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><em> <strong>Dominoes</strong>, 
  game played with small, rectangular blocks of wood or other material, 
  each identified by a number of dots, or pips, on its face. The blocks 
  usually are called bones, dominoes, or pieces and sometimes men, stones, 
  or even cards.<br>
  The face of each piece is divided, by a line or ridge, into two squares, 
  each of which is marked as would be a pair of dice...<br>
  The principle in nearly all modern dominoes games is to match one end 
  of a piece to another that is identically or reciprocally numbered.</em><br>

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_right">ENCYCLOP&AElig;DIA BRITANNICA</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider an arbitrary set of domino pieces where each piece is marked 
with two digits from 1 to 6. Some sets can be completely laid 
out in a row matching one end of a piece to another that is identically 
numbered, while others cannot. For example, the set consisting of 5 pieces:
(1,&nbsp;5), (1,&nbsp;6), (5,&nbsp;5) and (2,&nbsp;4) twice, cannot
be laid out in a row. However, if we add (2,&nbsp;5) piece to the above
set we could lay out the resulting set in the following row:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, we are interested in a row having the smallest sum of digits on
its pieces. In our example, instead of the piece (2,&nbsp;5) with a sum of 7, 
we could add two pieces (1,&nbsp;2) with a total sum of 6 to
lay out the following row:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that for a given domino set will find an additional 
(possibly empty) set with the smallest possible sum of digits, so that a row could be 
laid out with both sets combined.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer <em>N</em> 
(2&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;100) representing the total
number of pieces in the domino set. The following <em>N</em> lines describe
pieces. Each piece is represented on a separate line in a form of two digits
from 1 to 6 separated by a space. The digits of a piece can be written in 
any order.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first line write the smallest sum of digits of the additional set or 0 if
that set is empty. On the second line write the total number of pieces in the additional set or 0 if that set is empty. Then write the pieces of the additional set in the same format as in input.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are a number of additional sets with the same smallest
sum of digits exist then write any one of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
6 1
1 5
5 5
5 2
2 4
4 2
</PRE></TD><TD><PRE CLASS="intable">0
0
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
1 5
6 1
5 5
2 4
2 4
</PRE></TD><TD><PRE CLASS="intable">6
2
1 2
1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1064||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program fragment below performs binary search of an integer
number in an array that is sorted in a nondescending order:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table cellspacing="0" cellpadding="6" border="1" align="center">
<tr><th>Pascal</th>
<th>C</th></tr>
<tr>
<td style="width:50%; vertical-align:top">
<pre>const
  MAXN = 10000;
var
  A: array[0..MAXN-1] of integer;
  N: integer;

procedure BinarySearch(x: integer);
var
  p, q, i, L: integer;
begin
  p := 0;   { Left border of the search  }
  q := N-1; { Right border of the search }
  L := 0;   { Comparison counter         }
  while p &lt;= q do begin
    i := (p + q) div 2;
    inc(L);
    if A[i] = x then begin
      writeln('Found item i = ', i,
        ' in L = ', L, ' comparisons');
      exit
    end;
    if x &lt; A[i] then
      q := i - 1
    else
      p := i + 1
  end
end;
</pre></td>
<td style="width:50%; vertical-align:top">
<pre>
#define MAXN 10000

int A[MAXN];
int N;

void BinarySearch(int x)
{
  int p, q, i, L;

  p = 0;   /* Left border of the search  */
  q = N-1; /* Right border of the search */
  L = 0;   /* Comparison counter         */
  while (p &lt;= q) {
    i = (p + q) / 2;
    ++L;
    if (A[i] == x) {
      printf(&quot;Found item i = %d&quot;
        &quot; in L = %d comparisons&quot;, i, L);
      return;
    }
    if (x &lt; A[i])
      q = i - 1;
    else
      p = i + 1;
  }
}
</pre></td>
</tr>
</table></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Before <tt>BinarySearch</tt> was called, <tt>N</tt> was set to some 
integer number from 1 to 10000 inclusive and
array <tt>A</tt> was filled with a nondescending integer sequence.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that the procedure has terminated with the message 
&quot;<tt>Found item i = XXX in L = XXX comparisons</tt>&quot; with some
known values of <tt>i</tt> and <tt>L</tt>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that finds all possible values of
<tt>N</tt> that could lead to such message. However, the number of 
possible values of <tt>N</tt> can be quite big. Thus, you are asked to group all 
consecutive <tt>N</tt>s into intervals and write down only first and 
last value in each interval.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of a single line with two integers <tt>i</tt>
and <tt>L</tt> (0&nbsp;&le;&nbsp;<tt>i</tt>&nbsp;&lt;&nbsp;10000 and
1&nbsp;&le;&nbsp;<tt>L</tt>&nbsp;&le;&nbsp;14), separated by a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first line of the output write the single 
integer number <em>K</em>
representing the total number of intervals for possible values of <tt>N</tt>.
Then <em>K</em> lines shall follow listing those intervals in an ascending order.

Each line shall contain
two integers <em>A<sub>i</sub></em> and <em>B<sub>i</sub></em>
(<em>A<sub>i</sub></em>&nbsp;&le;&nbsp;<em>B<sub>i</sub></em>)
separated by a space, representing first and last value of the interval.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are no possible values of <tt>N</tt> exist, then the output 
shall contain the single 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 3
</PRE></TD><TD><PRE CLASS="intable">4
12 12
17 18
29 30
87 94
</PRE></TD></TR></TABLE>
______________________________________________________
1065||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lilliputian frontier is a convex polygon with non-zero area.
The vertices of this polygon are guard towers, which are
connected by straight lines.
This frontier is too long and expensive for Lilliputia to maintain;
therefore the Lilliputian government has decided to revise it to make it shorter.
However, they don't want to build new guard towers, but to use existing
ones as a part of a new frontier.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each day frontier guards inspect the frontier. They go
from one guard tower to the next one, traversing the frontier
clockwise. Guard towers are numbered from 1 to <em>N</em> according
to this inspection order. Frontier revision should not change this
way of inspection and the area of Lilliputia shall remain non-zero.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, the frontier that is shown on the picture
(axes are in kilometer scale) is traversed by 
1&nbsp;-&nbsp;2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;5&nbsp;-&nbsp;1
route, which is 57.89 kilometers long.
To make the frontier as short as possible 
Lilliputia should revise it so that the frontier is traversed by
2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;2 route, thus reducing 
its length to 27.31 kilometers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, Lilliputia has a number of historical monuments which
are its major pride. The historical monuments shall be kept 
inside Lilliputia at any cost and they should not end up on the 
frontier.  So, the task is to design the shortest frontier 
that will preserve all historical monuments inside Lilliputia.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the sample picture two historical monuments marked &quot;A&quot; and &quot;B&quot;
are shown. The desire to keep them inside Lilliputia will lead
to the shortest frontier with a traverse path 
1&nbsp;-&nbsp;2&nbsp;-&nbsp;3&nbsp;-&nbsp;4&nbsp;-&nbsp;1
having 51.78 kilometers in length.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers <em>N</em>
and <em>M</em>, separated by a space. <em>N</em> 
(3&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;50) is a total number
of guard towers on the Lilliputian frontier. <em>M</em>
(0&nbsp;&le;&nbsp;<em>M</em>&nbsp;&le;&nbsp;1000) is a total number
of historical monuments that are situated inside Lilliputia.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next <em>N</em> lines contain guard towers' coordinates
in a clockwise order followed by <em>M</em> lines that 
contain historical monuments' coordinates. All coordinates
are represented as two integers (for <em>X</em> and <em>Y</em>
correspondingly) separated by a space. Coordinates are
given in a kilometer scale and each coordinate
does not exceed 10000 by an absolute value. All guard towers
are located at distinct points.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output a single real number &ndash; the minimal
possible length of the Lilliputian frontier (in kilometers)
accurate to two digits to the right of the decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 0
8 9
0 -7
-8 -7
-8 1
-8 9
</PRE></TD><TD><PRE CLASS="intable">27.31
</PRE></TD></TR></TABLE>
______________________________________________________
1066||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The New Year garland consists of <em>N</em> lamps attached to a common wire
that hangs down on the ends to which outermost lamps are affixed. 
The wire sags under the weight of lamp in a particular way: each lamp is hanging
at the height that is 1 millimeter lower than the average height of the 
two adjacent lamps.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The leftmost lamp is hanging at the height of <em>A</em> millimeters above the
ground. You have to determine the lowest height <em>B</em> of the rightmost lamp 
so that no lamp in the garland lies on the ground
though some of them may touch the ground.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You shall neglect the lamp's size in this problem. By numbering the lamps with
integers from 1 to <em>N</em> and denoting the <em>i</em><sup>th</sup> lamp
height in millimeters as <em>H<sub>i</sub></em> we derive the following 
equations:

<ul>
<li><em>H</em><sub>1</sub> = <em>A</em></li>
<li><em>H<sub>i</sub></em> = 
       (<em>H</em><sub><em>i</em>&minus;1</sub> + <em>H</em><sub><em>i</em>+1</sub>)/2 &minus; 1,
       for all 1 &lt; <em>i</em> &lt; <em>N</em></li>
<li><em>H</em><sub><em>N</em></sub> = <em>B</em></li>
<li><em>H<sub>i</sub></em> &ge; 0, for all 1 &le; <em>i</em> &le; <em>N</em></li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The sample garland with 8 lamps that is shown on the picture
has <em>A</em>&nbsp;=&nbsp;15 and <em>B</em>&nbsp;=&nbsp;9.75.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of a single line with two numbers <em>N</em> and <em>A</em> separated by a space. 
<em>N</em> (3&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;1000) is an integer representing the number of lamps in the garland, <em>A</em> (10&nbsp;&le;&nbsp;<em>A</em>&nbsp;&le;&nbsp;1000) is a real
number representing the height of the leftmost lamp above the ground in millimeters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output the single real number <em>B</em>
accurate to two digits to the right of the decimal point
representing the lowest possible height of the rightmost lamp.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">692 532.81
</PRE></TD><TD><PRE CLASS="intable">446113.34
</PRE></TD></TR></TABLE>
______________________________________________________
1067||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Hacker Bill has accidentally lost all the information from his
workstation's hard drive and he has no backup copies of its contents. 
He does not regret for the loss of the files themselves, but
for the very nice and convenient directory structure that he had
created and cherished during years of work.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fortunately, Bill has several copies of directory listings
from his hard drive. Using those listings he was able to recover
full paths (like &quot;WINNT\SYSTEM32\CERTSRV\CERTCO~1\X86&quot;) for some directories. 
He put all of them in a file by writing each path he has found 
on a separate line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that will help Bill to restore
his state of the art directory structure by providing nicely formatted
directory tree.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains single integer number 
<em>N</em> (1&nbsp;&le;&nbsp;<em>N</em>&nbsp;&le;&nbsp;500)
that denotes a total number of distinct directory paths. 
Then <em>N</em> lines with directory paths follow. 
Each directory path occupies a single line and does not 
contain any spaces, including leading or trailing ones. 
No path exceeds 80 characters.
Each path is listed once and consists of a number of 
directory names separated by a back slash 
(&quot;<strong><tt>\</tt></strong>&quot;).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each directory name consists of 1 to 8 uppercase letters,
numbers, or the special characters from the following 
list: exclamation mark, number sign, dollar sign, percent sign, 
ampersand, apostrophe, opening and closing parenthesis, 
hyphen sign, commercial at, circumflex accent, underscore, 
grave accent, opening and closing curly bracket, and tilde 
(&quot;<strong><tt>!#$%&amp;'()-@^_`{}~</tt></strong>&quot;).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output the formatted directory tree. Each 
directory name shall be listed on its own line preceded by a number 
of spaces that indicate its depth in the directory hierarchy. The 
subdirectories shall be listed in lexicographic order immediately 
after their parent directories preceded by one more space than their 
parent directory. Top level directories shall have no spaces printed
before their names and shall be listed in lexicographic order. 
See sample below for clarification of the output format.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
WINNT\SYSTEM32\CONFIG
GAMES
WINNT\DRIVERS
HOME
WIN\SOFT
GAMES\DRIVERS
WINNT\SYSTEM32\CERTSRV\CERTCO~1\X86
</PRE></TD><TD><PRE CLASS="intable">GAMES
 DRIVERS
HOME
WIN
 SOFT
WINNT
 DRIVERS
 SYSTEM32
  CERTSRV
   CERTCO~1
    X86
  CONFIG
</PRE></TD></TR></TABLE>
______________________________________________________
1068||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find the sum of all integer numbers
lying between 1 and <i>N</i> inclusive.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of a single integer <i>N</i> that is
not greater than 10000 by it's absolute value.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single integer number that is the sum of all
integer numbers lying between 1 and <i>N</i> inclusive.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-3</PRE></TD><TD><PRE CLASS="intable">-5</PRE></TD></TR></TABLE>
______________________________________________________
1069||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A tree (i.e. a connected graph without cycles) with vertices is given (<i>N</i>&nbsp;&ge;&nbsp;2). Vertices of the tree are numbered by the integers 1,&hellip;,<i>N</i>. A Prufer code for the tree is built as follows: a leaf (a vertex that is incident to the only edge) with a minimal number is taken. Then this vertex and the incident edge are removed from the graph, and the number of the vertex that was adjacent to the leaf is written down. In the obtained graph once again a leaf with a minimal number is taken, removed and this procedure is repeated until the only vertex is left. It is clear that the only vertex left is the vertex with the number <i>N</i>. The written down set of integers (<i>N</i>&minus;1 numbers, each in a range from 1 to <i>N</i>) is called <I>a Prufer code</I> of the graph.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is, given a Prufer code, to reconstruct a tree, i.e. to find out the adjacency lists for every vertex in the graph.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that 2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;7500
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A set of numbers corresponding to a Prufer code of some tree. The numbers are separated with a spaces and/or line breaks.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Adjacency lists for each vertex. Format: a vertex number, colon, numbers of adjacent vertices separated with a space. The vertices inside lists and lists itself should be sorted by vertex number in an ascending order (look at sample output).
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1 6 2 6
</PRE></TD><TD><PRE CLASS="intable">1: 4 6
2: 3 5 6
3: 2
4: 1
5: 2
6: 1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1070||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Soon the USU team will go to Vancouver to participate in the final of the ACM International Collegiate Programming Contest. They will be to take four different planes (three changes on the way)!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">By the way, our team plans to return from Vancouver, so the two-way tickets are bought. The departure time (local time of the airport of departure) and the time of the arrival (local time of the destination airport) are printed on the tickets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, the departure at 15.42 and the arrival at 16.23, and a return flight departs at 08.10 and arrives at 17.51.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help to our team to find out how much does the time of the first airport differs from the one of the second. It is known that time in different airports differs by an integer amount of hours. The time of flights there and back may differ from each other not more than by 10 minutes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The duration of a flight doesn't exceed 6 hours. The difference between airport local times is not greater than 5 hours.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two lines, each of them contains two numbers. The first line consists of the departure time and the arrival time of the flight there, the second one&nbsp;— the departure and the arrival times of the back flight. Numbers in the lines are separated with a space, an amount of minutes is separated from an amount of hours with a point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should write a non-negative integer (without extra zeroes) that corresponds to the difference in time between the two airports.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">23.42 00.39
08.10 17.11</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1071||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor has a number <I>x</I>. He doesn't need it. He needs a number <I>y</I>. Nikifor tries to obtain the required number by erasing some digits from <I>x</I>. But he is not lucky in the meanwhile. May be he is to choose an appropriate number system?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program that reads numbers <I>x</I> and <I>y</I>, and determines a minimal radix of a number system that it is possible to obtain in it the number <I>y</I> from <I>x</I> by erasing some digits. If it is impossible, your program should write to an output a message "No solution".</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains integers <I>x</I> and <I>y</I> (1&nbsp;&le;&nbsp;<I>y</I>&nbsp;&lt;&nbsp;<I>x</I>&nbsp;&le;&nbsp;1&nbsp;000&nbsp;000), separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output either the message "No solution", if there is no appropriate number system, or an integer, not less than 2, that is an answer in the problem.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">127 16
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1072||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a TCP/IP net of several computers. It means that:
<OL>
<LI>Each computer has one or more net interfaces.</LI>
<LI>Each interface is identified by its IP-address and a subnet mask&nbsp;— these are two four-byte numbers with a point after each byte. A subnet mask has a binary representation as follows: there are <i>k</i> 1-bits, then&nbsp;— <i>m</i> 0-bits, <i>k</i>+<i>m</i>=8*4=32 (e.g., 212.220.35.77&nbsp;— is an IP-address and 255.255.255.128&nbsp;— is a subnet mask).</LI>
<LI>Two computers belong to the same subnet, if and only if (IP<SUB>1</SUB> AND NetMask<SUB>1</SUB>) = (IP<SUB>2</SUB> AND NetMask<SUB>2</SUB>), where IP<SUB>i</SUB> and NetMask<SUB>i  </SUB> — are an IP-address and subnet mask of i-th computer, AND&nbsp;— is  bitwise.</LI>
<LI>A packet is transmitted between two computers of one subnet directly. </LI>
<LI>If two computers belong to different subnets, a packet is to be transmitted via some other computers. The packet can pass from one subnet to another only on computer that has both subnets interfaces.</LI></OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find the shortest way of a packet between two given computers.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <i>N</i>&nbsp;— an amount of computers in the net, then go <i>N</i> sections, describing interfaces of each computer. There is a number <i>K</i> in the first line of a section&nbsp;— that is an amount of interfaces of the computer, then go <i>K</i> lines&nbsp;— descriptions of the interfaces, i.e. its IP-address and a subnet mask. The last line of an input contains two integers&nbsp;— the numbers of the computers that you are to find a way between them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that 2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;90 and <i>K</i>&nbsp;&le;&nbsp;5.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The word “Yes” if the route exists, then in the next line the computer numbers passed by the packet, separated with a space. The word “No” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
2
10.0.0.1 255.0.0.0
192.168.0.1 255.255.255.0
1
10.0.0.2 255.0.0.0
3
192.168.0.2 255.255.255.0
212.220.31.1 255.255.255.0
212.220.35.1 255.255.255.0
1
212.220.31.2 255.255.255.0
2
212.220.35.2 255.255.255.0
195.38.54.65 255.255.255.224
1 
195.38.54.94 255.255.255.224
1 6
</PRE></TD><TD><PRE CLASS="intable">Yes
1 3 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1073||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There live square people in a square country. Everything in this country is square also. Thus, the Square Parliament has passed a law about a land. According to the law each citizen of the country has a right to buy land. A land is sold in squares, surely. Moreover, a length of a square side must be a positive integer amount of meters. Buying a square of land with a side <I>a</I> one pays <I>a</I><SUP>2</SUP> quadrics (a local currency) and gets a square certificate of a landowner.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One citizen of the country has decided to invest all of his <i>N</i> quadrics into the land. He can, surely, do it, buying square pieces 1&nbsp;&times;&nbsp;1 meters. At the same time the citizen has requested to minimize an amount of pieces he buys: "It will be easier for me to pay taxes,"&nbsp;— he has said. He has bought the land successfully.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find out a number of certificates he has gotten.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains a positive integer <i>N</i>&nbsp;&le;&nbsp;60 000&nbsp;, that is a number of quadrics that the citizen has invested.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains a number of certificates that he has gotten.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">344</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1074||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are no long stories here, no long introductions and no complicated settings. All you need is to read from an input a real number in a format that is specified below, and to write it to an output in another format that is described below as well.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here a syntactical description of the used notions follows.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&lt;digit&gt; ::= 0|1|2|3|4|5|6|7|8|9<BR>
&lt;unsigned integer number&gt; ::= &lt;digit&gt;|&lt;digit&gt;&lt;unsigned integer number&gt;<BR>
&lt;sign&gt; ::= +|-<BR>
&lt;integer number&gt; ::= &lt;unsigned integer number&gt;|&lt;sign&gt;&lt;unsigned integer number&gt;<BR>
&lt;exponent symbol&gt; ::= e|E<BR>
&lt;exponent&gt; ::= &lt;exponent symbol&gt;&lt;integer number&gt;<BR>
&lt;simple unsigned real number&gt; ::= &lt;unsigned integer number&gt;|.&lt;unsigned integer number&gt;|&lt;unsigned integer number&gt;.&lt;unsigned integer number&gt;<BR>
&lt;simple real number&gt; ::= &lt;simple unsigned real number&gt;|&lt;sign&gt;&lt;simple unsigned real number&gt;<BR>
&lt;real number&gt; ::= &lt;simple real number&gt;|&lt;simple real number&gt;&lt;exponent&gt;
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">consists of one or several pairs of lines. The first line of a pair contains an arbitrary set of symbols <i>S</i>. A length of the string <i>S</i> doesn't exceed 100 symbols. The second line of a pair contains a integer number <i>N</i> (0&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100). An input is ended with the pair of lines, the first one of them contains the only symbol "#".</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each pair of lines your program should write to an output a message: "Not a floating point number", if the string <i>S</i> is not a correct &lt;real number&gt; according to the given above specification. If <i>S</i> represents a correct &lt;real number&gt;, your program should write to an output this number formatted as a &lt;simple real number&gt; with N symbols after a decimal point. While forming the result you ought to note:

<OL>
<LI>An integral part of a number should be non-empty.</LI>
<LI>There shouldn't be leading zeroes in a non-zero integral part of a number. A zero integral part of a number should consist of an only zero.</LI>
<LI>A fractional part of a number should contain exactly N symbols.</LI>
<LI>There shouldn't be a sign "+" before a positive number.</LI>
<LI>You shouldn't round off a number.</LI>
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is guaranteed that a length of a result will not exceed 200 symbols.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10.23
0
.04
1
-0.051e0
1
1.1e30
10
-1.1E-30
1
2468097632.1358642324268913e-2
20
e23
3
1 e3
1
#</PRE></TD><TD><PRE CLASS="intable">10
0.0
0.0
1100000000000000000000000000000.0000000000
0.0
24680976.32135864232426891300
Not a floating point number
Not a floating point number</PRE></TD></TR></TABLE>
______________________________________________________
1075||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are three points in a 3-dimensional space: <i>A</i>, <i>B</i> and <i>C</i>. All the coordinates of the points are integer numbers with absolute values not greater than 1000. A solid ball with a center in the point <i>C</i> is firmly fixed. A radius of the ball is <i>R</i>, a positive integer number. Distances from the point <i>C</i> to the points <i>A</i> and <i>B</i> are strictly greater than <i>R</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is necessary to stretch a thread of minimal length between points <i>A</i> and <i>B</i>. Surely, the thread should be outside of the ball.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find out a length of the thread.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first three lines contain coordinates of the points <i>A</i>, <i>B</i> and <i>C</i> respectively. The fourth one contains a radius <i>R</i> of the ball.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain a minimal length of the thread to within 2 symbols after a decimal point. You should output answer with two or more digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 12
12 0 0
10 0 10
10
</PRE></TD><TD><PRE CLASS="intable">19.71
</PRE></TD></TR></TABLE>
______________________________________________________
1076||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You were just hired as CEO of the local junkyard.One of your jobs is dealing with the incoming trash and sorting it for recycling.The trash comes every day in <i>N</i> containers and each of these containers contains certain amount of each of the <i>N</i> types of trash. Given the amount of trash in the containers find the optimal way to sort the trash. Sorting the trash means putting every type of trash in separate container. Each of the given containers has infinite capacity. The effort for moving one unit of trash 
from container <i>i</i> to <i>j</i> is 1 if <i>i</i>&nbsp;&ne;&nbsp;<i>j</i> otherwise it is 0.You are to minimize the total effort.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;150), the rest of the input contains the descriptions of the containers.The (1&nbsp;+&nbsp;<i>i</i>)-th line contains the description of the <i>i</i>-th container the <i>j</i>-th amount (0&nbsp;&le;&nbsp;amount&nbsp;&le;&nbsp;100) on this line denotes the amount of the <i>j</i>-th type of trash in the <i>i</i>-th container.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write the minimal effort that is required for sorting the trash.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
62 41 86 94
73 58 11 12
69 93 89 88
81 40 69 13
</PRE></TD><TD><PRE CLASS="intable">650</PRE></TD></TR></TABLE>
______________________________________________________
1077||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>N</i> cities numbered from 1 to <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;200)
and <i>M</i> two-way roads connect them. There are at most one road between two cities. In summer holiday, members of DSAP Group want to make some traveling tours. Each tour is a route passes <i>K</i> different cities (<i>K</i>&nbsp;&gt;&nbsp;2) <i>T</i><sub>1</sub>, <i>T</i><sub>2</sub>, &hellip;, <i>T<sub>K</sub></i>
and return to <i>T</i><sub>1</sub>. Your task is to help them make <i>T</i> tours such that:

<ol>
    <li>Each of these <i>T</i> tours has at least a road that does not belong to (<i>T</i>&minus;1) other tours.</li>
    <li><i>T</i> is maximum.</li>
</ol></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains <i>N</i> and <i>M</i> separated with white spaces. Then follow by <i>M</i> lines, each has two number <i>H</i> and <i>T</i> which means there is a road connect city <i>H</i> and city <i>T</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You must output an integer number <i>T</i>&nbsp;&mdash; the maximum number of tours. If <i>T</i>&nbsp;&gt;&nbsp;0, then <i>T</i> lines followed, each describe a tour. The first number of each line is <i>K</i>&nbsp;&mdash; the amount of different cities in the tour, then <i>K</i> numbers which represent <i>K</i> cities in the tour.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are more than one solution, you can output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 7
1 2
1 3
1 4
2 4
2 3
3 4
5 4
</PRE></TD><TD><PRE CLASS="intable">3
3 1 2 4
3 1 4 3
4 1 2 3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1078||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A number of segments are lying on a line. Every segment is given with the coordinates of its endpoints. Segments are numbered from 1 to <i>N</i> (0&nbsp;&lt;&nbsp;<i>N</i>&nbsp;&lt;&nbsp;500). We assume, that one segment is inside another, if the two segments are different, the first one is fully contained in the second one, and their endpoints do not coincide. Write a program, which finds the numbers of the segments in the longest sequence of segments which are contained in. In the sequence, every segment except the last is inside the next segment in the sequence.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains one integer <i>N</i>. Next, there are <i>N</i> lines, with two integers on every line, which are the coordinates of the left and the right endpoints of the corresponding segment. These coordinates
are integers in the interval [–10000, 10000]. We assume that, the given segments are numbered according to their place in the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line must contain one integer, equal to the number of segments in the found sequence. The following line must contain the numbers of the segments in this sequence. These numbers must be outputted, in the order in which the segments' lengths increase, starting from the smallest.
If there are more than one output sequences, write any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
-2 2
-1 1
-3 3
4 5
</PRE></TD><TD><PRE CLASS="intable">3
2 1 3

</PRE></TD></TR></TABLE>
______________________________________________________
1079||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider the sequence of numbers <i>a<sub>i</sub></i>, <i>i</i> = 0, 1, 2, &hellip;, which satisfies the following requirements:
<ul>
<li><i>a</i><sub>0</sub> = 0</li>
<li><i>a</i><sub>1</sub> = 1</li>
<li><i>a</i><sub>2<i>i</i></sub> = <i>a<sub>i</sub></i></li>
<li><i>a</i><sub>2<i>i</i>+1</sub> = <i>a<sub>i</sub></i> + <i>a</i><sub><i>i</i>+1</sub></li>
</ul>
for every <i>i</i> = 1, 2, 3, &hellip; .</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program which for a given value of <i>n</i> finds
the largest number among the numbers <i>a</i><sub>0</sub>, <i>a</i><sub>1</sub>, &hellip;, <i>a<sub>n</sub></i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given several test cases (not more than 10). Each test case is a line containing an integer <i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;99&nbsp;999). 
The last line of input contains 0.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For every <i>n</i> in the input write the corresponding maximum value found.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
10
0
</PRE></TD><TD><PRE CLASS="intable">3
4
</PRE></TD></TR></TABLE>
______________________________________________________
1080||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We consider a geographical map with <i>N</i> countries numbered from 1 to <i>N</i> (0&nbsp;&lt;&nbsp;<i>N</i>&nbsp;&lt;&nbsp;99). For every country we know the numbers of other countries which are connected with its border. From every country we can reach to any other one, eventually crossing some borders. Write a program which determines whether it is possible to color the map only in two colors&nbsp;&mdash; red and blue in such a way that if two countries are connected their colors are different. The color of the first country is red. Your program must output one possible coloring for the other countries, or show, that such coloring is impossible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first line is written the number <i>N</i>. On the following <i>N</i> lines, the <i>i</i>-th line contains the countries to which the <i>i</i>-th country is connected. Every integer on this line is bigger than <i>i</i>, except the last one which is 0 and marks that no more countries are listed for country <i>i</i>. If a line contains 0, that means that the <i>i</i>-th country is not connected to any other country, which number is larger than <i>i</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output contains exactly one line. If the coloring is 
possible, this line must contain a list of zeros and ones, 
without any separators between them. The <i>i</i>-th digit
in this sequence is the color of the <i>i</i>-th country. 0 corresponds to red color, and one&nbsp;&mdash; to blue color. If a coloring is not possible, output the integer &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2 0
3 0
0
</PRE></TD><TD><PRE CLASS="intable">010
</PRE></TD></TR></TABLE>
______________________________________________________
1081||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider all the sequences with length (0&nbsp;&lt;&nbsp;<i>N</i>&nbsp;&lt;&nbsp;44), containing only the elements 0 and 1, and no two ones are adjacent (110 is not a valid sequence of length 3, 0101 is a valid sequence of length 4). Write a program which finds the sequence, which is on <i>K</i>-th place (0&nbsp;&lt;&nbsp;<i>K</i>&nbsp;&lt;&nbsp;10<sup>9</sup>) in the lexicographically sorted in ascending order collection of the described sequences.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains two positive integers <i>N</i> and <i>K</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the found sequence or &minus;1 if the number <i>K</i> is larger then the number of valid sequences.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 1
</PRE></TD><TD><PRE CLASS="intable">000
</PRE></TD></TR></TABLE>
______________________________________________________
1082||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time there lived a tsar that has a daughter — Beautiful Vasilisa. There 
were many of the young men that wanted to marry her but she repelled all suitors. The 
tsar was tired of her jigs, he got angry and issued an order: "The first who solves my 
puzzle, will marry Vasilisa!"
Ivanushka decided to try his fortune. He came to the tsar and the tsar told him: 
"This is a program for you. Input <I>N</i> numbers and the program will tell you who you 
should marry. I give you a day to think."
Ivanuska looked at the program and got upset: there were unknown letters, 
omnifarious symbols. The time passed. Ivanushka has thought out nothing.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program was as follows.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE BORDER="1" WIDTH="700"><TR><TH>The C program</TH><TH>The Pascal program</TH></TR>
<TR><TD>
<PRE>
 #include &lt;stdio.h&gt;  
 long c;
 long A[N];
 
 long P(long l, long r)
 {
  long x=A[l],
       i=l-1,
       j=r+1,
       t;
  while(1)
  {
   do{--j; ++c;}
   while(A[j]&gt;x);
   do{++i; ++c;}
   while(A[i]&lt;x);
   if(i&lt;j)
   {
    t=A[i];
    A[i]=A[j];
    A[j]=t;
   }
   else return j;
  }
 }
 
 void Q(long l, long r)
 {
  long n;
  if(l&lt;r)
  {
   n=P(l,r);
   Q(l,n);
   Q(n+1,r);
  }
 }
 
 int main(void)
 {
  c=0;
  for(long i=0; i&lt;N; ++i)
   scanf("%ld", &A[i]);
  Q(0,N-1);
  if(c==(N*N+3*N-4)/2)
   printf
   ("Beutiful Vasilisa");
  else printf
   ("Immortal Koshcei");
  return 0;
 }
</PRE>
</TD><TD>
<PRE>
 var A:array [1..N] of 
longint;
     c:longint;
     i:integer;
 function 
P(l,r:longint):longint;
 var i,j,t,x:longint;
 begin
  x:=A[l]; i:=l-1; j:=r+1;
  while true do
  begin
   repeat dec(j);inc(c)
   until A[j]&lt;=x;
   repeat inc(i);inc(c)
   until A[i]&gt;=x;
   if i&lt;j then
   begin
    t:=A[i];
    A[i]:=A[j];
    A[j]:=t
   end
   else
   begin P:=j; exit end
  end
 end;
 
 procedure Q(l,r:longint);
 var n:longint;
 begin
  if l&lt;r then
  begin
   n:=P(l,r);
   Q(l,n);
   Q(n+1,r)
  end
 end;
 
 begin
  c:=0;
  for i:=1 to N do 
read(A[i]);
  Q(1,N);
  if c=(N*N+3*N-4) div 2 
then
   writeln
   ('Beutiful Vasilisa')
  else writeln
   ('Immortal Koshcei');
 end.

</PRE>
</TD></TR></TABLE>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now you know this program. You may try to help Ivanushka.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of an input contains a positive number <I>N</i> &le; 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write to an output <I>N</i> numbers in one line. The tsar's program given 
those numbers should output a message "Beautiful Vasilisa" The numbers should be 
separated with a space. If several variants are possible choose any you like.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">3 7 19
</PRE></TD></TR></TABLE>
______________________________________________________
1083||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Definition 1.</b> <i>n</i>!!&hellip;! = <i>n</i>(<i>n</i>&minus;<i>k</i>)(<i>n</i>&minus;2<i>k</i>)&hellip;(<i>n</i> mod <i>k</i>), if <i>k</i> doesn’t divide <i>n</i>; 
<i>n</i>!!&hellip;! = <i>n</i>(<i>n</i>&minus;<i>k</i>)(<i>n</i>&minus;2<i>k</i>)&hellip;<i>k</i>, if <i>k</i> divides <i>n</i> (There are <I>k</i> marks ! in the both cases).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Definition 2.</b>
<I>X</i> mod <I>Y</i> — a remainder after division of <I>X</i> by <I>Y</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, 10 mod 3 = 1; 3! = 3·2·1; 10!!! = 10·7·4·1.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given numbers <I>n</i> and <I>k</i> we have calculated a value of the expression in the first definition. Can you do it as well?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains the only line: one integer <I>n</i>, 1 &le; <i>n</i> &le; 10, then exactly one space, then <I>k</i> exclamation marks, 1 &le; <i>k</i> &le; 20.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains one number — <i>n</i>!!&hellip;! (there are <I>k</i> marks ! here).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 !!
</PRE></TD><TD><PRE CLASS="intable">945
</PRE></TD></TR></TABLE>
______________________________________________________
1084||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Someone has let a goat in a square kitchen-garden and had bound it to a stake. The stake is driven into the ground in the very midst of the square. The goat is hungry as a hunter and very voracious, and eats everything that can be reached without leaving the square and tearing off the rope. What area of the kitchen-garden will be ate round?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains lengths of the garden sides and a cord length in meters (positive integers not exceeding 100, located in one line and separated with a space).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain an area of the kitchen-garden (in square meters to within 3 symbols after a decimal point), ate round by the goat.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 6</PRE></TD><TD><PRE CLASS="intable">95.091</PRE></TD></TR></TABLE>
______________________________________________________
1085||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>K</i> friends has decided to meet in order to celebrate their victory at the programming contest. Unfortunately, because of the tickets rise in price there is a problem: all of them live in different parts of the city, and they are to choose a place of meeting so that they wouldn't pay too much for the tickets. You are to help them make the best choice.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All stops are enumerated with integers 1, …, <I>N</i> inclusive. There are <I>M</i> tram routes in the city (the friends take only trams and do not go on foot from stop to stop). For each route numbers of its stops are known. For each friend we know an amount of money he has and whether he has a month tram ticket. A ticket price equals 4 rubles.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find out a stop number, such that all of the friends might come there and the sum of money they spend for their tramps would be minimal. Naturally, they may change routes (it means that each one may make changes on his way to the required stop). Note, that changing the route one has to pay for a new ticket: the friends are honest people — they do always pay for tickets. Everyone pays for a ticket from his own money. No one is to leave money for the return tickets.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <I>N</i> and <I>M</i>; 1 &le; <I>N</i>, <I>M</i> &le; 100 (<I>N</i> is a number of stops, <I>M</i> is a number of routes). The next <I>M</i> lines define the routes in the following sort: there is an integer <I>L</i> in the beginning of a line — that is an amount of stops of the corresponding route (1 &le; <I>L</i> &le; 100). Then <I>L</i> integers defining stops numbers of the route follow. The numbers are separated with a space. A route is defined by its stops along the line in one direction.

The next line contains an integer <I>K</i> (1 &le; <I>K</i> &le; 100), that is an amount of friends. The next <I>K</i> lines contain information about each of them (one line for one person): there is a positive integer in the beginning of a line that is an amount of money (in rubles) the person has, then a number of a stop that he goes there from his home on foot, then 0 (if this person has no month ticket) or 1 (if he has). The numbers in a line are separated with a space. No one of the friends has more than 1000 rubles.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a number of a stop that is a meeting 
point (if there are several numbers choose the minimal one) and a total sum of money (in rubles) that the friends has paid for their trips to the appointed place. The numbers should be separated with a space. If the friends won't be able to meet at one stop, output the only number 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
2 1 2
2 2 3
2 3 4
3
27 1 0
15 4 0
45 4 0</PRE></TD><TD><PRE CLASS="intable">4 12</PRE></TD></TR></TABLE>
______________________________________________________
1086||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">While preparing this problem set the jury has run into the following problem: it was 
necessary to send by e-mail the texts of the problems. As it is well known, e-mail is not reliable, messages are sent not enciphered, there is a danger that someone can intercept them. The members of the program committee wanted no participant know the texts of the problems before the start of the contest. That's why they resorted to cryptography methods in order to save the texts of the problems from an unsanctioned reading. The jury gas worked up a new way of enciphering of a text. It is not patented yet, so it's kept secret. However, we'll reveal you one secret: the new algorithm is based on the work with prime numbers. In particular, in uses a calculation of <I>n</i>-th by order prime number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Several members of the program committee independently have worked up 
programs that make such calculations, but these programs produce different answers. 
Each one of the programmers is sure that his program works correctly. That's why the 
jury has reached the deadlock and can't continue working. The contest is about not to 
take place.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to help to the jury and to save the contest. We want you to write a 
program that calculates the <I>n</i>-th by order prime number. The main thing is that your 
program should work correctly.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains a positive integer <i>k</i>. Then <i>k</i> positive integers follow (one in each line). The numbers don't exceed 15000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each number <I>n</i> you should output the <I>n</i>-th by order prime number.
Each number should be in its line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3
2
5
7
</PRE></TD><TD><PRE CLASS="intable">5
3
11
17
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The <I>prime number</i> is a positive integer that has exactly two different 
positive divisors, i.e. 1 is not a prime number.</DIV></DIV>
______________________________________________________
1087||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You probably know the game where two players in turns take 1 to 3 stones from a 
pile. Looses the one who takes the last stone. We'll generalize this well known game. 
Assume that both of the players can take not 1, 2 or 3 stones, but 
<I>k</i><SUB>1</sub>, <I>k</i><SUB>2</sub>, …, <I>k<SUB>m</sub></i> ones. 
Again we'll be interested in one question: who wins in the perfect game. It is guaranteed that it is possible to make next move irrespective to already made moves.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers: <I>n</i> and <I>m</i> (<nobr>1 &le; <I>n</i> &le; 10000;</nobr> <nobr>1 &le; <I>m</i> &le; 50</nobr>) — they are an initial amount of stones in the pile and an amount of numbers <I>k</i><SUB>1</sub>, …, <I>k<SUB>m</sub></i>. The 
second line consists of the numbers <I>k</i><SUB>1</sub>, …, <I>k<SUB>m</sub></i>, separated with a space (<nobr>1 &le; <I>k<SUB>i</sub></i> &le; <I>n</i></nobr>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output 1, if the first player (the first to take stones) wins in a perfect game.
Otherwise, output 2.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">17 3
1 3 4
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1088||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Misfortune has come to the Russian land. Foul Idol has dragged away good fellow 
Alyosha Popovich and has chained him with iron chains to the magical stone, so that Alyosha canТt even step. It is necessary to rescue Alyosha from the captivity but nobody is able to: the Tsar is on the war with his detachment. Ilya Murometz has thought a bit and says: "I'll go to rescue my friend Alyosha from Foul Idol alone, and if he is to die there, so am I". Ilya has said these words, and has leaped on to his good horse and has gone seeking for Alyosha.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ilya rides his horse and comes to a stone, but not the magic one that he has been looking for, but to the road stone. As usual, it is written there: "If you go left — you'll get `time limit', if you go right — you'll get `wrong answer'". Ilya Murometz sits down and falls apart. Suddenly a little bird sits near and asks: "Why are you upset, good fellow?" Ilya Murometz tells her about his problem and the bird tells him: "It's always here like this: if you go left — in an hour you'll see such road stone; and so until you come to the sea. Foul Idol has made this. He wants you to get lost here. Go home, Ilya Murometz, don't try your doom!" And the bird disappears, as there hasn't been the one. Ilya Murometz thinks a lot, but decides not to betray his friendship. He leaps on to his good horse and continues his way. And he rides, and he rides, and he rides.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ilya Murometz dismounts near a road stone that is like the first one and falls apart more than the first time. Suddenly he sees the magic stone — it is close to him, but Ilya Murometz can't leave the road — he'll disappear in the marsh. He sees the sea very close to him — he can even count: there's <I>D</i> hours of the way from the magic stone to the sea, and from himself he'll have to ride <I>E</i> hours. But from his father he new that from the first stone to the sea (no metter where he turns) 
there's <I>F</i> hours way.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He looks closely and sees that the road leads to the moorings, and the moorings are 
enumerated with integers. Ilya looks very-very closely and he finds out that there is a rule of the enumeration: if one rides from the first stone always to the right — he comes to the mooring #1, if at the last moment one turns left — he comes to the mooring #2, and if one always turns right, one before the last time he turns left and then turns right — he comes to the mooring #3! Ilya Murometz sees, that the nearest mooring to his stone is #<I>E<SUB>p</sub></i>, and the nearest one to the magic stone is  #<I>D<SUB>p</sub></i>. But the roads branch, and there are other moorings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The good horse turns his head and tells to Ilya Murometz: "Ilyusha! I won't gallop more 
than <I>H</i> hours." Help to Ilya Murometz to find out, wether he saves Alyosha Popovich, or he 
stays himself in the foreign land.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains 6 integers: <i>D</i>, <i>E</i>, <i>F</i>, <i>D<SUB>p</SUB></i>, <i>E<SUB>p</SUB></i>, <i>H</i>. 0 &le; <i>D</i>, <i>E</i>, <i>F</i>, <i>H</i> &le; 30; 1 &le; <I>E<SUB>p</sub>, D<SUB>p</sub></i> &le; 1 073 741 824. All numbers are separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain the word “YES”, if Ilya Murometz will reach Alyosha Popovich on his horse, and otherwise — the word “NO”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2 3 2 6 4</PRE></TD><TD><PRE CLASS="intable">YES</PRE></TD></TR></TABLE>
______________________________________________________
1089||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your teacher of English has recently told you that she dreams about the automated 
system of correction and count of mistakes that her pupils do very frequently.
The 8<SUP>th</sup> of March is soon and you've decided that if you write such program and you'll present your teacher with it, then she will be glad and may be will be more favorable to you at the exam. The task is to replace words that differ from the ones in the vocabulary not more than by a letter and to count an amount of the made mistakes. Your teacher must have forgotten that her pupils sometimes forget to write letters and even sometimes they write extra letters - excellent! You are not to think about it!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line and then up to the line containing the only symbol `#' go 
vocabulary words, each word in its line. In the lines that go after the one containing `#' goers a text that you are to check-up. There are not more than 100 words in the 
vocabulary. A length of a word in the vocabulary doesn't exceed 8 symbols. A length of 
the text being checked-up doesn't exceed 1000 words. All the words are written in the 
lower case. A word might contain Latin letters from `a' to `z'. The vocabulary is compiled so that for each word not more than one variant of correction is possible. There's exactly one end of line character at the end of the text.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the corrected text in the same format as the initial one (the same punctuation marks, line breaks and words that are absent in the vocabulary) and in the line next to the text there is to be a number of corrections.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">country
occupies
surface
covers
russia
largest
europe
part
about
world
#
the rushia is the larjest cauntry in the vorld.
it ockupies ebout one-seventh of the earth's surfase.
it kovers the eastern park of yurope and the northern 
park of asia.
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">the russia is the largest country in the world.
it occupies about one-seventh of the earth's surface.
it covers the eastern part of europe and the northern 
part of asia.
11
</PRE></TD></TR></TABLE>
______________________________________________________
1090||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The sergeant ordered that all the recruits stand in rows. The recruits have formed <i>K</i> rows with <i>N</i> people in each, but failed to stand according to their height. The right way to stand in a row is as following: the first soldier must be the highest, the second must be the second highest and so on; the last soldier in a row must be the shortest. In order to teach the young people how to form rows, the sergeant ordered that each of the recruits jump as many times as there are recruits before him in his row who are shorter than he. Note that there are no two recruits of the same height.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The sergeant wants to find which of the rows will jump the greatest total number of times in order to send this row to work in the kitchen. Help the sergeant to find this row.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two positive integers <i>N</i> and <i>K</i> (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10000, 1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;20). The following <i>K</i> lines contain <i>N</i> integers each. The recruits in each row are numbered according to their height (1&nbsp;&mdash; the highest, <i>N</i>&nbsp;&mdash; the shortest). Each line shows the order in which the recruits stand in the corresponding row. The first integer in a line is the number of the first recruit in a row and so on. Therefore a recruit jumps as many times as there are numbers which are greater than his number in the line before this number.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of the row in which the total amount of jumps is the greatest. If there are several rows with the maximal total amount of jumps you should output the minimal of their numbers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2 3
2 1 3
3 2 1
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1091||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">University of New Tmutarakan trains the first-class specialists in mental arithmetic. To enter the University you should master arithmetic perfectly. One of the entrance exams at the Divisibility Department is the following. Examinees are asked to find <i>K</i> different numbers that have a common divisor greater than 1. All numbers in each set should not exceed a given number <i>S</i>. The numbers <i>K</i> and <i>S</i> are announced at the beginning of the exam. To exclude copying (the Department is the most prestigious in the town!) each set of numbers is credited only once (to the person who submitted it first).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Last year these numbers were <i>K</i>=25 and <i>S</i>=49 and, unfortunately, nobody passed the exam. Moreover, it was proved later by the best minds of the Department that there do not exist sets of numbers with the required properties. To avoid embarrassment this year, the dean asked for your help. You should find the number of sets of <i>K</i> different numbers, each of the numbers not exceeding <i>S</i>, which have a common divisor greater than 1. Of course, the number of such sets equals the maximal possible number of new students of the Department.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains numbers <i>K</i> and <i>S</i> (2 &le; <i>K</i> &le; <i>S</i> &le; 50).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the maximal possible number of the Department's new students if this number does not exceed 10000 which is the maximal capacity of the Department, otherwise you should output 10000.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 10
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR></TABLE>
______________________________________________________
1092||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider a square table of size 2<i>N</i>+1 by 2<i>N</i>+1 with a cells each containing the sign "+" or the sign "&minus;". We call an arbitrary set of 2<i>N</i>+1 cells a transversal if each line and each column of the table contain exactly one cell belonging to the set.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">By one operation you are allowed to change signs to opposite in all cells of one transversal. You are asked to determine if it is possible to obtain a table containing not more than 2<i>N</i> cells with the sign "+" by a sequence of such operations.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains a positive integer <i>N</i> not exceeding 20. The next 2<i>N</i>+1 lines contain the table. They consist of the symbols "+" and "-" without spaces between them.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain the words "No solution" if a necessary sequence of operations does not exist. Otherwise, the first line of the output should contain the words "There is solution:" and the next lines should contain a sequence of operations that leads to the required result. Each of these lines should describe one transversal and should contain the numbers from 1 to 2<i>N</i>+1. Number <i>K</i> at position <i>S</i> means that the transversal includes the cell at the intersection of the line number <i>S</i> with the column number <i>K</i>. The numbers should be separated with a space.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is sufficient to give only one sequence of operations if there exist many.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
+++
++-
+-+
</PRE></TD><TD><PRE CLASS="intable">There is solution:
1 2 3
2 3 1
1 3 2
3 1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1093||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Maybe you know about the game called Darts. The goal of the game is to hit a circular target, which is called a dartboard. To do so you should take a dart and throw it to the dartboard. Of course, it takes time to learn how to hit the dartboard. And your task is to speed the learning by writing a program that determines if a dart will hit or miss the dartboard.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's make some assumptions about the objects under consideration.
<ol>
<li>A dartboard is a circular part of a plane. It is defined by coordinates of its center (<i>C<sub>x</sub></i>, <i>C<sub>y</sub></i> and <i>C<sub>z</sub></i>), radius <i>R</i>, and coordinates of a vector that is orthogonal to the plane of the dartboard (<i>N<sub>x</sub></i>, <i>N<sub>y</sub></i> and <i>N<sub>z</sub></i>).</li>
<li>A dart is a point that moves according the following equations:<br>
<i>M<sub>x</sub></i> = <i>S<sub>x</sub></i> + <i>V<sub>x</sub>&middot;t</i><br>
<i>M<sub>y</sub></i> = <i>S<sub>y</sub></i> + <i>V<sub>y</sub>&middot;t</i><br>
<i>M<sub>z</sub></i> = <i>S<sub>z</sub></i> + <i>V<sub>z</sub>&middot;t</i> &minus; (<i>g</i>/2)&middot;<i>t</i><sup>2</sup><br>
Here <i>S<sub>x</sub></i>, <i>S<sub>y</sub></i>, and <i>S<sub>z</sub></i> are coordinates of initial position of the dart, <i>V<sub>x</sub></i>, <i>V<sub>y</sub></i>, and <i>V<sub>z</sub></i> are components of initial velocity of the dart, <i>M<sub>x</sub></i>, <i>M<sub>y</sub></i>, and <i>M<sub>z</sub></i> are coordinates of the point where the dart will be at time <i>t</i>, <i>g</i> is the acceleration of gravity and is assumed to be equal to 10.</li>
<li>You may assume that the dart is thrown with a nonzero horizontal component (i.e. <i>V<sub>x</sub></i> or <i>V<sub>y</sub></i> is non-zero).</li>
<li>You may assume no friction.</li>
<li>To hit the dartboard the dart should hit it strictly inside boundary from any side.</li>
<li>Initially the dart is not inside the dartboard's boundary.</li>
</ol></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains 13 real numbers. They are (according to notation given before):<br>
<i>C<sub>x</sub> C<sub>y</sub> C<sub>z</sub> N<sub>x</sub> N<sub>y</sub> N<sub>z</sub> R<br>
S<sub>x</sub> S<sub>y</sub> S<sub>z</sub> V<sub>x</sub> V<sub>y</sub> V<sub>z</sub></i><br>
All numbers are not greater than 500 in their absolute values and given with at most 4 digits after decimal point. <i>R</i> is positive.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain the only word "HIT" (without quotes) if dart hits the dartboard, and word "MISSED" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">47 0 -72 1 0 1 4.25
0 0 0 10 0 10</PRE></TD><TD><PRE CLASS="intable">HIT</PRE></TD></TR></TABLE>
______________________________________________________
1094||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new one-line electronic screen (e-screen) especially designed for quick input and change of information was installed at a supermarket. All information is entered by an operator. Every time the operator presses a button corresponding to a symbol this symbol is shown on the e-screen at the position where the cursor is located at that moment (therefore the symbol that was shown at that position earlier is erased) and then the cursor moves one position to the right.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The keyboard contains letters a-z, A-Z, digits 0-9, punctuation signs (:;-!?.,), and the space button. There are also two keys that move the cursor one position to the right and to the left without erasing anything. The width of the screen is 80 symbols. When the cursor reaches left or right edge of the screen it is automatically placed at the first position to the left.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The new e-screen had worked perfectly when it was run by its seller, but when the seller had gone it was found that nobody could operate the e-screen properly. Besides, the e-screen was installed in such a place that the operator could not see it. Your task is to make a program emulation of the e-screen so that the operator could see the results of his or her actions.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single line of the input contains a sequence of the buttons pressed by the operator. The symbol '&gt;' stands for the move of the cursor one position to the right and the symbol '&lt;' stands for the move of the cursor one position to the left. There are no more than 10000 symbols at the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the line that would be shown on the e-screen after pressing the given sequence of the buttons. Assume that at the beginning the e-screen contains 80 spaces and the cursor is placed at the first position to the left.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">&gt;&gt;&lt;&lt;&lt;Look for clothes at the &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;second flo
or. &lt;&lt;&lt;&lt;&lt;&lt;&lt;Fresh pizza and &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;hamburger a
t a shop right to &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;the entrance. Call &lt;&lt;&lt;&lt;
&lt;&lt;&lt;&lt;&lt;&lt; 123&lt;-456&lt;-8790 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;to order &lt;&lt;&lt;&lt;&lt;&lt;&lt;
&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;computers&lt; and office&lt;&lt;&lt;&lt;&lt;&lt;&lt; chairs.
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Look for second hamburger at computer and chairs.790                            
</PRE></TD></TR></TABLE>
______________________________________________________
1095||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor knows that a certain positive integer has in its decimal form each of the digits 1,2,3,4. You are asked to determine if Nikifor can rearrange the digits of the number in such a way that the new number divides by 7.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> (not exceeding 10000) of positive integers that are to be checked. The next <i>N</i> lines contain these integers. Each number has no more than 20 digits.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of the <i>N</i> numbers output a number divisible by 7 that can be obtained from the corresponding number from the input data by a rearrangement of the digits. If such rearrangement does not exist you should output 0 in the corresponding line. In the case of several valid rearrangements you may find only one of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1234
531234
</PRE></TD><TD><PRE CLASS="intable">4123
354123
</PRE></TD></TR></TABLE>
______________________________________________________
1096||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everybody who had ridden a Ekaterinburg bus could notice that on the inner side of the plate with the number of the route there was a number of another route.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day the driver of a new bus came to the storehouse and found that there was no plate with the number of the route he had been assigned to ride. The storekeeper simply gave him a random plate and advised to change it for a plate from another bus. But the drivers who had the necessary plates did not need the plate given by the storekeeper. Any driver will agree to change his plate for another only if this plate has the number of his route. Help the new driver to find a shortest sequence of changes that will enable him to get a plate with the number of his route.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contain the number <i>K</i> &le; 1000 of the acting buses (excluding the new bus). The buses are numbered from 1 to <i>K</i>. The next <i>K</i> lines contain the number of the route of the corresponding bus and the number on the other side of its plate. Numbers of routes are integers from 1 to 2000.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line of the input contains the number of the route of the new bus and the numbers on the plate given by the storekeeper.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain the word IMPOSSIBLE if it is impossible to get the needed number by a sequence of changes otherwise it should contain the least necessary number of changes <i>M</i> &gt; 0 followed by an <i>M</i> lines that contain sequentially numbers of buses (not routes!) with drivers of which the plates must be changed. If there are several solutions, you can output any one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
8 5
5 4
7 4
1 5
4 1 8
</PRE></TD><TD><PRE CLASS="intable">2
4
2
</PRE></TD></TR></TABLE>
______________________________________________________
1097||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Square Parliament of the Square country (recall the corresponding problem from the USU 2001 personal contest) has decreed that the National Square Park be created. Of course, the Park should occupy a large square. Unfortunately, at the moment a lot of square citizens have invested (with the help of last championship's participants) their quadrics into the land so that a part of the country is already occupied. It is now impossible to find a land for the Park without affecting interests of the private owners. Thus some of the pieces of land must be expropriated.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To avoid social unrest the Parliament has to locate the Park so that the interests of as less important as possible citizens were affected. It is better to expropriate land from a thousand of simple citizens than from one member of the Parliament or from one bank-owner.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The occupied pieces of land are marked with numbers from 1 to 100 according to importance of the owner. So all free land and pieces of land belonging to honest tax-payers are marked with number 1, the land belonging to members of the Parliament is marked with 98, possessions of great businessmen are marked with 99, and the property of the square President is marked with 100.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>L</i>, which is the length of a side of the Square country (in meters), and the number <i>A</i>, which is the length of a side of the Park (1 &le; <i>A</i> &le; <i>L</i> &le; 10000). The next line contains the number <i>M</i> (1 &le; <i>M</i> &le; 100) of occupied pieces of land (according to the square rules a piece of land is a square with integer coordinates of corners and its sides are parallel to the axes).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next <i>M</i> lines contain information about these pieces of land: importance of the owner, length of the square's side and the coordinates of the lower left corner, which are integers from 1 to <i>L</i> (the coordinates of the lower left corner of the Square country itself are 1,1). Each piece of land is contained in the country and may intersect another piece of land only along its boundary.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that land marked with number 1 (that is of importance 1) is not mentioned in the list altogether. Besides, some pieces of land belong to the members of (not square) Jury who helped to formulate the previous problem. This land is marked with number 255 and cannot be expropriated at all.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the least possible importance of land which must be expropriated (a number from 1 to 100) or the word IMPOSSIBLE if it is impossible to create the Park not involving land of importance more than 100. The number and area of expropriated pieces of land are not important. You should only take into account importance of the most important of the affected land-owners.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
6
94 2 4 1
3 1 1 1
2 1 1 2
2 2 2 1
100 1 2 4
255 1 5 5
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1098||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Holding a collegiate programming contest is a very exhausting work. There is a well-known proverb that one fool can ask so many questions that a hundred clever men will not answer. And during a collegiate programming contest questions are asked by one hundred clever people.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The jury of the Third Urals Collegiate Programming Contest being clever enough has found a simple way to make its work easier. We have invented a simple algorithm that will help us answer ALL your numerous questions! Moreover, this algorithm guarantees that the same questions will have the same answers (this would be hardly possible, if we would undertook such a task ourselves). According to this algorithm a member of the jury starts to delete characters of the question in the following order:
<OL>
<LI>Starting from the first character he or she counts out <i>N</i>&minus;1 characters (spaces, punctuation marks etc. are considered to be characters too) and deletes the <i>N</i>th character.
<LI>If a string ends the count continues from the beginning of the string.
<LI>After deleting a character the count restarts from the character that would be the (<i>N</i>+1)-st in the previous count.
<LI>If the last remaining character is a question-mark ("?") then the answer to the question is "Yes". If it is a space then the answer is "No". Any other character will lead to "No comments" answer.
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should help the jury and write a program that will do a hard work of answering your questions tomorrow. The number N is secret and will not be announced even after the end of the contest. Your program should use <i>N</i>&nbsp;=&nbsp;1999.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, taking a string "Is it a good question?" (its length is 22) the characters will be counted in the following way: "Is it a good question?Is it &hellip; quest" and "i" will be deleted. Then the count restarts from "on?Is it&hellip;" etc., until "s" will be left (thus the answer is "No comments", as usual).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input is a question, that is any text containing at least one character (end of line is not a character). Each character of the input (excepting the ends of lines) is a part of the question. You should read question from input.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The size of the input is not more than 30000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The answer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Does the jury of this programming contest use the
algorithm described in this problem to answer my questions?
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR><TR><TD><PRE CLASS="intable">At least, will anybody READ my question?
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR><TR><TD><PRE CLASS="intable">This is
UNFAIR!
</PRE></TD><TD><PRE CLASS="intable">No comments
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are no spaces in the sample inputs except for those between words in one line. Thus the first question contains 108 characters, the second contains 40 and the third contains 14. 
</DIV></DIV>
______________________________________________________
1099||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is certain amount of night guards that are available to protect the local junkyard 
from possible junk robberies. These guards need to scheduled in pairs, so that each pair 
guards at different night. The junkyard CEO ordered you to write a program which given the 
guards characteristics determines the maximum amount of scheduled guards (the rest will be 
fired). Please note that each guard can be scheduled with only one of his colleagues and
no guard can work alone.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains one number <i>N</i> &le; 222 which is the amount of night guards.
Unlimited number of lines consisting of unordered pairs (<i>i</i>,&nbsp;<i>j</i>) follow, each such pair means 
that guard #<i>i</i> and guard #<i>j</i> can work together, because it is possible to find uniforms that 
suit both of them (The junkyard uses different parts of uniforms for different guards i.e. helmets, pants, jackets. It is impossible to put small helmet on a guard with a big head or big shoes on guard with small feet). The input ends with Eof.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output one possible optimal assignment. On the first line of the output write the even number <i>C</i>, the amount of scheduled guards. Then output <i>C</i>/2 lines, each containing 2 integers (<i>i</i>,&nbsp;<i>j</i>) that denote that <i>i</i> and <i>j</i> will work together.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2
2 3
1 3
</PRE></TD><TD><PRE CLASS="intable">2
1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1100||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Old contest software uses bubble sort for generating final standings. But now, there are too many teams and that software works too slow. You are asked to write a program, which generates exactly the same final standings as old software, but fast.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains only integer 1 &lt; <i>N</i> &le; 150000&nbsp;&mdash; number of teams.
Each of the next <i>N</i> lines contains two integers 1 &le; <i>ID</i> &le; 10<sup>7</sup> and 0 &le; <i>M</i> &le; 100. 
<i>ID</i>&nbsp;&mdash; unique number of team, <i>M</i>&nbsp;&mdash; number of solved problems.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain <i>N</i> lines with two integers <i>ID</i> and <i>M</i> on each.
Lines should be sorted by <i>M</i> in descending order using bubble sort (or analog).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
1 2
16 3
11 2
20 3
3 5
26 4
7 1
22 4
</PRE></TD><TD><PRE CLASS="intable">3 5
26 4
22 4
16 3
20 3
1 2
11 2
7 1
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Bubble sort works following way: <BR>
<code>while (exists A[i] and A[i+1] such as A[i] &lt; A[i+1]) do</code><BR>
<code>&nbsp;&nbsp;&nbsp;Swap(A[i], A[i+1]);</code>
</DIV></DIV>
______________________________________________________
1101||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a field [&minus;<i>N</i>..<i>N</i>]&times;[&minus;<i>N</i>..<i>N</i>].
At initial moment, robot stands at point (0, 0). It starts moving in (1, 0) direction.
Robot moves according to a program. 
Program is a correct boolean expression. It contains operators NOT, AND, OR 
(NOT has highest priority, OR - lowest), brackets '(', ')', constants 'TRUE' and 'FALSE',
and registers 'A', ..., 'Z'. Initially, all robot's registers are FALSE. Robot moves forward until it reaches a fork. Then, robot evaluate the expression and turns right if it is TRUE and turns left if it is FALSE. Besides, there are some points in the field, standing on which makes one of robot's registers to invert. You are asked to print robot's route until it falls out of the field.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains boolean expression. The length of expression&nbsp;&le;&nbsp;250.
Second line contains three integers 1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100, 0&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;100, 0&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;100.
<i>M</i>&nbsp;&mdash; number of forks, <i>K</i>&nbsp;&mdash; number of register inverting points. Then follows <i>M</i> lines, each of them contains two integers <i>X</i>, <i>Y</i>&nbsp;&mdash; coordinates of forks.
Then follows <i>K</i> lines, each of them contains two integers <i>X</i>, <i>Y</i> and character <i>C</i>&nbsp;&mdash; coordinates of register inverting point and name of register, which inverts. You may assume, that there is no fork at point (0, 0). You may assume, that no two objects (forks or register inverting points) coincide.
You may assume, that after some moves robot falls out of the field.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should print robot's route to output, every pair of coordinates in separate line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">NOT((A OR NOT B) AND (A OR B)) OR NOT (A AND NOT B OR TRUE)
1 5 2
1 0
1 1
1 -1
-1 -1
-1 1
0 1 A
-1 0 D
</PRE></TD><TD><PRE CLASS="intable">0 0
1 0
1 -1
0 -1
-1 -1
-1 0
-1 1
0 1
1 1
</PRE></TD></TR></TABLE>
______________________________________________________
1102||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One entity named "one" tells with his friend "puton" and their conversation is interesting. "One" can say words "out" and "output", besides he calls his friend by name. "Puton" can say words "in", "input" and "one". They understand each other perfect and even write dialogue in strings without spaces.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have <i>N</i> strings. Find which of them are dialogues.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line of input there is one non-negative integer <i>N</i>&nbsp;&le;&nbsp;1000. Next <i>N</i> lines contain non-empty strings. Each string consists of small Latin letters. Total length of all strings is no more than 10<sup>7</sup> characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output consists of <i>N</i> lines. Line contains word "YES", if string is some dialogue of "one" and "puton", otherwise "NO".
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
puton
inonputin
oneputonininputoutoutput
oneininputwooutoutput
outpu
utput
</PRE></TD><TD><PRE CLASS="intable">YES
NO
YES
NO
NO
NO
</PRE></TD></TR></TABLE>
______________________________________________________
1103||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One old man and one old woman sit at the table and write letters.
On the table in front of them at the coordinates (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) stay  <i>N</i> pencils. Diameter of pencils is 0 and all of them stay vertically. Man and woman decide to divide pencils into two equal groups. In order to do this old man give thread and put it on the table so that thread lay in a circle. Circle must cross over three pencils. He wants one group to get into the circle and other group not to get into the circle.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the first line of the input is one odd integer 3 &le; <i>N</i> &le; 5000.
At the next <i>N</i> lines are coordinates of pencils.
There are no three pencils staying in one line and there are no four pencils 
staying on one circle. All coordinates are integers that are not greater than 10<sup>8</sup> by absolute value.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You must output 6 integers&nbsp;&mdash; coordinates of three pencils over which cross thread. Inside of circle must be (<i>N</i>&minus;3)/2 pencils. On the circle must be these three pencils. And outside of the circle must be others (<i>N</i>&minus;3)/2 pencils. If there is no solution you must output "No solution". If there are more than one solution output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
0 0
1 0
2 -1
2 1
1 1
0 2
-3 -1
</PRE></TD><TD><PRE CLASS="intable">0 0
1 0
2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1104||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mrs Little likes digits most of all. Every year she tries to make the best number of the year. She tries to become more and more intelligent and every year studies a new digit. And the number she makes is written in numeric system which base equals to her age. To make her life more beautiful she writes only numbers that are divisible by her age minus one. 
Mrs Little wants to hold her age in secret.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a number consisting of digits 0, …, 9 and Latin letters A, …, Z, where A equals 10, B equals 11 etc. Your task is to find the minimal number <i>k</i> satisfying the following condition: the given number, written in <i>k</i>-based system is divisible by <i>k</i>&minus;1.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input consists of one string containing no more than 10<sup>6</sup> digits or uppercase Latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only number <i>k</i>, or "No solution." if for all 2 &le; <i>k</i> &le; 36 condition written above can't be satisfied. By the way, you should write your answer in decimal system.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">A1A
</PRE></TD><TD><PRE CLASS="intable">22
</PRE></TD></TR></TABLE>
______________________________________________________
1105||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor told us that once he solved problem at mathematical tournament of S.Petersburg's secondary school N239 in 1994. Nikifor said that he solved a problem from the moment <i>T</i><sub>0</sub> to the moment <i>T</i><sub>1</sub>. He remembers that <i>N</i> observers appeared in the room. The <i>i</i>-th observer entered the room at the moment <i>t</i><sub>0,&nbsp;<i>i</i></sub>
and went out at the moment <i>t</i><sub>1,&nbsp;<i>i</i></sub>. At every moment there was at least one observer in the room.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the tournament was finished, Nikifor claimed that it is possible to color some observers, and the summary time when there was only one colored observer in the room is not less than 2/3 of the time when Nikifor solved problem.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to answer whether Nikifor right or not.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains real numbers <i>T</i><sub>0</sub> and <i>T</i><sub>1</sub> (<i>T</i><sub>0</sub> &lt; <i>T</i><sub>1</sub>). The second 
line contains number <i>N</i>&nbsp;&mdash; number of observers (<i>N</i> &lt; 10000). Next <i>N</i> lines 
contain real numbers <i>t</i><sub>0,&nbsp;<i>i</i></sub> and <i>t</i><sub>1,&nbsp;<i>i</i></sub> (<i>T</i><sub>0</sub> &le; <i>t</i><sub>0,&nbsp;<i>i</i></sub> &lt; <i>t</i><sub>1,&nbsp;<i>i</i></sub> &le; <i>T</i><sub>1</sub>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Nikifor is not right output should contain the only number 0. If Nikifor is right you should write to the first line the quantity of colored observers, and next lines should contain their numbers. Do not write more than one number in a line. You may write these numbers in any order. If there are more than one solution exist you may  find any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0.0 20.0
7
1.0 1.5
0.0 10.0
9.0 10.0
18.0 20.0
9.0 18.0
2.72 3.14
19.0 20.0
</PRE></TD><TD><PRE CLASS="intable">3
2
5
7
</PRE></TD></TR></TABLE>
______________________________________________________
1106||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The group of people consists of <i>N</i> members. Every member has one or more friends in the group. You are to write program that divides this group into two teams. Every member of each team must have friends in another team.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the only number <i>N</i> (<i>N</i> &le; 100). Members are numbered from 1 to <i>N</i>. The second, the third,&hellip;and the (<i>N</i>+1)th line contain list of friends of the first, the second, &hellip;and the <i>N</i>th member respectively. This list is finished by zero. Remember that friendship is always mutual in this group.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of output should contain the number of people in the first team or zero if it is impossible to divide people into two teams. If the solution exists you should write the list of the first group into the second 
line  of output. Numbers should be divided by single space. If there are more than one solution you may find any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
2 3 0
3 1 0
1 2 4 5 0
3 0
3 0
7 0
6 0
</PRE></TD><TD><PRE CLASS="intable">4
2 4 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1107||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The are <i>N</i> different types of goods at the warehouse. Types are numbered by numbers 1&hellip;<i>N</i>. Employees of this warehouse made <i>K</i> different sets of these goods. We'll say that two sets are “similar” if one of them is obtained by deleting one good form the second set or by replacing one good to another.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">E.g. Set “1 2 3 4” is similar to sets “3 2 1”, “1 2 5 3 4”, “1 2 3 4 2” and “1 5 4 3” and is not similar to “1 2”, “1 1 2 2 3 4” and “4 5 3 6”.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This warehouse serves <i>M</i> shops (0 &lt; <i>N</i> &lt; <i>M</i> &lt; 101), sending them sets of goods. Every two sets sent to the shop should not be similar. It is possible not to send any set to one or more shops.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write program that determines how to distribute all <i>K</i> sets to these <i>M</i> shops.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains numbers <i>N</i>, <i>K</i>, <i>M</i>. Then <i>K</i> lines describing every set of goods follow, <i>K</i> &le; 50000. Each of these lines is started with the number of goods in the set, then numbers of goods are written. Number of goods in any set is more than 0 and less than 101. All numbers in these lines are separated by exactly one space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain word YES if the solution exists or NO contrary. If the answer is YES write the numbers of the shops where sets  should be sent to. In the second line you have to write number of the shop where the first set should be sent to, the third&nbsp;&mdash; for the second set, etc. If there are more than one solution exist you may find any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 20 12
5 1 3 5 6 4
5 1 3 5 6 3
4 5 6 3 3
4 5 6 3 4
4 4 6 5 8
4 7 7 7 7
3 7 7 7
2 2 2
3 2 2 7
3 1 2 3
3 1 2 4
10 1 2 3 4 5 6 7 8 7 6
10 8 7 6 5 4 3 2 1 2 1
20 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 3 5 7
5 4 6 4 6 4
5 6 4 6 4 6
6 6 6 6 6 6 6
3 6 6 6
1 1
1 2
</PRE></TD><TD><PRE CLASS="intable">YES
2
1
9
1
6
2
4
5
3
7
8
5
4
8
7
9
1
1
2
3
</PRE></TD></TR></TABLE>
______________________________________________________
1108||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your rich uncle died recently, and the heritage needs to be divided among your relatives and the church (your uncle insisted in his will that the church must get something). There are <i>N</i> relatives (<i>N</i> &le; 18) that were mentioned in the will. They are sorted in descending order according to their importance (the first one is the most important). Since you are the computer scientist in the family, your relatives asked you to help them. They need help, because there are some blanks in the will left to be filled. Here is how the will looks:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><code>Relative #1 will get 1/... of the whole heritage,</code><br>
<code>Relative #2 will get 1/... of the whole heritage,</code><br>
<code>...</code><br>
<code>Relative #N will get 1/... of the whole heritage.</code>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The logical desire of the relatives is to fill the blanks in such way that the uncle’s will is preserved (i.e the fractions are non-ascending and the church gets something) and the amount of heritage left for the church is minimized.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of input contains the single integer <i>N</i> (1 &le; <i>N</i> &le; 18).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the numbers that the blanks need to be filled (on separate lines), so that the heritage left for the church is minimized.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">2
3
</PRE></TD></TR></TABLE>
______________________________________________________
1109||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the upcoming conference were sent <i>M</i> representatives of country <i>A</i> and <i>N</i> representatives of country <i>B</i> (<i>M</i> and <i>N</i>&nbsp;&le;&nbsp;1000). The representatives were identified with 1, 2, &hellip;, <i>M</i> for country A and 1, 2, &hellip;, <i>N</i> for country <i>B</i>. Before the conference <i>K</i> pairs of representatives were chosen. Every such pair consists of one member of delegation <i>A</i> and one of delegation <i>B</i>. If there exists a pair in which both member #<i>i</i> of <i>A</i> and member #<i>j</i> of <i>B</i> are included then #<i>i</i> and  #<i>j</i> can negotiate. Everyone attending the conference was included in at least one pair. The CEO of the congress center wants to build direct telephone connections between the rooms of the delegates, so that everyone is connected with at least one representative of the other side, and every connection is made between people that can negotiate. The CEO also wants to minimize the amount of telephone connections. Write a program which given <i>M</i>, <i>N</i>, <i>K</i> and <i>K</i> pairs of representatives, finds the minimum number of needed connections.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <i>M</i>, <i>N</i> and <i>K</i>. The following <i>K</i> lines contain the choosen pairs in the form of two integers <i>p</i><sub>1</sub> and <i>p</i><sub>2</sub>, <i>p</i><sub>1</sub> is member of <i>A</i> and <i>p</i><sub>2</sub> is member of <i>B</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the minimum number of needed telephone connections.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2 4
1 1
2 1
3 1
3 2
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1110||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the whole numbers <i>N</i>, <i>M</i> and <i>Y</i>. Write a program that will find all whole numbers <i>X</i> in the interval [0, <i>M</i> &minus; 1] such that <i>X<sup>N</sup></i> mod <i>M</i> = <i>Y</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a single line with <i>N</i>, <i>M</i> and <i>Y</i> (0&nbsp;&lt;&nbsp;<i>N</i>&nbsp;&lt;&nbsp;999, 1&nbsp;&lt;&nbsp;<i>M</i>&nbsp;&lt;&nbsp;999, 0&nbsp;&lt;&nbsp;<i>Y</i>&nbsp;&lt;&nbsp;999) separated with one space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output all numbers <i>X</i> separated with space on one line. The numbers must be written in ascending order. If no such numbers exist then output &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 6 4</PRE></TD><TD><PRE CLASS="intable">2 4</PRE></TD></TR></TABLE>
______________________________________________________
1111||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given <i>n</i> (1 &le; <i>n</i> &le; 50) squares and point <i>P</i>. The distance between <i>P</i> and square is the shortest line segment that connects <i>P</i> with the contour or the internal area of the square. If  <i>P</i> is inside the square then the distance is zero. It is possible some squares to be points i.e. to have vertices that coincide. Write a program that will sort the squares in ascending order according the distance from <i>P</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i>. The following <i>n</i> lines contain four integers in the range (−9999, 9999). The first two numbers define the <i>x</i> and <i>y</i> coordinates of one of the vertices of the square, the next two numbers define the opposite vertex. The last line contains the <i>x</i> and <i>y</i> coordinates of <i>P</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should be a line containing the ids of the squares sorted according to the distance from <i>P</i>. The ids are defined according to the order in which the squares are given in the input. Use ids to break ties i.e. if two squares are the same distance from <i>P</i> then write the square with the lowest id first. Using 10<sup>−14</sup> precision when comparing the distances is accurate enough.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0 1 1
0 3 1 4
0 0
</PRE></TD><TD><PRE CLASS="intable">1 2</PRE></TD></TR></TABLE>
______________________________________________________
1112||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given <i>N</i> (0&nbsp;&lt;&nbsp;<i>N</i>&nbsp;&lt;&nbsp;100) line segments on a line. Every segment is defined with its endpoints <i>A<sub>i</sub></i> and <i>B<sub>i</sub></i> (<i>A<sub>i</sub></i>&nbsp;&ne;&nbsp;<i>B<sub>i</sub></i>, <nobr>1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<i>N</i></nobr>). The endpoints are integer coordinates in the interval [&minus;999,&nbsp;999]. Some of the segments probably intersect. Write a program, which removes minimum number of the given segments, so that none of the left segments have common interior point.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the integer <i>N</i>. Each of the following <i>N</i> lines, contains two integers (<i>A<sub>i</sub></i> and <i>B<sub>i</sub></i>), separated with one space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first line write the integer <i>P</i>, equal to the number of segments, which are left after your program removes the excess segments. The following <i>P</i> lines should contain the coordinates of the left and the right endpoints of the segments which are left. These coordinates must be separated with one space. Coordinates of the left endpoints must be written in their ascending order. If the problem has more the one solution, write only one of them no matter which.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
6 3
1 3
2 5
</PRE></TD><TD><PRE CLASS="intable">2
1 3
3 6
</PRE></TD></TR></TABLE>
______________________________________________________
1113||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Our jeep is in the desert and must reach a point which is <i>N</i> kilometres away from it. The terrain is tough, the car is old, and it seems like the fuel flows out, and because of this on every kilometre travelled, one litre of fuel is spent. But the jeep has fuel-cans and fuel tank with total capacity of <i>M</i> &lt; <i>N</i> litres. On other hand, at the beginning of the road there is unlimited amount of fuel, and everywhere in the desert there are empty cisterns, in which the jeep, passing near them, can leave unlimited amount of fuel.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program which calculates the minimum amount of fuel in litres which is needed to reach the destination point.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two integers <i>N</i> and <i>M</i> are written on the only line of input. It is known that 5<i>M</i> &ge; <i>N</i> &gt; 0. (<i>N</i> &lt; 32000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result (the minimum liters of fuel, eventually rounded up), must be written on the only line of output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1000 500</PRE></TD><TD><PRE CLASS="intable">3837</PRE></TD></TR></TABLE>
______________________________________________________
1114||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> boxes are lined up in a sequence (1 &le; <i>N</i> &le; 20). You have <i>A</i> red balls and <i>B</i> blue balls (0 &le; <i>A</i> &le; 15, 0 &le; <i>B</i> &le; 15). The red balls (and the blue ones) are exactly the same. You can place the balls in the boxes. It is allowed to put in a box, balls of the two kinds, or only from one kind. You can also leave some of the boxes empty. It's not necessary to place all the balls in the boxes. Write a program, which finds the number of different ways to place the balls in the boxes in the described way.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains one line with three integers <i>N</i>, <i>A</i> and <i>B</i> separated by space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result of your program must be an integer written on the only line of output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1 1</PRE></TD><TD><PRE CLASS="intable">9</PRE></TD></TR></TABLE>
______________________________________________________
1115||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The military intelligence of one country found out that <i>N</i> (<i>N</i> &lt; 100) battle ships of neighboring enemy country are situated in <i>M</i> rows (1 &lt; <i>M</i> &lt; 10). The intelligence knows the lengths <i>l</i><sub>1</sub>, <i>l</i><sub>2</sub>, &#133;, <i>l<sub>N</sub></i> of the battle ships which are whole numbers in the interval [1, 100], and wants to know in which rows the ships are situated. The only thing that is known about the <i>M</i> rows are their lengths&nbsp;&mdash; <i>L</i><sub>1</sub>, <i>L</i><sub>2</sub>, &#133;, <i>L<sub>M</sub></i>. Assume that the ships touch their neighbours in the rows and that every row contains at least one ship. Write program that will find one possible ordering of the ships in rows.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <i>N</i> and <i>M</i>. The next <i>N</i> lines contain the lengths of the ships. The next <i>M</i> lines contain the lengths of the rows.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain <i>M</i> pairs of lines. The first line of each pair should contain the amount of the ships in the current row, the following line should contain the lengths of the ships from the current row. The order of the <i>M</i> row descriptions should be the same as the order in which the rows are given in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 2
4
10
2
5
3
11
13
</PRE></TD><TD><PRE CLASS="intable">3
5 4 2
2
10 3
</PRE></TD></TR></TABLE>
______________________________________________________
1116||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">SKB Kontur has been developing a new <I>SKB Kontur Framework</I> for the last three months. One of the latest wrinkles is that data will be presented with the help of piecewise constant functions. Your team is to implement an operation of "subsettraction" of the functions. A function is called piecewise constant if its domain can be divided into intervals and the function is constant on each interval. We also assume that the function value at the left-end point of each interval of constancy is equal to its value on the interval. In fig.1 there is a piecewise constant function with three intervals of constancy. Note that the function value at the point <I>B</I> is <I>U</I> and at the points <I>C</I>, <I>E</I> and on the interval (<I>C</I>,<I>D</I>) - the function value is not defined.&nbsp;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A result of the subsettraction operation of two piecewise constant functions
<I>F</I><SUB>1</SUB> @ <I>F</I><SUB>2</SUB> is a piecewise constant
function <I>F</I> defined as follows:
<UL>
<LI><I>F</I>(<I>x</I>) = <I>F</I><SUB>1</SUB>(<I>x</I>) if <I>F</I><SUB>1</SUB>
is defined and <I>F</I><SUB>2</SUB> is not defined;</LI>
<LI><I>F</I>(<I>x</I>) is not defined if <I>F</I><SUB>1</SUB> and <I>F</I><SUB>2</SUB>
are defined both;</LI>
<LI><I>F</I>(<I>x</I>) is not defined if <I>F</I><SUB>1</SUB> is not defined.</LI>
</UL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In Fig.3 there is the result of the operation of the subsettraction of the two functions from Fig.1 and Fig.2.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains two lines of the same format. Each line characterizes one piecewise
constant function. A line begins with an integer <I>N</I> (1 &le; <i>N</i> &le; 14999). Then characterizations of constancy intervals follow in the
ascending order with respect to their left ends. Each interval is given by three integer
numbers <I>A</I>, <I>B</I>, <I>Y </I>(|<I>A</I>| &lt; 32000, |<I>B</I>|
&lt; 32000, |<I>Y</I>| &le; 100, <I>A</I> &lt; <I>B</I>), where <I>A</I>
is the left end of an interval, <I>B</I> is the right end of an interval and
<I>Y</I> is the function value on the interval. It's known that that no two
intervals from one line intersect. If two intervals are adjacent, the function values on the intervals are different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains one line of the same format (see the input specification).
This line should describe a result of the operation of subsettraction of the two input
piecewise constant functions.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 -1 1 2 1 3 4 4 6 3
2 -2 2 1 5 7 5
</PRE></TD><TD><PRE CLASS="intable">2 2 3 4 4 5 3
</PRE></TD></TR></TABLE>
______________________________________________________
1117||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During long years of work in SKB Kontur a certain hierarchy of employees has been developed. Each person except ordinary employees has exactly two direct subordinates and not more than one direct superior. There is no subordinate of ordinary employees (see figure).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each employee has his own number. Of course, different employees have different numbers. It's known as well that either an employee has the maximal number or there is another employee whose number is greater by one. Similarly, either
an employee has a number "1" or there is another employee whose number is less by one. The number of intermediate levels of employees between an arbitrary employee who has subordinates (an ordinary employee) and the employee who has no superiors (the main superior) is the same for all ordinary employees.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The things have come round so that each employee who has subordinates
has got a number greater than the number of one of his subordinates and less than the number of the other. Moreover, if his number is greater than his superior's 
then the numbers of his subordinates are also greater than the number
of his superior. And conversely, if his number is less, then his subordinates'
numbers are less too. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A special system of intracorporate message exchange has been worked out. A message from an 
employee with the number <I>i</i> can be addressed directly only to
the employees <I>i-1</i> and <I>i+1</i>. Moreover, this is done the same day
(it takes 0 days to do that) if the employees are direct superior and
subordinate. Otherwise, the message delivery takes an amount of days that
is equal to the number of intermediate  employees between the sender and recipient. For example, a message from the employee 2 to
the employee 4 is being delivered as follows. The employee 2 sends the
message to the employee 3, and the employee 3 addresses it to the employee 4.
This process takes one day because the first step (2->3) takes 0 days,
and the second one (3->4) takes 1 day.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains two positive integers: the number of an employee who sends a message and the number of the recipient. Each of the numbers doesn't exceed 2<SUP>31</SUP>&minus;1.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the only number — the number of days necessary
to deliver the message.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 5
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1118||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Specialists of SKB Kontur have developed a unique cryptographic algorithm
for needs of information protection while transmitting data over the Internet.
The main advantage of the algorithm is that you needn't use big numbers
as keys; you may easily do with natural numbers not exceeding a million.
However, in order to strengthen  endurance of the cryptographic system it
is recommended to use special numbers - those that psychologically seem
least "natural". We introduce a notion of <I>triviality</I>
in order to define and emphasize those numbers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Triviality</I> of a natural number <I>N</I> is the ratio of the
sum of all its proper divisors to the number itself. Thus, for example, 
triviality of the natural number 10 is equal to 0.8 = (1 + 2 + 5) / 10 
and triviality of the number 20 is equal to 1.1 = (1 + 2 + 4 + 5 + 10) /
20. Recall that <I>a proper divisor</i> of a natural number is the divisor
that is strictly less than the number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thus, it is recommended to use as nontrivial numbers as possible in
the cryptographic protection system of SKB Kontur. You are to write a
program that will find the less trivial number in a given range.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains two integers <I>I</I> and <I>J</I>, 1 &le; <I>I</I> &le; <I>J</I>
&le; 10<sup>6</sup>, separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only integer <I>N</I> satisfying the following conditions:
<OL>
<LI><I>I</I> &le; <I>N</I> &le; <I>J</I>;</LI>
<LI><I>N</I> is the least trivial number among the ones that obey the first
condition.</LI>
</OL></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">24 28
</PRE></TD><TD><PRE CLASS="intable">25
</PRE></TD></TR></TABLE>
______________________________________________________
1119||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Many of SKB Kontur programmers like to get to work by Metro because the main office is situated quite close the station Uralmash. So, since a sedentary life requires active exercises off-duty, many of the staff &mdash; Nikifor among them &mdash; walk from their homes to Metro stations on foot.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor lives in a part of our city where streets form a grid of residential quarters. All the quarters are squares with side 100 meters. A Metro entrance is situated at one of the crossroads. Nikifor starts his way from another crossroad which is south and west of the Metro entrance. Naturally, Nikifor, starting from his home, walks along the streets leading either to the north or to the east. On his way he may cross some quarters diagonally from their south-western corners to the north-eastern ones. Thus, some of the 
routes are shorter than others. Nikifor wonders, how long is the shortest route.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that will calculate the length of the shortest route from the south-western corner of the grid to the north-eastern one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two integers in the first line: <I>N</I> and <I>M</I> (0 &lt; <I>N</I>,<I>M</I> &le; 1000) &mdash; west-east and south-north sizes of the grid. Nikifor starts his way from a crossroad which is situated south-west of the quarter with coordinates (1, 1). A Metro station is situated north-east of the quarter with coordinates (<I>N</I>, <I>M</I>). The second input line contains a number <I>K</I> (0 &le; <I>K</I> &le; 100) which is a number of quarters that can be crossed diagonally. Then <I>K</I> lines with pairs of numbers separated with a space follow &mdash; these
are the coordinates of those quarters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output a length of the shortest route from Nikifor's home to the Metro station in meters, rounded to the integer amount of meters.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2
3
1 1
3 2
1 2
</PRE></TD><TD><PRE CLASS="intable">383
</PRE></TD></TR></TABLE>
______________________________________________________
1120||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is no involute formulation concerning factitiously activity of SKB Kontur in this problem. Moreover, there is no formulation at all.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is the only number <I>N</I>, 1 &le; <I>N</I> &le; 10<SUP>9</SUP>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output two positive integers <I>A</I> and <I>P</I>
separated with a space such that:
<OL>
<LI><I>N</I> = <I>A</I> + (<I>A</I> + 1) + &hellip; + (<I>A</I> + <I>P</I> &minus; 1).</LI>
<LI>You are to choose a pair with the maximal possible value of <I>P</I>.</LI>
</OL></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">14
</PRE></TD><TD><PRE CLASS="intable">2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1121||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">SKB Kontur has a lot of branches scattered all over the city. The company management decided to create a guide that will help clients to choose which of the branches they need. You are asked for help in this work.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The city is represented in the form of a grid of blocks. Each block is a square whose sides are streets and whose corners are cross-roads. We suppose that all branches are located exactly at cross-roads. The branches of SKB Kontur are of different types: service centers, warehouses, shops, training centers and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's mark service centers with number 1, warehouses with number 2, shops with number 4, training centers with number 8 and so on. There are not more than 11 types of branches, and two branches of the same type cannot be located at the same cross-road. Each cross-road is assigned a number equal to the sum of numbers with which the branches located at this cross-road are marked. Crossroads at which there are no branches of SKB Kontur are assigned 0.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let the distance between two cross-roads be equal to the number of street segments
which one has to go from the first cross-road to the second (see picture).
For example, the distance from a corner of a block to the opposite corner 
of this block is 2.
For each cross-road at which there are no branches of SKB Kontur 
you have to find the sum of the numbers corresponding to the types of
the branches nearest to this cross-road.
For example, suppose that there are no branches at a given cross-road and at
distance 1 from it, there is a branch of type 16 at distance 2,
there are also two branches of type 8 and one of type 4 at distance 2
in other directions and there are no more branches at distance 2 from 
this cross-road.
Then we should output number 28=16+8+4 for this cross-road.
We do not take into consideration branches that are at distances greater
than 5 from a given cross-road.
Thus, if a cross-road does not have branches of SKB Kontur that
are located at distances less than 6 from it then we should output
0 for this cross-road.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains positive integers <i>H</i> and <i>W</i> not exceeding 150.
They are numbers of "vertical" and "horizontal" streets, correspondingly.
The next <i>H</i> lines contain <i>W</i> numbers each, the <i>i</i>-th number in the <i>j</i>-th line
describing types of the branches located at the cross-road of the
<i>i</i>-th "vertical" and the <i>j</i>-th "horizontal" street.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output <i>H</i> lines containing <i>W</i> numbers each, 
the <i>i</i>-th number in the <i>j</i>-th line being equal to
the sum of the numbers corresponding to the types of
the branches nearest to the corresponding cross-road 
if there are no branches at this cross-road and &minus;1 otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 5
0 0 2 0 2
0 0 0 0 0
0 0 0 0 0
0 0 0 5 0
1 0 0 4 0
</PRE></TD><TD><PRE CLASS="intable">2 2 -1 2 -1
3 2 2 7 2
1 7 7 5 7
1 5 5 -1 5
-1 1 4 -1 4
</PRE></TD></TR></TABLE>
______________________________________________________
1122||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At SKB Kontur we have to work much.
So there is no sin in taking a rest and playing from time to time.
Consider for example the following famous one-player game.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We have a 4&times;4 field. There are chips with one side painted white and another side painted black on the field. Some of the chips are with their white side up and the others are with their white side down at the moment. Each move consists in turning over a chip together with all the chips that are adjacent to it vertically and horizontally (i.e. 5 chips altogether).
The aim is to come to the position in which all the chips are with the same side up.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Naturally, one is easily bored with this game
because interesting and unexpected positions become fewer as time goes on.
That is why a modified version of the game is now more popular at SKB Kontur.
In this version a move consists in turning over a fixed combination of chips
within a 3&times;3 square. For example, a move may consist in turning over all 
the diagonal neighbors of a chosen chip.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="LEFT" CLASS="problem_laimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The combination of chips is chosen arbitrarily; it may be assigned in the form of a 3&times;3 field in which the central cell corresponds to the cell at which a move as made. For example, in picture at the left the upper combination corresponds to a standard game and the lower combination is for the game described in the previous paragraph. Note that a combination can be asymmetrical. Each move is made at one of the cells of the playing field (i.e. the central cell of the 3&times;3 move-defining square is selected among the field's cells). Prescriptions to turn over chips at cells which are outside the 4&times;4 field are ignored.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In this game it would be nice to know if it is possible to reach a position in which all the chips are with the same side up and if it's possible to do this then in how many moves. You are to write a program which answers these questions.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first four lines describe the initial arrangement of chips.
A symbol "W" stands for a chip which lies with its white side up
and a symbol "B" stands for a chip which lies with its black side up.
The next three lines describe a move: the chips that are to be turned over
are shown by "1" and others are shown by "0".</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to reach the aim of the game you should output
the word "Impossible", otherwise you should output the minimal number 
of moves necessary to come to the final position.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">WWWW
WBBW
WBWW
WWWW
101
010
101
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1123||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All employees of SKB Kontur like to get their salaries. Often and in large quantities. But the company management is of a bit different opinion and pays out strictly once a month. After some consultations the employees decided that if one of the parameters (frequency of payment) was fixed it was possible to change the second parameter (amount of the money paid out). They contrived the following scheme. A group of employees who proudly call themselves mathematics and mechanics faculty graduates visits the management and using their mathematical authority claims that the computers in the company's accounts department will work more efficiently if salaries of all the employees take the form of palindromes. As you know, a numerical palindrome is a number that does not change when you read it from right to left. For example, 12344544321 is a palindrome and 12345543210 is not. Of course, the management had to agree with this proposal, but upon one condition: each employee had to re-count his or her salary so that the salary took the form of the least possible palindrome that is greater than or equal to the original salary. You are asked to help the employees of SKB Kontur.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">consists of one string containing the original salary of an employee. The string is not longer than 2001 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should consist of one string containing the new salary calculated according to the above rules.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12341321
</PRE></TD><TD><PRE CLASS="intable">12344321
</PRE></TD></TR></TABLE>
______________________________________________________
1124||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There's no doubt that one of the most important and crucial things to do in this world is to bring up children. May be, if you study properly and reach good results at the competition you'll get a position of nanny in a kindergarten. But you are to get ready for it! Let's consider some problems that a nanny has to solve in a kindergarten.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone knows the game "Mosaic". Playing the game, one is to lay out pictures of different colored pieces. Let there be <I>M</I> different boxes and <I>N</I> mosaic pieces of each of the <I>M</i> colors. After playing the  game children rarely put the pieces back to their boxes correctly so that the color of the box and the colors of its pirces would be the same. A nanny has to do that.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Children have already put the mosaic pieces to the boxes but possibly not correctly. There are <I>N</I> pieces in each box. Some pieces (possibly all of them) are located in wrong boxes (i.e. boxes with pieces of a different color). Moving a hand once one can take a piece from one box to another or simply move the hand to another box. You may start from any box you like. The  movement towards the first box is not taken into account. Find out the minimal number of movements one needs to put all the mosaic pieces to their boxes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers 2 &le; <I>M</I> &le; 500 (the number of colors) and 2 &le; <I>N</I> &le; 50 (the number of pieces of each color), Each of the next <I>M</I> lines contains <I>N</I> numbers in the range from 1 to <I>M</I> (the <I>i</i>+1-st line contains colors of pieces located in the <I>i-</I>th box). The numbers are separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the minimal possible number of hand movements that one has to make in order to take all the pieces to their boxes.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
1 3 1
2 3 3
1 2 2
4 4 4
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1125||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikifor likes to play hopscotch in the kindergarten. The playing field
is a rectangle <I>M</I> &times; <I>N</I> partitioned into cells 1 &times; 1 meter. Nikifor hops from one cell to another possibly not adjacent cell. Each cell is colored black or white. Each time Nikifor hops into a cell, all cells
whose centers are at an integer amount of meters away from Nikifor's cell center reverse their colors. You are given the final colors of the playing field cells. You also know 
the number of times Nikifor has been at each cell. Your task is to restore the initial colors of the cells.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two nonnegative integers <I>M</I> and <I>N</I> that do not exceed 50. The next <I>M</I> lines contain a character table <I>M</I>&nbsp;&times;&nbsp;<I>N</I>. This table describes the final coloring of the field. Character 'W' denotes the white color of the cell, and 'B' denotes the black color. There are no other characters in the table. The next <I>M</I> lines contain a matrix with nonnegative integer elements. Each element shows how many times Nikifor has been at the corresponding cell. Numbers in the lines are separated with a space and do not exceed 2∙10<sup>9</sup>. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should consist of <I>M</I> lines. The lines should contain a character table that shows the initial coloring of the playing field.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 6
BWBBWW
BWBBWB
BBWWBW
BBBBBW
BBWWWW
BBWBBW
2 0 12 46 2 0
3 0 0 0 0 200
4 2 1 1 4 2
4 2 1 1 4 4
0 0 0 0 0 0
2 56 24 4 2 2
</PRE></TD><TD><PRE CLASS="intable">WWBBWW
WBWWBW
WBBBBW
WBWWBW
WBWWBW
WBWWBW
</PRE></TD></TR></TABLE>
______________________________________________________
1126||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The directory of our kindergarten decided to be attentive to the children's health and not to let them walk outdoors during magnetic storms. Special devices that measure and display magnetic intensity were ordered. If the readout exceeded some certain level the children were told to go indoors. They disliked it because they couldn't play their games up to the end. The nannies hated it because they had to dress and undress children
many times.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After a while it became clear that one could try to forecast magnetic intensity because long periods of quietude alternated with short periods of plenty of sharp peaks (this is called a magnetic storm). Hence a new modification of the devices was ordered.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The new devices were to remember the situation within several last hours and to display the maximal intensity during the period. If the intensity was low within the last 6 hours the magnetic field was regarded to be quiet; the children were let outdoors and played all the prescript time. Otherwise new peaks were probable and the children spent their time indoors.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program for a new version of the device. As a matter of fact you are to solve just the main problem of modification. All the rest is already done.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a number <I>M</I> which is length of a period (in seconds) within which peaks are to be stored and displayed. A sequence of measured magnetic intensity values is given to you as well. Each measurement is a number within the range from 0 to 100000.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your are to output a sequence of values displayed by the device. The first number of the sequence is the maximal element of the first <I>M</I> input numbers, the second number is the maximal element of the 2nd, …, <I>M+</I>1-st input numbers and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We hope that the new devices with your program won't go back on nannies and children will not walk during magnetic storms.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <I>M</I>,<I> </I>1 &lt; <I>M</I> &le; 14000. Then values (<I>N</i> integers) measured by the device follow each one in its line. There
is a number &minus;1 in the end. <i>M</i>&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;25000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">a sequence of readouts, each one in its line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
10
11
10
0
0
0
1
2
3
2
-1
</PRE></TD><TD><PRE CLASS="intable">11
11
10
0
1
2
3
3
</PRE></TD></TR></TABLE>
______________________________________________________
1127||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are lots of cubic bricks in the kindergarten. Children like to build toy brick towers and then to drop them. It is clear that the higher tower has been built the more interesting it is to drop it. The tower is built by placing bricks one onto another and aligning their sides. The tower is based on one brick. Thus the height of a tower is the number of the bricks it is built of. Each side of a brick is painted in one color.
So the kids build colored towers. In order to train the children's sense of beauty nannies teach them to build the towers in such a way that each side of the tower would be one-color. Thus the kids would like to build a tower with one-color sides as high as possible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every nanny can easily solve this problem. Try your best to do it as well.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <I>N</I> (1 &lt; <I>N</I> &le; 10<SUP>3</SUP>) — the number of bricks. The next <I>N</I> lines contain descriptions of bricks. Each brick is described with a string of 6 capital latin letters denoting the color of the corresponding side (A — <U>A</U>zure, B — <U>B</U>lue, C — <U>C</U>yan, G — <U>G</U>reen, O — <U>O</U>range, R — <U>R</U>ed, S — <U>S</U>carlet, V — <U>V</U>iolet, W — <U>W</U>hite, Y — <U>Y</U>ellow). The colors of the sides are given in the following order: <I>front, right, left, rear, top, bottom</i>. A brick never has two sides of the same color.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only number — the maximal height of a toy tower that can be built of the given brick set.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
GYVABW
AOCGYV
CABVGO
OVYWGA
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1128||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <I>N</I> children in the kindergarten. Unfortunately, the children quarrel though not often. Each child has not more than three adversaries. Is it possible to partition the children into two groups (possibly not equal), so that each child would have not more than one adversary in his or her group?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <I>N</I>, 0 &lt; <I>N</I> &le; 7163. The next <I>N</I> lines contain lists of adversaries of each child. A line starts with the amount of the corresponding child's adversaries, then the numbers of the adversaries follow. The numbers in each line are separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of children in the smaller group. The next line contains the list of children in the group. The numbers in the second line are separated with a space. If the groups are of the same size then you are to describe the group that contains the child number one. Note that the output may contain the only number 0. If there
are several possible partitions it's sufficient to output an arbitrary one. If there's no possible partition you are to output the only string &ldquo;NO SOLUTION&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
3 2 3 7
3 1 3 7
3 1 2 7
1 6
0
2 4 8
3 1 2 3
1 6
</PRE></TD><TD><PRE CLASS="intable">4
1 2 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1129||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are many rooms, corridors and doors between them in the kindergarten. Some repairs are planned to be made soon. The doors are agreed to be painted in bright cheerful colors: green and yellow. The matron of the kindergarten wants the doors to satisfy the following condition: the sides of an arbitrary door must have the different colors. The number of green doors in each of the lodgings must differ from the number of yellow doors not more than by one. Given the plan of the kindergarten suggest your scheme of door painting.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of lodgings <I>N</I> &le; 100 in the kindergarten. 
The next <I>N</I> lines contain description of the door configuration (<I>k</I>+1-st line contains a description of the <I>k</I>-th lodging). Each of the <I>N</I> lines starts with the number of doors that connect this lodging with adjacent ones. Then there are numbers of adjacent lodgings separated with a space (these numbers follow in ascending order).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain a required painting scheme or the word “Impossible” if it is
impossible to satisfy the requirements. The colors of the <I>K</I>-th room doors should be put in the <I>K</I>-th line in the same order as they were in the input data. The green color is denoted by G, yellow&nbsp;— by Y.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
3 2 3 4
3 1 3 5
4 1 2 4 5
3 1 3 5
3 2 3 4
</PRE></TD><TD><PRE CLASS="intable">G Y G
Y G Y
G Y Y G
Y G G
G Y Y
</PRE></TD></TR></TABLE>
______________________________________________________
1130||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little Nikifor wouldn't stay long without movement. It's boring to run
in one direction for a long time, as well. A wise nanny knows that when
Nikifor goes playing outdoors he moves along vectors <I>a</I><SUB>1</SUB>,
<I>a</I><SUB>2</SUB>, &#133;, <I>a<SUB>n</SUB></i>; each time 
his displacement is either equal to the next in turn vector or to the vector 
opposite to it. A pedagogical influence
of the nanny with Nikifor is rather strong, so each time she can point
out which one of the two possible directions he should choose.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The nanny knows that length of each of the vectors <I>a</I><SUB>1</SUB>,
<I>a</I><SUB>2</SUB>, &#133;, <I>a<SUB>n</SUB></i> doesn't exceed <I>L</I>.
Nikifor starts his walk from the nanny and she wants him to move off her not farther
than by the square root of 2 multiplied by <I>L</I> (sqrt(2)L) in the end of his walk. 
What directions  should she point 
out in order not to let the child move too far off her pedagogical influence in the end of the walk?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <I>n</I>, 0 &lt; <I>n</I> &le; 10000. The second line contains a non-negative integer <I>L</I>, <I>L</I> &lt; 100. The next <I>n</I> lines contain coordinates of the vectors. The coordinates are integer.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line is to contain the word “YES” if the nanny can cope with her task, and “WRONG ANSWER” otherwise. If the answer is “YES” then the next line should consist of <I>n</I> symbols '+' or '&minus;'. There is the symbol '+' at the <I>i</I>-th position if Nikifor runs along the vector <I>a<SUB>i</SUB></I>, and there's a symbol '&minus;' if Nikifor runs along the vector &minus;<I>a<SUB>i</SUB></I>. If there are several solutions it's enough to output an arbitrary one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
5
5 0
0 5
0 0
-3 4
</PRE></TD><TD><PRE CLASS="intable">YES
+-++
</PRE></TD></TR></TABLE>
______________________________________________________
1131||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new educating program was received by the kindergarten. Of course, children have discovered it immediately and want to play with it as soon as possible. In order to let them do it the program has to be copied to all the <I>N</I> computers that the kindergarten had bought just before the default of 1998. At the moment the program is installed only on one computer. Other computers do not have floppy drives and are not connected with a local network. The only way to transfer information from one computer
to another is to copy it using a null-modem cable (a cable that connects two computers directly). So, if the program is installed on a computer, it can be copied to some other (but only one!) computer within an hour. There are only <I>K</i> null-modem cables in the kindergarten. Your task is to estimate the minimal time necessary for copying the program to all the computers in the kindergarten.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains two integers separated with a space: <I>N</I>
and <I>K</I> (1 &le; <i>N</i> &le; 10<SUP>9</SUP>; 1 &le; <i>K</i> &le; 10<SUP>9</SUP>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the minimal time (in hours) necessary for copying of the program to all the computers.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 3
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE>
______________________________________________________
1132||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number <i>x</i> is called a square root of <i>a</i> modulo <i>n</i> (root(<i>a</i>,<i>n</i>)) if <i>x</i>*<i>x</i> = <i>a</i> (mod <i>n</i>). Write the program to find the square root of number <i>a</i> by given modulo <i>n</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number <i>K</i> in the first line is an amount of tests (<i>K</i> &le; 100000). Each next line represents separate test, which contains integers <i>a</i> and <i>n</i> (1 &le; <i>a</i>, <i>n</i> &le; 32767, <i>n</i> is prime, <i>a</i> and <i>n</i> are relatively prime).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each input test the program must evaluate all possible values root(<i>a</i>,<i>n</i>) 
in the range (0,<i>n</i>&minus;1) and output them in increasing order in one separate line using spaces. If there is no square root for current test, the program must print in separate line: ‘No root’.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
4 17
3 7
2 7
14 31
10007 20011
</PRE></TD><TD><PRE CLASS="intable">2 15
No root
3 4
13 18
5382 14629
</PRE></TD></TR></TABLE>
______________________________________________________
1133||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="LEFT" CLASS="problem_laimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">is an infinite sequence of integers that satisfies to Fibonacci condition <i>F</i><sub><i>i</i>&nbsp;+&nbsp;2</sub>&nbsp;=&nbsp;<i>F</i><sub><i>i</i>&nbsp;+&nbsp;1</sub>&nbsp;+&nbsp;<i>F<sub>i</sub></i> for any integer <i>i</i>.
Write a program, which calculates the value of <i>F<sub>n</sub></i> for the given values of <i>F<sub>i</sub></i> and <i>F<sub>j</sub></i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains five integers in the following order: <i>i</i>, <i>F<sub>i</sub></i>, <i>j</i>, <i>F<sub>j</sub></i>, <i>n</i>.<br>
&minus;1000 &le; <i>i</i>, <i>j</i>, <i>n</i> &le; 1000, <i>i</i>&nbsp;&ne;&nbsp;<i>j</i>,<br>
&minus;2&middot;10<sup>9</sup> &le; <i>F<sub>k</sub></i> &le; 2&middot;10<sup>9</sup> (<i>k</i>&nbsp;=&nbsp;min(<i>i</i>, <i>j</i>, <i>n</i>), &hellip;, max(<i>i</i>, <i>j</i>, <i>n</i>)).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output consists of a single integer, which is the value of <i>F<sub>n</sub></i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 5 -1 4 5</PRE></TD><TD><PRE CLASS="intable">12</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the example you are given: <i>F</i><sub>3</sub>&nbsp;=&nbsp;5, <i>F</i><sub>&minus;1</sub>&nbsp;=&nbsp;4; you asked to find the value of <i>F</i><sub>5</sub>. The following Fibonacci sequence can be reconstructed using known values:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">&hellip;, <i>F</i><sub>&minus;1</sub>&nbsp;=&nbsp;4, <i>F</i><sub>0</sub>&nbsp;=&nbsp;&minus;1, <i>F</i><sub>1</sub>&nbsp;=&nbsp;3, <i>F</i><sub>2</sub>&nbsp;=&nbsp;2, <i>F</i><sub>3</sub>&nbsp;=&nbsp;5, <i>F</i><sub>4</sub>&nbsp;=&nbsp;7, <i>F</i><sub>5</sub>&nbsp;=&nbsp;12, &hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thus, the answer is: <i>F</i><sub>5</sub>&nbsp;=&nbsp;12.</DIV></DIV>
______________________________________________________
1134||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the <i>n</i> cards has numbers written on the both sides of it. The first card has 0 and 1 on it, the second has 1 and 2, &hellip;, the <i>n</i>-th has (<i>n</i>&minus;1) and <i>n</i>. First-grade pupil Nick takes cards one by one in random order and reads the number on one of the sides. Nick is not very good with numbers, so it is possible that he makes a mistake. Your task is to find out if he was mistaken, i.e. if the given sequence of numbers is possible for some order of taking cards.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains numbers <i>n</i>, the total number of cards, and <i>m</i>, the number of the cards that were taken. Starting with the second line, the <i>m</i> non-negative integers are listed (the sequence read by Nick). One or more spaces or line feeds separate the numbers.
<br>
1 &le; <i>n</i> &le; 1000</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write YES if the given sequence of numbers is possible for some order of taking cards, NO otherwise. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
2 0 1 2
</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1135||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> recruits are standing in front of a sergeant who orders to turn left. Some of the soldiers turn left, while the others turn right. In a second each recruit seeing the face of another recruit understands that a mistake was made and turns around. This happens at the same time to each pair of soldiers facing each other. The process continues until the formation becomes stable. Write a program, which finds out the number of times when a pair of soldiers turned around. If the process is infinite then the program should write the word “NO”.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example:</B><BR>
Legend:<BR>
‘&lt;’: a recruit facing left;<BR>
‘&gt;’: a recruit facing right.<BR>
<TABLE BORDER="1" CELLSPACING="0" CELLPADDING="5">
<tr>
 <td>Formation</td>
 <td>Comments</td>
 <td>Number of turns</td>
</tr>
<tr>
 <td>&gt; &gt; &lt; &lt; &gt; &lt;</td>
 <td>Initial formation</td>
 <td>2</td>
</tr>
<tr>
 <td>&gt; &lt; &gt; &lt; &lt; &gt;</td>
 <td>One second has passed</td>
 <td>2</td>
</tr>
<tr>
 <td>&lt; &gt; &lt; &gt; &lt; &gt;</td>
 <td>Two seconds have passed</td>
 <td>2</td>
</tr>
<tr>
 <td>&lt; &lt; &gt; &lt; &gt; &gt;</td>
 <td>Three seconds have passed</td>
 <td>1</td>
</tr>
<tr>
 <td>&lt; &lt; &lt; &gt; &gt; &gt;</td>
 <td>Final formation</td>
 <td>Total: 7</td>
</tr>
</TABLE>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of recruits (<i>N</i>). The rest of the input contains only ‘&lt;’, ‘&gt;’ and line break characters. There is exactly <i>N</i> ‘&lt;’ and ‘&gt;’ characters in the input. Each line of the input may have up to 255 characters.<br> 
1 &le; <i>N</i> &le; 30000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the number of turns.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
&gt;&gt;&lt;&lt;&gt;&lt;</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR></TABLE>
______________________________________________________
1136||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new parliament is elected in the state of MMMM. Each member of the parliament gets his unique positive integer identification number during the parliament registration. The numbers were given in a random order; gaps in the sequence of numbers were also possible. The chairs in the parliament were arranged resembling a tree-like structure. When members of the parliament entered the auditorium they took seats in the following order. The first of them took the chairman’s seat. Each of the following delegates headed left if his number was less than the chairman’s, or right, otherwise. After that he took the empty seat and declared himself as a wing chairman. If the seat of the wing chairman has been already taken then the seating algorithm continued in the same way: the delegate headed left or right depending on the wing chairman’s identification number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The figure below demonstrates an example of the seating of the members of parliament if they entered the auditorium in the following order: 10, 5, 1, 7, 20, 25, 22, 21, 27. </DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During its first session the parliament decided not to change the seats in the future.
The speech order was also adopted. If the number of the session was odd then the members of parliament spoke in the following order: the left wing, the right wing and the chairman. If a wing had more than one parliamentarian then their speech order was the same: the left wing, the right wing, and the wing chairman. If the number of the session was even, the speech order was different: the right wing, the left wing, and the chairman. For a given example the speech order for odd sessions will be 1, 7, 5, 21, 22, 27, 25, 20, 10; while for even sessions&nbsp;&mdash; 27, 21, 22, 25, 20, 7, 1, 5, 10.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine the speech order for an even session if the speech order for an odd session is given.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <i>N</i>, the total number of parliamentarians. The following lines contain <i>N</i> integer numbers, the identification numbers of the members of parliament according to the speech order for an odd session.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The total number of the members of parliament does not exceed 3000. Identification numbers do not exceed 65535.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the identification numbers of the members of parliament in accordance with the speech order for an even session.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9
1 7 5 21 22 27 25 20 10
</PRE></TD><TD><PRE CLASS="intable">27 21 22 25 20 7 1 5 10
</PRE></TD></TR></TABLE>
______________________________________________________
1137||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Several bus routes were in the city of Fishburg. None of the routes shared the same section of road, though common stops and intersections were possible. Fishburg old residents stated that it was possible to move from any stop to any other stop (probably making several transfers). The new mayor of the city decided to reform the city transportation system. He offered that there would be only one route going through all the sections where buses moved in the past. The direction of movement along the sections must be the same and no additional sections should be used.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program, which creates one of the possible new routes or finds out that it is impossible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number of old routes <i>n</i>. Each of the following <i>n</i> lines contains the description of one route: the number of stops <i>m</i> and the list of that stops. Bus stops are identified by positive integers not exceeding 10000. A route is represented as a sequence of <i>m</i>&nbsp;+&nbsp;1 bus stop identifiers: <i>l</i><sub>1</sub>, <i>l</i><sub>2</sub>, &hellip;, <i>l</i><sub><i>m</i></sub>, <i>l</i><sub><i>m</i>+1</sub>&nbsp;=&nbsp;<i>l</i><sub>1</sub> that are sequentially visited by a bus moving along this route. A route may be self-intersected. A route always ends at the same stop where it starts (all the routes are circular).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of old routes: 1 &le; <i>n</i> &le; 100.<br>
The number of stops: 1 &le; <i>m</i> &le; 1000.<br>
The number-identifier of the stop: 1 &le; <i>l</i> &le; 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output contains the number of stops in the new route <i>k</i> and the new route itself in the same format as in the input. The last (<i>k</i>+1)-th stop must be the same as the first. If it is impossible to make a new route according to the problem statement then write 0 (zero) to the output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
6 1 2 5 7 5 2 1
4 1 4 7 4 1
5 2 3 6 5 4 2
</PRE></TD><TD><PRE CLASS="intable">15 2 5 4 2 3 6 5 7 4 1 2 1 4 7 5 2
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is a picture for the example:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>
______________________________________________________
1138||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Applying for a new job, programmer N. Smart required that his new salary (in rubles, positive integer) would be greater than his previous salary by integer percentage. What could be the highest possible number of previous jobs for mister Smart, if his latest salary did not exceed n rubles and his first salary was exactly s rubles?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Example.</b> Let <i>n</i>&nbsp;=&nbsp;10, <i>s</i>&nbsp;=&nbsp;2, then <i>m</i>&nbsp;=&nbsp;5. The sequence 2, 4 (+100%), 5 (+25%), 8 (+60%), 10 (+25%) is the longest (although not unique) sequence that satisfies to the problem statement. Salary increase percentage is written inside the brackets.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two integers <i>n</i> and <i>s</i> separated by one or more spaces. 1 &le; <i>n</i>, <i>s</i> &le; 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A single integer <i>m</i>&nbsp;&mdash; the maximum number of N. Smart’s previous jobs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 2
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">if <i>n</i> = <i>s</i>, the answer is 1.</DIV></DIV>
______________________________________________________
1139||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The blocks in the city of Fishburg are of square form. <i>N</i> avenues running south to north and <i>M</i> streets running east to west bound them. A helicopter took off in the most southwestern crossroads and flew along the straight line to the most northeastern crossroads. How many blocks did it fly above?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>Note.</i> A block is a square of minimum area (without its borders).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains <i>N</i> and <i>M</i> separated by one or more spaces.
1 &lt; <i>N</i>, <i>M</i> &lt; 32000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of blocks the helicopter flew above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The figures for samples:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>
______________________________________________________
1140||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An attempt was made to count all the cranberries in the swamps located in the surroundings of Rybinsk. It appeared convenient to split the surface of the swamp into regular hexagonal cells. One of these cells was considered as the central one, where the helicopter hovered. Three directions were marked (see picture).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After that a hired student landed in the central cell and wandered around for a certain time. He counted the berries and recorded his movements as he walked. Movements were recorded as a sequence of transitions from one cell to another through their common side along one of the marked (or reverse) directions. The route consisted of linear sections determined by directions (<i>X</i>, <i>Y</i>, or <i>Z</i>) and lengths (signed nonzero integers). A movement in the marked direction is represented with positive numbers, in the reverse direction&nbsp;&mdash; with negative numbers.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which determines a route from the last cell visited by the student back to the central cell, having the least possible number of cells in it.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <i>n</i>&nbsp;&mdash; the length of the route (<i>n</i>&nbsp;&gt;&nbsp;0).
Each of the following n lines contains a letter denoting a direction (<i>X</i>, <i>Y</i>, or <i>Z</i>) and a signed integer <i>l</i> (<i>l</i> &ne; 0) denoting the length of the section (in cells). The letter and the number are separated by one space.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">While wandering, the student moved away from the central cell for no more than 100 cells in each of marked and reverse directions. The total length of the route does not exceed 32000 linear sections.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain the description of a route from the last cell visited by the student back to the central cell, having the least possible number of cells in it.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output must contain <i>m</i>&nbsp;&mdash; the length of the route (number of sections in the back route, <i>m</i>&nbsp;&ge;&nbsp;0).
The following <i>m</i> lines of the output must contain the description of the sections of the back route in the same format as in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
Z -2
Y 3
Z 3
X -1
</PRE></TD><TD><PRE CLASS="intable">2
Y –2
Z –2
</PRE></TD></TR></TABLE>
______________________________________________________
1141||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The RSA problem is the following: given a positive integer n that is a product of two distinct odd primes p and q, a positive integer e such that gcd(e, (p-1)*(q-1)) = 1, and an integer c, find an integer m such that m<sup>e</sup> = c (mod n).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number K (K <= 2000) in the first line is an amount of tests. Each next line represents separate test, which contains three positive integer numbers – e, n and c (e, n, c <= 32000, n = p*q, p, q – distinct odd primes, gcd(e, (p-1)*(q-1)) = 1, e < (p-1)*(q-1) ).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each input test the program must find the encrypted integer m.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
9 187 129
11 221 56
7 391 204
</PRE></TD><TD><PRE CLASS="intable">7
23
17
</PRE></TD></TR></TABLE>
______________________________________________________
1142||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider a specific set of comparable objects. Between two objects <i>a</i> and <i>b</i>, there exits one of the following three classified relations:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>a</i> = <i>b</i><br>
<i>a</i> &lt; <i>b</i><br>
<i>b</i> &lt; <i>a</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Because relation '=' is symmetric, it is not repeated above.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, with 3 objects (<i>a</i>, <i>b</i>, <i>c</i>), there can exist 13 classified relations:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>
a = b = c       a = b < c       c < a = b       a < b = c<br>
b = c < a       a = c < b       b < a = c       a < b < c<br>
a < c < b       b < a < c       b < c < a       c < a < b<br>
c < b < a
</i>
</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given <i>N</i>, determine the number of different classified relations between <i>N</i> objects.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Includes many integers <i>N</i> (in the range from 2 to 10), each number on one line. Ends with &minus;1.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each <i>N</i> of input, print the number of classified relations found, each number on one line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
3
-1
</PRE></TD><TD><PRE CLASS="intable">3
13
</PRE></TD></TR></TABLE>
______________________________________________________
1143||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the team competition of the 10th national student informatics Olympic, which is organized at Hanoi National University, there are <i>N</i> teams participating. Each team is assigned to work in a camp. On the map, it can be seen that the camps are
positioned on the vertices of a convex polygon with <i>N</i> vertices: <i>P</i><sub>1</sub>, <i>P</i><sub>2</sub>, …, <i>P<sub>N</sub></i> (the vertices are enumerated around the polygon in counter-clockwise order.) In order to achieve absolute safety providing electricity to the camps, besides an electric supplying system, the host organization set up a path from a reserved electricity
generator (which is placed in one of the camps) to every camp once, and <i>the
path's total length is minimum</i>.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the coordinates of the polygons' vertices (the camps' positions), determine the length of the electric path corresponding to the host organization's arrangement.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
<li>
The first line contains the positive integer <i>N</i> (1 &le; <i>N</i> &le; 200);
</li>
<li>
The <i>i</i>'th line of the next <i>N</i> lines contains two real numbers <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>, separated by a space, with no more than 3 digits after the decimal points, are vertex <i>P<sub>i</sub></i>'s coordinates on the plane (with <i>i</i> = 1, 2, …, <i>N</i>). The length of the path connecting two vertex (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>) and (<i>x<sub>j</sub></i>, <i>y<sub>j</sub></i>) is computed with the formula: sqrt((<i>x<sub>i</sub></i> − <i>x<sub>j</sub></i>)<sup>2</sup> + (<i>y<sub>i</sub></i> − <i>y<sub>j</sub></i>)<sup>2</sup>).
</li>
</ul></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line should contain real number <i>L</i> (written in real number format, with 3 digits after the decimal point), which is the total length of the electric path.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
50.0 1.0
5.0 1.0
0.0 0.0
45.0 0.0
</PRE></TD><TD><PRE CLASS="intable">50.211
</PRE></TD></TR></TABLE>
______________________________________________________
1144||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the olden times there was a young emperor who was the bravest, wisest, richest, most handsome in the whole world. He had proven himself in endless of battles, quests, and victories but his court was not happy because he had not appointed a queen yet. However, choosing a queen was not easy because of his high status and standard, the emperor wanted a girl not only beautiful but smart and kind as well. Lightning Knight - that was the young Emperor's name - sent his most trusted knights out to seek for a girl like that; and after a long time searching, the men brought back two of the most beautiful and intelligent girls in all the lands. They were two princess sisters from a faraway land. The older sister - Van Trinh - was mysterious and beautiful like the moon, while Thuy Linh - the younger one - was bright and lovely as the sun. They were both famous for being kind, gentle, and intelligent to their people, and as many girls before them, they both fell truly, madly, deeply in
love with the handsome emperor at first sight.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now, the Emperor had to face the hardest test of all: to pick just one in these two
sisters to become his rightful and beloved queen and lay the world under her feet. After countless sleepless nights, the Emperor sought out a just solution. He thought of a riddle and announced to the two princesses and the court that he would marry the first one who bring the right answer to his desk.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the same time with the above event, the Emperor had just won the most important battle to unite all the lands in the world. That was two good news in such a short time. Being the rich and generous emperor he was, the Emperor wanted to reward to all the brave and loyal generals with boxes of gold. The distribution was not easy and that's why he chose it as the riddle for Van Trinh and Thuy Linh. Centuries has passed since then, the Emperor and queen might have died and their romance might have been forgotten from our world, but the riddle still remains as one of the hardest tasks in the ancient books.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Emperor wants to reward N boxes of gold to M generals. The i-th box has the value of A<sub>i</sub>. Now the Emperor wants to give N boxes to M generals so that the difference of gold between the general who receives the most gold and the general who receives the least gold is as small as possible. Note: a general can receive more than one box, and he must receive the whole box (i.e.: not half or 1/3 of box).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Contains two lines:
<ul>
  <li>The 1st line contains three positive
    integers N, M and K (N &le; 10000, M &le; 1000 and N &ge; M). K is the
    maximum result that the emperor accepts.</li>
  <li>The 2nd line contains N positive
    integers 0 &lt; A<sub>1</sub>, A<sub>2</sub>, …, A<sub>N</sub> &le; 1000.</li>
</ul></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
  <li>The 1st line contains one integer which is the minimum
    difference your program can find.</li>
  <li>In the next M lines, the i-th line contains the index of
    boxes rewarded to the i-th general.</li>
</ul>
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 3 4
12 95 16 37 59 50 47 3 41 95 
</PRE></TD><TD><PRE CLASS="intable">4
6 7 9 1 
8 10 4 3 
5 2 
</PRE></TD></TR></TABLE>
______________________________________________________
1145||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A labyrinth with rectangular form and size <i>m</i> × <i>n</i> is divided into square cells with sides' length 1 by lines that are parallel with the labyrinth's sides. Each cell of the net is either forbidden or free. It is possible to move from one free cell to other free cells that share a common side with the cell. One cannot move beyond the labyrinth's borders. The labyrinth is designed pretty specially: for any 2 cells, there is only one way to move from one cell to the other. At each cell's center, there is always a hook. In the labyrinth, there are 2 special free cell, such that if you can connect the hooks of those 2 cells with a rope, the labyrinth's secret door will be automatically openned. The problem is to prepare a shortest rope that can guarantee at any position in the labyrinth, you always can connect the hooks of those 2 cells with the prepared rope.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul type="disc">
  <li>The first line contains two numbers <i>n</i>, <i>m</i> (3 &le; <i>n</i>, <i>m</i> &le; 820).</li>
  <li>The next lines describe the labyrinth. The ith line of the next m lines contains
    n characters. Each character is either &quot;#&quot; or &quot;.&quot;, with
    &quot;#&quot; indicating a forbidden cell, and &quot;.&quot; indicating a
    free cell (<i>i</i> = 1, 2, …, <i>m</i>).</li>
</ul></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print out on one line the length (measured in the number of cells) of the needed rope.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 6
#######
#.#.###
#.#.###
#.#.#.#
#.....#
#######
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE>
______________________________________________________
1146||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given a 2-dimensional array of positive and negative integers, find the sub-rectangle with the largest sum. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the <EM>maximal sub-rectangle</EM>. A sub-rectangle is any contiguous sub-array of size 1&nbsp;&times;&nbsp;1 or greater located within the whole array.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As an example, the maximal sub-rectangle of the array:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><style>
<!--
TABLE.Matrix1146
{
 border-collapse: collapse;
}
TABLE.Matrix1146 TR TD
{
 width: 20px;
 padding: 4px;
 text-align: right;
}
-->
</style>

<table align="center" class="Matrix1146" style="border:0;">
 <tr>
  <td style="border:0;">0</td>
  <td style="border:0;">&minus;2</td>
  <td style="border:0;">&minus;7</td>
  <td style="border:0;">0</td>
 </tr>
 <tr>
  <td style="border:0; border-left: solid 1px #c0c0c0; border-top: solid 1px #c0c0c0;">9</td>
  <td style="border:0; border-right: solid 1px #c0c0c0; border-top: solid 1px #c0c0c0;">2</td>
  <td style="border:0;">&minus;6</td>
  <td style="border:0;">2</td>
 </tr>
 <tr>
  <td style="border:0; border-left: solid 1px #c0c0c0;">&minus;4</td>
  <td style="border:0; border-right: solid 1px #c0c0c0;">1</td>
  <td style="border:0;">&minus;4</td>
  <td style="border:0;">1</td>
 </tr>
 <tr>
  <td style="border:0; border-left: solid 1px #c0c0c0; border-bottom: solid 1px #c0c0c0;">&minus;1</td>
  <td style="border:0; border-right: solid 1px #c0c0c0; border-bottom: solid 1px #c0c0c0;">8</td>
  <td style="border:0;">0</td>
  <td style="border:0;">&minus;2</td>
 </tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">is in the lower-left-hand corner and has the sum of 15.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of an <i>N</i>&nbsp;&times;&nbsp;<i>N</i> array of integers. 
The input begins with a single positive integer <i>N</i> on a line by itself 
indicating the size of the square two dimensional array. This is followed by 
<i>N</i><sup>&nbsp;2</sup> integers separated by white-space (newlines and spaces). 
These <i>N</i><sup>&nbsp;2</sup> integers make up the array in row-major order (i.e., all numbers on the first row, left-to-right, then all numbers on the second row, left-to-right, etc.). <i>N</i> may be as large as 100. The numbers in the array will be in the range [&minus;127, 127].</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output is the sum of the maximal sub-rectangle.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 -2 -7 0
9 2 -6 2
-4 1 -4 1
-1 8 0 -2
</PRE></TD><TD><PRE CLASS="intable">15
</PRE></TD></TR></TABLE>
______________________________________________________
1147||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> opaque rectangles (1 &le; <i>N</i> &le; 1000) of various colors are placed on a white sheet of paper whose size is <i>A</i> wide by <i>B</i> long. The rectangles are put with their sides parallel to the sheet's borders. All rectangles fall within the borders of the sheet so that different figures of different colors will be seen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The coordinate system has its origin (0, 0) at the sheet's lower left corner with axes parallel to the sheet's borders.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The order of the input lines dictates the order of laying down the rectangles.  The first input line is a rectangle “on the bottom”.
<UL>
<LI>First line contains <i>A</i>, <i>B</i> and <i>N</i>, space separated (1 &le; <i>A</i>, <i>B</i> &le; 10000).</LI>
<LI>Lines 2, …, <i>N</i> + 1 contain five integers each: <i>llx</i>, <i>lly</i>, <i>urx</i>, <i>ury</i>,
color: the lower left coordinates and upper right coordinates of the
rectangle whose color is <i>color</i> (1 &le; <i>color</i> &le; 2500) to be placed
on the white sheet.  The color 1 is the same color of white as the sheet
upon which the rectangles are placed.</LI>
</UL></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain a list of all the colors that can be seen along with the total area of each color that can be seen (even if the regions of color are disjoint), ordered by increasing color. Do not display colors with no area.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">20 20 3
2 2 18 18 2
0 8 19 19 3
8 0 10 19 4
</PRE></TD><TD><PRE CLASS="intable">1 91
2 84
3 187
4 38
</PRE></TD></TR></TABLE>
______________________________________________________
1148||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are N bricks in a toy box which have 1-unit height and 2-unit width. The teacher organizes a tower-building game. The tower is built of the bricks. The tower consists of H levels. The bottom level contains M bricks, every next level must contain exactly one brick less or greater than the level just below it.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is an example of a tower with H=6, M=2, N=13.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The tower with H levels can be represented by the array of H integers, which are the numbers of bricks in each level from the bottom to the top. Consider all different towers with exactly H levels and exactly M bricks in the bottom level that can be built using not more than N bricks. We can number these towers in such way that corresponding arrays will be ordered lexicographically.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find a tower with specific number in the sense of described order.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains positive numbers N, H and M (N &le; 32767, H &le; 60, M &le; 10). Each of the following lines contains integer K, which is the interested tower number. The last line contains number -1. The towers are numbered starting from 1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain the total number of different towers that can be built. Each following line should contain an array describing the tower with number K given in respective line of input. The numbers in the arrays should be separated by at least one space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">22 5 4 
1
10
-1
</PRE></TD><TD><PRE CLASS="intable">10
4 3 2 1 2
4 5 4 5 4
</PRE></TD></TR></TABLE>
______________________________________________________
1149||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let <i>A<SUB>n</SUB></i> = sin(1–sin(2+sin(3–sin(4+…sin(<i>n</i>))…)<BR>
Let <i>S<SUB>n</SUB></i> = (…(<i>A</i><SUB>1</SUB>+<i>n</i>)<i>A</i><SUB>2</SUB>+<i>n</i>–1)<i>A</i><SUB>3</SUB>+…+2)<i>A<SUB>n</SUB></i>+1<BR>
For given <i>N</i> print <i>S<SUB>N</SUB></i></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One integer <i>N</i>. 1 &le; <i>N</i> &le; 200</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Line containing <i>S<SUB>N</SUB></i></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">((sin(1)+3)sin(1–sin(2))+2)sin(1–sin(2+sin(3)))+1</PRE></TD></TR></TABLE>
______________________________________________________
1150||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">John Smith has decided to number the pages in his notebook from 1 to <i>N</i>. Please, figure out the number of zeros, ones, twos, …, nines he might need.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number <i>N</i> (1 &le; <i>N</i> &lt; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output 10 lines. The first line should contain the number of zeros needed, the second line should contain the number of ones needed, …, the tenth line should contain the number of nines needed.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12</PRE></TD><TD><PRE CLASS="intable">1
5
2
1
1
1
1
1
1
1
</PRE></TD></TR></TABLE>
______________________________________________________
1151||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> radiobeacons are located on the plane. Their exact positions are unknown but we know that <i>N</i> &le; 10 and that their coordinates are integers from 1 to 200. Each beacon produces unique signal, that distinguishes it from the other beacons.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In some different places, we should call them <i>checkpoints</i>, coordinates of which are well known, there were conducted measurements. As a result of these measurements distances from checkpoints to some of beacons became known. Here we should note, that the distance between points <i>A</i> and <i>B</i> equals max(|<i>A<sub>x</sub></i> − <i>B<sub>x</sub></i>|, |<i>A<sub>y</sub></i> − <i>B<sub>y</sub></i>|).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You need to get positions of all beacons basing on coordinates of the checkpoints and results of measurements, if that is possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains an integer <i>M</i>, the number of checkpoints. 1 &le; <i>M</i> &le; 20. Then <i>M</i> lines follow, each of them contains an information received from one of the checkpoints, formatted as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&lt;<i>X<sub>i</sub></i>&gt;,&lt;<i>Y<sub>i</sub></i>&gt;:&lt;<i>ID</i><sub>1</sub>&gt;-&lt;<i>R</i><sub>1</sub>&gt;[,&lt;<i>ID</i><sub>2</sub>&gt;-&lt;<i>R</i><sub>2</sub>&gt;][,…]</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i> are coordinates of checkpoints, <i>ID<sub>k</sub></i> is ID of beacon <i>k</i>, <i>R<sub>k</sub></i> is a distance from checkpoint <i>i</i> to beacon <i>k</i>. Coordinates of checkpoints are integers from 1 to 200. Each checkpoint measures at least one signal. IDs of beacons are integers from 1 to 30000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> lines, which should look as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&lt;<i>ID<sub>k</sub></i>&gt;:&lt;<i>x<sub>k</sub></i>&gt;,&lt;<i>y<sub>k</sub></i>&gt; | UNKNOWN
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <i>x<sub>k</sub></i> and <i>y<sub>k</sub></i> are coordinates of <i>k</i>'th beacon on the field. If a position of some beacon cannot be determined unambiguously, its coordinates should be replaced with a word “UNKNOWN”. All lines should be ordered by <i>ID<sub>k</sub></i> in an ascending order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
15,15:16-7,5-3
10,10:5-2,16-2
</PRE></TD><TD><PRE CLASS="intable">5:12,12
16:UNKNOWN
</PRE></TD></TR></TABLE>
______________________________________________________
1152||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>We wandered in the labyrinth for twenty minutes before finally entering the large hall. The walls were covered by mirrors here as well. Under the ceiling hung small balconies where monsters stood. I had never seen this kind before. They had big bulging eyes, long hands firmly holding riffles and scaly, human-like bodies. The guards fired at me from the balconies, I shot back using my BFG-9000. The shot shattered three mirrors filling the room with silvery smoke. Bullets drummed against my body-armor knocking me down to the floor.  Falling down I let go a shot, and got up as fast as I fell down by rotating on my back, like I did in my youth while break dancing, all this while shooting three more times. Three mirrors, three mirrors, three mirrors…</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_right">Sergey Lukjanenko, “The Labyrinth of Reflections”</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">BFG-9000 destroys three adjacent balconies per one shoot. (<i>N</i>-th balcony is adjacent to the first one). After the shoot the survival monsters inflict damage to Leonid (main hero of the novel) — one unit per monster. Further follows new shoot and so on until all monsters will perish. It is required to define the minimum amount of damage, which can take Leonid.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>N</i>, аmount of balconies, on which monsters have taken a circular defense. 3 &le; <i>N</i> &le; 20. The second line contains <i>N</i> integers, amount of monsters on each balcony (not less than 1 and no more than 100 on each).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output minimum amount of damage.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
3 4 2 2 1 4 1
</PRE></TD><TD><PRE CLASS="intable">9
</PRE></TD></TR></TABLE>
______________________________________________________
1153||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To check the speed of JCN Corporation new supercomputer it was decided to figure out the sum of first <i>N</i> (<i>N</i> &lt; 10<SUP>600</SUP>) positive integers. Unfortunately, by the time the calculation was finished the Chief Programmer forgot the value of <i>N</i> he entered. Your task is to write the program (for personal computer), which would determine the value of <i>N</i> by the result calculated on supercomputer.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Note:</B> JCN Corporation manufactures only reliable computers, and its programmers write only correctly working programs.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One line containing the result of calculations on the supercomputer.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Выведите <i>N</i>, the number entered by Chief Programmer. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">28</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR></TABLE>
______________________________________________________
1154||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Powers of Light and the Powers of Darkness had gathered the best elemental mages of the Middle-earth: the Lords of Fire, Earth, Air and Water.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sometime during 24 hours there exists the Moment of Power for each one of the elements, when the mastery of corresponding mage is in its maximum point. In contrary there exists the Moment of Weakness, when the mastery of the mage is minimum. In between these moments the mage's mastery changes linearly.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There can be several mages fighting on each side. The mages cumulative mastery is defined as sum of their individual masteries. The win is given to the side, which mages' cumulative mastery is the largest. The larger the advantage of one side over another, the easier its win is, and the smaller casualties are.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Supreme Master, who is to declare the time of the Contest secretly wishes the Powers of Light to win, and tries to make this win as easy as possible. Assume that the Contest is held momentary, and the mastery of the mages doesn't change during it. You are to help the Supreme Master in selecting the time of the Contest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first four lines contain information about the Moments of Weakness and the Moments of Power for mages of each of the elements. Each line contains five parameters separated by spaces: element code, the time of the Moment of Power, the mastery in the Moment of Power, the time of the Moment of Weakness, the mastery in the Moment of  Weakness.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Element code is one of four capital letters: “A” for Air, “E” for Earth, “F” for Fire and “W” for Water. The time is HH:MM:SS formatted and lies between 00:00:00 and 23:59:59. The Moment of Power is not equal to the Moment of Weakness. The mastery in these moments is a positive integer less than or equal to 10000.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then two more lines follow, which determine respectively the cast of the Powers of Light and the cast of the Powers of Darkness. Each line consists of symbols “A”, “E”, “F”, “W” representing one mage of the corresponding element. The number of the mages from each side is not less than 1 and is not greater than 1000.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain HH:MM:SS formatted time of the Contest. In the second line there should be one number with two decimal points, which represents the advantage of the Powers of Light over the Powers of Darkness. The time of the Contest should lie between 00:00:00 and 23:59:59. If there exist several moments can be chosen as the time of the Contest, then choose the earliest one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no way the Powers of Light can win, then write “We can't win!”</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">A 10:00:00 130 18:00:00 40
E 14:00:00 150 21:30:00 25
F 06:00:00 105 18:00:00 70
W 23:00:00 140 02:00:00 20
A
WWW
</PRE></TD><TD><PRE CLASS="intable">02:00:00
25.00
</PRE></TD></TR><TR><TD><PRE CLASS="intable">A 10:00:00 130 18:00:00 40
E 14:00:00 150 21:30:00 25
F 06:00:00 105 18:00:00 70
W 23:00:00 140 02:00:00 20
A
WWWF
</PRE></TD><TD><PRE CLASS="intable">We can't win!</PRE></TD></TR></TABLE>
______________________________________________________
1155||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>Archangel of the Science is reporting:<br>
“O, Lord! Those physicists on the Earth have discovered a new elementary particle!”<br>
“No problem, we’ll add another parameter to the General Equation of the Universe.”</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As physics develops and moves on, scientists find more and more strange elementary particles, whose properties are more than unknown. You may have heard about muons, gluons and other strange particles. Recently scientists have found new elementary particles called troubleduons. These particles are called this way because scientists can create or annihilate them only in couples. Besides, troubleduons cause trouble to scientists, and that’s why the latter want to get rid of them. You should help scientists get rid of troubleduons.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Experimental set consists of eight cameras, situated in the vertices of a cube. Cameras are named as A, B, C, …, H. It is possible to generate or annihilate two troubleduons in neighbouring cameras. You should automate the process of removing troubleduons.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contain eight integers ranging from 0 to 100, representing number of troubleduons in each camera of experimental set.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output sequence of actions leading to annihilating all troubleduons or “IMPOSSIBLE”, if you cannot do it. Actions should be described one after another, each in a separate line, in the following way: name of the first camera, name of the second camera (it should be a neighborough to the first one), “+” if you create troubleduons, “-” if you destroy them. Number of actions in the sequence should not exceed 1000.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 0 1 0 3 1 0 0 </PRE></TD><TD><PRE CLASS="intable">EF-
EA-
AD+
AE-
DC-
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 1 0 1 2 3 2 2</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE</PRE></TD></TR></TABLE>
______________________________________________________
1156||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two rounds in the Urals Championship. The competitors have to solve <i>N</i> problems on each round. The jury had been working hard and finally managed to prepare 2<i>N</i> problems for the championship. But it appeared that among those problems there were some, which have the analogous solutions. One shouldn’t  assign  such a problems for the same round. Please, help the jury form sets of tasks for each of the rounds.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains two numbers: <i>N</i>, the number of tasks for a round, and <i>M</i>, the number of pairs of tasks which should not be assigned for one round (1 &le; <i>N</i> &le; 50; 0 &le; <i>M</i> &le; 100). Then <i>M</i> lines follow, each of them contains two numbers of analogous tasks. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two lines, containing numbers of tasks assigned for each round. If there is no solution, output the only word “IMPOSSIBLE”. If there are more than one solution you may assume anyone of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
1 3
2 1
4 3
</PRE></TD><TD><PRE CLASS="intable">1 4
2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1157||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One young boy had many-many identical square tiles. He loved putting all his tiles to form a rectangle more, than anything in the world — he has learned the number of all rectangles he can form using his tiles. On his birthday he was presented a number of new tiles. Naturally, he started forming rectangles from these tiles — the thing he loved most of all! Soon he has learned all rectangles he could form with a new number of tiles.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here we should notice that boy can easily count the number of rectangles, but he has difficulty counting the number of tiles — there are too much of them for such a young boy. But it will not be difficult for you to determine how many tiles he has now, knowing how many rectangles he could form before, how many rectangles he can form now, and how many tiles he got as a birthday present.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given numbers <i>M</i>, <i>N</i> and <i>K</i>. You should find the smallest number <i>L</i>, such as you can form <i>N</i> different rectangles using all <i>L</i> tiles, and form <i>M</i> rectangles using <i>L</i> − <i>K</i> tiles.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One line containing three integers: <i>M</i>, <i>N</i>, <i>K</i> (1 &le; <i>M</i>, <i>N</i>, <i>K</i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If <i>L</i> is less than or equal to 10000, then print that number (if there is a number of such <i>L</i>, you should print the smallest one). If there is no solution or smallest <i>L</i> is greater than 10000, print 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3 1</PRE></TD><TD><PRE CLASS="intable">16</PRE></TD></TR></TABLE>
______________________________________________________
1158||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The alphabet of Freeland consists of exactly N letters. Each sentence of
Freeland language (also known as Freish) consists of exactly M letters
without word breaks. So, there exist exactly N<sup>M</sup> different Freish
sentences.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But after recent election of Mr. Grass Jr. as Freeland president some words offending him were declared unprintable and all sentences containing at least one of them were forbidden. The sentence S contains a word W if W is a substring of S i.e. exists
such k&nbsp;&gt;=&nbsp;1 that S[k]&nbsp;=&nbsp;W[1], S[k+1]&nbsp;=&nbsp;W[2], ... , S[k+len(W)-1]&nbsp;=&nbsp;W[len(W)], where k+len(W)-1&nbsp;&lt;=&nbsp;M and len(W) denotes length of W. Everyone who uses a forbidden sentence is to be put to jail for 10 years.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find out how many different sentences can be used now by freelanders without risk to be put to jail for using it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integer numbers: N - the number of letters in Freish alphabet, M - the length of all Freish sentences and P - the number of forbidden words (1 &le; N &le; 50, 1 &le; M &le; 50, 0 &le; P &le; 10).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The second line contains exactly N different characters - the letters of the Freish alphabet (all with ASCII code greater than 32).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following P lines contain forbidden words, each not longer than min(M, 10) characters, all containing only letters of Freish alphabet.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only integer number - the number of different sentences freelanders can safely use.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3 3
QWE
QQ
WEE
Q</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR></TABLE>
______________________________________________________
1159||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Workers are going to enclose a new working region with a fence. For their convenience the enclosed area has to be as large as possible. They have N rectangular blocks to build the fence. The length of the i-th block is L<SUB>i</SUB> meters. All blocks have the same height of 1 meter. The workers are not allowed to break blocks into parts. All blocks must be used to build the fence.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains one integer N (3 &le; N &le; 100). The following N lines describe fence blocks. Each block is represented by its length in meters (integer number, 1 &le; L<SUB>i</SUB> &le; 100).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write one non-negative number S - maximal possible area of the working region (in square meters). S must be written with two digits after the decimal point. If it is not possible to construct the fence from the specified blocks, write 0.00.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
10
5
5
4</PRE></TD><TD><PRE CLASS="intable">28.00</PRE></TD></TR></TABLE>
______________________________________________________
1160||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Andrew is working as system administrator and is planning to establish a new network in his company. There will be N hubs in the company, they can be connected to each other using cables. Since each worker of the company must have access to the whole network, each hub must be accessible by cables from any other hub (with possibly some intermediate hubs).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since cables of different types are available and shorter ones are cheaper, it is necessary to make such a plan of hub connection, that the maximum length of a single cable is minimal. There is another problem - not each hub can be connected to any other one because of compatibility problems and building geometry limitations. Of course, Andrew will provide you all necessary information about possible hub connections.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to help Andrew to find the way to connect hubs so that all above conditions are satisfied.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integer: N - the number of hubs in the network (2 &le; N &le; 1000) and M — the number of possible hub connections (1 &le; M &le; 15000). All hubs are numbered from 1 to N. The following M lines contain information about possible connections - the numbers of two hubs, which can be connected and the cable length required to connect them. Length is a positive integer number that does not exceed 10<SUP>6</SUP>. There will be no more than one way to connect two hubs. A hub cannot be connected to itself. There will always be at least one way to connect all hubs. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output first the maximum length of a single cable in your hub connection plan (the value you should minimize). Then output your plan: first output P - the number of cables used, then output P pairs of integer numbers - numbers of hubs connected by the corresponding cable. Separate numbers by spaces and/or line breaks. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 6
1 2 1
1 3 1
1 4 2
2 3 1
3 4 1
2 4 1</PRE></TD><TD><PRE CLASS="intable">1
4
1 2
1 3
2 3
3 4</PRE></TD></TR></TABLE>
______________________________________________________
1161||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Our chemical biologists have invented a new very useful form of life called <I>stripies</I> (in fact, they were first called in Russian - <I>polosatiki</I>, but the scientists had to invent an English name to apply for an international patent). The stripies are transparent amorphous amebiform creatures that live in flat colonies in a jelly-like nutrient medium. Most of the time the stripies are moving. When two of them collide a new stripie appears instead of them. Long observations made by our scientists enabled them to establish that the weight of the new stripie isn't equal to the sum of weights of two disappeared stripies that collided; nevertheless, they soon learned that when two stripies of weights m<SUB>1</SUB> and m<SUB>2</SUB> collide the weight of resulting stripie equals to 2&middot;sqrt(m<SUB>1</SUB>m<SUB>2</SUB>). Our chemical biologists are very anxious to know to what limits can decrease the total weight of a given colony of stripies.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that will help them to answer this question. You may assume that 3 or more stipies never collide together.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains one integer N (1 &le; N &le; 100) - the number of stripies in a colony. Each of next N lines contains one integer ranging from 1 to 10000 - the weight of the corresponding stripie.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain one line with the minimal possible total weight of colony with the accuracy of two decimal digits after the point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
72
30
50</PRE></TD><TD><PRE CLASS="intable">120.00</PRE></TD></TR></TABLE>
______________________________________________________
1162||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Several currency exchange points are working in our city. Let us suppose that each point specializes in two particular currencies and performs exchange operations only with these currencies. There can be several points specializing in the same pair of currencies. Each point has its own exchange rates, exchange rate of A to B is the quantity of B you get for 1A. Also each exchange point has some commission, the sum you have to pay for your exchange operation. Commission is always collected in source currency.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, if you want to exchange 100 US Dollars into Russian Rubles at the exchange point, where the exchange rate is 29.75, and the commission is 0.39 you will get (100 - 0.39) * 29.75 = 2963.3975RUR.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You surely know that there are N different currencies you can deal with in our city. Let us assign unique integer number from 1 to N to each currency. Then each exchange point can be described with 6 numbers: integer A and B - numbers of currencies it exchanges, and real RAB, CAB, RBA and CBA - exchange rates and commissions when exchanging A to B and B to A respectively.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nick has some money in currency S and wonders if he can somehow, after some exchange operations, increase his capital. Of course, he wants to have his money in currency S in the end. Help him to answer this difficult question. Nick must always have non-negative sum of money while making his operations.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1 &le; S &le; N &le; 100, 1 &le; M &le; 100, V is real number, 0 &le; V &le; 10<SUP>3</SUP>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10<SUP>-2</SUP> &le; rate &le; 10<SUP>2</SUP>, 0 &le; commission &le; 10<SUP>2</SUP>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 10<SUP>4</SUP>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Nick can increase his wealth, output YES, in other case output NO.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2 1 20.0
1 2 1.00 1.00 1.00 1.00
2 3 1.10 1.00 1.10 1.00</PRE></TD><TD><PRE CLASS="intable">YES</PRE></TD></TR></TABLE>
______________________________________________________
1163||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Legendary divisional commander Vasiliy I. Chapaev was fond of playing this beautiful game with his aide-de-camp Petka during their (scanty) spare time. The game is played as follows. There are eight white and eight red draughts on the board at the beginning of the game. The red side starts the game by making the first turn. The turn consists of selecting an arbitrary draught of player’s colour and pushing it with a flick into a certain direction. Then this draught begins to move in this direction until it completely falls off the board. If it hits or even just touches another draught of any colour during the movement, the latter is immediately removed from the board being considered killed. In any case the moving draught continues its movement without changing its speed or direction. After the moving draught has completed its movement across the board (has fallen off) the other player has to make his turn. If there are no draughts of player’s colour left he is considered to lose the game.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The historians have a record of an initial position in one of such games. Unfortunately, the result of this game is unknown. Your task is to establish the truth taking for granted that both Chapaev and Petka always used the optimal strategy.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of two lines contains eight pairs of numbers - the coordinates of centres of red and white draughts respectively. The draughts are considered to be cylinders of radius 0.4 and height 0.15. The coordinates are calculated so that the board is a square 8x8 with vertices (0, 0), (0, 8), (8, 0) and (8, 8). There will be no draught that overlaps or touches another one. Also each piece in the initial position is completely contained within the limits of the board.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output RED or WHITE corresponding to the winning side.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0.5 7.5 1.5 7.5 2.5 7.5 3.5 7.5 4.5 7.5 5.5 7.5 6.5 7.5 7.5 7.5
0.5 0.5 1.5 0.5 2.5 0.5 3.5 0.5 4.5 0.5 5.5 0.5 6.5 0.5 7.5 0.5</PRE></TD><TD><PRE CLASS="intable">RED</PRE></TD></TR></TABLE>
______________________________________________________
1164||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alex likes solving fillwords. Fillword is a word game with very simple rules. The author of the fillword takes rectangular grid (M cells width, N cells height) and P words. Then he writes letters in the cells of the grid (one letter in one cell) so that each word can be found on the grid and the following conditions are met:
<UL>
<LI> no cell belongs to more than one word
<LI> no cell belongs to any word more than once
</UL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some word W (let us consider its length being k) is found on the grid if you can find such sequence of cells (x<SUB>1</SUB>, y<SUB>1</SUB>), (x<SUB>2</SUB>, y<SUB>2</SUB>), …, (x<SUB>k</SUB>, y<SUB>k</SUB>) that:
<UL>
<LI> (x<SUB>i</SUB>, y<SUB>i</SUB>) and (x<SUB>i+1</SUB>, y<SUB>i+1</SUB>) are neighbors (|x<SUB>i</SUB>-x<SUB>i+1</SUB>| + |y<SUB>i</SUB>-y<SUB>i+1</SUB>| = 1) for each i = 1, 2, …, k-1
<LI> W[i] is written in the cell with coordinates (x<SUB>i</SUB>, y<SUB>i</SUB>).
</UL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The task is to find all the words on the grid. After they are found, you see that the letters in some cells are not used (they do not belong to any found word). You make up a secret word using these letters and win a big prize.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help Alex to solve fillwords. You should find out which letters will be left after he finds all the words on the grid. The most difficult task - to make up a secret word out of them - we still reserve to Alex.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integers - N, M (2 &le; M, N &le; 10) and P (P &le; 100). Next N lines contain M characters each, and represent the grid. The following P lines contain words that are to be found on the fillword grid.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fillword will always have at least one solution. All characters occurring in fillword will be capital English letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output letters from, which a secret word should be made up. Letters should be output in lexicographical order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3 2
EBG
GEE
EGE
BEG
GEE</PRE></TD><TD><PRE CLASS="intable">EEG</PRE></TD></TR></TABLE>
______________________________________________________
1165||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">George likes arithmetics very much. Especially he likes the integers series. His most favourite thing is the infinite sequence of digits, which results as the concatenation of all positive integers in ascending order. The beginning of this sequence is 1234567891011121314… Let us call this sequence S. Then S[1] = 1, S[2] = 2, …, S[10] = 1, S[11] = 0, …, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">George takes a sequence of digits A and wants to know when it first appears in S. Help him to solve this difficult problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains A - the given sequence of digits. The number of digits in A does not exceed 200.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only number - the least k such that A[1] = S[k], A[2] = S[k+1], ... A[len(A)] = S[k + len(A) – 1], where len(A) denotes the length of A (i.e. the number of digits in it).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">101</PRE></TD><TD><PRE CLASS="intable">10</PRE></TD></TR></TABLE>
______________________________________________________
1166||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course all of you want to know how to become ACM world champions. There is no exact answer to this question but it is well known that the champions of the last two ACM World Finals enjoyed playing the following funny card game. Two or more players can play this game simultaneously. It is played using a standard 54-card deck. At the beginning the players sit forming a circle. One of the players shuffles the deck and then he deals the cards in clockwise order starting from the neighbour on his left. He deals the top card of the deck to the current player each time. He does it until each player gets five cards. Then he takes the top card of the deck and lays it onto the table face up and he also lays the remainder of the deck nearby (these cards are laid face down preserving their original order). The card laid by the shuffler is considered as the first turn of the game (as if it was made by the shuffler to the player on his left). 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The normal game flow as following: the player should cover the last laid card with the card of the same suit or value. If he has none, he takes one card from the top of the deck and again checks this condition. If still there are no matching cards, the move will go to the next player (his left neighbour). But for some cards special rules are applied:
<OL>
<LI> If the laid card is 6, the player takes one card from the top of the deck and skips his turn
<LI> If the laid card is 7, the player takes two cards from the top of the deck (if there is only one card in the deck, he takes just it) and skips his turn
<LI> If the laid card is Ace the player skips his turn without taking any cards
<LI> If the player lays Queen, he himself announces the suit of the card it should be covered with
<LI> Eight is one of the most powerful weapons in this game. When it is laid, the next player has to cover it in any case. If he cannot cover it with his cards he has to take cards from the deck, until he is able to cover it.
<LI> And the most important card in the game is the King of Spades. If it's laid, the next player takes 4 cards from the top of the deck (if there is not enough cards in the deck, he takes all of them) and skips his turn.
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that the deck is looped and the laid cards are immediately moving to the bottom of the deck. So it can happen that the player has to cover the card by itself.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We should say some words about Jokers. Jokers can have any card value by the wish of the player who has it. If the player lays the joker, he assigns a definite card value and suit for it, so this Joker has this assigned value until another player takes it from the deck (if it ever happens). The player is free to use or not to use the Joker whenever he wants (if it is his turn to play, of course).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the player is left without any cards in his hand, he is considered a winner and the game continues without him (his left neighbour becomes the left neighbour of his right neighbour).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is only one player left, he is the looser, so he is called a Japanese Fool (it is a Russian name of this game).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We are interested in the following situation. Consider the moment when only two players are left in the game. If one of them has a special combination of cards, it may happen that he can lay out all his cards in a some sequence so that the other player won't get a move (he'll just have to take cards from the deck and skip turns) and will be the loser — provided the first one finds the winning sequence.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You will be given the position of the game in which only two players are left. Your task will be to determine whether such a winning sequence for the first player exists or not.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We will consider that the first player have already taken all cards from the deck that he had to (if any), so he cannot take any cards from the deck. We will also consider that if the last laid card is a skip-turn card, it was the second player who skipped the turn.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains cards of the first player separated by spaces. The second line contains the last laid face up card.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The card description consists of two characters. The first of them corresponds to the card value (2-9 for digits, T for 10, J for Jack, Q for Queen, K for King and A for Ace). The next describes the suit of the card and may be one of the following: S for Spades, C for Clubs, D for Diamonds or H for Hearts. Joker is represented by a character '*'. If the last laid card is Queen, it is followed by a suit letter. If the last laid card is a joker, then the '*' is followed by an actual card description (the card specified by the player who laid the Joker).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain a single word YES or NO signalling whether the winning sequence exists. If the answer is positive the second line must contain the winning sequence of cards separated by spaces. As in the input, the Joker is to be followed by a card specification and the Queen should follow a suit letter. If there is more than one solution you may output an arbitrary one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6C QD 6S KS 7S *
*QHS
</PRE></TD><TD><PRE CLASS="intable">YES
7S KS 6S 6C *6D QDS
</PRE></TD></TR></TABLE>
______________________________________________________
1167||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every day, farmer Ion (this is a Romanian name) takes out all his horses, so they may run and play. When they are done, farmer Ion has to take all the horses back to the stables. In order to do this, he places them in a straight line and they follow him to the stables. Because they are very tired, farmer Ion decides that he doesn't want to make the horses move more than they should. So he develops this algorithm: he places the 1st P<SUB>1</SUB> horses in the first stable, the next P<SUB>2</SUB> in the 2nd
stable and so on. Moreover, he doesn't want any of the <b>K</b> stables he owns to be empty, and no horse must be left outside. Now you should know that farmer Ion only has black or white horses, which don't really get along too well. If there are <b>i </b>black horses and <b>j</b> white horses in one stable, then the coefficient of unhappiness of that stable is<b> i*j</b>. The total coefficient of unhappiness is the
sum of the coefficients of unhappiness of every of the K stables.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine a way to place the <b>N</b> horses into the <b>K</b> stables, so that the total coefficient of unhappiness is minimized.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the 1st line there are 2 numbers: <b>N</b> (1 &le; N &le; 500) and <b>K</b> (1 &le; K &le; N). On the next N lines there are N numbers. The i-th of these lines contains the color of the i-th horse in the sequence: 1 means that the horse is black, 0 means that the horse is white.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should only output a single number, which is the minimum possible value for the total coefficient of unhappiness.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 3
1
1
0
1
0
1
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Place the first 2 horses in the first stable, the next 3 horses in the 2nd stable and the last horse in the 3rd stable.
</DIV></DIV>
______________________________________________________
1168||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Along the surface of Romania, there are <b>K</b> radio stations positioned
at different points and altitudes. Each of these radio stations has
a given broadcast radius, that is, the maximum distance it can send
its signal to. The government wants to place a radio receiver somewhere
on the map, so that it will receive the signals from all
the K radio stations: this means that the distance to every radio station
should be less or equal to the broadcast radius of that radio station.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The map of Romania is given as a <b>M*N</b> matrix, where the value
in row i and column j represents the altitude of the corresponding 
zone. The side of a square in this matrix is 1. All the
K radio stations are placed at distinct coordinates on the map and
at the same height as the corresponding zone (plus, they are
placed exactly in the center of their square). The radio receiver
can be placed in the center of any square not occupied by a radio station,
at the same altitude of the square or it can be placed higher
with an integer number of meters. The radio receiver cannot
be placed in a square occupied by a radio station.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to decide how many possibilities to place the radio receiver
the government has. Note that if the radio receiver may be placed in row
<b>i</b> and column <b>j</b> at altitudes <b>h1</b> and <b>h2</b> (h1 &ne; h2), this
counts as 2 different possibilities.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains 3 integers: <b>M</b>, <b>N</b> (1 &le;
M, N &le; 50) and <b>K</b> (1 &le; K &le; min(M*N-1, 1000)),
representing the dimensions of the map and the number of radio
stations. Next there are M lines each containing N integers, which are
the altitudes of the zones on the map (no altitude will be higher than
32000 or lower than 0). After that, there will be K lines, each containing
3 numbers: <b>i, j</b> and <b>R</b>. i and j will be the location of
the radio station on the map and R will be its broadcast radius (R
is a real number, not larger than 100000 and not less than 0).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">No two radio stations will be placed on the same square.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output one integer number, which is the total number of
valid possibilities to place the radio receiver on the map.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 5 3
1 2 3 4 5
6 7 8 9 10
1 2 3 4 5
6 7 8 9 10
5 4 3 2 1
1 1 4.3
5 5 4.3
5 1 4.3
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The radio receiver can be placed at position (3, 2), with extra height 0 and extra height 1, and at position (3, 3), with extra height 0 and extra height 1. So,
there are 4 possible ways to place the receiver.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When you compute distances,
be aware that they are distances in a 3D space.
</DIV></DIV>
______________________________________________________
1169||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Romanian software company has bought <b>N</b> computers, which are going to be connected so that they may form a network. A connection can be made between any 2
distinct computers and is bidirectional (if the 2 computers are labeled i and j, then data can be sent both from i to j and from j to i). Your job is to determine a way to connect all the N computers, in such a way that every 2 computers will be able to send data between them (directly or using other computers as intermediate devices).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is only one extra requirement: the network must contain exactly <b>K</b> critical pairs. A pair (i, j) is critical if there exists a connection which, if removed, data communication between i and j will become impossible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of 2 integer numbers: N (1 &le; N &le; 100), the number of computers
the network will contain and K (0 &le; K &le; N*(N-1)/2), the number of critical pairs the network will contain.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the connections which form the network, one connection per line. A connection is described by a pair (i, j), which means that i and j are directly connected. The 2 numbers of the pair should be separated by a blank. If you cannot
build a network which contains exactly K critical pairs, then you should output -1.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 12
</PRE></TD><TD><PRE CLASS="intable">1 2
1 3
2 3
3 4
4 5
4 6
4 7
5 6
5 7
6 7
</PRE></TD></TR></TABLE>
______________________________________________________
1170||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sergeant Gica (this is a Romanian name) has just been announced that he is going to be sent out in the desert for training. He will have to walk <b>L</b> meters away from the army's headquarters, on a straight line. Since he is a bit lazy and because he has been allowed to pick up his own route, sergeant Gica takes a look at the map of the region. On the map, the army's headquarters are at the coordinates (0, 0). There are also <b>N</b> rectangular regions which have strictly positive coordinates marked on the map. Each rectangle has a given "delay coefficient". This means that the time needed to cross a line segment which is contained inside the rectangle, is equal to the
product between the length of the segment and the delay coefficient of the rectangle. The total time needed to travel all the L meters is equal to the sum of the times needed to travel every segment of the straight line which lies inside the zones marked on the map (including the desert).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that the desert (the space between the N rectangular zones) has its own delay coefficient.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The 1st line contains <b>N</b> (1 &le; N &le; 500), the number of rectangular zones marked on the map. The next N lines contain 5 numbers each: <b>x1 y1 x2 y2 c</b>. (x1, y1) are the coordinates of the lower left corner of the rectangle, (x2, y2) are the coordinates of the upper right corner of the rectangle and c is the delay coefficient of the rectangle. Then there is one more line which contains 2 numbers: <b>c0</b> (the delay coefficient of the desert) and <b>L</b> (the number of meters sergeant Gica has to travel).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All numbers are positive integers not greater than 32000. L will be larger than the distance from (0, 0) (the headquarters) to any point located on the edges of the
rectangles (this means that the sergeant's "trip" will always end up in the desert and not inside any of the rectangular zones marked on the map).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the 1st line, you should output the minimum time needed to travel L meters on a straight line, starting from (0, 0) and ending at a point with positive coordinates.
On the 2nd line you should output the coordinates of the point where sergeant Gica should go to (this point must be L meters away from (0, 0) and must have positive coordinates). If there are more solutions with the same minimum time, you may output any one of them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output all 3 numbers with 6 decimal digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
1 1 2 2 1
2 3
</PRE></TD><TD><PRE CLASS="intable">4.585786
2.121320 2.121320
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The sergeant walks a total of 1.414.. meters inside the rectangular zone and (3-1.414..) meters outside the zone (through the desert). Thus, the total time is: 1.414..
* 1 + (3 - 1.414..) * 2.
</DIV></DIV>
______________________________________________________
1171||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An astronaut of the RSA (Romanian Space Agency) was "forgotten" on the <b>N-th</b> level
of a Romanian Space Station. He wants to go down to the 1st level, where the communication devices are located, so he can call a space ship to take him home. Unfortunately, the astronaut doesn't know how long the ship will take until it gets to the space station. That's why he wants to gather as much space food as possible before he sends out the message to the ship.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every level of the space station contains <b>16</b> rooms, arranged in 4 rows and 4 columns (numbered accordingly). Every room contains an amount of space food (a number between 1 and 255).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The astronaut may move freely inside the space station, but he is not allowed to visit the same room twice. Moreover, if he went to a lower level, he is not allowed to move back to a higher level. From every room, he could move either north, south, east or west (on the same level) or down (on the same row and column, but at the level below), if there is a door to the level below in that room. For each level, a map is given which tells which rooms have doors to the level below them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Whenever he enters a room, the astronaut gets the amount of space food found in that room. The food ratio of the astronaut is defined as the total quantity of food
gathered during his trip inside the space station divided by the number of days he spends inside the space station before he sends out the signal to the space ship. It is considered that the astronaut spends the 1st day in the room he begins his trip, on the N-th level, and that he gets the amount of space food found in this room during this day. He is only allowed to move once per day.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have to find a path from the N-th level to the 1st level, which has the maximum food ratio. Note that the astronaut does not have to call the ship as soon as he gets to a room on the 1st level. He may move around the level first, gather the necessary food and only then call the ship.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains a single number: N (1 &le; N &le; 16), the number of levels of the space station. For each level, there will be 8 lines of input containing
its description. The first four lines will contain four integers, representing the amount of space food found in the corresponding room on that level (the number found on the j-th position on the i-th line represents the amount of food in the room found on row i and column j on the level). The next four lines will contain four integers, in the
range 0..1. 1 means that there is a door from that room to the level below, 0 means that there isn't one. Level 1 will have only 0s on these four lines (there is no level below level 1).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The order of the levels in the input will be from top to bottom (from level N to level 1). The last line of input will contain 2 numbers <b>r</b> and <b>c</b>, representing
the row and column of the room the astronaut is initially in, on level N.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the 1st line, you should output the maximum possible food ratio for the astronaut, with 4 decimal digits. On the 2nd line you should output the length of his path
(print 0 if the astronaut never gets out of the room he is initially found in). If the length of his path is <b>L</b>, L &gt; 0, then on the 3rd line of output you should output L characters: 'N', 'E', 'S', 'W' or 'D', each character corresponding to one direction of movement (north, east, south, west and down). If there are more solutions with the same maximum food ratio, then you may output any of them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that, if L is the length of the astronaut's path, then he spends L+1 days before he calls the space ship.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every test case is guaranteed to have at least 1 solution.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 20 1 1
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
0 0 0 0
0 0 0 0
0 0 0 0
1 1 1 1
20 1 1 1
1 1 1 1
1 1 1 1
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
1 1
</PRE></TD><TD><PRE CLASS="intable">8.6000
4
EDSW
</PRE></TD></TR></TABLE>
______________________________________________________
1172||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Romanian tourist went on a trip to the Mediterranean Sea. He arrived to one of the cities of the 3 islands he is going to visit. Every island has exactly <b>N</b>
cities and they are all ports. The tourist plans to begin his journey from the city he is in, visit all the other <b>3*N-1</b> cities exactly once and then return to the starting city so he may go back home after that.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, there are cannibals along the roads on all the 3 islands. That's why travelling on the road between 2 cities on the same island is very dangerous and,
consequently, prohibited. Hopefully, there are always ship routes. Every pair of cities which are not on the same island is connected by such a ship route. There are no routes between cities which are on the same island.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The tourist wants to know in how many ways he can plan his journey through the 3 islands.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a single number: N (1 &le; N &le; 30), the number of cities on each of the 3 islands.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output a single number: the number of ways the tourist can plan his trip. Note that 2 trips are identical if the successions of the 3*N cities are identical
or if the succession of the 3*N cities of the first trip is the same as the succession of the 3*N cities of the 2nd trip, read backwards (for instance, if every island had 1 city, numbered according to the island's number, the trips 1-2-3-1 and 1-3-2-1 would be identical).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">16
</PRE></TD></TR></TABLE>
______________________________________________________
1173||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here, in Romania, all snails are lazy. Take Wally the Snail, for example. He has to visit <b>N</b> friends which are located at distinct coordinates in the plane. But since
he is so lazy, he doesn't want to leave his house. He said that he will go visit his friends if someone can show him the right path to follow.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He wants to leave his house, visit all of his friends exactly once and then return to his house. Between 2 friends' houses or between his house and a friend's house, he walks on the straight line which connects them. 'Is that all ?', someone asked. Wally realized that this would be too easy, so he added that, during his trip, no two line segments along which he travels should cross (except for every 2 consecutive segments, which cross at one end). You must find a path for Wally, so he can go visit all of his friends (although he doesn't want to).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the 1st line of input, there will be 2 real numbers: X and Y, separated by a blank, representing the coordinates of Wally's house. On the 2nd line, there will be an integer
number: N (2 &le; N &le; 1000), the number of friends Wally has to visit. On the next N lines, there will be 3 numbers, separated by blanks: X , Y and ID. ID will be an integer number, representing the ID of one of Wally's friends. X and Y will be 2 real numbers, representing the coordinates of Wally's friend's house (they will be given with at most 3 decimal digits and will be in the range -100000 .. 100000).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All IDs are unique, between 1 and N. No 3 friends (including Wally) have their houses on the same straight line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output N+2 lines: the IDs of the friends whose houses Wally is about to visit, in the order he visits them. Start with Wally's ID, continue with the ID of
the friend he visits first and so on. Finish with Wally's ID. Wally has ID 0.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no solution, then print a single line, containing the number -1.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 
3 
3 3 1 
6 0 2 
6 2 3 
</PRE></TD><TD><PRE CLASS="intable">0 
1 
3 
2 
0 
</PRE></TD></TR></TABLE>
______________________________________________________
1174||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Three Romanian programmers developed this new algorithm which generates all the N! permutations with N elements in a specific order, they called the <b>transposition order</b>. The algorithm starts with the permutation 1 2 3 .. N. Then it chooses a
pair of two adjacent elements (that is, two elements which are located on consecutive
positions) and switches them. This way, they get a new permutation. They do the same for this new permutation and they obtain a new one and so on, until all the N! permutations are generated. You realize that the algorithm must be pretty smart in order to generate all the N! permutations exactly once (without repetitions).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Hopefully, your task will not be to write such an algorithm. In fact, you are given the files perm.pas and perm.cpp, which are two implementations of this algorithm (in Pascal and C++). They read the integer <b>N</b> (1 &le; N &le; 100) from the keyboard and print to the file <b>perm.txt</b> all the N! permutations, one per line, in the order in which the algorithm generates them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">What you have to do is, given a permutation, to find out its index in the list of permutations generated by the algorithm.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE WIDTH="100%">
<TR>
<TH WIDTH="50%">Perm.pas</TH>
<TH WIDTH="50%">Perm.cpp</TH>
</TR>
<TR>
<TD VALIGN="TOP">
<PRE>
const
  fileout = 'perm.txt';
  MAXN = 100;

var
  fout :text;
  n, i :integer;
  permut :array [1..MAXN] of integer;
  position :array [1..MAXN] of integer;
  dir :array [1..MAXN] of integer;

procedure PrintPermutation;
begin
  for i := 1 to n do
    write(fout, ' ', permut[i]);
  writeln(fout);
end;

procedure Switch(p1, p2 :integer);
var
  xch :integer;
begin
  xch := permut[p1];
  permut[p1] := permut[p2];
  permut[p2] := xch;
  position[permut[p1]] := p1;
  position[permut[p2]] := p2;
end;

procedure GeneratePermutation(nn :integer);
var ii :integer;
begin
  if (nn = n + 1) then
    PrintPermutation
  else
  begin
    GeneratePermutation(nn + 1);
    for ii := 1 to nn - 1 do
    begin
      Switch(position[nn],
             position[nn] + dir[nn]);
      GeneratePermutation(nn + 1);
    end;
    dir[nn] := -dir[nn];
  end;
end;

begin
  readln(n);
  for i := 1 to n do
  begin
    permut[i] := i;
    position[i] := i;
    dir[i] := -1;
  end;

  assign(fout, fileout);
  rewrite(fout);

  GeneratePermutation(1);

  close(fout);
end.
</PRE>
</TD>
<TD VALIGN="TOP">
<PRE>
#include &lt;stdio.h&gt;

const char *fileout = "perm.txt";
const int MAXN = 100;

FILE *fout;
int n, i;
int permut[MAXN + 1];
int position[MAXN + 1];
int dir[MAXN + 1];

void PrintPermutation()
{
  for (i = 1; i &lt;= n; i++)
    fprintf(fout, " %d", permut[i]);
  fprintf(fout, "\n");
}

void Switch(int p1, int p2)
{
  int xch = permut[p1];
  permut[p1] = permut[p2];
  permut[p2] = xch;
  position[permut[p1]] = p1;
  position[permut[p2]] = p2;
}

void GeneratePermutation(int nn)
{
  int ii;

  if (nn == n + 1)
    PrintPermutation();
  else
  {
    GeneratePermutation(nn + 1);
    for (ii = 1; ii &lt;= nn - 1; ii++)
    {
      Switch(position[nn],
             position[nn] + dir[nn]);
      GeneratePermutation(nn + 1);
    }
    dir[nn] = -dir[nn];
  }
}

int main()
{
  scanf("%d", &amp;n);
  for (i = 1; i &lt;= n; i++)
  {
    permut[i] = i;
    position[i] = i;
    dir[i] = -1;
  }

  fout = fopen(fileout, "wt");

  GeneratePermutation(1);

  fclose(fout);
  return 0;
}
</PRE>
</TD>
</TR>
</TABLE>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer: N (1 &le; N &le; 100). The 2nd line contains N integers separated by blanks. They are the given permutation with N elements.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print one single integer, which will be the index of the permutation in the list of N! permutations generated by the algorithm described above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 
2 3 1 4 
</PRE></TD><TD><PRE CLASS="intable">17 
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Run the 2 given programs for N=4 and you will notice that the permutation 2 3 1 4 will be on the 17th line of the file perm.txt.
</DIV></DIV>
______________________________________________________
1175||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have been asked to discover some important properties of one strange sequences set. Each sequence of the parameterized set is given by a recurrent formula:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">X<SUB>n+1</SUB> = F(X<SUB>n-1</SUB>, X<SUB>n</SUB>),</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where n &gt; 1, and the value of F(X,Y) is evaluated by the following algorithm:
<OL>
<LI>find H = (A<SUB>1</SUB>*X*Y + A<SUB>2</SUB>*X + A<SUB>3</SUB>*Y + A<SUB>4</SUB>);</LI>
<LI>if H &gt; B<SUB>1</SUB> then H is decreased by C until H &le; B<SUB>2</SUB>;</LI>
<LI>the resulting value of H is the value of function F.</LI>
</OL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The sequence is completely defined by nonnegative constants A<SUB>1</SUB>, A<SUB>2</SUB>, A<SUB>3</SUB>, A<SUB>4</SUB>, B<SUB>1</SUB>, B<SUB>2</SUB> and C.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One may easily verify that such sequence possess a property that X<SUB>p+n</SUB> = X<SUB>p+q+n</SUB> for appropriate large enough positive integers p and q and for all n &ge; 0. You task is to find the minimal p and q for the property above to hold. Pay attention that numbers p and q are well defined and do not depend on way minimization is done.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains seven integers: A<SUB>1</SUB>, A<SUB>2</SUB>, A<SUB>3</SUB>, A<SUB>4</SUB>, B<SUB>1</SUB>, B<SUB>2</SUB> and C. The first two members of sequence (X<SUB>1</SUB> and X<SUB>2</SUB>) are placed at the second line. You may assume that all intermediate values of H and all values of F fit in range [0..100000].</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An output should consist of two integers (p and q) separated by a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 2 3 20 5 7
0 1</PRE></TD><TD><PRE CLASS="intable">2 3</PRE></TD></TR></TABLE>
______________________________________________________
1176||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Galaxy Empire consists of N planets. Hyperchannels exist between most of the planets. New Emperor urged to extend hyperchannels network in such a way, that he can move from any planet to any other using no more than one channel. One can pass through the channel only in one direction.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last channel-establishing ship is located on the base near planet A. This ship can’t pass through the existing channel, it always establishes a new one. But presence of two channels connecting the same planets in one direction makes navigation too difficult, almost impossible. The problem is to find a route for this ship to establish all necessary channels with no excessive ones. In the end of this route ship should return to the base.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains integer <i>N</i> &le; 1000 and number of the planet <i>A</i> (<i>A</i> &le; <i>N</i>) where the base is situated.
Each of the following <i>N</i> lines contain <i>N</i> numbers, the <i>j</i>-th number of the <i>i</i>-th line equals to 1 if there exists channel from planet <i>i</i> to planet <i>j</i>, and equals to 0 otherwise.
It is known, that Empire can fulfill its need of hyperchannels by establishing no more than 32000 new ones.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain the sequence in which channels should be established. Each line should contain two integers — numbers of source and destination planet of channel. You may assume, that solution always exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 2
0 0 1 0
0 0 1 0
1 1 0 1
0 0 1 0
</PRE></TD><TD><PRE CLASS="intable">2 4
4 1
1 2
2 1
1 4
4 2
</PRE></TD></TR></TABLE>
______________________________________________________
1177||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Development team of new DBMS asks you to write subroutine for the ‘like’ operator.<BR>
‘Like’ operator works as following. It returns true if text string matches specified template. Template is a text string containing any symbols or following special sequences:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE CELLSPACING="0" CELLPADDING="5" BORDER="1" ALIGN="CENTER">
<TR>
<TD>%</TD>
<TD>matches any number of any characters</TD>
</TR>
<TR>
<TD>_</TD>
<TD>matches any single character</TD>
</TR>
<TR>
<TD>[с1-с2]</TD>
<TD>matches any single character in the range c1-c2</TD>
</TR>
<TR>
<TD>[c1c2c3…cN]</TD>
<TD>matches any single character of the set {c1,c2,c3,…,cN}</TD>
</TR>
<TR>
<TD>[^с1-с2]</TD>
<TD>matches any single character not in the range c1-c2</TD>
</TR>
<TR>
<TD>[^c1c2c3…cN]</TD>
<TD>matches any single character not in the set {c1,c2,c3,…,cN}</TD>
</TR>
</TABLE></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains number of tests <i>N</i> &le; 1000. Next <i>N</i> lines contain comparisons in the following format:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><code>'string' like 'template'</code></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">String or template may contain any symbols with ASCII codes 32-255. Inner entrance of apostrophe symbol (ASCII 39) into string or template is encoded by double apostrophe symbol.
Maximal length of string or template is 100 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of N comparisons output single 'YES' or 'NO' at a line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15
'abcde' like 'a'
'abcde' like 'a%'
'abcde' like '%a'
'abcde' like 'b'
'abcde' like 'b%'
'abcde' like '%b'
'25%' like '_5[%]'
'_52' like '[_]5%'
'ab' like 'a[a-cdf]'
'ad' like 'a[a-cdf]'
'ab' like 'a[-acdf]'
'a-' like 'a[-acdf]'
'[]' like '[[]]'
'''''' like '_'''
'U' like '[^a-zA-Z0-9]'
</PRE></TD><TD><PRE CLASS="intable">NO
YES
NO
NO
NO
NO
YES
YES
YES
YES
NO
YES
YES
YES
NO
</PRE></TD></TR></TABLE>
______________________________________________________
1178||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Great Akbardin decided to build new roads in his caliphate. He wants to build minimal number of roads so that one can travel from any town to any other using only these roads. But this problem is too difficult for him and his mathematicians. So, at first, they decided to build straight roads between towns in such a way, that every town becomes connected with only one other. Because crossroads make movement dangerous, no two roads should intersect.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You task is to make plan of the roads being given coordinates of towns.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains an even integer <i>N</i> (<i>N</i> &le; 10000) — the number of towns. Each of the next <i>N</i> lines contains pair of integers — coordinates of <i>i</i>-th town <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> <NOBR>(&minus;10<SUP>9</SUP> &lt; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &lt; 10<SUP>9</SUP>).</NOBR>
No three towns lay on one line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i>/2 lines with description of one road on each. Road is identified by pair of towns it connects.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 2
1 1
3 4
4 4
</PRE></TD><TD><PRE CLASS="intable">1 3
2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1179||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During building of roads, Akbardin read many statistical reports. Each report contained a lot of numbers. But different reports contained numbers in different numeric systems. And Akbardin asks his mathematicians a question – in what numeric system text contains maximal amount of numbers. Number is a sequence of digits, with non-digits to the left and right. Capital Latin letters are used in k-based system with k > 10 ('A' = 10, 'B' = 11, …, 'Z' = 35).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You task is to help mathematicians to solve this problem and save their heads.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Text consists of digits, capital Latin letters, spaces and line breaks. 
Size of input doesn’t exceed 1 Mb.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain two integers: base of numeric system <i>K</i> (2 &le; <i>K</i> &le; 36) and amount of numbers. If more than one answer is possible, output the one with a less <i>K</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">01234B56789
AZA</PRE></TD><TD><PRE CLASS="intable">11 4</PRE></TD></TR></TABLE>
______________________________________________________
1180||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two Nikifors play a funny game. There is a heap of <i>N</i> stones in front of them. Both Nikifors in turns take some stones from the heap. One may take any number of stones with the only condition that this number is a nonnegative integer power of 2 (e.g. 1, 2, 4, 8 etc.). Nikifor who takes the last stone wins.
You are to write a program that determines winner assuming each Nikifor does its best.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An input contains the only positive integer number <i>N</i> (condition <i>N</i> &le; 10<SUP>250</SUP> holds).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain 1 in the case the first Nikifor wins and 2 in case the second one does. If the first Nikifor wins the second line should contain the minimal number of stones he should take at the first move in order to guarantee his victory.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8</PRE></TD><TD><PRE CLASS="intable">1
2
</PRE></TD></TR></TABLE>
______________________________________________________
1181||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a convex polygon with vertices painted in three colors: Red (R), Green (G) and Blue (B). It is known that all the colors are present and any two neighbor vertices have different colors. You are to find out whether it is possible to cut this polygon with noncrossing diagonals so that each of the obtained triangles would have all vertices of different colors: one red, one green and one blue vertex.
Point out a possible way of the cutting if the cutting is possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <i>N</i> of the polygon vertices (4 &le; <i>N</i> &le; 1000). There are <i>N</i> symbols of the set {'R', 'G', 'B'} in the second line that specify a color for the correspondent vertex.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain either a number of drawn diagonals in case the required cutting is possible or the number 0 otherwise (cutting is impossible). In the first case the following lines should contain a description of the drawn diagonals. The description of a diagonal takes one line and consists of diagonal vertices numbers. The numbers are separated with a space.
If there are several possible cuttings that satisfy the requirements you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
RBGBRGB
</PRE></TD><TD><PRE CLASS="intable">4
1 3
3 7
5 7
5 3
</PRE></TD></TR></TABLE>
______________________________________________________
1182||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to divide a number of persons into two teams, in such a way, that:
<ul>
<li>everyone belongs to one of the teams;</li>
<li>every team has at least one member;</li>
<li>every person in the team knows every other person in his team;</li>
<li>teams are as close in their sizes as possible.</li>
</ul></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This task may have many solutions. You are to find and output any solution, or to report that the solution does not exist.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For simplicity, all persons are assigned a unique integer identifier
from 1 to N.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer number N (2 &le; N &le; 100) - the total number of persons to divide into teams, followed
by N lines - one line per person in ascending order of their identifiers. Each line contains the list of distinct numbers A<sub>ij</sub> (1 &le; A<sub>ij</sub> &le; N, A<sub>ij</sub> &ne; i) separated by spaces. The list represents identifiers of persons that i<sup>th</sup> person knows. The list is terminated by 0.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the solution to the problem does not exist, then write a single
message &ldquo;No solution&rdquo; (without quotes). Otherwise write a solution on two lines. On the first line write the number of persons in the first team, followed by the identifiers of persons in the first team, placing one space before each identifier. On the second line describe the second team in the same way. You may write teams
and identifiers of persons in a team in any order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
2 3 5 0
1 4 5 3 0
1 2 5 0
1 2 3 0
4 3 2 1 0
</PRE></TD><TD><PRE CLASS="intable">3 1 3 5
2 2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1183||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us define a regular brackets sequence in the following way:
<ol>
<li>Empty sequence is a regular sequence.</li>
<li>If S is a regular sequence, then (S) and [S] are both regular sequences.</li>
<li>If A and B are regular sequences, then AB is a regular sequence.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, all of the following sequences of characters are regular 
brackets sequences:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><tt>()</tt>, <tt>[]</tt>, <tt>(())</tt>, <tt>([])</tt>, <tt>()[]</tt>, <tt>()[()]</tt></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And all of the following character sequences are not:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><tt>(</tt>, <tt>[</tt>, <tt>)</tt>, <tt>)(</tt>, <tt>([)]</tt>, <tt>([(]</tt></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some sequence of characters '(', ')', '[', and ']' is given. You are to find
the shortest possible regular brackets sequence, that contains the given
character sequence as a subsequence. Here, a string
a<sub>1</sub>a<sub>2</sub>...a<sub>n</sub> is called a subsequence of the string
b<sub>1</sub>b<sub>2</sub>...b<sub>m</sub>, if there exist such indices
1 &le; i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>n</sub> &le; m,
that a<sub>j</sub>=b<sub>i<sub>j</sub></sub> for all 1 &le; j &le; n.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains at most 100 brackets (characters '(', ')', '[' and ']')
that are situated on a single line without any other characters among them.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single line that contains some regular brackets sequence
that has the minimal possible length and contains the given sequence as a
subsequence.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">([(]</PRE></TD><TD><PRE CLASS="intable">()[()]</PRE></TD></TR></TABLE>
______________________________________________________
1184||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Inhabitants of the Wonderland have decided to hold a regional
programming contest. The Judging Committee has volunteered and
has promised to organize the most honest contest ever. It was decided
to connect computers for the contestants using a &ldquo;star&rdquo; topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance
from it.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a
specified number of cables with equal lengths. The Judging
Committee wants the cables to be as long as possible to sit
contestants as far from each other as possible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter, and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known
and the Cable Master is completely puzzled.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to help the Cable Master, by writing a program that will
determine the maximal possible length of a cable piece that can be
cut from the cables in the stock, to get the specified number of
pieces.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers N and K, separated by a space. N (1 &le; N &le; 10000) is the number of cables in the stock, and K
(1 &le; K &le; 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths are written with a centimeter precision, with exactly two digits after a decimal point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the maximal length (in meters) of the pieces that Cable
Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output must contain the single number &ldquo;0.00&rdquo; (without quotes).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 11
8.02
7.43
4.57
5.39</PRE></TD><TD><PRE CLASS="intable">2.00</PRE></TD></TR></TABLE>
______________________________________________________
1185||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time there was a greedy King who ordered his
chief Architect to build a wall around the King's castle. The
King was so greedy, that he would not listen to his Architect's 
proposals to build a beautiful brick wall with a perfect shape
and nice tall towers. Instead, he ordered to build the wall 
around the whole castle using the least amount of stone and
labor, but demanded that the wall should not come closer to
the castle than a certain distance. If the King finds that
the Architect has used more resources to build the wall than
it was absolutely necessary to satisfy those requirements,
then the Architect will loose his head. Moreover, he demanded
Architect to introduce at once a plan of the wall listing
the exact amount of resources that are needed to build
the wall.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help poor Architect to save his head, 
by writing a program that will find the minimum possible
length of the wall that he could build around the
castle to satisfy King's requirements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The task is somewhat simplified by the fact, that the King's
castle has a polygonal shape and is situated on a flat ground.
The Architect has already established a Cartesian coordinate 
system and has precisely measured the coordinates of
all castle's vertices in feet.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers N and L separated by a space. N (3 &le; N &le; 1000) is the number of vertices in the King's castle, and L (1 &le; L &le; 1000) is the minimal number of feet that King allows for the wall to come close to the castle.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next N lines describe coordinates of castle's vertices in a clockwise order. Each line contains two integers X<sub>i</sub> and Y<sub>i</sub> separated by a space 
(-10000 &le; X<sub>i</sub>, Y<sub>i</sub> &le; 10000)
that represent the coordinates of i<sup>th</sup> vertex.
All vertices are different and the sides of the castle do
not intersect anywhere except for vertices.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the single number that represents the minimal possible length of the wall in feet that could be
built around the castle to satisfy King's requirements.
You must present the integer number of feet to the King,
because the floating numbers are not invented yet. However,
you must round the result in such a way, that it is
accurate to 8 inches (1 foot is equal to 12 inches),
since the King will not tolerate larger error in
the estimates.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 100
200 400
300 400
300 300
400 300
400 400
500 400
500 200
350 200
200 200
</PRE></TD><TD><PRE CLASS="intable">1628
</PRE></TD></TR></TABLE>
______________________________________________________
1186||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Bill teaches chemistry in the school and has prepared a number
of tests for his students. Each test has a chemical formula and a number
of possible reaction outcomes that his students are to choose one 
correct from. However, Bill wants to make sure that he has not 
made any typos while entering his tests into a computer and that his
students won't easily throw away wrong answers simply by counting 
a number of chemical elements on the left and on the right side of 
the equation, which should be always equal in a valid reaction.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that will help Bill. The program
shall read the description of the test for the students that
consists of the given left side of the equation and a number of
possible right sides, and determines if the number of chemical
elements on each right side of the equation is equal to the
number of chemical elements on the given left side of the
equation.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To help you, poor computer folks, that are unaware of the
complex world of chemistry, Bill has formalized your task. Each side
of the equation is represented by a string of characters without
spaces, and consists of one or more chemical sequences separated 
by a '+' (plus) characters. Each sequence has an optional
preceding integer multiplier that applies to the whole sequence
and a number of elements. Each element is optionally followed by an
integer multiplier that applies to it. An element in this equation
can be either distinct chemical element or a whole sequence
that is placed in round parenthesis.
Every distinct chemical element is represented by either one 
capital letter or a capital letter that is followed by a small
letter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Even more formally, using notation that is similar to BNF, we can write:
<ul>
<li>&lt;formula&gt; ::= [&lt;number&gt;] &lt;sequence&gt; { '+' [&lt;number&gt;] &lt;sequence&gt; }</li>
<li>&lt;sequence&gt; ::= &lt;element&gt; [&lt;number&gt;] { &lt;element&gt; [&lt;number&gt;] }</li>
<li>&lt;element&gt; ::= &lt;chem&gt; | '(' &lt;sequence&gt; ')'</li>
<li>&lt;chem&gt; ::= &lt;uppercase_letter&gt; [ &lt;lowercase_letter&gt; ]</li>
<li>&lt;uppercase_letter&gt; ::= 'A'..'Z'</li>
<li>&lt;lowercase_letter&gt; ::= 'a'..'z'</li>
<li>&lt;number&gt; ::= '1'..'9' { '0'..'9' }</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every distinct chemical element is said to occur in the given formula
for some total number X, if X is the sum of all separate occurrences 
of this chemical element multiplied to all numbers that apply to it.
For example, in the following chemical formula:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><tt>C2H5OH+3O2+3(SiO2)</tt>
<ul>
<li><tt>C</tt> occurs for a total of 2 times.</li>
<li><tt>H</tt> occurs for a total of 6 times (5 + 1).</li>
<li><tt>O</tt> occurs for a total of 13 times (1 + 3*2 + 3*2).</li>
<li><tt>Si</tt> occurs for a total of 3 times.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All multipliers in the formula are integer numbers that are at least 2 if
explicitly specified and are 1 by default. Each chemical formula is at most 100
characters long, and every distinct chemical element is guaranteed to occur
for a total of no more than 10000 times in each formula.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line represents a chemical formula that is to
be tested as the left side of the equation. The second line contains a single integer number <i>N</i> (1 &le; <i>N</i> &le; 10), which is the number of right sides of the equation that are to be tested. Each one of the following 
<i>N</i> lines represents one such formula.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write <i>N</i> lines &mdash; one line per each possible 
answer of the chemical test for Bill's students that is given in the 
input. For each right-hand side formula that is encountered in the
input, you should output:
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;left_formula&gt;==&lt;right_formula&gt;</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">if the total number of occurrences of each distinct chemical element on the
left-hand side equals to the total number of occurrences of this
chemical element on the right-hand side.
Otherwise write:</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;left_formula&gt;!=&lt;right_formula&gt;</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <tt>&lt;left_formula&gt;</tt> must be replaced exactly (character by
character) with the original left-hand side formula as it is given in the first line
of the input, and <tt>&lt;right_formula&gt;</tt> must be replaced exactly
with each right-hand side formula as they are given in the input. Do not 
place any spaces in the lines you write.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">C2H5OH+3O2+3(SiO2)
7
2CO2+3H2O+3SiO2
2C+6H+13O+3Si
99C2H5OH+3SiO2
3SiO4+C2H5OH
C2H5OH+3O2+3(SiO2)+Ge
3(Si(O)2)+2CO+3H2O+O2
2CO+3H2O+3O2+3Si</PRE></TD><TD><PRE CLASS="intable">C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2
C2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si
C2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2
C2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH
C2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge
C2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2
C2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si
</PRE></TD></TR></TABLE>
______________________________________________________
1187||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your team was hired by the international corporation ACM
(Analytical Calculation Maxims). Every year ACM creates and
conducts various surveys. Surveys themselves are simple forms
with a list of questions and a list of possible answers for
every question. Surveys are distributed around the globe,
where field agents question the target group of people.
All the answers are gathered in the ICPC
(International Computation and Processing Center), where
teams of well-paid analysts mine raw data in
search for relevant correlations. The raw data for each
individual survey consists of lots of lines of answers.
Each line corresponds to every questioned person and
for every question lists answers that the person has
made on that particular survey.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first step of analysis that your team was 
hired to automate is to create cross tables that 
correlate answers on interesting pairs of questions.
In its most simple way, given a pair of questions,
cross table has a row for every possible answer
on the first question, and has a column for every possible
answer on the second question. Each cell of the cross
table contains a number of lines in the raw data that
has both answers for the corresponding questions at
the same time.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, your task is complicated by the fact that
you are to compute and output not only simple cross
table values, but also total values for every row and
column in the cross table (that is the sum of values in the
corresponding row and column) that are placed in an
additional last column and last row, as well as
a percentage distributions for every row and column.
Percentage distribution for a row is an additional number
in every cell in that row that shows percent ratio
of the value in that cell to the total value for that
row, unless the total value is zero (in that case
percentage distribution for this row is not defined).
The same applies to the percentage distributions of
columns. Thus, the cross table in your output will have 
at most three values in every cell (the value itself,
row-wise percent, and column-wise percent). 
Please note, that percentage distributions also apply
to totals. For example, in the total column for every 
row the row-wise percent will be always 100%, unless
the total value for the row is zero (in that case 
row-wise percents are not defined), and column-wise
percent shows percents ratio of the total value for this
row to the total number of lines in the raw data (which
is the value that can be found in the last column
of the last row).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Percents are rounded to integers on output. 
Percent that has a non-zero fractional part
is rounded to either the smallest integer number greater 
than the resulting percent, or the largest integer number 
smaller than the resulting percent, in such a way, that 
the sums of all corresponding row-wise percents by row 
(without row totals) or column-wise percents by column
(without column totals) are equal to 100% unless they
are undefined. There are various rounding algorithms 
that produce results satisfying the above constraints. 
You are free to use any rounding algorithm as long as
the above constraints are satisfied.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of 3 sections: survey description,
survey results, and cross table descriptions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the name of the
survey, which is at most 100 characters long. Subsequent lines describe all the questions in the survey. On the first
line of every question there is a 3-character question code
(capital letters and digits only) followed by a space, and followed by the question name, which is at most 80 characters long. Each subsequent line for a question describes one possible answer on the question and starts with a space, followed by a single-character code for the
answer (capital letter, digit, or character '.', '*', or '@'), followed by a space and followed by an answer description, which is at most 40 characters long. The list of questions is terminated by the line with a single character '#'. All answer codes are unique within the question, and all question codes are unique within the input. There are at least 2 and at most 10 possible answers per question and at least 2 and at most 100 questions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next lines in the input describe survey results. Every line contains a character per question (in the order they appear in the input) that gives the answer code for the corresponding question. The characters follow one another without any delimiters. This section is terminated by the line with a single character '#'. There is at least one line with answers in the section and at most 10000 answers in total (the number of lines times the number of questions).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next lines in the input describe cross tables that are to be created. Each cross table description occupies one line. That line contains the code for the first question, followed by a space, followed by the different code for the second question, followed by a space, and followed by the cross table name, which is at most 100 characters
long. This section is terminated by the line with a single character '#'. There are at most 100 cross table descriptions in the input.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input has no trailing spaces on any line. All names do not start or end with a space, but may contain spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write to the output a cross table for every cross table description in the input in the order they appear in the input. On the first line of the cross table write the survey name, followed by a space, followed by a '-' (dash) character, followed by a space, followed by the cross table name. Then write the description of the first question,
and the description of the second question exactly as they appear in the input and in the same format. Then write an empty line, followed by the table itself. The table contains exactly <tt>1+3*(N1+1)</tt> lines and exactly <tt>6*(N2+2)</tt> characters on every line, where <tt>N1</tt> is the number of possible answers for the first question, and <tt>N2</tt> is the number of possible answers for the second question.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The table has one line for column headings, and <tt>N1+1</tt> rows (3 lines per row). The first <tt>N1</tt> of these rows correspond to the answers on the first question in the order they appear in the input, and the last row is for column totals. The table also has <tt>N2+2</tt> columns, where each column is 6 characters wide. The first column is for row headings; the subsequent <tt>N2</tt> columns correspond to the answers on the second question in the order they appear in the input, and the last column is for row totals. All information in the cells (including headings) is aligned to the right and is padded on the left with spaces to become 6 characters wide.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The heading for the first column is empty. The headings for the subsequent <tt>N2</tt> columns are composed from the second question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The
heading for the last column is the string &quot;TOTAL&quot; (without quotes). The headings for the first <tt>N1</tt> 3-line rows of the cross table are composed from the first question code, followed by a ':' (colon) character, and followed by the corresponding answer code. The heading for the last row is the string &quot;TOTAL&quot; (without quotes). Row headings are situated on the first line of the corresponding row. The subsequent 2 lines in the heading column of every row must be blank.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All non-heading cells in the table contain computed values and percents. On the first line of every cell the corresponding cross table integer value is situated. The second line contains properly rounded to integers row-wise percent, with a mandatory trailing '%' (percent) character, or a single '-' (dash) character if the corresponding row-wise percent is not defined. The third line contains column-wise percent in the same format. All cross tables in the output must be separated by a single empty line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">New Year Phone Survey for ACM ICPC
Q01 Hello!
 H Hello!
 Y Yes!
 * Uhm...
 . (silence)
 @ (other)
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)
BYE Happy New Year!
 Y You too.
 * (censored)
 @ (other)
 . (hang up)
#
.@.
HH@
.@.
YFY
HQ*
H@.
YYY
.H@
HFY
HH@
#
Q01 Q02 Health vs greeting style
Q02 BYE Politeness matrix
#</PRE></TD><TD><PRE CLASS="intable">New Year Phone Survey for ACM ICPC - Health vs greeting style
Q01 Hello!
 H Hello!
 Y Yes!
 * Uhm...
 . (silence)
 @ (other)
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)

       Q02:H Q02:Y Q02:F Q02:Q Q02:@ TOTAL
 Q01:H     2     0     1     1     1     5
         40%    0%   20%   20%   20%  100%
         66%    0%   50%  100%   33%   50%
 Q01:Y     0     1     1     0     0     2
          0%   50%   50%    0%    0%  100%
          0%  100%   50%    0%    0%   20%
 Q01:*     0     0     0     0     0     0
           -     -     -     -     -     -
          0%    0%    0%    0%    0%    0%
 Q01:.     1     0     0     0     2     3
         33%    0%    0%    0%   67%  100%
         34%    0%    0%    0%   67%   30%
 Q01:@     0     0     0     0     0     0
           -     -     -     -     -     -
          0%    0%    0%    0%    0%    0%
 TOTAL     3     1     2     1     3    10
         30%   10%   20%   10%   30%  100%
        100%  100%  100%  100%  100%  100%

New Year Phone Survey for ACM ICPC - Politeness matrix
Q02 How are you?
 H Hello!
 Y Yes!
 F Fine!
 Q Who are you?
 @ (other)
BYE Happy New Year!
 Y You too.
 * (censored)
 @ (other)
 . (hang up)

       BYE:Y BYE:* BYE:@ BYE:. TOTAL
 Q02:H     0     0     3     0     3
          0%    0%  100%    0%  100%
          0%    0%  100%    0%   30%
 Q02:Y     1     0     0     0     1
        100%    0%    0%    0%  100%
         33%    0%    0%    0%   10%
 Q02:F     2     0     0     0     2
        100%    0%    0%    0%  100%
         67%    0%    0%    0%   20%
 Q02:Q     0     1     0     0     1
          0%  100%    0%    0%  100%
          0%  100%    0%    0%   10%
 Q02:@     0     0     0     3     3
          0%    0%    0%  100%  100%
          0%    0%    0%  100%   30%
 TOTAL     3     1     3     3    10
         30%   10%   30%   30%  100%
        100%  100%  100%  100%  100%
</PRE></TD></TR></TABLE>
______________________________________________________
1188||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Castaway Robinson Crusoe is living alone on a remote island.
One day a ship carrying a royal library has wrecked nearby.
Usually Robinson brings any useful stuff from the shipwreck to his
island, and this time he has brought a big chest with books.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Robinson has decided to build a bookcase for these books to create
his own library. He cut a rectangular niche in the rock for that purpose,
hammered in wooden pegs, and placed wooden planks on every pair of pegs 
that have the same height, so that all planks are situated horizontally
and suit to act as shelves.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, Robinson has discovered that one especially old and big
tome does not fit in his bookcase. He measured the height and width of this
tome and has decided to redesign his bookcase in such a way, as to completely
fit the tome on one of the shelves, taking into account locations of other
shelves and the dimensions of the niche. With each shelf in the bookcase,
one of the following operations should be made:

<ol>

<li>Leave the shelf on its original place.</li>

<li>Move the shelf to the left or to the right.</li>

<li>Shorten the shelf by cutting off a part of the plank and optionally
move it to the left or to the right.</li>

<li>Move one of the pegs to a different place at the same height and 
move the shelf to the left or to the right.</li>

<li>Shorten the shelf by cutting off a part of the plank, move one of the
pegs to a different place at the same height, and optionally move the
shortened shelf to the left or to the right.</li>

<li>Remove the shelf from the bookcase along with both supporting pegs.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We say that the shelf is properly supported by its pegs, if exactly two
distinct pegs support the shelf and the center of the shelf is between its
pegs or coincides with one of the pegs. The original design of Robinson's
library has all the shelves properly supported by their pegs and lengths of
all shelves are integer number of inches. The Robinson may only cut an integer
number of inches from the planks, because he has no tools for more precise
measurements. All remaining shelves after the redesign must be properly
supported by their pegs.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find the way to redesign Robinson's library to fit the special
old tome without changing original design too much. You have to minimize the
number of pegs that are to be removed from their original places during
the redesign (operations 4 and 5 remove one peg, and operation 6 removes
two pegs). If there are different ways to solve the problem, then you are
to find the one that minimizes the total length of planks that are to be
cut off (operations 3 and 5 involve cutting something from the planks,
and operation 6 counts as if cutting off the whole plank). Width of
planks and diameter of pegs shall be considered zero.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The tome may not be rotated. The tome should completely (to all its width)
stand on one of the shelves and may only touch other shelves, their pegs or
niche's edge.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains four integers <i>X<sub>N</sub></i>, <i>Y<sub>N</sub></i>, <i>X<sub>T</sub></i>, and <i>Y<sub>T</sub></i>, separated by spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 &le; <i>X<sub>N</sub></i>, <i>Y<sub>N</sub></i>, <i>X<sub>T</sub></i>, <i>Y<sub>T</sub></i> &le; 1000).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The second line contains a single integer <i>N</i> (1 &le; <i>N</i> &le; 100) that represents the number of the shelves. Then <i>N</i> lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers <i>y<sub>i</sub></i>, <i>x<sub>i</sub></i>, <i>l<sub>i</sub></i>, <i>x</i><sub>1<sub><i>i</i></sub></sub>, <i>x</i><sub>2<sub><i>i</i></sub></sub>, separated by spaces, where:

<ul>
<li><i>y<sub>i</sub></i> (0 &lt; <i>y<sub>i</sub></i> &lt; <i>Y<sub>N</sub></i>)&nbsp;&mdash; the height of the <i>i</i><sup>th</sup> shelf above the bottom of the niche in inches.</li>
<li><i>x<sub>i</sub></i> (0 &le; <i>x<sub>i</sub></i> &lt; <i>X<sub>N</sub></i>)&nbsp;&mdash; the distance between 
the left end of the <i>i</i><sup>th</sup> shelf and the left edge of the niche in inches.</li>
<li><i>l<sub>i</sub></i> (0 &lt; <i>l<sub>i</sub></i> &le; <i>X<sub>N</sub></i>&nbsp;&minus;&nbsp;<i>x<sub>i</sub></i>)&nbsp;&mdash; the length of the <i>i</i><sup>th</sup> shelf in inches.</li>
<li><i>x</i><sub>1<sub><i>i</i></sub></sub> (0 &le; <i>x</i><sub>1<sub><i>i</i></sub></sub> &le; <i>l<sub>i</sub></i>/2)&nbsp;&mdash; the distance between the left end of the <i>i</i><sup>th</sup> shelf and its leftmost supporting peg in inches.</li>
<li><i>x</i><sub>2<sub><i>i</i></sub></sub> (<i>l<sub>i</sub></i>/2 &le; <i>x</i><sub>2<sub><i>i</i></sub></sub> &le; <i>l<sub>i</sub></i>;
    <i>x</i><sub>1<sub><i>i</i></sub></sub> &lt; <i>x</i><sub>2<sub><i>i</i></sub></sub>)&nbsp;&mdash; the distance between the left end of the <i>i</i><sup>th</sup> shelf and its rightmost supporting peg in inches.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two integers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11 8 4 6
4
1 1 7 1 4
4 3 7 1 6
7 2 6 3 4
2 0 3 0 3
</PRE></TD><TD><PRE CLASS="intable">1 3
</PRE></TD></TR></TABLE>
______________________________________________________
1189||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find all pairs of integers such that their sum is equal to the given integer number <i>N</i> and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of a single integer <i>N</i> (10 &le; <i>N</i> &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the total number of different pairs of integers that satisfy the problem statement. Then write all those pairs. Write one pair on a line in ascending order of
the first integer in the pair. Each pair must be written in the following format:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>X</i> + <i>Y</i> = <i>N</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <i>X</i>, <i>Y</i>, and <i>N</i> must be replaced with the corresponding integer numbers. There should
be exactly one space on both sides of '+' and '=' characters.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">302
</PRE></TD><TD><PRE CLASS="intable">5
251 + 51 = 302
275 + 27 = 302
276 + 26 = 302
281 + 21 = 302
301 + 01 = 302
</PRE></TD></TR></TABLE>
______________________________________________________
1190||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the wrapper of a bar of chocolate, the producer must specify all the components of the product. Strictly speaking, producers should also specify the weight fractions of all the components, but most of them do not do so because the consumers won't buy a chocolate if they read, for example, "Water 80%". However, producers prefer to specify the weight fractions of some components. For example, the inscription "Whole nuts 90%" is likely to attract buyers. But the buyer must remember that the components are always written in non-increasing order of weight fractions. Accordingly, the beautiful inscription "Cocoa-butter, Water, Cocoa-powder 40%", evidently, is a lie.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program that determines whether an inscription on a bar of chocolate is a lie.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of components <i>N</i> (1 &le; <i>N</i> &le; 5000). Each of the following <i>N</i> lines contains a description of one component. Each description starts with the name of the component, which is no longer than 16 symbols and may contain only upper- or lowercase English letter, hyphens, and underline characters. All the components have different names. Then there is a space followed by the number 0 or 1; 0 means that the producer didn't specify the weight fraction of the component. If the number is 1, it is followed by a space and the weight fraction given in hundredths of percent. All specified weight fractions are given in non-increasing order. Weight fractions, both real and specified on the wrapper, are integers from 1 to 10000 (in hundredths of percent).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output NO if the inscription is certainly a lie; output YES if the inscription is consistent and can be true. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
Water 0
Cocoa-butter 0
Cocoa-powder 1 4000
Lecithin 0
</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1191||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A robber is fleeing a place of crime. A cop follows him, with a time lag of <i>L</i> minutes. They run equally fast, thus the lag between them remains constant. Finally, feeling tired, the robber reaches a tram stop. He wants to take a tram of a specific route; trams follow each other with an interval of exactly <i>K</i><SUB>1</SUB> minutes on this route at any time of day and night. When the tram comes, the robber boards it. The policeman comes to the same tram stop. If the robber is still there waiting for the tram to arrive, the policeman arrests him. If the robber is gone, the cop himself waits for a tram of the same route. The robber leaves his tram at some stop and starts waiting for a tram of another route (trams of that route keep an interval of exactly <i>K</i><SUB>2</SUB> minutes). When a tram arrives, the robber gets on it and continues his way. Of course, the cop leaves his tram also at this stop and, if the robber is still there, arrests him. If the robber managed to leave, the policeman waits for a tram of the same route that the robber used and follows the robber…
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This process continues until either the policeman arrests the robber or the robber, having used <i>N</i> trams, reaches his secret cover place where he is safe.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Although the speeds of the cop and the robber remain equal all the time and the speeds of their trams are equal, it may happen that the policeman is lucky to overtake the robber. For instance, if <i>L</i> &lt; <i>K</i><SUB>1</SUB>, then it may happen that the policeman reaches the first stop when the robber is still waiting for a tram there. Other situations are also possible. Write a program that determines whether the cop can catch the robber.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of two lines: in the first line there are the numbers <i>L</i> (0 &lt; <i>L</i> &lt; 100) and <i>N</i> (0 &lt; <i>N</i> &lt; 100) delimited with a space. In the second line there are time intervals <i>K</i><SUB>1</SUB>, <i>K</i><SUB>2</SUB>, …, <i>K<SUB>N</SUB></i> (0 &lt; <i>K<SUB>i</SUB></i> &lt; 100) between trams of the corresponding routes. These numbers are also separated with spaces. All numbers in the input data are integers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output NO if the cop has no chance to overtake the robber before he reaches his cover place; output YES if he still has such a chance.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15 4
7 3 13 6
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1192||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A little boy likes throwing balls in his dreams. He stands on the endless horizontal plane and throws a ball at an angle of <i>a</i> degrees to the plane. The starting speed of the ball is <i>V</i> m/s. The ball flies some distance, falls down, then jumps off, flies again, falls again, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As far as everything may happen in a dream, the laws of the ball's motion differ from the usual laws of physics:
<UL>
<LI>the ball moves in the gravity field with acceleration of gravity equal to 10 m/s<SUP>2</SUP>;
<LI>the rebound angle equals the angle of fall;
<LI>after every fall, the kinetic energy of the ball decreases by a factor of <i>K</i>;
<LI>there is no air in the dream;
<LI>&quot;Pi&quot; equals to 3.1415926535.
</UL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine the maximal distance from the point of throwing that the ball can fly.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains three numbers: 0 &le; <i>V</i> &le; 500000, 0 &le; <i>a</i> &le; 90, and <i>K</i> &gt; 1 separated by spaces. The numbers <i>V</i> and <i>a</i> are integers; the number <i>K</i> is real.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the required distance in meters rounded to two fractional digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 15 2.50
</PRE></TD><TD><PRE CLASS="intable">2.08
</PRE></TD></TR></TABLE>
______________________________________________________
1193||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A group of students are having an oral examination. At the beginning of the exam, all students simultaneously receive their questions and start preparing for the answer. Each student needs <i>T</i><sub>1</sub> minutes for the preparation and <i>T</i><sub>2</sub> minutes for the answer itself (these parameters can be different for different students). For each student, the time <i>T</i><sub>3</sub> (in minutes from the planned beginning of the exam) is given when this student has to be free because she has other things to do (for example, other exams).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the exam, a queue of students is formed as they are getting ready to speak. If a student is ready to answer and at that time moment the professor is free, then this student starts answering immediately. If the professor is busy with another person, then the student joins the queue and starts answering when the student before her in the queue finishes her examination.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is possible that some students won't be free when they planned to be (i.e., at the time <i>T</i><sub>3</sub>). The professor is ready to cooperate and can shift the beginning of the exam to an earlier time. However, he doesn't want to come too early! You task is to write a program that will calculate the minimal period in minutes by which the exam should be shifted so that all the students will manage to complete the exam before their <i>T</i><sub>3</sub> time.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of students <i>N</i> (1 &le; <i>N</i> &le; 40). Each of the next <i>N</i> lines contains the corresponding numbers <i>T</i><sub>1</sub>, <i>T</i><sub>2</sub>, and <i>T</i><sub>3</sub>. The numbers are separated with spaces and satisfy the constraints 0&nbsp;&le;&nbsp;<i>T</i><sub>1</sub>&nbsp;&le;&nbsp;<i>T</i><sub>3</sub>&nbsp;&le;&nbsp;600, 1&nbsp;&le;&nbsp;<i>T</i><sub>2</sub>&nbsp;&le;&nbsp;240.
All the numbers <i>T</i><sub>1</sub> are distinct.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the nonnegative integer that is the answer to the problem. If there is no need to shift the beginning of the exam, output 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
100 10 120
70 40 150
99 15 400</PRE></TD><TD><PRE CLASS="intable">15</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
100 10 110
80 15 100</PRE></TD><TD><PRE CLASS="intable">0</PRE></TD></TR></TABLE>
______________________________________________________
1194||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A party at the "Prancing Pony" tavern was over and the hobbits were breaking up. At the first crossroad all the company fell into several groups, each of which went its own way. As a matter of courtesy, the hobbits shook each other's hands before parting (each hobbit shook the hand of each hobbit he was parting with). Each group fell at the next crossroad into several smaller groups (with handshakes of course) and so on. This process continued until single hobbits and married couples reached their homes. In other words, the groups were splitting up until there were only groups of two or one hobbits left. Your task is to calculate the number of the handshakes made.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's numbers the groups of hobbits so that the first group (the one that left the tavern) gets number&nbsp;1 and other groups get distinct positive integers greater than 1. In the first line of the input there are the total number of hobbits <i>N</i> and the number of married couples <i>K</i>. These numbers meet the following conditions:
2 &lt; <i>N</i> &le; 20000; 0 &le; 2<i>K</i> &le; <i>N</i>.
Each of the next lines of the input starts with the number of the group and the number of groups it fell into. After that there are several pairs of numbers representing the number and size of each new group. It is guaranteed that if a group no.&nbsp;<i>Y</i> formed as a result of splitting of a group no.&nbsp;<i>X</i>, then the description of the group no.&nbsp;<i>X</i> occurs before the description of the group no.&nbsp;<i>Y</i>. In particular, this means that the description of the group no.&nbsp;1 is in the second line of the input. If the group no.&nbsp;<i>Y</i> formed as a result of splitting of the group no.&nbsp;<i>X</i> and its description is absent, then the group no.&nbsp;<i>Y</i> didn't split further. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the total number of the handshakes made.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 0
1 2 2 2 3 1
2 2 4 1 5 1</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1195||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Olympic Winter Games. The Ouths and Crosses on the 3&times;3 Board Event. The Panel of Judges received an unfinished game with 3 moves made by each player. The players couldn't continue the game because they had lost too much blood at the doping control. The Panel of Judges had to determine the outcome in the case of the optimal play of both parties.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since there were as many crosses as oughs, the Panel of Judges wanted to decide that it was a draw. However, Head Judge observed that one player was able to win the game in one move. Your task is to determine the outcome in the case of the optimal play of both rivals. According to the International Rules, Crosses move first in the game and the winner is he who puts three of his symbols in the same row, column, or diagonal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a 3&times;3 table consisting of the symbols X, O (the capital English letters, which mark the moves of Crosses and Ouths), and # (this symbol denotes an empty field). The table contains exactly three Crosses and three Ouths.
It is guaranteed that the game is not finished, i.e. any row, column or diagonal contains neither three Crosses nor three Ouths.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Crosses win the game, output &ldquo;Crosses&nbsp;win&rdquo;. If Ouths win, output &ldquo;Ouths&nbsp;win&rdquo;. In the case of a draw, output &ldquo;Draw&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">XXO
#X#
#OO
</PRE></TD><TD><PRE CLASS="intable">Ouths win
</PRE></TD></TR><TR><TD><PRE CLASS="intable">O#O
#X#
XOX
</PRE></TD><TD><PRE CLASS="intable">Draw
</PRE></TD></TR></TABLE>
______________________________________________________
1196||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor of history decided to simplify the examination process. At the exam, every student should write a list of historic dates she knows (she should write the years only and, of course, must be able to explain what event took place in this or that year). Professor has a list of dates that students must know. In order to decide upon the student's mark, Professor counts the number of dates in the student's list that are also present in his list. The student gets her mark according to the number of coincidences.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to automatize this process. Write a program that would count the number of dates in the student's list that also occur in Professor's list.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> of dates in Professor's list, 1 &le; <i>N</i> &le; 15000. The following <i>N</i> lines contain this list, one number per line. Each date is a positive integer not exceeding 10<SUP>9</SUP>. Professor's list is sorted in non-descending order.
The following line contains the number <i>M</i> of dates in the student's list, 1 &le; <i>M</i> &le; 10<SUP>6</SUP>. Then there is the list itself; it is unsorted. The dates here satisfy the same restriction. Both in Professor's and in the student's lists dates can appear more than once.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of dates in the student's that are also contained in Professor's list.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1054
1492
4
1492
65536
1492
100
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1197||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The statement of this problem is very simple: you are to determine how many squares of the chessboard can be attacked by a knight standing alone on the board. Recall that a knight moves two squares forward (horizontally of vertically in any direction) and then one square sideways (perpedicularly to the first direction). </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> of test cases, 1 &le; <i>N</i> &le; 100. Each of the following <i>N</i> lines contains a test: two characters. The first character is a lowercase English letter from 'a' to 'h' and the second character is an integer from 1 to 8; they specify the rank and file of the square at which the knight is standing.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> lines. Each line should contain the number of the squares of the chessboard that are under attack by the knight.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
a1
d4
g6
</PRE></TD><TD><PRE CLASS="intable">2
8
6
</PRE></TD></TR></TABLE>
______________________________________________________
1198||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Hard times came for Martian senate. Even this pride of Martian democracy can not oppose the almighty jobbery. Let's consider the procedure of typical decision making. A member of Martian senate, who needs a certain law, submits it to senate. To improve his chances that law is accepted, he makes a phone call to each of senate members on whom he has the goods in his safe. Then he kindly suggests to those senators to support the new law. Moreover, to avoid occasional rejection of this important law, he asks each of them to make the same procedure with their safes. And each of them having no choice makes a similar range of phone calls to those on whome, in turn, he has the goods. If every senator supports the new law the president has nothing to do but to approve it. Otherwise he can reject it and send back to senate for law improvements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is evident, that just elected president Honestman dislikes such situation. So he starts to struggle against the jobbery. And first of all he wants to put to jail the most dangerous senate members. And definitely, if senator is able to make even the harmful law approved, he is a dangerous one. So secret service of Martian president has already checked safes of each senate member, and found out on whom each of them has the goods. Martian president knows about your achievements in programming and he asks you personally for a help.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains single integer N &mdash; the number of senate members (1 &le; N &le; 2000). Each senate member is uniquely identified with a number from 1 to N. Each of subsequent N lines contains information about senate members. The i-th line contains list of senate members (given by numeric identifiers) on whome he has the goods. List is terminated by number 0. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print the list of identifiers of all dangerous senate members in a single line. The numbers in the list must be present in increasing order. The list must be terminated by number 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
3 2 0
0
4 5 0
1 5 0
2 0</PRE></TD><TD><PRE CLASS="intable">1 3 4 0</PRE></TD></TR></TABLE>
______________________________________________________
1199||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the kitchen lives a mouse. There are also a cat and a piece of cheese in the kitchen. The coordinates of the cheese and the mouse are known, and the cat is sleeping. Finally, there is some furniture in the kitchen. The furniture is a set of convex polygons. The mouse wants to get to the cheese unnoticed. A point of the route is called dangerous if the distance to the nearest piece of furniture is greater than 10 cm. It is required to find the least dangerous route for the mouse, i.e., the route in which the sum of the lengths of dangerous segments is minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there are four numbers <i>x<sub>m</sub></i>, <i>y<sub>m</sub></i>, <i>x<sub>c</sub></i>, <i>y<sub>c</sub></i> separated with a space. They are the coordinates of the mouse (<i>x<sub>m</sub></i>, <i>y<sub>m</sub></i>) and of the cheese (<i>x<sub>c</sub></i>, <i>y<sub>c</sub></i>). In the second line there is the number of pieces of furniture <i>N</i> (0 &le; <i>N</i> &le; 100). The next <i>N</i> lines describe these pieces. Each description starts with the number of vertices of the corresponding polygon <i>K</i> (3 &le; <i>K</i> &le; 10), given in a separate line. Each of the next <i>K</i> lines contains two numbers, which are the coordinates of the corresponding vertex. It is known that the distance between any two points of different polygons is greater than 20 cm (so that it would be easier for the cat to catch the mouse). Neither the mouse nor the cheese are inside any of the polygons. All the coordinates are given in meters and have no more than three fractional digits. The absolute values of coordinates do not exceed 10<sup>5</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should give the mouse’s route in the form of a broken line. In the first line output the number of its vertices (including the initial and final ones). Then give the coordinates of the vertices, two numbers per line, accurate to 10<sup>-4</sup>. Each segment of the broken line must be either entirely dangerous or entirely safe (with the possible exception of its endpoints). The broken line must contain no more than 1000 vertices.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.0 1.5 0.0 1.5
1
4
0.0 0.0
0.0 1.0
1.0 1.0
1.0 0.0
</PRE></TD><TD><PRE CLASS="intable">4
1.0 1.5
1.0 1.1
0.0 1.1
0.0 1.5
</PRE></TD></TR></TABLE>
______________________________________________________
1200||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The famous venturer Ostap B. decided to organize a firm "Horns & Hoofs" which will produce horns and hoofs. First of all, Ostap has studied the market, the manufacturing process, and the local conditions.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The calculations showed that each horn would give a profit of <i>A</i> roubles and each hoof would bring <i>B</i> roubles. It must be taken into account that there are similar products in the market already and that horns and hoofs are in a sense interchangeable. Therefore the total amount of produced goods must not exceed <i>K</i> pieces each month, otherwise the excess will not be sold.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Besides, Ostap B. knows that the local racketeers fight monopolism and collect each month for each type of goods a "tax" which is equal (in roubles) to the square of the produced amount. For example, if the firm has produced two horns and three hoofs, then they must pay 4+9=13 roubles.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having heard about the success of students of the Department of Mathematics and Mechanics in the All-Russian finals of business game Nixdorff Delta, Ostap appealed to the dean's office. He asked to calculate the optimal production volumes for his new firm. The dean is sure that his students will cope with this task.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains real numbers <i>A</i> and <i>B</i> (&minus;10000 &le; <i>A</i>,<i>B</i> &le; 10000) with a two fractional digits precision. These numbers are the profits (in roubles) given by each horn and by each hoof respectively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next line contains an integer <i>K</i> which is the maximal number of goods that could be sold each month (1 &le; <i>K</i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output at the first line the maximal possible profit with a two fractional digits precision. The next line should contain the optimal production volumes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are several possible answers, you should output the one with the least amount of horns, and if there is still a tie with the least amount of hoofs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">34.20 61.70
45
</PRE></TD><TD><PRE CLASS="intable">1239.50
16 29
</PRE></TD></TR></TABLE>
______________________________________________________
1201||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sometimes it is of great importance to know which day of the week a given date will be. And we start searching for the nearest calendar. Being lucky we may find one. And find out that this one does not contain the date you need. What a pity!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thus you are asked to create a calendar that will be able to process any given date in the years range from 1600 till 2400. Given a date, your program should print (see the examples below) a correct calendar for the month containing the date. Do not forget about the leap years. A year is considered to be leap if it is multiple of 4 except it is multiple of 100 except it is multiple of 400. For example 1996 is a leap year, 1900 is not a leap year (it is a multiple of 4 and multiple of 100) and 2000 is a leap year (it is a multiple of 4, multiple of 100 and multiple of 400 as well).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains a date, i.e. three integer numbers: day (1&ndash;31), month (1&ndash;12) and year (1600&ndash;2400) separated by spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain exactly 7 lines with the correct calendar for the month containing the given date. Format of a calendar is given by the examples below (for a reading convenience spaces in output example are replaced with dots, real output should contain spaces instead). And do not forget to highlight the given date by square brackets.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">16 3 2002
</PRE></TD><TD><PRE CLASS="intable">mon........4...11...18...25
tue........5...12...19...26
wed........6...13...20...27
thu........7...14...21...28
fri...1....8...15...22...29
sat...2....9..[16]..23...30
sun...3...10...17...24...31
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 3 2002
</PRE></TD><TD><PRE CLASS="intable">mon........4...11...18...25
tue........5...12...19...26
wed........6...13...20...27
thu........7...14...21...28
fri.[.1]...8...15...22...29
sat...2....9...16...23...30
sun...3...10...17...24...31
</PRE></TD></TR></TABLE>
______________________________________________________
1202||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On an endless sheet of checked paper there are axes of coordinates. A unit for measurement in this coordinates system is the length of the square’s edge. Also there are <i>N</i> rectangles on this sheet of paper. Their edges are parallel to the coordinate axis, and go through the borders between the squares. If we denote the coordinates of the lower left corner of the <i>i</i>-th rectangle with (<i>x<SUB>i</SUB></i>, <i>y<SUB>i</SUB></i>), and the coordinates of its upper right corner with (<i>x<SUP>i</SUP></i>, <i>y<SUP>i</SUP></i>), we will see, that:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>x</i><SUB>1</SUB> = 0, <i>y</i><SUB>1</SUB> = 0<BR>
<i>x<SUP>i</SUP></i> = <i>x</i><SUB><i>i</i> + 1</SUB><BR>
2 &le; <i>x<SUP>i</SUP></i> &minus; <i>x<SUB>i</SUB></i> &le; 100<BR>
2 &le; <i>y<SUP>i</SUP></i> &minus; <i>y<SUB>i</SUB></i> &le; 100
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If two rectangles with numbers <i>i</i> and <i>i</i> + 1 overlap, their common border disappears:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A traveler starts his way from the point with the coordinates (1, 1), which, as it follows from the rules above, certainly lays in the first rectangle. The traveler walks strictly along the edges of the squares. He is not allowed to walk on the borders of the rectangles. Thus, he can leave one rectangle for another only through their disappeared common border. There is an example of some beginning of his walk on the picture.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The traveler’s goal is the point (<i>x<SUP>n</SUP></i> &minus; 1, <i>y<SUP>n</SUP></i> &minus; 1), which is obviously situated inside the last rectangle.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is a positive integer <i>n</i>, 0 &lt; <i>n</i> &lt; 100000 &mdash; the number of rectangles on the plane. Then <i>n</i> lines follow, each one of them containing four integer numbers <i>x<SUB>i</SUB></i>, <i>y<SUB>i</SUB></i>, <i>x<SUP>i</SUP></i>, <i>y<SUP>i</SUP></i>, separated with spaces, satisfying the above rules.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the length (the measurement unit is the edge of one square) of the shortest possible route for the traveler to go from the point (1, 1) to the point (<i>x<SUP>n</SUP></i> &minus; 1,  <i>y<SUP>n</SUP></i> &minus; 1), or the number &minus;1, if there exists no such route (the latter possibility is realized, for instance, on the picture).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0 3 5
3 1 5 7</PRE></TD><TD><PRE CLASS="intable">8</PRE></TD></TR></TABLE>
______________________________________________________
1203||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Functioning of a scientific conference is usually divided into several simultaneous sections. For example, there may be a section on parallel computing, a section on visualization, a section on data compression, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Obviously, simultaneous work of several sections is necessary in order to reduce the time for scientific program of the conference and to have more time for the banquet, tea-drinking, and informal discussions. However, it is possible that interesting reports are given simultaneously at different sections.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A participant has written out the time-table of all the reports which are interesting for him. He asks you to determine the maximal number of reports he will be able to attend.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number 1 &le; <i>N</i> &le; 100000 of interesting reports. Each of the next <i>N</i> lines contains two integers <i>T<sub>s</sub></i> and <i>T<sub>e</sub></i> separated with a space (1 &le; <i>T<sub>s</sub></i> &lt; <i>T<sub>e</sub></i> &le; 30000). These numbers are the times a corresponding report starts and ends. Time is measured in minutes from the beginning of the conference.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the maximal number of reports which the participant can attend. The participant can attend no two reports simultaneously and any two reports he attends must be separated by at least one minute. For example, if a report ends at 15, the next report which can be attended must begin at 16 or later.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
3 4
1 5
6 7
4 5
1 3
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1204||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number <i>x</i> is called an idempotent modulo <i>n</i> if</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>x</i>*<i>x</i> = <i>x</i> (mod <i>n</i>)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the program to find all idempotents modulo <i>n</i>, where <i>n</i> is a product of two distinct primes <i>p</i> and <i>q</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains the number <i>k</i> of test cases to consider (1 &le; <i>k</i> &le; 1000). Each of the following <i>k</i> lines contains one number <nobr><i>n</i> &lt; 10<SUP>9</SUP></nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write on the <i>i</i>-th line all idempotents of <i>i</i>-th test case in increasing order. Only nonnegative solutions bounded by <i>n</i> should be printed.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
6
15
910186311</PRE></TD><TD><PRE CLASS="intable">0 1 3 4
0 1 6 10
0 1 303395437 606790875</PRE></TD></TR></TABLE>
______________________________________________________
1205||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine yourself in a big city. You want to get from point <i>A</i> to point <i>B</i>. To do that you may move by foot or use the underground. Moving by the underground is faster but you may enter and exit it only at the stations. To save your time you decided to write a program to find the fastest route.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two floating point numbers. First of them is the speed of traveling by foot. The second one is the speed of traveling by the underground. The second speed is always greater than the first one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then description of the underground follows. It starts with an integer number <i>N</i> in the first line. It is the number of the underground stations. You may assume that <i>N</i> is not greater than 200. The following <i>N</i> lines contain two floating point numbers each (<i>i</i>-th line contains the coordinates of <i>i</i>-th station). Then the description of the connections between stations follows. Each connection is determined by the pair of integers, i.e. by the numbers of connected stations. The list of connections is terminates with a pair of zeroes. We assume that all the connections are straight. So the time we need to travel between stations is equal to the distance between stations divided by the speed of traveling by the underground.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It should be mentioned also that entering and exiting the underground and changing trains are possible at the stations only and takes no time.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At last the coordinates of the points <i>A</i> and <i>B</i> are given, tha pair of coordinates in a line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the minimal time needed to get from the point <i>A</i> to the point <i>B</i>. Time should be given with the precision of 10<sup>&minus;6</sup>. The second line describes the use of the underground while traveling. It starts with the number of visited stations with tha following list of visited stations in the order they should be visited.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 100
4
0 0
1 0
9 0
9 9
1 2
1 3
2 4
0 0
10 10
10 0
</PRE></TD><TD><PRE CLASS="intable">2.6346295
4 4 2 1 3
</PRE></TD></TR></TABLE>
______________________________________________________
1206||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us denote the sum of digits of the number <i>N</i> by S(<i>N</i>). In this problem, we want you to determine, how often the following equality holds:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">S(<i>A</i> + <i>B</i>) = S(<i>A</i>) + S(<i>B</i>)</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a single integer <i>K</i>, 2 &le; <i>K</i> &le; 50.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of pairs of <i>K</i>-digit numbers <i>A</i> and <i>B</i> to satisfy the above equality. Counting that number you should be aware of the following:
<OL>
<LI>numbers <i>A</i> and <i>B</i> should not have leading zeroes;
<LI>while counting the total number of pairs, the order of numbers <i>A</i> and <i>B</i> matters, thus, for instance, (12, 26) and (26, 12) are different pairs that satisfy the conditions of the problem.
</OL></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">1980
</PRE></TD></TR></TABLE>
______________________________________________________
1207||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The are <i>N</i> points on the plane (<i>N</i> is even). No three points belong to the same strait line.
Your task is to select two points in such a way, that strait line they belong to divides the set of points into two equal-sized parts.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains one integer <i>N</i> (2 &le; <i>N</i> &le; 10000).
Each of next <i>N</i> lines contains pair of integers <i>x<SUB>i</SUB></i>, <i>y<SUB>i</SUB></i> (&minus;10<SUP>9</SUP> &le; <i>x<SUB>i</SUB></i>, <i>y<SUB>i</SUB></i> &le; 10<SUP>9</SUP>), the coordinates of 
<i>i</i>-th point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print the numbers of selected points.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
1 0
0 1
1 1
</PRE></TD><TD><PRE CLASS="intable">1 4
</PRE></TD></TR></TABLE>
______________________________________________________
1208||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nothing makes as old as years. A lot of cool contests are gone, a lot of programmers are not students anymore and are not allowed to take part at the contests. Though their spirit is fresh and young as it was years ago! And so once they decided to make a contest at the Ural State University among the veteran teams&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To make the contest interesting, they decided to invite as much "legendary" teams as possible. The jury has made a short list of teams, which have shown the best results in the old good times, thus being worthy to hold the name of "legendary". All those teams were invited to take part of the contest, and all of them accepted the invitations. But they have forgotten one important thing at the jury: during the long history of the contests at the university, the teams happened to change and some programmers managed to contest in different "legendary" teams. Though, the jury decided not to give up the initial idea and to form as much legendary teams as possible to participate at the contest &mdash; and your program should help the jury!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a positive integer <i>K</i>, 1 &le; <i>K</i> &le; 18. It is the number of all the legendary teams. There follow the descriptions of the teams in <i>K</i> lines. Each of those lines contains three names of the team members of the respective team. All names are written with not more than 20 small Latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the maximal possible number of legendary teams of veterans, that could simultaneously participate at the contest.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
gerostratos scorpio shamgshamg
zaitsev silverberg cousteau
zaitsev petersen shamgshamg
clipper petersen shamgshamg
clipper bakirelli vasiliadi
silverberg atn dolly
knuth dijkstra bellman</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1209||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's consider an infinite sequence of digits constructed of ascending 
powers of 10 written one after another. Here is the beginning of the sequence: 110100100010000&hellip; You are to find out what digit is located at the definite position of the sequence.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is the only integer <I>N</i> in the first line (1 &le; <I>N</i> &le; 65535). 
The <I>i</i>-th of <I>N</i> left lines contains the integer <I>K<SUB>i</sub></i> &mdash; the number of position in the sequence <nobr>(1 &le; <I>K<SUB>i</sub></i> &le; 2<SUP>31</sup> − 1)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output <I>N</i> digits 0 or 1 separated 
with a space. More precisely, the <I>i</i>-th digit of output is to be equal to the 
<I>K<SUB>i</sub></i>-th digit of described above sequence.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3
14
7
6
</PRE></TD><TD><PRE CLASS="intable">0 0 1 0
</PRE></TD></TR></TABLE>
______________________________________________________
1210||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivanushka the Fool lives at the planet of 0-level. It's very unpleasant 
to live there. An awful climate, 80 hours working week, ugly girls&hellip; He, as well as every 
inhabitant of his planet, dreams to get to a planet of <I>N</i>-th level. To the paradise.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At each of the <I>i</i>-th level planets there are several 
hyperspace transfers to some of the (<I>i</i>+1)-st level planets (but there are no 
reverse ways). Every transfer is guarded by a spirit. The spirits are 
usually evil: they demand many galactic bank-notes for each transfer. You know, everyone wants to go to a higher level planet. And one has to pay for the pleasure. More than Ivanushka can even imagine. However, extraordinary situations like a lack of a labor-force at one of the higher level planets sometimes happen, and then the spirits - the guards of the transfers &mdash; become kind. Sometimes they give galactic bank-notes themselves if only someone goes to their planets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to embody his dream of heavenly planet 
Ivanushka  has done two things. First of all, 
he has borrowed a complete map of the Universe. It's written on the map 
how much the spirits demand or give for a transfer from this or that planet to another one of the next higher level. Secondly, he has hired a staff of young talanted 
programmers in order that they will help him to draw the way on the map from 
his planet to the one of <I>N</i>th level so that he would spend for the 
spirits as little money or even earn as much as it is possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <I>N</i> 
(0 &lt; <I>N</i> &lt; 30) &mdash; an amount of levels of the planets on Ivanushka's 
map. Then follow <I>N</i> blocks of information that describe interlevel 
transfers. More precisely, the <I>i</i>th informative block describes the 
scheme of transfers from (<I>i</i>&minus;1)-st level planets to the ones of 
<I>i</i>th level. Those blocks are separated with a line that contains the 
only symbol "*". Planets of each level are numbered with sequential positive 
integers starting from 1. Each level contains not more than 30 planets. There 
is the only planet of 0-level: the one that Ivanushka lives at. The first 
line of a block contains a number <I>K<SUB>i</sub></i> &mdash; an amount of planets 
of the <I>i</i>th level. THen follow <I>K<SUB>i</sub></i> lines &mdash; one for each 
planet of the <I>i</i>th level. Every line consists of numbers of planets 
separated with a space of the previous (<I>i</i>&minus;1)st level that one can get 
from them to the current planet, and the corresponding fees. A fee for each 
transfer is an integer number from &minus;32768 to 32767; a negative fee means that 
the kind spirit is ready to pay for such a transfer. Each description line 
is ended by zero.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain the only number &mdash; the minimal fee that Ivanushka 
might pay for a transfer to some planet of the <I>N</i>th level. The answer 
may be negative: it means that Ivanushka will not only get to a heavenly 
planet, but will earn some galactic bank-notes. It's known that there exists 
if only one way from Ivanushka's planet to the one of <I>N</i>th level.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2
1 15 0
1 5 0
*
3
1 -5 2 10 0
1 3 0
2 40 0
*
2
1 1 2 5 3 -5 0
2 -19 3 -20 0
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR></TABLE>
______________________________________________________
1211||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Somebody of <I>N</i> boys and girls broke mummy's favourite cup. Mummy became angry and numbered the children with positive integers from 1 to <I>N</i>. Then she approached the child number 1 and asked: "Who has broken the cup?" "Me," &mdash; he (or she) answered and was punished.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You, of course, understand that the story is idealized. Practically (we don't know if it was true or not) the boy or the girl number 1 said: "It wasn't me! It was the child number <I>K</i><SUB>1</sub>!" Then mummy approached number 2 and asked him (or her) the same question&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some children tried to answer the truth. Others replied in order to say something. But some children had agreed not to give away a juvenile to mummy: each one of them pointed someone else from the group &mdash; in a circle. As a result &mdash; mummy was racked. She was despaired to remember what every child had told her about the cup and she wrote down all thier "evidences" on a sheet of paper. Now she's willing to investigate the cause. First of all she decided to find out if there is a "collective guarantee" 
between some of the children so that it was described above. You are to write a program that would help mummy in such a case &mdash; to all appearences it was not the first and not the lsat cup.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first lines contains a positive integer <I>T</i> (1 &le; <I>T</i> &le; 16) &mdash; the number of input tests. Each test consists of two lines: the first one contains a number <I>N</i> (1 &le; <I>N</i> &le; 25000) &mdash; and amount of children. The second line contains <I>N</i> numbers separated with a space &mdash; that are the evidences of the children. Mummy has written down at <I>i</i>th position of the line the number of a child that the <I>i</i>th child pointed to, or 0 if the <I>i</i>th child suddenly confessed.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write one line for each test. It should contain "YES", if the evidences of the children at least seem to be noncontradictory: exactly one child has confessed the he (or she) had broken the cup, and there is no group of children that point to each other in a circle.  Otherwise you are to output "NO".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
4
2 0 2 2
4
2 0 2 1
5
2 3 4 1 3
3
0 3 2
</PRE></TD><TD><PRE CLASS="intable">YES
YES
NO
NO
</PRE></TD></TR></TABLE>
______________________________________________________
1212||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once two friends Petya and Vasya decided to play “Battleship” at the lesson of computer science at school. Finishing place his ships on the field Petya fell to thinking how many ways of placing his last <I>K</i>-deck ship exist. He tried to calculate it quickly but soon lost a count. Then Petya looked around and suddenly saw computers (there's no surprise: the children played at the lesson of computer science, but by the 
moment Patya was carried away by the game so much that he didn't notice the computers). He thaught a bit and decided to write a program that would solve his problem. But so far as he was backward (it wasn't the first time that he played “Battleship” during the lesson) he didn't succeed. Please, help Petya with his problem.</DIV></DIV>

*******InputConstraints*******

<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three numbers separated with a space&nbsp;&mdash; the vertical size of the playing field <I>N</i> <nobr>(1 &le; <I>N</i> &le; 30000)</nobr>, the horizontal size of the field <I>M</i> <nobr>(1 &le; <I>M</i> &le; 30000)</nobr> and a number of already placed ships on the field <I>L</i> <nobr>(0 &le; <I>L</i> &le; 30)</nobr>. Then follow <I>L</i> lines describing the ships location. Each description consists of three numbers and a letter 
separated with a space. The numbers are the coordinates of upper-left cell 
of a ship (the coordinates of upper-left cell of the playing field are (1,1)) 
and a number of ship decks. The letter defines the ship orientation (“V”&nbsp;&mdash; 
if it stands vertically, “H”&nbsp;&mdash; if horizontally). The last line contains the 
only positive integer <I>K</i> &mdash; the number of decks of the last ship that Petya wants to place.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We'll explain to those who has never played the “Battleship” that a <I>i</i>-deck ship is the rectangular of <I>i</i> &times; 1 cells. Ships may have from one to four decks.
According to the standard rules of the game, no two ships may contact each other neither by their edges nor by the vertices.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the only number &mdash; an amount of different ways of placing the Petya's last <I>K</i>-deck ship.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4 2
1 2 2 V
3 1 2 H
2</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1213||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's well-known that the most tenacious of life
species on the Earth are cockroaches. They live everywhere if only there
in food. And as far as they are unpretentious in food you can find them
absolutely everywhere.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A little Lyosha studies at school on a Space station.
During one of the school competitions his class has reached the final.
A task of the final contest is to exterminate all the cockroaches in the
cargo module within minimal time.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Within the long history of the competitions a unified
tactics was worked out. The tactics is as follows: a poison gas is let
in one of the module compartments and after that the baffle that separates
the compartment from one of the adjacent ones is opened.&nbsp; Cockroaches
can't stand the smell of the gas and run to the other compartment. When
there's no cockroaches in the treated compartment the baffle is closed.
Afterwards analogously the next compartment is treated, and so on. The
goal is to move all the cockroaches to the floodgate of the cargo module.
Then the outward door is opened and all the cockroaches are engulfed by
an open Space.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lyosha is responsible for programming the control
board of the baffles in his team. The baffles are opened slowly, so it's
very important to make do with minimal number of baffle openings in order
to win in the contest. Your task is to help Lyosha to compute this number.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a name of the floodgate
compartment. Each of the next lines contains description of one of the
baffles &mdash; the names of two compartments separated with a dash (-). The last
line contains the only symbol "#". There are cockroaches in all the compartments
of the module at first. It's possible to get to the floodgate from every
compartment of the module passing several baffles. The total number of
compartments doesn't exceed 30. The name of a compartment consists of no
more than 20 Latin letters and digits. The large and the small letters
should be distinguished.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output the only number &mdash; the
minimal amount of baffles that should be opened (and then closed) in order
to move all the cockroaches to the floodgate.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Gateway
Machinery-Gateway
Machinery-Control
Control-Central
Control-Engine
Central-Engine
Storage-Gateway
Storage-Waste
Central-Waste
#</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE>
______________________________________________________
1214||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's often happens in programming that one has to test and debug an existing program code. Imagine that your colleague has passed you fragment of program code of his because he is to work at another program. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here follows the fragment of the program code &mdash; a function with two input-output parameters:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE CELLSPACING="0" CELLPADDING="5" BORDER="1">
<TR>
<TH WIDTH="50%">Pascal</TH>
<TH WIDTH="50%">C++</TH>
</TR>
<TR>
<TD VALIGN="TOP">
<pre style="margin:0px;">
procedure P(var x, y: longint);
var
  i, j: longint;
begin
  if (x&gt;0) and (y&gt;0) then
  begin
    for i := 1 to x+y do
    begin
      y := x*x+y;
      x := x*x+y;
      y := round(sqrt(x+(y/abs(y))*(-abs(y))));
      for j := 1 to 2*y do
        x := x-y;
    end;
  end;
end;
</pre></TD>
<TD VALIGN="TOP">
<pre style="margin:0px;">
#include &lt;math.h&gt;
void P(long&amp; x, long&amp; y)
{
  int i, j;
  if (x&gt;0 &amp;&amp; y&gt;0)
  {
    for (i = 1; i &lt;= x+y; i++)
    {
      y = x*x+y;
      x = x*x+y;
      y = sqrt(x+(y/labs(y))*(-labs(y)));
      for (j = 1; j &lt;= 2*y; j++)
        x = x-y;
    }
  }
}
</pre></TD>
</TR>
</TABLE>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is unusual: in order to debug the function it's necessary to
work out a program that would restore input parameters given output data
of the function. It's guaranteed that no variable has left its type during
the processing of the function.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains two numbers <I>x</I> and <I>y</I> separated with a space &mdash; those are output parameters of the function.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain two numbers <I>x</I> and <I>y </I>separated
with a space that were given to the function as input parameters.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1
</PRE></TD><TD><PRE CLASS="intable">1 1
</PRE></TD></TR></TABLE>
______________________________________________________
1215||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">Inexactness of projectile hit may be compensated<BR>
by increasing of the projectile diameter.<BR>
<B>Sergey Sizy</B></DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the problem you are to determine the minimal diameter that may compensate
inexactness of projectile hit in each concrete case. Assume that all the
targets are convex polygons. A hit is the situation when the circle crater
that the projectile leaves (the crater diameter equals to the one of the
projectile) covers if only one point of the target.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three numbers &mdash; coordinates of the hit point of the projectile center and the number of polygon sides <I>N</I> (3 &le; <I>N</i> &le; 100). The next <I>N</I> lines contain the vertices coordinates in counter-clockwise order. All the coordinates are integers from [&minus;2000,2000].</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the only number which is the minimal diameter of a projectile that will cover the target rounded with three digits after the decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 -1 8
0 1
1 0
2 0
3 1
3 2
2 3
1 3
0 2
</PRE></TD><TD><PRE CLASS="intable">2.000
</PRE></TD></TR></TABLE>
______________________________________________________
1216||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Somewhere on the <I>N</i> &times; <I>N</i> chessboard, there are one white pawn, one black pawn, and the black King as well. A game is being played according to the usual chess rules* (except the absence of the white King). White is supposed to win, when it manages to promote its pawn to the Queen (even in the case when this queen would be immediately beaten by the next black’s move). Otherwise, Black is considered to be the winner (even if in some position White has no possibilities to move its pawn). Given an initial position, your program is to determine the winner.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">* Usual chess rules mean exactly the following:
<UL>
<LI>White moves first.
<LI>In the initial position, pawns are not on the first or the <I>N</i>-th horizontal row.
<LI>White pawn is allowed to move to the fourth horizontal from the second, and black pawn is allowed to move to the (<I>N</i>&minus;3)-rd horizontal row from the (<I>N</i>&minus;1)-st. Pawns can't jump over other pieces.
<LI>Just after the white pawn makes a move from <I>x</i>2 to <I>x</i>4, the black pawn may beat the white pawn <I>en passant</i>, moving from <I>y</i>4 to <I>x</i>3, if <I>y</i> is a vertical line, neighboring to the <I>x</i>-vertical.
<LI>In all other cases, pawns move one field along the vertical and beat one field along the diagonal. King moves one field in any direction.
<LI>If it is not Black’s turn to move, the black King should not be under check, i.e. in the position, when the white pawn could beat it.
<LI>When a black pawn reaches the first horizontal, it should be promoted to the Queen, Rook, Knight or Bishop, according to the wish of the Black player. (But when a white pawn reaches the <I>N</i>-th horizontal, it should be promoted to the Queen and our game immediately finishes).
</ul></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer <I>N</i>, 6 &le; <I>N</i> &le; 26. In the second line, the positions of the white pawn, black pawn and black King (in this very order!) are given, separated by one or several white spaces. A description of a position consists of a small Latin letter, which denotes the vertical, and (without a space) an integer number (from 1 to <I>N</i>) denoting the horizontal.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a message "WHITE WINS", when White can win the game according to the above described rules, and "BLACK WINS" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
h5 i5 b3
</PRE></TD><TD><PRE CLASS="intable">WHITE WINS
</PRE></TD></TR><TR><TD><PRE CLASS="intable">8
d5 h6 b6
</PRE></TD><TD><PRE CLASS="intable">BLACK WINS
</PRE></TD></TR></TABLE>
______________________________________________________
1217||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Strange people live in Moscow! Each time in the bus, getting a ticket with a 6-digit number, they try to sum up the first three and the last three digits. If these two sums are equal, they suppose such a ticket to be a lucky one. A person, who owns the lucky ticket, should dream about something, eat the ticket (no, it’s not made of chocolate, it’s made of paper!) and the dream will come true&hellip; At least, they believe it!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Strange people live in St.Petersburg! Each time in the bus, getting a ticket with a 6-digit number, they try to sum up the three digits on the odd and the three digits on the even positions. If these two sums are equal, they suppose such a ticket to be a lucky one. A person, who owns the lucky ticket, should dream about something, eat the ticket (no, even in St. Petersburg lucky tickets are not made of chocolate, they’re made of paper!) and the dream will come true&hellip; At least, they believe it!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the "third Russian capital" &mdash; Yekaterinburg &mdash; we laugh about such strange ideas. We are practical. We are not superstitious, even a little bit. But we understand that too much luck cannot be good. Thus we consider every ticket, which is lucky both in "Moscow sense" and "St. Petersburg sense" to be unlucky. If we get an unlucky ticket in the bus, we throw it away and leave the bus immediately! Two examples of unlucky tickets are 472175 and 810513.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program, which calculates the total number of unlucky <I>N</i>-digit tickets.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a single even positive integer <I>N</i> (2 &le; <I>N</i> &le; 20) &mdash; the number of digits in the ticket. Please note, that, for example 00742544 is a valid 8-digit ticket (by the way, it is a St.Petersburg-style lucky ticket).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should output a single integer number &mdash; the total number of unlucky <I>N</i>-digit tickets.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4</PRE></TD><TD><PRE CLASS="intable">100</PRE></TD></TR></TABLE>
______________________________________________________
1218||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Decided several Jedi Knights to organize a tournament once. To know, accumulates who the largest amount of Force. Brought each Jedi his lightsaber with him to the tournament. Are different the lightsaber, and Jedi different are. Three parameters there are: length of the saber, Force of the Jedi and how good the Light side of the Force the Jedi can use. If in at least two parameters one Jedi than the other one stronger is, wins he. Is not possible a draw, because no Jedi any equal parameter may have. If looses a Jedi, must leave the tournament he.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To determine, which Jedi the tournament can win, your program is. Can win the tournament a Jedi, if at least one schedule for the tournament possible is, when the last one remains he on the tournament, not looses any match. For example, if Anakin stronger than Luke by some two parameters is, and Luke stronger than Yoda by some two parameters is, and Yoda stronger than Anakin, exists in this case a schedule for every Jedi to win the tournament.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is a positive integer <I>N</i> &le; 200, the total number of Jedi. After that follow <I>N</i> lines, each line containing the name of the Jedi and  three parameters (length of the lightsaber, Force, Light side in this order) separated with a space. The parameters are different integers, not greater than 100000 by the absolute value. All names are sequences of not more than 30 small and capital letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output the names of those Jedi, which have a possibility to win the tournament. Each name of the possible winner should be written in a separate line. The order of the names in the output should correspond to the order of their appearance in the input data.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
Solo 0 0 0
Anakin 20 18 30
Luke 40 12 25
Kenobi 15 3 2
Yoda 35 9 125</PRE></TD><TD><PRE CLASS="intable">Anakin
Luke
Yoda</PRE></TD></TR></TABLE>
______________________________________________________
1219||||||false||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output a sequence of 1 000 000 lowercase Latin letters. This sequence should satisfy the following restrictions:
<UL>
<LI>Every letter occurs not more than 40 000 times in the sequence;</li>
<LI>Every possible subsequence with two letters length occurs not more than 2 000 times;</li>
<LI>Every possible subsequence with three letters length occurs not more than 100 times;</li>
</ul></DIV></DIV><H3 CLASS="problem_subtitle">Input</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For this problem no input is provided.</DIV></DIV><H3 CLASS="problem_subtitle">Output</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a single line of the output write some sequence, which satisfies the properties described above.</DIV></DIV>
______________________________________________________
1220||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine, that you are employed by a software development company. You work now on the famous "D++&nbsp;project", which is devoted to the creation of a new generation programming language. Your particular task is quite prosaic, though. You are to develop the memory manager being able to work with a large number of stacks.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the total number of stack operations <I>N</i>, 0 &lt; <I>N</i> &le; 100000. Each of the next <I>N</i> lines contains a description of a stack operation, either in the form PUSH&nbsp;<I>A</I>&nbsp;<I>B</I> (meaning to push <I>B</I> into stack <I>A</I>), or in the form POP&nbsp;<I>A</I> (meaning to pop an element from stack <I>A</I>), where <I>A</I> is the number of stack <nobr>(1 &le; <I>A</I> &le; 1000)</nobr>, and <I>B</I> is an integer <nobr>(0 &le; <I>B</I> &le; 10<SUP>9</sup>)</nobr>. You may assume, that every operation is correct (i.e., before each POP operation, the respective stack is not empty).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each POP operation, described in the input, output the value, which this POP operation gets from the top of that stack, to which it is applied. Numbers should appear according to the order of the POP operations in the input. Each number should be output in a separate line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
PUSH 1 100
PUSH 1 200
PUSH 2 300
PUSH 2 400
POP 2
POP 1
POP 2</PRE></TD><TD><PRE CLASS="intable">400
200
300</PRE></TD></TR></TABLE>
______________________________________________________
1221||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the greatest success of Malevich's "Black Square" the famous artist decided to create a new masterpiece. He took a large sheet of checked paper and filled some cells with black. After that he realized the picture to be too complicated. He was afraid, that people would not understand the sense of the painting. Thus, Malevich decided to cut out a smaller picture of the special form. It should be a black square with its sides parallel to the sides of the list. A white square rotated by 45 degrees should be placed inside the black square. The corners of the white square should lay on the sides of the black square. You can see an example of such picture on the figure.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The original paper size is <I>N</i> &times; <I>N</i>, 0 &lt; <I>N</i> &le; 100. Your program should help Malevich to find the largest figure corresponding to the pattern described above.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains several test cases. Each test case starts with the size of paper <I>N</i>. The following <I>N</i> lines of the test case describe the original painting: "1" denotes a black and "0" denotes a white cell. End of the input is marked by a zero value for <I>N</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should output the size (i.e. the maximum width or height) of the largest figure, which Malevich would like to cut out. If no such figure exists, output "No solution".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
1 1 0 1 1 0
1 0 0 0 1 1
0 0 0 0 0 0
1 0 0 0 1 1
1 1 0 1 1 1 
0 1 1 1 1 1
4
1 0 0 1
0 0 0 0
0 0 0 0
1 0 0 1
0</PRE></TD><TD><PRE CLASS="intable">5
No solution</PRE></TD></TR></TABLE>
______________________________________________________
1222||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Chernobyl’ eagle has several heads (for example, the eagle on the Russian National Emblem is a very typical one, having two heads; there exist Chernobyl’ eagles having twenty-six, one and even zero heads). As all eagles, Chernobyl’ eagles are very intelligent. Moreover, IQ of a Chernobyl’ eagle is exactly equal to the number of its heads. These eagles can also enormously enlarge their IQ, when they form a group for a brainstorm. IQ of a group of Chernobyl’ eagles equals to the product of IQ’s of eagles in the group. So for example, the IQ of a group, consisting of two 4-headed eagles and one 7-headed is 4*4*7=112. The question is, how large can be an IQ of a group of eagles with a given total amount of heads.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is one positive integer <I>N</i> in the input, <I>N</i> &le; 3000 — the total number of heads of Chernobyl’ eagles in a group.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should output a single number — a maximal IQ, which could have a group of Chernobyl’ eagles, with the total amount of heads equal to <I>N</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE>
______________________________________________________
1223||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time an Eagle made a nest on the roof of a very large building. Time went by and some eggs appeared in the nest. There was a sunny day, and Niels Bohr was walking on the roof. He suddenly said: “Oops! All eggs surely have the same solidity, thus there is such non-negative number <I>E</i> that if one drops an egg from the floor number <I>E</i>, it will not be broken (and so for all the floors below the <I>E</i>-th), but if one drops it from the floor number <I>E</i>+1, the egg will be broken (and the same for every floor higher, than the <I>E</i>-th).” Now Professor Bohr is going to organize a series of experiments (i.e. drops). The goal of the experiments is to determine the constant <I>E</i>. It is evident that number <I>E</i> may be found by dropping eggs sequentially floor by floor from the lowest one. But there are other strategies to find <I>E</i> for sure with much less amount of experiments. You are to find the least number of eggs droppings, which is sufficient to find number <I>E</i> for sure, even in the worst case. Note that dropped eggs that are not broken can be used again in following experiments.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The floors are numbered with positive integers starting from 1. If an egg has been broken being dropped from the first floor, you should consider that <I>E</i> is equal to zero. If an egg hasn’t been broken even being dropped from the highest floor, consider that <I>E</i> is also determined and equal to the total number of floors.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains multiple (up to 1000) test cases. Each line is a test case. Each test case consists of two numbers separated with a space: the number of eggs, and the number of floors. Both numbers are positive and do not exceed 1000. Tests will end with the line containing two zeroes.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output in a separate line the minimal number of experiments, which Niels Bohr will have to make even in the worst case.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 10
2 5
0 0
</PRE></TD><TD><PRE CLASS="intable">10
3
</PRE></TD></TR></TABLE>
______________________________________________________
1224||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A brand new sapper robot is able to neutralize mines in a rectangular region having integer height and width (<I>N</i> and <I>M</i> respectively). Before the robot begins its work it is placed near the top leftmost cell of the rectangle heading right. Then the robot starts moving and neutralizing mines making a clockwise spiral way (see picture). The spiral twists towards the inside of the region, covering all the cells. The region is considered safe when all the cells are visited and checked by the robot.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine the number of the turns the robot has to make during its work.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains two integers in the following order: <I>N</i>, <I>M</i> <nobr>(1 &le; <I>N</i>, <I>M</i> &le; 2<SUP>31</sup> &minus; 1)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output consists of a single integer value &mdash; the number of the turns.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 5</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1225||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the Day of the Flag of Russia a shop-owner decided to decorate the show-window of his shop with textile stripes of white, blue and red colors. He wants to satisfy the following conditions:
<OL>
<LI>Stripes of the same color cannot be placed next to each other.</li>
<LI>A blue stripe must always be placed between a white and a red or between a red and a white one.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine the number  of the ways to fulfill his wish.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example.</b> For <I>N</i> = 3 result is following:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>N</i>, the number of the stripes, 1 &le; <I>N</i> &le; 45.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>M</i>, the number of the ways to decorate the shop-window.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1226||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This task is quite unconventional. We do not describe the way you must transform the input, which is a plain text containing Latin letters and other possible characters (numeric digits, punctuation marks etc.) We only say that the word being a subject to transformations is considered to be a sequence of Latin letters (both uppercase and lowercase) that is followed by the end of line, or the end of file, or a character which is not a Latin letter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, write a program to convert this "scrambled" text into a readable form.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains some ciphered text. The input contains no more than 1000 lines. The length of each line does not exceed 255 characters. The text may contain any printable characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain the deciphered text from the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">This is an example of a simple test. If you did not 
understand the ciphering algorithm yet, then write the 
letters of each word in the reverse order. By the way, 
"reversing" the text twice restores the original text.</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">sihT si na elpmaxe fo a elpmis tset. fI uoy did ton 
dnatsrednu eht gnirehpic mhtirogla tey, neht etirw eht 
srettel fo hcae drow ni eht esrever redro. yB eht yaw, 
"gnisrever" eht txet eciwt serotser eht lanigiro txet.</PRE></TD></TR></TABLE>
______________________________________________________
1227||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A high-level international rally championship is about to be held. The rules of the race state that the race is held on ordinary roads and the route has a fixed length. You are given a map of the cities and two-way roads connecting it. To make the race safer it is held on one-way roads. The race may start and finish anyplace on the road. Determine if it is possible to make a route having a given length <I>S</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number of cities <I>M</i>, the number of roads <I>N</i> and the length <I>S</i> of the route. 1 &le; <i>M</i> &le; 100; 1 &le; <i>N</i> &le; 10000;  1 &le; <i>S</i> &le; 10<sup>6</sup>. <i>S</i> is integer.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following <I>N</i> lines describe the roads as triples of integers: <I>P, Q, R</i>. Here <I>P</i> and <I>Q</i> are cities connected with a road, and <I>R</i> is the length of this road. All numbers satisfy the following restrictions: 1 &le; <i>P</i>, <i>Q</i> &le; <i>M</i>; 1 &le; <I>R</i> &le; 32000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write YES to the output if it is possible to make a required route and NO otherwise. Note that answer must be written in capital Latin letters.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2 20
1 2 10
2 3 5
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3 1000
1 2 1
2 3 1
1 3 1
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1228||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imperative programming languages allow the use of both linear and multi-dimensional arrays. E.g. in Pascal for an array named <i>X</i> the expression <nobr><b>array</b>[0..2, 0..1, 0..3]</nobr> declares a three-dimensional array having the following boundaries for each dimension: 0..2, 0..1, 0..3. (We consider only zero-based arrays here though other values are possible in Pascal for lower bounds of each dimension.)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is always possible to determine the order in which the items of the array are enumerated. Consider that this order is determined by the principle "right-hand indices change faster". This means that the last (rightmost) index iterates through all possible values, then the index that is next to it (second from the right) changes its value by 1, and the last index iterates between the lower and upper boundaries again, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example.</b> The items of the array mentioned above are enumerated in the following order: <i>X</i>[0,0,0], <i>X</i>[0,0,1], <i>X</i>[0,0,2], <i>X</i>[0,0,3], <i>X</i>[0,1,0], <i>X</i>[0,1,1], <i>X</i>[0,1,2], <i>X</i>[0,1,3], <i>X</i>[1,0,0], <i>X</i>[1,0,1], <i>X</i>[1,0,2], <i>X</i>[1,0,3], <i>X</i>[1,1,0], <i>X</i>[1,1,1], <i>X</i>[1,1,2], <i>X</i>[1,1,3], <i>X</i>[2,0,0], <i>X</i>[2,0,1], <i>X</i>[2,0,2], <i>X</i>[2,0,3], <i>X</i>[2,1,0], <i>X</i>[2,1,1], <i>X</i>[2,1,2], <i>X</i>[2,1,3].</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let an <I>n</i>-ary array <I>X</i> is declared as <b>array</b>[0..<I>k</I><SUB>1</sub>, 0..<I>k</I><SUB>2</sub>, &hellip;, 0..<I>k<SUB>n</sub></I>]. The theory says that the order <I>P</i> of any item <I>X</I>[<I>i</I><SUB>1</sub>, <I>i</I><SUB>2</sub>, &hellip;, <I>i<SUB>n</sub></I>] is calculated as <I>P</I>(<I>i</I><SUB>1</sub>, <I>i</I><SUB>2</sub>, &hellip;, <I>i<SUB>n</sub></I>) = 1 + <I>D</I><SUB>1</sub>*<I>i</I><SUB>1</sub>+<I>D</I><SUB>2</sub>*<I>i</I><SUB>2</sub>+… <I>D<SUB>n</sub></I>*<I>i<SUB>n</sub></i>, if we use the enumeration described above. Here <I>D</i><SUB>1</sub>, <i>D</i><SUB>2</sub>, &hellip;, <i>D<SUB>n</sub></i> are so-called <I>index multipliers</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example</b>. For the array in discussion the index multipliers are <I>D</i><SUB>1</sub> = 8, <i>D</i><SUB>2</sub> = 4, <i>D</i><SUB>3</sub> = 1. Then, for example, the order of <i>X</i>[1,0,3] will be <i>P</i>(1,0,3) = 1+8*1+4*0+1*3 = 12.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to calculate the unknown upper boundaries (<i>k</i><SUB>1</sub>, <i>k</i><SUB>2</sub>, &hellip;, <i>k<SUB>n</sub></i>) for given index multipliers <I>D</i><SUB>1</sub>, <i>D</i><SUB>2</sub>, &hellip;, <i>D<SUB>n</sub></i> and total number of items <I>s</i> in the array.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <I>n</i> &mdash; the number of dimensions (1 &le; <i>n</i> &le; 20) and <I>s</i> &mdash; the total number of items in the array (1 &le; <I>s</i> &lt; 2<SUP>31</sup>&minus;1). The following <I>n</i> lines contain the index multipliers <i>D</i><SUB>1</sub>, <i>D</i><SUB>2</sub>, &hellip;, <i>D<SUB>n</sub></i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine the upper boundaries for each dimension of the array in order: <I>k</I><SUB>1</sub>, <I>k</I><SUB>2</sub>, &hellip;, <I>k<SUB>n</sub></I> (0 &lt; <I>k<SUB>i</sub></i> &le; 1000). The numbers in the output may be delimited with spaces and/or line breaks.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 24
8
4
1
</PRE></TD><TD><PRE CLASS="intable">2 1 3
</PRE></TD></TR></TABLE>
______________________________________________________
1229||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The builders must cover a rectangular area of size <I>M &times; N</i> (<I>M</i> and <I>N</i> are even numbers) with two layers of bricks that are rectangles of size 1 &times; 2. The first layer of the bricks has been already completed. The second layer (in an effort to make the brickwork really strong) must be done so, that no brick in it rests on a brick from the first layer.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the layout of the bricks in the first layer, determine the possible layout for the second one, or show that it is impossible to make the second layer.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example.</b> The two pictures show the layout of the two layers respectively. The size of the area is 2 &times; 4. Each brick is marked with its number on both halves.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>N</i>, <i>M</i> &mdash; dimensions of the area. Then <I>N</i> lines follow having <i>M</i> numbers each that describe the layout of the first layer. Each brick is marked with two equal numbers written in the squares of the area that are covered by this brick. All bricks are marked with whole numbers ranging from 1 to the total number of the bricks. <I>M</i> and <I>N</i> are even numbers not exceeding 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no solution, then write &minus;1. If the solution exists, write <I>N</i> lines with <I>M</i> numbers each that describe the layout of the second layer in the way shown above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4
1 1 2 2
3 3 4 4</PRE></TD><TD><PRE CLASS="intable">2 1 1 4
2 3 3 4</PRE></TD></TR></TABLE>
______________________________________________________
1230||||||false||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is probably no programmer that had not heard of a famous problem set by Norbert Wiener. The problem is to write a program that, being run, sends its source code to the output device. Note, that it is not allowed to use the files containing the source code, or system-dependent features (e.g. knowing the address of a memory area that could possibly contain the source code). Such a program is called an <I>introspective</i> one. A theorem is well known, which states that it is possible to write an introspective program in almost any programming language.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It would be unfair to demand writing an introspective program in a language known to a different degree by different participants. Therefore we describe a formal syntax for a new language called <I>PIBAS</i>. And your task is to write a program that writes an introspective <I>PIBAS</i> program to the output.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Testing this <I>PIBAS</i> program includes a syntax check and a test run. A program is considered correct if it outputs a string equal to its source code.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>PIBAS</i> description:
<OL>
<LI>A <I>PIBAS</i> program consists of one or more operators separated with ";" (semicolon). A program is written in one line that is no longer than 32000 characters.</li>
<LI>Two types of operators exist: string assignment operator and output operator.</li>
<LI>Assignment operator is used as follows: &lt;String variable&gt;=&lt;String expression&gt;</li>
<LI>String variable is denoted with a single capital Latin letter.</li>
<LI>String expression is either a string variable, or a string constant, or a substring function, or a concatenation of string expressions with the use of "+" (plus) character.</li>
<LI>String constant is a sequence of any printable characters enclosed in double (") or single (') quotes. This sequence cannot contain the quote character it is enclosed in. Examples: 'Rybinsk', "O key!", "I don't know solution."</li>
<LI>A substring function is used in the following way: $(&lt;string variable&gt;,&lt;unsigned integer&gt;,&lt;unsigned integer&gt;). The second parameter sets the starting character of the substring and the third one sets its length. Character numeration is one-based.</li>
<LI>Output operator: ?&lt;string expression&gt;.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The total length of all strings sent to output may not exceed 32000 characters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Examples:</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE BORDER=1 WIDTH=700>
<TR>
<TH>PIBAS program</TH>
<TH>Output</TH>
</TR>
<TR>
<TD><CODE>?"Hello, "+'World!'</CODE></TD>
<TD><CODE>Hello, World!</CODE></TD>
</TR>
<TR>
<TD><CODE>A='World, Hello!';?$(A,8,5);?", ";B=$(A,1,5)+'!';?B</CODE></TD>
<TD><CODE>Hello, World!</CODE></TD>
</TR>
</TABLE>
</DIV></DIV><H3 CLASS="problem_subtitle">Input</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input is not used.</DIV></DIV><H3 CLASS="problem_subtitle">Output</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain an introspective <I>PIBAS</i> program.</DIV></DIV>
______________________________________________________
1231||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Turing machine used for computability research is well known to computer scientists. We will give a brief description of this abstraction. Turing machine is an automatic device that works on a <I>tape</I> (1) of potentially unlimited length. The tape is divided into cells each containing a character. One of the cells is called a <I>viewed</I>, or <I>current</I>, one (2). At any point of time the Turing machine has a <I>condition</I> that is stored in the <I>control unit</I> (4). Besides, the <I>read/write</I> head (3) of the control unit is pointing to the current cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The control unit can execute one action per time interval (<I>step</I>). The action includes a state change, a possible change of the character in the current cell, and a possible movement to the adjacent cell. These actions are defined in a special table, called a <I>control table</I>. We will denote the movements along the tape with the following symbols: "&lt;" &mdash; to the left, "&gt;" &mdash; to the right, "=" &mdash; no movement.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The control table is actually a program for the Turing machine. The work of the Turing machine is considered to be done if no line in the control table contains the combination of the current character and condition.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Control table example:</B>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE WIDTH="450" ALIGN="CENTER">
<TR>
<TH WIDTH="20%">Current condition</TH>
<TH WIDTH="20%">Current character</TH>
<TH WIDTH="20%">New condition</TH>
<TH WIDTH="20%">New character</TH>
<TH WIDTH="20%">Movement</TH>
</TR>

<TR>
<TD ALIGN="CENTER">1</TD>
<TD ALIGN="CENTER">-</TD>
<TD ALIGN="CENTER">2</TD>
<TD ALIGN="CENTER">-</TD>
<TD ALIGN="CENTER">&gt;</TD>
</TR>

<TR>
<TD ALIGN="CENTER">2</TD>
<TD ALIGN="CENTER">-</TD>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">+</TD>
<TD ALIGN="CENTER">&gt;</TD>
</TR>

<TR>
<TD ALIGN="CENTER">3</TD>
<TD ALIGN="CENTER">#</TD>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">#</TD>
<TD ALIGN="CENTER">&lt;</TD>
</TR>

<TR>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">+</TD>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">+</TD>
<TD ALIGN="CENTER">&lt;</TD>
</TR>

<TR>
<TD ALIGN="CENTER">4</TD>
<TD ALIGN="CENTER">-</TD>
<TD ALIGN="CENTER">5</TD>
<TD ALIGN="CENTER">-</TD>
<TD ALIGN="CENTER">=</TD>
</TR>
</TABLE>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Notice.</B> This example only illustrates the definition of the table.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input data for the Turing Machine are placed beforehand in the cells of the tape. The result is written to the same tape. Assume that the initial condition for the Turing machine is equal to 1 and the input data on the tape are bounded on both ends with '#' characters. (All tape cells except those that filled with minuses are filled with '#' character.) The control block is placed at the leftmost '-' character of the input data. The input tape contains '-' (minus) character repeated <i>n</i> times <nobr>(1 &le; <i>n</i> &le; 200)</nobr>, and the input contains an integer <i>k</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine that the minuses are placed in circle. Starting with the first one each <i>k</i>-th uncrossed minus is crossed, i.e. it turns into a '+' (plus). The execution stops when there is only one uncrossed minus is left. Your task is to describe the control table for the Turing machine that will cross all minuses except one (it's position defined according to the above algorithm, but you may use any method) for the given <i>k</i>. For example, for <i>n</i> = 10 and <i>k</i> = 3 the fourth minus will remain uncrossed.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may place the following characters on the tape: '+', '#', 'A'..'Z'. The cells initially filled with minuses may only contain '-' and '+' characters. After the execution the read/write head must point to the uncrossed minus. The number of the steps s must not exceed 1 000 000. The number of the line in the control table <i>p</i> must not exceed 10000. Tape size limited with 10001 cells (5000 both side from the initial read/write head position).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains an integer number <i>k</i> (1 &le; <i>k</i> &le; 200).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output describes the control table for the Turing machine for the given <i>k</i>. The first line of the output contains the number of rows <i>p</i> in the table <nobr>(1 &lt; <i>p</i> &lt; 10000)</nobr>. Then <i>p</i> lines follow describing the table itself. Each row of the table contains five items: current condition (an integer number), current character (a character), new condition (an integer number), new character (a character), moving direction (a character). The items are separated with a single space characters. The condition numbers may range from 1 to 30000.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">5
1 - 2 - &gt;
2 - 3 + &gt;
3 # 4 # &lt;
4 + 4 + &lt;
4 - 5 - =
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note, that this example is correct only for <i>n</i> = 2. It just shows output format.</DIV></DIV>
______________________________________________________
1232||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A guided probe is launched from the space station located at the distance of <i>h</i> from the surface of a large asteroid. The probe must land at the asteroid. The probe moves straight forward for a fixed distance <I>d</i>, after that it receives a new command from the station. The command defines the new direction for the movement. Each movement of the probe must help it to get closer to the surface. The control signals from the station are transmitted only within a cone having a vertex angle of &alpha;.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, the trajectory of the probe is a broken line with segments of equal length, which is lying inside the cone described above. The last segment of the trajectory must also be of length <I>d</i>, lie inside the transmission cone and end at the surface of the asteroid.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine if it is possible to perform the landing of the probe taking into consideration the above conditions. If the landing is possible, then find the trajectory of minimal length including the coordinates of the ends of each segment. The landing point must be found, too.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The coordinates of the points are Cartesian. Ox and Oy lie on the surface of the asteroid, and Oz passes through the space station.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>h</i> (0 &lt; <I>h</i> &lt; 100), <I>d</i> (<I>h</i>/1000 &le; <I>d</i> &le; 10*<I>h</i>), &alpha;  (the angle is in radians, 0.1 &le; &alpha; &le; 3). All numbers are float.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>n</i> &mdash; the number of segments in the trajectory, or &minus;1, if landing is impossible<BR>
<i>x</i><sub>1</sub> <i>y</i><sub>1</sub> <i>z</i><sub>1</sub><BR>
<i>x</i><sub>2</sub> <i>y</i><sub>2</sub> <i>z</i><sub>2</sub><BR>
&hellip;<BR>
<i>x<sub>n</sub></i> <i>y<sub>n</sub></i> <i>z<sub>n</sub></i> &mdash; the coordinates of the points where the probe receives control signals, and the landing point. All coordinates must be calculated to within 0.0001.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11 5 2</PRE></TD><TD><PRE CLASS="intable">3
0 3 7
3 3 3
3 –1 0</PRE></TD></TR></TABLE>
______________________________________________________
1233||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider the set of integer numbers between 1 and N inclusive. Let us 
order them lexicographically (i. e. like in the vocabulary), for example, for 
N&nbsp;=&nbsp;11 the order would be: 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us denote the position of the number K in this ordering as Q<sub>N,K</sub>. 
For example, Q<sub>11,2</sub>&nbsp;=&nbsp;4. Given numbers K and M find the 
smallest N such that Q<sub>N,K</sub>&nbsp;=&nbsp;M.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains two integer numbers K and M 
(1&nbsp;&le;&nbsp;K,&nbsp;M&nbsp;&le;&nbsp;10<sup>9</sup>) 
separated by a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If such N that Q<sub>N,K</sub>&nbsp;=&nbsp;M exists then write the smallest such N, otherwise write 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 1
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR><TR><TD><PRE CLASS="intable">100000001 1000000000
</PRE></TD><TD><PRE CLASS="intable">100000000888888879
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1000000000 11
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1234||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The prisoner of the &quot;IF&quot; castle has decided to run away by disassembling 
the brick wall in his prison cell. To hide his work from his jailors he 
shall get rid of the bricks that he removes from the wall. All bricks have 
a shape of rectangular parallelepiped with the size of A &times; B &times; C inches and 
are so strong that they are impossible to break. However, there's a small 
rectangular sewer hole in the cell's floor with the size of D &times; E inches that
goes deep down as a rectangular well of the same size (so deep it is, that
its depth could not be measured and can be neglected).
The prisoner have precisely (up to a tenth of an inch!) measured all the sizes 
A, B, C, D, E and wants to know if it is possible to dispose of the castle's 
bricks through the hole in the floor. Please, answer this question for him.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains numbers A, B, C, D, and E separated by spaces. A, B, C are the lengths of brick's sides, and D, E are 
the lengths of hole's sides. All lengths are at least 1 and at most 10 inches and have at most 1 digit after decimal point. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single word <tt>YES</tt> if it is possible to dispose of the bricks through the hole or <tt>NO</tt> otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.0 2.0 1.5 1.4 1.0
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1.0 2.0 1.5 1.5 1.0
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1235||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time there was a greedy King who ordered his chief Architect to
build a field for royal cricket inside his park. The King was so greedy, that he 
would not  listen to his Architect's proposals to build a field right in the 
park center with pleasant patterns of trees specially planted around and beautiful walks
inside tree alleys for spectators. Instead, he ordered neither to cut nor to plant 
even a single tree in his park, but demanded to build the largest possible cricket
field for his pleasure. If the Kind finds that the Architect has dared to touch even
a single tree in his park or designed a smaller field that it was possible, then
the Architect will loose his head. Moreover, he demanded his Architect to introduce 
at once a plan of the field with its exact location and size.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help poor Architect to save his head, by writing a program that 
will find the maximum possible size of the cricket field and its location inside
the park to satisfy King's requirements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The task is somewhat simplified by the fact, that King's park has a rectangular shape 
and is situated on a flat ground. Moreover, park's borders are perfectly aligned with 
North-South and East-West lines. At the same time, royal cricket is always played on a 
square field that is also aligned with North-South and East-West lines. Architect has 
already established a Cartesian coordinate system and has precisely measured the 
coordinates of every tree. This coordinate system is, of course, aligned with 
North-South and East-West lines. Southwestern corner of the park has coordinates 
(0, 0) and Northeastern corner of the part has coordinates (W, H), where W and H 
are the park width and height in feet respectively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For this task, you may neglect the diameter of the trees. Trees cannot be
inside the cricket field, but may be situated on its side. The cricket field may
also touch park's border, but shall not lie outside the park.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integer numbers N, W, and H, 
separated by spaces. N (0&nbsp;&le;&nbsp;N&nbsp;&le;&nbsp;100) is the number of 
trees in the park. W and H (1&nbsp;&le;&nbsp;W,&nbsp;H&nbsp;&le;&nbsp;10000) 
are the park width and height in feet respectively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next N lines describe coordinates of trees in the park. Each line contains 
two integer numbers X<sub>i</sub> and Y<sub>i</sub> separated by a space
(0&nbsp;&le;&nbsp;X<sub>i</sub>&nbsp;&le;&nbsp;W, 
0&nbsp;&le;&nbsp;Y<sub>i</sub>&nbsp;&le;&nbsp;H) that represent
coordinates of i<sup>th</sup> tree. All trees are located at different
coordinates.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single line with three integer numbers P, Q, and L
separated by spaces, where (P, Q) are coordinates of the cricket field Southwestern 
corner, and L is a length of its sides. If there are multiple possible field 
locations with a maximum size, then output any one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 10 7
3 2
4 2
7 0
7 3
4 5
2 4
1 7
</PRE></TD><TD><PRE CLASS="intable">4 3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1236||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the near future any research and publications about cryptography are
outlawed throughout the world on the grounds of national security concerns. 
The reasoning for this is clear and widely accepted by all governments - 
if cryptography literature is public like in the old times, then everybody 
(even criminals and terrorists) could easily use it to hide their
malicious plans from the national and international security forces.
Consequently, public cryptographic algorithms and systems have ceased to 
exist, and everybody who needs strong protection for their secrets is forced 
to invent proprietary algorithms.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The ACM Corporation has lots of competitors who are eager to learn its 
trade secrets. Moreover, the job to protect their secrets is complicated by 
the fact, that they are forced to use intercontinental communication lines 
which are easy to eavesdrop on, unlike internal lines of the ACM Corporation
which are well guarded. Therefore, the ACM Corporation have invented the 
Intercontinental Cryptographic Protection Code (ICPC) which they are very 
proud of, and which is considered unbreakable - nobody has even tried to
break it yet, but that is about to change.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The group of hackers was hired by the rival company, which does not disclose
its name to them, to break ICPC. As the first step, they have bribed one of the
programmers who implemented the software for ICPC and have learned how ICPC works.
It turns out, the ICPC uses very long key which is a sequence of bytes generated
by some sophisticated and random physical process. This key is changed weekly and
is used to encrypt all messages that are sent over intercontinental communication
lines during the week. This programmer has also proudly told them, that ICPC is
the fastest code in the world, because (having the benefit of highly sophisticated
code generation) they simply perform bitwise exclusive OR (XOR) operation between
the bytes of the message and the key. That is, the i<sup>th</sup> byte of the encrypted
message E<sub>i</sub> = K<sub>i</sub> XOR C<sub>i</sub>, where K<sub>i</sub> is the
i<sup>th</sup> byte of the key and C<sub>i</sub> is the i<sup>th</sup> byte of the
original clear-text message.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having learned how ICPC works, they have started to look for the way to reliably 
obtain the key every week, which is the only thing that is still missing to 
listen for all intercontinental communications of the ACM Corporation 
(eavesdropping on the intercontinental lines themselves has indeed turned out to 
be an easy task). An attempt to bribe the security officers who guard and 
distribute the key has failed, because the security officers (having the 
profession with one the highest salaries of that time) have turned out to be 
too expensive to bribe.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the search for alternative solutions, they have stumbled upon a clerk,
who sends weekly newsletters to various employees and departments. Fortunately,
these newsletters are being sent just after the change of the key and the messages
are usually long enough to recover sufficient portions of the key by studying 
original newsletters and their encoded forms. However, they could not
covertly find anyone who will disclose the newsletter contents on a weekly basis,
because all the employees were bound by a Non-Disclosure Agreement (NDA) and the 
penalty for the disclosure of any corporate message according to this NDA is death.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Yet they were able to convince this clerk (for a small reward) to do a seemingly
innocent thing. That is, while sending the copies of newsletter throughout the 
corporation, he was instructed to insert an extra space character in the beginning
of some messages but send other copies in their original form. Now the task to
recover the key is straightforward and it is you, who shall create a program 
for this. The program is given two ICPCed messages where the first message
is N bytes, and the second one is N+1 bytes and is the result of encoding the
same clear-text messages as the first one, but with one extra space character
(represented by the byte with the decimal value of 32) in the beginning. The
program shall find the first N+1 bytes of the key that was used to encode 
the messages.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of two lines. The first line consists of 2N characters and
represents the encoded message N bytes long. The second line consists of 2N+2 characters
and represents the encoded message N+1 bytes long. 
Here 1&nbsp;&le;&nbsp;N&nbsp;&le;&nbsp;10000. Each message is written
on a single line in a hexadecimal form byte by byte without spaces. 
Each byte of the message is represented by two characters '0'-'9', 'A'-'F' 
that represent the hexadecimal value of the corresponding byte.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single line that represents N+1 bytes of the
recovered key in the same hexadecimal format as in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">05262C5269143F314C2A69651A264B
610728413B63072C52222169720B425E
</PRE></TD><TD><PRE CLASS="intable">41434D2049435043204E454552432732
</PRE></TD></TR></TABLE>
______________________________________________________
1237||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The City has a number of municipal buildings and a number of fallout 
shelters that were build specially to hide municipal workers in case of
a nuclear war. Each fallout shelter has a limited capacity in terms of 
a number of people it can accommodate, and there's almost no excess 
capacity in The City's fallout shelters. Ideally, all workers from a 
given municipal building shall run to the nearest fallout shelter. 
However, this will lead to overcrowding of some fallout shelters, while 
others will be half-empty at the same time.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To address this problem, The City Council has developed a special evacuation plan. Instead of assigning every worker to a fallout shelter individually (which will be a huge amount of information to keep), they allocated fallout shelters to municipal buildings, listing the number of workers from every building that shall use a given fallout shelter, and left the task of individual assignments to the buildings' management. The plan takes into account a number of workers in every building - all of them are assigned to fallout shelters, and a limited capacity of each fallout shelter - every fallout shelter is assigned to no more workers then it can accommodate, though some fallout shelters may be not used completely.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The City Council claims that their evacuation plan is optimal, in the sense that it minimizes <i>the total time to reach fallout shelters</i>
for all workers in The City, which is the sum for all workers of the time to go from the worker's municipal building to the fallout shelter assigned
to this worker.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The City Mayor, well known for his constant confrontation with The City
Council, does not buy their claim and hires you as an independent consultant to verify the evacuation plan. Your task is to either ensure that the evacuation plan is indeed optimal, or to prove otherwise by presenting another evacuation plan with the smaller total time to reach fallout shelters, thus clearly exposing The City Council's incompetence.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During initial requirements gathering phase of your project, you have found that The City is represented by a rectangular grid. The location of municipal buildings and fallout shelters is specified by two integer numbers and the time to go between municipal building at the location 
(X<sub>i</sub>,&nbsp;Y<sub>i</sub>) and the fallout shelter at the location (P<sub>j</sub>,&nbsp;Q<sub>j</sub>) is D<sub>i,j</sub> = |X<sub>i</sub> - P<sub>j</sub>| + |Y<sub>i</sub> - Q<sub>j</sub>| + 1 
minutes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of The City description and the evacuation plan description. The first line consists of two numbers N and M separated by a space. N (1&nbsp;&le;&nbsp;N&nbsp;&le;&nbsp;100) is a number of municipal buildings in The City (all municipal buildings are numbered from 1 to N). M (1&nbsp;&le;&nbsp;M&nbsp;&le;&nbsp;100) is a number of fallout shelters in The City (all fallout shelters are numbered from 1 to M).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following N lines describe municipal buildings. Each line contains there integer numbers X<sub>i</sub>, Y<sub>i</sub>, and B<sub>i</sub> separated by spaces, where X<sub>i</sub>, Y<sub>i</sub> (-1000&nbsp;&le;&nbsp;X<sub>i</sub>,&nbsp;Y<sub>i</sub>&nbsp;&le;&nbsp;1000) are the coordinates of the building, and B<sub>i</sub> 
(1&nbsp;&le;&nbsp;B<sub>i</sub>&nbsp;&le;&nbsp;1000) is the number of workers in this building.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The description of municipal buildings is followed by M lines that describe fallout shelters. Each line contains three integer numbers P<sub>j</sub>, Q<sub>j</sub>, and C<sub>j</sub> separated by spaces, where P<sub>i</sub>, Q<sub>i</sub> (-1000&nbsp;&le;&nbsp;P<sub>j</sub>,&nbsp;Q<sub>j</sub>&nbsp;&le;&nbsp;1000) are the coordinates of the fallout shelter, and C<sub>j</sub> 
(1&nbsp;&le;&nbsp;C<sub>j</sub>&nbsp;&le;&nbsp;1000) is the capacity
of this shelter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The description of The City Council's evacuation plan follows on the next N lines. Each line represents an evacuation plan for a single building (in the order they are given in The City description). The evacuation plan of i<sup>th</sup> municipal building consists of M integer numbers E<sub>i,j</sub> separated by spaces. E<sub>i,j</sub> (0&nbsp;&le;&nbsp;E<sub>i,j</sub>&nbsp;&le;&nbsp;1000) is a number 
of workers that shall evacuate from the i<sup>th</sup> municipal building to the j<sup>th</sup> fallout shelter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The plan is guaranteed to be <i>valid</i>. Namely, it calls for an evacuation of the exact number of workers that are actually working in any given municipal building according to The City description and does not exceed the capacity of any given fallout shelter.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If The City Council's plan is optimal, then write the
single word <tt>OPTIMAL</tt>. Otherwise, write the word <tt>SUBOPTIMAL</tt> on the first line, followed by N lines that describe your plan in the same format as in the input. Your plan need not be optimal itself, but must be valid and better than The City Council's one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4
-3 3 5
-2 -2 6
2 2 5
-1 1 3
1 1 4
-2 -2 7
0 -1 3
3 1 1 0
0 0 6 0
0 3 0 2
</PRE></TD><TD><PRE CLASS="intable">SUBOPTIMAL
3 0 1 1
0 0 6 0
0 4 0 1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 4
-3 3 5
-2 -2 6
2 2 5
-1 1 3
1 1 4
-2 -2 7
0 -1 3
3 0 1 1
0 0 6 0
0 4 0 1
</PRE></TD><TD><PRE CLASS="intable">OPTIMAL
</PRE></TD></TR></TABLE>
______________________________________________________
1238||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Bill is trying to compactly represent sequences of capital alphabetic
characters from 'A' to 'Z' by folding repeating subsequences inside them. For example, one way to represent a sequence AAAAAAAAAABABABCCD is 10(A)2(BA)B2(C)D. He formally defines folded sequences of characters along with the unfolding transformation for them in the following way:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
<li>A sequence that contains a single character from 'A' to 'Z' is 
considered to be a folded sequence. Unfolding of this sequence 
produces the same sequence of a single character itself.</li>
<li>If S and Q are folded sequences, then SQ is also a folded sequence. If S unfolds to S' and Q unfolds to Q', then SQ unfolds to S'Q'.</li>
<li>If S is a folded sequence, then X(S) is also a folded sequence,
where X is a decimal representation of an integer number greater than 1. If S unfolds to S', then X(S) unfolds to S' repeated X times.</li>
</ul></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to this definition it is easy to unfold any given folded
sequence. However, Bill is much more interested in the reverse 
transformation. He wants to fold the given sequence in such a way that the resulting folded sequence contains the least possible number of characters.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a single line of characters from 'A' to 'Z'
with at least 1 and at most 100 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a single line that contains the shortest possible folded sequence that unfolds to the sequence that is given in the input. If there are many such sequences then write any one of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">AAAAAAAAAABABABCCD
</PRE></TD><TD><PRE CLASS="intable">9(A)3(AB)CCD
</PRE></TD></TR><TR><TD><PRE CLASS="intable">NEERCYESYESYESNEERCYESYESYES
</PRE></TD><TD><PRE CLASS="intable">2(NEERC3(YES))
</PRE></TD></TR></TABLE>
______________________________________________________
1239||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The famous Ghost Busters team has decided to upgrade their Ectomobile 
(aka Ecto-1) with a powerful proton gun and an advanced targeting system. 
Egon has designed and built all the hardware which consists of ectoplasmic 
scanner and a proton gun that has two degrees of freedom and can automatically 
rotate and fire in a 90 degrees trihedral angle. You have been hired to 
write a prototype for the targeting software.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ghosts are detected by ectoplasmic scanner and are represented as
floating spheres. The coordinates of their centers and radii are 
delivered from the ectoplasmic scanner to the targeting software. The
coordinate system is aligned is such a way, that the proton gun fires
from the point (0, 0, 0) anywhere into 
X&nbsp;&ge;&nbsp;0, Y&nbsp;&ge;&nbsp;0, Z&nbsp;&ge;&nbsp;0 
trihedral angle. The gun fires a proton ray in a straight line 
and is so powerful, that even a touch of its ray is enough to kill 
a ghost. The ray of the proton gun is able to kill a virtually unlimited 
number of ghosts on its way.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For the first prototype for the targeting software, you are asked to 
write a program that determines the maximal number of ghosts that can
be killed with a single shot of the proton gun.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer N (0 &le; N &le; 100) - the number of ghosts detected by the ectoplasmic scanner of Ecto-1. The following N lines describe detected ghosts - one ghost per line. The description of i<sup>th</sup> ghost (ghosts are 
numbered from 1 to N) consists of 4 integer numbers X<sub>i</sub>,
Y<sub>i</sub>, Z<sub>i</sub>, and R<sub>i</sub>, separated by spaces.
X<sub>i</sub>, Y<sub>i</sub>, Z<sub>i</sub> 
(1&nbsp;&le;&nbsp;X<sub>i</sub>,&nbsp;Y<sub>i</sub>,&nbsp;Z<sub>i</sub>&nbsp;&le;&nbsp;10000) 
are the coordinates of the ghost's center, and R<sub>i</sub> 
(1&nbsp;&le;&nbsp;R<sub>i</sub>&nbsp;&le;&nbsp;min(X<sub>i</sub>,&nbsp;Y<sub>i</sub>,&nbsp;Z<sub>i</sub>))
is the ghost's radius.
Because ghosts are ectoplasmic, they can be arbitrarily placed in respect
to each others. They can intersect, fit inside each other, coincide with each
other, etc.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first line write a single integer number - the maximal number of ghosts that can be killed with a single shot of the proton gun. On the second line write the identifying numbers of the ghosts to be killed in an arbitrary order separated by spaces. If there are multiple ways to kill this number of ghosts then write any one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1200 1200 3900 300
160 160 820 60
</PRE></TD><TD><PRE CLASS="intable">2
1 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">13
1200 1200 3900 300
160 160 820 60
100 10 10 10
10 100 10 10
10 10 100 10
10 10 10 10
50 50 50 10
100 100 75 20
100 75 100 20
75 100 100 20
3000 4000 7000 2600
100 1000 1000 50
1000 100 1000 100
</PRE></TD><TD><PRE CLASS="intable">5
6 7 9 10 11
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is possible to kill both ghosts in sample #1 only because the 
proton gun is so powerful that it kills ghosts by mere touch.<BR>
Sample #2 has 11 more ghosts (for a total of 13). Picture shows the
view of these ghosts through the ectoplasmic scope sight that
Egon has attached to proton gun to calibrate it and to debug your 
targeting software. Outlines show ghosts as seen through the scope.</DIV></DIV>
______________________________________________________
1240||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the new version of the famous game &ldquo;Heroes of Might and Magic&rdquo; heroes themselves take active part in battles. More of that, hero can defeat some monsters alone, without any supporting army. In this problem you are asked to develop the program which would find the strategy for a mage hero fighting face to face with a pack of monsters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each hero initially has HP<sub>H</sub> hit points and MP<sub>H</sub> mana points. Heroes can use different spells. Your hero knows three spells: Lighting Bolt, Teleport and Heal. Each spell costs one mana point.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each monster has HP<sub>M</sub> hit points. Pack of monsters is a single group of several monsters who act as one. Therefore if initially the pack consists of N<sub>M</sub> monsters, they have N<sub>M</sub> &times; HP<sub>M</sub> hit points. As the battle proceeds, monsters' number of hit points decreases. If monsters have H hit points, that means that the group consists of ceiling(H&nbsp;/&nbsp;HP<sub>M</sub>) monsters (ceiling is a function that
returns the smallest integer number not less its argument).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The battle runs on a one-dimensional battlefield consisting of N + 1 squares, numbered starting from 0. Your hero resides on the square number 0 and does not move. Monsters initially reside on N<sup>th</sup> square and can move. Monsters can move at most V squares a turn.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The battle consists of turns. First your hero makes a turn, then the monsters, and so on. Monsters' strategy is very easy - they move in the direction of your hero min(V, P - 1) squares where P is the square number where they were in the beginning of their turn. If the monsters are on the square number 1 in the end of the movement, then they strike your hero. If there are K monsters left in a pack, their strike decreases hit points of the hero by K. If your hero has non-positive hit points, then the hero is defeated.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your hero's turn is always the casting of some spell. Lighting Bolt spell removes L<sub>P</sub> hit points from a pack of monsters, where P is the square number on which the monsters reside. Teleport spell moves monsters to any desired square (except 0 where your hero resides). Heal spell adds dH hit points to hero. However, his hit points never exceed HP<sub>H</sub>, so if after using Heal spell his hit points are greater then HP<sub>H</sub>, they are decreased to HP<sub>H</sub>. If your hero has zero mana points and there is at least one monster left in the pack, then the hero is defeated.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the strategy which would allow your hero to defeat monsters. Monsters are defeated if their hit points are non-positive.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains positive integers separated by spaces in the following order: N, HP<sub>H</sub>, MP<sub>H</sub>, HP<sub>M</sub>, N<sub>M</sub>, V, dH. 
(1&nbsp;&le;&nbsp;N&nbsp;&le;&nbsp;10, 
2&nbsp;&le;&nbsp;HP<sub>H</sub>&nbsp;&le;&nbsp;100,
1&nbsp;&le;&nbsp;MP<sub>H</sub>&nbsp;&le;&nbsp;50,
1&nbsp;&le;&nbsp;HP<sub>M</sub>&nbsp;&le;&nbsp;10,
1&nbsp;&le;&nbsp;N<sub>M</sub>&nbsp;&le;&nbsp;10,
1&nbsp;&le;&nbsp;V&nbsp;&le;&nbsp;N,
1&nbsp;&le;&nbsp;dH&nbsp;&lt;&nbsp;HP<sub>H</sub>).
The second line contains N integer numbers 
L<sub>1</sub>, L<sub>2</sub>, …, L<sub>N</sub>
(1&nbsp;&le;&nbsp;L<sub>P</sub>&nbsp;&le;&nbsp;10), separated by spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the hero cannot win the battle, write the word <tt>DEFEATED</tt>. In the other case write the word <tt>VICTORIOUS</tt> on the first line and then write any sequence of hero's actions that leads to victory, where each line starting from the second one must correspond to one hero's turn. The first character of the line must be one of the following:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
<li><tt>L</tt> - Cast Lighting Bolt spell.</li>
<li><tt>T</tt> - Cast Teleport spell.</li>
<li><tt>H</tt> - Cast Heal spell.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the hero casts Teleport spell then <tt>T</tt> character must be 
followed by a space and an integer number from 1 to N - the square number where the monsters should be teleported to.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3 2 1 2 1 1
1 1
</PRE></TD><TD><PRE CLASS="intable">VICTORIOUS
L
L
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 3 2 3 1 1 1
1 1
</PRE></TD><TD><PRE CLASS="intable">DEFEATED
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 4 3 1 4 1 1
3 1 1 1
</PRE></TD><TD><PRE CLASS="intable">VICTORIOUS
L
T 2
L
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 6 5 1 4 1 3
1
</PRE></TD><TD><PRE CLASS="intable">VICTORIOUS
L
L
H
L
L
</PRE></TD></TR></TABLE>
______________________________________________________
1241||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The factory cuts rectangular M &times; N granite plates into pieces using a special machine that is able to perform cuts in 4 different directions: vertically, horizontally, and diagonally at the angle of 45 degrees to the sides of the plate. Every cut is a straight line that starts and ends on the side of the plate.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The factory has been ordered to produce tiles for the inlay, each tile
of which is a 45 degrees right triangle. To reduce the time to deliver
the tiles it was decided to take all triangles from the already cut plates. Information about all performed cuts is available and your task is to compute the number of triangles of any size that were produced.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input describes the cuts that were performed on a single 
rectangular plate. The first line contains three integers M, N, and K, separated by spaces. M and N 
(1&nbsp;&le;&nbsp;M,&nbsp;N&nbsp;&le;&nbsp;50) are the dimensions 
of the plate, and K (0&nbsp;&le;&nbsp;K&nbsp;&le;&nbsp;296) is 
the number of cuts. Next K lines describe the cuts. i<sup>th</sup> cut is described by four integer numbers X<sub>i,1</sub>, Y<sub>i,1</sub>, X<sub>i,2</sub>, and Y<sub>i,2</sub>, 
separated by spaces, that represent the starting and ending point 
of the cut. Both starting (X<sub>i,1</sub>,&nbsp;Y<sub>i,1</sub>) and
ending (X<sub>i,2</sub>,&nbsp;Y<sub>i,2</sub>) points of the cut are
situated on the plate's border. Both points of the cut are different
and the cut goes through the plate. Here, the coordinates by the X axis run from 0 to M, and the coordinates by the Y axis run from 0 to N. All cuts are different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the number of triangles that were produced by the cuts.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4 4
1 4 1 0
0 4 4 0
0 0 4 4
0 2 4 2
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR><TR><TD><PRE CLASS="intable">7 4 6
6 0 7 1
1 4 1 0
0 4 4 0
0 0 4 4
0 2 7 2
7 0 3 4
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE>
______________________________________________________
1242||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Knife. Moonlit night. Rotten stump with a short black-handled knife in it. Those who know will understand. Disaster in the village. Werewolf.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are no so many residents in the village. Many of them are each other's relatives. Only this may help to find the werewolf. The werewolf is merciless, but his descendants never become his victims. The werewolf can drown the village in blood, but he never kills his ancestors.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known about all the villagers who is the child of whom. Also, the sad list of the werewolf's victims is known. Your program should help to determine the suspects. It would be a hard task, if a very special condition would not hold. Namely, citizens of the village are not used to leave it. If some ancestor of some citizen lives in the village, then also his immediate ancestor does. It means, that, for example, if the father of the mother of some citizen still lives in the village, than also his mother still lives.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <I>N</I>, 1 &lt; <I>N</I> &le; 1000, which is the number of the villagers. The villagers are assigned numbers from 1 to <I>N</I>. Further is the description of the relation "child-parent": a sequence of strings, each of which contains two numbers separated with a space; the first number in each string is the number of a child and the second number is the number of the child's parent. The data is correct: for each of the residents there are no more than two parents, and there are no cycles. The list is followed by the word "BLOOD" written with capital letters in a separate string. After this word there is the list of the werewolf's victims, one number in each string.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the numbers of the residents who may be the werewolf. The numbers must be in the ascending order and separated with a space. If there are no suspects, the output should contain the only number 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
1 3
3 6
4 5
6 2
4 6
8 1
BLOOD
3
8
</PRE></TD><TD><PRE CLASS="intable">4 5 7
</PRE></TD></TR><TR><TD><PRE CLASS="intable">6
1 2
3 2
1 4
3 4
2 6
5 2
5 4
BLOOD
2
5
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1243||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the Snow White with her bridegroom had left the house of the seven dwarfs, their peaceful and prosperous life has come to an end. Each dwarf blames others to be the reason of the Snow White's leave. To stop everlasting quarrels, the dwarfs decided to part. According to an ancient law, their common possessions should be divided in the most fair way, which means that all the dwarfs should get equal parts. Everything that the dwarfs cannot divide in a fair way they give to the Snow White. For example, after dividing 26 old boots, each dwarf got 3 old boots, and the Snow White got the remaining 5 old boots. Some of the numbers are very large, for example, the dwarfs have 123456123456 poppy seeds, so it is not easy to calculate that the Snow White gets only one seed. To speed up the divorce, help the dwarfs to determine quickly the Snow White's part.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains an integer <i>N</i> that represents the number of similar items that the dwarfs want to divide <nobr>(1 &le; <i>N</i> &le; 10<SUP>50</sup>)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of items that pass into the possession of the Snow White.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">123456123456
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1244||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's remember one old joke:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Once a gentleman said to another gentleman:<BR>
&mdash; What if we play cards?<BR>
&mdash; You know, I haven't played cards for ten years&hellip;<BR>
&mdash; And I haven't played for fifteen years&hellip;<BR>
So, little by little, they decided to resurrect their youth. The first gentleman asked a servant to bring a pack of cards, and before starting playing out weighed in his hand the pack.<BR>
&mdash; It seems to me, one card is missing from the pack&hellip; &mdash; he said and gave the pack to the other gentleman.<BR>
&mdash; Yes, the nine of spades, &mdash; the man agreed.</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An incomplete pack of cards is given. The program should determine which cards are missing.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a positive integer, which is the weight in milligrams of the given incomplete pack. The second line contains an integer <I>N</I>, 2 &le; <I>N</I> &le; 100 &mdash; the number of cards in the complete pack. In the next <I>N</I> lines there are integers from 1 to 1000, which are the weights of the cards in milligrams.
It's guaranteed that the total weight of all cards in the complete pack is strictly greater than the weight of the incomplete pack.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no solution, then output the single number 0. If there are more than one solutions, then you should write &minus;1. Finally, if it is possible to determine unambiguously which cards are missing in the incomplete pack as compared to the complete one, then output the numbers of the missing cards separated with a space in ascending order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">270
4
100
110
170
200
</PRE></TD><TD><PRE CLASS="intable">2 4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">270
4
100
110
160
170
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">270
4
100
120
160
180
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1245||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Artist Ivanov (not the famous Ivanov who painted "Christ's apparition to people", but one of the many namesakes) once managed to rent inexpensively an excellent studio. Alas, as he soon discovered, the inexpensiveness was caused by objective reasons. A murder happened long ago in the house where he rented the room, and now the ghost living in the house each night renews blood spots on the walls of all the rooms. Ivanov's studio did not escape this damnation.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nevertheless, being a creative person, Ivanov quickly found a simple solution to the problem. He decided to paint one or two pictures and hang them on the (single) wall where the spots appear each night so that the spots would be covered by the pictures. Of course, he does not want to spend too much time doing this work. That is why he plans to use not more than two pictures and wants the total square of the pictures to be minimal. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All the blood spots are circles. Each picture has a rectangular form with sides parallel to the axes, and the minimally possible size of a picture in each of the dimensions is 100 millimeters. If it is necessary to paint two pictures, then they should be hanged to the wall without overlaying. Each spot must be covered by exactly one picture.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of the spots <I>N</I>, 0 &lt; <I>N</I> &le; 1000. Each of the next <I>N</I> lines contains the description of the corresponding spot. A spot is described by three positive integers; they are the radius of the spot and the Cartesian coordinates of the center of the spot. Everything is measured in millimeters and all these numbers do not exceed 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal total square (in square millimeters) of the pictures (not more than two) necessary to cover all the spots.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
50 50 50
50 250 50
10 150 250</PRE></TD><TD><PRE CLASS="intable">40000</PRE></TD></TR></TABLE>
______________________________________________________
1246||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A dog is tethered to a pole with a rope. The pole is located inside a fenced polygon (not necessarily convex) with nonzero area. The fence has no self-crosses. The Olympian runs along the fence bypassing the vertices of the polygon in a certain order which is not broken during the jog. A dog pursues him inside the fenced territory and barks. Your program is to determine how (clockwise or counter-clockwise) the rope will wind after several rounds of the Olympian's jog.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a number <I>N</i> that is the number of the polygon vertices. It’s known that 3&nbsp;&le;&nbsp;<I>N</i>&nbsp;&le;&nbsp;200000. The next <I>N</i> lines consist of the vertices plane coordinates, given in an order of Olympian’s dog. The coordinates are a pair of integers separated with a space. The absolute value of each coordinate doesn’t exceed 50000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output "cw", if the rope is winded in a clockwise order and "ccw" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
0 1
1 1
1 0</PRE></TD><TD><PRE CLASS="intable">cw</PRE></TD></TR></TABLE>
______________________________________________________
1247||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a sequence of integer numbers <i>A</i><sub>1</sub>, <i>A</i><sub>2</sub>, …, <i>A</i><sub><i>S</i></sub>, and a positive integer <i>N</i>. It's known that all elements of the sequence {<i>A</i><sub><i>i</i></sub>} satisfy the restriction 0&nbsp;&le;&nbsp;<i>A<sub>i</sub></i>&nbsp;&le;&nbsp;100. Moreover, it's known that the sum of all elements of the sequence is equal to <i>S</i>&nbsp;+&nbsp;<i>N</i>. You are to write a program that given a sequence {<i>A</i><sub><i>i</i></sub>} and a number <i>N</i> will answer the question: is it true that for all 1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<i>j</i>&nbsp;&le;&nbsp;<i>S</i> the following inequality holds:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>A</i><sub><i>i</i></sub> + <i>A</i><sub><i>i</i>+1</sub> + … +  <i>A</i><sub><i>j</i></sub> &le; (<i>j</i> – <i>i</i> + 1) + <i>N</i> ?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two separated with a space positive numbers <i>S</i> and <i>N</i> that do not exceed 30000. Then follow <i>S</i> lines with one number in a line that are elements of the sequence {<i>A</i><sub><i>i</i></sub>}.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output "YES", if the mentioned above inequality holds for all the values of the parameters <i>i</i> and <i>j</i>, and "NO" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
2
3
0
2
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 5
1
0 
5
3
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1248||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a sequence of real numbers. And you ought to sum them all. And don’t forget to output the result.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a number of the sequence elements <i>N</i> (<i>N</i> &le; 1000). The next <i>N</i> lines contain the elements in exponential notation with 19 significant digits in mantissa. All the numbers are contained in a range from 10<SUP>&minus;100</sup> to 10<SUP>100</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the only number which is the sum of all the input numbers. This number is to be presented in an exponential notation with 19 correct digits in mantissa.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1.5e3
1.5e-3</PRE></TD><TD><PRE CLASS="intable">1.500001500000000000e3</PRE></TD></TR></TABLE>
______________________________________________________
1249||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Aerophotography data provide a bitmap picture of a hard-to-reach region. According to the suggestions of scientists, this region is a cemetery of an extinct civilization. Indeed, the picture, having been converted to a binary form, shows distinctly visible areas, dark (marked with symbols 1) and light (marked with 0). It seems that the dark areas are tombstones. It's easy to either confirm or reject the hypothesis since the race that lived in the region knew astronomy, so tombstones were always oriented along the Earth's parallels and meridians. That is why the dark areas in the picture should have the form of rectangles with the sides parallel to the axes. If it is so, then we indeed have a picture of a cemetery of an extinct race. Otherwise, new hypotheses should be suggested.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two integers <I>N</I> and <I>M</I>, which are the dimensions of the picture provided by the aerophotography. Each of the next <I>N</I> lines contains <I>M</I> zeros or ones separated with a space. The numbers <I>N</I> and <I>М</I> do not exceed 3000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output "Yes" if all connected dark areas in the picture are rectangles and "No" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
0 1
1 1
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3
0 0 1
1 1 0
1 1 0
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR></TABLE>
______________________________________________________
1250||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is Archipelago in the middle of a shoreless ocean. An ancient tribe of cannibals lives there. Shamans of this race have been communicating with gods and admonishing people for ages. They could generate a rain during a drought and clear   the sky in a raining season. A long time ago the first shaman of the tribe jumped into one of the seas and drowned while being in a sacred trance. Since then all the land inside this sea is regarded as sacred. According to an ancient law, all shamans must be buried on a sacred land. However, souls of dead shamans cannot get on with each other, so each shaman must be buried on a separate island. An old prophecy says that if two shamans are buried on the same land, then a dreadful time will come and the tribe will perish.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">How many shamans will the tribe outlive? This problem bothered all the chiefs of the tribe who were coming into power. So one of the chiefs ordered to compile a map of Archipelago. The cannibals toiled for a whole year and coped with the task. But the map was too large and complicated to count all the sacred islands. So the tribe's shaman appealed to gods and asked them to help with counting the islands. And the tribe was blessed with a Programmer and a Computer, which came down to earth in a cloud of light and fire. Yes, you are this Programmer, and you are destined to live with these cannibals until you have counted the islands; then you'll be transferred back home. Remember that there may be seas inside islands, and islands inside those seas.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains four integers <B><I>W</i></b>, <B><I>H</i></b>, <B><I>X</i></b> and <B><I>Y</i></b>, separated with one or several spaces. 1 &le; <B><I>W</i></b>, <B><I>H</i></b> &le; 500 are respectively the width and the height of the map. 1 &le; <B><I>X</i></b> &le; <B><I>W</i></b> and 1 &le; <B><I>Y</i></b> &le; <B><I>H</i></b> are the coordinates of the point where the first shaman drowned. The next <B><I>H</i></b> lines contain description of the map. Each line contains <B><I>W</i></b> symbols describing correspondent fragments of the map. Symbol "." stands for a sea fragment and symbol "#" stands for a land fragment. Two fragments belong to the same sea if they are adjacent horizontally, vertically, or diagonally. Two fragments belong to the same island if they are adjacent horizontally or vertically (but not diagonally). Land fragments that are adjacent to the map's border are not considered as islands. Coordinates are counted from the left upper corner.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain a single integer, which is the number of the islands inside the sacred sea.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 7 1 1
........#
.#######.
.#.....#.
.#.#.#.#.
.#.....#.
.#######.
#........
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9 7 3 3
........#
.#######.
.#.....#.
.#.#.#.#.
.#.....#.
.#######.
#........
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1251||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a tradition at the USU championships to call the most hard-to-solve problems coffins. But to distribute coffins is also a very difficult problem. Consider a cemetery with places arranged in the form of a rectangle having <I>N</I> rows and <I>M</I> columns (1 &le; <I>N</I>, <I>M</I> &le; 100). At the initial moment of time (t = 0) the cemetery is empty. Incoming coffins are put in the row with empty places that has a minimal number; if there are several empty spaces in this row, then the column with the minimal number is chosen. From time to time the cemetery's clients are visited by their living friends and relatives; it is considered to be a pleasure for the clients. But it's only a headache for the cemetery manager, since because of these visitors he cannot give to new clients places that have been used. Happily, visitors are not perfect, so after some time they forget where their friends have been lying. That is why if a client was not visited for more than successive 1000 days, then on the 1001st day the manager regards the grave as empty. However, relatives of the adjacent clients (of those for whom the differences in the numbers of rows and columns are not greater than 1) may notice strange changes, so the manager puts a new client on a used place only if all the neighboring graves have not been visited for the last 100 days (this is a period of time sufficient for a neighbor's friends to forget who was lying next to him or her). If, notwithstanding all the efforts of the manager, there is no place where he can put a new client, then the client is sent to a crematorium.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We have a complete list of arriving clients and coming visitors for some period starting from the foundation of the cemetery. Basing on this information, you should determine how many clients have been sent to a crematorium.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains numbers <I>N</I> and <I>M</I> that describe the size of the cemetery. Each of the next lines describes an event. A description starts with the time of the event measured in days from the foundation of the cemetery. Then the type of the event is given: either <I>d</I> (arrival of a new client) or <I>v</I> (a visit of friends or relatives) followed with the number of the client who has visitors. The events are ordered according to their time. The input contains not more than 15000 events, and not more than 10000 of them describe arrivals of new clients.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program should find the number of clients that have been sent to a crematorium.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
1 d
1 d
1 d
1 d
300 d
500 v 2
1001 d
1002 d
1002 d
1003 v 3
1003 d
1003 d
1236 v 2
2032 v 2
2033 d</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL>
<LI>Each tomb has 2 to 8 neighbors.
<LI>If a client was buried on day <i>T</i> then the tomb may be dug over on day <i>T</i>+1001 and may not be dug over on day <i>T</i>+1000.
<LI>If a tomb was visited on day <i>T</i> then its neighbors may be dug over on day <i>T</i>+101 and may not be dug over on day <i>T</i>+100.
<LI>A tomb is dug over as soon as there is an opportunity (see items 2 and 3).
<LI>During a funeral relatives notice nothing including the neighbors.
<LI>The clients are numbered in the the order that they arrive (including those who was sent to crematorium).
<LI>If there is already no tomb or the client has been sent to the crematorium immediately or there is no client with the required number then a visit affects nothing.
<LI>The next in turn client may be always burried in an empty tomb inspite of the neighbor tombs visits (the neighbors' relatives wouldn't be surprised having found out that the adjacent empty tomb is already occupied).
</OL></DIV></DIV>
______________________________________________________
1252||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is time to throw stones and there is time to sort stones…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An old desolate cemetery is a long dismal row of nameless tombstones There are <I>N</i> tombstones of various shapes. The weights of all the stones are different. People have decided to make the cemetery look more presentable, sorting the tombstone according to their weight. The local custom allows to transpose stones if there are exactly <I>K</i> other stones between them.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains an integer <I>N</i> (1 &le; <I>N</i> &le; 130000). Each of the next <I>N</i> lines contains an integer <I>X</i>, the weight of a stone in grams (1 &le; <I>X</i> &le; 130000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the single integer — the maximal value of <I>K</i> (0 &le; <I>K</i> &lt; <I>N</i>), that makes possible the sorting of the stones according to their weights.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
30
21
56
40
17
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1253||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You know that many necrologues even the most heartfelt are very similar. Our partners from the ACM Company (Advanced Cemetery Management), which is a sponsor of today's thematic problem set, decided to disclose some secrets of skill. As soon as we got into the workshop of the word-painters we found out that:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL>
<LI>there are <I>N</I> (1 &le; <I>N</I> &le; 9) sample necrologues;</LI>
<LI>each sample necrologue has not more than 1000 symbols (capital and small Latin letters, digits, punctuation marks, spaces and carriage return marks);</LI>
<LI>each sample may contain not more than 10 references to other samples (the reference is marked by *, which is followed by a number of a sample that is referred to; the *-mark is used in the samples in no other way but as a reference mark).</LI>
</OL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A reference may be <I>activated</i> at a client's pleasure: the sequence *<I>M</I> is substituted with the sample necrologue number <I>M</I> (with all its references).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This system worked properly up to the moment that a very rich client entered the workshop. He wanted to add a stone to his mother's-in-law cairn and wished a necrologue according to the sample number 1 with <I>all</I> the references activated (including the ones that can appear after activating the references in the first sample, and so on).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's necessary to write a program in order to understand if it's possible to fulfill the wishes of the client and what will appear in this necrologue.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a number <I>N</I>, an amount of the necrologues samples. Than follow the samples texts. Each samples starts from a new line and ends with the # symbol.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider the necrologue forming procedure that starts from the first sample, activates all the references than activates all the references in the result of the previous step and so on ad infinitum. If such a procedure leads to the text not longer than 10<SUP>6</SUP> symbols (spaces and line feeds are considered as symbols) you should output the necrologue text. You should output # otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
She w*7s *7 *2 wom*7n. 
*3#
wonderful#
Everyone loved her *5.
We will miss her *5.#
Some text *6#
very much#
Another text *4#
a#</PRE></TD><TD><PRE CLASS="intable">She was a wonderful woman.
Everyone loved her very much.
We will miss her very much.</PRE></TD></TR></TABLE>
______________________________________________________
1254||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a city with a grid of square blocks of the <I>N</I> &times; <I>M</I> size. There are buildings in some blocks, some blocks are blank. John is in the block (<I>x<SUB>0</I></SUB>, <I>y<SUB>0</SUB></I>). He may move from a block to an adjacent one in horizontal, vertical or diagonal direction with velocity <I>V</I>. He is told over the radio the list of points where bombs are located. John is to disarm them in the same order that they follow in the list or he will die hard with a vengeance. If he can't reach some bomb he moves to the next one. All the bombs are located outside the buildings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">What minimal time will John need to finish his job if he disarms a bomb immediately?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains numbers <I>N</I>, <I>M</I>, <I>K</I> (an amount of bombs) and <I>V</I>, separated with a space, satisfying the restrictions 1 &le; <I>N</I>, <I>M</I> &le; 75; 1 &le; <I>K</I> &le; 1000; 0.01 &lt; <I>V</I> &lt; 10.00. Then a city map follows: <I>M</I> lines of <I>N</I> symbols. The symbol '.' means a blank block, '#' stands for a building. Then follow the line that contains coordinates (<I>x</I><SUB>0</SUB>, <I>y</I><SUB>0</SUB>). The input is ended by <I>K</I> lines with bombs coordinates in that very order that John passed them.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the single number which is the minimal time necessary to do the job. The time should be printed with two digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3 3 1.23
....
##..
....
1 1
1 3
4 1
4 3
</PRE></TD><TD><PRE CLASS="intable">8.66
</PRE></TD></TR></TABLE>
______________________________________________________
1255||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a custom among the Ural Mafiosi — a big Mafioso’s coffin is to be carried by all his subordinates. The length of the coffin (in meters) equals to the number of the Mafioso’s subordinates in order not to let the carriers to encumber each other. As it happens, according to the ancient custom the width of a coffin is equal to 1 meter. So, the length of a coffin shows a dead man’s authority. By the way, the Ural Mafiosi are very scrupulous in matters of authority and will not bear neighborhood with less authoritative Mafioso. So, at one cemetery it’s possible to bury Mafiosi with equal authority. According to the Mafiosi’s custom a cemetery must be square. A cemetery length must be an integer number of meters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to count how many Mafiosi can be buried on the cemetery of the given size. Coffins must be parallel to cemetery borders, coffins mustn’t overlap each other and get off the cemetery.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Contains two numbers — a length of the cemetery <I>N</i> (1 &lt; <I>N</i> &lt; 10000) and a length of a coffin <I>K</i> (1 &lt; <I>K</i> &lt; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single integer number — the most amount of the coffins of the size 1&times;<I>K</i> that may be buried at the cemetery of the size <I>N</i>&times;<i>N</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1256||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In some black-black wood at the black-black cemetery there was a golden gravestone. This gravestone was guarded by two black-black dogs. Each dog sits enchained near a black-black pole and nearby in the wood there is a black-black guard’s house. Every morning the guard leaves the house to bring the dogs plates with food. He places the plates so that the dogs may eat remaining enchained to their poles.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Compute the shortest way that the guard is to walk in order to feed both dogs (the guard may easily carry food to both dogs at the same time and may feed them in an arbitrary order).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three numbers: the distance in meters from the guard’s house to the first pole <I>R</i><SUB>1</sub>, from the guard’s house to the second pole <I>R</i><SUB>2</sub> and the distance between the poles <I>R</i><SUB>3</sub>. The second line consists of one integer which is the length of each dog’s chain <I>R</i><SUB>4</sub> (the chains of the dogs are identical). The numbers <I>R<SUB>i</sub></i> (<I>i</i>&nbsp;= 1, 2, 3)  satisfy the restriction 0 &le; <I>R<SUB>i</sub></i> &le; 10000; 1 &le; <I>R</i><SUB>4</sub> &le; 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the single number which is the length of the shortest guard’s way in meters within three digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1000 2000 1000
250
</PRE></TD><TD><PRE CLASS="intable">3500.000
</PRE></TD></TR></TABLE>
______________________________________________________
1257||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmers are strange people. They don’t want to rejoice in life's pleasures, to read books, to listen to the music, to write letters to each other. The code, debug, rebuild something all the time. So our acquaintance programmer Vasechkin is not pleased with the existing software. This time he rages against the text editor. This editor can’t carry words over to the next line. What can a man do? Artemy Sidorovich, seemingly, is to teach this editor do this.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>N</i> (0 &le; <i>N</i> &le; 100) &mdash; an amount of hyphenation rules. Then there are <i>N</i> lines with the rules description. Each rule looks like “<i>string</i><SUB>1</sub>-<i>string</i><SUB>2</sub>”, where <i>string</i><SUB>1</sub> and <i>string</i><SUB>2</sub> are not empty and contain only small and capital Latin letters. Summary length of <i>string</i><SUB>1</sub> and <i>string</i><SUB>2</sub> does not exceed 40 symbols. This record means that if a word is ended with a substring <i>string</i><SUB>1</sub><i>string</i><SUB>2</sub>, then <i>string</i><SUB>2</sub> may be carried to the next line and after <i>string</i><SUB>1</sub> appears a hyphen-mark ‘-‘. Then there is a text typed by Artemy Sidorovich. A <I>word</i> is a sequence of small and capital Latin letters. 
Any other symbols are word separators. Each line is not longer than 250 symbols. The text consists of not more than 450 lines. Each word is not longer than 40 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a text formatted according to the hyphenation rules with respect to the fact that the paper width is 40 symbols. Each output line can’t be wider than 40 symbols (including the hyphen ‘-‘ and excluding the line feed). If there are several rules that can be used the the word is to be carried to the next line according to the rule that provides the minimal length of the carried part of the word. If a word can’t be carried to the next line so that the length of the line wouldn’t exceed 40 the word should be carried to the next line wholly. The hyphenation rules are not case sensitive (the rule “m-Ing” can be used in the word “SwImMiNg”). The existing line feeds, spaces and stops must be saved.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">12
un-usual
for-ced
re-al
sum-mer
N-ED
home-work
sec-ret
ho-lidays
Wi-zard
th-Er
L-so
Holi-days
Harry Potter was a highly unusual boy in many ways. 
For one thing, he hated the summer holidays more than any 
other time of year. For another, he really 
 wanted to do his homework but was forced to do it in 
secret, in the dead of night. And he also happened 
to be a wizard.
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Harry Potter was a highly unusual boy in
 many ways. 
For one thing, he hated the summer holi-
days more than any 
other time of year. For another, he 
really 
 wanted to do his homework but was for-
ced to do it in 
secret, in the dead of night. And he al-
so happened 
to be a wizard.
</PRE></TD></TR></TABLE>
______________________________________________________
1258||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the lunch-break the programmer Vasechkin likes to hack around his rectangular room. His way starts at his workplace and ends at the point where the thought to continue the work comes to his mind. We know that when Vasechkin runs against a wall he bounds according to the law “the angle of incidence equals to the angle of reflection”. Besides being a very straight person Vasechkin moves from wall to wall in the direct line segment. The baleful front office decided to find out how much time Vasechkin wastes during his promenades. It’s very easy to find out the time by dividing the length of the way that Vasechkin has passed over his average speed (that was measured by the front office beforehand). So it’s necessary to find out the way length! And since Vasechkin’s bumps are well-heard it’s sufficient to know the order of Vasechin’s collisions with walls. May be there is a more simple way to calculate the time wasted by the programmer but he front office believes that its solution of the problem is the most correct.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of two integers <i>W</i> and <i>D</i> — they are the width and the depth of Vasechkin’s room in meters (2 &le; <i>W</i>, <i>D</i> &le; 1000). The second line contains the initial Vasechkin’s position coordinates (0 &lt; <i>x</i><SUB>0</SUB> &lt; <i>W</i>; 0 &lt; <i>y</i><SUB>0</SUB> &lt; <i>D</i>), measuring from the front-left corner of the room. The third line — the final position coordinates (0 &lt; <i>x</i><SUB>1</SUB> &lt; <i>W</i>; 0 &lt; <i>y</i><SUB>1</SUB> &lt; <i>D</i>), measuring from the front-left corner of the room. All coordinates are integers. The fourth line contains the sequence of letters L, R, F, B, denoting the sequential Vasechkin collisions with walls — the left, right, front and back one respectively. An amount of collisions doesn’t exceed 1000. The programmer never collides a corner of his room and his initial and final positions don’t lie on walls.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the length of Vasechkin’s way from the initial point to the final one rounded to four decimals after the point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 20
9 1
1 19
FLRLRB</PRE></TD><TD><PRE CLASS="intable">52.8015</PRE></TD></TR></TABLE>
______________________________________________________
1259||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The people think about this problem for several centuries. The programmer Vasechkin’s front office decided to find it out. But the front office is the front office, so the task to find out the answer to the question "How to become a star?" was given to its subordinate Vasechkin.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s often happens that account’s and programmer’s notion of the problem much differ. So this time it came off not exactly how the front office has thought. Vasechkin formalized the problem as follows.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Definition.</b> A <I>star</i> is the closed broken line built by the final amount of steps of the following algorithm:<BR>
<OL>
<LI>Fix and arbitrary angle &alpha; (0 &lt; &alpha; &lt; &pi;).</li>
<LI>The first link is (0, 0) — (1, 0).</li>
<LI>The second link is the resultant of the turn by the angle &alpha; counter-clockwise with respect to the point (1, 0) of the first one.</li>
<LI>The (<i>i</i> + 2)-nd link is the resultant of the turn by the angle &alpha; counter-clockwise of the (<i>i</i> + 1)-st one with respect to the free end (the opposite to the one that is connected to the <i>i</i>-th link) of the (<i>i</i> + 1)-st link.</li>
<LI>The algorithm stops immediately when the broken line is closed.</li>
</ol></DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Definition.</b> A number of the vertices of the star is the number of the broken line’s links.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only integer <i>N</i> (3 &le; <i>N</i> &le; 100000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output an amount of different stars with <i>N</i> vertices.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1260||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">If two people were born one after another with one second difference and one of them is a child,<br> then the other one is a child too. We get by induction that all the people are children.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone knows that the mathematical department of the Ural State University is a big family of <i>N</i> persons, 1, 2, 3, &hellip;, <i>N</i> years old respectively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once the dean of the department ordered a photo if his big family. There were to be present all the students of the department arranged in one row. At first the dean wanted to arrange them by their age starting from the youngest student, but than he decided that it would look unnatural. Than he advised to arrange the students as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL>
<LI>The 1 year old student is to sit at the left end of the row.</li>
<LI>The difference in ages of every two neighbors mustn’t exceed 2 years.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The dean decided that thereby the students would seem look as they were arranged by their ages (one can hardly see the difference in ages of 25 and 27 years old people). There exist several arrangements satisfying to the requirements. Photographer didn’t want to thwart dean’s desire and made the photos of all the possible mathematical department students’ arrangements.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is the integer number <i>N</i>, 1 &le; <i>N</i> &le; 55.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the number of photos made by the photographer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If <i>N</i> = 4 then there are following possible arrangements: (1,2,3,4), (1,2,4,3), (1,3,2,4) and (1,3,4,2).</DIV></DIV>
______________________________________________________
1261||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The favorite resting place of the Ural programmers is Threenland island. There is only one tribulation: dollars and euro don’t go about here. So the tourists are to exchange their money into threets (the currency of Threenland). There go about 1 threet, 3 threets, 9 threets, 27 threets, …, 3<SUP><i>k</i></sup> threets, … Once programmer Vasechkin, after the <i>N</i>-threets bill was given to him found out, that he’d got one paper of each denomination. Waiters in Threenland have a custom to keep the change. Waiters like to get the sum of money that can be presented by a set of papers in which paper of each denomination appears not more than once. Otherwise their feelings are hurt. They have a peeve on a client f they don’t get tips at all. Help please Vasechkin to pay for the dinner and not to hurt the waiter.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">consists of an integer <i>N</i>. 1 &le; <i>N</i> &le; 10<sup>7</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two integers separated with a space – that is the sum that Vasechkin is to pay and an amount of tips. If there are several solutions choose any of them. If there is no solution output 0. Remember that Ural programmers are not rich, so Vasechkin can’t pay more than 4294967291 threets.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5</PRE></TD><TD><PRE CLASS="intable">9 4</PRE></TD></TR></TABLE>
______________________________________________________
1262||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We can’t say that all the programmers are absent-minded people but it is usual to some of them… Once Artemy Sidorovich tested his program. Particularly it was to be able to define a day of the week by the date. Artemy Sidorovich inputted "October 11, 2003" and got the answer "Saturday". "Aha!"&nbsp;&mdash; thought Artmy Sidorovich and started to search for a mistake (the calendar that was hung in his room said that October 11th, 2003 is Monday).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After an hour Artemy Sidorovich glances up and saw big digits in the calendar: 1999. Swearing under his breath and promising to through away the old calendar he looked at the clock. The hour hand was at the mark IIII. The day was almost finished.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; It’s interesting,&nbsp;&mdash; thought Artermy Sidorovich,&nbsp;&mdash; I’ve seen many times that the number 4 is written down by the Roman numerals as IV. It turns out that a decimal number can’t be represented by the Roman number unambiguously. He looked again at the calendar and thought so:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Let the numbers 1, 5, 10, 50, 100, 500, 1000 be denoted by the Roman numerals I, V, X, L, C, D, M. Then the number 1999 may be represented as MDCCCCLXXXXVIIII or simply MIM. Or may be MCMXCIX. It’s evident that the record MIM is the shortest. But which one is correct?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to adjust differences Artemy Sidorovich decided:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We'll call a pseoudo-roman number the sequence of numerals: <i>A</i><SUB>1</SUB><i>A</i><SUB>2</SUB>…<i>A<SUB>n</SUB></i>, where:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL>
<LI>Every numeral denotes on of the numbers 1, 5, 10, 50, 100, 500, 1000, … The different digits correspond to the different numbers. Let’s denote the number according to the numeral <i>A</i> as [<i>A</i>].</li>
<LI>There may be not more than 3 identical numerals one after another, if the numerals denote a power of 10 and not more than 2 identical numerals otherwise.</li>
<LI>In the number <i>A</i><SUB>1</SUB><i>A</i><SUB>2</SUB>…<i>A<SUB>n</SUB></i> the following two statements are correct:</li>
<UL>
<LI>[<i>A<SUB>i</SUB></i>]&nbsp;&ge;&nbsp;[<i>A</i><SUB><i>i</i>+1</SUB>] or</li>
<LI>([<i>A<SUB>i</SUB></i>]&nbsp;&lt;&nbsp;[<i>A</i><SUB><i>i</i>+1</SUB>]&nbsp;&le;&nbsp;10[<i>A<SUB>i</SUB></i>] and [<i>A<SUB>i</SUB></i>]&nbsp;=&nbsp;10<SUP><i>k</i></SUP>), where <i>i</i>&nbsp;&lt;&nbsp;<i>n</i>.
</ul>
<LI>Before a numeral there may not be more than one lower numeral.</li>
<LI>[<i>A<SUB>i</SUB></i>]&nbsp;&ge;&nbsp;[<i>A</i><SUB><i>i</i>+1</SUB>]&nbsp;&ge;&nbsp;[<i>A</i><SUB><i>i</i>+2</SUB>], or [<i>A</i><SUB><i>i</i>+2</SUB>]&nbsp;&lt;&nbsp;[<i>A<SUB>i</SUB></i>]&nbsp;&lt;&nbsp;[<i>A</i><SUB><i>i</i>+1</SUB>], or [<i>A</i><SUB><i>i</i>+1</SUB>]&nbsp;&lt;&nbsp;[<i>A</i><SUB><i>i</i>+2</SUB>]&nbsp;&le;&nbsp;[<i>A<SUB>i</SUB></i>], where <i>i</i>&nbsp;&lt;&nbsp;<i>n</i>&nbsp;&minus;&nbsp;1</li>
<LI><i>A</i><SUB>1</SUB>&nbsp;=&nbsp;[<i>A</i><SUB>1</SUB>].<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>A</i><SUB>1</SUB><i>A</i><SUB>2</SUB>…<i>A<SUB>n</SUB></i>&nbsp;=&nbsp;<i>A</i><SUB>2</SUB>…<i>A<SUB>n</SUB></i>&nbsp;&minus;&nbsp;[<i>A</i><SUB>1</SUB>], if [<i>A</i><SUB>1</SUB>]&nbsp;&lt;&nbsp;[<i>A</i><SUB>2</SUB>].<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>A</i><SUB>1</SUB><i>A</i><SUB>2</SUB>…<i>A<SUB>n</i></SUB>&nbsp;=&nbsp;<i>A</i><SUB>2</SUB>…<i>A<SUB>n</SUB></i>&nbsp;+&nbsp;[<i>A</i><SUB>1</SUB>], if [<i>A</i><SUB>1</SUB>]&nbsp;&gt;&nbsp;[<i>A</i><SUB>2</SUB>].</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then the number 4 will be written down as IV, and not as IIII (according to the rule 2). The number 1999 will be written down as MCMXCIX. It’s not the shortest way but every number is represented unambiguously.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a decimal integer number <i>N</i>, 1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<SUP>2003</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the integer <i>K</i>&nbsp;&mdash; that is an amount of numerals in pseudo-roman notation of the number <i>N</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1939</PRE></TD><TD><PRE CLASS="intable">8</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">1939 = MCMXXXIX</DIV></DIV>
______________________________________________________
1263||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next in turn elections are to come soon. All the fences are postered with leaflets and the mail boxes are full of throwaways. Cheeky guys are looking at us from TV’s and promise to make our life better… And programmer Vasechkin is knee-deep in work. He is to write a program that would calculate the results of voting.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number of candidates <i>N</i> (1 &le; <i>N</i> &le; 10000) and a number of electors <i>M</i> (1 &le; <i>M</i> &le; 10000). Then <i>M</i> lines follow, each one contains a number of candidate that the elector voted for. The candidates are numbered with integers from 1 to <i>N</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> lines. The <i>i</i>-th line should contain the percent of electors that voted for the <i>i</i>-th candidate (to within 2 decimals).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 6
1
2
3
2
1
1</PRE></TD><TD><PRE CLASS="intable">50.00%
33.33%
16.67%</PRE></TD></TR></TABLE>
______________________________________________________
1264||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After a success of the previous Vasechkin’s program that allowed to calculate the results of the elections in cause of two days Artemy Sidorovich was placed at the head of the department. At the moment Artemy Sidorovich prepares a task for his subordinate — programmer Petechkin. The task is to write a very useful function that would ease the life of all the department programmers. For each integer from 0 to <i>M</i> the function would calculate how many times this number appears in the <i>N</i>-element array. Artemy Sidorovich deems that the function should work as follows (the sample code for <i>N</i> = 3, <i>M</i> = 1):</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table cellpadding="3" cellspacing="0" border="1" width="100%">
<col width="50%">
<col width="50%">
<tr>
<th>C</th>
<th>Pascal</th>
</tr>
<tr>
<td>
<pre style="margin:0px;">if (arr[0]==0) ++count[0];
if (arr[0]==1) ++count[1];
if (arr[1]==0) ++count[0];
if (arr[1]==1) ++count[1];
if (arr[2]==0) ++count[0];
if (arr[2]==1) ++count[1];
</pre></td>
<td>
<pre style="margin:0px;">if arr[0]=0 then count[0] := count[0] + 1;
if arr[0]=1 then count[1] := count[1] + 1;
if arr[1]=0 then count[0] := count[0] + 1;
if arr[1]=1 then count[1] := count[1] + 1;
if arr[2]=0 then count[0] := count[0] + 1;
if arr[2]=1 then count[1] := count[1] + 1;
</pre></td>
</tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Artemy Sidorovich wants to estimate the time that Petechkin will need to execute the task. We know that Petechkin needs one second to write a line of the code (he’s fast, isn’t he?). Artemy Sidorovich doesn’t know exactly bounds for <i>M</i> and <i>N</i>. Your task is to write program that would calculate a number of seconds that Petechkin will write the code.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains integers <i>N</i> (0 &le; <i>N</i> &le; 40000) and <i>M</i> (0 &le; <i>M</i> &le; 40000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output an amount of seconds that Petechkin needs to write the program.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 1</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE>
______________________________________________________
1265||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ri-i-i-i-ing… Ri-i-i-i-ing…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; W-what the hell!!!??? &mdash; cursed major Pronin, hardly opening his eyes and looking at the watch on the bed-side table. &mdash; Who wants me on Sunday at 5 a.m.?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Major took his pistol, pointed it at the telephone and squinted his left eye. The image blurred and he couldn’t aim. The yesterday party told on him.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ri-i-i-i-ing… Ri-i-i-i-ing… &mdash; crackled the telephone-set busily.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Had overcome a great temptation, Pronin put his pistol away, reached the telephone and and took a receiver. “Whoever it is, he won’t be alive by the next morning,” &mdash; he thought at that minute. Major imagined the caller lying in the mass of blood and himself, standing next to the corpse with the fuming pistol with a smile on his face.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Major Pronin? &mdash; he heard from the receiver.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Had listened a familiar voice, major stood at attention.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Yes sir! Mister general, sir!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; You have an assignment. A car is waiting for you near your doorway. See you in the office in 20 minutes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The line disconnected.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pronin entered the general’s office after 19 minutes and 50 seconds after the call.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; A very important investigation, &mdash; said the general after a short salutation. &mdash; Possibly, a murder. Yesterday’s night a famous banker Kozlov A. E. knocked down a pedestrian. It seemed an ordinary case but the victim appeared to be his opponent at the legal process that our… “client” has won. The detained suspect claims that he didn’t notice the pedestrian in the rear-view mirror while driving out of his garage. He lays stress that it was an accident. We’d better verify it. Here are the documents. You are to give a report to me personally immediately after your investigation ends. As you know our Kozlov A. E. is a mayor contender. There mustn’t be a mistake!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Yes, sir! &mdash; bawled the major. &mdash; May I go?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Go!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pronin looked through the on-site review protocol. Meticulous officers of the criminal investigation department worked out a very exact description of the situation. In particular, he found the metering results of the car mirror and the location of the body.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Stop! &mdash; said the major. I can determine with the help of this data if our banker lies or not saying that he didn’t see the pedestrian!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He took all the data and left to the analytical department to his acquainted programmer. He reached the door and&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Knock, knock, Contestant!<BR>
Major has you.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are 8 real numbers within 6 digits after a decimal point, separated with one or several spaces and/or linefeeds &mdash; <nobr>(&minus;1000 &le; <i>x</i><SUB>1</sub>, <i>y</i><SUB>1</sub>, <i>x</i><SUB>2</sub>, <i>y</i><SUB>2</sub>, <i>x</i><SUB>m1</sub>, <i>y</i><SUB>m1</sub>, <i>x</i><SUB>m2</sub>, <i>y</i><SUB>m2</sub> &le; 1000)</nobr>. Those are the banker’s eyes coordinates (major calculated them by the deductive method according to the situation description worked out by the criminal investigation department officers), the victim body  at the moment of blow (calculated the same way) and both ends of the mirror coordinates, respectively. It’s guaranteed that that the points (<i>x</i><SUB>1</sub>, <i>y</i><SUB>1</sub>) and (<i>x</i><SUB>2</sub>, <i>y</i><SUB>2</sub>) don’t lie on one straight line, passing through the points (<i>x</i><SUB>m1</sub>, <i>y</i><SUB>m1</sub>) and (<i>x</i><SUB>m2</sub>, <i>y</i><SUB>m2</sub>). It’s also guaranteed that the points (<i>x</i><SUB>m1</sub>, <i>y</i><SUB>m1</sub>) and (<i>x</i><SUB>m2</sub>, <i>y</i><SUB>m2</sub>) are not the same.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output "VISIBLE" , if one can see the point (x<SUB>2</sub>, y<SUB>2</sub>) from the point (x1, y1) in the rear-view mirror with the ends coordinates (x<SUB>m1</sub>, y<SUB>m1</sub>) and (x<sub>m2</sub>, y<SUB>m2</sub>), or "INVISIBLE", otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 0 0 -1 0 0 1 1
</PRE></TD><TD><PRE CLASS="intable">VISIBLE
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0.000001   0   
0   0.000001
-0.000001   -0.000001   
0.000001   0.000001
</PRE></TD><TD><PRE CLASS="intable">INVISIBLE
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We must say that the rear-view mirror in the banker’s car is double-sided but it reflects the light as all the mirrors (the angle of incidence equals to the angle of reflection).</DIV></DIV>
______________________________________________________
1266||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya’s dad, as you know, is good in math but the son instead of following his father’s steps, studies physics at school. Once Vasya asked his father to help him to solve a simple problem — to find out the resistance of the resistors system. Dad answered him: “Here is nothing to think about. You are to numerate the conductors nodes, to write the I=U/R law for each conductor. Then remember that the sum of currents at each of the nodes except the first and the last equals to zero, you may assume potential in the first node equal to one and in the last node — zero. Then you get a simple system of linear equations. Hence you find potentials in the intermediate nodes and currents between all the nodes. It’s left only to divide the voltage by the total current from the first node and&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But Vasya is not good in math, so his dad was to write the system of equations himself and to solve it. Vasya looks at the end of the book of problems and says that there is another answer. Dad tried to solve the problem again and got another answer. Vasya looked at the answer and said again: “Wrong”. Dad resolves the problem for the third time and Vasya holds his own. Dad got tired to solve the problem manually and he decided to use a computer seeing that the students of mathematical department of the Ural State university are ready to write the required program.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i> and <i>M</i>; <i>N</i> is a number of nodes in the circuit <nobr>(2 &lt; <i>N</i> &le; 20)</nobr>, <i>M</i> is the number of resistors <nobr>(0 &le; <i>M</i> &lt; 1000)</nobr>. Each of the next <i>M</i> lines consists of three integers <i>A<SUB>i</sub></i>, <i>B<SUB>i</sub></i> и <i>R<SUB>i</sub></i> —  description of a resistor that has resistance <i>R<SUB>i</sub></i> connecting the nodes 
<i>A<SUB>i</sub></i> and <i>B<SUB>i</sub></i> <nobr>(1 &le; <i>A<SUB>i</sub></i> &lt; <i>B<SUB>i</sub></i> &le; <i>N</i>; 1 &le; <i>R<SUB>i</sub></i> &le; 1000)</nobr>. There may be many resistors between two nodes.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to output the total resistance between the nodes 1 and <i>N</i> rounded within two digits after a decimal points.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 5
1 2 15
2 4 5
1 3 10
3 4 10
2 3 1
</PRE></TD><TD><PRE CLASS="intable">9.40
</PRE></TD></TR></TABLE>
______________________________________________________
1267||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is only one branch-line of Yekaterinburg subway. But what a branch-line! Each station is an architectural masterpiece. It is no wonder that all the guests of our city try to have time to observe our subway in detail. And, as usual, the tourists try to manage in the minimal possible time – they have much to see! In an effort to make Yekaterinburg more attractive the city administration decided to work out a program that would calculate the optimal, in respect to the time, route passing all the stations. Of course, the turn of speech “the city administration decided to work out a program” doesn’t represent the facts exactly – the administration decided and this is your team who is to work it out.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The subway contains one branch-line. The trains run here with a definite interval that is evaluated by the integer number of minutes, intervals between the stations are known as well (they are evaluated by the integer number of minutes, too). You may assume that train stops at each station are instant. A tourist leaves a train instantly and it takes one second to board a train. A tourist needs 58 seconds to admire at a station. At the end of the sight seeing a tourist is to return to the starting station of his trip. He has already seen the station in the very beginning and so you are not to add the time of seeing it to the total trip time. A tourist may start his observation any time he likes, so the total trip time is to be counted out from the moment that he enters the train at the departure station.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of stations <i>N</i> (1 &le; <i>N</i> &le; 16). The stations are numbered from 1 to <i>N</i>. The second line consists of <i>N</i>&nbsp;&minus;&nbsp;1 nonnegative number of minutes that doesn’t exceed 10<SUP>5</sup>—the time that a train runs from the first station to the second. From the second to the third, and so on (surely a train runs from the <i>i</i>-th to (<i>i</i>+1)st station and from the (<i>i</i>+1)st to the <i>i</i>th the same time). The third line contains the number of station that is the initial point of the trip. The fourth consists of three numbers: an interval between the trains, the departure time of the first train from the first station and the departure time of the first train from the <i>N</i>-th station;. all the numbers are nonnegative integers and measure minutes. The interval between the trains is nonzero and doesn’t exceed 10<SUP>5</sup>, and the departure time from the terminal stations doesn’t exceed the interval.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain the duration of the shortest possible observation of all the stations in minutes.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
5 7
2
4 0 1</PRE></TD><TD><PRE CLASS="intable">28</PRE></TD></TR></TABLE>
______________________________________________________
1268||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The favorite occupation of Little Chu is to sleep. Strictly speaking, he is busy with nothing but sleeping. Sometimes he wakes up and than the mankind makes some Great Discovery. For the first time Little Chu woke up <i>K</i> days after his birth. For the second time he woke up <i>K</i><SUP>2</sup> after his birth. For the third time — <i>K</i><SUP>3</sup> days after his birth. This rule still holds true.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each time whem Little Chu wakes up he looks at the calendar and remembers what day of week is today. They say that if the day of week will be repeated, than Litle Chu will start crying and his tears will flood the world.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to make the largest number of the Great Discoveries and maximally to delay the doomsday. Determine when should Little Chu be awaken for the first time if it is known that he can’t sleep more than one week after his birth.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>T</i> <nobr>(1 &le; <i>T</i> &le; 6553)</nobr>&nbsp;— the number of tests. Each of the next <i>T</i> lines contains integer <i>N</i> <nobr>(2 &lt; <i>N</i> &lt; 65536)</nobr>&nbsp;— the number of days in the week. <i>N</i> is prime.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>K</i> for each input test.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3
5
7
11</PRE></TD><TD><PRE CLASS="intable">2
3
5
8</PRE></TD></TR></TABLE>
______________________________________________________
1269||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a problem to check messages of web-board visitors for the obscene words. Your elder colleagues commit this problem to you. You are to write a program, which check if there is at least one obscene word from the given list in the given text as a substring.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of integer <i>n</i> <nobr>(1 &le; <i>n</i> &le; 10000)</nobr> — an amount of words. The next <i>n</i> lines contain the list of words that we can’t allow to use in our well-educated society. A word may contain any symbol but the ones with codes 0, 10 and 13. The length of each word doesn’t exceed 10000 symbols. The total list of words doesn’t exceed 100 KB. Then there is an integer <i>m</i>&nbsp;— the number of lines of the text. A size of the text doesn’t exceed 900 KB.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the number of line and the number of position separated with a space, where an obscene word occurs for the first time. If there are no obscene words, output “Passed”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
dear
sweetie
angel
dream
baby
8
Had I the heavens' embroidered cloths, 
Enwrought with golden and silver light, 
The blue and the dim and the dark cloths 
Of night and light and the half-light, 
I would spread the cloths under your feet: 
But I, being poor, have only my dreams; 
I have spread my dreams under your feet; 
Tread softly because you tread on my dreams.
</PRE></TD><TD><PRE CLASS="intable">6 33</PRE></TD></TR></TABLE>
______________________________________________________
1270||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unicube is a remarkable set of toy-bricks developed by B. P. Nikitin especially for the children. Vasya’s dad made such a set to his son. Nothing special — a set of 27 colored toy-bricks — each edge is colored red, blue or yellow. But the coloring allows to build the cube 3&times;3&times;3 with outer surface of any of the colors. Moreover, it allows (but not easily) to build a 3&times;3&times;3 cube with chess coloring not only of the outer edges, but of all the 6 (and taking into account two sides of each section, all the 12) sections of the cube. In short this toy is for the children up to 10 years and Vasya played it with his father.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When they had built all the figures suggested in the book (which could be built) Vasya began to bother his father with the question if it was possible to build such-and-such a figure with such-and-such a coloring. At first father tried to build Vasya’s figures. Sometimes he succeeded and sometimes not. At the end father made a request to the students of the Ural State University to automate his distressing toil. Of course, the students equipped with computers would easily implement his request.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that given n information about the set of toy-bricks and the figure that is to be built, would suggest how to arrange the toy-bricks in order to build the figure. All the figures in the problem are the located in the three-dimensional space cells cubes such that some of the edges must be of a definite color.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of one number <nobr>0 &lt; <i>N</i> &lt; 31</nobr> — the number of toy-bricks in the set. Then there are <i>N</i> lines with the toy-bricks description: for each toy-brick in the order “front, upper, right, lower, left, back” pointed out the color of the edge number — integer from 1 to 30. Then in a new line there is an integer <i>M</i> — the total number of toy-bricks in the figure to be built <nobr>(0 &lt; <i>M</i> &lt; 31)</nobr>. At last there are <i>M</i> lines with the figure description in the following format: &lt;X&gt; &lt;Y&gt; &lt;Z&gt; &lt;F&gt; &lt;U&gt; &lt;R&gt; &lt;D&gt; &lt;L&gt; &lt;B&gt;, where X, Y, Z — a cell coordinates (all of them from 0 to 30), F, U, R, D, L, B — demand to the colors of the toy-brick in this cell in the same order as in description of the available toy-bricks colors (from 1 to 30, if there is 0 — then there might be an arbitrary color). Here is accepted the left coordinate system (e.g. OX axis looks right, OY — straight and OZ — up) — this is natural for Vasya building the figure on the floor.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is at least one solution of the problem then your program is to output an arbitrary solution in the form of <i>M</i> lines. The <i>i</i>-th line is to contain the number of toy-brick (in the order given in the input starting from 1) for a cell number i (in the same order as in the input starting from 1). If there is no solution, then you are to output 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
6 1 3 4 5 2
1
0 0 0 1 2 3 6 5 4</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR></TABLE>
______________________________________________________
1271||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Attention, attention! Moscow is speaking! All the radio stations are on air. We broadcast the urgent announcement.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today the sea trials of the new supertanker “Oil industry worker” will take place. The new development of our scientists &mdash; the system “Sailing Directions” &mdash; will be world-wide demonstrated. This system provides an optimal control of the ship without a human in a square harbor. A ship (and all the ships have a triangle form) may move from the given start position to the final one among the other ships anchored in the harbor along the shortest distance. Everything necessary for the safe test was stipulated on the “Oil industry worker”: a thick steel sheeting; electronic control system; satellite communications with the complex of coordinates determination; and sensitive radar. But as usual meddled in a human element. Vovochka, the captain’s son, secretly stole to the ship just before the presentation, set down at the computer and decided to while away the time playing his favorite computer game. As a result a computer virus penetrated into the computer and it spoilt several functions of the program “Sailing Directions”. Now the ship can’t turn around its axis. You are to write a program that provides the shortest tanker route length to the given point.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of two integer numbers <i>DX</i> and <i>DY</i> — the dimensions of the harbor <nobr>(0 &lt; <i>DX</i>, <i>DY</i> &lt; 10<sup>8</sup>)</nobr>. Each of the lines 2-4 contain two integers — the tanker coordinates (remember that the “Oil industry worker” is triangle as all the ships). The fifth line contains a point where the tanker is to come in the end (namely its vertex described in the second input line). The sixth line consists of the integer <i>N</i> (the number of other ships in the harbor, <nobr>0 &le; <i>N</i> &le; 40</nobr>). The next 3<i>N</i> lines contain those ships coordinates. All the coordinates are within the harbor. The harbor corner is the point of origin. The ships don’t intersect.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the minimal length of the route rounded to three digits after a decimal point, or &minus;1, if the “Oil industry worker” won’t be able to reach the final point because of the injuries in the navigation program.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2003 2003
20 50
10 30
30 30
140 60
1
80 1000
100 20
60 20</PRE></TD><TD><PRE CLASS="intable">146.569</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
<li>Harbor is rectangle with coordinates of corners (0,0), (<i>DX</i>,0), (<i>DX</i>,<i>DY</i>), (0,<i>DY</i>).
<li>Ship may not sail through harbor borders.
<li>Ships may touch each other and harbor borders.
</ul>
</DIV></DIV>
______________________________________________________
1272||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A little town started to construct a subway. The peculiarity of the town is that it is located on small islands, some of them are connected with tunnels or bridges. The mayor is sure that the subway is to be under the ground, that’s why the project must use the less bridges the better. The only request for the subway is that the townsmen could get by metro (may be with changes) from every island to every island. Fortunately, we know that there is enough tunnels and bridges for it. It was decided to construct as less passages from island to island as possible to save money.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task given a town plan to determine the minimal possible number of bridges that is necessary to use in the subway construction.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integers separated with a space: <i>N</i> (the number of islands, <nobr>1 &le; <i>N</i> &le; 10000</nobr>), <i>K</i> (the number of tunnels, <nobr>0 &le; <i>K</i> &le; 12000</nobr>) and <i>M</i> (the number of bridges, <nobr>0 &le; <i>M</i> &le; 12000</nobr>). Then there are <i>K</i> lines; each line consists of two integers &mdash; the numbers of islands, connected with the corresponding tunnel. The last <i>M</i> lines define bridges in the same format.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the minimal number of bridges necessary for the subway construction.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 3 4
1 2
2 3
4 5
1 3
3 4
4 6
5 6</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1273||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The subway constructors are not angels. The work under the ground and&hellip; Well, they are not angels. And where have you seen angels? It is all in a lifetime! Show me first somebody who has never&hellip; and then&hellip; all of us are people. And Vasya and me, too. May be we’ve overdrunked ourselves. But a little. And the ties lie crookedly&hellip; At that time they seemed to lie straight. No, we can’t say that it must be so — criss-cross, but not all of them criss-cross! Some of the ties lie almost properly&hellip; Crookedly you say? And I’d say normally&hellip; After the yesterday’s party? May be, may be&hellip; The ties that lie criss-cross we’ll take away and it’ll be OK, the train will pass on term, not by this New Year but by the next one. There’s not much to disjoint. We’ll pull out this tie and may be that one. Next to nothing! One, two, three&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Rails are two parallel straight lines that are for the users’ accommodation parallel to the Y axis and have the coordinates X=0 and X=1. The “pell-mell” ties are arbitrary segments with the vertices on the rails in the integer points of the coordinate scale. At the first elimination of defects step you are to remove several ties that would disappear all the crossings. And, of course, after the yesterday’s party the less you work the better, so you are to remove the minimal possible number of ties.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>K</i> <nobr>(0 &le; <i>K</i> &le; 100)</nobr> — the number of laid ties. Then there are <i>K</i> lines, each of them contains two integers <i>Y</i><sub>1</sub> and <i>Y</i><sub>2</sub> that describe the location of the next in turn tie — the tie described by the pair <i>Y</i><sub>1</sub> and <i>Y</i><sub>2</sub> connects the points (0, <i>Y</i><sub>1</sub>) и (1, <i>Y</i><sub>2</sub>). The absolute values of the numbers <i>Y</i><sub>1</sub> and <i>Y</i><sub>2</sub> don’t exceed 1000. There are no identical among the numbers <i>Y</i><sub>1</sub> and among the numbers <i>Y</i><sub>2</sub>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the minimal number of ties that are to be removed in order to eliminate crossings.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 1
3 0
1 2</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR></TABLE>
______________________________________________________
1274||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which implements addition, subtraction, multiplication and division operations on fractions. 
Input and output fraction format is as follows: 
<UL>
<LI>the sign of a number (must be written only if its absence may lead to misrepresentation of the number),</li>
<LI>the integer part of a number (the integer part that equals zero must be omitted if the numerator and the denominator are present),</li>
<LI>a space character (must be omitted if the integer or fractional part is absent),</li>
<LI>the numerator (if it is not equal to zero),</li>
<LI>the “/” sign (written only if there is a numerator),</li>
<LI>the denominator (must be omitted if there is no numerator),</li>
<LI>the denominator cannot be equal to zero.</li>
</ul>
Samples of fractional number representation: “-7 3/4”, “8 1/2”, “-7/11”, “0”, “11”.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations</b><BR>
All limitations apply for both input and output data.
The sign of a fraction: if the fraction is positive, the sign is not written; if the fraction is negative, the “-” sign must be present.
The integer part and the numerator may have values ranging from 0 to 30000, the denominator may have values from 1 to 30000.
The operation sign may be one of the four possible symbols: “+” (addition), “-” (subtraction), “*” (multiplication), “/” (division).
The expression is always correct, so the second operand in the division operation cannot be zero.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line – a fraction (the first operand);<BR>
The second line – the sign of an operation;<BR>
The third line – a fraction (the second operand).<BR>
Both fractions may be reducible. The numerator is always less than the denominator.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A single line that contains an irreducible proper fraction (result) in the format described above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-3 1/6
+
2/4
</PRE></TD><TD><PRE CLASS="intable">-2 2/3
</PRE></TD></TR></TABLE>
______________________________________________________
1275||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">N knights gathered at the King Arthur’s round table. Each of them has several goblets near him. It is possible that knights have different number of goblets. The goblets are brought (and also carried away) by a servant who can carry only two goblets at a time (one for each hand). When the servant comes he can either bring two goblets, or carry them away. Note that he can serve exactly two knights that sit at a fixed distance K from each other.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, if K=1 then the knights who sit side by side are served.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">By the end of the feast each of the knights should have an equal predefined number of goblets near him. The number of the times the servant has to come must be minimized.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which plans the servant’s work during the feast.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations</b><BR>
2 &lt;= N &lt;= 1000<BR>
1 &lt;= K &lt;= N-1<BR>
Initial and final number of goblets near each knight is not greater than 1000 and it is always non-negative.<BR>
The total number of servant’s visits is not greater than 30000.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first number contains three numbers separated with white-space.<BR>
N – the number of knights,<BR>
K – “arm-span” of the servant,<BR>
F – the final number of goblets each of the knights must have by the end of the feast.<BR>
The following N numbers separated with spaces or EOL characters describe the initial number of goblets near each knight. It is assumed that the knights are numbered in a cyclic manner, i.e. the first knight sits after the N-th one.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to reach the goal, write “–1” (without quotes) to the output. If the solution exists then the first line must contain a single integer M – the number of the servant’s visits. The following M lines must carry triples: two numbers (the numbers of knights being served) and “+” (plus) character if the goblets are brought or “–” (minus) if they are carried away. The data on each of these lines must be separated with a white-space character.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 1 4
1 2 3</PRE></TD><TD><PRE CLASS="intable">3
1 2 +
1 2 +
3 1 +</PRE></TD></TR></TABLE>
______________________________________________________
1276||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Train Ltd., a company that is in for railroad transportation received an order to form a train having a certain number of carriages. The problem is that Train Ltd. has carriages built in different years, therefore each of the carriages may have one of the two kinds of coupling at each side. The company also has one locomotive at its disposal.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The coupling systems for both the locomotive and the carriages are labeled as “A” or “B”. It is impossible to turn either the locomotive or a carriage in the opposite direction.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given information about the carriages and the locomotive. Your task is to determine the number of ways to form different trains using the given carriages. The additional requirement is that the coupling systems at each of the ends of the train must correspond to those of the locomotive.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The trains are considered different if there is at least one mismatch when they are compared from one end to another.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example 1.</b> Let the company possess the following carriages: “AA”, “AA”, “AB”, “BA”, “BA” and the locomotive “AB”. The train must have four carriages.
Then it is possible to form only two different trains having these carriages: “BAAAABBA” and “BAABBAAA”. It is possible to connect the locomotive at the left end of this train (using coupling “B”) or at the right one (using coupling “A”).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example 2.</b> Let the company now have only one carriage of each type: “AA”, “AB”, “BA”, “BB”, and the locomotive is “AA”. The train must have three carriages now.
There are three ways to form a train: “AAABBA”, “ABBAAA” and “ABBBBA”.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers separated with white-space character: <i>N</i> (0 &lt; <i>N</i> &le; 40)&nbsp;&mdash; the number of carriages the company has at its disposal, and <i>K</i> (0 &lt; <i>K</i> &le; <i>N</i>)&nbsp;&mdash; the required length of the train (measured in carriages). The following <i>N</i>&nbsp;+&nbsp;1 lines describe the coupling systems for the locomotive (line 2) and the carriages. These descriptions are given as “AB”, “AA”, “BB” or “BA” (without  quotes).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the word “YES” if it is possible to form one (or more) trains according to the given parameters, or “NO” otherwise.
If it is possible to form a train then write the number of different ways of doing so to the second line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
AB
AA
AB
BA
BA
</PRE></TD><TD><PRE CLASS="intable">YES
2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 4
BA
AA
AB
BA
BA
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1277||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Galaxy Police (Galaxpol) found out that a notorious gang of thieves has plans for stealing an extremely valuable exhibit from the Earth Planetary Museum&nbsp;&mdash; an ancient microprocessor. The police chiefs decided to intercept the criminals on the way from their refuge to the museum. A problem arose while planning the police operation: would it be possible for the Galaxpol staff to control all the possible routes of the criminals?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The galaxy transport system is designed as follows. Each planet has a transport station that is connected to some of the other stations via two-way teleportation channels. Transport stations vary in their sizes, so different numbers of policemen may be required to take control over different stations. In order not to upset the operation, it was decided to leave the planets that are next to the museum or the refuge without any police control.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help the Galaxpol to place their staff at the stations in order to block all possible routes of the thieves.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains a single integer 0 &lt; <i>K</i> &le; 10000&nbsp;&mdash; the number of policemen engaged to control the stations.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The second line has four integers: <i>N</i>, <i>M</i>, <i>S</i> and <i>F</i> delimited with white-space character. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> is the number of stations in the galaxy (the stations are numbered from 1 to <i>N</i>); 2 &lt; <i>N</i> &le; 100. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>M</i> is the number of teleportation channels; 1 &lt; <i>M</i> &le; 10000. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>S</i> is the number of the planet (and the station) where the museum is; 1 &le; <i>S</i> &le; <i>N</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>F</i> is the number of the planet (and the station) where the thieves’ refuge is; 1 &le; <i>F</i> &le; <i>N</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next line contains <i>N</i> integers (<i>x</i><sub>1</sub>, &hellip;, <i>x<sub>N</sub></i>) separated with white-space character&nbsp;&mdash; the number of policemen required to control each of the stations (&sum;<SUB><i>i</i>=1</sub><SUP><i>N</i></sup><i>x<SUB>i</sub></i> &le; 10000).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then <i>M</i> lines follow that describe the teleportation channels. Each of these lines contains a pair of space-delimited integers&nbsp;&mdash; the numbers of stations being connected by a channel. The channel system is designed so that it is possible to reach any station from any other one (probably it would require several channel transitions).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write “YES” if it is possible to block all the possible routes within given limitations, and “NO” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
5 5 1 5
1 6 6 11 1
1 2
1 3
2 4
3 4
4 5
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10
5 5 1 5
1 4 4 11 1
1 2
1 3
2 4
3 4
4 5
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1278||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new model of a mobile phone is powered by a special sound generation processor, developed expressly for this purpose.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The processor has a sound generator, an instruction pointer (IP), command memory (100 cells) and a stack (100 cells).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The instruction set of this processor consists of the two commands only:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">CALL X – a subroutine call command – pushes the incremented current value of the IP (the return address) on the top of the stack and sets the IP to X;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">BELL&RET – the combined command “bell-return” – emits a sound of a fixed (unit) duration and performs control return (pops a value from the top of the stack and assigns it to the IP) or stops the execution of the program (if the stack is empty).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Any command (together with its operand) occupies exactly one memory cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The return address occupies only one cell on the stack, too.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The work cycle of the processor starts when it is necessary to emit a sound. At this moment the IP points to the zero memory cell. The processor stops its work if the stack is empty after emitting a sound (when BELL&RET command has been executed).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The manufacturers of the processor affirm that by using of this processor may be emitted sound of rather long duration.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which accepts K as input and produces a program for this processor to emit a sound of duration K.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations</b><BR>
The resulting program may have no more than 100 commands including exactly one BELL&RET command, being always the last one. <BR>
Unused memory cells following the BELL&RET command are considered free.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There will be one integer number K in the input (0 &lt; K &le; 10<sup>9</sup>) – sound duration.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a program for the processor described above. The execution of this program leads to emission of the sound of duration K. The first line should correspond to the zero cell of the memory, the second line – to the first cell, the third – to the second one etc. All lines, with exception for the last one, may contain only CALL commands. The operand of the CALL command is an integer (from 1 to 99) and must be separated from the command by a white-space character.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line must contain the BELL&RET command.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">BELL&amp;RET
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">CALL 3
CALL 3
CALL 3
BELL&amp;RET
</PRE></TD></TR></TABLE>
______________________________________________________
1279||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A warehouse is an N&times;M meter sized rectangle, which is divided into sections of 1&times;1 meter. The warehouse is served by a roof-mounted crane. 1&times;1 meter sized containers may be stacked one atop another in each section.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new lot of K containers of the same kind arrived to the warehouse. It was decided to place the new containers so that the sections having less containers would be filled first.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>For example,</b> let N=3, M=3, K=10 and the number of containers in each section is represented in the table below.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE cellpadding="3" cellspacing="0" border="2">
<TR>
<TD></td><TD>1</td><TD>2</td><TD>3</td>
</tr>
<TR>
<TD>X</td><TD>1</td><TD>2</td><TD>3</td>
</tr>
<TR>
<TD>Y</td><TD>4</td><TD>5</td><TD>6</td>
</tr>
<TR>
<TD>Z</td><TD>7</td><TD>8</td><TD>9</td>
</tr>
</table></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In this case the new containers will be sequentially placed in sections: x1, x1, x2, x1, x2, x3, x1, x2, x3, y1. After that the heights of the sections will be as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE cellpadding="3" cellspacing="0" border="2">
<TR>
<TD></td><TD>1</td><TD>2</td><TD>3</td>
</tr>
<TR>
<TD>x</td><TD>5</td><TD>5</td><TD>5</td>
</tr>
<TR>
<TD>y</td><TD>5</td><TD>5</td><TD>6</td>
</tr>
<TR>
<TD>z</td><TD>7</td><TD>8</td><TD>9</td>
</tr>
</table></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program, which determines the minimum height of the sections after placing new containers.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integer numbers N, M, K (0 &lt; N, M &le; 100, 0 &lt; K &le; 10<SUP>7</SUP>), where N and M are dimensions of the warehouse, and K is the number of new containers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the following N lines contains M space-separated integer numbers ranging from 1 to 1000. These numbers are the heights of the corresponding sections.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimum height of the warehouse sections after the placement of new containers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2 3
1 3
2 4
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3 10
1 2 3
4 5 6
7 8 9
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE>
______________________________________________________
1280||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Michael wants to win the world championship in programming and decided to study <i>N</i> subjects (for convenience we will number these subjects from 1 to <i>N</i>). Michael has worked out a study plan for this purpose. But it turned out that certain subjects may be studied only after others. So, Michael’s coach analyzed all subjects and prepared a list of <i>M</i> limitations in the form “<i>s<SUB>i</sub></i> <i>u<SUB>i</sub></i>” <nobr>(1 &le; <i>s<SUB>i</sub></i>, <i>u<SUB>i</sub></i> &le; <i>N</i>; <i>i</i> = 1, 2, …, <i>M</i>)</nobr>, which means that subject <i>s<SUB>i</sub></i> must be studied before subject <i>u<SUB>i</sub></i>. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to verify if the order of subjects being studied is correct. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Remark.</b> It may appear that it’s impossible to find the correct order of subjects within the given limitations. In this case any subject order worked out by Michael is incorrect.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations</b><BR>
1 &le; <i>N</i> &le; 1000; 0 &le; <i>M</i> &le; 100000.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>N</i> and <i>M</i> (<i>N</i> is the number of the subjects, <i>M</i> is the number of the limitations). The next <i>M</i> lines contain pairs <i>s<SUB>i</sub></i>, <i>u<SUB>i</sub></i>, which describe the order of subjects: subject <i>s<SUB>i</sub></i> must be studied before <i>u<SUB>i</sub></i>. Further there is a sequence of <i>N</i> unique numbers ranging from 1 to <i>N</i> — the proposed study plan.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single word “YES” or “NO”. “YES” means that the proposed order is correct and has no contradictions with the given limitations. “NO” means that the order is incorrect.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 6
1 3
1 4
3 5
5 2
4 2
1 2
1 3 4 5 2
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 6
1 3
1 4
3 5
5 2
4 2
1 2
1 2 4 5 3
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1281||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a map of rivers of some continent. Every river is shown as a broken line, which begins with a river head and ends either at the point where the river flows into another one, or on the river mouth. The vertexes of the broken line are the turning points of the river-bed, or the points of tributary flow. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We will consider the river basin as a convex polygon of minimum area that contains the river and all its tributaries.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Remark.</b> According to the definition of river basin the same territory may belong to the basins of different rivers. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Sample.</b> A continent with three rivers is shown. The coordinates of the rivers and areas of the basins are given in the table.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table cellpadding="3" cellspacing="0" border="2">
<tr align="center"><td width="100">River name</td><td width="50">X</td><td width="50">Y</td><td width="100">Basin area</td></tr>
<tr align="center"><td rowspan="4">river1</td><td>6</td><td>9</td><td rowspan="4">12</td></tr>
<tr align="center"><td>5</td><td>11</td></tr>
<tr align="center"><td>3</td><td>12</td></tr>
<tr align="center"><td>1</td><td>7</td></tr>
<tr align="center"><td rowspan="3">river2</td><td>7</td><td>9</td><td rowspan="3">1.5</td></tr>
<tr align="center"><td>5</td><td>7</td></tr>
<tr align="center"><td>5</td><td>5.5</td></tr>
<tr align="center"><td rowspan="6">river3</td><td>3</td><td>10</td><td rowspan="6">9.5</td></tr>
<tr align="center"><td>5</td><td>8</td></tr>
<tr align="center"><td>4</td><td>6</td></tr>
<tr align="center"><td>5</td><td>5.5</td></tr>
<tr align="center"><td>6</td><td>5</td></tr>
<tr align="center"><td>3</td><td>5</td></tr>
</table></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to calculate the maximum among all river basin areas.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of the rivers N. The rest of the input contains N blocks describing the rivers. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each block <I>i</i> consists of:
<UL>
<LI>One line which contains <I>ki</i> – the number of the points in river description;</li>
<LI><I>ki</i> lines containing pairs of real numbers <I>xj</i> and <I>yj</i> (1 &lt;= <I>j</i> &lt;= <I>ki</i>), separated by space characters – the coordinates of the points that describe the river-bed.</li>
</ul></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations.</b><BR>
0 &lt; N &lt;= 10, &sum;<I>ki</i> &lt;= 1000, -1000 &lt;= <I>xj, yj</i> &lt;= 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains one number – the area of the largest basin calculated with two digit precision.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
4
6 9
5 11
3 12
1 7
3
7 9
5 7
5 5.5
6
3 10
5 8
4 6
5 5.5
6 5
3 5
</PRE></TD><TD><PRE CLASS="intable">16.00
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
4
6 9
5 11
3 12
1 7
6
3 10
5 8
4 6
5 5.5
6 5
3 5
</PRE></TD><TD><PRE CLASS="intable">12.00
</PRE></TD></TR></TABLE>
______________________________________________________
1282||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A game for two players is determined by its tree. The competitors make moves in turn. The first competitor starts the game. The game ends up with either a draw, or a victory of one of the players. The leaf nodes of the tree of this game may have values equal to one of three numbers: “+1” – victory of the first competitor, “–1” – victory of the second competitor, “0” – draw.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have to find out who will win if both competitors follow the right strategy.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The nodes of the tree are numbered with successive integer numbers. The root of the tree always has number 1.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer N (1 &lt; N &le; 1000) – the number of the nodes in the game tree. Next N-1 lines describe the nodes – one line for each node (with exception for the first node). The second line will contain the description of the second node of the tree, the third line – the description of the third node, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the node is a leaf of the tree, the first symbol of the line is “L”, followed by a space, then the number of the ancestor of this node goes, another space, and the result of the game (+1: victory of the first player, –1: victory of the second one, 0: draw).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the node is an inner one then the line contains the first symbol “N”, a space character and the number of the ancestor of this node.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains “–1” if the second competitor wins, “+1” if so does the first and “0” if the result is a draw.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
N 1
N 1
L 2 -1
L 2 +1
L 3 +1
L 3 +1
</PRE></TD><TD><PRE CLASS="intable">+1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">7
N 1
N 1
L 2 -1
L 2 +1
L 3 +1
L 3 0
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR><TR><TD><PRE CLASS="intable">18
N 1
N 1
N 2
L 2 +1
N 3
L 3 +1
L 3 +1
L 4 -1
L 4 +1
N 4
N 6
L 6 -1
L 6 -1
L 11 -1
L 11 +1
L 12 +1
L 12 -1
</PRE></TD><TD><PRE CLASS="intable">+1
</PRE></TD></TR></TABLE>
______________________________________________________
1283||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Venus dwarfs are rather unpleasant creatures: ugly, malicious, and mean-spirited. Maybe it’s because of hard living conditions on their planet… but the fact remains: each of them is ready to sell his own mother in order to save up his pot of gold and to preserve it to the end of his days. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The dwarfs are especially nervous about the Mercury leprechauns who are always glad to empty a dwarf’s pot and to fill it with solar dust instead of the gold. The dwarfs are weak-sighted and can’t distinguish dust from gold. That is why each dwarf once a year visits the Central Galaxy Bank (CGB), where experienced specialists authenticate the content of the pot taking a small commission for the job.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the amount of gold in a pot becomes less than or equal to a certain level, the life of a dwarf has no sense anymore, so he clears the world of his wretched soul: with the remaining gold he buys in a zoo the largest Jupiter toad and creeps under it which results in crushing his chest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains three integers separated with spaces. The first number is the amount of gold in a dwarf’s pot at the initial moment. The second number is the amount of gold at which the dwarf’s life becomes senseless. Both values are measured in grams and don't exceed 2<SUP>31</sup>&nbsp;&minus;&nbsp;1. The third number is the CGB commission (from 1 to 100); this is the percentage of gold that is taken from the pot as a way of payment for the verification. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the number of years that is left to the dwarf.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">19 10 50</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1000 1 1
</PRE></TD><TD><PRE CLASS="intable">688
</PRE></TD></TR></TABLE>
______________________________________________________
1284||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rules of playing space poker are so complicated that there’s no sense in trying to explain them here. We’ll say only that at the beginning of a game each player is given <i>N</i> (<i>N</i> &le; 20) cards. Each card has a value (an integer from 1 to 100) and a suit (an integer from 1 to 10). All the cards are different. Suits with odd numbers are called blue and suits with even numbers are called yellow. The cards are dealt by a special card machine, which guarantees that the Steinpuper rule is satisfied. This rule says that if at the beginning of a game a player has <i>X</i> different blue suits and <i>Y</i> different yellow suits, then |<i>X</i>−<i>Y</i>| &le; 1. The cards are given to a player one by one and the player puts them into his hand from left to right. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to become acquainted with his cards before the game starts, the player <I>arranges the cards</i>. This means that by means of <I>atomic operations</i> he attains such a disposition of his cards that
<OL>
<LI>All the cards of one suit lie one after another.</li>
<LI>Blue and yellow suits alternate (this is always possible due to the Steinpuper rule).</li>
<LI>Inside a suit the cards are ordered either in the ascending or in descending order and all the suits are ordered in the same way.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>An atomic operation</i> consists in taking one of the cards and moving it to any place (i.e., to the leftmost position, to the rightmost position, or between any two cards). Obviously, arranging the cards can be performed in many ways, but the aim is to do it with the minimal number of operations.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of cards <i>N</i>. The following <i>N</i> lines describe the cards in the order in which they are given by the machine. Each card is described by its value and suit separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the minimal number of operations necessary for arranging the cards.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
10 1
12 2
8 2
4 4
7 4
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1285||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two starcrafts and a drop of water (nobody knows where it comes from) in a hyperspace (it’s well-known that hyperspace has 8 dimensions). Whereas there’re anisotropic distortions because of the hyperspace transfer you may assume the ships as points (A and B) and the drop as a sphere with radius R and center in the point C. Coordinates of all the points are integer and their absolute values don’t exceed 1000. The drop is motionless. The radius R is integer positive number. The distance from the point C to the points A and B is greater than R.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The starcraft B is distressed (and motionless as well), and the starcraft A hurries to succor. You are to find out the length of the short cut from the point A to the point B not crossing the sphere (the starcraft may move along the edge of the sphere).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are three lines in succession containing coordinates of the points A, B and C respectively. Each of the lines consists of 8 positive integers. The fourth line contains positive integer R, that is the sphere radius.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Should contain the length of the short cut within 2 digits after a decimal point. There must be exactly 2 digits after a decimal point. The result is to be rounded according to the standard mathematical rules.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0
10 10 10 10 5 5 5 5
3
</PRE></TD><TD><PRE CLASS="intable">1.00
</PRE></TD></TR></TABLE>
______________________________________________________
1286||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is well known that a starship equipped with class B hyperengine is able to travel from any planet to any other planet. But your starship got severe damage in the last travel and now its movement ability is limited. The starship’s technician determined that with the damaged hyperengine the vehicle can move from a point with coordinates (<i>i</i>,<i>j</i>) only to a point from the following list: (<i>i</i>+<i>q</i>,&nbsp;<i>j</i>+<i>p</i>), (<i>i</i>&minus;<i>q</i>,&nbsp;<i>j</i>+<i>p</i>), (<i>i</i>+<i>q</i>,&nbsp;<i>j</i>&minus;<i>p</i>), (<i>i</i>&minus;<i>q</i>,&nbsp;<i>j</i>&minus;<i>p</i>), (<i>i</i>+<i>p</i>,&nbsp;<i>j</i>+<i>q</i>), (<i>i</i>&minus;<i>p</i>,&nbsp;<i>j</i>+<i>q</i>), (<i>i</i>+<i>p</i>,&nbsp;<i>j</i>&minus;<i>q</i>), (<i>i</i>&minus;<i>p</i>,&nbsp;<i>j</i>&minus;<i>q</i>) (all the coordinates here are integers and are given in the standard intergalaxy system). Help the captain of your ship to find out if the ship is able to reach the destination planet on its own or a repair ship must be called. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>p</i> and <i>q</i> (the two remaining discrete power rates of the damaged hyperengine) separated with a space. The second line contains the coordinates of the point where the spaceship is now. The third line contains the coordinates of the destination planet. The numbers in the second and third lines are also separated with spaces. All the numbers are integers and do not exceed 2&middot;10<SUP>9</sup> in absolute value.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the commander can move the damaged starship to the destination planet, write ‘YES’. Write ‘NO’ if a repair ship must be called.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 6
0 0
10 10
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 6
0 0
9 9
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1287||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a quadrate area on the Mars surface wreathed in ideal net of canals. They plot the surface into equal squares (we neglect here the surface curvature). Each side of the quadrate area plotted into <i>N</i> square regions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Archeological investigations showed that there was an ancient country Yatik in this area. The inhabitants cultivated a special grain — sir — that was a basis of their food ration. There is sir of two kinds: coarse-grained and small-grained. As a matter of fact, the end of Yatik empire started after the civil war between the fanciers of the sir sorts. But until recently noone new which of the parties won that time. The scientists look forward to guess the riddle on the grounds of the last voyage to Mars results. They found out which kind of sir was sowed the last in each square of Yatik. According to the ancient tradition sir was sowed in the sequence of squares (parallel to the north-south or east-west directions or at the angle 45° to them), one may suppose that the supporters of the party-winner made the longest sowings.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a size of the square area — <i>N</i> (1 &le; <i>N</i> &le; 1400). Then there follow <i>N</i> lines. Each of them consists of <i>N</i> symbols. A letter “s” in the <i>i</i>-th line and <i>j</i>-th row means that in the according square region small-grained sir was sowed the last, a letter “S” means that coarse-grained sir was sowed the last. You may assume that the inhabitants of the area sowed nothing but sir. Each square region was sowed with only one sort of sir.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain a symbol “s”, if the party of small-grained sir fanciers won in the civil war. And symbol “S”, if the winners were the fanciers of the coarse-grained sir. If it’s impossible to define a winner then the first line should contain one symbol “?”. The second line should contain integer number — the maximal length of the one sort of sir sowing.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
SsS
sSs
SsS
</PRE></TD><TD><PRE CLASS="intable">S
3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
sS
Ss
</PRE></TD><TD><PRE CLASS="intable">?
2
</PRE></TD></TR></TABLE>
______________________________________________________
1288||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> — Did you call for me, general?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> — Come in. You were recommended to me as a young promising programmer. As you probably know, our new … though how can you know, it's all secret. Well, our department needs a program for the analysis of … let's say signals from … let's call it a locator. This locator is designed for searching for … well, objects, which move in a layer of … no, I can't tell you in a layer of what. The locator is placed on our new … well, it also can move. You'll get the signal through the interface … though it's not important, for you it will be a sequence of numbers, each from 0 to 100. First you find in this sequence a signal from the front wall of the layer, this is a number 95 or greater. If there are several such numbers, the first of them will be regarded as the front wall. And you should take into account that someplace before this number in the sequence there must be a number not exceeding 35, otherwise it's not a wall, it's … well, you don't have to know what. Further you have to check two chan… two places where these objects can be. You'll be given for each of the places two numbers, which are the beginning and the end of the search zone counting from the front wall of the layer. You have to search in these zones for an object, that means you have to find maximal numbers in these zones of numbers. If a maximal number is equal to or greater than a certain level, which you'll be given, then you report that you have found an object and give us its location. If there are several maximal numbers in a search zone, we regard only the first of them as an object. There's another complication: the width of the layer is not constant though it has a lower bound, and you'll have to watch for a signal from the back wall of the layer. This signal is also a number 95 or greater and it must be not earlier than after a certain amount of numbers from the front wall. Note that somewhere between the front and the back wall there must be a number not exceeding 35. Of course, if you don't find a signal from the front wall, you don't have to search for objects or the back wall at all. And you don't have to search for anything behind the back wall. I suppose you understand that a signal from the back wall may fall into a search zone, then you don't  regard it as an object. Is everything clear to you?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> — And if…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> — No ifs. You're free, you may go now. Wait, one more thing: according  to our recent investigations, the signal decays inside the layer, so after you have found the front layer you have to multiply each subsequent number by a decay coefficient and only then you may analyze it. The decay coefficient for the m-th number is calculated by the formula 1 + (m &minus; f) &middot; А, where f is the location of the front wall, and the value А will be given to you later. That's all, now go.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input begins with 9 numbers separated with spaces or ends of line. These numbers are:
<OL>
<LI>the total amount of numbers in the sequence N (3 &lt; N &le; 10000);</li>
<LI>the minimal layer width D (D &gt; 0), which is the minimal possible difference between the positions of the numbers corresponding to the back wall and the front wall;</li>
<LI>the beginning of the first search zone S1 (S1 &gt; 0) (if S is the position of the front layer, then S1 + S is the first number of the search zone);</li>
<LI>the end of the first search zone E1 (E1 &ge; S1) (the point S + E1 must also be checked);</li>
<LI>the level at which an object is reported in the first zone L1 (if a signal is equal to or greater than L1, then there is an object, whose location is the first maximal number in the search zone);</li>
<LI>S<SUB>2</sub>,</li>
<LI>E<SUB>2</sub>,</li>
<LI>L<SUB>2</sub> are similar numbers for the second search zone;</li>
<LI>the parameter for calculating the decay coefficient A (0 &le; A &le; 0.1).</li>
</ol>
The following N lines contain a record of the signal; in each line there is one number from 0 to 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the front wall of the layer was not found, you should output &ldquo;No surface.&rdquo;. If the front wall was found, you should output &ldquo;Surface found at *.&rdquo;, where there is the position of the front wall instead of * (the very first number of the sequence has position 1). In this case the next line of the output should contain your report concerning the back wall: either &ldquo;Bottom found at *.&rdquo;, where instead of * there is the difference between the positions of the back wall and the front wall, or &ldquo;No bottom.&rdquo; The next line should contain information on the first search zone. If no numbers were analyzed in this zone, you should output &ldquo;Channel 1: No search.&rdquo;, otherwise there should be one of the two messages: either &ldquo;Channel 1: Object at *.&rdquo;, if an object was found, where instead of * there is the difference between the positions of the object and of the front wall, or &ldquo;Channel 1: No object.&rdquo;, if no object was found. The last line should contain an analogous information on the second search zone (note that there must be &ldquo;Channel 2&rdquo; in this line).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 4 1 1 50 2 2 56 0.09
9
26
96
56
21
73
73
93
96
97
</PRE></TD><TD><PRE CLASS="intable">Surface found at 3.
Bottom found at 4.
Channel 1: Object at 1.
Channel 2: No object.
</PRE></TD></TR></TABLE>
______________________________________________________
1289||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A crowed of volunteers dressed in the star striped overalls have filled the starport. There starcraft leaves to the thorium mines of Haron. Their job will be hard and dangerous. Will many of them return home?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This question has an exact answer. Each of the volunteers has a ticket to the starcraft. There signed a compartment number where he is to fly. The starcraft is not passenger, it departs to Haron once a month full of the volunteers and returns back loaded with thorium. This precious metal can be loaded not in all of the compartments. In such a compartments volunteers can return home. All the others are to stay at Haron... Forever.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The compartments are numbered. The numbers of the unfit compartments (and only their numbers) are so that the digit root of the first half of the number equals to the digit root of the second half. To calculate the digit root of a number one is to summarize the digits of the number; if the result is greater or equal than 10, then the digits of the result are to be summarized again; and so on until one gets a number from 0 to 9.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">How many volunteers will return home?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Even integer number N &lt;= 200000 – an amount of digits used to number the compartments. There are exactly 10<SUP>N</sup> compartments numbered from 0 to 10<SUP>N</sup>-1 with the leading zeros.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of compartments free of thorium on the way home.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2</PRE></TD><TD><PRE CLASS="intable">10</PRE></TD></TR></TABLE>
______________________________________________________
1290||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is the seventh year of the terrible harmful Galaxy War... Leo Hao is one of the first defenders of his planet. He is lucky! He has gone through many troubles. For example, he stayed alive after the close combat with a meklon warrior – a perfect killing machine. He lost his left leg, right eye and spent five long months in hospital. After that incident, he had to leave the army and return to the Earth.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But Leo is lucky twice! He was able to find a good job after all these terrible incidents. Now he is a leading programmer in “U.S. Robots”. He was involved into the creation of software for zero level defense system. However, even there he was faced with interplanetary intervention! Just a few days ago it was found out that one of his co-workers is not a human! No! Physically he was a human of course, but parasitical Darloxian – agent of the most odious race in the Galaxy, captured his mind.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Obviously, mind corrupted by Darlok agent was not able to write high-quality code. That why Leo is now reviewing his code. It’s terrible!!! It is not effective, slow, dirty and tangled. It must be rewritten!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, Leo faced trouble during the exploration of the following function: input is the array of positive integer numbers. First, function prints quantity of numbers in the array onto a sheet of paper. Then quantity of numbers in the array greater than 1 is printed. Then quantity of numbers greater than 2 and so on, until the function encounters zero (zero is never printed out). After that, special mechanical manipulator puts this sheet of paper into scanner, which reads this set of numbers into memory and the described operation repeats again. After that the new paper with numbers comes out from the printer. The scanner reads these new numbers, and stores them into the array. This array is the result of the function.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Example.</b> Input: 4 1 6.<BR>
After first stage printer prints 3 2 2 2 1 1<BR>
After second stage the result of the function will be 6 4 1</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Leo feels that it can be done more effectively. Your goal is to write a program, which will be able to replace the function written by Darlok agent, and will be much faster.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line of input contains the number N (0 &le; N &le; 25000). The next N lines contain integers p<SUB>i</sub> (1 &le; p<SUB>i</sub> &le; 25000) one per line. It is the input for the described function.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain the result of the function, written by Darlok Agent.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
4
1
6</PRE></TD><TD><PRE CLASS="intable">6
4
1</PRE></TD></TR></TABLE>
______________________________________________________
1291||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&mdash; Arny! What happened with coordinator?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Bad working coordinator was the everlasting trouble of their spaceship. Arny already had been working under this trouble while his not very attentive and responsible mate just noticed the breakage.
Judging by schematics the broken module of coordinator consists of the set of special gears connected with each other in order to transfer the traction from the kinetic generator to the lot of antenna driving engines.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Despite the extraterrestrial origin of these gears, they are connected by usual terrestrial method: the cogs of one gear-wheel get into the slots between cogs of another gear-wheel. So the rotation of the first gear-wheel is transmitted to the second gear-wheel.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the multiple Arny’s revisions, no unnecessary gears stayed in the coordinator. It means that there is no cycles in gears connection graph. The only problem now is to check that all the gears have right directions and speeds of rotation.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line of input contains the number of gear-wheels in mechanism <i>N</i> (1 &le; <i>N</i> &le; 1000). The next <i>N</i> lines contain the information about the gear-wheels. <i>i</i>-th line contains <i>K</i> (1 &le; <i>K</i> &le; 1000)&nbsp;&mdash; the number of cogs on the <i>i</i>-th gear-wheel followed by the list of gears, that are connected to the <i>i</i>-th one. Zero ends the list.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line of input contains the number of gear-wheel, that is connected to the kinetic-generator and the speed of its rotation <i>V</i> <nobr>(1 &le; <i>V</i> &le; 1000)</nobr>. This gear-wheel rotates in counter-clockwise direction.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain <i>N</i> lines. In the <i>i</i>-th line there is a speed of rotation of <i>i</i>-th gear-wheel in the form of irreducible fraction. Numerator and denominator of this fraction should be separated by the sign ‘/’. If speed is negative, it is assumed that the gear-wheel rotates in clockwise direction (in this case the minus sign should be displayed before numerator). Otherwise the gear-wheel rotates in counter-clockwise direction. If speed equals zero than numerator should be equal 0 and denominator should be equal to 1. It is guaranteed that neither numerator nor denominator of all speeds will be greater than 10<SUP>6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
10 2 3 0
20 1 0
40 1 4 0
100 3 0
1 6</PRE></TD><TD><PRE CLASS="intable">6/1
-3/1
-3/2
3/5</PRE></TD></TR></TABLE>
______________________________________________________
1292||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">BANG! Loud sound of warning sirens had filled the living and service rooms of the space cruiser “Admiral Brisko” — flagship of 3rd earth fleet. It was on the way to Sirius, when light Zerg scout-ship appeared from nowhere. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— Capta-a-ain!<BR>
— Quiet! Damage report!<BR>
— Captain! Before the enemy ship was destroyed, it had damaged our left reactor, left engine and the onboard computer. We are doomed! They will intercept and destroy us!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was absolutely useless to even try to get to Sirius without left engine. The same was about returning to the Earth: enemy ship certainly reported their coordinates to the rest of Zerg fleet, and light Zerg interceptors could be already on the way to their feeble cruiser with only one goal. And this goal was not to help them to repair the left engine…<BR>
There was only one solution — try to reach the nearest Mars space station. Uh! You don’t know what is a Mars space station?! It is a new defensive weapon of Martians — mobile, well defended and almost invulnerable space fort for defense of strategically important routes of Union of Five (union of the Earth, Mars, Venus, Andromeda and Sirius). There are many space stations located in special way along such important routes. Every space-week, in order to maintain secrecy the positions of space stations change according to weekly updates of the Secret Mars Key (SMK)!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— Call the programmer here! — bark out the captain.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s guess what is your role here? Right! Here is your play! You task is to write program for calculation of the distance to the next space station — “Andromeda-Sirius-4”. It’s good that the secret algorithm of the station positioning is not a secret at all! Mmm… May be except Martians themselves… It’s quite simple: first base is located at the distance equal to SMK from the beginning of the path (Sirius in our case). The next station is located at the distance of F(SMK) from the first. Third station — at the distance of F(F(SMK)). And so on. Here F — is the Top Secret Mars Function (TSMF) It’s value is the sum of the cubes of digits its argument in decimal notation (for example F(12) = 1^3 + 2^3 = 9). So if the distance from the (I − 1)-th to I-th stations is X, then the distance between I-th and (I + 1)th stations is F(X). “What a nonsense?!” — you’ll say. And you will be absolutely right, but you should not be so strict — the authors of that idea were just small pretty downy rabbits — Martians.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your cruiser is located between (N − 1)-th and N-th space stations at the distance of L from (N − 1)-th station. Taking N, K (Secret Mars Key) and L as input your program should output the distance M between your cruiser and N-th station. Oh, by the way! The value of SMK is always divisible by 3. It’s normal for Martians — all their numbers are divisible by 3.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Number T (2 &le; T &le; 33333) is placed in the first line of input — it is the number of tests for your program. It followed by the next T lines. Each of these T lines contains 3 integer numbers: N (2 &le; N &le; 33333), K (3 &le; K &le; 33333) and L (L &ge; 1).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">T lines. I-th line contains the calculated value of M for I-th test case.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
4 6 123
7 93 49</PRE></TD><TD><PRE CLASS="intable">18
104</PRE></TD></TR></TABLE>
______________________________________________________
1293||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s restless now on the slips of the intergalactic port’s sixth dock of planet of Torn. No longer then in a month the reconstruction of the small ironclad corvette “Eniya” will be finished. And again this battle ship and its brave team would have to struggle for the control over plutonium mines of Sibelius. The work cannot be stopped even for a second, self-powered laser welders work round the clock. Joints of robots-repairers fuse because of this permanent work. Nevertheless, they can’t stop not for a single moment.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now in all this turmoil it is discovered that corvette’s thermopanels again need an urgent processing with thorium sulphide. It is known that the processing of the one square meter of the panel needs 1 nanogramm of sulphide. In general, it is needed to process <i>N</i> rectangular panels, which dimensions are <i>A</i> by <i>B</i> meters. It is necessary to calculate as fast as possible, how much sulphide is needed in general for the processing of all panels of “Eniya”. Moreover, do not forget, that the panels need processing of both sides.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains integers <i>N</i> (1 &le; <i>N</i> &le; 100), <i>A</i> (1 &le; <i>A</i> &le; 100), <i>B</i> (1 &le; <i>B</i> &le; 100).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the weight of thorium sulphide in nanogramms needed for the processing.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 2 3</PRE></TD><TD><PRE CLASS="intable">60</PRE></TD></TR></TABLE>
______________________________________________________
1294||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Four artificial satellites travel in one plane along the areostationary orbit around Mars. They have code names A, B, C and D and travel exactly in this order. Venus’s scouts for military purposes (for what particular purpose they did not say) decided to find a distance between satellites C and D. All Mars satellites could measure distances to the other satellites, that is why all what is needed to do is to penetrate in the computer system of satellite C and measure the distance to satellite D (or vice versa). Nevertheless, Martians are not so stupid and have not very bad defense. That is why all what could Venus’s scouts do is to break the defense of satellites A and B (that were older models). They measured distances from satellites A and B to satellites C and D, but now they do not know how to find the distance from C to D using these measurements. You can help them.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are 4 numbers: distances from A to D, from A to C, from B to D and from B to C in thousands kilometers (integers from 1 to 10000). Satellites can measure distance even through the planet and you may assume that orbit is a circle. Do not assume the radius of the orbit equal to 20392 km as it should be for the real areostationary orbit.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to find out the distance from C to D with these data, you should print "Impossible.", otherwise you are to print "Distance is X km.", where X is the required distance in kilometers (rounded to the integer number).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 7 5 7</PRE></TD><TD><PRE CLASS="intable">Distance is 5385 km.</PRE></TD></TR></TABLE>
______________________________________________________
1295||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For five days robot-loader JK546L54p has been buried under the thick layer of the Sibelian plutonium slag. The terrible strike of the atmospheric electricity has led to the depressurization of the robot’s fuel elements. Who will examine this heap of fused, broken metal here, where there is no any robot technician even at distance of a hundred parsecs? Robot-commissar even did not try to investigate what happened with JK546L54p. He ordered to throw him out into dumps and that is all. Nobody noticed that positron brains of JK546L54p were still working. If only the robopsychologist was here with JK546L54p! Of course, he would be killed with the hard gamma radiation in a moment, but… If he attached the visualizer of thoughts to the fused connectors of JK546L54p! He would see the strange performance. Robot was creating! No, I am not joking. He was investigating. Semi casual objects arose in his mind, and he examined them. Crazy properties, crazy theorems.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Besides, here is an example. Let’s take an expression 1<SUP><i>n</i></sup>+2<SUP><i>n</i></sup>+3<SUP><i>n</i></sup>+4<SUP><i>n</i></sup>.  How much zeros does its decimal notation end with? JK546L54p solved this problem, and you, student, could you?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 300000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of zeroes the decimal notation of 1<SUP><i>n</i></sup>+2<SUP><i>n</i></sup>+3<SUP><i>n</i></sup>+4<SUP><i>n</i></sup> ends with.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1296||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Developed in the beginning of XXI century, hyperjump remains the primary method of transportation for distances up to thousands parsecs. But physicists have recently discovered an amazing phenomenon. They believe the duration of the hyperjump alpha phase can be easily controlled. Alpha phase is the period when hyper-spacecraft accumulates its gravity potential. The larger is the gravity potential accumulated, the less energy is required to complete the hyperjump. 
Your task is to write a program, which would help pilots decide when to enter and when to leave the alpha-phase, in order for the hyperspacecraft to accumulate the largest possible gravity potential.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The most crude gravity field model (which you will have to use) yields the sequence of integers <i>p<SUB>i</sub></i>, which represent field intensities at different moments in time. According to this model, if the alpha-phase begins at moment <i>i</i> and ends at moment <i>j</i>, then the value of gravity potential accumulated will be equal to the sum of sequence elements at places from <i>i</i>-th to <i>j</i>-th inclusive.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains an integer <i>N</i> being the number of elements in the intensity values sequence <nobr>(0 &le; <i>N</i> &le; 60000)</nobr>. Next <i>N</i> lines specify sequence elements, each line containing a single integer <i>p<SUB>i</sub></i> (&minus;30000 &le; <i>p<SUB>i</sub></i> &le; 30000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of output contains the largest possible value of the gravity potential that can be accumulated by a hyperspacecraft during the alpha phase. You should assume that the initial gravity potential of a hyperspacecraft is equal to zero.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
31
-41
59
26
-53
58
97
-93
-23
84
</PRE></TD><TD><PRE CLASS="intable">187
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
-1
-5
-6
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1297||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The “U.S. Robots” HQ has just received a rather alarming anonymous letter. It states that the agent from the competing «Robots Unlimited» has infiltrated into “U.S. Robotics”. «U.S. Robots» security service would have already started an undercover operation to establish the agent’s identity, but, fortunately, the letter describes communication channel the agent uses. He will publish articles containing stolen data to the “Solaris” almanac. Obviously, he will obfuscate the data, so “Robots Unlimited” will have to use a special descrambler (“Robots Unlimited” part number NPRx8086, specifications are kept secret).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having read the letter, the “U.S. Robots” president recalled having hired the “Robots Unlimited” ex-employee John Pupkin. President knows he can trust John, because John is still angry at being mistreated by “Robots Unlimited”. Unfortunately, he was fired just before his team has finished work on the NPRx8086 design. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, the president has assigned the task of agent’s message interception to John. At first, John felt rather embarrassed, because revealing the hidden message isn’t any easier than finding a needle in a haystack. However, after he struggled the problem for a while, he remembered that the design of NPRx8086 was still incomplete. “Robots Unlimited” fired John when he was working on a specific module, the text direction detector. Nobody else could finish that module, so the descrambler will choose the text scanning direction at random. To ensure the correct descrambling of the message by NPRx8086, agent must encode the information in such a way that the resulting secret message  reads the same both forwards and backwards.<BR>
In addition, it is reasonable to assume that the agent will be sending a very long message, so John has simply to find the longest message satisfying the mentioned property.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help John Pupkin by writing a program to find the secret message in the text of a given article. As NPRx8086 ignores white spaces and punctuation marks, John will remove them from the text before feeding it into the program.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of a single line, which contains a string of Latin alphabet letters (no other characters will appear in the string). String length will not exceed 1000 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The longest substring with mentioned property. If there are several such strings you should output the first of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">ThesampletextthatcouldbereadedthesameinbothordersArozaupalanalapuazorA
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">ArozaupalanalapuazorA
</PRE></TD></TR></TABLE>
______________________________________________________
1298||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Even paratroopers have vacations. The flight to Sirius in the depths of “The Admiral Brisco” Leo Hao whiled away with chessboard. No, he did not like usual chess game, and in addition, he did not have likely rival. The whole day Leo amused himself with an interesting thing: he tried to travel over all cells of the chessboard with the knight so that the knight visited each cell only one time. Leo attempted one time, then second, but always something was wrong. Leo became a little angry. Then he attempted board 4*4 instead of 8*8. Again failure after failure. A little angry, with the chessboard under his arm, Leo went to look for a local programmer. They two together indeed will solve this problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is only one number <i>N</i> (1 &le; <i>N</i> &le; 8) in the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to travel with the knight over the square field <i>N</i>&times;<i>N</i> cells, then output should contain <i>N</i><SUP>2</sup> lines with tour over the chessboard with mentioned property, otherwise the only word “IMPOSSIBLE”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">a1
c2
e1
d3
e5
c4
d2
e4
c5
a4
b2
d1
e3
d5
b4
a2
c1
e2
c3
b1
a3
b5
d4
b3
a5
</PRE></TD></TR></TABLE>
______________________________________________________
1299||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Psylonian race is known to wield by far the most advanced military battle-robots. During the fight for Terra, it took four of these battle-robots only three hours to completely wipe out one of the ancient cities with adjacent territories. You’d better watch your back with them. The Earth Defense Forces command is utterly preoccupied. Personnel is being trained for military operations against Psylonians in case the armed conflict bursts out again. But working out good tactics requires modeling of the battle-robot’s artificial intelligence unit. And you are to help us!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The robot’s behavior turned out to be rather simple. He can use just four basic patterns: “Defense”, “Attack”, “Guard” and “Patrol”. Moreover, the behavior control unit you have to model implements a rather simple scheme: it takes some parameters as input and outputs one of the following commands for the robot to execute:<BR>
LEFT X – spend X energy units for turning left;<BR>
RIGHT X – spend X energy units for turning right;<BR>
FRONT X – spend X energy units for moving forward;<BR>
BACKWARD X – spend X energy units for moving backward;<BR>
FIRE P – spend P fire units for attacking the enemy;<BR>
STOP – nothing to do.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In all these cases X is calculated as follows: If the robot’s power supply has more than 100 energy units available, then X = 100; otherwise, X is the amount of power units remaining. Similarly, P is calculated as the smallest of two values: 20 and the actual amount of ammunition units remaining.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The most simple behavioral pattern is “Guard”. When it’s active, robot does not walk, it can only turn. It picks the most dangerous target, and determines angle between robot’s current line of sight and direction to the target. If the angle is less than 5 degrees (by absolute value), robot shoots. Otherwise, if the angle is greater than or equals to 5, the robot turns left; if the angle is less than or equals to -5, the command is to turn right. If there are no targets around, robot does nothing.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to the “Defense” pattern, robot’s actions are defined as follows: calculate the number of enemies and multiply it by 20. If the result is not less than the amount of ammunition units left, the robot will “Retreat and Return Fire”. Otherwise, it will act as if following the “Guard” pattern.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The “Attack” pattern works as follows: If N*NP &gt; M*MP*3, then the robot will “Advance and Return Fire”; else it will “Retreat and Return Fire”. Here: N is the total number of allied battle-robots; NP is the average amount of energy units they have remaining; M is the total number of enemy robots; MP is the average amount of energy units the enemy robots have remaining.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the battle-robot “Retreats and Returns Fire”, it checks the angle to the most dangerous enemy. If the angle is 5 degrees or more, or there are no enemies, the robot just moves backward. Otherwise, it fires its guns. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Similarly, when the battle-robot “Advances and Returns Fire”, it checks the angle to the most dangerous enemy. If the angle is 10 degrees or more, or there are no enemies, the robot just moves forward or shoots otherwise.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When “Patrolling”, the robot follows its waypoint route, if there are no enemies. If the robot encounters enemy when patrolling, then it acts as if the “Defense” pattern was active. When following a route, robot uses this algorithm to move to the next waypoint:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the angle to the next waypoint exceeds 20 degrees by absolute value, the robot turns into direction to waypoint. Note that it does not matter whether the robot is moving forward or backward while following the route. You should consider this when calculating the turn direction - the turn angle should be minimal.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Otherwise, if the angle to the next waypoint does not exceed 20, then the robot just moves towards the next waypoint.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers separated by space; the first integer is the amount of energy units available, the second one is the amount of ammunition available. The second line contains a single character, which determines the operating pattern: G stands for “Guard”, D for “Defense”, A for “Attack”, and P for “Patrol”. On the third line there are three integers: amount of enemies, average amount of energy units enemy bots possess, and angle to the most dangerous enemy target.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the robot follows the “Attack” pattern, then the fourth line contains two integers: amount of allied bots and average amount of power units remaining in their power supplies, respectively. If the robot follows the “Patrol” pattern, then the fourth line contains only one integer: angle to the next waypoint.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Angle values range from -179 to 180 inclusive, all other integers are non-negative and
none of them exceeds 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The command for the robot using the format described above.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">100 100
P
0 0 0
-100
</PRE></TD><TD><PRE CLASS="intable">LEFT 100
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 1000
A
1 10 30
100 1000
</PRE></TD><TD><PRE CLASS="intable">FRONT 10
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 1000
G
1 10 4
</PRE></TD><TD><PRE CLASS="intable">FIRE 20
</PRE></TD></TR></TABLE>
______________________________________________________
1300||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a taxation system based on the known parameters <i>N</i><SUB>1</sub>&hellip;<i>N<SUB>m</sub></i>, <i>S</i><SUB>1</sub>&hellip;<i>S</i><SUB><i>m</i>+1</sub>. in some country.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let the total annual income of a citizen is equal to <i>K</i> bibriks (<I>bibrik</i> is a local currency). A citizen pays <i>S</i><SUB>1</sub> percents from the sum <i>N</i><SUB>1</sub> bibriks and less, he pays <i>S</i><SUB>1</sub> percents of <i>N</i><SUB>1</sub> plus <i>S</i><SUB>2</sub> percents of (<i>K</i>&minus;<i>N</i><SUB>1</sub>) from the sum from <i>N</i><SUB>1</sub> to <i>N</i><SUB>2</sub>. If the income is <i>N</i><SUB>2</sub> &le; <i>K</i> &le; <i>N</i><SUB>3</sub> then the citizen must pay <i>S</i><SUB>1</sub> percents of <i>N</i><SUB>1</sub> plus <i>S</i><SUB>2</sub> percents of (<i>N</i><SUB>2</sub>&minus;<i>N</i><SUB>1</sub>) plus <i>S</i><SUB>3</sub> percents of (<i>K</i>&minus;<i>N</i><SUB>2</sub>) and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the total annual income exceeds <i>N<SUB>m</sub></i> then he is to pay <i>S</i><SUB>1</sub> percents of <i>N</i><SUB>1</sub> plus <i>S</i><SUB>2</sub> percents of (<i>N</i><SUB>2</sub>&minus;<i>N</i><SUB>1</sub>) plus … plus <i>S</i><SUB><i>m</i>+1</sub> percents of  (<i>K</i> &minus; <i>N</i><SUB><i>m</i></sub>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let the function <i>T</i>(<i>K</i>) be the total tax from the annual income <i>K</i>. Moreover, in the assumed country the government pays to the citizens additional <i>L</i> percents as the regional coefficient. This coeficient is taxed independently from the salary.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">I.e. if the salary of a citizen is <i>R</i> bibriks he may legally spend <i>R</i>&minus;<i>T</i>(<i>R</i>) + <i>L</i>%*<i>R</i>&minus;<i>T</i>(<i>L</i>%*<i>R</i>). The taxes to pay are <i>T</i>(<i>R</i>) + <i>T</i>(<i>L</i>%*<i>R</i>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The calculation of the regional coefficient and all kinds the taxes is made with rounding off to two digits after a decimal point.  The initial income is given within two digits after a decimal point too.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each employer automatically retains the taxes in favor of the government from  the annual income of his employee taking into account the regional coefficient.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a citizen works at several places, in the end of a year he is to make a recalculation of the payed taxes because the sum of retained taxes in different places may be not equal to the tax from the total income.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that calculates and outputs the difference between the tax from the total income and the sum that is retained by all his employers.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the regional coefficient <i>L</i>. Then there are pairs <i>N</i><SUB>1</sub> <i>S</i><SUB>1</sub>, <i>N</i><SUB>2</sub> <i>S</i><SUB>2</sub>, …, <i>N<SUB>m</sub></i> <i>S<SUB>m</sub></i>, 0 <i>S</i><SUB><i>m</i>+1</sub>. Each pair is located in a separate line. The number in pairs are separated by one or several spaces. The values of <i>L</i> and coefficients <i>S<SUB>i</sub></i> are given in percents (i.e. they are integers from 0 to 99).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the next lines contains the total annual net profit of the citizen on some enterprise, where he worked, taking into account the regional coefficient and taxes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input is ended by &minus;1. All the parameters are integer not greater than 10<SUP>9</sup> within two digits after a decimal point. The number of different workplaces of the citizen doesn’t exceed 30. An amount of taxation coefficients (<i>m</i>) is not greater than 20.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The difference between the tax from the total income and the sum that is retained by all his employers with exactly two digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15         
12000000 12
24000000 20
36000000 25
48000000 30
0        35
12000000   
12000000   
-1</PRE></TD><TD><PRE CLASS="intable">937233.19</PRE></TD></TR></TABLE>
______________________________________________________
1301||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a cube on the rectangular X &times; Y board. The cube side is equal to the side of a cell of the board. During one turn the cube may roll over its edge moving to the vertically or horizontally neighboring cell. There may be walls between some cells that are obstacles. The cube may not roll over the obstacles. The cube may not leave the board.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find the minimal number of turns necessary to move the cube from the initial point with coordinates A and B to the given final point with coordinates C and D. Moreover, in the final position the upper side must be the same as it was in the initial position.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two numbers X and Y separated with one or more spaces. The second line consists of the numbers A and B, and the third line consists of the numbers C and D presented in the same way. Then an information about the walls may follow. All the numbers are integers; 2 &le; X,Y &le; 10.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After a symbol ‘v’, located in a separate line, there are pairs of integers describing the walls. Here the pair of numbers M and N define a wall between the cells N, M and N+1, M. Each pair of numbers is located in a separate line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After a symbol ‘h’, located in a separate line, there are pairs of integers describing the horizontal walls in the same way. The pair M, N define a wall between the cells N, M and N, M+1.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line containing the minimal number of moves. If such a displacement is impossible, you should output “No solution”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 2
1 1
10 1
v
2 1
6 2
h
4 1
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR></TABLE>
______________________________________________________
1302||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A triangle field is numbered with successive integers in the way shown on the picture below.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The traveller needs to go from the cell with number <i>m</i> to the cell with number <i>n</i>. The traveller is able to enter the cell through cell edges only, he can not travel from cell to cell through vertices. The number of edges the traveller passes makes the length of the traveller's route.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the program to determine the length of the shortest route connecting cells with numbers <i>m</i> and <i>n</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains integers <i>m</i> and <i>n</i> separated with space (1 &le; <i>m</i>, <i>n</i> &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the length of the shortest route.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 12 </PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1303||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given set of line segments [L<sub>i</sub>, R<sub>i</sub>] with integer coordinates of their end points.
Your task is to find the minimal subset of the given set which covers segment [0, M] completely (M is a positive integer).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line of the input contains number M (1 &le; M &le; 5000). Subsequent lines of input contain pairs of numbers L<sub>i</sub> and R<sub>i</sub> (abs(L<sub>i</sub>), abs(R<sub>i</sub>) &le; 50000). 
Each pair is placed on separate line. Numbers in the pair are separated with space(s). List of pairs is ended with pair of zeroes. i &le; 100000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print in the first line of output the power of minimal subset of segments which covers segment [0, M]. The list of segments of covering subset must follow. Format of the list must be the same as described in input with exception that ending pair of zeroes should not be printed. Segments should be printed in increasing order of their left end point coordinate.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no covering subset then print "No solution" to output.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
-1 0
-5 -3
2 5
0 0
</PRE></TD><TD><PRE CLASS="intable">No solution
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1
-1 0
0 1
0 0
</PRE></TD><TD><PRE CLASS="intable">1
0 1
</PRE></TD></TR></TABLE>
______________________________________________________
1304||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two opposite vertices of the parallelepiped A with the edges parallel to the datume lines, have coordinates (0, 0, 0) and (u, v, w) correspondingly (0 &lt; u &lt; 1000, 0 &lt ;v &lt; 1000, 0 &lt; w &lt; 1000).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the n points of the set S is defined by its coordinates (x(i), y(i), z(i)), 1  &le; i &le; n &le; 50. No pair of points of the set S lies on the straight line parallel to some side of the parallelepiped A.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find a parallelepiped G of the maximal volume such that all its sides are parallel to the edges of A, G completely lies in A (G and A may have common boundary points) and no point of S lies in G (but may lie on its side).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of the numbers u, v, w separated with a space. The second line contains an integer n. The third, …, (n+2)-nd line – the numbers x(i), y(i), z(i)separated with a space. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All coordinates are non-negative, not greater than 1000 and written with not more than two digits after a decimal point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number – the volume of G with two digits after a decimal point. If the true volume has more than two digitrs after a decimal point you should round off the result to two digits after a decimal opint according to the common mathematical rules.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.0 1.0 1.0
1
0.5 0.5 0.5</PRE></TD><TD><PRE CLASS="intable">0.50</PRE></TD></TR></TABLE>
______________________________________________________
1305||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let a finite set of points M be defined on plane. The plane has a usual Cartesian coordinates. Well-formed convex hull of  set M  is minimal (relative to inclusion) convex set, containing M, and bounded by closed broken line. All sections of  this broken line should be parrallel to axes or inclined by 45°.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find a well-formed convex hull for a given set M.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line an number N (1<=N<=100 000) of  following lines is written. In the second and all next lines coordinates of set’s points is written. In every line there are coordinates (two numbers separated several spaces, each number is greater or equal to 0 and less or equal to 1000) of only one point. Some points of set can overlap, thus the same  coordinates  can be found in  different lines.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program should print the sequence of broken line’s vertices. Vertices should be enumretated in the counter clock-wise order. As a first vertex any of them can be taken. In every line exactly one vertex’s coordinates (two numbers, separated by spaces) should be put out. Every vertex of broken line should be mentioned only once.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">No three consecutive vertices of broken line should lie on a straight line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3 3
3 1
2 2
4 2
</PRE></TD><TD><PRE CLASS="intable">3 1
4 2
3 3
2 2
</PRE></TD></TR></TABLE>
______________________________________________________
1306||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given a sequence of <i>N</i> nonnegative integers. Let's define the median of such sequence. If <i>N</i> is odd the median is the element with stands in the middle of the sequence after it is sorted. One may notice that in this case the median has position (<i>N</i>+1)/2 in sorted sequence if sequence elements are numbered starting with 1. If <i>N</i> is even then the median is the semi-sum of the two "middle" elements of sorted sequence. I.e. semi-sum of the elements in positions <i>N</i>/2 and (<i>N</i>/2)+1 of sorted sequence. But original sequence might be unsorted.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write program to find the median of given sequence.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the only integer number <i>N</i> &mdash; the length of the sequence. Sequence itself follows in subsequent lines, one number in a line. The length of the sequence lies in the range from 1 to 250000. Each element of the sequence is a positive integer not greater than 2<sup>31</sup>&minus;1 inclusive. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should print the value of the median with exactly one digit after decimal point.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3
6
4
5
</PRE></TD><TD><PRE CLASS="intable">4.5</PRE></TD></TR></TABLE>
______________________________________________________
1307||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is custom to start each problem given at a programming contest with a 'tale', in order to link the problem to the real world as well as to fog its essence, especially if the essence seems too easy to understand. But this problem has no tale, because, first, it is quite unusual, and, second, the problem itself is about brevity.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Suppose that we are given a text. An archive of this text is a text satisfying the following requirements:
<OL>
<LI>An archive is a program in one of the programming languages allowed by the rules of the contest.</li>
<LI>The first line of the archive is “{PAS}”, or “/*C*/”, or “//CPP”.</li>
<LI>After compiling and executing an archive, we obtain the original text.</li>
<LI>The length of an archive is strictly less than the length of the original text.</li>
</ol>
You should write a program that outputs an archive for a given text. The archive is compiled and executed with the same parameters and restrictions that are used for compiling and executing the submitted program containing the solution of the problem. The archive might not to be in the same language as a generating it solution. Checking the problem the judges determines the archive language according to the first line («{PAS}»  — Pascal/Delphi, «/*С*/» — С, «//CPP» — C++).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a text of length not less than 20000 and not more than 200000 symbols. The text may contain capital and lower-case English letters, digits, punctuation signs, line breaks, and quotation marks. It is guaranteed that all the texts used as tests for this problem are literary texts in English.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Remark.</b> The sample input is just an illustration, it does not satisfy the requirements since it is too short and not a literary text.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output an archive of the text given in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">//CPP
#include&lt;iostream.h&gt;
int main()
{for(int i=1;i&lt;58;i++)cout&lt;&lt;i;return 0;}
</PRE></TD></TR></TABLE>
______________________________________________________
1308||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">I guess everyone who was in the cabinet of dean of USU math-mech faculty remembered the glass pyramid lying on the deans table. There is a legend that several students remembered this pyramid on all treir lifes as a part of a hard test. The everlasting question of every dean – to sent down a weak student or to give him the last chance.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The legend says that to get this last chance some weak students was to bring this pyramid by 70 rolls from one point of the table as closer as possible to given one another. Usually the destination point was the point of the deans table where the list of dismissed students lied. At the end of its path pyramid should stand on its base. And ideally pyramid should cover the locus of deans signature on the dismissing list.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the student spent all his rolls or after he confessed that he couldn’t bring it closer, the dean measured the distance between the center of pyramids base and the destination point. The legend says that the student was given the desired last chance, if this distance was record-breaking small.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">May be it’s just a beautiful legend but you can go to the deans cabinet right now and make sure that the pyramid lays on the table and the golden fog charming swirls in its depth… So, just in case, you’d better to train a little in rolling the pyramid from one point to another.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You can assume that the pyramids base is square and its lateral faces – regular triangles. You can roll the pyramid by turning it from one face to the adjacent one around some edge. During this turning the edge should not slide on surface of the table. Moreover to make the test harder the dean demands you to obey such a rule: if after the turn around some edge the pyramid stands on its base, the next turn can be performed either around the same edge or around the opposite edge of the pyramids base only. There are no any restrictions on the rolling from the triangle faces.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains two real numbers – coordinates of the destination point. The pyramids edge length is concidered to be equal to 1 in the coordinate system. The origin coincides with the center of the pyramids base at the initial moment. The edges of the pyramids base at the initial moment are parallel to the coordinate axes.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain only one real number – the minimal possible distance between the center of the pyramids base after rolling and the destination point within 4 digits after a decimal point. The base edges may  be not parallel to the coordinate axes at the final moment of time, but the pyramid should stand on its base. You can perform not more than 70 turns of pyramid during its rolling.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2.3660254037 1.3660254038</PRE></TD><TD><PRE CLASS="intable">0.0000</PRE></TD></TR></TABLE>
______________________________________________________
1309||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dispute is a great thing! It is known that the truth is born in a dispute. Two organizers of the Ural Championship have an argument. The first of them says that computing the value of a function is a very stupid and useless problem for a programming contest. His reasoning is that when the definition of a function is known and there is enough time for the necessary preparations, it is possible to calculate the value of the function at any point very fast. The second organizer asserts that not any function can be calculated fast enough. To resolve this dispute, they decided to make an experiment. So you are to prove that you are really able to calculate the value of a function at any point fast enough.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The function f(n), where n is an integer, is defined recursively by the following expressions:
<UL>
<LI>f(0) = 0,
<LI>f(n) = g(n, f(n-1)),
</UL>
where g(x,y) = ((y-1)x<SUP>5</sup> + x<SUP>3</sup> – xy + 3x + 7y) % 9973, the symbol % denotes taking the residue of division.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains an integer n (0 &le; n &le; 10<sup>8</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that outputs the value f(n). And it should perform the necessary computations very fast!</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">50</PRE></TD><TD><PRE CLASS="intable">6300</PRE></TD></TR></TABLE>
______________________________________________________
1310||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Have you ever heard about ACM? May be, may be&hellip; It is known to be a new project of computing machinery lab. ACM (Abstract Computation Machine)&nbsp;&mdash; it is a new device for quite complex computations. There is only one problem: the pre-production model doesn't work properly. So, the diagnostics is necessary to find out the reasons of the device faults. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are some necessary facts known about the internal structure of the device. It consists of <i>L</i> independent registers. Each of these registers is able to store the number in the range from 1 to <i>M</i>. Not all registers are used for computations&nbsp;&mdash; some of them are used for the proposes of error control. The values of these registers are choosing in such way, that the sum of the values of all registers is divided by given number <i>K</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The values of all registers of ACM completely define the state of device. So for proposes of diagnostics it is enough to know the values of all these registers. The problem is that developers who created the diagnostics procedure had decided to optimize the presentation of diagnostics information. So instead of simple list of register values the procedure returns the single integer&nbsp;&mdash; code of the state.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This code should completely describe the state of device. That's why developers decided to calculate it such way. State of device&nbsp;&mdash; is an arbitrary vector of length <i>L</i>, satisfied defined above demands. And the code of the state is just an index of this vector in the lexicographically increasing list of all possible states. (Note that the first state has index 0). It's easy to understand that such vector is really completely defines a state of the ACM.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now the device faults and outputs code of the state. The error code has become useful! Now it is necessary to reconstruct the values of device registers from this code. As you guessed&nbsp;&mdash; it is your entry!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains three numbers <i>L</i>, <i>M</i> and <i>K</i> (1 &le; <i>L</i> &le; 100; 2 &le; <i>M</i> &le; 50; 1 &le; <i>K</i> &le; 50) 
The second line contains an integer number <i>N</i>&nbsp;&mdash; error code, returned by the ACM device.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write the program that outputs the values of device registers, corresponding to the code <i>N</i>. I.e. <i>L</i> integer numbers, separated by spaces. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 10 4
213</PRE></TD><TD><PRE CLASS="intable">9 6 1</PRE></TD></TR></TABLE>
______________________________________________________
1311||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As they say, every man must build a house, plant a tree, and grow a son during his life. So a programmer Vasechkin decided not to stay behind and to start building his own house. Vasechkin knew that his taste was not bad and thus he himself decorated the facade with brickwork. He carefully attached each brick with cement solution to a vertical wall. The result was very nice. Each brick was placed horizontally and lay on no more than one brick from the lower row. Vasechkin finished his work and thought. The time would pass and the cement solution between the bricks would crack. And one would like this beauty to remain for ages. So would it be stable even without the cement? It is necessary to perform complicated calculations, taking into consideration that all bricks have the same height, density, and width, but different lenghts. Also, a brick (or a system of bricks) with center of gravity on the edge of its support or outside it is considered to be unstable.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer H, which is the number of brick rows, i.e., the height of the wall (0 &le; H &le; 10000). Then the disposition of bricks in the rows is given, row by row, beginning from the topmost one. For each row, there is a line containing an integer K, which is the number of bricks in this row (0 &le; K &le; 1000); each of the next K lines contains two integers L<SUB>i</sub> and R<SUB>i</sub>, which are the coordinates of the left and right edges of the i-th brick. It is known that L<SUB>i</sub> &lt; R<SUB>i</sub> &lt; L<SUB>i+1</sub> and 0 &le; L<SUB>i</sub>, R<SUB>i</sub> &le; 10000. The number of all bricks does not exceed 10<sup>6</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should write a program that outputs “Yes” if all the bricks are stable and “No” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 
10 20
3 
1 7 
13 17 
100 200
2 
0 20 
60 160</PRE></TD><TD><PRE CLASS="intable">Yes</PRE></TD></TR></TABLE>
______________________________________________________
1312||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once I dropped into a cafe to have a snack. I took a first course (a big round plate), a salad (a smaller round plate), and a cup of tea (on a small saucer). I tried to arrange all this on a rectangular tray, which was quite a problem. “Yes, a problem! A nice problem for the Urals Championship!”, I thought.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now you are to solve this problem. I will give you the size of the tray and of the three plates, and you should try to arrange the plates on the tray.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the sides of a rectangular H and W and the radii of circles R<SUB>1</sub>, R<SUB>2</sub>, R<SUB>3</sub>. All the numbers are positive integers and do not exceed 10<sup>6</sup>. The numbers are separated with spaces or line breaks.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the only number 0 if the required arrangement is impossible. Otherwise, you should output three pairs of numbers, which are the coordinates of the centers of the plates. The coordinates must be given in the following coordinate system: the origin is the corner of the tray, the X axis is directed along the side of the tray whose length is given first, the Y axis is directed along the other side of the tray. The order of the pairs of coordinates should correspond to the order of the radii given in the input data.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">800 400 200 200 50
</PRE></TD><TD><PRE CLASS="intable">200.0000 200.0000 600.0000 200.0000 400.0000 350.0000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">800 400 200 200 51
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1313||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ural doctors worry about the health of their youth very much. Special investigations showed that a lot of clever students instead of playing football, skating or bicycling had participated in something like Programming Olympiads. Moreover, they call it sports programming! To sit near the monitor and think during 5 hours a day – is it a sport? To do it two times per year during the contests – it is more or less normal, but during the preparations to the nearest contest they spend several hours a week sitting at their computers! It would be possible to understand if they were some blockheads and dunces, but they are ones of the best students all over the world!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To save students from the harmful habit to sit at the computer for hours, Ural doctors has invented a fundamentally new monitor with diagonal trace of a beam in its electron-beam tube. Soon the winners of Ural Programming Championship would be awarded with such monitors. In the specially designed square monitor the electronic beam would scan the screen not horizontally but diagonally. The difference of the lengths of different diagonals causes such effects as non-uniform brightness, flashing and non-linear distortions. The terrible properties of such monitors would break of the habit of looking at the monitor for hours. There is a little problem: the majority of computer video cards generates the normal “rectangle” signal for monitor. So it is necessary to develop special adapter-program, which should transform the usual “rectangle” signal to the signal necessary for this kind of monitors. Program should be fast and reliable. That’s why the development of this program is entrusted to the participants of the Ural Championship for Sports Programming.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains the single integer N (1 &le; N &le; 100) – the number of pixels on the side of new square monitor. It is followed by N lines, each containing N positive integers not exceeding 100 divided by spaces. It is the image outputting by the usual video card (as you can see the color depth of new monitor is not so large – anyway usual programmer does not need more than 100 colors).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write the program that outputs the sequence for input into the new monitor. Pixels are numbered from the upper-left corner of the screen diagonally from left ot right and bottom-up. There is no need to explain details – look at the sample and you'll understand everything.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 3 6 10
2 5 9 13
4 8 12 15
7 11 14 16</PRE></TD><TD><PRE CLASS="intable">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</PRE></TD></TR></TABLE>
______________________________________________________
1314||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The police has let a criminal slip. He has disappeared in the complicated grid of subway lines, where a chase is senseless. But the criminal does not know that there is a radio beacon attached  to his clothes. The beacon sends a signal to the police from each of the stations visited or passed through by the criminal (it is not possible to detect a signal from a tunnel between stations, because the signal is too faint). Having the information about the sequence of stations passed by the criminal, the police wants to determine the stations where the criminal might be going to, in order to set watch posts at these stations.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The police knows that the criminal behaves quite logically; he has a goal (the subway station where his shelter is located), and he is moving there using one of the shortest routes. For the criminal, the length of a route is determined by the number of spans only (in the subway, a span is a tunnel between two adjacent stations). The length of a route does not depend on the lengths of spans or the number of line changes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the number <i>N</i> of lines in the subway (1 &le; <i>N</i> &le; 50). Each of the next <i>N</i> lines contains a description of the corresponding line. A description starts with an integer K (2 &le; <i>K</i> &le; 50), which is the number of stations of the line. Then there are the numerical indices of the stations of the line, in the order in which the stations are on the line. The indices are integers from 1 to 32767. All the numbers are separated with spaces. If there is the same station index in the descriptions of two different lines, then these lines have an intersection at this station, where a change can be made. The last line of input contains surveillance data: an integer <i>M</i> &ge; 1, which is the number of stations where the criminal was registered, and <i>M</i> numbers, which are the indices of these stations in the order in which the criminal visited them.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the indices of all stations that can be the goal of the criminal, in the ascending order, one per line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2 61 62
5 75 20 85 50 61
3 10 20 30
3 30 20 85</PRE></TD><TD><PRE CLASS="intable">50
61
62
85</PRE></TD></TR></TABLE>
______________________________________________________
1315||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Speleology is a very interesting occupation. But it is also quite risky. According to the statistics, accidents are most often in spring, and many of them are caused by unexpected cave floods. In the last few years, there were several rescue operations, and each of them required quite a lot of financial resources and manpower. For the sake of economy, the Ministry for Extreme Situations issued the following order.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">-----------------------<BR>
<B>Order № 321/1.</b><BR>

For the sake of economy of resources at spring rescue operations, it is ordered to:
<OL>
<LI>Create a database of all caves and all speleologists of the Russian Federation.</li>
<LI>Put into geostationary orbits 12 satellites S-349857 to make possible the exact determination of the location of speleologists in caves.</li>
<LI>Employ programmers to develop systems of satellite control.</li>
<LI>Create a device interacting with the satellites for automatically issuing rescue instructions to a speleologist. The device specification is given in Appendices A and B.</li>
<LI>Oblige speleologists to have special equipment for urgent communication with a rescue center, including the device described in Article 4. </li>
</ol>
Minister.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Appendix A. The device specification.</b><BR>
The device has two modules.
<OL>
<LI>The module for detecting the possibility of automated rescue (MDPAR):
<UL>
<LI>determines which part of a cave is filled with water for the known configuration of the cave;</li>
<LI>determines whether automated rescue is possible if the location of a speleologist and the maximal duration of his underwater stay are known.</li>
</ul>
<LI>The module for issuing instructions for automated rescue (MIIAR): 
<UL>
<LI>given the location of a speleologist, determines the direction of movement guaranteeing reaching the surface.</li>
</ul></ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Appendix B. The principles of filling caves with water.</b><BR>
This document is a result of investigations of the Institute for Cave Studies. 
A cave is filled with water according to the following rules:
<OL>
<LI>The cave is regarded as a collection of cubicles.</li>
<LI>A cubicle is filled with water if there is a path from this cubicle to the surface.</li>
<LI>A path is a sequence of cubicles that have common side.</li>
</OL>
Here only the paths having no downward segments are considered.<BR>
-----------------------</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to implement the MDPAR.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains 5 integers <i>W</i>, <i>H</i>, <i>X</i>, <i>Y</i>, <i>D</i>, which are respectively the width and depth of a cave (in cubicles), the <i>X</i> and <i>Y</i> coordinates of a speleologist, and the number of cubicles through which he can swim without air. The following <i>H</i> lines describe the configuration of the cave. Each of these lines contains <i>W</i> characters: "#" denotes a wall, i.e., a cubicle inaccessible both for the speleologist and for water, and a dot "." denotes air, i.e., a cubicle that is possibly accessible for the speleologist and can be filled with water. The module should be able to operate in the following ranges of the parameters: 1 &le; <i>W</i>, <i>H</i> &le; 500; 1 &le; <i>X</i> &le; <i>W</i>; 1 &le; <i>Y</i> &le; <i>H</i>. 1 &le; <i>D</i> &le; 1000. Cubicles are numbered from left to right, from bottom to top.
It is known that a speleologist can reach the surface while cave is not filled with water.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output "Can be rescued by himself" if the speleologist can reach the surface following the instructions issued by the MIIAR. Otherwise, you should output "Rescue operation required".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 4 8 2 5
##..##..#
##.#.####
##......#
#########
</PRE></TD><TD><PRE CLASS="intable">Rescue operation required
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9 4 8 2 6
##..##..#
##.#.####
##......#
#########
</PRE></TD><TD><PRE CLASS="intable">Can be rescued by himself
</PRE></TD></TR></TABLE>
______________________________________________________
1316||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a deficit in cast-iron pigs in the country. They are sold at an electronic auction. Customers make their bids: announce a price at which they are ready to buy a pig (the price is between 0.01 and 10000.00 bibriks and has at most 2 digits after the decimal point). From time to time a seller puts up for sale <i>К</i> pigs at a price of <i>X</i> bibriks each. The first <i>К</i> customers who offered the same or higher price get one pig each.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Customers may cancel their bids (after a purchase a bid remains valid until it is canceled). Only bids made in a current month are valid, so each month a customer should renew his bid. If a seller did not sell all the pigs offered for sale, then the unsold pigs remain at his storehouse and don’t participate in the auction any more.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each sold cast-iron pig makes a profit of 0.01 bibriks for the auction. Having a month's log of auction operations, you are to calculate the profit of the auction in this month. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a month's operations log, one operation per line. There are three types of operations:<BR>
<UL>
<LI>“BID X” — a customer announces that he is ready to buy a pig at a price of <i>X</i> bibriks;</li>
<LI>“DEL X” — a customer cancels his bid for a pig at a price of <i>X</i> bibriks;</li>
<LI>“SALE X K” — a seller puts up for sale <i>К</i> pigs at a price of <i>X</i> bibriks.</li>
</ul>
The number of operations does not exceed 100000. All operations are correct. The last line contains the command “QUIT”.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the profit of the auction in the current month with 2 digits after the decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">BID 0.01
BID 10000
BID 5000
BID 5000
SALE 7000 3
DEL 5000
SALE 3000 3
SALE 0.01 3
QUIT</PRE></TD><TD><PRE CLASS="intable">0.06</PRE></TD></TR></TABLE>
______________________________________________________
1317||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A special device was mounted to defend a car parking from a hail. Large hailstones are detected by a special radar and evaporated by a powerful laser. The parking lot has the shape of a convex polygon and is surrounded by a high fence. The height of the fence is <i>h</i> meters. The laser is located somewhere strictly inside this polygon at the ground level. The laser can evaporate hailstones, which pass at a distance of no more than <i>d</i> meters from it. The fence is impenetrable for laser beams. Hailstones fall vertically downward. It is known that the location and power of the laser are such that it can destroy all hailstones falling to the territory of the parking lot before they reach the level of the upper edge of the fence. The laser destroys all hailstones it can, regardless of whether they would fall inside or outside the fence. The laser can perform all the necessary operations instantly, so it can destroy several hailstones in different places practically simultaneously. Knowing the coordinates of the places where hailstones would fall, you should determine how many of them will be destroyed by the laser.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> (3 &le; <i>n</i> &le; 10), which is the number of polygon vertices, and a real number <i>h</i> (1.00 &le; <i>h</i> &le; 100.00), which is the height of the fence. The following <i>n</i> lines contain pairs of real numbers, which are coordinates (in meters) of the polygon vertices. The vertices are given in the order of bypass. The next line contains the number <i>d</i> (<i>h</i> &lt; <i>d</i> &lt; 1000.00) and the coordinates of the laser. It is followed by a line containing the number of hailstones <i>k</i>. And the following <i>k</i> lines contain pairs of real numbers, which are <i>x</i> and <i>y</i> coordinates of hailstones. Absolute values of all coordinates do not exceed 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that outputs exactly one integer, which is the number of destroyed hailstones.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 10.00
1.00 0.00
0.00 1.00
-1.00 0.00
0.00 -1.00
50.00 0.00 0.00
5
0.00 0.00
1.00 1.00
2.00 2.00
3.00 3.00
4.00 4.00
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1318||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given a set <i>A</i> of <i>N</i> unordered 128-bit numbers. You are to compute a value of the function</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>A<SUB>k</SUB></i> is the <i>k</i><SUP>th</SUP> element of <i>A</i>, log<SUB>10</SUB><i>X</i> — the integer part of the decimal logarithm of <i>X</i>. We’ll assume that log<SUB>10</SUB>0 = 0.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a number <i>N</i> &le; 5000. In the following <i>N</i> lines there are 128-bit numbers <i>A<SUB>k</SUB></i> presented by sets of numbers (<i>a</i><SUB>1<i>k</i></SUB>, <i>a</i><SUB>2<i>k</i></SUB>, <i>a</i><SUB>3<i>k</i></SUB>, <i>a</i><SUB>4<i>k</i></SUB>), each of them lies in range from 0 to 2<SUP>32</SUP>-1. The number <i>A<SUB>k</SUB></i> can be obtained from this set according to the formula</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>A<SUB>k</sub></i> = 2<SUP>96</sup><i>a</i><SUB>1<i>k</i></sub> + 2<SUP>64</sup><i>a</i><SUB>2<i>k</i></sub> + 2<SUP>32</sup><i>a</i><SUB>3<i>k</i></sub> + <i>a</i><SUB>4<i>k</i></sub>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the value of the function for the given set.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0 0 2324
0 2332 0 0</PRE></TD><TD><PRE CLASS="intable">44</PRE></TD></TR></TABLE>
______________________________________________________
1319||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— You programmers are lucky! You don't have to deal with these terrible people – designers… 
This story happened with me not so long ago. We had an order from a company building a new hotel. One day they brought a sketch to our workshop. They said that THIS was invented by a very cool designer. They said they had paid heaps of money for THIS. So, THIS had to be built. In general, THIS was not a very complex thing. It was just a square set of shelves where a porter puts guests' mail. Usual hotels have usual stands with shelves for this purpose. But this cool designer had turned everything upside down! To be more precise, not exactly upside down, but upon a corner. Moreover, the cells should be numbered from the right to the left, from the top to the bottom, looking at THIS, staying on its corner, of course. Tell me please, how can the master attach the labels with numbers to THIS? He will look on the shelves, staying normally on its side, you know. He will get tangled on the fourth label already! I will get tangled on the seventh, myself… Actually one should make such designers to label the shelves themselves.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— Oh! You are the cool programmer, I know. Couldn’t you help me? I need just a printout of the table with an arrangement of the labels in the cells. But not in such way as THIS will hang on the wall, but as THIS stands on the table of my workshop. Yes, I understand that you are busy, but you are busy every time! Preparations to the Ural Championship, tests, solutions… So what? If you can’t do it yourself – entrust your competitors with this task. They are the best programmers all over the world, aren’t they? I don’t believe that they couldn’t  print the desired table having the size of the square! I would never believe it! So… Excellent! I will take the desired printout away after the contest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of the only one integer N (1 &le; N &le; 100), which is the size of the square.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that outputs the table of numbers, as they would be arranged when THIS would stand in the workshop. The label with number 1 should be in the upper right corner and other numbers should be arranged along the diagonals from the top to the bottom. The label with the last number (N*N)  should be in the lower left  corner.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">4 2 1
7 5 3
9 8 6
</PRE></TD></TR></TABLE>
______________________________________________________
1320||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a simple graph with an even number of edges. You are to define if it is possible to present it by the set of pairs of adjacent edges (having a common vertex).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains a sequence of the numbers pairs. Each pair denotes vertices identifiers of one edge. All the identifiers are integers from 1 to 1000. You may assume that there are no loops and multiple edges in the graph defined by the input data.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“1” (without quotation marks), if the decomposition is possible and “0” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2
2 3
3 1
1 10
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 2
2 3
3 1
4 10
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1321||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"Let's go!", thought a hotel's manager entering an elevator. He pressed the tenth floor button and meditated. The day was not easy. The manager looked at the floor indicator, saw the number 9, and prepared to get out. But the elevator did not stop. The nine gave place to eight, then to seven. The manager became amazed. He remembered precisely that he had entered the elevator at the first floor. He was sure that the elevator goes up. Yes, it was not an easy day, but not to such an extent! Then he saw eight instead of seven, then there was nine again, then ten, and the elevator stopped. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The strange behavior of the elevator worried the manager. The next morning he decided that the problem was with the floor indicator, and so a repairman should be called for.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The repairman comes by a helicopter, enters the building through a window at one of the floors, gets into the elevator, and goes several floors up or down comparing the numbers on the indicator with the numbers of floors. The indicator can show several digits, and each digit place has 7 short linear indicating lamps shown here:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">These lamps allow to show any digit:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The indicator does not show leading zeros and has no "extra" lamps, that is lamps which will never light up in this building. A properly working lamp switches on or off when it is needed; a defective lamp is always on or always off.  During his journey in the elevator, the repairman must find all the defective lamps. For the sake of economy, it is necessary to minimize the number of passages between floors needed for this work. The floors are numbered with successive integers starting with 1.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the number of floors in the building N (4 &lt; N &lt; 10<sup>1000</sup>). </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the minimal number of passages between adjacent floors that the repairman should go in the elevator in order to find all the defective lamps.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10</PRE></TD><TD><PRE CLASS="intable">8</PRE></TD></TR></TABLE>
______________________________________________________
1322||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The secret service detected an acting foreign agent. Frankly speaking — a spy. A surveillance showed that each week the spy sends strange unreadable texts to somebody via the Internet. In order to find out which information became available to the spy, it is necessary to decipher the texts. Secret service agents got into the spy's apartment, discovered a cipher machine, and found out the principle of its operation.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An input of the machine is a text line S<sub>1</sub> = s<sub>1</sub>s<sub>2</sub>...s<sub>N</sub>. The machine constructs all cyclic permutations of this line, i.e., S<sub>2</sub> = s<sub>2</sub>s<sub>3</sub>...s<sub>N</sub>s<sub>1</sub>, ..., S<sub>N</sub> = s<sub>N</sub>s<sub>1</sub>s<sub>2</sub>...s<sub>N-1</sub>. Then the set S<sub>1</sub>, S<sub>2</sub>, ..., S<sub>N</sub> is sorted lexicographically in the ascending order, and the lines are written out in this order in a column, one under another. Thus an array N &times; N is obtained. One of the rows of this array contains the initial word. The number of this row and the last column of the array are the output of the machine.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, if the initial word S<sub>1</sub> = abracadabra, then the following array is formed:
<ol>
<li>aabracadabr = S<sub>11</sub>
<li>abraabracad = S<sub>8</sub>
<li>abracadabra = S<sub>1</sub>
<li>acadabraabr = S<sub>4</sub>
<li>adabraabrac = S<sub>6</sub>
<li>braabracada = S<sub>9</sub>
<li>bracadabraa = S<sub>2</sub>
<li>cadabraabra = S<sub>5</sub>
<li>dabraabraca = S<sub>7</sub>
<li>raabracadab = S<sub>10</sub>
<li>racadabraab = S<sub>3</sub>
</ol>
In this case, the output of the machine is the number 3 and the line rdarcaaaabb.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So it is clear how the cipher machine operates. However, no deciphering machine was found. But as the information can certainly  be deciphered (otherwise there is no sense in sending it), you have to invent a deciphering algorithm.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first and the second lines contain an integer and a string respectively. This is the output of the cipher machine. Both the number and the length of the string do not exceed 100000. The string may contain only the letters a-z, A-Z and the underlining character. The lexicographic order on the set of words is determined by the following order of characters:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The characters here are given in the ascending order.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line should contain the initial message.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
rdarcaaaabb</PRE></TD><TD><PRE CLASS="intable">abracadabra</PRE></TD></TR></TABLE>
______________________________________________________
1323||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tanya almost left for school when the telephone rang. It was the director of studies. She said the first three lessons that day had been cancelled because of an electricity failure. Tanya was the head girl of the class and the director of studies asked her to pass this news to her classmates.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— What shall I do? — thought Tanya, — there is almost no time! OK, now I’m going to call Lena, then Katya, then Masha. Lena will meantime call Vitya, she knows his telephone number, Vitya will call Masha. No, I’ll call Masha myself: let him better call Misha. Katya will call Natasha... No, it won’t work. They quarreled yesterday. Thus there is no time to think. I must immediately call Lena. Hit-or-miss everyone will know the news.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tanya managed to send this message to all her classmates. But someone knew it very late and someone heard this news from several people. In the evening, Tanya decided to work out a plan of calls and not to let it ride the next time. After all, she is the head girl of the class!.. But the problem turned out to be not so easy.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Tanya to work out a plan of calls such that a news might be delivered to all the pupils as soon as possible. All the pupils of the class must receive the message but not more than once. It takes exactly one minute to pass the news over the telephone. At the beginning only the head girl knows the news. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To solve the problem, Tanya wrote down the list of her classmates and for each classmate the list of those whom he or she might call. You may assume that if Masha can call Katya, then Katya can call Masha, too (even if only one connection is mentioned in the list). It is known that a message can be delivered to everyone in the class through a sequence of calls.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of pupils N in Tanya’s class (1 &le; N &le; 10). The second line contains the integer number M (0 &le; M &le; 45). Each of the following M lines contains a pair of pupil’s names who can call each other separated by space. The last line contains the name of the head girl. All the names in the class differ and consist of no more than 20 capital and small Latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain the time in minutes necessary to spread the news to all the class according to the suggested plan. Then there is a description of the plan. The calls that should be made simultaneously must be arranged in groups. Groups should be ordered according to the time. Each group should start with a line containing the amount of calls in the group. Each call must be described in a separate line. The description of call consists of a pair of names (who calls and whom) separated by a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
7
Tanya Lena
Tanya Katya
Tanya Masha
Lena Natasha
Lena Vitya
Natasha Vitya
Masha Vitya
Tanya
</PRE></TD><TD><PRE CLASS="intable">3
1
Tanya Lena
2
Tanya Masha
Lena Vitya
2
Vitya Natasha
Tanya Katya
</PRE></TD></TR></TABLE>
______________________________________________________
1324||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A programmer Petrov took part in a programming contest outside his home university for the first time. There he suddenly understood that using an alien computer was not so nice. The computer he was working on even didn't have his favorite text editor. And, unfortunately, the program committee had given a text formatted by a nasty DOS text editor in such a way that all right ends of lines were at the same level. Of course, it had been performed by inserting extra spaces in many places. To read such a text was a torture for Petrov. It was his luck he found the FAR Manager, which could help to delete all these disgusting spaces replacing a combination of two spaces by one space. However, there were too many spaces, so such operation had to be performed several times, because after a replacement FAR did not search for the specified combination in the processed text. For example, if there are six successive spaces, then after one round of replacement the first two spaces are replaced by one space, the middle two spaces are replaced by one space, and the last two spaces are replaced by one space. As a result, we have three successive spaces. The second round of replacement deletes the first two of the three spaces and puts one space instead of them. So we need one more round of replacement, which replaces the remaining two spaces by one space. On the whole, three rounds of replacement are needed.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petrov had already pressed Ctrl+F7, but than had a sudden thought: what if he first replaced each three spaces by one, and then each two spaces by one? So six successive spaces would be processed by two operations only! But which sequence of operations would be optimal if a text contained rows of spaces of a length not exceeding <i>N</i>?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine the minimal number of replacement rounds (each of which replaces rows of spaces of a certain length by one space) necessary for processing a text containing sequences of spaces of any length from 1 to <i>L</i>. You should also offer a scheme of the replacements. If there are many such schemes, then you should choose an optimal scheme among them, i.e., a scheme that also reduces any sequence of up to <i>K</i> spaces (<i>K</i> &ge; <i>L</i>) for a maximal possible <i>K</i>. If there are several optimal schemes, you may give any one of them.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains an integer <i>L</i>, <i>L</i> &lt; 2000000, which is the maximal length of a row of spaces in the text. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain an integer <i>R</i>, which is the minimal number of replacement rounds. The next <i>R</i> lines should describe an optimal scheme of replacements. Each of these lines must contain the length of row which are replaced by one space during the correspondent round.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">22</PRE></TD><TD><PRE CLASS="intable">4
6
3
2
2
</PRE></TD></TR></TABLE>
______________________________________________________
1325||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— Hello, may I speak to Petrov, please? Hello, my darling… You know, there was a little accident at our home… No, no, don't worry, your computer was not damaged. It is only a bit dirty there now. Well, I should say it's very dirty there and I'm at my Mom's now. Of course, I'll clean it… When? Well, maybe when I have my vacation. What? Well, when we are back from Turkey… the next vacation then. I'll stay at Mother's until then, and you may live here also. No, no, I don't insist, sure, you may stay at home if you wish so. I prepared boots for you, they are at the door. But please, don't make it worse, before you step on a clean floor, change your boots, put on your slippers, they are at the door also. Take them with you when you walk through the dirt. And when you walk on a clean floor, take the boots with you. You see, the dirt is in different places. OK, my love? Thank you!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is not a great pleasure to change boots each time you get from a clean floor to a dirty floor and vice versa, it's easier to walk extra several meters. So it is necessary to find a way of getting from one place in the apartment to another with the minimal possible number of boots changes; and among these paths the shortest one must be found.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To begin with, it is natural to determine an optimal way of passing the Most Important Route: from the computer to the refrigerator. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers M and N, which are dimensions of the apartment (in meters), 1 &lt;= N, M &lt;= 500. The two integers in the second line are the coordinates of the computer, and the third line contains the coordinates of the refrigerator. Each of the following M lines contains N symbols; this is the plan of the apartment. On the plan, 1 denotes a clean square, 2 denotes a dirty square, and 0 is either a wall or a square of impassable dirt. It is possible to get from one square to another if they have a common vertex. When you pass from a clean square to a dirty one or vice versa, you must change shoes. The computer and the refrigerator are not on the squares marked with 0.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The upper left square of the plan has coordinates (1, 1).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output two integers in one line separated with a space. The first integer is the length of the shortest path (the number of squares on this path including the first and the last squares) with the minimal possible number of boots changes. The second number is the number of boots changes. If it is impossible to get from the computer to the refrigerator, you should output 0 0. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 7
1 1
3 7
1200121
1212020
1112021</PRE></TD><TD><PRE CLASS="intable">8 4</PRE></TD></TR></TABLE>
______________________________________________________
1326||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Petrov has a hobby to collect beer-bottle taps. There’s nothing unusual — he knows hundreds of programmers that like beer. And they collect taps, too. Not everyone, but some of them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Frankly speaking, he has bought a part of his collection. But unfortunately he hasn’t got some rare taps to complete his collection. He has found some programmers over the Internet that are ready to sell him these taps. Some of the programmers sell the taps in sets with big discounts.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s left to find an optimal offer. Petrov can explain to his wife why he is to store the taps but he won’t be able to prove why he is to spend money for the collection. So he is to buy the taps as cheap as possible. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petrov has written down all the variants and has started thinking. There’s no way to find out the solution of the problem without a program!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>, an amount of available taps <nobr>(1 &#8804; <i>N</i> &#8804; 20)</nobr>. The following <i>N</i> lines contain prices of bottles with the taps if one buys them in stores. The next line contains an integer <i>M</i> <nobr>(0 &#8804; <i>M</i> &#8804; 100)</nobr> — an amount of offers to sell the taps. The following <i>M</i> lines describe the sets. The first number of each line is the price of the set and the second one is the amount of taps in the set. Then there are numbers of the taps in the set (each number lies in the range from 1 to <i>N</i>). The numbers in a set are unique. All the prices are positive integers and do not exceed 1000. The last line begins with the amount of taps that Petrov plans to buy. Then their numbers follow separated by spaces. These numbers are unique, too.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal sum of money that Petrov should spend on obtaining the necessary taps. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
10
11
12
13
3
17 2 1 3
25 3 2 3 4
15 2 3 4
3 1 3 4
</PRE></TD><TD><PRE CLASS="intable">25
</PRE></TD></TR></TABLE>
______________________________________________________
1327||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>"Janus Poluektovich (I don't remember anymore whether -A or -U) used the machine only once. He brought with him a small semitransparent box, which he connected to the Aldan. In approximately ten seconds of operation with this device, all the circuit breakers blew, and Janus Poluektovich apologized, took his box, and departed."</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sasha Privalov, a young programmer working in the SRITS (Scientific Research Institute for Thaumaturgy and Spellcraft), finds his job rather enjoyable. Indeed, he is the only programmer of such a wonderful machine as Aldan-3 - that's a refreshing shift from a dull job in Leningrad. There is just a single problem, and the problem's name is Janus Poluektovich. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On Privalov's first workday, Janus burdened Aldan with the task of four-dimensional convolution in the conjuration space. Aldan worked for a while, flashing its lights and rewinding tapes, then a fuse blew and the machine shut down. Well, replacing fuses is something even a programmer can do. But Janus is rather absent-minded, and he, being lost in thoughts about his convolution problem, forgot about the weak fuse next day. So, on a third day Janus launched his program again, blowing another fuse. The fourth day went calmly, but on a fifth day one more fuse had to be replaced. And Janus is still not going to give up…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nevertheless, these accidents don't bother Sasha, as long as he has enough spare fuses. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help Sasha in making the requisition for spare parts. The requsition is made for a specific period - from the A-th workday to the B-th workday inclusive. You should calculate, how many fuses Janus is going to blow with his programs in the specified period of time.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer A. The second line contains an integer B. 1 &le; A &le; B &le; 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain one number - the amount of fuses that will be blown by Janus in the interval from day A until day B.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
5
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">100
200
</PRE></TD><TD><PRE CLASS="intable">50
</PRE></TD></TR></TABLE>
______________________________________________________
1328||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today almost everybody knows about the scientific research department of the Night Watch, located in Solovetz city. Due to the artful actions of Zavulon (the boss of Day Watch, you know) this Scientific Research Institute for Thaumaturgy and Spellcraft (SCITS) was absolutely declassified and removed from secret list already in 60s.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However this fact had not made any harm to its ability of research work. For example right now 3<SUP>rd</sup>-level wizard Vitka Korneev tests a new battle-spell of fireball in his lab in SCITS. Oh… fireball is such a ball of fire that is used for… m-m-m… for neutralization of undesirable consequences.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">New fireball appeared to be just an ingenious invention! First of all due to the incongruence of transgression inside the incub-transformation’s psy-field it has a zero radius. But its  greatest characteristic is the ability of remaining stable during the predefined number of collisions with obstacles. This characteristic is called <i>N</i>-stability: fireball is <i>N</i>-stable if it stays stable after <i>N</i> collisions but explodes after (<i>N</i> + 1)<sup>th</sup> collision. So, you may consider, that <i>N</i>-stable fireball loses one level of stability and becomes (<i>N</i> − 1)-stable after each collision with a wall. For example ordinary fireball is 0-stable. So with this invention it became possible to strike an enemy with fireball after several ricochets from the walls. So the military value of this invention is beyond questions. In addition, new <i>N</i>-stable fireball (<i>N</i> &gt; 0) has quite unusual behavior: After collisions it rebounds only from concrete walls! So, it easily flies through any other obstacles. (The theory ties this fact with the accumulation of bio-emotional energy by all static constructions of living quarters). This fact, as you can guess, causes additional military value of new invention: now it is not necessary to provide clear trajectory for the thrown fireball — it will fly thwough any obstacles before it damages the target.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But it is long way from the first prototype to the mass usage. First of all it is necessary to investigate the trajectory of the fireball flight. The following experiment is prepared for this purpose: in the rectangle room two points <i>A</i> and <i>B</i> are being chosen at random. One wizard stands at the point <i>A</i> and the target is placed at the point <i>B</i>. Wizard creates <i>N</i>-stable fireball while his assistant calculates the direction of throw with the help of special program. The direction of throw is selected such way that thrown fireball rebounds from the walls exactly <i>N</i> times and then hits the target. At the same time it should do this with the shortest trajectory (i.e. as quickly as possible).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, you are to write this special program for direction calculation. The scientists of SCITS tell that all fireballs rebound from the walls according to the law: “angle of incidence equals angle of reflection”. And after collision with room’s corner it rebounds exactly in the opposite direction. Moreover, the theory of fireballs says that, due to continuity, one collision with corner equals two collisions with walls. So, 2-stable fireball explodes after the second collision if the first was with room’s corner. And finally you may assume that the fireball is a point moving in straight lines with constant velocity.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers — width and length of the room. The second line contains the number <i>N</i> — <i>N</i>-stability of fireball. The third line contains four numbers — coordinates of points <i>A</i> and <i>B</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All numbers are integers and are separated by one or more spaces. Points <i>A</i> and <i>B</i> lie inside the room but not on its border. The room’s width and length do not exceed 1000 and are greater than 1. <i>N</i> is between 0 and 10 inclusive.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Angle in degrees (with 2 digits after decimal point), that gives the desired direction of fireball. If there are several such angles your program should output the minimal one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Angle and coordinates are measured as shown on the figure.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1000 10
3
101 5 128 8</PRE></TD><TD><PRE CLASS="intable">45.00</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Characters and background are taken from books “Monday Begins on Saturday” (Arkady and Boris Strugatsky) and tetralogy “Night Watch”, “Day Watch”, “Twilight Watch” and “Final Watch” (Sergey Lukyanenko). </DIV></DIV>
______________________________________________________
1329||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is very hard for one person to learn all galactic history. But, on the other hand, every diplomat who wants to hold a more important post in a galactic empire must know the subject well. For example, letting a spoon fall among high-rankers of the star system Arcturus means offending them awfully. (Didn’t you hear that the last conflict between systems Arcturus and Alpha flamed up because of the only shattered glass?)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fortunately, the solution was found in the Galactic Academy. For diplomats of the lower rank it is enough to learn just a single branch of history – the one that concerns only the cluster of star systems, in which he is going to work. (Diplomats of the lower rank negotiate only with planets that are located in one star cluster. How come we didn’t guess this earlier?)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Taking this very important observation into consideration, it was decided to replace a single intergalactic course with several separate courses, each covering only the part of history that refers to only one star cluster. Of course, it is necessary to learn history in chronological order, beginning from the origin of humanity. That’s why the history of the Earth needs to be included in all collections of separate histories. Then things become complicated: for example, emigrants from Centaurus system colonized the star system of Herdsman, so the textbook on the history of Herdsman system has to contain the early history of Centaurus system. In order to decide, in which textbooks which phases of history should be included, historians of Galactic Academy divided general intergalactic history into many small milestones. Then all milestones were combined into one big tree (omnipresent biologists helped historians in this work, as they had always been using these trees). The milestone referring to early history of the Earth (before the space colonization) was declared the root. Milestones referring to history of star systems close to solar system appear to be its sons (because these systems were colonized by emigrants from Earth) and so on. That’s all! To determine milestones that have to be included in a particular textbook it is only required to determine quickly, whether the milestone A is located in a subtree with the root in milestone B.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is a number N (N &le; 40000), which defines the total number of milestones. In the next N lines there are descriptions of each milestone.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each milestone is defined by two numbers: ID – an unique numerical identifier of a milestone and ParentID – identifier of the milestone which is its father in a tree. ParentID for the root equals to -1.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">(N+2)<SUP>th</sup> line contains number L (L &le; 40000) – amount of queries. The next L lines contain descriptions of queries: on each line there are two different numbers A and B. All identifiers lie between 0 and 40000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each query it is necessary to write in separate line:
<UL>
<LI>1, if milestone A is a root of subtree which contains milesone B.
<LI>2, if milestone B is a root of subtree which contains milesone A.
<LI>0, if no one of the first two conditions is true.
</UL>
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
234 -1
12 234
13 234
14 234
15 234
16 234
17 234
18 234
19 234
233 19
5
234 233
233 12
233 13
233 15
233 19
</PRE></TD><TD><PRE CLASS="intable">1
0
0
0
2
</PRE></TD></TR></TABLE>
______________________________________________________
1330||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>— Superstitions, prejudices… — said the stranger absent-mindedly. — Indolence of mind and envy, envy, shaggy envy… — He interrupted himself. — I beg your pardon, Aleksandr Ivanovich, I would dare to ask your permission to take away this ladle. Unfortunately, iron is almost not transparent for hyperfield, and growth of the hyperfield intensity in a small volume…</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the Vybegallo’s “ideal consumer” incident in the Scientific Research Institute for Thaumaturgy and Spellcraft, an automatic security system is being put into operation urgently. It is to guarantee that in any case the total hyperfield intensity won’t exceed a critical value. They pin hopes on Sasha Privalov and his Aldan machine to automagically process readings of sensors that are located all over the Institute. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All the sensors are numbered with integers ranging from 1 to N (1 &le; N &le; 10000). The reading of ith  hyperfield intensity sensor is integer k<SUB>i</sub> (-10000 &le; k<SUB>i</sub> &le; 10000). Aldan is to process quickly queries like "What is the sum of intensities read from the sensors with numbers from i to j (i &le; j)? The number of queries Q is expected to be rather large (0 &le; Q &le; 100000).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains integer N. The following N lines contain k<SUB>i</sub> numbers (one at a line). Then there are the integer Q and Q pairs of numbers i, j (each pair is in a separate line).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain Q lines with the sums of the corresponding intensity sensors readings.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1
2
3
-1
4
3
1 5
4 4
1 4</PRE></TD><TD><PRE CLASS="intable">9
-1
5</PRE></TD></TR></TABLE>
______________________________________________________
1331||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>— We call this satellite Vladya. As you know Vladislava has one more satellite, artificial as well, and also extra-terrestrial. It is smaller. We call it Slava, you get it? The planet is called Vladislava and it is natural to call its satellites Vladya and Slava, isn’t it?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— Yes, of course,— said Gorbovsky. He was familiar with this beautiful argumentation. He heard it for the third time. — You suggested it very wittily, August. Vladya and Slava — Vladislava. Splendid!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— You call these satellites respectively Y-one and Y-two on the Earth,— continued Bader,— Vladya and Slava. But we, we call them other way. We call them Vladya and Slava.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He looked at Valkenstein strictly. Valkenstein worked his jaws. As far as he knew “we” ment Bader himself and only Bader.</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">N artifacts of extra-terrestrial civilizations were found on the planet Vladislava.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The scientific spacecraft settled on the planet’s orbit and launched automatic probes, which found out that a storm-boat will be able to touch down only in one of M points on the planet’s surface because of the rough relief. Inasmuch as the transportation on the planet’s surface takes much time, it is reasonable to find the nearest landing place for each artifact. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers N and M (1 &le; N, M &le; 5000) — amounts of artifacts and landing grounds respectively. Then there is positive real R &le; 1000 — that is the planet radius. Each of the following M lines consists of latitude W<SUB>i</sub> and longitude L<SUB>i</sub> of one of the landing grounds, W<SUB>i</sub>, L<SUB>i</sub> are real numbers, |W<SUB>i</sub>| &le; 90, |L<SUB>i</sub>| &le; 180. The next N lines contain artifacts coordinates — latitude w<SUB>i</sub> and longitude l<SUB>i</sub> — real numbers, |w<SUB>i</sub>| &le; 90, |l<SUB>i</sub>| &le; 180.
All real numbers are rounded to 6 digits after decimal point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output exactly N lines. ith line should contain the distance between the i<SUP>th</sup> artifact and the nearest landing ground within two digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2
1
0 0
1 1
0 0
</PRE></TD><TD><PRE CLASS="intable">0.00
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 1
1
0 0
0 90
0 45
</PRE></TD><TD><PRE CLASS="intable">1.57
0.79
</PRE></TD></TR></TABLE>
______________________________________________________
1332||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>The last survivor was a certain Pitirim Schwartz, an erstwhile monk and inventor of the forked musket rest, who was selflessly laboring on the genie-bomber project. The essence of the project was to drop on the enemy cities bottles with genies who had been held imprisoned no less than three thousand years. It is well known that genies in their free state are capable only of destroying cities or constructing palaces. A thoroughly aged genie, reasoned Schwartz, was not about to start building palaces, and therefore things would go badly for the enemy. A definite obstacle to the realization of this concept was an insufficient supply of bottled genies, but Schwartz counted on overcoming this through the deep dragging of the Red and Mediterranean Seas.</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The genie-bomber project has eventually entered the experimentation stage. Research fellows’ doubles have constructed N cities in the testing area. Each of these cities is a circle with a radius of r. As M. M. Kamnoedov provided only one bottled genie for the experiment, experimenters decided to demolish as many cities as possible for the sake of science. It is generally known that a genie demolishes everything in the range of R around the bottle’s touchdown point. Any city contained completely within this demolition area is ruined. Before the experiment is conducted, you are required to find the maximum possible number of cities that one genie can ruin.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number N of cities (1 &le; N &le; 100). The following N lines contain the coordinates x<SUB>i</sub>, y<SUB>i</sub> of city centers (x<SUB>i</sub>, y<SUB>i</sub> are integers, |x<SUB>i</sub>|, |y<SUB>i</sub>| &le; 10000). City centers don’t coincide with each other.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line contains radius R of the genie’s area of destruction and the city radius r (1 &le; R, r &le; 10000). R and r are integers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximum number of cities that can be destroyed by one bottled genie.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0
0 4
4 0
3 1
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
0 0
0 1
0 2
0 3
0 4
1 1
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1333||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thanks to your effortful work, the genie-bomber has successfully passed all the tests. But Modest Matveevich Kamnoedov has some more problems to solve. He is concerned with efficiency of the bombing. Basically, he needs to calculate the area of a testing ground that a genie bombardment can cover.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We will assume that the testing ground is the portion of the plane defined by two inequalities: 0 &le; x &le; 1, 0 &le; y &le; 1. One genie blast zone covers a circle on the plane. Point of the testing ground is covered with the bombardment if it lies within one or more blast zones. You have to calculate the coverage efficiency – that is, the portion of the testing ground area that is covered with the bombardment.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first input line there will be one number N, which is the number of bombs dropped (N &le; 10). The following N lines contain three numbers x<SUB>i</sub>, y<SUB>i</sub>, r<SUB>i</sub> each, where x<SUB>i</sub> and y<SUB>i</sub> define the center of the i<SUP>th</sup> genie bomb blast zone (0 &le; x<SUB>i</sub>, y<SUB>i</sub>, r<SUB>i</sub> &le; 1), and ri defines its radius.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">should contain one real number - coverage efficiency percentage (that is, percentage of the testing ground area covered with the bombardment in relation to the total testing ground area, where the testing ground is the square defined by inequalities 0 &le; x &le; 1, 0 &le; y &le; 1). Precision of the result is required to be 1% or better.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
0.5 0.5 0.5
</PRE></TD><TD><PRE CLASS="intable">78.539816
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0.2 0.2 0.5
0.8 0.8 0.5
</PRE></TD><TD><PRE CLASS="intable">80.74292
</PRE></TD></TR></TABLE>
______________________________________________________
1334||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Taking the front staircase, which to my memory was used only once when the most august personage from Africa came to visit, I descended into the limitless vestibule decorated with a multi-century accumulation of layers of architectural excesses, and peered into the gatehouse window. Two Maxwell macro-demons were oscillating about in its phosphorescent gloom. They were playing at the most stochastic of all games&nbsp;&mdash; pitch-and-toss. They occupied all their free time with this diversion. Looking more like poliomyelitis virus colonies under an electron microscope than anything else, they were huge, indescribably inept, lethargic, and dressed in worn liveries. As befit Maxwell demons, they opened and closed doors throughout all their life. They were experienced, well-trained exemplars, but one of them, the one in charge of the exit door, had reached retirement age, which was comparable to the age of the galaxy, and now and then reverted into second childhood, malfunctioning ignominiously. Thereupon, someone from Technical Maintenance would put on a driving suit, enter the gatehouse with its argon atmosphere, and bring the oldster back to reality. 
Following instructions, I cast a spell on both of them, that is, I crossed the information channels and locked the input-output peripherals to myself. The demons did not react, being otherwise absorbed. One was winning, and, correspondingly, the other was losing, which greatly disturbed them, since it upset the statistical equilibrium.</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The fact is that pennies matching is not stochastic enough. Sasha is lost in thoughts what game may be better. Maybe it is stochastic checkers? This is a very simple game. Demons in turns put checkers of two colors on the black cells of the chess field. Loses that player, after whose move one of the opponents gets the opportunity to fell the checker. </DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Checker A may be felled by checker B if checkers A and B are of different color and a cell, on which B comes after "jumping over" checker A, is free. You need to determine what move the given set of stochastic checkers was lost on.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a description of 32 stochastic checkers’ moves in traditional chess notation in the input. Moves of white pieces are in lines with odd numbers, and moves of black pieces are in lines with even numbers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of move on which a set was lost, or the word "Draw", if a set was not lost by either demon.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">a1
a3
a5
a7
b2
b4
b6
b8
c1
c3
c5
c7
d2
d4
d6
d8
e1
e3
e5
e7
f2
f4
f6
f8
g1
g3
g5
g7
h2
h4
h6
h8</PRE></TD><TD><PRE CLASS="intable">5</PRE></TD></TR></TABLE>
______________________________________________________
1335||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>"At this point, the baccalaureate of black magic, Magnus Feodorovich Redkin, brought in his keys, looking obese, customarily preoccupied, and hurt. He obtained his baccalaureate three hundred years ago for inventing the invisibility socks. Since then, he has been improving them over and over. The socks became culottes, and then pants, and now they are referred to as trousers. Still, he remained unable to make them work properly. At the last session of the seminar on black magic, when he made his serial presentation "On Certain Novel Aspects of the Redkin Invisibility Trousers," he was once more overtaken by disaster. During the demonstration of the updated model, something in its inner workings stuck, and the trousers, with a bell-like click, became invisible themselves, instead of their wearer. It was most embarrassing. However, Magnus Feodorovich worked mostly on a dissertation whose subject sounded something like "The Materialization and Linear Naturalization of the White Thesis, as an Argument of the Sufficiently Stochastic Function E Representing the Not Quite Imaginable Human Happiness." </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here he had achieved significant and important results, from which it followed that humanity would be literally swimming in not quite imaginable happiness, if only the White Thesis itself could be found, and most importantly if we could understand what it is and where it could be found."</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to Redkin's last hypothesis, the White Thesis is a positive integer triplet (A, B, C) satisfying the following property: A<SUP>2</sup> + B<SUP>2</sup> is divisible by C. The hypothesis also states that all three White Thesis components lie between the squares of two consecutive integers N and N+1.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">contains one integer N (2 &le; N &le; 30000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output three different integers A, B and C, that (A<SUP>2</sup> + B<SUP>2</sup>) is a multiple of C and <nobr>N<SUP>2</sup> &le; A, B, C &le; (N+1)<SUP>2</sup></nobr>.
If two or more such triplets exist, output any one. If there are no such triplets, then output "No solution".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">8 6 4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1000
</PRE></TD><TD><PRE CLASS="intable">1000000 1000756 1000976
</PRE></TD></TR></TABLE>
______________________________________________________
1336||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>"B-but, my dear f-fellows," said Feodor Simeonovich, having diligently deciphered the handwriting. "This is B-Ben B-Beczalel's problem! Didn't C-Cagliostro prove ththat it had no s-solution?"</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"We know that it has no solution, too," said Junta, bristling immediately. "But we wish to learn how to solve it" </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"H-how strangely you r-reason, C-Cristo… H-how can you look for a solution, where it d-does not exist? It's s-some sort of n-nonsense. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"Excuse me, Feodor, but it's you who are reasoning strangely. It's nonsense to look for a solution if it already exists. We are talking about how to deal with a problem that has no solution. This is a question of profound principle, which, I can see, is not within your scope, since you are an applications type. Apparently I started this conversation with you for nothing."</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Problems that do not have solution — that’s cool, of course. However, sometimes you want to solve something in solution of which nobody doubts. For example, to present an integer in the form of ratio of square and cube of some integers. But why does this problem always have a solution?… Ok, you will see :)</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 10<SUP>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output an integer <i>m</i>. In the second — an integer <i>k</i>. <i>m</i><SUP>2</sup> should be equal to <i>k</i><SUP>3</sup>&middot;<i>n</i>; 1 &le; <i>m</i>, <i>k</i> &le; 10<SUP>100</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">18
</PRE></TD><TD><PRE CLASS="intable">12
2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">1
1
</PRE></TD></TR></TABLE>
______________________________________________________
1337||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the wonderful properties of the Field of Wonder in the Fools Country were discovered, the huge bureaucratic mechanism appeared. So, to plant his coin in the field, Pinocchio has to gather a lot of documents. Moreover it is impossible to get some documents without getting some set of another documents first.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The issue of one type of documents is a prerogative of exactly one bureaucrat. And all of these bureaucrats are so lazy, that they agree to work only one day a week. So there are incredibly long queues to the bureaucrat’s offices during the visiting days and it really takes a whole day to get only one document.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pinocchio wants to realize a profit on his investments as soon as possible. The only way to do it is to gather all necessary documents as soon as possible. He found out what bureaucrats he needs to visit and numbered them from 1 to <i>N</i> inclusive. He found out the visiting day of week and the set of documents he should have on his hands during the visit for each of the bureaucrat.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After a short time of thinking, Pinocchio understood that he can’t find the optimal solution of his problem. And then he promised to pay a half of his future profits to one, who will help him.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains amount of bureaucrats in the Fools Country <i>N</i> (1 &le; <i>N</i> &le; 100) and amount of days in a week according to calendar of Fools Country <i>L</i> (1 &le; <i>L</i> &le; 100). The next line contains the numbers of bureaucrat’s visiting days <i>A<SUB>i</sub></i> (1 &le; <i>A<SUB>i</sub></i> &le; <i>L</i>). The next <i>N</i> lines describe the sets of documents, necessary for receiving the corresponding document. Set of documents consists of numbers delimited by spaces. It is known, that <i>i</i><SUP>th</sup> line doesn’t contain document with number <i>i</i>. Each line is ended by 0 which means the end of the set. If the set is empty (line contains single 0), the document can be gathered without any other documents. After these lines there is one more number &mdash; current day of week <i>K</i> (1 &le; <i>K</i> &le; <i>L</i>). The next line contains the list of documents Pinocchio already has. This list consists of numbers delimited by spaces and it ends with 0. And the last line of input contains the list of documents necessary for Pinocchio in the same format.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Though the Fools Country seems to have an ideal income source but because of the official circumlocution the state can’t get a huge part of the taxes. As a result there is enough money to keep only one office. So there may work not more than one official at the same time.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to get the necessary set of documents then output "No Solution". Otherwise it should output the minimal amount of days (excluding the current day) he will spend gathering the necessary set of documents, and in the next line it should output all gathered documents delimited by spaces in chronological order. If there are several such answers then the program may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 7
1 2
0
1 0
1
1 0
2 0
</PRE></TD><TD><PRE CLASS="intable">1
2</PRE></TD></TR></TABLE>
______________________________________________________
1338||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone knows what traffic congestion is. Even supercomputer won’t be able to lay an optimal passage of the city center in the rush-hours. But it is possible to simulate the traffic flows.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For that the following experiment is carried out. We choose several check points on the streets net of the city and one goal T from the checkpoints. We send a car from each checkpoint (except T) to the point T along the shortest way. In the point T we fix how many cars came from the North, how many from the South, from the East and from the West. So we can judge about the functioning capacity of the approaches to the point T.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to carry out such an experiment. No, you are not given a car! You are no to go anywhere. You are only to write a program simulating the experiment.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains the city plan description in the following format. The first line contains two integers W and H (1 &le; W, H &le; 500) – the width and the height of the plan. The next H lines consists of the streets net and checkpoints description. A symbol “.” means a place where a building is. A symbol “#”  means a road fragment. A symbol “o” (small Latin letter) means a checkpoint. A road fragment always occupy a cell completely. Two road fragments belong to one road if and only if they have a common side.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then there is a series of assignments of the experiment. First of all there is a number of assignments M (0 &le; M &le; 20). Each of the next M lines contains the number of the goal point T for the corresponding experiment. Assume that the checkpoints are numbered bottom-up and from left to right.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If some car is to choose a way from several shortest ones the next scheme of priorities acts: South, North, West, East.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the results of each experiment in the following format:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><pre>Experiment #<b>N</b>: North: <b>Rn</b>, South: <b>Rs</b>, East: <b>Re</b>, West: <b>Rw</b></pre></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where Rn, Rs, Re and Rw  - an amount of cars that came in the experiment number N to the goal point from the North, South, East and West respectively.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 5
..####....
..o..o....
..####.#o.
......##..
.o#####...
1
4
</PRE></TD><TD><PRE CLASS="intable">Experiment #1: North: 0, South: 1, East: 0, West: 0
</PRE></TD></TR></TABLE>
______________________________________________________
1339||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">O tempora! O mores!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Present-day babies progress quickly. There are exactly <i>k</i> boys and <i>k</i> girls in the kindergarten. Some boys like some girls. But in this age the boys are still knights, so, if some boy like some girl then he likes the only girl and moreover one and the same girl can’t be liked by more than one boy. And the girls in this age are true ladies. So, if a girl likes a boy she likes the only one, and different girls like different boys.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The children are ingenuous. Their secret amorousness is well-known to the nurse. Once the group decided to go for a walk and the nurse made up her mind to fall the children in pairs so that if there is a boy or a girl in love in a pair then the boy likes his pair-mate or the girl likes the boy. Help the nurse to arrange the described pairs. You may assume that either the boys or the girls enumerated with positive integers from 1 to <i>k</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>k</i> — the number of boys (1 &le; <i>k</i> &le; 250 000). The second line consists of the numbers of girls that are liked by boys: if the <i>i</i>'th boy likes some girls, her number is at the <i>i</i>'th position; if the <i>i</i>'th boy likes nobody, there is 0 at the <i>i</i>'th position. The numbers are separated with a space. The third line consists of the analogous information about the girls.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the sequence of <i>k</i> integers. The <i>i</i>'th element of the sequence is the number of a girl that is a pair-mate of the <i>i</i>'th boy. The numbers are separated with a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
3 0 0
0 2 0
</PRE></TD><TD><PRE CLASS="intable">3 2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1340||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time a cockroach Vasya running along the kitchen noticed a wonderful crumb. Vasya’s internal voice whispered him that he should reach the crumb using minimum of his vital energy. It meant that he should make the minimal number of his cockroach steps. And even Vasya’s little brain understood that he was to count the motion path neatly.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains four numbers <i>X</i>, <i>Y</i>, <i>A</i>, <i>R</i> &mdash; the cockroach’s initial coordinates, the initial angle between the axis Ox and his motion path and the minimal turning radius of the cockroach (have you thought that cockroaches can turn around at one point?). The second line consists of two numbers <i>KX</i> and <i>KY</i> &mdash; the desired crumb coordinates.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Cockroaches count coordinates off the kitchen center and measure in cockroach steps. Inasmuch as a cockroach has six legs, this measure is rather relative, so you aren’t to think that a cockroach can run only integer number of steps. For example, 314.15 steps is the length of Vasya’s night walk.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The absolute values of all the coordinates <i>X</i>, <i>Y</i>, <i>KX</i>, <i>KY</i> and the radius <i>R</i> do not exceed 10000. The angle is counted off the axis Ox counter-clockwise. It’s measured in degrees (cockroaches don’t know radians) and lies in the diapason from 0 to 360.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to find the length of the shortest Vasya’s motion path towards the crumb. The result is to be outputted within 4 digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2 90 10
21 2
</PRE></TD><TD><PRE CLASS="intable">31.4159</PRE></TD></TR></TABLE>
______________________________________________________
1341||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Major (M): You claimed that your device would be able to fly round the Earth several times and to miss not more than a couple of centimeters?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Designer (D); Yes! Our gravitational fields system of navigation absolutely...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: Furthermore it can’t be fixed by detectors and doesn’t have a receiver or transmitter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Engineer (E): It was your demand that nobody could detect the device...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: We gave it a simple task to fly round the square. It didn’t return to the initial point.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">D: Was that square large?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: It’s none of your business! This is the State secret! You are to find the device!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer (P): How did you programme the mission profile?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: The device was to fly one conditional length unit to the North, the same distance to the East, the same distance to the South and then to the West. It passed more than 40 minutes since the device was to return. If they find it before us!.. In short, you are to find it!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">D: It’s understood. Where was the initial point?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">(The major flags and in two seconds the designer lies on the floor with his hands tied and two gunpoints look at his nape).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: Why do you need this information?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">E: You misunderstood! We don’t need information! But if we knew the initial point coordinates we could say where the device was...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">(In two seconds two gunpoints look at the engineer’ nape, too).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: Who interests this information? Where is the device? One, two, ...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">P: You can’t understand! If the device reached the North Pole it can’t continue not to the North. Not to the East. Only to the South! Where the device is depends on where it started.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">(Major aims at the programmer.)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: No, it didn’t reach the Pole. It was taken into account.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">P: Let me write a program that would count the final coordinates of the device. You’ll input the latitude, the longitude and the value of your conditional length unit yourself! The program would give you the answer keeping the absolute secrecy. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M: I’ll give you a chance. You three have got a computer and five hours... Less than five hours already. If we do not get the coordinates... You’ll suffer first.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the initial latitude W. –90 &lt; W &lt; 90. The second line – the initial longitude L, -180 &lt; L &le; 180. The third line contains the length of the square side, which the device was to fly round. The length is given in kilometers. The device keeps the fixed distance 6400 km from the Earth center of mass. The South Pole has latitude –90, the North Pole – latitude 90. The East direction is counted off the 0<sup>th</sup> meridian in the positive direction. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the final latitude and longitude of the device within three digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">56.846841
53.36673
1124.427
</PRE></TD><TD><PRE CLASS="intable">56.847
60.631
</PRE></TD></TR></TABLE>
______________________________________________________
1342||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To bind a broom it’s a hard work. As there is a very big demand for this high-tech product an brooms binding enterprise is to have a big amount of production workshops. You are to help such an enterprise to allocate the work among the workshops. Each workshop can bind from 0 to <i>K</i> brooms a day. Economists of the enterprise found out that each bound broom has a different prime cost: in most cases the more brooms were bound a day the less prime cost has the last broom bound that day. However, there may be more complicated situations. As a first approximation you may assume every dependence linear. So decided the economists when they determined a dependence of the next in turn broom’s prime cost on the industrial output of the workshop. You are to find out the optimal work load of the workshops. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>N</i> and <i>M</i> (1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;1000)&nbsp;&mdash; an amount of workshops and the required industrial output of brooms, respectively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then workshops description follows. The (<i>i</i>+1)-st line describes the <i>i</i>-th workshops with three numbers <i>K<sub>i</sub></i>, <i>P<sub>i</sub></i>, and <i>Q<sub>i</sub></i> (1&nbsp;&le;&nbsp;<i>K<sub>i</sub></i>&nbsp;&le;&nbsp;100;
0&nbsp;&le;&nbsp;<i>P<sub>i</sub></i>,&nbsp;<i>Q<sub>i</sub></i>&nbsp;&le;&nbsp;1000)&nbsp;&mdash; they are the maximal number of brooms that can be bound at the <i>i</i>-th workshop a day, the prime cost of the first broom and the prime cost of <i>K<sub>i</sub></i>-th broom at the <i>i</i>-th workshop. As it was mentioned above the cost of <i>j</i>-th broom’s production is the linear with respect to <i>j</i> function. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the enterprise can’t produce the required number of brooms your program is to output the maximal number of brooms <i>V</i> that can be bound at the enterprise.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Besides, you are to output the total costs on production of <i>M</i> (or <i>V</i> if the enterprise can’t bind <i>M</i>) brooms with optimal allocation of industrial outputs within two digits after a decimal point.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output format is to be as in sample outputs below.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 10
6 20 15
100 100 100
</PRE></TD><TD><PRE CLASS="intable">Minimum possible cost: 505.00
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 10
5 30 14
1 20 20
</PRE></TD><TD><PRE CLASS="intable">Maximum possible amount: 6
Minimum possible cost: 130.00
</PRE></TD></TR></TABLE>
______________________________________________________
1343||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">12 months to sing and dance in a ring their celestial dance. One after another they hold a throne. The first is young and fierce January and the last is elderly and wise December. Leaving the throne, every month cry out a digit. During a year a 12-digit number is formed. The Old Year uses this number as a shield on his way to the Abyss of Time. He defend himself with this shield from the dreadful creatures of Eternity. Because of hard blows the shield breaks to pieces corresponding to the divisors of the number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to help the months to forge the shield for the Old Year such that it couldn’t be broken to pieces.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number of months that already left the throne. The second line contains the digits already cried out.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output an arbitrary 12-digits integer that starts with the given digits and that has no nontrivial divisors. It’s guaranteed that the solution exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
64631
</PRE></TD><TD><PRE CLASS="intable">646310554187
</PRE></TD></TR></TABLE>
______________________________________________________
1344||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As usual old man has planted a turnip. Every year he plants a turnip and every year happens one and the same thing — the turnip grows gigantic. May be the old man has good artificial fertilizers, may be his surname is Michurin, may be the atomic station that is not far from that place tells on the yield. And this year the turnip has grown very big and the old man is to take it out.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The old man tried to call in an old wife aid but she suffers from sciatica since the previous year when they tried to take off a turnip. Granddaughter after that event received medical treatment in Switzerland (that turnip turned very expensive), and a dog, a cat and a mouse have got idiosyncrasy to root crops upon the whole.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The old man has grieved. Que faire? (<i>What is to be done? — Fr</i>) The turnip is to be taken off!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Suddenly the old man recalls that he’s got a precious book at the garret — a course of physics by Pyoryshkin for the secondary school. He remembered that very interesting things are described in this book – pulleys. The construction of such pulleys may help the old man to get along without the old wife, granddaughter, the dog, the cat and the mouse.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The old man takes the book, reads it, — and assembles a construction. Now he is sitting at the porch of his house and thinks how much will this construction help him to save on the force?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pulley is a wheel with a rope thrown over it and another rope that is bound to the axle. If the rope that is bound to the axle looks up and the ends of the other rope that is thrown over the wheel look down then it is a pulley of the <i>first type</i>. If the rope that is bound to the axle looks down and the ends of the thrown over rope look up then it is a pulley of the <i>second type</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help the old man, given a configuration of blocks of the first and the second types, to determine the win in the force while the crop hasn’t rotted. Assume that two pulleys coupled with a rope are on different heights.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer N(1 &le; N &le; 32) — that is the number of pulleys. The pulleys are numbered with integers from 1 to N. The next N lines consist of the blocks description in the following format: T X1 X2 Y, where T — the pulley type (1 or 2), the ends of the rope thrown over the current pulley look towards the pulleys number X1 and X2, the rope that is bound to the axle looks towards the pulley number Y. However there are some exclusions.
<ol>
<li>Some going up ropes are bound to the ceiling of the hothouse (the old man planted turnips in hothouses). In this case there is 0 instead of the number of pulley to which this ripe was to go.
<li>Exactly one rope that goes down from a pulley is bound to the turnip with mass 1 centner. In this case in the line with description of the i-th pulley number -1 instead of the pulley number is written.
<li>Exactly one rope going down from a pulley is free. Then there is -2 instead of the number of pulley in the description of the i-th pulley. 
</ol>
All the ropes are vertical.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output the mass of a load in centners (within 4 digits after a decimal point) that is to be hung on the free rope in order to balance the system of pulleys. If there is no such a mass output “<tt>No solution</tt>”. If any mass suits output the string “<tt>Any</tt>”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 -1 2 0
2 1 0 -2
</PRE></TD><TD><PRE CLASS="intable">2.0000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
1 3 2 0
2 1 0 4
1 -1 4 1
2 3 2 –2
</PRE></TD><TD><PRE CLASS="intable">No solution
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
1 2 2 0
2 1 1 -2
1 4 4 0
2 3 3 -1
</PRE></TD><TD><PRE CLASS="intable">Any
</PRE></TD></TR></TABLE>
______________________________________________________
1345||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once a veteran of the ACM contests, thinking about the younger generation, decided to help them to master with the cobwebs of the sports programming. He decided to make an Internet site that would contain articles on programming, different interesting problems, solutions and the sources of those solutions. But his marvelous sources look faded and poor, not as they look in his favorite development framework: the key words are not emphasized, comments don’t differ from the other text... Nothing appeals to the eye.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He knows the basis of the HTML and he understands that it is a very unpleasant work to add coloring his sources tags manually.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">- To write a program that adds tags is a duck soup! – he thought. – Or not a duck soup… May be it’ easier to do it manually… Or, may be… Eureka! If I can’t solve this problem, I’ll give it at the next ACM contest – some will surely solve the problem!… And if they make mistakes… Let them try!… </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The correct source of a program in Pascal is given The length of the input text is not longer than 100 000 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to add formatting HTML tags so that the source text would look as it is required. The requirements are as follows:
<ol>
<li>All the comments must be enclosed in the pair of tags “&lt;span class=comment&gt;” and “&lt;/span&gt;”
<li>All the key words must be enclosed in the pair of tags “&lt;span class=keyword&gt;” and “&lt;/span&gt;”
<li>All the strings must be enclosed in the pair of tags “&lt;span class=string&gt;” and “&lt;/span&gt;”
<li>All the numbers must be enclosed in the pair of tags “&lt;span class=number&gt;” and “&lt;/span&gt;”
<li>If key words, strings or numbers come upon the comments then they are assumed as a part of the comment and not as key words, strings or numbers.
<li>If key words, comments or numbers come upon the strings then they are assumed as a part of the string and not as key words, comments or numbers.
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <b>string</b> is the sequence of symbols enclosed in a pair of quotation marks “ ’ ” that does not contain other quotation marks. Or a symbol “#” which is followed by nonempty sequence of digits. In the second case it’s necessary to take the maximal sequence. E. g. in the sequence “#123” a subsequence “#1” is not a string and the entire sequence “#123” is a string.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <b>number</b> begins with a digit and contains only digits and possibly one point “.”, followed by one or more digits. As in the case of a string a number is the maximal by inclusion sequence of symbols that satisfies the given above requirement.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An <b>identifier</b> may start with a letter or underscore (“_”) and contains letters, digits and underscores. As in the cases of strings and numbers, identifier is a maximal by inclusion sequence satisfying the given requirements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <b>comments</b> of two types: comment of 1st type begins with ‘{’ and ends with ‘}’, both braces are the part of the comment; comment of 2nd type begins with ‘//’ and ends with line feed, slashes are the part of the comment while line feed is not. Nested comments are the part of the most outer comment.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Key words</b> are the following identifiers:
'and', 'array', 'begin', 'case', 'class', 'const', 'div',  'do', 'else', 'end', 'for', 'function', 'if',  'implementation', 'interface', 'mod', 'not', 'of', 'or',  'procedure', 'program', 'record', 'repeat', 'shl',  'shr',  'string', 'then', 'to', 'type', 'unit', 'until', 'uses',  'var',  'with',  'while'.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here every key word is enclosed in the pair quotation marks. The key words are given in the lower case but occur in any case in the text. E. g.,  ImPlEmentAtioN is a key word.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Begin
  writeln('Hello world!');
end.
</PRE></TD><TD><PRE CLASS="intable">&lt;span class=keyword&gt;Begin&lt;/span&gt;
  writeln(&lt;span class=string&gt;'Hello world!'&lt;/span&gt;);
&lt;span class=keyword&gt;end&lt;/span&gt;.
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Many of you have guessed that if you save the result in a file output.html and to add in the beginning of the file the following lines:
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;STYLE&gt;
    span.string {color: fuchsia;}
    span.number {color: darkblue;}
    span.keyword {font-weight: bold; color: black;}
    span.comment {font-style: italic; color: gray;}
&lt;/STYLE&gt;
&lt;PRE&gt;
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">and a line
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;/PRE&gt;
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">in the end, then having opened this file in a browser you’ll see the input text with the colored syntax.
</DIV></DIV>
______________________________________________________
1346||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s well known that a domain of any continuous function may be divided into intervals where the function would increase monotonically or decrease monotonically. A number of intervals of such a partition we will call a <i>complexity</i> of the partition. A <i>complexity of a continuous function</i> is the minimal possible complexity of partition in the domain into the monotonicity intervals. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The notion of complexity may be defined not only for continuous functions. In particular, it is applicable to the functions specified on a grid.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a description of a function F, specified on a grid. The first line contains two numbers A and B — the first and the last point of the integer grid with step 1 (0 &le; A &lt; B &le; 100 000). The second line contains the values table of the function F. The table consists of the integers F(A), F(A+1), …, F(B) separated with a space and/or linefeeds. All the values of the function F are in diapason from  –100 000 to 100 000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only number — the complexity of the function F.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 10
1 2 3 4 2 1 -1 3 6 7
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1347||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last time many users keep internet diaries &mdash; blogs. The users keep their diaries and occasionally read other’s. Those users like to count their virtual friends. A friend for them is anyone who reads their twaddle. Assume that a user reads another’s blog if he mentions the one in his diary.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output for each user a list of his friends, the people who regard him as a friend and a list of mutual friends, i.e. those who are friends of the assumed user and regard him as a friend.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the blogs of those users. For each user you are to output the mentioned above three lists. The users mark their friends with a tag &lt;friend&gt;. A <I>tag</i> is the line that consist of  small Latin letters between the marks <I>lower than</i> (&lt;) and <I>greater than</i> (&gt;). A <I>closing tag</i> is the string of small Latin between the symbols <I>lower than</i> and <I>slash</i> (&lt;/) in the beginning and <I>greater than</i> (&gt;) in the end.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a integer <i>N</i> (1 &le; <i>N</i> &le; 100) &mdash; a number of blogs in the input. The first line of each blog consists a name of the blogger. All the bloggers’ names are different. The next line starts with a tag &lt;blog&gt;. The last blog line ends with a closing tag &lt;/blog&gt;. There is no other tags <blog> in the text of blog. Each opening and closing tag has it’s pair tag in the text. Symbols &lt;, &gt; and / occur only in tags. The input contains only small and capital Latin letters, digits, symbols greater than, lower than, slash, full stops, commas and underlining symbols. The friends’ names are case sensitive. A tag can’t be torn by a line feed. A friend’s name may consist of small and capital Latin letters and an underlining symbol. A friend’s name can’t be empty. Blogs line doesn’t exceed 255 symbols. A blog contains not more than 1000 lines. An amount of friends mentioned in a blog doesn’t exceed 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each blogger from the input you are to output a list of those who’s blogs he mentioned (friends), a list of those who mentioned him in his blog (is a friend of) and a list of those who is present in both previous lists. Each list is to be outputted in a separate line and sorted in the alphabetic order. Names in a list are to be separated with a comma and space. Before the “friends” list  you are to output s string “1: ”. Before an “is a friend of” list you are to output a string “2: ”. Before a list of “mutual friends” you are to output a string “3: ”. Before those three lists you are to output a name of the blogger and an empty line beforehand (if it is not the first input blogger). A blogger is not a friend of himself even if he mentioned himself in his blog. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
xoposhiy
&lt;blog&gt;
Tomorrow I found &lt;friend&gt;_denplusplus_&lt;/friend&gt; to
 be &lt;b&gt;smartest&lt;/b&gt; blogger in the net.
Also I received interesting link from
 &lt;friend&gt;strange_human&lt;/friend&gt;
&lt;/blog&gt;
_denplusplus_
&lt;blog&gt;
Some shit about my work.
&lt;/blog&gt;
strange_human
&lt;blog&gt;
&lt;friend&gt;xoposhiy&lt;/friend&gt;
&lt;friend&gt;_denplusplus_&lt;/friend&gt;
&lt;/blog&gt;
</PRE></TD><TD><PRE CLASS="intable">xoposhiy
1: _denplusplus_, strange_human
2: strange_human
3: strange_human

_denplusplus_
1: 
2: strange_human, xoposhiy
3: 

strange_human
1: _denplusplus_, xoposhiy
2: xoposhiy
3: xoposhiy

</PRE></TD></TR></TABLE>
______________________________________________________
1348||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A goat is tied to a peg (in a point <i>C</i>) in a garden with a strong rope of the length <i>L</i> (i.e. a goat may eat a grass that is not farther than <i>L</i> meters from the peg). There is a bed of pineapples that he loves very much. The bed is a line segment with the ends <i>A</i> and <i>B</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Humph&hellip; We wonder, how much the goat is to stretch the roap in order to reach at least one pine apple? And all the pineapples? </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are points’ A, B and C coordinates and a length of the rope <i>L</i> in the input. All the numbers are integer, <i>L</i> &ge; 0, all the coordinates don’t exceed 10000 by the absolute value. The numbers are separated with spaces or line feeds.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the minimal length that the goat is to elongate the rope in order to reach the pineapples bed. The second line should contain the minimal length that the goat is to elongate the rope in order to eat all the pineapples from the bed. All the numbers are to be outputted within two digits after a decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 -6 8 6
0 0 7
</PRE></TD><TD><PRE CLASS="intable">1.00
3.00
</PRE></TD></TR></TABLE>
______________________________________________________
1349||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is a farm. Here is a farmer that counts how many animal live in his farm: a camels, b sheep, c green cockroaches. Occurs that a<SUP>n</sup> + b<SUP>n</sup> = c<SUP>n</sup>. n is given. You are to find all the rest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">n (0 &le; n &le; 100)</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Three different integers (a, b and c) such that a<SUP>n</sup> + b<SUP>n</sup> = c<SUP>n</sup>, 1 &le; a, b, c &le; 100. If there are several solutions you should output the one where a is minimal. If there are several solutions with the minimal a you should output the one with minimal b, and so on. Output &minus;1 if there is no solution.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">1 2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1350||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s dangerous to eat in a canteen &mdash; you may be poisoned by a not fresh food. One may fall into a coma because of the canteen’s chicken and the other feels OK. And vice versa. The food is cooked from <i>M</i> different food stuffs. There are <i>N</i> different food stuffs in the menu but  not all of them are at the distribution. Assume that <i>K</i>&nbsp;+&nbsp;1 students eat the food and we know for each student what products may poison him. The first student eats and he is not poisoned. How the dinner affect on the other students?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100). The next <i>N</i> lines contain the food stuffs names &mdash; non-empty sequences of Latin letters and digits with length not more than 40 symbols. Then there is a number <i>K</i> (1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;100) and <i>K</i>&nbsp;+&nbsp;1 blocks describing the menu food stuffs dangerous for the canteen visitors afterwards. The <i>i</i><SUP>th</sup> block starts with a line with an integer <i>N<SUB>i</sub></i>&nbsp;&mdash; an amount of dangerous food stuffs and then there are <i>N<SUB>i</sub></i> lines with the names of those dangerous stuffs (0&nbsp;&le;&nbsp;<i>N<SUB>i</sub></i>&nbsp;&le;&nbsp;<i>N</i>). The first block describes the food stuffs dangerous for the first student, the next <i>K</i> blocks &mdash; for the rest ones. The input ends with the line containing an integer <i>M</i> (0&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;<i>N</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>K</i> lines &mdash; the <i>i</i><SUP>th</sup> line should contain:
<UL>
<LI>YES, if the dinner is harmless for the (<i>i</i>&nbsp;+&nbsp;1)<SUP>st</sup> student,</li>
<LI>NO, if among the food stuffs there is a dangerous one for the (<i>i</i>&nbsp;+&nbsp;1)<SUP>st</sup> student,</li>
<LI>MAYBE, if there may be different situations under the given conditions.
</ul></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
Rafinad
Kefir
Pastila
Smetana
Chokolade
Kljukva
Imbir
3
3
Rafinad
Kefir
Imbir
1
Rafinad
3
Kefir
Kljukva
Smetana
2
Imbir
Smetana
3
</PRE></TD><TD><PRE CLASS="intable">YES
NO
MAYBE
</PRE></TD></TR></TABLE>
______________________________________________________
1351||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A dwarf bibr — a rare animal from the planet Globland. Aborigines of Globland, loathsome gnusmases, like the bibrs’ meat. Thet believe that a has eaten the bibr gnusmas  becomes a globalizer (i.e. a semi-god, semi-gnusmas that is not afraid of neither acid rains nor radio-active winds of Globland.) Bibrs are very peaceful animals but defending themselves from gnusmases they use all their arsenal of weapons: pistols, submachine guns, projectors and some kinds of the weapons of close fight: fungos, knuckle-dusters and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One nice morning bibr Bob woke up from the howl of anti-gnusmas siren. There were thousands of points on the radar. It meant that loathsome gnusmases scrambled out from their burrows and slowly approached Bob’s little house. But Bob was a flash guy and just a week before he had set a new Kakashnikov machine gun on his house’s roof. One burst of fire annihilates all the gnusmases that were in the arc of fire and those who survived ran away. He decided to state the value of effectiveness of his bargain and to find out how many gnusmases he would annihilate and how many of them would hide back in their burrows.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the machine gun characteristics: <i>D</i> — the range (1 &le; <i>D</i> &le; 30000), <i>X</i><SUB>1</sub>, <i>Y</i><SUB>1</sub>, <i>X</i><SUB>2</sub>, <i>Y</i><SUB>2</sub> (1 &le; |<i>X</i><SUB>1</sub>| , |<i>Y</i><SUB>1</sub>|, |<i>X</i><SUB>2</sub>|, |<i>Y</i><SUB>2</sub>| &le; 30000) — coordinates of the right and the left bounds of the arc of fire. The second line contains an integer <i>N</i> (1 &le; <i>N</i> &le; 30000)&nbsp;— an amount of gnusmases that attack Bob’s house. The next <i>N</i> lines consist of the gnusmases coordinates <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i> (0 &le; |<i>X<sub>i</sub></i>|, |<i>Y<sub>i</sub></i>| &le; 30000; <i>X<sub>i</sub></i> and  <i>Y<sub>i</sub></i> are not equal to zero at the same time). All the numbers are integer. Bob’s house coordinates are (0,0). The arc of fire is less than 180 degrees.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> lines with the answers “YES” and “NO”. “YES” — if the gnusmas will be annihilated (i.e. he is inside the arc of fire at the distance from Bob’s house not greater than the range of the machine gun). “NO” — otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 1 0 0 1
6
1 1
5 6
3 0
-1 2
0 5
-3 0
</PRE></TD><TD><PRE CLASS="intable">YES
NO
YES
NO
YES
NO
</PRE></TD></TR></TABLE>
______________________________________________________
1352||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Definition.</b> If the number 2<SUP><i>N</i></sup>&minus;1 is prime then it is called a <I>Mersenne prime number</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, 2<SUP>2</sup>&minus;1 &mdash; the first Mersenne prime, 2<SUP>3</sup>&minus;1 &mdash; the second Mersenne prime, 2<SUP>11213</sup>&minus;1 &mdash; the 23<SUP>rd</sup>, 2<sup>216091</sup>&minus;1 &mdash; the 31<SUP>st</sup>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It’s a hard problem to find those numbers without a computer. So, Euler in 1772 found the 8<SUP>th</sup> Mersenne prime &mdash; 2<SUP>31</sup>&minus;1 and then for 100 years no Mersenne prime was found! Just in 1876 Lucas showed that 2<SUP>127</sup>&minus;1 is a prime number. But he didn’t find the 9<SUP>th</sup> Mersenne prime, it was the 12<SUP>th</sup> one (the numbers 2<SUP>61</sup>&minus;1, 2<SUP>89</sup>&minus;1 and 2<SUP>107</sup>&minus;1 are prime but it was found out later). A new break-through happened only in 1950’s when with the help of the computing machinery Mersenne primes with the powers 521, 607, 1279, 2203 and 2281 were found. All the following Mersenne primes were found with the help of computers. One needn’t be a great mathematician to do that. In 1978 and 1979 students Noll and Nickel found the 25<SUP>th</sup> and 26<SUP>th</sup> numbers (21701 and 23209) on the mainframe of their University and they became famous all over the USA. But the modern supercomputers have the limits of their capability. Today the dozens of thousands people all over the world united in one metaproject GIMPS (Great Internet Mersenne Prime Search, www.mersenne.org) look for Mersenne primes. GIMPS found 8 the greatest Mersenne primes. Their powers are 1398269, 2976221, 3021377, 6972593, 13466917, 20996011, 24036583, 25964951. 2<SUP>6972593</sup>&minus;1 is the 38<SUP>th</sup> Mersenne prime, and for the last 4 numbers one can’t tell what are their sequence numbers because not all the lower numbers are checked. Those four numbers are also the greatest known prime numbers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The latest number 2<SUP>25964951</sup>&minus;1 was found on February 18, 2005, it contains 7816230 decimal digits. The one who will find a prime number with more than 10 millions digits will get a prize of $100000. You may gain the prize if you join the project.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are not now to find the 43<SUP>th</sup> Mersenne prime &mdash; the jury won’t be able to check your answer. <i>N</i> doesn’t exceed 38 in this problem. So, given an integer <i>N</i> you are to find <i>N</i><SUP>th</sup> Mersenne prime.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>(Information is actual for March, 2005)</I></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer <i>T</i> &mdash; an amount of tests. Each of the next <i>T</i> lines contains an integer <i>N</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each <i>N</i> you should output the power of the <i>N</i><SUP>th</sup> by order Mersenne prime.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">13
18
32
24
21
19
34
27
33
20
30
28
29
22
</PRE></TD><TD><PRE CLASS="intable">3217
756839
19937
9689
4253
1257787
44497
859433
4423
132049
86243
110503
9941
</PRE></TD></TR></TABLE>
______________________________________________________
1353||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya is the beginning mathematician. He decided to make an important contribution to  the science and to become famous all over the world. But how can he do that if the most interesting facts such as Pythagor’s theorem are already proved? Correct! He is to think out something his own, original. So he thought out the Theory of Vasya’s Functions. Vasya’s Functions (VF) are rather simple: the value of the <i>N</i><SUP>th</sup> VF in the point <i>S</i> is an amount of integers from 1 to <i>N</i> that have the sum of digits <i>S</i>. You seem to be great programmers, so Vasya gave you a task to find the milliard VF value (i.e. the VF with <i>N</i> = 10<sup>9</sup>) because Vasya himself won’t cope with the task. Can you solve the problem?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Integer <i>S</i> (1 &le; <i>S</i> &le; 81).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The milliard VF value in the point <i>S</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">10
</PRE></TD></TR></TABLE>
______________________________________________________
1354||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <I>word</i> is the nonempty sequence of symbols <i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>n</sub></i>. A <I>palindrome</i> is the word <i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>n</sub></i> that is read from the left to the right and from the right to the left the same way (<i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>n</sub></i> = <i>a<sub>n</sub>a</i><sub><i>n</i>&minus;1</sub>&hellip;<i>a</i><sub>1</sub>). If 
<i>S</i><sub>1</sub> = <i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>n</sub></i> and 
<i>S</i><sub>2</sub> = <i>b</i><sub>1</sub><i>b</i><sub>2</sub>&hellip;<i>b<sub>m</sub></i>, then <i>S</i><sub>1</sub><i>S</i><sub>2</sub> = 
<i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>n</sub></i><i>b</i><sub>1</sub><i>b</i><sub>2</sub>&hellip;<i>b<sub>m</sub></i>. The input contains some word <i>S</i><SUB>1</sub>. You are to find a nonempty word <i>S</i><SUB>2</sub> of the minimal length that <i>S</i><SUB>1</sub><i>S</i><SUB>2</sub> is a palindrome.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains <i>S</i><SUB>1</sub> (it may consist only of the Latin letters). It’s guaranteed that the length of <i>S</i><SUB>1</sub> doesn’t exceed 10000 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>S</i><SUB>1</sub><i>S</i><SUB>2</sub>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">No
</PRE></TD><TD><PRE CLASS="intable">NoN
</PRE></TD></TR><TR><TD><PRE CLASS="intable">OnLine
</PRE></TD><TD><PRE CLASS="intable">OnLineniLnO
</PRE></TD></TR><TR><TD><PRE CLASS="intable">AbabaAab
</PRE></TD><TD><PRE CLASS="intable">AbabaAababA
</PRE></TD></TR></TABLE>
______________________________________________________
1355||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A student dreamt that he walked along the town where there were lots of  pubs. He drank a mug of ale in each pub. All the pubs were numbered with positive integers and one could pass from the pub number <i>n</i> to the pub with a number that divides <i>n</i>. The dream started in the pub number <i>a</i>. The student knew that he needed to get to the pub number <i>b</i>. It’s understood that he wanted to drink on the way as much ale as possible. If he couldn’t get from the pub number <i>a</i> to the pub number <i>b</i> he woke up immediately in a cold sweat.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>T</i>&nbsp;&mdash; an amount of tests. Then <i>T</i> lines with integers <i>a</i> and <i>b</i> follow (0 &le; <i>T</i> &le; 20; 1 &le; <i>a</i>, <i>b</i> &le; 10<SUP>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test in a separate line you are to output the maximal number of mugs that the student could drink on his way.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
30 89
2 16
3 243
1 1
2 2
</PRE></TD><TD><PRE CLASS="intable">0
4
5
1
1
</PRE></TD></TR></TABLE>
______________________________________________________
1356||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>“How do physicists define prime numbers? Very easily: prime numbers are the number 2 and all the odd numbers greater than 2. They may show that this definition corresponds to the mathematical one: 3 is prime, 5 is prime, 7 is prime… 9? 9 is certainly not prime. Then: 11 is prime, 13 is prime. So 9 is the experiment mistake.”</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_right">From mathematical analysis course</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once physicist and mathematician argued how many prime numbers one needed for the purpose that their  sum was equal to <i>N</i>. One said that it wasn’t known and the other that 3 was always enough. The question is how many.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains <i>T</i>, an amount of tests. Then <i>T</i> lines with integer <i>N</i> follow (0 &le; <i>T</i> &le; 20; 2 &le; <i>N</i> &le; 10<SUP>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test in a separate line you should output prime numbers so that their sum equals to <i>N</i>. An amount of such prime numbers is to be minimal possible.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
2
27
85
192
14983
3
7
</PRE></TD><TD><PRE CLASS="intable">2
23 2 2
2 83
11 181
14983
3
7
</PRE></TD></TR></TABLE>
______________________________________________________
1357||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Several students wake up in the morning and want to drink a cup of hot coffee. But they have only one teakettle. In this case, they usually operate according the following instruction:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Students should wake up one after another and act as follows:
<UL>
<LI>If nobody boils the water, student should fill the teaketle with 200 ml of water and put it on the burner. Water has initial temperature 20 &deg;C.</li>
<LI>If another student boils water already, he should add 200 ml of water in the teakettle. As a result, water temperature equalize according to law T = (m<SUB>1</sub>T<SUB>1</sub> + m<SUB>2</sub>T<SUB>2</sub>) / (m<SUB>1</sub> + m<SUB>2</sub>), where m<SUB>1</sub>, m<SUB>2</sub> – mass of water in teakettle and mass of additional portion of water, and T<SUB>1</sub>, T<SUB>2</sub> – their temperatures.</li>
<LI>If another students boil water and the teakettle is full already then other students should wait until the teakettle becomes free. The teakettle capacity is 1 liter (1 kg) of water i.e. 5 students are able to boil water simultaneously.</li>
<LI>As soon as water begins to boil, i.e. the water temperature runs up to 100 &deg;C, the teakettle should be put off the burner and water should be poured into the cups. At the same moment teakettle can be used for boiling next portion of water. Water heats up by &Delta;T = (P &Delta;t) / (C m) degrees during &Delta;t seconds, where P – is a power of burner, C = 4190 J/kg&middot;K – specific heat of water, m – water mass.</li>
</ul>
You are giver wake up time for each student and you are to simulate this process to find for each student the time when he will be able to drink a cup of coffee. Assume, that students can perform described manipulations in a moment. Power of burner P = 400 Watt.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains single integer <i>N</i> – amount of students (0 &le; N &le; 500). Each of the following <i>N</i> lines contains a wake up time of corresponding student in format HH:MM:SS. Times are sorted in ascending order. All students wake up at the different moments but during the same day, i.e. all times different and between 00:00:00 and 23:59:59.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each student you should output the time when he will be able to drink his coffee in the same format HH:MM:SS.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
07:00:00
07:02:00
07:05:30
12:00:00
</PRE></TD><TD><PRE CLASS="intable">07:08:23
07:08:23
07:08:23
12:02:48
</PRE></TD></TR></TABLE>
______________________________________________________
1358||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are N computers in a computer club. It’s known which computers are to be connected with a cable in order to make the net work properly. It’s left to arrange the computers so that no two cables intersect and distance between every two computer would be greater than one. Regard the computers as points and the cables as line segments. The net is connected, i.e. every two computers are connected with some sequence of cables.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains integer N (1 &le; N &le; 1000). Then N&minus;1 lines follow. In each line there are two integers a<SUB>i</sub> and b<SUB>i</sub>, the numbers of computers that are to be connected with a cable (1 &le; a<SUB>i</sub>, b<SUB>i</sub> &le; N).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output N lines. In the i<SUP>th</sup> line there should be two real numbers &mdash; coordinates of the i<SUP>th</sup> computer. The absolute values of the coordinates shouldn’t exceed 1000.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2
2 3
</PRE></TD><TD><PRE CLASS="intable">0 0
10 0
0 10
</PRE></TD></TR></TABLE>
______________________________________________________
1359||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A lifting crane broke down. The constructors are to lift down a barrel with and old cement. The barrel is to end up n meters to the left and m meters down from the place where it was. To get a barrel down one can build a ramp of some amount of wooden planks so, that
<UL>
<LI>both ends of each plank would have integer coordinates;</li>
<LI>one end is always lower than the other one;</li>
<LI>the lowest end of each plank is not to the right from the upper one.</li>
</ul>
You may assume that barrel doesn’t jump during rolling down, i.e. direction of it’s velocity changes in a moment and value of velocity keeps unchanged at the turns of a planks. Acceleration of gravity assumed to be equal to 10. You should neglect rotation of the barrel and friction between barrel and ramp. You are to find a minimal time to get a barrel down.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains two integers n and m (1 &le; n, m &le; 50).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain minimal time in seconds which a barrel would need to roll down on the described construction of wooden planks accurate within 10<SUP>-3</sup>. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
</PRE></TD><TD><PRE CLASS="intable">0.8614
</PRE></TD></TR></TABLE>
______________________________________________________
1360||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day, mathematician and philosopher were engaged in a heated dispute.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Philosopher said:<BR>
— Ideal line has only length and no width, therefore, no line can have an area.<BR>
Mathematician replied:<BR>
— That's as it may be, but still you can fill a square with a line in such a way that there will be no gaps.<BR>
And you can't deny that a square has an area,  and he grinned.<BR>
But Philosopher still wasn't convinced:<BR>
— Show me this line, then.<BR>
— With pleasure&#133; — responded Mathematician and scribbled some equations on a piece of paper:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">— With <i>t</i> increasing, the point (<i>x</i>, <i>y</i>) will move around the square, forming a line.<BR>
— So what? — asked Philosopher.  How is it going to fill the entire square?<BR>
— Indeed, it will, — said Mathematician, — Whichever point inside the square you draw, the line will
eventually cross that point.<BR>
— No, — replied Philosopher indignantly, — Anyway, I don't believe. When will the line cross this point? — and he put a thick dot inside the square.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Give Philosopher an answer.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the coordinates (<i>x</i><sub>0</sub>, <i>y</i><sub>0</sub>) of the dot center (&minus;1 &le; <i>x</i><sub>0</sub>, <i>y</i><sub>0</sub> &le; 1). The second
line contains &epsilon; &ge; 0.0001 — the radius of the dot (the dot is essentially a small circle).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Any value of <i>t</i> in the segment [0, 10<SUP>12</sup>], which corresponds to the line crossing the dot, or "FAIL", if the line doesn't cross the dot.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0.744 0.554
0.01
</PRE></TD><TD><PRE CLASS="intable">5.3
</PRE></TD></TR></TABLE>
______________________________________________________
1361||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every year in the city of Radon-Snark a famous symposium of scientists-spaceologists is held.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor A, haunter of the symposium, has decided this time to invite professor B, who does research in
the adjacent field of science — applied chronistics.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, professor A has forgotten to meet professor B at the railway station (he was thinking about
the exciting future of spaceology and remembered that his friend was coming only when B had already
arrived at the city). "There's nothing left to do — I have to go", — decided A. He got into his spacemobile
and left to the railway station.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now the world-famous scientist B can't wait even a second (chronistics think that only real action is
true, not the some vague argumentation). He has got into his chronomobile immediately, and has left the
railway station (A and B have started at the same time). What's left to do is to find out when A would
meet B. Note that the spacemobile and chronomobile would not stop before they meet.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Remember that the symposium is just about to start and the strange things that are always associated
with the symposium already began to happen. While notable scientists discuss their problems, all the
machinery in the city behaves very strange. For example, all the spacemobiles turn to the leftmost road
on each junction, and the chronomobiles - to the rightmost one. Some of the roads also began to function
strangely. If you take one of these roads to leave a junction, you will arrive in the same junction. Also,
it is clear that leaving the vehicle on the road between two junctions is against the law, so A and B can
only meet each other on a junction.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains one number <i>N</i> (<i>N</i> &le; 100000) — the amount of junctions in the city of Radon-Snark.
The following <i>N</i> lines describe the junctions. The (i+1)st line contains a list of junctions
that can be reached from the ith junction directly. The roads are listed in order from the leftmost to the
rightmost. Oh ya! All junctions today are quite stange: all roads enter to the junction only from one side.
That's why words "leftmost" and "rightmost" have sense) The list is terminated with 0. Each list contains
at least one nonzero number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last input line contains two numbers. The first one specifies the junction where A starts the trip in
his spacemobile. The second number is the junction where B starts from.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of minutes that B will need to meet A. It takes exactly one minute to
travel from one junction to another directly reachable junction. Output &minus;1 if they won't meet.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
2 4 0
3 1 0
4 2 0
5 1 6 3 0
6 4 0
2 5 4 0
6 0
1 7</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR></TABLE>
______________________________________________________
1362||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">May be you can remember the "Classmates" problem from the 2004 Urals Programming Contest. The statement of that problem is like follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Tanya is a schoolgirl. One day, headmistress asked her to notify the class about next day's
lessons being cancelled due to power outage. Tanya successfully carried out that job. She decided
to call Lena, then Katya, the Masha. While she was calling Katya, Lena, who did already know
the news, called Misha, etc. The whole class knew of the welcome news in almost no time.
</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>The contestants were to determine the minimum time required to pass the news to every
student in the class.
</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Time passed, and Tanya got a summer internship in the "Advertising, Commercials and Media" agency.
Like any other firm that offers high salaries for students, ACM has a clearly defined hierarchical structure.
The president is the root of the hierarchy. He has some direct subordinates, who themselves can have
direct subordinates, etc. One day, Tanya happened to invent the utterly ingenious method for increasing
the advertisement efectivenes by 110%. She called her boss immediately, then her friend Lena (who was
Tanya's direct subordinate), then Masha and Katya. They, in turn, quickly passed the message to their own
colleagues, and so on. So, you are again to determine the minimum time for the information about Tanya's
method to spread among the entire ACM agency. There is a peculiar feature of the company's phone
network you should take into account. Namely, every employee can only call his/her direct subordinates
or immediate boss (this is supposed to prevent girls from chatting over the phone instead of doing their
work). Each phone call takes exactly one minute.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the number <i>N</i> of ACM employees (<i>N</i> &le; 100000). Each employee is assigned
the unique ID number (these numbers range from 1 to <i>N</i>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> lines follow, <i>K</i>-th line containing zero-terminated space-delimited list of <i>K</i>-th employee's direct subordinates. The last line contains Tanya's ID number. The hierarchical structure is a tree. I.e., each employee has exactly one direct boss, of course, with exception for the topmost boss.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output consists of one number — the minimum time, in minutes, that is required to propagate Tanya's
idea to all ACM employees.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
2 3 0
4 5 7 0
6 9 0
0
0
8 10 0
0
0
0
0
2
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE>
______________________________________________________
1363||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivan Pyatochnikov loves to tinker with electronics. That's why he has a great authority with his friends.
Indeed, he can repair whatever piece of hardware you give him. He will deal with any incorrectly configured 
program. And he will even fix bugs in your code.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today is Ivan's birthday, and his buddies are preparing a really cool present for him — namely, a genuine
shamanic tambourine. Yes, a tambourine. After all, no real geek can live without such an indispensable
thing.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having bought the tambourine and read the manual, Ivan's friends have discovered that a tambourine only
becomes effective when there is a picture of owner printed on it, along with some special magical signs.
Now the friends are rather depressed, because they only have a dot matrix printer and a file containing
the grayscale photo of Ivan. Clearly, any image to be printed on a dot matrix printer shall be monochrome
(i.e. shall contain black and white pixels only). Ivan's photo consists of different shades of gray, and friends
are afraid that the printout won't resemble the original photo closely enough for the tambourine to work.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have agreed to help Ivan's buddies prepare the present.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>N</i> and <i>M</i> (75 &le; <i>N</i>,<i>M</i> &le; 600) — the dimensions of the image.
<i>N</i> following lines, each line containing <i>M</i> integers ranging from 0 to 255, define the image itself.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output shall contain the monochrome image in the form of <i>N</i> lines with <i>M</i> numbers on each line.
Each number must be either 0 or 255. For the resulting monochrome image to resemble the original, the
following condition must be satisfied for each <i>i</i> and <i>j</i>:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>A</i>[<i>i</i>, <i>j</i>] is the brightness of the original image pixel (<i>i</i>, <i>j</i>) and <i>B</i>[<i>i</i>, <i>j</i>] is the corresponding monochrome
image pixel brightness.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
255 255 0
0 0 255
254 0 253</PRE></TD><TD><PRE CLASS="intable">255 255 0
0 0 255
255 0 255</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that this example is incorrect, because <i>N</i> and <i>M</i> are out of the defined range. Nevertheless, the
example shows the correct format of input and output.</DIV></DIV>
______________________________________________________
1364||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cemetery has a rectangular shape with <i>N</i> rows of graves and <i>M</i> graves in each row. The cemetry, as
usual, is encircled with a high and deep fence. As you know, Lara Croft has penetrated into the cemetry through the sap in the NorthWestern corner in order to find the treasures hidden in the graves. To do that, she has dug an underground passage according to the following rule: if there was an intact grave straight ahead, then Lara lengthened the passage during one night and ravaged the grave. If there was a cemetry fence or a ravaged grave in the way, then Lara turned 90 degrees right and continued with her
questionable affairs. You must have already heard that she found one of the treasures. And she is going to find another one soon. However, Lara doesn't know that Dark Forces have decided to ensnare her. As soon as Lara finds the second treasure (and goes immediately to buy the usual bottle of champagne), a new alarm system (of "LaraKiller" brand) will be set off.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First of all, the all-seeing-eye tower will go online. The eye will locate Lara after some time. At once
the skeleton re-animation process will be initiated in some of the ravaged graves. It takes <i>T</i> seconds for
skeletons to revive, and Lara will certainly try to escape before these <i>T</i> seconds run out.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As a head programmer of the "LaraKiller" company, you are to calculate where Lara can be located at the
moment of complete skeletons' revival. You should not revive unnecessary skeletons. Otherwise you'll
have to kill them yourself.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's clear that Lara will run along her underground passage not faster than 1 grave per second.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two numbers: <i>N</i> and <i>M</i>, 2 &le; <i>N</i>,<i>M</i> &le; 100 — the dimensions of the cemetry. The second line consists of the treasure grave coordinates. The third line contains Lara's coordinates at the moment the all-seeing-eye located her. The fourth line contains the number of seconds <i>T</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that the NorthWestern grave has coordinates (1, 1) and the South-Eastern — (<i>N</i>, <i>M</i>). Lara starts to dig her passage from the grave (1, 1) moving to the East, i.e. to the grave (1, 2). You may assume that T is less than 24 hours.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output coordinates of the graves where Lara can be located <i>T</i> seconds after the all-seeing-eye detected
her. The coordinate pair of each grave is to be output on a separate line. The numbers shall be separated
with spaces. The graves shall be sorted by the distance that Lara will have to run from this grave to the
cemetry entrance.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
4 3
2 2
5
</PRE></TD><TD><PRE CLASS="intable">5 2
5 1
4 1
3 1
2 1
2 2
2 3
3 3
4 3
</PRE></TD></TR></TABLE>
______________________________________________________
1365||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thursday. April 21. First round of IX Urals Programming Contest Championship has just finished. All
teams left the contest area and went to celebrate results of the first round, make sightseeing tour around
Ekaterinburg, or just have a little rest after competition.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Jury would like to have a rest too, but it is impossible. It turned out, that one task for the second round
is missing. Moreover, the error in contest management system was discovered. No, it is not a critical bug,
which distorts results, but a very annoying mistake: one module of the contest management system makes
processing of each submission longer by at least 30 seconds.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some investigations were done. It was found, that nobody knows what this module is intended for. With
this module contest management system works very slowly. But without the module it does not work at
all.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It seems, that there is no problem. One may take module sources, read them, find specifications for the
module, resolve the error, compile the module and put the corrected version into the system. Unfortunately,
the module was written 8 years ago when The First Urals Programming Contest was prepared and now
sources are not available. They are just lost. Jury feels lost too.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Eureka! We can give out the module to participants of the contest! They are clever enough to run it,
discover the logic and write another version of the module, which will run without delay. Moreover, it is
an excellent task for the second round!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Jury was able to discover some information about the module. It is known that the module reads input
data from the input stream. Each line of the input contains single arithmetic expression, which is
evaluated by module. Each expression consists of arithmetic operations of addition (+), multiplication
(*), integer division (/) and concatenation.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Arithmetic operations are written in prefix form with unlimited number of operands. This way expression
"+3;6;10" has a result of "19". Operation of concatenation does not have any notation and gets executed
when no other operation is given. This way expression "3;6;9" is evaluated to "369". It is known also
that expressions may contain brackets. For example, expression "(+3;6)(*2;3)" has a result of "96". It
may be assumed that logic of expression evaluation does not depend on context. It means, that each
subexpression is always evaluated in the same way with no dependency on it's entrance into the whole
expression.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nothing more is known about the module. You see, that there is no information on how arithmetic
operations interact with concatenation, brackets and separator character (;). You have to discover it by
yourself. To do it, you will be given an existing module. You have to run it, investigate the logic and
reproduce it in your solution.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input data will be located in the input stream. Each line should be interpreted as a separate expression.
Expression will consist of the following characters only: "0123456789+*/();".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume, that all intermediate values and result of expression evaluation are in the range from 0
to 10<SUP>9</sup>. You may also assume that there will be no expressions longer than 50 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your solution must reproduce the logic of the given module. It should produce output stream with the result of evaluation of expresions from the input. Each line of output must be of
the following form: "Expression <EXPRNUM> evaluates to: <EXPRVAL>", where <EXPRNUM> is the line
number and <EXPRVAL> is the result of evaluation of expression in the line <EXPRNUM> of the input stream.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">(+3;6)(*2;3)
(+3;6)(/3;2)</PRE></TD><TD><PRE CLASS="intable">Expression 1 evaluates to: 96
Expression 2 evaluates to: 91</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><OL>
<LI>To run the existing module, use 
<A href="http://acm.timus.ru/Supplement/CalcEngine/CalcEngineGUI.html">
http://acm.timus.ru/Supplement/CalcEngine/CalcEngineGUI.html
</A>
<LI>Remember that existing module runs not less than 30 seconds on any set of input data.
<LI>You may need to update Java Runtime Engine (JRE) used by your browser. To run the module you need JRE of version 1.3 or higher. The latest version of JRE can be downloaded from here: <A href="http://java.sun.com">
http://java.sun.com
</A>
</ol></DIV></DIV>
______________________________________________________
1366||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A nice entertainment was invented in the kindergarten. Each child has to bring a present from his home — a big box with something interesting inside. Contents of the boxes shall be kept secret up to the last
moment. After that the chidren will exchange their presents.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Children understood that they would have to part with their presents so they stuffed their boxes with
useless junk: candy wrappers, husk, broken computer mice and even unnecessary elder brother's fat book
with some kind of donkey on the cover.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, a child didn't mind parting with his box. Moreover, he didn't calm down until he made sure he got
rid of his box. Having foisted his box off, no child ever took it back. If some kid didn't get a present in
exchange for his own one, he would become very disappointed and his loud cries would attract attention
of a nurse who had to take away all those boxes along with the marvellous content!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As a chief information officer of entertainment operations, you are to find out the amount of the present
exchange schemes such that each child would be pleased. But there is one hitch&#133; Your hand-book on
algorithms was taken by your younger brother to his kindergarten for some purpose. Sixteenth chapter
might prove very useful&#133;</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number <i>n</i> (1 &le; <i>n</i> &le; 1000) — the amount of children in the kindergarten.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One number — the amount of exchange schemes. E.g., for three presents A, B and C there are only two exchange schemes:<BR>
<OL>
<LI>Box A goes to the child B, box B — to the child C and box C — to the child A.</li>
<LI>Box A goes to the child C, box C — to the child B and box B — to the child A.</li>
</ol></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1367||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the top secret district of the top secret city, there is a top secret factory which produces top secret
Secrets. The top secret spy satellite, equipped with top secret imaging devices, took some top secret
photographs. You have to interpret the photograph correctly. This is crucial for success of the top secret
mission involving covert manipulation of potential enemy's Secrets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The photo is repesented by a <i>W</i> &times; <i>H</i> matrix of cells, each cell containing one of the symbols:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><TABLE border="1" cellpadding="2" style="border: 1px Black solid; border-collapse: collapse;">
<TR><TD align="center" width="20" style="border: 1px Black solid;"><B><TT>.</TT></B></TD><TD style="border: 1px Black solid;">Empty, passable section</TD></TR>
<TR><TD align="center" style="border: 1px Black solid;"><B><TT>-</TT></B></TD><TD style="border: 1px Black solid;">Horizontal impassable barrier (wall)</TD></TR>
<TR><TD align="center" style="border: 1px Black solid;"><B><TT>|</TT></B></TD><TD style="border: 1px Black solid;">Vertical impassable barrier (wall)</TD></TR>
<TR><TD align="center" style="border: 1px Black solid;"><B><TT>+</TT></B></TD><TD style="border: 1px Black solid;">Impassable junction of horizontal and vertical walls</TD></TR>
<TR><TD align="center" style="border: 1px Black solid;"><B><TT>#</TT></B></TD><TD style="border: 1px Black solid;">The Secret</TD></TR>
</TABLE>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Secret is a regular junction (+) with one of the objects of special interest contained inside. This object
of interest is accessible from any of the four sides of the junction.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, secret agents are unable to penetrate walls, nor they are allowed to break them. But this
is the only limitation — they are secret agents, after all.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We'll give a set of examples to clarify the agents' possibilities.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><PRE>
+-+-+ |-+-|
|#|#| |#|#|
+---+ +-+-+
</pre></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first example the agent can walk freely from one Secret to another through a hole between the
bottom horizontal and middle vertical walls. In the second example the hole is sealed by the junction.
Agents can't use holes in the top wall — leaving the photographed area poses a huge risk to the mission.
For the sake of simplicity, you can assume that the photographed area is surrounded with the barrier of
"+"-es.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><PRE>
+-+...+-+ +-+...+-+
|#+---+#| |#+-+-+#|
+---+---+ +---+---+
</pre></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Similarly, in the first example Secrets are connected, and in the second they are not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><PRE>
+-----+ +++++++
+#####+ +#####+
+++++++ +++++++
</pre></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If you remember that the Secret is a special case of junction, it will become clear why all the secrets in
the first example are connected and why every secret in the second example is connected only with its
neighbors.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to construct the secret connectedness graph. That is, the graph which set of vertices is the
set of all secrets and the edge (<i>a</i>, <i>b</i>) exists if and only if it is possible for an agent to get from Secret <i>a</i> to Secret <i>b</i> without breaking the walls and leaving the area.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><B>Limitations</b><BR>
The dimensions of the photograph don't exceed 1000 &times; 1000 cells. It is known that there are no more than
100 Secrets on the photograph.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input stream format is rather simple: it contains <i>H</i> lines, and each line contains a string <i>W</i> symbols
long. These strings of symbols dene the secret photograph of size <i>W</i> &times; <i>H</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the incidency matrix of the secret connectedness graph. Secrets are enumerated from top to
bottom, from right to left. The matrix element in the <i>i</i><SUP>th</sup> row and in the <i>j</i><SUP>th</sup> column is 1, if <i>i</i><SUP>th</sup> and <i>j</i><SUP>th</sup> secrets are connected, and 0 otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">+------+
|#+-+--|
-++#|..|
##..|#.|
-+--+--+</PRE></TD><TD><PRE CLASS="intable">10100
01010
10100
01011
00011</PRE></TD></TR></TABLE>
______________________________________________________
1368||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">How do you let your goat walk around your vegetable garden? That becomes a real problem sometimes.
You should make sure the goat doesn't die of starvation, and you certainly don't want all your crops to
be eaten. The garden is a field consisting of 1 &times; 1 square elements. You can build a fence in some of the
garden's elementary squares. To feed itself, the goat needs to eat all the crops in the area consisting of
<i>K</i> (1 &le; <i>K</i> &le; 10<sup>6</sup>) squares. The goat initially stands in the point of origin (i.e. in the square with
coordinates (0, 0)). You have to put the fence in the minimum number of squares so that the goat will be
able to visit exactly K squares. The area is said to be fenced if it is impossible to leave it moving only in
horizontal or vertical directions.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input stream contains one number K — the total area granted to the goat.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line shall contain the amount N of boundary (fenced) squares. Each of the following N lines
shall contain two numbers — X and Y coordinates of the fenced square, respectively. Squares should be
output in the order of traversal.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">7
-1 0
0 1
1 2
2 1
2 0
1 -1
0 -1</PRE></TD></TR></TABLE>
______________________________________________________
1369||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At last, the spring came. Buds swell on the trees, the snow has almost thawn out. More and more often
you can hear birds' sonorous twittering from the outside. Less and less students you can see at the USU
math-mech department. Even the cockroaches, usual inhabitants of the hostels, show up very rarely.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">What's the connection between these phenomena, you may ask.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The answer is the Day of Mathematician and Mechanician celebration, which will begin really soon. At
the same time, the traditional cockroach race will take place in the USU. That's what the students are
occupied with now - they are training their pets. Everyone wants his pet to become the prize-winner and
to receive the proud name of "Magaz".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The race rules are somewhat unusual. Every round, some kind of sweets are placed in <i>N</i> points of the
racing area. Together with sweets, <i>M</i> cockroaches are released. <i>N</i> cockroaches that reach these little
delights of cockroaches' life, will make it to the next round.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the race all spectators have an unique opportunity to place bets and to win a lot of money.
But the totalizator organizers are puzzled, they cannot understand how to calculate the probabilities of
cockroaches' victories quickly and without mistakes. This is absolutely required to make the maximum
profit out of their enterprise. Math-mech is rather big department and everyone here wants to participate.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to determine, for each of <i>N</i> pieces of sweet, which of the cockroaches is closest to that piece. This
will help to determine the race leaders.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number <i>M</i> (1 &le; <i>M</i> &le; 100000). <i>M</i> lines follow, containing 2 numbers each &mdash; these are coordinates of the cockroaches at the present moment.
(<i>M</i> + 2)nd line of the input stream contains the number <i>N</i> (0 &le; <i>N</i> &le; 10000). <i>N</i> following lines contain coordinates of sweet pieces. All coordinates are floating point numbers (&minus;10000.0 &le; <i>x</i>, <i>y</i> &le; 10000.0). The distance between any two cockroaches is not less than 10<sup>&minus;3</sup>. Also the distance between any two sweets is not less than 10<sup>&minus;3</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each piece of "Cockroach Sweets" you should output all cockroaches closest to that piece in ascending
order of their numbers separated by spaces.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
1 0
0 1
1 2
2
0 0
0 2
</PRE></TD><TD><PRE CLASS="intable">1
3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1370||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis Mednoepole is a famous magician. For example, he can read spectators' minds and tell the random
number that a spectator has got by means of Denis's magic machine. Any spectator can check this: he
or she just rotates the wheel of the machine and looks at the 10-digit number that has appeared in the
window of the machine. Within two seconds Denis will read the spectator's mind and tell the number.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You must write a program that will tell this number even faster — within one second. You need to know
that the magic machine has a wheel with <i>N</i> digits written along the edge of the wheel without spaces
between them. All digits are of the same width. The window is 10 digits wide, so it shows 10 successive
digits. Each time the wheel turns "one digit" an audible click is produced. So you know how many clicks
Denis Mednoepole heard while the spectator was rotating the wheel.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers separated with a space, <i>N</i> and <i>M</i>. Here N (11 &le; <i>N</i> &le; 1000) is the
number of the digits written on the wheel, and <i>M</i> (1 &le; <i>M</i> &le; 32767) is the number of clicks produced by
the wheel. The next <i>N</i> lines contain all the digits written on the wheel, one digit per line. The digits are
given in the clockwise order. The first ten digits correspond to the number visible in the window before
the rotation. The wheel can be rotated only counter-clockwise, thus after one click the first digit will go
out of site and the 11-th digit will become visible.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write the number that will appear in the window of the magic machine after the rotation.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12 7
1
2
3
4
5
6
7
8
9
0
7
7</PRE></TD><TD><PRE CLASS="intable">8907712345</PRE></TD></TR></TABLE>
______________________________________________________
1371||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Advanced Carriage Messaging company does business in cargo delivery, so it has a complicated network of branch offices. Business is successfull, and it was decided to establish new offices to extend further the delivery network. But first of all company management department wants to analyze the efficiency of delivery between offices. You were asked to do this analysis, because of your renowned experience and knowledge. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Delivery works in the following way. There exists exactly one route of cargo delivery from any office to another office (possibly via intermediate ones). The times <i>t</i>[<i>i</i>, <i>j</i>] of cargo delivery between two offices (with numbers <i>i</i> and <i>j</i>) have been measured. These times are available only for offices which have direct communication. Direct cargo delivery for other offices is impossible. You are asked to calculate the average delivery time between offices, i.e. the following value:
<nobr>sum (<i>t</i>[<i>i</i>, <i>j</i>]) / (<i>N</i>*(<i>N</i> &minus; 1))</nobr>, where the sum is taken for 1 &le; <i>i</i>, <i>j</i> &le; <i>N</i> and <i>i</i> &ne; <i>j</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains one integer <i>N</i> (2 &le; <i>N</i> &le; 50000)&nbsp;&mdash; the number of branch offices of ACM company. Each of next <i>N</i>&minus;1 lines contains three numbers <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>, <i>c<sub>i</sub></i>. Numbers <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> (1 &le; <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> &le; <i>N</i>) are numbers of offices which have a direct communication between them. Integer number <i>c<sub>i</sub></i> (0 &le; <i>c<sub>i</sub></i> &le; 1000) is a cargo delivery time between these offices.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output must contain a single number: average cargo delivery time between branch offices of ACM company with a precision of 4 decimal digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 2 1
2 3 1
2 4 1
</PRE></TD><TD><PRE CLASS="intable">1.5
</PRE></TD></TR></TABLE>
______________________________________________________
1372||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A long time ago in a galaxy far, far away&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Well, let's skip these well known entry words of the famous movie. 
No doubt, anyone knows them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Anyway, a long time ago in a galaxy far, far away there was a space station named &quot;Death star&quot;. For those of you who do not remember it, we would remind that it mostly looked like a big metal ball with lots of turrets on its surface. And somewere between turrets there were towers with maneuring engines on a top of each tower; that allowed the station to turn in space. All the engines were the same: standard krypton engines with autonomous power supply. And all the towers were the same. Each of the engines could be in two distinct states: switched off and switched on to a maximum power. But it was not a problem since each engine could be rotated individually relative to the station.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, the engine control cable was damaged after one of the space battles: it was melted by the direct hit of a rebel laser weapon. So all the manoeuvre drives became uncontrollable. All of them which were at maximal power just kept working. Switched off engines remained in that state. Death Star won the battle, but stuck manoeuvre drives made a strange effect: instead of smooth and majestic movement through space, station makes unpredictable rotations which are unsuitable for the Imperial fleet flagship.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It makes Emperor annoyed. No, not just annoyed but furious, because it seems to him that the station rotates faster and faster, and he already feels nauseous.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have to fix the situation as soon as possible, otherwise you are not guaranteed to stay alive for long.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Engine control cable can be fixed in a week. You see, it is too long. So you have to establish another engine tower with a maintenance engine to stop the rotation. And you have to do this really quickly.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may have thought that you would need to solve a lot of complex differential equations and to write engine controlling program. No, not at all. As a station engineer, you must know that jet thrust of a maintenance engine does not change over time. It depends on jet nozzle size only. So you only have to find the suitable place for the engine tower, calculate jet nozzle size, set up thrust vector and switch the maintenance engine on. No matter how you do it. Just make it in such a way that the working krypton engines won't further speed up the rotation.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line of input, some technical data on the Death Star station are given. You know, these are top secret data, but without them you will definitely fail your mission.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first number gives a radius of station in meters (it ranges from 100 to 2000),
then total station mass is given (in kilograms, not greater than 40000000, you may assume that the mass is uniformly distributed throughout the station), followed by the height of a standard engine tower (in meters above the station surface; maintenance engine will be placed on the very same tower, and you may place this maintenance engine tower anywhere on the station surface).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next line of input contains krypton engine description. It starts with a number <i>F</i> &mdash; standard jet thrust of krypton engine in newtons (ranges from 1 to 100000). Then an integer number <i>N</i> (1 &le; <i>N</i> &le; 9) follows.
It is a number of krypton engines currently working at maximum power.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the following <i>N</i> lines contains description of working krypton engine placements. Each line contains 4 numbers. These are: longitude (from 0 to 360 degrees) and latitude (from &minus;90 to 90 degrees) of engine placement relative to the station. Other two numbers define the jet thrust vector of the engine: if this vector is applied to the center of the station, then it would intersect station surface at the 
point with longitude and latitude given by these two numbers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print 5 numbers with a precision of eight decimal digits: two numbers (longitude and latitude) must define place to establish the maintenance engine tower, then two numbers must define jet thrust vector (in notation described above) of the maintenance engine, and the last number must define jet thrust  
in newtons. You should choose the placement with the least jet thrust among different possible maintenance engine placements.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">100.3 1000000.45 15.5
156.5 1
0.0 0.0 90.0 0.0
</PRE></TD><TD><PRE CLASS="intable">0.00 0.00 270.00 0.00 156.50
</PRE></TD></TR></TABLE>
______________________________________________________
1373||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Don't you want to be a millionair? It is so simple! You only need to automate some prevalent handwork, and then you save enough money to buy so long wanted beautiful red Ferrari.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, why not to automate a process of dime novels? Or why not to automate a process of writing songs for pop-stars?
No! It is too simple for real programmer, it is below you! So in this task you will need to automate something spiritual: the process of paintings creation! Just think about it: home computer will be able to create beautiful landscapes, artful still lifes and even delicate self-portraits!
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Frankly speaking, painting algorithm is already developed and implemented by your colleague, great programmer Mr.Petrov. His algorithm makes a description of brushstrokes, so it is enough to load this description into plotter, and in a couple of hours the picture will be ready.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Meanwhile a frame for the picture may be prepared. But this is where Mr. Petrov fails: he can not calculate size of the picture given the brushstrokes description produced by his algorithm&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It could be just trivial if each brushstroke was a line segment. But the major innovation of Petrov's algorithm is that his rushstrokes has a form of an angle. To make this kind of brushstroke one needs to draw (by a brush, or a plotter) a line segment of <i>X</i> millimeters length in one direction, then turn 90 degrees clockwise and draw another line segment of <i>X</i> millimeters length. This is what innovative Petrov's brushstroke looks like.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains <i>N</i> (0 &le; <i>N</i> &le; 100000) lines of numbers. Each line describes single brushstroke. Description consists of four integers: coordinates of the start and coordinates of the end points of the brushstroke. All integers do not exceed 10000 in absolute value.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain 2 numbers: the width and the height of the smallest frame for the picture, produced by brushstrokes description given in input. Numbers must be separated with single space. And they should have a precision of 4 decimal digits.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Notice, that picture must not be rotated, even if it allows to fit the picture into the frame of smaller size. Your task is not to save materials, from which the frame is made. You just have to prepare suitable frame for the picture. Also make sure that all parts of each brushstroke are inside 
the frame.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 1 1
1 1 2 0
2 0 0 0
2 0 3 0
</PRE></TD><TD><PRE CLASS="intable">3.0000 2.0000
</PRE></TD></TR></TABLE>
______________________________________________________
1374||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Naked man walks along the streed. Policeman stops him ans asks: <br>
"Are you alright? Why naked?" <br>
Man answers with a question: <br>
"Listen, does a misere ever gets spoiled by 7, 9 and J?" <br>
Policeman: "Never!" <br>
Man: "And I thought so&hellip;"</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is six o'clock. Morning. Or night. Kitchen. Four students play a game of 
preference. Or do not play. Indeed, they do not play. But why? What happened? What are they busy with? Oh&hellip; They dispute about something. Oh, got it! </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of them bid a misere contract. And believes that he will not get any trick. But other players are trying to convince him of being wrong. Their voices are already hoarse. They even opened all the cards! Made discarded cards known! But nothing helps&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then one of them tells: <br>
&mdash; Aren't we students of Mathematical and mechanical department? Let's write
a program, which will look over all possible plays and justify us.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nobody objected. But because of they were bad students or maybe due to sleepless
night the program was never written&hellip; Will you help them?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Oh, you need to know some basic facts about preference. Precisely, you only 
need to know rules of playing a misere.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Preference is played with 32 cards: the Ace (A), King (K), Queen (Q), Jack (J), 10, 9, 8 and 7s (in the order of decreasing rank) from a standard 4-suit 52-card deck. Suits are usual: Spades, Clubs, Diamonds and Hearts. Preference is played by three players sitting at the round table (in fact, the shape of the table does not matter; the only important thing is that each player has right and left neighbour and that players are numbered clockwise).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After cards are dealt, bidding takes place. We omit bidding rules here, they are not important for this problem. One of the possible result of bidding is a misere contract. It means, that player will try to win no tricks with his cards.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the bidding each player has 10 cards.
So 10 tricks are played. Each trick is played in the following way. The player, who leads the first trick, puts any of his cards on the table face up. Then his left neighbour puts his card. Then remaining player puts his card.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each player must follow the suit of the first card in a trick, if possible. Otherwise, he may discard any card from his hand. The player, who put the card of the highest rank with a suit of the first card in a trick, wins that trick. The player who wins a trick leads the next trick.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Successfull playing of the misere contract gives a big profit to the player. But each won trick gives a great loss. Now you know the actual reason for the dispute!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to justify the students. Given cards of each player and a number of the player, who leads the first trick, you are to determine, whether the first player, who declared the misere contract, is able to play the declared contract regardless of the other players' strategy.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the first three lines of the input contain cards of the corresponding player. Each card is described with two characters: a suit (one of the S, C, D or H) and a rank (one of the 7, 8, 9, 10, J, Q, K or A). Card descriptions are separated with space(s). The fourth line contains the number of the player, who leads the first trick.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output should contain exactly one line. In case when the misere contract can be played successfully regardless of the strategy of other players, this line should contain ";)".
Otherwise it should contain ";(".
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7S 8S 9S 10S JS QS KS AS 7C 8C
9C 10C JC QC KC AC 7D 8D 9D 10D
JD QD KD AD 7H 8H 9H 10H JH QH
1
</PRE></TD><TD><PRE CLASS="intable">;)
</PRE></TD></TR></TABLE>
______________________________________________________
1375||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">System administrator with a well sounding name of Bill Clevers pays great attention to operating system security vulnerabilities. He truly believes that a system protection must be rather original to be reliable. So he decided to design a new public key cryptography system. No sooner said than done. One sleepless night, a little use of his favourite shamanic tambourine (did you hear about this important tool of system administrator?), a couple of broken computers, and a brand new cryptographic system is designed!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In this crypto-system, public key is a pair of numbers (k, p) where
p must be a prime number and 0 &le; <i>k</i> &le; <i>p</i>&minus;1. Private key is a pair of numbers (<i>x</i>, <i>y</i>), which satisfies the following relation:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>x</i><SUP>2</SUP> + <i>y</i><SUP>2</SUP> = <i>k</i> (mod <i>p</i>)</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, Bill does not think that his cryptographic system is better than RSA, but it is definitely much less known to potential hackers.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everything could be just fine, if Bill had not (unfairly!) restricted access to some Internet sites, which were used by the remarkable programmer Bob Buggins to create his software masterpieces. Evidently, this unfair act of Bill must be circumvented somehow. To do it, Bob just needs to recover Bill's own private key from the corresponding public key. But Bill's cryptographic system appears strong enough! That long-awaited private key still can't be found by Bob&hellip;</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains two integers: <i>k</i> and <i>p</i>. Number <i>p</i> is a prime number, 2 &le; <i>p</i> &le; 10<sup>6</sup>; 0 &le; <i>k</i> &le; <i>p</i>&minus;1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output any pair of integers <i>x</i> and <i>y</i> (0 &le; <i>x</i> &le; <i>p</i>&minus;1, 0 &le; <i>y</i> &le; <i>p</i>&minus;1) such that <i>x</i><SUP>2</SUP> + <i>y</i><SUP>2</SUP> = <i>k</i> (mod <i>p</i>). If there is no such a pair, output "NO SOLUTION".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 3
</PRE></TD><TD><PRE CLASS="intable">0 2
</PRE></TD></TR></TABLE>
______________________________________________________
1376||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At Ural Championship 2004 there was a task "<A href="/problem.aspx?space=1&num=1308">Dean's pyramid</A>". Briefly it looks like the following:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><BLOCKQUOTE>
There is an egiptian like glass pyramid on the table of Ural State University mathematics and mechanics faculty dean. The faculty legend says that before weak student gets sent down, dean gives the student the last chance. He puts unsigned list of dismissed students at one side of the table, and puts the pyramid at another side. If the student is able to move the pyramid to the locus of deans signature on the dismissing listplace, by rolling the pyramid over the edges for no more than 70 times, the student 
stays at the faculty (for the last time).
</BLOCKQUOTE></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><BLOCKQUOTE>
The task was to determine, how close the pyramid can be moved to the target point under the following conditions. The pyramids base is square and its lateral faces are regular triangles. You can roll the pyramid by turning it from one face to the adjacent one over some edge. During this turning the edge should not slide on surface of the table. If after the turn over some edge the pyramid stands on its base, the next turn can be performed either over the same edge or over the opposite edge of the pyramids base only. There are no restrictions on the rolling from the triangle faces.
</BLOCKQUOTE></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After Ural Championship 2004 weak students felt secured: now they know the secrets of dean's pyramid and the simplest algorithm to find the points on the table where the pyramid could be. To learn this algorithm is much, much simpler than to learn theorems. And you never get sent down! The only doubt disturbed them: what if authors of the task garbled something...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And they were right: looking at the hidden camera picture it was found that side faces of the pyramid were not regular triangles, but only isosceles one! And strange rule of rolling the pyramid could be just a fiction of task authors... Weak students feel distress again...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You see, this could be a legend. And could be a truth. The pyramid is so real, and it looks so beautiful at the dean's table...
So help the students for the last time. Try to determine the best way of rolling the pyramid to put it as close as possible to the point of dean's signature.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a number N &mdash; the maximum number of rolls allowed by the dean. You are also given an exact size of the pyramid: the length of an edge of square face A<SUB>1</SUB> and the length of a side edge A<SUB>2</SUB>. Both lengths are given in centimetres. It was estimated by eye that a value of A<SUB>2</SUB>/A<SUB>1</SUB> is in a range from 0.9 to 1.9. It is known that the dean is severe enough, so he puts dismissing list far enough from the pyramid. You may assume that the pyramid is originally 
placed not closer than 20.05 * A<SUB>1</SUB> to the point of the dean's signature.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pyramid originally stands on its base with 
a center of the base placed at the point (0,0) and with edges of the base parallel to the axes of coordinate system. You are to find the sequence of rolls by which the pyramid gets to the point (X,Y) as close as possible. After the last roll the pyramid
again must stand on its base, though edges of the base could be arbitrary oriented.
But the distance between the center of the pyramid base and the point (X,Y) must be as small as possible. In the case of tie, you also have to minimize the number of rolls. You are allowed to make less than N rolls.
The pyramid can be rolled from one face to another only via their common edge. And the edge should not slide on surface of the table during the roll.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains the numbers A<SUB>1</SUB> and A<SUB>2</SUB>
(in centimetres, both in range from 0.1 to 10). Two numbers X and Y follows. They are the coordinates of sacramental point of the dean's signature. The number N (2 &le; N &le; 32) ends the input.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have to conform the following format. First of all pring the distance between the center of the pyramid base and the signature point in the pyramid's final placement. This distance must be printed correct to three places of decimals. Then print the number M (0 &le;  M &le; N) of rolls required to get the printed distance.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then print M+1 numbers &mdash; the numbers of the faces on which the pyramid stands after each roll. Separate these numbers with spaces. And do not forget to start this list with the number of the pyramid base on which it stands initially.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Faces of the pyramid are numbered according to the following scheme. The pyramid's base has number 0. The side faces are numbered clockwise by 1, 2, 3 and 4 being looked 
from the top of the pyramid standing on it's base. The face of the pyramid which looks to positive direction of 0Y axis has a number 1.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10.0 10.0 1000.0 0.0 5
</PRE></TD><TD><PRE CLASS="intable">972.679
5
0 2 3 4 1 0
</PRE></TD></TR></TABLE>
______________________________________________________
1377||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cemetery has a form of rectangle. There are N rows of graves, M ones in each row. The cemetery is enclosed with a high and deep fence. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lara Petrovna Croft has penetrated into the cemetery through the sap at the Northwestern corner. It takes one night for Lara to dig a subway under one of the graves. If there is an intact grave straight ahead then Lara will lengthen the passage during the next night and will ravage the grave. If there is a cemetery fence or a ravaged grave on the way, then Lara will turn 90 degrees clockwise and will continue with her questionable affairs. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Treasures are located in two graves only. And we exactly know in which ones. But Lara doesn't. Lara has bought a package of champagne today. It means, that today she has found one of those graves. We wonder how long will it take her to find the other one?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers N and M (2 &le; N,M &le; 100) &mdash; the sizes of the cemetery. The second and the third lines contain the treasure graves coordinates. 
Assume that the North-Western grave has coordinates (1,1) and the South-Eastern &mdash; (N,M). Lara starts with the grave (1,1) moving to the East, i.e. towards the grave (1,2).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output an amount of days that Lara will spend reaching for another grave with treasures.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
2 2
5 3
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1378||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In his novel "2001: A Space Odissey", Arthur C. Clarke described a situation when a spaceship computer strengthened with an artificial intelligence decided to get rid of humans being aboard. To achieve its goal, the computer invented some tricks. In particular it was able to make a man leave the spaceship without a spacesuit...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In fact, many people just like science fiction writers thought that in the year 2000 the artificial intelligence would be definitely invented. And computers would communicate with humans as equals. Now it is evident that even the problem of human speech recognition (we do not speak about recognizing the meaning of what's said!) is hard enough.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to make a big step forward and to write a program to recognize photos. There is a photo of a man. You are to process the photo and recognize the nationality of the man. During this competition we will give you photos of Flatland citizens only. So there are only three nationalities: Circle, Square and Triangle. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two numbers <i>W</i> and <i>H</i> &mdash; the width
and the height of the photo (1 &le; <i>W</i>, <i>H</i> &le; 1000). Then <i>H</i> lines of <i>W</i> numbers of 0 or 1 follow. It is a black-white photo of a black figure (circle, square or triangle) drawn on a white background in a standard photo editor. There is only one figure at the photo. The figure does not touch the borders of the photo. It does not exceed the bounds of the photo either. Size of the biggest side or the radius of the figure is not less than 30 pixels. The least angle of the triangle is not less than 10 degrees.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Just print one of the following words: <B>circle</B>, <B>triangle</B> or <B>square</B>, depending on what figure is drawn at the picture.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">32 32
00000000000000000000000000000000
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
01111111111111111111111111111110
00000000000000000000000000000000
</PRE></TD><TD><PRE CLASS="intable">square
</PRE></TD></TR></TABLE>
______________________________________________________
1379||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was decided to prepare specially designed cups with a competition logotype of Ural Championship 2005 for each participant and 
for any observer, who wish to have such a cup.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having a habit to do such important things at the last moment, designer finished his job with a cup design two days before the 
Championship. So there is a shortage of time. One day is needed to manufacture the cups and to put Championship logotype onto them. So there are 24 hours left to deliver the cups from an enterprise to contest area.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, it is impossible to deliver ten million cups (this is the amount of cups ordered by organizing committee) in a one trip. But it is desirable to deliver as many of cups as possible in a one trip.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Organizing committee ordered one big delivery truck. One would try to load the truck by the cups for it's full load. But some roads have weight limit: if the weight of the truck exceeds the road weight limit, 
it can not pass the road. So it is possible, that fully loaded truck can not go along the shortest route of delivery, it has to use longer route with acceptable weight limit. Moreover, it is possible, that the fully loaded truck will not deliver the cups in time. And it is definitely unacceptable.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, how many cups can be loaded into the truck, so that this precious load could be delivered in time without violation of road weight limits?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers: the total number of road map nodes N (1 &le; N  &le; 500) and the total number of roads M. 
Next M lines contain information about the roads. Each road is described on a separate line in the following way. Two numbers of road map nodes connected by the road go first. They are followed by the time required to pass the road. Finally the weight limit for the road goes. It is known that each road connects two different road map nodes. And for any two road map nodes there is at most one road connecting them. All numbers are separated with a one or more space(s).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Road map nodes are numbered with an integers in a range from 1 to N. Enterprise, where the cups are manufactured, is always placed in a node 1. And Urals Championship area always in at node N. Road passage time is given in minutes, and it does not exceed 1440 (24 hours). Weight limit is given in grammes, and it does not exceed 10<SUP>9</SUP>. One cup has a weight of 100 grammes, and the empty truck has a weight of
3 tonnes (1 tonne = 1000 kilogrammes; 1 kilogramme = 1000 grammes).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print the only number: the total amount of the cups (it must be as much as possible), which can be delivered in the first trip of the truck in a time of 24 hours.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2 10 3000220
2 3 20 3000201
1 3 1 3000099
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1380||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The well-known grand-master Bender arrives at the city of Petrozavodsk. Among others, there were Ha, Ru and Po to come to the simultaneous chess-game. Ru had lost the game <i>N</i> (1 &le; <i>N</i> &le; 10<sup>9</sup>) times, Po had lost the game <i>M</i> (1 &le; <i>M</i> &le; 10<sup>1000</sup>) times, and Ha hadn't counted his losses as all. The friends had noticed that Bender played in his own style: the chess-pieces occasionally disappeared from the board, or new pieces occasionally appeared. Bender has no
shame, and he can do the cheats with any chess-piece. Then Ha got tired of these games, and he decided to start writing down the moves, having written down the current position first. You have to tell from Ha's notes whether Ostap cheated during play, or not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rules of chess, as known by Ostap, are much like the common ones, but Ostap doesn't know such concepts as <i>en passant</i>, <i>castling</i> and <i>promotion</i>. Otherwise, the pieces move just like the usual chess-pieces do. A player's move is considered legal if the only piece moved is this player's piece, and his king isn't in check at the end of the move. A king is considered in check when its location is under attack of a hostile piece, and checkmated when, in addition to this, there is no legal moves. Stalemate (a draw) is a position when neither king is in check, and there is no legal moves. The initial position may be senseless; it needn't be verified before the first move.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The current position is given as 64 numbers, delimited with spaces or
new-lines. The number 0 corresponds to an empty square, 1&nbsp;&mdash; to pawn, 2&nbsp;&mdash; to knight, 3&nbsp;&mdash; to bishop, 4&nbsp;&mdash; to rock, 5&nbsp;&mdash; to queen, 6&nbsp;&mdash; to king. The positive numbers correspond to white pieces, and their negative counterparts&nbsp;&mdash; to black ones. A number 1 &le; <i>P</i> &le; 60 follows, which gives the number of moves written down by Ha.
Following is the color of player to move, either 'White' or 'Black'.
At last, the <i>P</i> moves are given, formatted as square-square, where
a square is a letter a-h (a corresponding to the leftmost file, h to
the rightmost) followed by a number 1-8 (1 corresponding to the
bottommost rank, 8 to the topmost).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each move, your program must output either of the following messages:
"Incorrect" for illegal move, "Mate" for checkmate, "Check" for check, "Draw" for stalemate, "Correct" for neither of the above. After an illegal move, checkmate or stalemate, the program must output an empty line followed by the current position, formatted in the same way as the input, without performing the illegal move. The moves following the illegal move, checkmate or stalemate must be ignored.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-4 -2 -3 -5 -6 -3 -2 -4
-1 -1 -1 -1 -1 -1 -1 -1
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
4 2 3 5 6 3 2 4
2
White
e2-e4
e7-e4
</PRE></TD><TD><PRE CLASS="intable">Correct
Incorrect

-4 -2 -3 -5 -6 -3 -2 -4
-1 -1 -1 -1 -1 -1 -1 -1
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 0
1 1 1 1 0 1 1 1
4 2 3 5 6 3 2 4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">-4 -2 -3 -5 -6 -3 -2 -4
-1 -1 -1 -1 -1 -1 -1 -1
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1
4 2 3 5 6 3 2 4
8              
White
e2-e4
e7-e5
d1-f3
h7-h6
f1-c4
g7-g6
f3-f7
e8-f7
</PRE></TD><TD><PRE CLASS="intable">Correct
Correct
Correct
Correct
Correct
Correct
Mate

-4 -2 -3 -5 -6 -3 -2 -4 
-1 -1 -1 -1 0 5 0 0
0 0 0 0 0 0 -1 -1
0 0 0 0 -1 0 0 0 
0 0 3 0 1 0 0 0  
0 0 0 0 0 0 0 0  
1 1 1 1 0 1 1 1  
4 2 3 0 6 0 2 4  
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 0 0 0 0 6 0 -6
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 5 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
1
White
h6-a6
</PRE></TD><TD><PRE CLASS="intable">Correct

0 0 0 0 0 6 0 -6
0 0 0 0 0 0 0 0 
5 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 
</PRE></TD></TR></TABLE>
______________________________________________________
1381||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petya lives in a many-storied building where each flat occupies an entire story. Petya has studied local flora and fauna for many years. Having performed montly metering, he notices the following peculiarities:
<ul>
<li> The number of cockroaches in each of the flats is an integer ranged from 0 to <i>N</i>, where <i>N</i> is a non-negative number not exceeding 30.</li>
<li> The number of cockroaches in a flat during a month is a function of three arguments: the number of cockroaches in this flat and the flats
above and below this one during the previous month.</li>
</ul>
Petya becomes interested in inducing the ways the insects' population size changes under these laws. To avoid the special cases of ground
floor and top floor, where the laws might be more complicated, Petya decided to solve this problem for an infinite-storied skyscraper. Let's consider that the number of cockroaches can decrease if they can be distributed among the flats (having no more than <i>N</i> in any) in such a way that in the next month the total number of cockroaches in the building will decrease. Only a finite number of cockroaches can exist in the building; thus, all the flats, except a finite number of them, are free from these insects. Likewise, the number of cockroaches can increase if they can be distributed among the flats in such a way that in the next month the total number of cockroaches in the building will increase (and may possibly become infinite).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the single number <i>N</i>&nbsp&mdash; the maximum number of cockroaches in a flat. Following are samples of the function that defines the changes in the
number of cockroaches in a flat. The samples are organized in a table having <i>N</i>+1 block, where each block has <i>N</i>+1 lines, and each line has <i>N</i>+1 numbers ranged from 0 to <i>N</i>. <i>k</i>'th number of <i>i</i>'th line of <i>j</i>'th block contains the number of cockroaches in the flat for the current month
if in the previous month there were <i>j</i> cockroaches in it, <i>i</i> cockroaches
in the flat below, and <i>k</i> cockroaches in the flat above. The indices of blocks, lines, and numbers are zero-based. Petya has studied that if there were no cockroaches in some flat and in the flats below and above it in the previous month then there are no cockroaches in it in the current month.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain either:
<ul>
<li> =, if the number of cockroaches can neither increase or decrease, or </li>
<li> <, if the number of cockroaches can decrease, but not increase, or </li>
<li> >, if the number of cockroaches can increase, but not decrease, or </li>
<li> <>, if the number of cockroaches can both increase and decrease. </li>
</ul></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
0 1
0 1

0 0
1 1
</PRE></TD><TD><PRE CLASS="intable">=
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0 0 0
0 0 0
0 0 0

1 1 1
1 1 1
1 1 1

2 2 2
2 2 2
2 2 0
</PRE></TD><TD><PRE CLASS="intable">&lt;
</PRE></TD></TR></TABLE>
______________________________________________________
1382||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tyomitch plays the following game with <i>N</i> of his friends. Tyomitch leaves the room. His friends write numbers from 1 to <i>N</i> on cards,
and each of the friends takes a card in a way that Tyomitch doesn't know which card each one has.
Let's number the friends from 1 to <i>N</i>. After Tyomitch comes back to the room,
each of his friends makes 2 statements of the following form (examples given for <i>i</i>'th friend):

<ol>
<li>
 I have the card number <i>a<sub>i</sub></i>. 
</li>
<li>
 <i>b<sub>i</sub></i>'th friend has the card number <i>c<sub>i</sub></i> (<i>b<sub>i</sub></i> &ne; <i>i</i>).
</li>
</ol>

Exactly one of these statements is true, and the other one is false. It's known that no two friends said that friend <i>b</i> has card <i>c</i>, and nobody said that friend
<i>b</i> has card <i>c</i> if <i>b</i> admitted that he has this very card. The task for Tyomitch is to determine for each of his friends which of
his statements is true.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number <i>N</i> (2 &le; <i>N</i> &le; 1000). Each of the following N lines contains a triple <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>, <i>c<sub>i</sub></i>&nbsp;&mdash; the statements of Tyomitch's friends.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of output must contain <i>N</i> numbers separated with spaces, being the numbers of the true statement (either 1 or 2) for each of the friends. It is known that a solution exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
3 4 3
1 3 2
3 2 5
2 5 4
3 4 1</PRE></TD><TD><PRE CLASS="intable">1 2 2 2 2</PRE></TD></TR></TABLE>
______________________________________________________
1383||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There were <i>N</i> people to take part in the competition for a flower-garden design. Each of them had proposed his design, the finite sequence of points in plane which are the suggested locations for flowers. To save the main jury from needless labor of considering identical designs, the pre-jury wants to find the designs which only differ in rearrangement of points and their affine transformation that doesn't change the orientation (that is, the radius-vector of each point is multiplied by a matrix with positive determinant and translated by a fixed vector).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains the single number <i>N</i> (<i>N</i> &le; 10000). The <i>N</i> designs follow. Each design is represented as the length of the sequence <i>M</i>, followed by coordinates of points (<i>M</i> pairs of integers whose absolute value doesn't exceed 1000, each pair on a line by itself). The sum of all sequences' lengths doesn't exceed 200000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of output must contain the number of different design classes. The following lines must list the classes as one-based indices of designs, terminated with zero.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
5
1 2
0 0
6 0
0 4
2 7
5
1 2
3 9
0 1
2 3
9 2
5
-43 -37
-73 -47
-3 3
-23 -7
-3 63
3
0 0
1 0
0 1
3
0 0
1 0
3 0
3
10 3
3 7
5 2
3
6 1
6 5
6 7</PRE></TD><TD><PRE CLASS="intable">4
4 6 0
5 7 0
1 3 0
2 0</PRE></TD></TR></TABLE>
______________________________________________________
1384||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tyomitch takes his favorite goat for a stroll through his neighbor's cabbage garden. Tyomitch had to go away for a while, and he decided to drive a stake into the ground and to bound the goat to the stake to prevent it from eating up all the neighbor's cabbage. To save his pet from starving to death, Tyomitch wishes to select such a spot for the stake, and such a length for the rope, that the goat could deal with as large area of the garden as possible. However, there's a little problem: the goat, when left alone with the garden, tries to pierce the garden's fence with its horns. The goat will succeed if it can reach the fence with its horns and the rope has even a little slack at this moment. Tyomitch wants to avoid the traces of the uninvited guests getting noticed by the neighbors, so he tries to bound the goat in such a way that the fence would remain safe and sound. Your task is to help him. You only have to find the length for the rope, and Tyomitch will locate the stake on his own.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The neighbor's garden is polygonal with <i>N</i> vertices, and it may be non-convex. The first line of the input contains the number <i>N</i> (3 &le; <i>N</i> &le; 25). The next <i>N</i> lines give the coordinates of the vertices, listed counter-clockwise. (<i>i</i>+1)'th line will give the coordinates <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, being integers between 0 and 1000 inclusive. The garden is so large that you can consider the goat a point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your output must be the single number <i>R</i>&nbsp;&mdash; the length for the rope, rounded to 2 digits after the decimal point.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0
200 0
0 200</PRE></TD><TD><PRE CLASS="intable">58.58</PRE></TD></TR></TABLE>
______________________________________________________
1385||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tyomitch calls the number with 2<i>N</i> digits (without leading zeroes) "interesting", if it's divisible by both the number formed from its first <i>N</i> digits and the number formed from its last <i>N</i> digits.
For example, 1020 is "interesting" (divisible by 10 and 20) and 2005 is not. Tyomitch wants to know how many "interesting" 2<i>N</i>-digit numbers exist. You are to help him.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains an integer <i>N</i> (1 &le; <i>N</i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of "interesting" 2<i>N</i>-digit numbers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1</PRE></TD><TD><PRE CLASS="intable">14</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">11, 12, 15, 22, 24, 33, 36, 44, 48, 55, 66, 77, 88, 99.</DIV></DIV>
______________________________________________________
1386||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the most popular games of all times is the "Maze". The game is played on a <i>N</i> &times; <i>M</i> table. The player can make the instructions: 'left', 'right', 'up', 'down'. For each cell of the table and each instruction the game-master has defined the destination cell that the player moves to; that is, the player is given the map of the maze. Once a game was interrupted, and the master has forgotten which cell the player was in. Fortunately, a full record of the
gameplay has remained, which is the sequence of the instructions made by the player. You are to write a program determining the cells that
the player can be currently in.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two numbers <i>N</i> and <i>M</i> (1 &le; <i>N</i>,<i>M</i> &le; 100). Four blocks of <i>N</i> lines each follow. Each line contains <i>M</i> pairs, being the new coordinates of the player after making <i>k</i>'th instruction standing in the cell (<i>j</i>, <i>i</i>), where <i>i</i> is the number of pair in the line, <i>j</i> is the number of line in the block, and <i>k</i> is the number of block.
Following is the number <i>S</i> (1 &le; <i>S</i> &le; 4000) of the instructions made by the player. The last line contains the <i>S</i> numbers of the instructions made.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output must contain the number <i>L</i> of the cells that player can be in after making the given sequence of instructions. Each of the next <i>L</i> lines must contain the coordinates of these cells, ordered first by the first coordinate, and then by the second.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
1 2  1 3  1 3
2 2  2 3  2 3
2 1  2 2  2 3
2 1  2 2  2 3
1 1  1 1  1 2
2 1  2 1  2 2
1 1  1 2  1 3
1 1  1 2  1 3
4
1 2 3 4</PRE></TD><TD><PRE CLASS="intable">2
1 1
1 2</PRE></TD></TR></TABLE>
______________________________________________________
1387||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya’s dad is good in maths. Lately his favorite objects have been "beautiful" directed graphs.
Dad calls a graph "beautiful" if all the following conditions are true:
<ol>
<li>The graph contains exactly <i>N</i> vertices and <i>N</i>&minus;1 edges.</li>
<li>Exactly one vertex has no entering edges.</li>
<li>The graph contains no directed cycles.</li>
</ol>
Dad calls two "beautiful" graphs isomorphic, if the vertices of the first graph can be renumbered in such way that it turns into the second one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dad picks an integer <i>N</i>, stocks up blank paper, and draws a "beautiful" graph on each sheet. He verifies that no two drawn graphs are isomorphic.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the number <i>N</i>, you are to find the number of sheets that Vasya's dad has to stock up.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains the single integer <i>N</i> (1 &le; <i>N</i> &le; 50).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of "beautiful" graphs with <i>N</i> vertices.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">9
</PRE></TD></TR></TABLE>
______________________________________________________
1388||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A river flows down the plain along the line <i>y</i> = 0. There are trees growing in the plain to the both sides of the river, but not on the river itself. A dam is positioned on the river in the point (0,0). It is necessary to make two matching photos of the two river-sides
from the dam. The photos are considered matching if the arrangement of the trees on them match (only the horizontal arrangement is considered, not the distance to the trees).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a tree is obscured with another one, the tree isn't present in the photo. No two trees occupy one point. Sizes of the photo-camera and the trees are negligible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The photographing occurs in the following way: first a camera is used whose spanning angle is arbitrary close to 180 degrees (the photo-film
is a line, and trees in front of it are centrally projected onto the film, center is point (0,0)); then a segment with trees from one river-side only is cut out of the film, and scaled arbitrarily.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of the input, except the last one, contains the coordinates of the trees (two integers from &minus;20000 to 20000). The number of the trees doesn't exceed 10<sup>5</sup>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line contains two zeros.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain a single number, being the maximum number of trees on two matching photos of the two river-sides.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-1 1
0 1
2 1
3 1
7 2
3 -2
1 -1
0 -1
0 -5
-4 -2
-3 -1
0 0
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 1
1 1
2 1
-3 -1
-2 -2
-1 -3
0 0
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1389||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time there was a king. One day the king counted up the collected taxes and decided to
spend the money for the road maintenance. There were <i>N</i> cities in that kingdom and <i>M</i> two-way roads connected them in such way that one could travel from a city to others using these roads. The road network was catastrophic without repairing, so the king made up his mind to repair as many roads as possible during the summer, before the money depreciated. The inhabitants of the kingdom were shocked to know that all the ways they used to go would be blocked for summer. So the king promised that at most one road from a city would be blocked. Help the king to fulfil his plan without displeasing the citizens. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains two natural numbers <i>N</i> and <i>M</i> (2 &le; <i>N</i> &le; 10<sup>5</sup>, <i>M</i> = <i>N</i>&nbsp;&minus;&nbsp;1), separated with a space. Each of the next <i>M</i> lines describes a road in the form (<i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>), where <i>a<sub>i</sub></i> and <i>b<sub>i</sub></i> are numbers of the cities connected with <i>i</i>'th road (1 &le; <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> &le; <i>N</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of output should contain the only integer <i>K</i> being the maximum number of roads that the king can close for maintenance without raising disorders in his kingdom.
The next <i>K</i> lines should describe these roads in the same form as they were given in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
1 2
2 3
3 4</PRE></TD><TD><PRE CLASS="intable">2
1 2
3 4</PRE></TD></TR></TABLE>
______________________________________________________
1390||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new pistol is being tested. The pistol can fire shots with variant bullet speeds. In some points of time shots are fired from the point of origin with certain horizontal speeds, and in some other points of time walls are built on a horizontal platform. The walls are non-singular segments lying on lines that do not go through the point of origin. The walls may intersect. For processing of the test results, you are to determine the time that each shot bullet had been flying for. You can assume that the speed of the bullet after shot is constant.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each line of the input begins with either "shot", "wall", or "end" (without quotes). The number of lines doesn't exceed 50000. After "shot", the two coordinates of speed of the bullet are listed; the speed cannot be zero. After "wall", the four numbers follow, being the coordinates of wall's beginning and end. "end" denotes the end of the input. All the coordinates are integers whose absolute values doesn't exceed 10000. All the events are listed in chronological order, and time intervals between the events exceed the time needed to build a wall, or the time needed for bullet to reach the next wall or end of the proving ground.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of the shots, you must output the single number, on a line by itself: the time that the bullet had been flying for, with precision
of 10<sup>&minus;6</sup>. If the bullet doesn't hit any wall, you must output "Infinite" instead of a number.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">shot 1 0
wall 1 0 0 1
shot 1 1
shot -1 3
wall 1 0 -1 2
shot -1 3
wall 1 1 -1 1
shot -1 3
wall 2 3 2 -3
wall 3 -2 -3 -2
shot 1 -1
shot 40 -39
shot 9999 -10000
shot -1 -1
shot -3000 -2000
shot -3001 -2000
shot -3000 -2001
shot 1 0
shot 1 1
wall -1 2 10 -10
shot -1 1
shot 0 1
shot 1 1
shot 1 0
shot 1 -1
wall 0 -10000 -10000 0
shot -2 -1
end</PRE></TD><TD><PRE CLASS="intable">Infinite
0.50000000000000000000
Infinite
0.50000000000000000000
0.33333333333333333333
2.00000000000000000000
0.05000000000000000000
0.00020000000000000000
2.00000000000000000000
0.00100000000000000000
Infinite
0.00099950024987506247
1.00000000000000000000
0.50000000000000000000
1.00000000000000000000
0.90909090909090909091
0.43478260869565217391
0.83333333333333333333
2.00000000000000000000
3333.33333333333333333</PRE></TD></TR></TABLE>
______________________________________________________
1391||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone knows that snakes have hard time living in mazes. Even if a snake lives alone, it can perish by running into a wall or its own tail. A certain participant of snakes competition called Vasya decided to teach his snake to get out from distant areas of the maze. Such sub-mazes are dangerous because the snake has little chance to
get out from them alive, and of course the longer the snake the less chance it has. Vasya trains his snake in the following way: when it's young and its length is 2, he lets it into a practice dangerous maze. The snake's goal is to get out from the maze as soon as possible. If the snake survives, then the training will be repeated as soon as the snake reaches the length of 3. The training goes so on until the snake either perishes or matures at the length of 18.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The maze is a rectangle with width <i>W</i> and length <i>H</i>, each cell of which is either obstructed 'X' or free '.'. The maze is surrounded with impassable stones '*' with the exception of the only entrance '#' located in the border of the maze. Here's a simple 4-by-3 maze for your reference:
<pre>
***#**
*.X.X*
*.X..*
*....*
******
</pre>

The snake of length <i>L</i> is a sequence of <i>L</i> cells. Any two consecutive cells have a common side. All the cells in the sequence are different. The snake can creep in 3 ways relative to its current direction: forward, to the left or to the right. All the cells of snake's body move at once, each moving into the place of preceding one, except for the head cell. Here are the examples of snake's movement:
<ul>
<li><pre>321. -> .321</pre></li>
<li>
<pre>
321 -> .32
...    ..1
</pre>
</li>
<li>
<pre>
12 -> 23
.3    1.
</pre>
</li>
<li>
<pre>
12 -> 23
43    14
</pre>
</li>
</ul>
The snake creeps through exactly one cell per unit of time, or perishes if it has nowhere to creep into.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains <i>H</i> and <i>W</i> specifying the size of the maze, where 1 &le; <i>H</i> &le; 300 and 1 &le; <i>W</i> &le; 30. The second line contains <i>h</i><sub>0</sub> and <i>w</i><sub>0</sub> being the coordinates of the entrance cell; <i>h</i><sub>0</sub> equals either 1 or <i>H</i>, or <i>w</i><sub>0</sub> equals either 1 or <i>W</i>. Following are <i>H</i> lines of <i>W</i> characters each, specifying the maze outline ('X' for obstruction and '.' for free cell). Time is counted starting from 0; initially the snake has its head at (<i>h</i><sub>0</sub>, <i>w</i><sub>0</sub>) and all other body cells outside the maze. Time is counted until snake's head is again at (<i>h</i><sub>0</sub>, <i>w</i><sub>0</sub>). Even though the maze is a practice one, no snake of length 18 can get out from it alive.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain 16 lines, where <i>i</i>'th line is either the best time needed for a snake of length <i>i</i>+1 to get out from the maze, or &minus;1 if it can't get out alive.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 9
1 5
XXXX.XXXX
XXX...XXX
XX..X..XX
....XX..X
X.X.X.X.X
..XX.....
X...XXX..
XXXXX....
X.....XXX
</PRE></TD><TD><PRE CLASS="intable">10
10
10
22
22
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
</PRE></TD></TR></TABLE>
______________________________________________________
1392||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For the whole last week Ilya Petrov spent his time sitting at the computer and playing his favourite game "Perimeter". But today he suddenly realized that he does not want to look at the monitor. "Hm&hellip; It is so strange&hellip; What will I do now?" thought Ilya. "Oh! Astronomy!&nbsp;&mdash; most wonderful of all sciences. This is what I need!" &mdash; he exclaimed. So he did not lose time, he came to a store and bought a big black telescope. This night he spent admiring the beauty of distant galaxies, unreachable (so far) for a human&hellip; </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The magic of the moment was broken suddenly as Ilya noticed two planets, which have stuck each other. "What is it?"&nbsp;&mdash; exclaimed Ilya. He was really amazed. But he thought a little, took a paper and wrote down the following.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"Two planets have stuck each other if they have at least two common points. In this case we will say that each of the planets is reachable from another one. Then an archipelago is a group of planets for which the following conditions are true:
<UL>
<LI> Each of planets of archipelago is reachable from any other planet of the archipelago (possibly in a several steps). </LI>
<LI> There are no planets of the archipelago reachable from any planet outside of archipelago.</LI>
</UL></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Clearly, any set of planets can be uniquely split into archipelagos. You have to find the number of archipelagos for a given set of planets and from which planets each archipelago consists of. The solution of this task will make the humans more powerful and flawless race. So this task is to be solved immediately."</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains a number <i>K</i> (0 &lt; <i>K</i> &le; 1000) &mdash; the number of the planets in a set. Then <i>K</i> lines with planet center coordinates <i>X</i>, <i>Y</i>, <i>Z</i> and planet radius <i>R</i> follow. All numbers are integer and they do not exceed 1000 by absolute value. Absence of coinciding planets is guaranteed. All the planets are balls.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output must contain exactly <i>P</i> lines. Here <i>P</i> is the number of archipelagos in a given set of planets. The <i>i</i>-th line of output should contain the list of planets constituting the <i>i</i>-th archipelago. Each planet in a list is present by its number (planets are numbered by integers starting from 0). Planet numbers in a list must be printed in increasing order with a comma and a space as a separator. Do not print a comma after last number in a list.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Archipelagos must be printed in the following order. If the least number of the planet of one archipelago is less than the least number of the planet of another, then the first archipelago must precede the second in output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 1 1 1
1 3 1 1
</PRE></TD><TD><PRE CLASS="intable">0
1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 1 1 1
1 3 1 1
1 4 1 1
</PRE></TD><TD><PRE CLASS="intable">0
1, 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1000 1000 1000 1
 999 1000 1000 1
   1    1    1 1
</PRE></TD><TD><PRE CLASS="intable">0, 1
2
</PRE></TD></TR></TABLE>
______________________________________________________
1393||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let <b>T</b> denote some string of length <b>n</b> consisting of capital 
Latin letters. Let <b>Shift(T, k)</b> denote the left cyclic shift of 
<b>T</b> by <b>k-1</b> positions. The permutation array for <b>T</b> is an 
array <b>P[1..n]</b> such that <b>Shift(T, P[1])</b>, <b>Shift(T, P[2])</b>, 
..., <b>Shift(T, P[n])</b> is a list of cyclic shifts of <b>T</b> sorted in 
lexicographical order.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For given two strings <b>v</b> and <b>w</b> we define <b>LCP(v, w)</b> as 
the length of their longest common prefix. The <b>Average LCP</b> of the 
string <b>T</b> is the average length of longest common prefix between two 
consecutive shifts:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Example. <b>T</b> = 'MISSISSIPPI', <b>n</b> = 11:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table border="1" cellspacing="0" cellpadding="0">
 <tr align="center">
  <td width="55"><b>i</b></td>
  <td width="96"><b>P[i]</b></td>
  <td width="228"><b>Shift(T, P[i])</b></td>
  <td width="72"><b>LCP</b></td>
 </tr>
 <tr align="center">
  <td>1</td>
  <td>11</td>
  <td>'IMISSISSIPP'</td>
  <td>1</td>
 </tr>
 <tr align="center">
  <td>2</td>
  <td>8</td>
  <td>'IPPIMISSISS'</td>
  <td>1</td>
 </tr>
 <tr align="center">
  <td>3</td>
  <td>5</td>
  <td>'ISSIPPIMISS'</td>
  <td>4</td>
 </tr>
 <tr align="center">
  <td>4</td>
  <td>2</td>
  <td>'ISSISSIPPIM'</td>
  <td>0</td>
 </tr>
 <tr align="center">
  <td>5</td>
  <td>1</td>
  <td>'MISSISSIPPI'</td>
  <td>0</td>
 </tr>
 <tr align="center">
  <td>6</td>
  <td>10</td>
  <td>'PIMISSISSIP'</td>
  <td>1</td>
 </tr>
 <tr align="center">
  <td>7</td>
  <td>9</td>
  <td>'PPIMISSISSI'</td>
  <td>0</td>
 </tr>
 <tr align="center">
  <td>8</td>
  <td>7</td>
  <td>'SIPPIMISSIS'</td>
  <td>2</td>
 </tr>
 <tr align="center">
  <td>9</td>
  <td>4</td>
  <td>'SISSIPPIMIS'</td>
  <td>1</td>
 </tr>
 <tr align="center">
  <td>10</td>
  <td>6</td>
  <td>'SSIPPIMISSI'</td>
  <td>3</td>
 </tr>
 <tr align="center">
  <td>11</td>
  <td>3</td>
  <td>'SSISSIPPIMI'</td>
  <td>&nbsp;</td>
 </tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Average LCP</b> of 'MISSISSIPPI' is 1.3
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains integer <b>n </b>(1 &lt; <b>n</b> &lt; 
250001). The second line contains string <b>T</b>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the output should contain the <b>Average LCP</b> of 
<b>T</b> with 3 digits after decimal point.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11
MISSISSIPPI
</PRE></TD><TD><PRE CLASS="intable">1.300
</PRE></TD></TR></TABLE>
______________________________________________________
1394||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The military intelligence of one country found out that N (N < 100) battle ships of neighboring enemy country are situated in M rows (1 < M < 10). The intelligence knows the lengths l1, l2, ..., lN of the battle ships which are whole numbers in the interval [1, 100], and wants to know in which rows the ships are situated. The only thing that is known about the M rows are their lengths - L1, L2, ..., LM. Assume that the ships touch their neighbours in the rows and that every row contains at least one ship. Write program that will find one possible ordering of the ships in rows.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains N and M. The next N lines contain the lengths of the ships. The next M lines contain the lengths of the rows.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain M pairs of lines. The first line of each pair should contain the amount of the ships in the current row, the following line should contain the lengths of the ships from the current row. The order of the M row descriptions should be the same as the order in which the rows are given in the input.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 2
4
10
2
5
3
11
13
</PRE></TD><TD><PRE CLASS="intable">3
5 4 2
2
10 3
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This problem is the same as 1115 "Ships" but with harder tests.</DIV></DIV>
______________________________________________________
1395||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This problem is a hardcore version of the problem <A HREF="/problem.aspx?space=1&num=1452">"Pascal vs. C++"</A>. We, Timus Top Coders, dedicate it to those, who still believe in the power of human intellect. In the fact, that there is no limit to perfection. In the fact, that all the languages are equal. In the freedom of choice. In the unlimited programming! We are happy we could create this problem. And we hope you will be proud after you solve it. Enjoy!</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A sequence S consists of N elements S[i] indexed from 1 to N. You should take a maximal number of different elements from this sequence which are successive terms of some increasing arithmetical progression. The order of these elements in the sequence S does not matter. And may Pascal, C++ and Java be with you ;)</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (2 &le; N &le; 10000). The second line contains N integers S[i] (1 &le; S[i] &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the maximal number of taken elements. The second line should contain the indexes of these elements in the sequence S. The indexes may be listed in any order and should be separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
7 3 2 3 5 9
</PRE></TD><TD><PRE CLASS="intable">4
4 5 1 6
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We recommend you to solve this problem on C++, because in this specific case local C++ compiler produces more effective binaries than Pascal and Java compilers.</DIV></DIV>
______________________________________________________
1396||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider the sequence of numbers a[i], i = 0, 1, 2, ..., which
satisfies the following requirments:
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable"> a[0] = 0
 a[1] = 1
 a[2i] = a[i]
 a[2i+1] = a[i] + a[i+1]
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">for every i=1, 2, 3, ... .
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program which for a given value of N (0 &lt; N &lt; 10<SUP>18</SUP>) finds
the largest number among the numbers a[0], a[1], ..., a[N].
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains not more than 10000 lines containing one number N. The last line contains 0.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For every N in the input write the corresponding maximum value found.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
10
0
</PRE></TD><TD><PRE CLASS="intable">3
4
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This problem is the same as “<A HREF="/problem.aspx?space=1&num=1079">Maximum</A>” but with bigger limitations.
</DIV></DIV>
______________________________________________________
1397||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two students are playing the following game. There are 2&middot;<i>n</i> points on the plane, given with their coordinates (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>). Each move player paints the point with his own color (first with white, second with black). The first student makes odd moves, second student makes even moves. When all points are painted (each student made <i>n</i> moves), the game finishes. Each student gets amount of points (real number) that equals to the sum of all distances among pairs of points, colored with his color. Student who get more points becomes a winner. The students play optimally. Find and print the difference between points amount of winner and looser.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Contains multiple test cases. The first line of each case contains positive integer number <i>n</i> (<i>n</i> &le; 500). Next 2&middot;<i>n</i> lines contain points' coordinates (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>), (<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>), …, (<i>x</i><sub>2<i>n</i></sub>, <i>y</i><sub>2<i>n</i></sub>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output the difference between the points of winner and looser. Output the difference with three digits after decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0
0 1
1 0
1 1
2
0 0
1 0
0 3
1 5
</PRE></TD><TD><PRE CLASS="intable">0.000
1.937
</PRE></TD></TR></TABLE>
______________________________________________________
1398||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are a white bishop and black pawn on a chessboard. Moves are made in accordance with the usual chess rules. White moves first. Black wins if he can promote his pawn to a queen and the white bishop cannot capture the queen by the subsequent move. The game ends in a draw if it’s Black’s turn to move but the pawn cannot move forward. In other cases, White wins. It is required to tell the result of the game if both sides play optimally.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first and second lines show the positions of the white bishop and black pawn, respectively, by means of the standard chess notation. The rank in which the pawn is initially positioned may have the number from 2 to 7, and the bishop is initially positioned at any square different from the pawn’s square.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output WHITE if White wins, DRAW in the case of a draw, and BLACK if Black wins.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">a1
c2
</PRE></TD><TD><PRE CLASS="intable">WHITE
</PRE></TD></TR></TABLE>
______________________________________________________
1399||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The director of the household appliance chain “Rodonit” was calculating the month’s losses. The time was over when buyers were taking away the purchased goods from a store immediately after buying them. Now they demanded a free delivery and wanted to be telephoned in advance in order to agree upon the time of delivery. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are ten “Rodonit” stores in the city. The director understands that it is not always rational to deliver items directly from the stores where they were bought. On the outskirts of the city, there is a warehouse of household appliances, and next to the warehouse there is a garage. Every night employees compile a list of goods that have been bought during the day, with information about the buyers: names, addresses, and telephone numbers. These goods are delivered during the next day. The company has only one lorry for delivering goods. The lorry has a limited carrying capacity, therefore several trips are sometimes necessary to deliver the goods. The employees arrange the delivery schedule: which items should the lorry driver take from the warehouse for each trip and the order of visits to the buyers. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to save the fuel, the total length of the trips must be minimal. The employees use a city map to measure the distances between objects (which are the warehouse and the houses of the buyers from the list) and start the complicated optimization process. The following assumptions are made: 
<ol>
<li>The distance between the warehouse and the garage is 0.</li>
<li>Let <i>D</i>(<i>i</i>, <i>j</i>) be the distance between objects <i>i</i> and <i>j</i>. Then for any objects <i>i</i>, <i>j</i>, <i>k</i>  
<ol type="a">
<li><i>D</i>(<i>i</i>, <i>i</i>) = 0.</li>
<li><i>D</i>(<i>i</i>, <i>j</i>) = <i>D</i>(<i>j</i>, <i>i</i>).</li>
<li><i>D</i>(<i>i</i>, <i>k</i>) &le; <i>D</i>(<i>i</i>, <i>j</i>) + <i>D</i>(<i>j</i>, <i>k</i>).</li>
</ol></li>
<li>In the end of each trip the lorry must return to the garage.</li>
<li>The sum of the masses of the goods carried by the lorry at one time must not exceed its carrying capacity.</li>
</ol>

The director must pay extra wages to the employees for their night work. In order to economize, he decided to employ a programmer who would write a program producing the delivery schedule.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there are the number of buyers <i>M</i> &le; 20, the number of items <i>N</i> &le; 50, and the carrying capacity of the lorry <i>L<sub>max</sub></i>&nbsp;&le;&nbsp;3000. In the following lines there is a matrix <i>D</i> of size (<i>M</i>+1)&times;(<i>M</i>+1) containing distances between the objects (the warehouse is assigned the number 0 and the buyers are assigned numbers from 1 to <i>M</i>). Each of the following <i>N</i> lines describes the corresponding item: its mass and the number of the buyer (an integer from 1 to <i>M</i>). All the masses and distances are integers in the range from 1 to 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number of trips that should be made. Then describe each trip giving the following information. The first line must contain the numbers of the items delivered during this trip, given in an arbitrary order and separated with a space (these numbers are in the range from 1 to <i>N</i>). The second line must contain the maximal load of the lorry during this trip (which is the total mass of the items being delivered). In the third line, output the number of objects in the order of traveling separated with a space. In the fourth line, output the total length of the trip. In the last line output the total length of all the trips. The blocks describing the trips must be separated from each other and from the first and last lines by an empty line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 10 5
0 2 3 4 5 6 5 4
2 0 4 5 6 7 6 5
3 4 0 3 4 5 4 1
4 5 3 0 3 4 1 2
5 6 4 3 0 1 2 3
6 7 5 4 1 0 3 4
5 6 4 1 2 3 0 3
4 5 1 2 3 4 3 0
3 1
5 2
1 3
1 4
2 5
1 6
2 7
1 5
2 2
1 1</PRE></TD><TD><PRE CLASS="intable">4

1 10 
4
0 1 0
4

4 5 6 8 
5
0 4 5 6 0
14

2 
5
0 2 0
6

3 7 9 
5
0 3 7 2 0
10

34</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program will pass a test if it produces an answer that is no worse than the answer produced by the jury’s program for the same data.</DIV></DIV>
______________________________________________________
1400||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A famous gangster Vito Maretti has got a present from the sheriff &mdash; the latest model of a cellular phone Gnusmas. This telephone has a lot of cool functions. Most of them are useless for the ordinary gangster, but there are several useful features. One of them is an opportunity to insert additional characters into SMS.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The feature works in the following way. If Vito wants to insert a character that is absent at the keyboard, he has to push the "*" key first. Then a table with additional characters appears. There are <I>N</i> characters arranged in lines with <I>M</i> characters in each line, possibly except the last one. Initially the cursor is at the upper left corner of the table.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table border="1" cellspacing="0" cellpadding="4">
<tr>
	<td width="15" align="center">[.]</td>
	<td width="15" align="center">,</td>
	<td width="15" align="center">!</td>
	<td width="15" align="center">?</td>
	<td width="15" align="center">_</td>
</tr>
<tr>
	<td width="15" align="center">+</td>
	<td width="15" align="center">-</td>
	<td width="15" align="center">"</td>
	<td width="15" align="center">=</td>
	<td width="15" align="center">*</td>
</tr>
<tr>
	<td width="15" align="center">(</td>
	<td width="15" align="center">)</td>
	<td width="15" align="center">/</td>
	<td width="15" align="center">&nbsp;</td>
	<td width="15" align="center">&nbsp;</td>
</tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <I>N</i> = 13, <I>M</i> = 5. The cursor is denoted by the square brackets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One can move the cursor left, right, up and down respectively with the keys LEFT, RIGHT, UP, DOWN. Also the LEFT key moves the cursor from the first cell of a line to the last cell of the previous one and the RIGHT key – from the last cell of a line to the first cell of the next one. If the cursor is in the first cell of the first line then the LEFT key moves it to the last cell of the last line. Respectively, if the cursor is in the last cell of the last line then the RIGHT key moves it to the first cell of the first line. Thus one can choose any character by pushing the arrow keys just several times.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the given above example one can reach the cells ",", "+", "/" from the cell "."and the cells "=", "_", "(" from the cell "*", pushing an arrow key only once. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Even a gangster understands that the first location of the cursor is not optimal: the average number of the keys pushes needed to choose a character is not minimal. Vito has been exasperated by that fact. If he wants to send an SMS to the sheriff he has to push the keys some extra times. But Vito realized that he has a perfect way to solve this problem: he blackmailed you to make you reprogram his cellular phone.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The numbers <I>N</i> and <I>M</i> (1 &le; <I>N</i> &le; 256, 1 &le; <I>M</i> &le; 20).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line <code>"Mean = X"</code>, where <code>X</code> is the average number of the keys pushes assuming that initially cursor is positioned at the best possible initially position. Number <code>X</code> should be printed with a precision of two digits after the decimal point. Then print <I>N</i> integers, <I>M</i> of them in each line – the minimal number of the keys pushes that is necessary to choose each character with the found best initial position of the cursor. If the are several cases with the least average value output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
</PRE></TD><TD><PRE CLASS="intable">Mean = 1.00
1 0 1
2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1401||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. Chichikov is a wealthy man. Besides other ways of earning the money he used this one: he argued with some blunderers that he would be able to prove that it is impossible to pave the 512 &times; 512 square checker-board with the figures:
</DIV></DIV><DIV CLASS="problem_par_pre"><TABLE ALIGN="CENTER" CELLSPACING="0" CELLPADDING="0" BORDER="0"><TR><TD><PRE CLASS="intable">X       XX       X      XX
XX      X       XX       X
</PRE></TD></TR></TABLE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">and he always won. Once one of those blunderers happened to be not so silly and he claimed that he was able to pave the 512 &times; 512 square checker-board without the upper right cell with those figures. Chichikov blurted out that he could pave any 2<SUP><i>n</i></sup> &times; 2<SUP><i>n</i></sup> square checker-board without one arbitrary cell with those figures. One word led to another and they bet. Chchikov felt that he wouldn’t prove his case. Help him!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 9). The second line consists of two integers <i>x</i> and <i>y </i> &mdash; those are the coordinates of the deleted cell (1 &le; <i>x</i>, <i>y</i> &le; 2<sup><i>n</i></sup>). <i>x</i> is a number of a row and <i>y</i> is a number of a column. The coordinates of the upper left cell of the board are (1, 1).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your program is to output 2<sup><i>n</i></sup> lines with 2<sup><i>n</i></sup> numbers in each line. There must be 0 on the place of the deleted cell. On the other places there must be numbers from 1 to (2<sup>2<i>n</i></sup> &minus; 1) / 3 &mdash; a number of figure that covers this cell. It is clear that equal numbers must form a figure. If such a coverage is impossible, output “&minus;1”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 1
</PRE></TD><TD><PRE CLASS="intable">0 1 3 3
1 1 4 3
2 4 4 5
2 2 5 5
</PRE></TD></TR></TABLE>
______________________________________________________
1402||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Henry Shaker works as a barman in the favorite pub of Vito Maretti. Every evening he pleases the gangster with a new cocktail: vodka and Martini, gin and orange juice, kefir and mineral water. Vito pays generously for each new cocktail, but if the barman repeats a cocktail he is in trouble: Vito may shoot him. So Henry wants to know how soon he will have to leave the town. In order to know this you are to count how many different cocktails he can make having <I>N</i> components. A cocktail is the mixture of two or more components. Unfortunately, Henry can’t use one component more than once in the same cocktail. Nevertheless 'vodka and Martini' and 'Martini and vodka' are two different cocktails.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains an integer <I>N</i> (1 &le; <I>N</i> &le; 21)&nbsp;&mdash; an amount of components.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">an integer number of possible cocktails.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">12
</PRE></TD></TR></TABLE>
______________________________________________________
1403||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Freddy works as a courier for Vito Maretti. Once in the morning Freddy got an assignment to deliver N containers of whisky – every one to a different town of the state. It takes one day to deliver each container from the list. But each of the orders (one order – one container) is assigned its particular time of delivery and Freddy’s reward. If Freddy does not deliver an order in time he will get no reward and he even can be hauled over the coals. So there is no sense to deliver such orders. Help Freddy to compile an operating schedule that would yield the maximal profit – he won’t be in a hole.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of orders <I>N</i> (1 &le; <I>N</i> &le; 1000). Each of the next <I>N</i> lines contains two integers: the delivery time and Freddy’s reward. The delivery time is not less than 1 day and not more than 100000 days. The reward is from 1 to 100000 dollars.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain a number of orders that Freddy will deliver. The second line should contain a list of containers numbers in the order of their delivery separated with spaces. The out-of-date orders should not be delivered. If there are several solutions, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 17
5 15
2 10
2 11
</PRE></TD><TD><PRE CLASS="intable">3
1 4 2
</PRE></TD></TR></TABLE>
______________________________________________________
1404||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When Vito Maretti writes an important letter he encrypts it. His method is not very reliable but it’s enough to make any detective understand nothing in that letter. Sheriff doesn’t like such state of affairs. He wants to hack the cipher of Vito Maretti and he promises to forget about all of your faults if you do that for him. Detectives will tell you what this cipher looks like.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each word is enciphered separately. Assume an example that consists only of the small Latin letters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At first step every letter is replaced with the corresponding number: <b>a</b> with <b>0</b>, <b>b</b> with <b>1</b>, <b>c</b> with <b>2</b>, ..., <b>z</b> with <b>25</b>.Then 5 is added to the first number, the first number is added to the second one, the second number – to the third one and so on. After that if some number exceeds 25 it is replaced with the residue of division of this number by 26. And then those numbers are replaced back with the letters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s encipher the word <B>secret</b>.

<PRE>
Step 0.   s   e   c   r   e   t
Step 1.   18  4   2   17  4   19
Step 2.   23  27  29  46  50  69
Step 3.   23  1   3   20  24  17
Step 4.   x   b   d   u   y   r
</pre></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We’ve got the word <B>xbduyr</b>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given an encrypted word of small Latin letters not longer than 100 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the original word.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">xbduyr
</PRE></TD><TD><PRE CLASS="intable">secret
</PRE></TD></TR></TABLE>
______________________________________________________
1405||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr Vasilyevich is in a rage! His neighbor Vasiliy Petrovich grazed his goat in Petr Vasilyevich’s garden! Vasiliy Petrovich was not very long-sighted: Petr Vasilyevich had two goats and both of them would eat up and trample down the neighbor’s garden now.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasiliy Petrovich’s garden is rather big and it is not paled. The goats would have to spend much time to fulfill the plan. But there are several trees in the garden. Therefore Petr Vasilyevich decided to fasten the goats to some trees and to let them graze. But he has to fasten a goat to a tree with the rope so that the animal would not reach another tree, otherwise the goat would get entangled in the rope. At the same time the goats should not reach each other, otherwise they would trample down the same territory.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to cause the maximal damage to his neighbor Petr Vasilyevich wants the total area that the goats could reach to be the maximal. But he couldn’t fasten the goat closer than 1 meter and further than 50 meters from a tree. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer N (2 &lt;= N &lt;= 1000) – the number of trees in the garden. The next N lines contain the trees coordinates. The origin of coordinates is in the center of the garden. The coordinates are measured in meters with a one centimeter precision. The absolute values of the trees coordinates don’t exceed 100 meters. You may assume that the goat is fastened so that it can’t leave the plot’s area. A size of a goat can be neglected. It’s guaranteed that the goats can be fastened in the way described above.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print the maximal area that Petr Vasilyevich’s goats would be able to trample down. Area must be printed in square meters (m<SUP>2</sup>) with a precision of 1 square centimeter (cm<SUP>2</sup>).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
1 1
-2 0
5 3
-2 3
8 3.10
-2 -1
-2 2
8 4.10
</PRE></TD><TD><PRE CLASS="intable">36.8060
</PRE></TD></TR></TABLE>
______________________________________________________
1406||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Frank Tarantini is the main weapons specialist in the gang of Vito Maretti. He buys stolen weapons and forges the gun numbers. After that the weapons is given to the other gangsters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Recently Vito has charged Frank with the assignment to procure 20 new tommy-guns. Frank has fulfilled the assignment the same night. Now he is to change the guns numbers. In order not to arouse suspicion Frank uses as a new gun number the minimal next one with the same sum of digits. It takes 30 minutes to find such number because Frank is a gangster, not mathematician. But today he is short of time. So you are under the threat of one of his new tommy-guns. He wants you to write a program that would find the suitable number. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">consists of the k-digit number <I>N</i> – the old number of a tommy-gun (1 &lt;= <i>K</i> &lt;= 2000, 0 &lt;= <i>N</i> &lt;= 10<sup>1000</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">the new K-digit number that Frank needs or -1 if there is no such number.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">113
</PRE></TD><TD><PRE CLASS="intable">122
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0050
</PRE></TD><TD><PRE CLASS="intable">0104
</PRE></TD></TR></TABLE>
______________________________________________________
1407||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having been awaken today’s morning Vito Maretti has understood that it’s boring for him to rob banks. Now he is planning to take from banks only sums of money with decimal notations containing only digits 1 and 2. Since Vito is very honest gangster he hesitates if he can divide the loot between his gang in equal parts. For quite some time now (after one of such Vito’s insight) Vito’s gang has exactly 2<SUP>N</sup> members. Vito will reward you generously if given an integer N you determine the sum which decimal notation consists only of ones and twos that Vito will be able to divide in equal parts between the members of his gang.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">an integer <I>N</i> (1 &le; <I>N</i> &le; 100).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If exists a number which decimal notation consists only of the digits 1 and 2 that is divided by 2<SUP>N</sup> and has no more than 10000 digits then output it without the leading zeros. If there are several suitable numbers, then output any one of them. If there is no such number the output should contain the line “No solution”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">12
</PRE></TD></TR></TABLE>
______________________________________________________
1408||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This task is so simple. Calculate a product of two given polynomials.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two polynomials are written in the two input lines. Each line is not longer than 100 characters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A polynomial consists of summands separated with operations symbols “+” and “-”. A summand consists of one or several multipliers separated with “*” symbols. The first multiplier may be a coefficient (it may be equal to zero). The coefficient might be with the leading zeros but it doesn’t exceed 100. The first coefficient might have a “-” sign. The other multipliers has a form of X^N or X, where X is a variable (small Latin letter), <I>N</i> – nonnegative integer that doesn’t exceed 100 (might be with the leading zeros). Multipliers, summands and operations symbols may be separated with spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">in one line the product of those polynomials. The polynomial mustn’t have the similar summands (i.e. summands with the same set of multipliers differing only by coefficient). Each summand should have no two multipliers of the form X^N with the same X and N. Summands with zero coefficients and multipliers with zero powers should be omitted. Coefficient “1” of summand and power “1” of multiplier are to be omitted too.  The exceptions are: the summand “1” and the polynomial “0”. Multipliers in one summand should be arranged in the alphabetic order. The summands in the sum are arranged in descending order by the sum of multipliers powers. If two sums of multipliers powers are equal then the first summand to be written down is the summand with a greater power of the variable <I>a</i>. If these powers are equal we consider the power of the variable <I>b</i> and so on. The spaces should be placed according to the sample.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">x*y*z + 4*x^2*y - 2*z*y*y^4 - 1
x + 7*z
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-2*x*y^5*z - 14*y^5*z^2 + 4*x^3*y + 29*x^2*y*z + 7*x*y*z^2 - x - 7*z
</PRE></TD></TR></TABLE>
______________________________________________________
1409||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two gangsters Harry and Larry had a rest at countryside. They decided to spend some time shooting, so they put several beer cans (no more than 10) on a log. Harry started to shoot cans one after another from the leftmost to the right and Larry – from the rightmost to the left. At some moment it happened so that they shot one and the same can. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Harry got indignant and claimed that Larry owed him a considerable sum of money because Larry deprived him of shooting some more cans. Larry became furious and told Harry that he owed even greater sum of money to Larry because of the same reason. They started to argufy but nobody remembered how many cans there were at the very beginning. And no one of them was going to search cans which was shot. Anyway, each of them remembered exactly how many cans he shot. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine how many cans were not shot by Harry and how many cans were not shot by Larry.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains two integers &mdash; the number of cans shot by Harry and by Larry respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">two integers &mdash; the number of cans that were not shot by Harry and the number of cans that were not shot by Larry, respectively.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 7
</PRE></TD><TD><PRE CLASS="intable">6 3
</PRE></TD></TR></TABLE>
______________________________________________________
1410||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today Arthur has got not the best day of his life. Today is Thursday and in the morning he had to lie under a bulldozer, which was pulling down his house, and his planet is destroyed, and Marvin is a pain in the neck. And now 
Arthur is standing in front of Vl'hurgs' commander and he has to speak, otherwise in the space-time continuum a tiny crack will appear and so on... May be exactly Arthur will have this crack. For example, in the bones of his skull. So, he is to speak immediately and certainly in Vl'hurgish. There's only one problem: the only thing that Arthur has heard in Vl'hurgish is the demand to surrender that was proclaimed a second ago. The Hitchhiker's Guide to the Galaxy can only prompt to Arthur that the Vl'hurgish language is very complicated. There are millions of rules and some of them are very amusing. For instance, no sound in verbal Vl'hurgish may last more than one second. They don't like mumblers. It's known as well that Vl'hurgs don't like when replying to some remark you use any of the two-word combinations that were contained in the original remark. In this case they may think that you parody them and parodists are out of favor among Vl'hurgs. Also, these valiant warriors don't use the same word twice in one phrase. What should Arthur do? 
He wants to gain time. But he is to say something! Arthur has decided to repeat the phrase of Vl'hurgs' commander having thrown out just several words and not changing their order. What else can he do? Just gain time pronouncing each sound exactly one second.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But how much time can he gain this way?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a phrase of Vl'hurgs' commander. The words consist just of lower-case and capital Latin letters. Any other symbols are word separators. One letter denotes one sound. The length of any Vl'hurgish word is 
not greater than 100. The amount of words in one phrase doesn't exceed 100000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single number: the maximal time in seconds that Arthur may speak. Of course, Arthur doesn't want to seem a mumbler or parodist.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">You have come a long way
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR></TABLE>
______________________________________________________
1411||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>It was senseless, amusing, and a bit terrifying. In a sea, or maybe in an
ocean, or even on a planet completely covered with water there were 40 small islands. There was a castle with its own insignia and name on each island. Each island, or, more exactly, each castle was connected with three neighboring islands. Our neighbors were the Twelfth, the Twenty Fourth, and the Thirtieth islands&hellip;</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This is how Sergey Lukyanenko, a famous Russian science fiction writer, describes in his novel a mysterious world where teenagers
have got into. A fictitious world. Or perhaps a possible one? You are to answer this question.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Well, let's formalize the literary description of the world. Assume that the islands are located at nodes of an integer grid and form a rectangle. Every island is connected by bridges with exactly three neighboring islands (two islands are neighboring if the distance between them doesn't exceed 1.42). The bridges do not intersect and have the following property: for any two islands, there is a chain of bridges connecting them. Moreover, the destruction of any one bridge doesn't violate this property.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Try to determine what dimensions may have the rectangle of islands in order to make
such a world possible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two numbers in the input: the width and the height of a rectangle. Both numbers are in the range from 1 to 50.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If such a world is possible for the given dimensions, output a map (any one) of this world, following the agreements: an island is denoted by the Latin letter &quot;O&quot;, a bridge is denoted by an appropriate symbol from the set &quot;-|/&#92;&quot;. Spaces denote an area without islands and bridges (in the example below spaces are replaced with dots in order to make it clearer).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If such a world can not exist, output the phrase &quot;Imaginary world&quot;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 5
</PRE></TD><TD><PRE CLASS="intable">O-O-O-O-O-O.O-O
|\|.|..\|/|/|/|
O-O.O-O.O.O.O.O
.\././|../..|/|
O-O.O-O-O-O.O-O
|\..|..../.\..|
O-O.O.O-O-O.O-O
|/./|.|\..|\.\|
O-O-O-O-O-O-O-O
</PRE></TD></TR></TABLE>
______________________________________________________
1412||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This summer the covering of the Dynamo stadium pitch was replaced with a new one. For some time it will be necessary to treat it cautiously: the soil mustn't be too moist or too dry. So it is decided to control strictly the amount of watering of the covering. In particular, it's important to know how many millimeters of precipitations fall on the covering every minute during a rain. If this value is not enough, then the covering will be watered additionally. If the value is too large, then the covering should not be watered for some time after the rain. You'll have to calculate this important value.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It would be very easy if there were no people with umbrellas walking on the pitch!
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a short time (in 5 hours) you must work out the first test version of the algorithm. Fortunately, the test version mustn't take into account all of the details. For example, you may neglect the motion of people with umbrellas. Here is the list of the assumptions that your program should take into account: 

<UL>
<LI> Exactly 1 mm of precipitations fall down on the pitch each minute. </LI>
<LI> All the people in the stadium area hold opened umbrellas. </LI>
<LI> Each umbrella is an upper hemisphere of radius 1 meter.</LI>
<LI> There is no wind, i.e., raindrops fall vertically down until they encounter an obstacle.</LI>
<LI> All the water that has fallen on an umbrella streams down along the shortest way on the hemisphere. </LI>
<LI> The stadium pitch is a completely covered rectangular. </LI>
<LI> Umbrellas do not overlap.</LI>
<LI> There are four high posts in the corners of the pitch (team banners hang there during a match). </LI>
<LI> People in the stadium area are motionless. Their coordinates are known.</LI>
</UL>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers W and L (1 &le; W, L &le; 10000), which are the stadium's dimensions in meters. The third line contains an integer N  (1 &le; N &le; 1000), which is the number of people in the stadium area. The next N lines contain coordinates of these people in the form X Y (–10000 &le; X, Y &le; 10000). The corners of the pitch have coordinates (0, 0), (0, W), (L, 0) and (L, W).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the average amount of precipitations (in millimeters) falling on the pitch in a minute. This number should be given with accuracy to 3 decimal places.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 10
2
0.5 2
2 10.1
</PRE></TD><TD><PRE CLASS="intable">99.666
</PRE></TD></TR></TABLE>
______________________________________________________
1413||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mars Jumper is a new improved model of Moon Rover. Clever heads from the engineering department
proved that in the conditions of low gravity it's easier to jump, so the new vehicle moves by jumping. By
the way, the length of its jump is always one meter. Mars Jumper is controlled with a standard computer
keyboard. To assign the direction of jumping, one uses the complementary digit keys (those which are
on the right). It is very convenient and handy: 8 means a jump northward, 2 means a jump southward,
6 means a jump eastward, 7 means a jump to the north-west, and so on. 5 is an order to take a sample
of soil. In order to use the zero key, the chief engineer invented one more function: if this key is pressed,
the motor of the vehicle is self-destroyed. He thinks that this function could be very useful.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, to operate the Jumper is not an easy task. Not anyone can quickly move the vehicle, for
example, half a meter to the north. According to the designers, Mars Jumper can jump to a position
arbitrarily close to any specied point by means of a nite number of jumps.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The customers agreed to pay for the design and manufacture of Mars Jumper only after a trial. To conduct
a trial, the chief engineer seated his daughter at a computer and oered her to press some buttons. The
result of the trial was that the Jumper had jumped away. Now the engineers need to nd it urgently.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to tell the search team where to nd the Jumper. You know that the vehicle stopped at
the moment when the zero key was rst pressed, or, if this key was not pressed, at the end of the route
determined by the sequence of pressed keys. You are given this sequence. You must determine the nal
position of Mars Jumper. The testing area is considered to be an innite plane.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Not more than 10<sup>6</sup> digits from 0 to 9.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the nal coordinates of Mars Jumper (in meters, accurate to 10 decimal places) in
the form X Y, where X is the displacement of the Jumper from the initial point to the east and Y is its
displacement to the north.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1236987412369870234567890123456789</PRE></TD><TD><PRE CLASS="intable">1.0000000000 0.0000000000</PRE></TD></TR></TABLE>
______________________________________________________
1414||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the Hubble telescope had been orbited the number of known stars increased. Imagine how it will grow in the future when the mankind masters the hyperspace jump!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The farsighted astronomers want to get ready for that moment right now. They create a control system for a database of all known stars. The database will be multiuser and astronomers all over the world will be able to fill it with useful data. To improve the software's usability it's necessary to implement the popup prompting: when a new character is typed, the software must suggest the list of stars whose names start with the already typed characters. You are to help astronomers with their cosmic problem and to develop a prototype of the algorithm that will be used in the database control system in the future.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each input line consists of one operation. The first character denotes the type of the operation. The rest of the characters (small Latin letters or digits) are the operation's argument.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The operation types are as follows:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">'+' &mdash; add a star's name to the database. The argument of this operation is the name of the star that is to be added to the database. As the database is multiuser, the information concerning one star may be added several times. When the program is launched, the database contains a single word "sun".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">'?' &mdash; find all the names that start with the characters given in the operation's argument.  </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are not more than 10000 operations in the input and all the arguments contain not less than one and not more than 20 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For a given '+' operation you should output nothing.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each '?' operation output a respond to the query: the argument of the operation and then a list of stars' names that start with the given characters and that are presented in the database at the moment of the query.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The stars' names must be given in the lexicographical order, one in each line without repetitions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the length of the resulting list exceeds 20, then you should output the first 20 names only. Each name must be preceded by two spaces as it is shown in the sample (the spaces are replaced with dots in order to make the sample more illustrative).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">?e
+earth
+egg
?e
+eagle
+earth
?ea
</PRE></TD><TD><PRE CLASS="intable">е
е
..earth
..egg
ea
..eagle
..earth
</PRE></TD></TR></TABLE>
______________________________________________________
1415||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Sunny Town keeps pace with modern technologies. Not much time has passed since cellular
communication was introduced in the town, yet Shpuntik and Vintik have already designed their own
mobile phone with a built-in location transmitter. With this phone, no one of the Mites (especially
Neznaika) will get lost, because Vintik and Shpuntik will be able to know his location. Now the new
phone must be tested. It is decided to carry out the testing in the following way. Shpuntik goes around
the town with the phone and writes down its readings on a piece of paper. All of this time Vintik is at the
workshop and traces Shpuntik's travel watching a special monitor. When Shpuntik is back, they compare
their records. But there's one problem: Shpuntik's record is a list of lines with the phone's readings, and
Vintik has a list of numbers describing Shpuntik's travel. Write a program that generates Shpuntik's list
using Vintik's list under the assumption that the system works correctly.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The mobile phone that undergoes testing has a chromatic indicator of the signal's power and shows the
identier of the current cell. The indicator can show seven dierent colors, namely, the colors of a rainbow.
Violet corresponds to the strongest signal and red means that the signal is vanishing and the phone may
become disconnected any moment.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the distance between the phone and a base station is less then a certain value, then the signal is ideal
(which corresponds to the violet color of the indicator). This threshold distance may be dierent for
dierent stations. If the phone is moved away from a base station further than the threshold distance,
then the indicator goes indigo, then blue, green, and so on, until it becomes red and not changes anymore
as the signal decreases further. The indicator's color changes each time the signal's power falls 2 decibels.
The signal's power depends only on the distance from a base station and is in inverse proportion to this
distance. For example, when the distance increases two times, then the power decreases also two times.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The phone selects a base station according to the following rules:
<OL>
<LI>When the phone is being turned on, it selects a station with the strongest signal. If there are several
such stations, then the station with the minimal (with respect to the lexicographic order) name of
the cell is selected among them.</li>
<LI>The phone stays connected to the same station until its signal goes red; then it switches to the
search mode and tries to select a new station.</li>
<LI>The phone is in the search mode until it finds a station whose signal's level is enough for turning the indicator any color excepting red. If there are several such stations, then the phone uses the same selection rule as in the case of turning on.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Shpuntik writes down the phone's readings in the following format:
<OL>
<LI><CODE>Power on. CELL_ID:&lt;cell's_name&gt;, SIGNAL_LEVEL:&lt;indicator's_color&gt;</CODE><BR>
— the phone is on.</li>
<LI><CODE>Cell changed. CELL_ID:&lt;cell's_name&gt;, SIGNAL_LEVEL:&lt;indicator's_color&gt;</CODE><BR>
— the change of a base station.</li>
<LI><CODE>Signal changed. SIGNAL_LEVEL:&lt;indicator's_color&gt;</CODE><BR>
— the change of the indicator's color.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Even if the phone instantly switches over to another station, Shpuntik nevertheless writes down the line
registering the occurrence of the red indication in the previous cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>A comment for those who are not familiar with decibels:</i> a decibel is a logarithmic quantity characterizing ratios of values. If signal A has power W<SUB>a</sub> and signal B has power W<SUB>b</sub>, then the power of signal B differs from the power of signal A by <NOBR>10 · log<SUB>10</sub>(W<SUB>b</sub>/W<SUB>a</sub>)</NOBR> decibels. When one compares not powers, but, say, voltages,
then another formula is used: <NOBR>20 · log<SUB>10</sub>(U<SUB>b</sub>/U<SUB>a</sub>)</NOBR>, but Vintik and Shpuntik use the first one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of base stations in the Sunny Town: <i>N</i> (1 &le; <i>N</i> &le; 100). Then there are <i>N</i> lines describing the cells. Each of these lines is of the following form: X<SUB>c</sub> Y<SUB>c</sub> R<SUB>c</sub> S<SUB>c</sub>. The integer numbers X<SUB>c</sub>
and Y<SUB>c</sub> are the coordinates of a base station.The integer number R<SUB>c</sub> is its threshold distance within which the station's signal is shown by the violet color of the indicator. S<SUB>c</sub> is a string without spaces of length not exceeding 50, which is the name of the cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The (<i>N</i>+2)-nd line contains a number <i>M</i>, which is the number of linear segments of Shpuntik's route. The following <i>M</i> lines contain 4 integer numbers each: X<SUB>s</sub>, Y<SUB>s</sub>, X<SUB>e</sub>, Y<SUB>e</sub>. They are the coordinates of the beginning and of the end of a segment; &minus;10000 &le; X<SUB>c</sub>, Y<SUB>c</sub>,X<SUB>s</sub>, Y<SUB>s</sub>, X<SUB>e</sub>, Y<SUB>e</sub> &le; 10000, 0 &lt; R<SUB>c</sub> &le; 10000, 1 &le; <i>M</i> &le; 1000.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is guaranteed that Shpuntik's motion is continuous, which means that the end of each segment coincides
with the beginning of the following one. Also, we assume that at the points where the segments join,
Shpuntik's phone never changed cells and that for each of the stations the curves of change of the signal's
level do not pass through these points. And he never went at a tangent to that curves.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Correct Shpuntik's list.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0 1 Romashka
0 10 1 Lutik
10 10 2 Znaika
10 0 1 Children
2
5 5 -5 -5
-5 -5 5 5
</PRE></TD><TD><PRE CLASS="intable">Power on. CELL_ID:Znaika, SIGNAL_LEVEL:GREEN
Signal changed. SIGNAL_LEVEL:YELLOW
Signal changed. SIGNAL_LEVEL:ORANGE
Signal changed. SIGNAL_LEVEL:RED
Cell changed. CELL_ID:Romashka, SIGNAL_LEVEL:YELLOW
Signal changed. SIGNAL_LEVEL:ORANGE
Signal changed. SIGNAL_LEVEL:YELLOW
Signal changed. SIGNAL_LEVEL:GREEN
Signal changed. SIGNAL_LEVEL:BLUE
Signal changed. SIGNAL_LEVEL:INDIGO
Signal changed. SIGNAL_LEVEL:VIOLET
Signal changed. SIGNAL_LEVEL:INDIGO
Signal changed. SIGNAL_LEVEL:BLUE
Signal changed. SIGNAL_LEVEL:GREEN
Signal changed. SIGNAL_LEVEL:YELLOW
Signal changed. SIGNAL_LEVEL:ORANGE
</PRE></TD></TR></TABLE>
______________________________________________________
1416||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Zaphod Beeblebrox &mdash; President of the Imperial Galactic Government. And by chance he is an owner of enterprises that trade in secondhand pens. This is a complicated highly protable and highly competitive business. If you want to stay a leader you are to minimize your expenses all the time. And the presedent's high post helps in those aairs. But he is to keep this business in secret. As a president Zaphod has access to the top secret and important information  an exact value of power loss in the hyperspace transition between the planets. Of course, this information is very useful to his company. Zaphod is to choose the minimal possible set of trans-planet passages so that he could pass from any planet to any other one via those passages and their total cost would be minimal. The task won't be complicated if Zaphod was not to keep in secret that he helps his company with the secret information. Thus, Zaphod decided to find not the cheapest passages set but the next one. As a real businessman he wants to estimate the value of his conspiracy expenses.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two integers: <i>N</i> (2 &le; <i>N</i> &le; 500) is a number of planets in the Galaxy and <i>M</i> is an amount of possible transitions. The next <i>M</i> lines contain three integers <i>a<SUB>i</sub></i>, <i>b<SUB>i</sub></i> the numbers of the planets that are connected with some passage (1 &le; <i>a<SUB>i</sub></i>, <i>b<SUB>i</sub></i> &le; <i>N</i>), and <i>w<SUB>i</sub></i> (0 &le; <i>w<SUB>i</sub></i> &le; 1000) is the transition cost. If an <i>A</i> to <i>B</i> transition is possible then a <i>B</i> to <i>A</i> transition is possible, too. The cost of those transitions are equal. There is not more than one passage between any two planets. One can reach any planet from any other planet via some chain of these passages.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should find two different sets of transitions with the minimal possible cost and output theirs costs. Print the minimal possible cost first. If any of those sets of transitions does not exist denote it's cost by &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 6
1 2 2
2 3 2
3 4 2
4 1 2
1 3 1
2 4 1
</PRE></TD><TD><PRE CLASS="intable">Cost: 4
Cost: 4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 2
1 2 2
2 3 2
</PRE></TD><TD><PRE CLASS="intable">Cost: 4
Cost: -1
</PRE></TD></TR></TABLE>
______________________________________________________
1417||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the First Lunar Casino there are new rules for playing space poker. A pack contains <i>N</i> cards. A player pays the croupier 20 space rubles and chooses a card from his pack. The croupier chooses a card from his pack. If the selected cards are identical, then the player wins 1000 rubles. If the cards are different, then he/she may win a sum not exceeding 10 rubles. This sum depends on the cards that have been chosen
and is specied in the prize-table.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to write a program that tells the croupier which card to choose in order to maximize the mean profit of the casino. It is supposed that all players know the prize-table by heart and choose their strategies in the best possible way.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If you ask any mathematician how to write such a program, you'll learn that this is a classical minimax problem, which was solved decades ago, and that everyone should know about matrix games with mixed strategies. The croupier should choose a card at random with such probabilities that the mathematical expectation of the gain is independent of the card chosen by the player. And if you ask about a mathematical expectation, this is a kind of a mean value: the sum of possible gains multiplied by probabilities of getting them.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of cards <i>N</i> (1 &lt; <i>N</i> &le; 100). Then follows the prize-table. Each row of the table shows possible gains of a player who has chosen the card corresponding to the number of the row. The number of the column corresponds to the card chosen by the croupier. The numbers in the main diagonal of the
table are 1000, other numbers are in the range from 0 to 10.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output with accuracy to the fifth digit the probabilities with which the croupier should choose a card.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1000 10 10
0 1000 1
5 3 1000</PRE></TD><TD><PRE CLASS="intable">0.32986
0.33623
0.33391</PRE></TD></TR></TABLE>
______________________________________________________
1418||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Military headquaters plan to develop a better protection for a spaceport. They suppose that the spaceport would be best protected if it is surrounded with as many fences as possible and each fence is patroled by armed guards. The corresponding order was issued and military engineers started to develop a project. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Wishing to be promoted, sergeant Stupid sent soldiers to dig in fence poles before the project was actually ready. Without much thinking, the soldiers put a lot of poles at random. Help the sergeant to decide how to make barbwire fences using the poles so that the number of fences is maximal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer 3 &le; <i>N</i> &le; 4000, which is the number of the poles. Each of the following <i>N</i> lines contains two integers 0 &le; <i>x</i>, <i>y</i> &le; 10000, which are the coordinates of a corresponding pole. No two poles have the same position.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain a single integer number, which is the maximal possible number of nested fences that can be constructed. Each fence is a closed polygonal line without self-crossing whose vertices are poles. Different fences should not have common points.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
100 100
200 100
100 200
300 300
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR></TABLE>
______________________________________________________
1419||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><blockquote><I>It was senseless, amusing, and a bit terrifying. In a sea, or maybe in an ocean, or even on a~planet completely covered with water there were 40 small islands. There was a castle with its own insignia and name on each island. Each island, or, more exactly, each castle was connected with three neighboring islands. Our neighbors were the Twelfth, the Twenty Fourth, and the Thirtieth islands&hellip;</I></blockquote></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This is how Sergey Lukyanenko, a famous Russian science fiction writer, describes in his novel a mysterious world where teenagers
have got into. A fictitious world. Or perhaps a possible one? You are to answer this question.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Well, let's formalize the literary description of the world. Assume that the islands are located at nodes of an integer grid and form a rectangle. Every island is connected by bridges with exactly three neighboring islands (two islands are neighboring if the distance between them doesn't exceed 1.42). The bridges do not intersect and have the following property: for any two islands, there is a chain of bridges connecting them. Moreover, the destruction of any one bridge doesn't violate this property.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To make a travel in their world more convenient, aborigines use maps of the following form: if the world is a rectangle of width W and height H (so it consists of W*H islands), then a map is a rectangle <nobr>(2W &ndash; 1) &times; (2H &ndash; 1)</nobr>. Islands on the map are denoted by the Latin letter &quot;O&quot;, and bridges are denoted by an appropriate symbol from the set &quot;-|/&#92;&quot;. Spaces denote an area without islands and bridges (in the example below spaces are replaced with dots in order to make it clearer).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">By accident, you've got a piece of paper that seems to be a map of some world. Try to determine if the image on the paper is a proper map of an Island World, i.e., if it satisfies all the rules of charting a map and the described world satisfies the conditions given above.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers: the width <i>W</i> and the height <i>H</i> of a map. Both numbers are in the range from 1 to 100. The next <i>H</i> lines contain an image. Each line of the image is of length <i>W</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the input image is a proper map of an Island World, then output the phrase &quot;Island world&quot;. Otherwise, output &quot;Just a picture&quot;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15 9
O-O-O-O-O-O.O-O
|\|.|..\|/|/|/|
O-O.O-O.O.O.O.O
.\././|../..|/|
O-O.O-O-O-O.O-O
|\..|..../.\..|
O-O.O.O-O-O.O-O
|/./|.|\..|\.\|
O-O-O-O-O-O-O-O
</PRE></TD><TD><PRE CLASS="intable">Island world
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 2
O-O
|..
</PRE></TD><TD><PRE CLASS="intable">Just a picture
</PRE></TD></TR></TABLE>
______________________________________________________
1420||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's introduce the operation of <I>division with remainder</I> on the ring of complex numbers with integer components. Let <B>a</B> be a dividend and <B>b</B> be a divisor. Then the result of the operation is any pair (q, r) satisfying the following conditions:
<ol type="1">
<LI>b &#183; q  +  r = a (here “&#183;” and “+” are standard operations of multiplication and addition of complex numbers)</LI>
<LI>|r| &lt; |b|</LI>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's evident that this operation is multivalued. You should output the number of different possible results of this operation for given dividend and divisor.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two input lines. Each of them contains two integers, which are real and imaginary parts of a complex number, respectively. The absolute values of all the numbers do not exceed 10<sup>6</sup>. The first line is the dividend and the second line is the divisor.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different possible results of the above-described operation.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12 0
0 5
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1421||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Serious businessman Vladimir Bludgeon, who was once well known as Scorched Vlad, controls a trust of N enterprises. A former accomplice of Vladimir, famous banker Alexander Ironfist, whose alias was Wry Alex, owns a holding company of N banks. As it should be among the old friends, the enterprises of Mr. Bludgeon take credits at the banks of Mr. Ironfist only, and the banks of Mr. Ironfist give credits to the enterprises of Mr. Bludgeon only. All data about the amounts of the credits is properly hidden to evade taxes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But one day an old rival of Vladimir and Alexander, police general Ivan Crowbar alias Rotten Ivan has come on the scene. Mr. Crowbar wants to take his revenge on Mr. Bludgeon and Mr. Ironfist for old insults and reveal all credit operations between their enterprises and banks.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For a start Ivan's people seized some documents from the offices of Vladimir's enterprises. For each enterprise the total amount of credits SR[i], which were taken by this enterprise, was found. Then during the similar operations for each Alexander's bank the total amount of credits SC[i], which were given by this bank, was found. The final step is to use these findings and fill so-called credit matrix. Here the credit matrix is a square table with N rows and N columns, and each element A[i, j] of this matrix should be equal to amount of the credit which was taken by i-th enterprise of Mr. Bludgeon at j-th bank of Mr. Ironfist. It is known for certain that an amount of any credit is an integer number between 0 and 100. It should be remembered that the data obtained during Ivan's operations could be falsified, so it may be impossible to fill the credit matrix.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer N (2 &le; N &le; 100). The second line contains N integers SR[i] (0 &le; SR[i] &le; 32000). The third line contains N integers SC[j] (0 &le; SC[j] &le; 32000). The sum of all SR[i] is equal to the sum of all SC[j].</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output "NO", if the credit matrix cannot be filled. Otherwise the first line should contain "YES", and each of the next N lines should contain N corresponding elements A[i, j] of the credit matrix. The elements should be separated by single spaces. If the problem has several solutions, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
267 157 188 259
193 320 346 12
</PRE></TD><TD><PRE CLASS="intable">YES
100 55 100 12
0 70 87 0
0 95 93 0
93 100 66 0
</PRE></TD></TR></TABLE>
______________________________________________________
1422||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Beastly cold is chilling to the marrow. Blue radiance is scorching the eyes. The vortex of power is engulfing into the depth of the darkness which is impossible to return from… But it was not the end. Power and will prevail over all. By the last effort he raised his evanescent shadow and fell out from the darkness into the real world — straight onto cold floor.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Light wizard Anton Derevensky was lying in the middle of the room near a dilapidated sofa dolefully staring at the choppy ceiling. As a result of last night he had an insufferable headache as well as a strong desire to do something good. Something light.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Flies were flying within the room. A lot of flies. Dark creatures. They must be lead into the light. By several passes Mr. Derevensky froze all flies, so that they remained motionlessly fixed in the air. But last night’s feast required enormous energy costs, so Anton, who decided to inflame the flies to turn them to fireflies, was very surprised to discover that all his remained power is enough to create only one tiny fireball.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. Derevensky had a drink of water and started to count the flies. It appeared that exactly N flies had been fixed in the air in expectation of their fate. Anton was running with a ruler all over the room all day long and finally calculated cartesian coordinates X<sub>i</sub>, Y<sub>i</sub> and Z<sub>i</sub> of each fly. Light wizard has decided to lead into the light as more flies as possible using a single fireball which can be cast in any point of the room and launched in any direction. A trajectory of the fireball is a  straight line. If a fly is hit by the fireball it turns to a firefly, and the fireball continues its flight in the same direction. Since Anton's lack of power you may neglect fireball's size and consider it as a point particle.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (1 &le; N &le; 2000). Each of the next N lines contains the integer numbers X<sub>i</sub>, Y<sub>i</sub> and Z<sub>i</sub> (&minus;10<sup>7</sup> &le; X<sub>i</sub>, Y<sub>i</sub>, Z<sub>i</sub> &le; 10<sup>7</sup>) for the corresponding fly.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the maximal number of flies which can be turned to fireflies using the fireball.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
-1 1 -1
0 1 2
0 0 -1
-2 -1 2
2 -1 -2
-1 0 2
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1423||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">I want to tell you a story. Not entirely, but only the very beginning, because the ending of this story became a legend of programming&mdash;as well as its heroes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When computers were large, when trees were small, when the sun shined brighter&hellip; Once upon a time there were Three Programmers. I doubt whether they participated in any programming contests, because there were no contests at that ancient time. There was neither ACM ICPC nor Timus Online Judge. But there were Three Programmers.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day Three Programmers invented an amusing game to train memory and mental faculties. The First Programmer thought out a string S which was N characters long and passed it to the Second and the Third Programmers. The Second Programmer executed X (0 &le; X &lt; N) successive cycle shifts (a cycle shift is a transfer of the last character of the string to the beginning of this string) with this string. As a result of these operations a string T was produced, and the Second Programmer passed it to the Third Programmer. A task of the Third Programmer was to find the number X or make sure that the Second Programmer was mistaken, because the string T could not be produced from the string S via cycle shifts.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (1 &le; N &le; 250000). The second line contains the string S. The third line contains the string T. Each string has length N and may contain any ASCII characters with codes from 33 to 255.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the string T can be produced from the string S via cycle shifts you should output the desired number X, otherwise you should output &ldquo;&minus;1&rdquo;. If the problem has several solutions, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11
abracadabra
racadabraab</PRE></TD><TD><PRE CLASS="intable">9
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider the strings S = &ldquo;abracadabra&rdquo; and T = &ldquo;racadabraab&rdquo;. The string T can be produced from the string S via 9 cycle shifts: &ldquo;abracadabra&rdquo; > &ldquo;aabracadabr&rdquo; > &ldquo;raabracadab&rdquo; > &ldquo;braabracada&rdquo; > &ldquo;abraabracad&rdquo; > &ldquo;dabraabraca&rdquo; > &ldquo;adabraabrac&rdquo; > &ldquo;cadabraabra&rdquo; > &ldquo;acadabraabr&rdquo; > &ldquo;racadabraab&rdquo;</DIV></DIV>
______________________________________________________
1424||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Minibus driver Sergey A. Greedson has become totally famous for his phenomenal greediness. He claimed time and again that he held himself in readiness to throttle his brother and sell out all friends for an extra cent. Unfortunately, these statements were impossible to verify because Sergey had got neither brothers nor friends, home or family. And he had not got any money either. An old  minibus seemed to be the only property of Mr. Greedson. So he traveled the city giving occasional passengers a lift and sometimes examining pavements for dumps...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day the heavens took pity on Sergey and decided to stop his useless being in out cruel world. For this noble purpose an axe fell down on the head of carefree Mr. Greedson, who had just left the minibus on account of inviting shine of an empty beer bottle. The dreams of profitable bottle sale went out of his head in a blink replaced by the axe. In a figurative sense, of course. Heavens tool could not break a stiff skull of Mr. Greedson but, as it turned out later, gave him several rather useful abilities.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Soon after the axe was sold, Sergey discovered his ability to foresee the future. What a scope, what a prospect was given to the artless minibus driver! Who are we and where are we going? What is to be feared and hoped? The answers for these questions did not worry Mr. Greedson at all. But Sergey's greedy mind was clever enough to use his new ability to earn some money. As many others, Mr. Greedson was absolutely sure that the easiest way to enrichment was to fleece working-people, in other words, the passengers of his own minibus.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every day the minibus makes a passage from 1-st to N-th bus stop. There are M passenger seats in the minibus. Once in the evening Mr. Greedson has counted the probability lines and found out that the next day K persons would wait for the minibus on the bus stops. For each person the number of bus stop S[i], where he wants to get into the minibus, and the number of bus stop F[i], where he is going to leave the minibus, were found. According to Sergey's pricing policy, each passenger must pay P dollars for a ticket despite the number of passed bus stops. More over, at a bus stop Mr. Greedson may allow some persons to get into the minibus and ban others (in other words, he may choose his passengers himself). After the problem was posed to maximize the gain, Sergey decided to find the persons who should be allowed to get into the minibus. Unfortunately, he does not possess enough power to perform it. And what about you?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integer numbers N (2 &le; N &le; 100000), M (1 &le; M &le; 1000), K (0 &le; K &le; 50000) and P (1 &le; P &le; 10000). Each of the next K lines contains the integer numbers S[i] and F[i] (1 &le; S[i] &lt; F[i] &le; N) for the corresponding passenger.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the maximal gain. The second line should contain the numbers of persons, who should be allowed to get into the minibus to obtain this gain. The numbers should be listed in any order and separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 2 6 9
1 4
2 6
1 5
2 3
4 6
3 6
</PRE></TD><TD><PRE CLASS="intable">36
1 5 6 4
</PRE></TD></TR></TABLE>
______________________________________________________
1425||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Paul V. Pawnstein, 45 years old. Famous grand master. World chess champion. Sure of his future. Sure of himself. Sure, that Moore's Law is not and will never be a thing of his concern: "I can hardly imagine it".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ten years have passed. Mr. Pawnstein frowned and began the next game against the supercomputer Deep Navy - slowly moved a white pawn from e2 to e4. Multicolored lights immediately started to blink on the surface of the board, something cracked inside it, and some seconds later a cold female voice declared: "Black wins after 43 moves in case of the optimal strategy of white". Perplexed grand master stared at the board...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Another ten years have passed. Long-term work of Mr. Pawnstein has just crowned with invention of absolutely new N-dimensional chess. The grand master is entirely sure that computing power of future engineering will not be enough to create a good N-dimensional chess computer player, because even the calculations, which seem to be elementary, require huge time and memory costs. As an example Mr. Pawnstein gives us a classical problem which is known as "Queen II".</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A board in N-dimensional chess is N-dimensional cube S*S*...*S cells in size. A cell in one of its corners (this corner is chosen at will) has coordinates (1, 1, ..., 1), and a cell in the opposite corner has coordinates (S, S, ..., S).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A rook in N-dimensional chess makes its move shifting by any non-zero number of cells along one of its coordinates. A bishop in N-dimensional chess makes its move shifting by any non-zero number of cells along all its coordinates at once, and these shifts must be equal to each other by their absolute values. A queen in N-dimensional chess can make its move both as a bishop and as a rook.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A queen is situated on empty chess-board in a cell with coordinates (C[1], C[2], ..., C[N]). You should calculate a number of different cells the queen can be situated in after two its moves.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers N (1 &le; N &le; 5) and S (2 &le; S &le; 100). The second line contains N integer numbers C[i] (1 &le; C[i] &le; S).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the solution of "Queen II" problem.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2 3
</PRE></TD><TD><PRE CLASS="intable">27
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider three-dimensional chess-board 3*3*3 cells in size. If a queen is initially located in the cell with coordinates (1, 2, 3) it can make its first move to the cells with coordinates (2, 2, 3), (3, 2, 3), (1, 1, 3), (1, 3, 3), (1, 2, 1) and (1, 2, 2) moving as a rook, and to the cells with coordinates (2, 3, 2) and (2, 1, 2) moving as a bishop.</DIV></DIV>
______________________________________________________
1426||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was a warm autumn day, a carpet of fallen leaves rustled underfoot, a light breeze caressingly aired his face, and the sun itself seemed to stretch its rays to the earth...
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Hereditary abstract painter Aristarh M. Petroff opened his eyes and swore: "Dammit, what a dream!" Nightmares harassed Mr. Petroff all month long when he painted a series of pictures named "Quadrangles". The series was ordered by some eccentric millionaire, and after the job was completed Aristarh was going to fairly enrich himself. At the thought of money Mr. Petroff grinned. And at that very moment the phone rang:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"Hallo... Yes, Petroff... Glad to hear you, nice weath... what changes?... Well, rather minor... What? Rectangles??! But we have already agre... doesn't matter? An what should I do with already painted... You don't care?... Yes, sure... of course... no problem... all the best."</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The millionaire must be really eccentric to change his order at the last moment. Now he wants to buy pictures with rectangles instead of quadrangles. It goes without saying that new pictures should be painted on a level with the highest ideological and artistic standards.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, Aristarh is not going to junk already painted pictures. He just cannot destroy the products of his own creative work, and, after all, new canvases will cost a lot of money. But even now an inspiration has not abandoned Mr. Petroff, and a brilliant idea has come to his mind.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">While creating each of N pictures, Aristarh drew four basic points with cartesian coordinates (x1[i], y1[i]), (x2[i], y2[i]), (x3[i], y3[i]) and (x4[i], y4[i]) on its canvas. Then he connected each pair of the basic points by segments and covered the resulting figure with paint. However the painter is not good in geometry, so sometimes he created triangles or even segments instead of quadrangles. More over, two or more basic points might coincide with each other.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now Mr. Petroff is going to draw a rectangle on each picture so that each of four already drawn basic points should lie on some side of this rectangle (several points may lie on the same side). No two vertices of the rectangle should coincide with each other (i.e. a point or a segment is not a rectangle). At the same time it should be remembered that each picture is a square 20000*20000 with a center at point (0, 0), and the rectangle should fit this square. A true painter only can think out such thing. And a true programmer only can realize it!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (0 &le; N &le; 10000). Each of the next N lines contains the integer numbers x1[i], y1[i], x2[i], y2[i], x3[i], y3[i], x4[i] and y4[i] (-5000 &le; x1[i], y1[i], x2[i], y2[i], x3[i], y3[i], x4[i], y4[i] &le; 5000) for the corresponding picture.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of N lines should contain a character "+" (plus) followed by coordinates of the vertices of the desired rectangle for the corresponding picture. The vertices should be listed in clockwise or counterclockwise order. The coordinates should be separated by single spaces and printed with at least six digits after decimal point. If the problem has no solution for some picture, the corresponding line should contain a character "-" (minus). If the problem has several solutions for some picture, the corresponding line should contain any of them. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">2
1 0 0 1 3 2 1 2
0 1 0 -1 1 0 -1 0
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">+ 0.000000 0.000000 0.000000 2.000000 3.1234567890 2.000000 3.1234567890 0.000000 
+ 0.000000 -1.000000 1.000000 0.000000 0.000000 1.000000 -1.000000 0.000000
</PRE></TD></TR></TABLE>
______________________________________________________
1427||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mobile technologies are going to become a part of our life. So many times you have read this sentence in advertisements and magazine articles. So many times you have heard it from fattened IT corporations presidents who grab money of deceived investors and from managers of mobile phones shops who try to sell useless smartphones at the cost of $500 a piece... Sleep tight. The age of mobility has not begun yet. Believe me, you will feel when it comes to life.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day it will be felt by the millions of people who would find their mobile phones full of dozens of SMS messages offering sweets with swastika, courses of american Russian, services of famous charlatan Ilya German and participation in forthcoming contests on Timus Online Judge. Unfortunately the history will not keep the name of one modest programmer who was in the very origin of new age technology which will be known soon as SMS-spam. But I will say something else. This programmer is you.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">SMS-spam is a promising technology of mass delivery of text advertisements by means of SMS messages. Very convenient, very effective, very easy. Not so easy, however. The problem is the length of one SMS message is limited while advertisements are usually rather long. Fortunately, an advertisement can be divided into several parts, and each part will be sent as a separate SMS message.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But here greedy mobile operators enter the game, because they also want to get some money. Their acquisitiveness is expressed in the fact that each delivered SMS message must be paid for. So an advertisement should be delivered to a thankful recipient by means of minimal number of SMS messages.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And the last thing. Quirky mobile operators have invented an amusing feature for people who want to save some money. SMS message which consists of latin letters and spaces only can be up to M characters long while the length of SMS message which consists of any characters is limited by N characters.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers N and M (1 &le; N &le; M &le; 10000). The second line contains an advertisement. The advertisement consists of from 1 to 100000 characters. Each character is either a latin letter, a space, a digit or a punctuation mark "." (full stop), "," (comma), ";" (semicolon), ":" (colon), "!" (exclamation mark), "?" (question mark), "-" (hyphen) or """ (double quotes). The advertisement is terminated by the end of line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the minimal number of SMS messages required to deliver the advertisement.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">10 15
On the 11-th of February, 2006 the contest "Timus Top Coders: First Challenge" is held!
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE>
______________________________________________________
1428||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">System administrator Vasily Slipman, also known as Jedi Master, was an outstanding jester. He enciphered gigabyte archive with... Not with cartoon films for children, of course. Well, you have already understood with what. To cut a long story short, Vasily enciphered the archive using a key formed by six unknown numbers, and then he died. Strange inscriptions written by the decedent were found on the surface of his computer’s case. These inscriptions may cast light on the origin of those six numbers which are so essential for people.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It appeared that the greatest human Sins in Mr. Slipman’s opinion are Fear, Anger and Hatred. By the way, nothing was said about terrorism. Hence the greatest human Virtues are Valor, Calmness and Love. Vasily assigned a special Number to each of the Sins and the Virtues. The Numbers of the Sins were found, and now the time has come to calculate the Numbers of the Virtues.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us denote the Number of Fear as A, the Number of Anger as B, the Number of Hatred as C, the Number of Valor as X, the Number of Calmness as Y and the Number of Love as Z. Mr. Slipman chose the Numbers A, B and C so that C-1 is divisible both by A and B, i.e. (C-1) modulo A = (C-1) modulo B = 0. You are to find the integer Numbers X, Y and Z in order to satisfy the following strange equation: X^A + Y^B = Z^C. The inscriptions tell us that X, Y and Z should not be less than 1 and more than 10^50. It was the will of the decedent.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer Numbers A, B and C (1 &le; A, B, C &le; 32).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired Numbers X, Y and Z. Each Number should be printed in a separate line. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2 3
</PRE></TD><TD><PRE CLASS="intable">10
5
5
</PRE></TD></TR></TABLE>
______________________________________________________
1429||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone knows that a glass is the most useful thing to make biscuits. It is desirable for a glass to be faceted, but a round one is also acceptable. A glass should be empty, otherwise kids will not be able to eat these biscuits. But popular singer Michael liked kids very much and wanted to invite them to celebrate his birthday at his villa. In fact, he was going to bake some biscuits for them.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Michael prepared dough, then rolled out it on the surface of the table as a circle of radius 32000 with a center at point (0, 0) and finally started to cut biscuits. It must be said that he tried his best and even perspired profusely. Michael had not got any glass, so he used all round objects he could reach - pickle-jars, herring-cans, pots, a collection of beer mugs, and even bottle lids. Over and over again Michael took the next round object of radius R[i], put it on the surface of the dough so that its center was at point with cartesian coordinates X[i] and Y[i]. As a result of each action the next thin round cut appeared on the surface of the dough - an outline of future biscuit.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As soon as the last pot was soiled, and favorite tea-set vanished into the depth of the bin, Michael finally stopped and looked at the result of his work. His eyes grew dim, and his forehead furrowed. The point was that some cuts intersected, so not all of the biscuits were round. Some of them even had holes. But it could not stop Michael, who is going to calculate the number of prepared biscuits.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (0 &le; N &le; 500). Each of the next N lines contains the integer numbers X[i], Y[i] (-10000 &le; X[i], Y[i] &le; 10000) and R[i] (1 &le; R[i] &le; 10000) for the corresponding cut.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of the biscuits prepared by Michael.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
-1 0 2
1 0 2
0 0 3
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1430||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petty bureaucrat Victor Thiefton was disposed towards stealing from his childhood. But one thing is to legally privatize national factories, diamond fields and oil derricks at the cost of billions dollars. And another thing is to filch some money from a poor regional budget. Our legislation is very strict. Therefore Victor felt that justice is on the alert just after he extracted his hand from the national pocket. What should he do to escape inevitable punishment?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. Thiefton has once heard that in accordance with the criminal legislation standards he would be condemned to long imprisonment for a theft whereas in case of a peculation he could escape with a suspended sentence only. So if the most part of stolen money is peculated, the duration of imprisonment will be reduced.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The same evening Mr. Thiefton burst into "MegaApril" superstore and rushed for overflowing storefronts carrying a purse with N stolen dollars. It appeared that unlimited number of high-quality goods and goods at moderate price were on sale in the superstore. High-quality goods cost A dollars per piece, and goods at moderate price cost B dollars per piece. Victor should spend as much stolen money as possible to reduce the duration of imprisonment to a minimum.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer numbers A, B and N (1 &le; A, B, N &le; 2∙10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of high-quality goods and the number of goods at moderate price, which should be bought to guarantee the minimal duration of imprisonment for Victor. The numbers should be separated by single space. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 5 22
</PRE></TD><TD><PRE CLASS="intable">2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1431||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It might be interesting for you to learn that there are students who take part in various contests instead of studying. Sometimes such students are even awarded diplomas for winning these contests. Another amusing fact is that some deans collect and 
hang on the walls color copies of student diplomas. And when there are too many diplomas, extra walls are put up in a dean's office. But before a new wall is put up, its size should be determined, and for that a scheme of arranging diplomas on the 
wall is needed. That is why a designer is usually hired, to make everything beautiful.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A hired designer reckons that all diplomas of the same kind (for example, for winning semifinals) must be in the same row, and each row may contain diplomas of at most two different kinds. Moreover, if a row contains diplomas of two kinds, then they must alternate, and the last diploma in the row must be of the same kind as the first one for the sake of symmetry.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to determine how many walls should be put up, the dean has to know the minimal number of rows needed to arrange all the diplomas (the rows can be unboundedly long). Of course, having such clever students, it's not a big problem. That is to say, it is a problem, but a problem for the students.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number of different 
kinds of diplomas <I>N</i> (1 &le; N &le; 18). The second line 
contains the numbers of diplomas of each kind separated with a 
space: <I>N</i> integers in the range from 1 to 30.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the minimal number of rows needed to arrange 
the diplomas in accordance with the designer's requirements.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
8 15 13 8 14 8</PRE></TD><TD><PRE CLASS="intable">5</PRE></TD></TR></TABLE>
______________________________________________________
1432||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petya and Vasya want to take part in an ACM contest 
but couldn't find the third player. But they decided to 
participate anyway. However, in the absence of the third 
team member, they are very anxious about their winning 
chances and use all means to increase them. Accordingly,
they both want to have lucky tickets when they ride a
bus to the contest. Of course, they need to sit together
in the bus to be able to discuss the tactics of their 
actions during the contest.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When Petya and Vasya approached the ticket window, they 
decided to wait and let other people buy tickets until
the next two tickets to be sold were lucky. For how long 
will they have to wait in this situation? Write a program 
that finds the nearest pair of adjacent lucky tickets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">P.S. Recall that there are two different approaches to determination if a ticket is lucky. In the first approach, one calculates and 
compares the sums of digits in the left and the right halves of 
the number. In the second approach, the sums of digits in even 
and uneven positions are calculated. In both cases, a ticket is 
considered lucky if the sums are equal. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">P.P.S. Petya and Vasya do not follow a specific approach. Each of them will be satisfied if his ticket is lucky with respect to any of the described approaches.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains a single number 
containing 2<I>N</i> digits (4 &le; 2<I>N</i> &le; 1500), 
which is the number of the current ticket at the ticket 
window (there may be leading zeros).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one line with two successive numbers of the nearest pair of lucky tickets
separated with a space. If the current ticket in the ticket 
window is lucky and successive one is lucky too Petya and 
Vasya would buy this pair of tickets. The last ticket in 
the ticket window consists of all nines. If Petya and Vasya 
would never get the pair of lucky tickets print “<B>No solution</B>”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">293087
</PRE></TD><TD><PRE CLASS="intable">293149 293150
</PRE></TD></TR></TABLE>
______________________________________________________
1433||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sasha is lucky to have a diamond in the form of a regular tetrahedron. Incidentally, his friend Pasha has got a diamond of exactly the same shape and size. In order to distinguish between their diamonds, the friends decided to paint the crystals. Each of them painted each face of his diamond a certain color. The diamonds became very beautiful, so Pasha and Sasha were happy. But their happiness did not last long. That night, Sasha woke up with a sudden thought &mdash; what if his and Pasha's diamonds are still indistinguishable? He decided to call Pahsa immediately. Sasha ran up to the phone, tried to grasp the receiver, but at that moment the phone rang. Of course, it was Pasha, who had the same sudden thought. So Sasha and Pasha hastened to tell each other the colors of their diamonds' faces&hellip; Their worst fears were confirmed. Their diamonds were identical, and to see it one simply had to turn one of the diamonds.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that could prevent this horrible 
mistake. Given a scheme of the supposed coloring of the diamonds,
determine if these colorings are identical, i.e., if one of them
can be obtained from the other by turning the crystal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains two lines. Each line contains four letters, which denote the colors of the faces in the following order: the base face, the "left front" face, the "right front" face, and the back face. There are only four paints available: red, green, blue, and yellow, denoted by the letters R, G, B, and Y, respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the word "equal" if the colored tetrahedrons will be 
identical, and the word "different" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">RGRB
GRRB</PRE></TD><TD><PRE CLASS="intable">equal</PRE></TD></TR></TABLE>
______________________________________________________
1434||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Vasyuki University is holding an ACM contest. In order to help the participants make their stay in the town more comfortable, the organizers composed a scheme of Vasyuki's bus routes and attached it to the invitations together with other useful information.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Petyuki University is also presented at the contest, but the funding of its team is rather limited. For the sake of economy, the Petyuki students decided to travel between different locations in Vasyuki using the most economical itineraries. They know that buses are the only kind of public transportation in Vasyuki. The price of a ticket is the same for all routes and equals one rouble regardless of the number of stops on the way. If a passenger changes buses, then he or she must buy a new ticket. And the Petyuki students are too lazy to walk. Anyway, it easier for them to write one more program than to walk an extra kilometer. At least, it's quicker.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And what about you? How long will it take you to write a program that determines the most economical itinerary between two bus stops?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">P.S. It takes approximately 12 minutes to walk one kilometer.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains two numbers: the number of bus routes in Vasyuki <I>N</i> and the total number of bus stops <I>M</i>. The bus stops are assigned numbers from 1 to <I>M</i>. The following <I>N</i> lines contain descriptions of the routes. Each of these lines starts with the number <I>k</i> of stops of the corresponding route, and then <I>k</i> numbers indicating the stops are given ( 1 &le; <I>N</i> &le; 1000,  1&le; <I>M</i> &le; 10<SUP>5</sup>, there are in total not more than 200000 numbers in the <I>N</i> lines describing the routes). In the <I>N</i>+2<i>nd</i> line, the numbers <I>A</i> and <I>B</i> of the first and the last stops of the required itinerary are given (numbers <I>A</i> and <I>B</i> are never equal).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to travel from <I>A</i> to <I>B</i>, then output &minus;1. Otherwise, in the first line you should output the minimal amount of money (in roubles) needed for a one-person travel from <I>A</i> to <I>B</i>, and in the second line you should describe one of the most economical routes giving the list of stops where a passenger should change buses (including the stops <I>A</i> and <I>B</i>).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 10
5 2 4 6 8 10
3 3 6 9
2 5 10
5 9</PRE></TD><TD><PRE CLASS="intable">3
5 10 6 9</PRE></TD></TR></TABLE>
______________________________________________________
1435||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Coaches are accustomed to submitting a detailed expenditure 
report to the accounts department upon returning from 
an ACM contest. An inexperienced coach may encounter 
a lot of problems at this stage, and the reporting 
may became an even harder ordeal for him than the contest itself 
was for his team. However, for skilled coaches this is just a formality. But even they may have some problems from time to time. Here is one of such situations. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day Ivan Ivanovich was summoned to the accounts 
department because of an allegedly incorrect expenditure 
report. Of course, Ivan Ivanovich was embarrassed, because he always checked his reports many times 
and was sure that they were correct. The accountant 
told him that the total amount of expenditures in the 
report was incorrect. To prove this, the accountant showed him a sheet of paper with individual expenses written out there and calculated the sum by the 
column-additon method (true accountants always compute 
manually, distrusting machines). The result was different 
from that in the report.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivan Ivanovich knows that it is senseless to suspect a computing mistake, because accountants' computations are always correct, but he is also sure of his own innocence. 
Hence, the mistake sprang up at the stage of copying the figures from the report to the sheet of paper. It remains to find the error, and it's not that easy as there are many items and the accountant was copying them in a strange order known to him only.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that the mistake consisted in swapping two adjacent digits in one of the numbers. Given the list on the accountant's sheet of paper and the sum reported by Ivan Ivanovich, you should determine the erroneously copied number.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains an integer <I>N</i> (1 &le; <I>N</i> &le; 200000), which is the number of the summands in the accontant's list. Each of the next <I>N</i> lines contains a corresponding non-negative integer summand (not exceeding 2<SUP>31</sup>&minus;1).  And the <I>N</i>+2<I>nd</i> line of the input contains the sum from the report (non-negative integer number, not exceeding 10<sup>16</sup>). No number contains leading zeroes, besides no leading zeroes can appear as a result of erroneous copying.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the input data make it possible to find the erroneous number, then output the line "Error in record #<I>L</i>. Correct number is: <I>K</i>.", where <I>L</i> is the number of the sum and <I>K</i> that was copied incorrectly. If such number doesn't exist, then you should output the line "Unrecoverable error."  And if the total of the given summands coincides with the sum in the report, then output the line "Input has no error."</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
12
26
45
119
</PRE></TD><TD><PRE CLASS="intable">Error in record #2. Correct number is: 62.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
12
26
45
109
</PRE></TD><TD><PRE CLASS="intable">Unrecoverable error.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
1071
300
1800
2700
4950
10821
</PRE></TD><TD><PRE CLASS="intable">Input has no error.
</PRE></TD></TR></TABLE>
______________________________________________________
1436||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once an ACM programmer was driving along a highway. The road was very 
smooth and straight, no pits, no bumps, no turns miles and miles forward. 
In short, boring! So the programmer decided to view billboards along 
the highway. One billboard was so interesting that the programmer wanted 
to examine it properly. But without a computer he found it difficult to 
determine the point with the maximal viewing angle.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We regard the billboard as a segment on a plane and assume that the road is represented by the abscissa axis. The input consists of four lines with numbers <I>x</i><SUB>1</sub>, <I>y</i><SUB>1</sub>, <I>x</i><SUB>2</sub>, <I>y</i><SUB>2</sub>, which are the coordinates of the billboard's edges. The numbers are integers in the range from &minus;1000 to 1000. Billboard's edges are not coincide.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the value (in radians) of the best viewing angle 
of the billboard from the road within 6 digits after the decimal point. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">100
200
300
400
</PRE></TD><TD><PRE CLASS="intable">0.785398
</PRE></TD></TR><TR><TD><PRE CLASS="intable">123
456
789
-10
</PRE></TD><TD><PRE CLASS="intable">3.141593
</PRE></TD></TR><TR><TD><PRE CLASS="intable">-800
1
800
1
</PRE></TD><TD><PRE CLASS="intable">3.139093
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9
7
3
0
</PRE></TD><TD><PRE CLASS="intable">3.141593
</PRE></TD></TR></TABLE>
______________________________________________________
1437||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once a gasoline meter broke at a filling station. Fortunately, there was an overflow clipper (a device that makes it possible not to overfill a tank).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An ACM-programmer came to this station and saw an announcement saying that the station didn't work properly. As he was meditating on what to do next, he noticed three empty cans at the station's counter. He thought: "If I fill the first can and then empty it to the second one, and then take the third one&hellip; Maybe, I'll be able to measure out the needed amount of gasoline?"</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As usual, he began to think about a general formulation of the problem, forgetting the partial case: "How many different capacities can I measure out using these cans?"</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, it is forbidden to spill gasoline because of ecology reasons. Also, the station's owner requires that gasoline only be transferred from the storage tank to a can or between cans. The car's tank may be filled from one or several of the cans only after all of the transfers.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the three input lines contains an integer from 0 to 255, which is the capacity of a gasoline can in liters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The result is an integer that is the number of different answers to the question how many liters the programmer can measure out using the gasoline cans with the specified capacities.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 
3
4</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is no sense to measure out 0 liters, so this value must not be counted.</DIV></DIV>
______________________________________________________
1438||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>Time Limit Exceeded</i>.  A sad verdict of the checking system, which 
often means that a wrong approach was used for solving the problem. 
Probably, each ACM contestant has got this verdict at least once in 
his ACM career. Of course, at such moments a contestant wants 
computers to execute programs a bit quicker. It is a pity that 
a correct algorithm (of course, it's correct!) does not work 
only because the judges are using slow computers and inefficient 
compilers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is a possibility for you to create a really quick code 
that executes other's programs.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains a program in the following format.
Each nonempty line of the file may have one of the following 
three forms:<BR> 
<code>
 &lt;label&gt;: &lt;command&gt;<BR>
 &lt;label&gt;:<BR> 
 &lt;command&gt;<BR>
</code>
Here  <code>
&lt;label&gt;</code> is the string's label in the program (the label 
is unique within the program and consists of English letters,
the case (upper or lower) does not matter),
and  <code>
&lt;command&gt;</code> is a command. The list of possible commands
is given below. The cases of the letters used in a command
may also be arbitrary.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to describe command formats, we will need the following 
notation: <code>
 &lt;variable&gt;</code> is a name of a variable (consists of English 
letters, the case matters here);  <code>&lt;number&gt;</code> is an integer (all integers are in the range from -10<SUP>9</sup> to 10<SUP>9</sup>);
<code>&lt;varnum&gt;</code> is either a name of a variable or an integer.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A program may contain the following commands:<BR>
<code>
 end<BR>
 print &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; + &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; - &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; * &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; / &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; % &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; or &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; and &lt;varnum&gt; <BR>
 &lt;variable&gt; = &lt;varnum&gt; xor &lt;varnum&gt; <BR>
 &lt;variable&gt; = not &lt;varnum&gt;<BR>
 goto &lt;label&gt; <BR>
 if &lt;varnum&gt; == &lt;varnum&gt; goto &lt;label&gt; <BR>
 if &lt;varnum&gt; != &lt;varnum&gt; goto &lt;label&gt; <BR>
 if &lt;varnum&gt; &gt;= &lt;varnum&gt; goto &lt;label&gt; <BR>
 if &lt;varnum&gt; &gt; &lt;varnum&gt; goto &lt;label&gt; <BR>
 if &lt;varnum&gt; &lt;= &lt;varnum&gt; goto &lt;label&gt; <BR>
 if &lt;varnum&gt; &lt; &lt;varnum&gt; goto &lt;label&gt; <BR>
</code></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Commands in a program are executed successively.
The <code>end</code> command terminates the program. The <code>print</code> command adds to the output file a line 
containing the command's argument. 
The assignment command works as usual (the variable is assigned the 
result of processing the expression after the '=' symbol). 
The operations have the following meaning: 
addition (<code>+</code>), subtraction (<code>-</code>), multiplication (<code>*</code>), 
integer division (<code>/</code>), remainder taking (<code>%</code>), 
and bitwise logic operations: `or' (<code>or</code>), `and' (<code>and</code>), 
`exclusive or' (<code>xor</code>), and negation (<code>not</code>). 
We assume that during the computation process, all values are stored as 
4-byte integers, negative values are stored in a two's complement representation. 
The result of a <code>goto</code> command is that the program continues 
work from the line with the specified label. 
The <code>if ... goto</code> command works just as the <code>goto</code> 
command if the condition after <code>if</code> is true, otherwise 
the program jumps to the next line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After executing ten million commands, the work of the program 
is stopped forcibly and the diagnostic information is output.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You may assume that programs are syntactically correct, operands are always separated by at least one space, before being used each variable is initialized, length of names of variables and labels is limited by 50, and divisions by zero and overflows never happen. Assume also that program contains no more than 2000 lines and the <code>print</code> command is executed not more than 100 times. Any number of spaces may occur in any place of the program, in the beginning of line, at the end of line, in empty lines, but not between label name and ':'.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output should contain the result of executing the 
program given in the input (i.e., it should contain lines 
produced by the  <code>print</code> commands). 
If the program is stopped forcibly, then after the produced 
output you should present the diagnostic information in the 
following format. First you should print <code>"Program terminated. Variables state:"</code>. 
After that you should output the list of initialized to this moment variables and their 
values in the following format: 
<code>&lt;variable name&gt;:   &lt;value&gt;</code>. 
The list of variables should be ordered lexicographically with 
respect to the variables' names.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">            X = 5
            Y = 1
loop: Y = Y * X
            X = X - 1
            if X &gt;= 1 goto LOOP
            Print Y
            y = Y - 5
            Print y
            end
</PRE></TD><TD><PRE CLASS="intable">120
115
</PRE></TD></TR><TR><TD><PRE CLASS="intable">        value = 15
        value = not value
        value = value or 4
        print value
        value = 0
loop:   
        value = value - 1
        Value = value % 6
        ValueA = value % -6
        goto loop
</PRE></TD><TD><PRE CLASS="intable">-12
Program terminated. Variables state:
Value: 3
ValueA: 3
value: -2499999
</PRE></TD></TR></TABLE>
______________________________________________________
1439||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Rooms of the Ministry of Magic are enchanted with a spell which
enumerates them automatically. The spell works as follows. The
first room created at the Ministry got the number 1. When a
new room is created by magic, a number-plate appears at once
upon the door. The new number is greater by one than the maximal
room number existing at the moment. If a room is not needed anymore,
then it is destroyed and all the room numbers that are greater
than the number of the destroyed room are lessened by one. Thus,
the numeration of the rooms at the Ministry always remains continuous.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Harry Potter found out a list of the numbers of the rooms where
Lord Voldemort's Horcruxes are stored (A Horcrux is a magical artifact that provides for the owner's immortality). 
It seems that now it will be easy for Harry to find the Horcruxes
and destroy them. But the task turned out to be more complicated.
Because of his mysterious bond with Harry, Voldemort knew at once
about Harry's discovery, so he transported himself to the Ministry and
started to destroy rooms. This means that numbers of rooms are
changing, so when Harry looks at a room's door, he doesn't know
which number this door had before. But he knows which numbers were on the 
doors of the rooms that were destroyed by Voldemort, due to the
mentioned bond between them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Harry to defeat Voldemort. You don't have to fight Harry's
enemy, but you can help him to determine the true numbers of rooms
when he looks at their doors.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of rooms at the Ministry of
Magic <I>N</i> (1 &le; <I>N</i> &le; 10<SUP>9</sup>) and a number <I>M</I> (1 &le; <I>M</i> &le; 10<SUP>5</sup>). Each of the subsequent <I>M</i> lines has the following format:<BR>
&lt;letter&gt; &lt;number&gt;<BR>
where &lt;letter&gt; is one of the letters 'D' (Destroy) or 'L' (Look at),
and &lt;number&gt; is the number on the door of the room which is
destroyed or at which Harry looks at the moment. It is guaranteed
that not more than 10<SUP>4</sup> rooms will be destroyed during the battle.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must contain for each line<BR>
L &lt;number&gt;<BR>
of the input the true number (which it had before the
battle) of the room at which Harry looks.
The numbers must be given one in a line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">20 7
L 5
D 5
L 4
L 5
D 5
L 4
L 5
</PRE></TD><TD><PRE CLASS="intable">5
4
6
4
7
</PRE></TD></TR></TABLE>
______________________________________________________
1440||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During his summer vacation, Harry Potter received a letter from Hogwarts School saying that he had been appointed the captain of the Gryffindor Quidditch team. In order to prepare his team for the first match of the season, Harry has to make up a training
schedule. He wants to assign Quidditch practices to some fixed days of the week, for example, every Friday and Sunday. Harry thinks that not less than <I>A</i> practices are necessary in order to train the team for the match. On the other hand, the total
number of practices must not exceed <I>B</i>, otherwise the team may overstrain itself and will not be able to perform well at the match. Practices may be held from the 2<SUP>nd</sup> of September to the day preceding the day on which the match will take place, and the match will take place before Christmas. Help Harry to make up the schedule of practices.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is the day of the week on which the 1<SUP>st</sup> of
September falls this year. The second line contains the date of the first match in the format "Month Day". This date is in the range from September 2 to December 24. The third line contains the numbers <I>A</i> and <I>B</i> (1 &le; <I>A</i> &le; <I>B</i> &le; 200)
mentioned earlier.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to make up a schedule satisfying the given conditions, then output "Impossible". Otherwise, output in the first line the number of days of the week to which practices should be assigned. In the following lines, give a list of these days in an arbitrary order, one day in a line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Thursday
September 10
9 20
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR><TR><TD><PRE CLASS="intable">Tuesday
October 7
12 14
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR><TR><TD><PRE CLASS="intable">Friday
October 4
12 14
</PRE></TD><TD><PRE CLASS="intable">3
Monday
Wednesday
Saturday
</PRE></TD></TR></TABLE>
______________________________________________________
1441||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Gringotts bank is run by goblins and is rightfully considered one of the most reliable banks in the wizard world. Its underground vaults are located hundreds of kilometres below London and are guarded by powerful spells and dragons. Goblins created the complicated system of vaults and tunnels using hyperworms. A hyperworm resembles a huge,
very powerful snake and devours everything on its way leaving behind a smooth and durable tunnel. Goblins can summon and control a hyperworm by magic, forcing the animal to dig a tunnel in a required direction.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Though hyperworms are very powerful and easy to use, gnomes and other underground creatures do not use them, because hyperworms can only move devouring earth or stones. This means that if a hyperworm has finished digging a tunnel to a required destination
and no new tunnels leading from that place are needed, then the only way to stop the beast is to dematerialize the poor thing. And this is of course severely banned since hyperworms are included in the Orange Book of Rare Magical Creatures and a substantial
penalty must be paid for the death of each of them. But goblins don't care much about laws underground, where nobody can see them. What they really care about is the security of the bank, so they never dig more than one tunnel between a pair of rooms. And, of course, goblins don't ever think about digging a tunnel that does not connect two different rooms.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Minister of Magic got hold of a complete scheme of tunnels between the bank's vaults. He wants to demand penalties for each of the tunnels. Of course, goblins may say that if two tunnels lead to the same vault, they used one hyperworm to lay them,
having led the animal along the vault's border. Moreover, for digging any chain of tunnels they also could use one hyperworm. But the Minister knows for sure that goblins cannot drag a hyperworm from one vault to another, and they could not broaden out the existing tunnels because of safety reasons.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help goblins to present to the Minister a plan of digging tunnels according to which a minimal number of hyperworms were murdered underground.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains numbers <I>N</i> and <I>M</i> (1 &le; <I>N</i> &le; 20000, 1 &le; <I>M</i> &le; 20000), which are the numbers of the bank's vaults and tunnels,
respectively. The next <I>M</i> lines contain pairs of numbers (each number is in the range from 1 to <I>N</i>). Each pair indicates which vaults are connected by a tunnel. For any two vaults of the bank, there is a chain of tunnels connecting them.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you should output the minimal number of hyperworms <I>K</i> needed for digging all of the bank's tunnels. In each of the next <I>K</i> lines, output the numbers of vaults through which the corresponding hyperworm moved according to
your plan. The vaults must be listed in the order in which the animal moved through them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 7
1 2
4 1
6 7
5 7
7 4
2 3
4 2
</PRE></TD><TD><PRE CLASS="intable">3
5 7 4 2 1 4
2 3
6 7
</PRE></TD></TR></TABLE>
______________________________________________________
1442||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Wizards and witches can move from one place to another
using Floo powder. A pinch of the powder is enough to
transfer a wizard from one fireplace to any other fireplace
connected to the Floo Network.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a secret room at the Ministry of Magic where
a reserve stock of Floo powder is stored, which may be
needed in the event of emergency evacuation. The powder
is stored in an enchanted box suspended with chains to
the ceiling (to save the powder from mice). The room is
well defended against burglars and the box can be opened 
by the Minister of Magic only.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The new Minister of Magic noticed that though the box was
thoroughly protected with charms, storage conditions were
not observed correctly, so the box dried up. The boards
shrank, and a thin straight slit formed in the bottom of
the box, through which a portion of the powder could fall
and be used by mice for their own mysterious purposes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help the Minister to calculate whether the remaining amount
of Floo powder is enough for the evacuation of all employees.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The length of the box is 1 meter, the width and height are
50 cm. The powder was poured into the box through a special
small hole in the center of the lid. The powder formed inside
the box a regular cone with the natural angle of repose.
When the slit appeared, the powder poured through it so that
slopes with the same angle of repose formed along the slit.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the radius of the base
of the original cone. In the second line, the distance from the
center of this base to the slit is given. The third line contains
the original height of the cone. All these numbers are whole.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the amount of the powder remaining in the box
in cubic centimeters accurate to four decimal places.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
5
2
</PRE></TD><TD><PRE CLASS="intable">151.704483
</PRE></TD></TR></TABLE>
______________________________________________________
1443||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For the convenience of Hogwarts students, it is decided to
extend the railway from Hogsmeade station to the castle's
gates. The magic <I>N</i>-track railway will take students
right to the castle, which will be quite appropriate
because of the increased frequency of attacks on people
after Voldemort's return. The railway is to be built of
rails of fixed length, which can be cut and joined.
When two rails or rail pieces are joined, a joint appears.
The Hogwarts Headmaster wants the number of joints to be minimal,
and if this conditions is satisfied, then the number of the used
rails should be minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of the tracks of the magic railway <I>N</i> (1 &le; <I>N</i> &le; 18). The second line contains the length of the required railway in meters <I>S</i> (1 &le; <I>S</i> &le; 10000). The third line contains the length of a rail in meters <I>L</i> (10 &le; <I>L</i> &le; 10000). The lengths are given up to the tenths of a millimeter.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of rails needed to lay an <I>N</i>-track railway of the given length with the minimal number of joints.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1005.6712
20.0001
</PRE></TD><TD><PRE CLASS="intable">151
</PRE></TD></TR></TABLE>
______________________________________________________
1444||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Harry Potter is taking an examination in Care for Magical Creatures.
His task is to feed a dwarf elephpotamus. Harry remembers that
elephpotamuses are very straightforward and imperturbable. In
fact, they are so straightforward that always move along a straight
line and they are so imperturbable that only move when attracted
by something really tasty. In addition, if an elephpotamus
stumbles into a chain of its own footprints, it falls into a
stupor and refuses to go anywhere. According to Hagrid,
elephpotamuses usually get back home moving along their
footprints. This is why they never cross them, otherwise they
may get lost. When an elephpotamus sees its footprints, it tries
to remember in detail all its movements since leaving home (this
is also the reason why they move along straight lines only, this
way it is easier to memorize). Basing on this information, the
animal calculates in which direction its burrow is situated, then
turns and goes straight to it.
It takes some (rather large) time for an elephpotamus to perform
these calculations. And what some ignoramuses recognize as a
stupor is in fact a demonstration of outstanding calculating
abilities of this wonderful, though a bit slow-witted creature.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Elephpotamuses' favorite dainty is elephant pumpkins, and some of
such pumpkins grow on the lawn where Harry is to take his exam.
At the start of the exam, Hagrid will drag the elephpotamus to one of
the pumpkins. Having fed the animal with a pumpkin, Harry can
direct it to any of the remaining pumpkins. In order to pass the
exam, Harry must lead the elephpotamus so that it eats as many
pumpkins as possible before it comes across its footprints.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first input line contains the number of pumpkins
on the lawn <I>N</i> (3 &le; <I>N</i> &le; 30000). The pumpkins are
numbered from <I>1</i> to <I>N</i>, the number one being assigned to the
pumpkin to which the animal is brought at the start of the trial.
In the next <I>N</i> lines, the coordinates of the pumpkins are given
in the order corresponding to their numbers. All the coordinates
are integers in the range from &minus;1000 to 1000. It is guaranteed
that there are no two pumpkins at the same location and there is
no straight line passing through all the pumpkins.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line write the maximal number <I>K</i> of pumpkins that can be fed to the elephpotamus. In the next <I>K</i> lines, output the order in which the animal will eat them, giving one number in a line. The first number in this sequence must always be 1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
10 10
0 10
10 0
</PRE></TD><TD><PRE CLASS="intable">4
1
3
2
4
</PRE></TD></TR></TABLE>
______________________________________________________
1445||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Christmas is approaching, which means that Harry must prepare gifts for all of his friends. Formerly, Harry always used the "first gift principle", that is, he prepared only one Christmas gift and gave it away when he needed to congratulate somebody. Of
course, he received a gift in return and gave it to the next friend, and so on. But last Christmas he got from Fred the same broken crystal (left from the previous Christmas) which Harry himself had given to Ron. And it turned out that George presented Ron with a silver dragon and got from him the same chocolate egg that George had given to Fred.
Then Harry remembered that the silver dragon he had given George had been received from Ron, which meant that the book that Harry had got from George and given to Fred had returned to its owner as well.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This year, Harry decided to calculate everything in advance. He
wrote out the list of his friends and marked there who is
acquainted with whom. It turned out that Harry's friends could be
divided into groups such that a person from one group wouldn't
for sure exchange gifts with anybody from another group. Harry
decided that he simply would not present gifts received from
a friend to any person in the same group.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But there's one problem. Of course, if Harry can choose the order
in which he meets his friends, he can optimize the process to get by
with the minimal number of gifts. But if his friends come when they 
want, then at some moments Harry may have no gift from another group 
of friends to present his guest with.
Help Harry to calculate how many gifts he must prepare in the best
and in the worst cases. You may assume that Harry exchanges gifts
with only one friend at a time and other friends don't know which
gifts are presented.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of groups of Harry's friends <I>N</i>
(1 &le; <I>N</i> &le; 500). The second line contains <I>N</i> numbers
in the range from 1 to 500, each of them being the number of
people in the corresponding group.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output two numbers separated with a space. They are the
"best minimal" (when Harry himself chooses the order of his meetings
with friends) and the "worst minimal" (when Harry has no control
over this order at all) numbers of gifts that he must prepare in order
to satisfy the following requirement: each of Harry's friends must receive
from Harry a gift that either was prepared by Harry himself or was presented
to Harry by a person from another group.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3 7 3 2
</PRE></TD><TD><PRE CLASS="intable">1 7
</PRE></TD></TR></TABLE>
______________________________________________________
1446||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the start of each school year, a very important event happens
at Hogwarts. Each of the first-year wizards and witches is assigned
to one of the four Hogwarts houses. The bravest children are put to
Gryffindor, the cleverest are put to Ravenclaw, the most
hard-working go to Hufflepuff, and Slytherin becomes home to the
most ambitious. The assignment is carried out in the Great Hall of
Hogwarts castle in the following way: when the name of a first-year
student is called, he or she comes out to the center of the Hall
and puts on the famous Sorting Hat. The Hat estimates the
situation in the head of the young wizard or witch and cries out
the name of the house to which the student is assigned. A special
elf writes down the Hat's decisions. After the sorting, the elf must
quickly compile lists of students of each house. Members of the
Society for the Promotion of Elfish Welfare beg you to help the
elf in this hard work.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of first-year students <I>N</i> (1 &le; <I>N</i> &le; 1000). In the next 2<I>N</i> lines there are their names followed by houses in which the Sorting Hat placed them. A student's name may contain lowercase and uppercase English letters, spaces and hyphens. Each name contains not more than 200 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output lists of students of each house in the following format. In the first line there is the name of the house, then a colon, and in the next lines there is the list of students, one in a line. The lists must be given in the following order: Slytherin,
Hufflepuff, Gryffindor, Ravenclaw. There must be empty lines between the lists. In each list, names must be given in the order in which they were called out during the sorting. It is guaranteed that each list will contain at least one student.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
Ivan Ivanov
Gryffindor
Mac Go Nagolo
Hufflepuff
Zlobeus Zlei
Slytherin
Um Bridge
Slytherin
Tatiana Henrihovna Grotter
Ravenclaw
Garry Potnyj
Gryffindor
Herr Mionag-Ranger
Gryffindor
</PRE></TD><TD><PRE CLASS="intable">Slytherin:
Zlobeus Zlei
Um Bridge

Hufflepuff:
Mac Go Nagolo

Gryffindor:
Ivan Ivanov
Garry Potnyj
Herr Mionag-Ranger

Ravenclaw:
Tatiana Henrihovna Grotter
</PRE></TD></TR></TABLE>
______________________________________________________
1447||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Muggle firm offered Lucius Malfoy a contract for laying a portkey
network connecting the firm's branches. Muggles believe that the
cost of creating a portkey is proportional to the distance over
which this portkey can transfer a person, so they're ready to pay
for each meter of the network. Their requirements are the
following: the network must make it possible for employees to
travel from any branch of the firm to any other branch (using
several portkeys if necessary), and there mustn't be redundant
portkeys (such that can be excluded and the network would still
connect all the branches).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lucius understands that the cost of a portkey is determined not by
the distance, but by some other factors. He wants to cheat the
Muggles and lay a network for which the ratio of
the total cost of portkeys to the amount of money paid by the
Muggles is minimal. Thus, he tries to minimize the mean cost of
one meter of the network. Help Mr. Malfoy to cheat the Muggles.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of the firm's branches <I>N</i>
(1 &le; <I>N</i> &le; 1000). The second line contains an
integer <I>M</i> (1 &le; <I>M</i> &le; 500000), which is the number
of pairs of branches that can technically be connected by a
portkey. The next <I>M</i> lines describe these pairs: in each of these
lines, the numbers of the branches, the distance between them in
meters, and the cost of creating a portkey are given. 
The numbers in each line are separated with spaces.
Costs and distances are integers in the range from 1 to 10<sup>6</sup>.
You may assume that a network satisfying the firm's requirements
always exists.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal mean cost of one meter of the network accurate
to 10<SUP>&minus;8</sup>. The mean cost of one meter is the ratio of the total
cost of the network's portkeys to its total length.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
3
1 2 50 60
1 3 100 100
2 3 100 100
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
3
1 2 1000 3000
1 3 1 5
2 3 1000 1997
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1448||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Corridors of Hogwarts castle are well illuminated: there
is a row of magical torches going along each corridor.
The torches are situated at small equal intervals,
so the illumination of a corridor can be controlled by
igniting or putting out some of the torches (of course,
using magic).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Hogwarts caretaker Argus Filch doesn't like it when
the illumination is not uniform, because he suspects that
rule-breakers may hide in dark places. Your task is to
create a uniform illumination of a given brightness.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <I>N</i>
(1 &le; <I>N</i> &le; 10<SUP>6</sup>) of torches in a corridor.
The second line contains the required brightness <I>b</i>, which is
an integer in the range from 0 to 100. The brightness is given
as a percentage of the maximal brightness (0 corresponds to the
state when all torches are put out, 100 is when all torches are
ignited).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a sequence of <I>N</i> zeros and ones (0 corresponds to
an extinguished torch, 1 corresponds to an ignited torch)
such that for each segment of the corridor comprising <I>L</i>
torches the number of ignited torches differs from <I>L</i>*<I>b</i>/100 by not more than 2.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10
33
</PRE></TD><TD><PRE CLASS="intable">0100100100
</PRE></TD></TR></TABLE>
______________________________________________________
1449||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Serious businessman Vladimir Bludgeon, who was once well known as Scorched Vlad, controls a trust of N enterprises. A former accomplice of Vladimir, famous banker Alexander Ironfist, whose alias was Wry Alex, owns a holding company of N banks. As it should be among the old friends, the enterprises of Mr. Bludgeon take credits at the banks of Mr. Ironfist only, and the banks of Mr. Ironfist give credits to the enterprises of Mr. Bludgeon only. For the purpose of tax evasion all data about the amounts of the credits was properly hidden till one day...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">...When an old rival of Vladimir and Alexander, police general Ivan Crowbar alias Rotten Ivan got in their road. Mr. Crowbar dreamed to make Mr. Bludgeon and Mr. Ironfist pay for old insults. In the course of the brilliant operation (this story is fully described in the problem <A HREF="/problem.aspx?space=1&num=1421">"Credit operations"</A>) he obtained so-called credit matrix. Here the credit matrix is a square table with N rows and N columns, and each element A[i, j] of this matrix is equal to amount of the credit which was taken by i-th enterprise of Mr. Bludgeon at j-th bank of Mr. Ironfist.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivan understood the phrase "to pay for old insults" literally, so he did not waste time and passed the credit matrix (for a considerable fee, of course) to his old friend, tax police chief Peter Bullman, who appeared in criminal chronicles as Red Bull Pete. Based on such a strong evincive basis, Mr. Bullman was in his right to make Vladimir and Alexander to serve time in jail till doomsday, but... The years of service at tax policy were not in vain for him, and Peter realized at once that this stuff a great way to apply a system approach and finally get rich - or die trying!</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. Bullman's system approach came to a fact that each enterprise of Mr. Bludgeon should pay BR[i] dollars as a bribe, and each bank of Mr. Ironfist should pay BC[j] dollars as a bribe. An amount of each credit stated in the credit matrix should not exceed a sum of bribes of an enterprise which took this credit and a bank which gave it (i.e. the following condition should be satisfied: A[i, j] &le; BR[i]+BC[j]). At that the bribes should be presented as integer non-negative numbers, because Peter dropped out his studies when he was at elementary school, so he does not know any other kinds of numbers. However, it does not prevent him from being a tax policy chief since most of his subordinates did not go to school at all.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To Mr. Bullman's credit, he displayed a certain gallantry and allowed Vladimir and Alexander to calculate amounts of the bribes, which satisfy these conditions on their own. So during a meeting of the committee of directors, which was held in a bath-house as usual, Mr. Bludgeon and Mr. Ironfist have reasonably resolved to minimize the total amount of all bribes and forced their best programmer Alexander Sergeyev to solve this problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (2 &le; N &le; 100). Each of the next N lines contains N integer numbers which are corresponding elements A[i, j] (0 &le; A[i, j] &le; 10<sup>6</sup>) of the credit matrix.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the optimal values BR[i] for all enterprises. The second line should contain the optimal values BC[j] for all banks. The values should be separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
5 8 4 3
3 6 2 1
4 6 4 1
4 3 5 4
</PRE></TD><TD><PRE CLASS="intable">2 0 1 2
3 6 3 2
</PRE></TD></TR></TABLE>
______________________________________________________
1450||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last year developed into a lot of trouble for independent Russia. Bad harvest, bird flu and - to crown it all - the President, who decided to raise funds to buy new balalaika and tame bear for the child of his first cousin. These factors (especially the last one) shocked the national economics deeply. Counseled with his friends who wear valenki and ushankas, the President resolved to use a traditional method of state budget reinforcement, which implies a stealing of the Ukrainian gas.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Russian pipeline system consists of N transfer station, some of which are connected by pipelines. For each of M pipelines the numbers of stations A[i] and B[i], which are connected by this pipeline, and its profitability C[i] are known. A profitability of a pipeline is an amount of dollars, which will be daily yielded by the selling of stolen gas transferring through this pipeline. Each two stations are connected by not more than one pipeline.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The system was made by Ukrainian engineers, who knew exactly, that the gas was transferred from Ukrainian gas fields to Siberia and not the reverse. That is why the pipelines are unidirectional, i.e. each pipeline allows gas transfer from the station number A[i] to the station number B[i] only. More over, if it is possible to transfer the gas from the station X to the station Y (perhaps, through some intermediate stations), then the reverse transfer from Y to X is impossible. It is known that the Ukrainian gas arrives to the starting station number S and should be dispatched to the Siberian buyers on the final station number F.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The President ordered the Government to find a route (i.e. a linear sequence of stations which are connected by pipelines) to transfer the gas from the starting to the final station. A profitability of this route should be maximal. A profitability of a route is a total profitability of its pipelines.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, the President did not consider that some pipelines were plundered long ago, and, as a result, the gas transfer between the starting and the final stations may appear to be impossible...</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers N (2 &le; N &le; 500) and M (0 &le; M &le; 124750). Each of the next M lines contains the integer numbers A[i], B[i] (1 &le; A[i], B[i] &le; N) and C[i] (1 &le; C[i] &le; 10000) for the corresponding pipeline. The last line contains the integer numbers S and F (1 &le; S, F &le; N; S &ne; F).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the desired route exists, you should output its profitability. Otherwise you should output "No solution".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 7
6 5 10
1 4 11
1 2 4
3 1 5
2 4 5
6 3 1
6 1 3
6 4
</PRE></TD><TD><PRE CLASS="intable">17
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, the desired route is a route 6>3>1>4.</DIV></DIV>
______________________________________________________
1451||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Despite the fact that Three Programmers could neither become the world champions nor reach the top of any online rating, their glory spread everywhere. That is why businessman Dmitry Blackbear, who owned the largest city beerhouse network, had heard about major achievements of the programming legends. Mr. Blackbear was looking for an optimal location of his new beerhouse, so he decided to ask for Three Programmers' help.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dmitry thought fondly that the Programmers would use a powerful combination of economical and mathematical methods to find a location for the beerhouse to maximize its profitability. As a reward for the job, the businessman promised (very indiscreetly!) free beer at that beerhouse for Three Programmers in the course of year.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The profits of Mr. Blackbear did not worry Three Programmers at all, but then they liked bear very much. It should be told, that the Programmers lived in that city in houses with cartesian coordinates (X[1], Y[1]), (X[2], Y[2]) and (X[3], Y[3]). So the First Programmer suggested placing of the beerhouse into his house. But the Second Programmer angered with it and called to think about common good. "We should place the beerhouse in such a way that the distances between it and our houses would be equal to each other", - he said. "The problem is to find a center of the triangle's circumcircle. It can be solved via a single formula - and it is not interesting at all", - the Third Programmer objected. "Let the sum of the distances between the beerhouse and our houses be minimal", - he concluded. And this proposal was approved fully.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the real numbers X[1], Y[1], X[2], Y[2], X[3] and Y[3] (-1000 &le; X[i], Y[i] &le; 1000). The numbers are given with not more than seven digits after decimal point. Neither two houses are situated at the same place.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the coordinates of the desired location of the beerhouse so that the sum of the distances between the beerhouse and the houses equals to the minimal one till sixth digit after decimal point. The coordinates should be separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.1 3.1 5.1 1.1 4.1 5.1
</PRE></TD><TD><PRE CLASS="intable">3.37423161 3.38281356
</PRE></TD></TR></TABLE>
______________________________________________________
1452||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><I>You know, it is absolutely unimportant for us what language one uses. We quit that game long ago. Basic, Pascal, C++ or Java - it is up to a programmer himself to choose. Just do not deprive us of this option. We want to show our deprecation for ACM ICPC managers who dropped Pascal as an official programming language of this championship. This problem is dedicated to everyone who is responsible for such a strange decision.</I></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Andrew Drinker took a sip of beer and reclined on the back of a stool. Certainly, the stool did not have any back at all, so there was nothing surprising about Andrew, who fell to the floor cursing desperately escorted by the beer bottle and the stool. But even such a miserable event - so much beer was wasted! - could not spoil famous programmer's elated mood. After all, he had just completed the last version of the program which had to prove C++ as the best programming language ever been and Intel C++ Compiler as the fastest compiler in universe. "The problem is finally solved... My O(N^5) algo is supreme... Pascal must die...", - such thoughts volleyed through a mind of Mr. Drinker, whereas he was looking out over a panorama of his home city Tmutarakan through a dirty window sipping the remnant of beer...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At that very moment in faraway Mexico programmer Pedro Gomes grinned contentedly while drinking the next bottle of tequila in the attic of his shanty. Several minutes ago he had finished the main program of his life, which was predestined to establish a total domination of the legendary programming language Pascal and the world best compiler AMD Pascal Compiler - from here to eternity! "The time has come... O(N^5) is unbeatable... C++ must die...", - a mighty brain of Mr. Gomes was overfilled by wise thoughts...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now you must be interested in what problem was solved by Andrew and Pedro, and why did their solutions get TLE on the 6-th test?</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A sequence S consists of N elements S[i] indexed from 1 to N. You should take a maximal number of different elements from this sequence which are successive terms of some increasing arithmetical progression. The order of these elements in the sequence S does not matter. And may Pascal (or C++?) be with you.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer N (2 &le; N &le; 2000). The second line contains N integers S[i] (0 &le; S[i] &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the maximal number of taken elements. The second line should contain the indexes of these elements in the sequence S. The indexes may be listed in any order and should be separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
7 3 2 3 5 9
</PRE></TD><TD><PRE CLASS="intable">4
4 5 1 6
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your solution must be really fast to pass the time-limit.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If your solution works faster than 0.1 sec. and uses less than 1 Mb. of memory, we recommend you to pay attention to the problem <A HREF="/problem.aspx?space=1&num=1395">"Pascal vs. C++. Version 2"</A>.</DIV></DIV>
______________________________________________________
1453||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Years and years have passed since famous grand master Paul V. Pawnstein invented N-dimensional chess and formulated the classical problem <A HREF="/problem.aspx?space=1&num=1425">"Queen II"</A>. Since then hundreds of researchers tried their best to cognize its inconceivable essence and get to the solution, but only few of them have finally succeeded. The others, as usual, began to whimper and complain of this problem's baffling complexity. "Give us something easier! Let it be not two moves, but only one, please?", - demanded those thoughtless comrades.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But the grand master foresaw it. He knew exactly, that a scalability of the limitations is a great thing. And as if he tried to scoff at the simplicity lovers, Mr. Pawnstein posed a problem which was known as "Queen I".</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A board in N-dimensional chess is N-dimensional cube S*S*...*S cells in size. A cell in one of its corners (this corner is chosen at will) has coordinates (1, 1, ..., 1), and a cell in the opposite corner has coordinates (S, S, ..., S).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A rook in N-dimensional chess makes its move shifting by any non-zero number of cells along one of its coordinates. A bishop in N-dimensional chess makes its move shifting by any non-zero number of cells along all its coordinates at once, and these shifts must be equal to each other by their absolute values. A queen in N-dimensional chess can make its move both as a bishop and as a rook.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A queen is situated on empty chess-board in a cell with coordinates (C[1], C[2], ..., C[N]). You should calculate a number of different cells the queen can make its move to.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers N (1 &le; N &le; 10000) and S (2 &le; S &le; 100000). The second line contains N integer numbers C[i] (1 &le; C[i] &le; S).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the solution of "Queen I" problem.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2 3
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider three-dimensional chess-board 3*3*3 cells in size. If a queen is initially located in the cell with coordinates (1, 2, 3) it can make its move to the cells with coordinates (2, 2, 3), (3, 2, 3), (1, 1, 3), (1, 3, 3), (1, 2, 1) and (1, 2, 2) moving as a rook, and to the cells with coordinates (2, 3, 2) and (2, 1, 2) moving as a bishop.</DIV></DIV>
______________________________________________________
1454||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A thick bundle of bank notes crunched nicely in the purse of hereditary abstract painter Aristarh M. Petroff. Heaps of coins weighed his pocket down, and their ring charmed ear of the devoted admirer and true connoisseur of money.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Aristarh had just made the greatest bargain in the history of modern fine arts&nbsp;&mdash; he sold a series of pictures under the general name <A HREF="/problem.aspx?space=1&num=1426">"Rectangles"</A> to some eccentric millionaire. Neither warm rays of autumn sun nor a soft breeze, nor even a bird chirping&nbsp;&mdash; nothing could stop that feeling of unlimited happiness.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But there was something, that darkened the life of Mr. Petroff greatly. Not all of the pictures were bought by the greedy millionaire. Rectangles painted on five of them appeared to be too small for him. The millionaire asked indignantly: "Should I look at them via a magnifying glass?" Aristarh is a creative personality, so any criticism causes no damage to him. But the holy principle "money is above all" gave him no rest, and Mr. Petroff intended to sell those five pictures. But the trick was how to do it.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At that moment another brilliant idea came to Mr. Petroff's mind. By means of his favourite knife (an extremely forcible argument for negotiations with customers) he cut five rectangles out of all the pictures. Aristarh calculated the lengths of the sides W[i] and H[i] of each rectangle and started to fulfil his splendid intention.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to proposed conception, one large rectangle should be formed out of five small ones. The rectangles must not overlap. Mr. Petroff decided to decline further usage of the knife, because a true master is just not able to cut his achieved through suffering (and very expensive) masterpieces. It should be remembered, that all the rectangles must be used, otherwise the painter's heart will not endure it&nbsp;&mdash; and will break into thousands of tiny rectangles&hellip;</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the five lines contains the integer numbers W[i] and H[i] <nobr>(1 &le; W[i], H[i] &le; 1000)</nobr> for the corresponding rectangle.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the desired rectangle exists, you should output "YES". Otherwise you should output "NO".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4
3 2
5 3
2 5
2 5
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1455||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The democracy is beautiful and perfect. It allows to resolve a lot of social problems via single universal method. First iteration - bomb a country. Second iteration - give some freedom for its people. The experts assert that it is cheaper to give them the freedom of speech. At least, they did so in Albania.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In Albanian, any expression is a sequence of words (it is not necessary for the words to be different), which are separated by delimiters - spaces, punctuation marks and so on. Notorious Albanian liberal Mohammed Tahir-ogly was absolutely sure that those delimiters bound the freedom of speech. He decided to carry out a language reform and get rid of the delimiters. After the reform is effected, any Albanian expression will be a sequence of unseparated words.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Famous Albanian conservative Ahmed Kasym-bey raised his voice against the reform. He pointed out, that after it some expressions with the same spelling, but formed by different sequences of words - and therefore with different meanings - may appear in Albanian. This ambiguity undoubtedly restrains the freedom of speech. Now Ahmed craves for finding at least one such expression to ruin the intentions of his political foe. He opened an Albanian dictionary, found exactly N different words S[i] in it and realized, that he could not manage this task alone.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (1 &le; N &le; 100). Each of the next N lines contains a word S[i]. Each word consists of from 1 to 100 small latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output "NO", if the desired expression does not exist. Otherwise the first line should contain "YES", and the second line should contain this expression. The expression should not be more than 20000 characters long. If the problem has several solutions, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
ab
acb
bc
abac
babbc
</PRE></TD><TD><PRE CLASS="intable">YES
abacbabbc
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, the expression "abacbabbc" may be formed by the sequences of words "abac"+"babbc" and "ab"+"acb"+"ab"+"bc".</DIV></DIV>
______________________________________________________
1456||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everyone wants to be respected and famous. At that many of us forget that most people became respected and famous after death only. For instance, let us take system administrator Vasily "Jedi Master" Slipman. For the first time his name was mentioned in connection with the sensational case concerning password decoding. That time nearly a half of the humanity strived for getting access to an archive, which contained some information of great pith and moment (this story is fully described in the problem <A HREF="/problem.aspx?space=1&num=1428">"Jedi riddle"</A>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After that case, the greatest cryptography scientists became interested in uncommon personality of Mr. Slipman and his research activities. In-depth study of Vasily's scientific heritage revealed, that during the last years of his life he was trying to understand the nature of the Force itself. Mr. Slipman tried to find the legendary Number of Force. In the volume XII of "The Book of the Light and the Darkness" an amazing experiment is described in detail:</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"...And I took the Number of Light A and the Number of Darkness N. However the Darkness and the Light cannot be disjointed, so I took the One since Its essence is unknowable and sacred. And then I multiplied the One by the Number of Light, divided the result by the Number of Darkness and took the Remainder Z[1] = (1*A) modulo N. Then I multiplied the Remainder by the Number of Light, divided the result by the Number of Darkness and took the Remainder Z[2] = (Z[1]*A) modulo N once more. Being impatient, I was multiplying, dividing and taking the new Remainders Z[i] again and again... Until the day came when I understood I had been blind. The One is a key to the Force, the Alpha and the Omega, the Beginning and the Ending. I returned to my work with the eagerness I had never felt before. Because I knew - the Number of Force X will be found as soon as some Remainder Z[X] is equal to the One. And may the Force be with me..."</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer Numbers A and N (2 &le; A &lt; N &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the minimal positive Number X, if it exists. Otherwise you should output zero.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 20
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, the Remainders Z[1] = (1*7) modulo 20 = 7, Z[2] = (7*7) modulo 20 = 9, Z[3] = (9*7) modulo 20 = 3 and Z[4] = (3*7) modulo 20 = 1.</DIV></DIV>
______________________________________________________
1457||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">I like my hometown very much. Those dilapidated buildings rising proudly above the city and streets dug up as far back as the last century inspire me greatly. Crowds of everlastingly offended working class representatives, stupid students escaping the army, retirees hunting for empty bottles, extremely nice vagrants and amiable young people wearing black caps, leather jackets and baseball bats - all of them are so close to me.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Furthermore, an old man lives in the city. To be more precise, he had lived in the city until his house was demolished and a new casino was built on its place. No wonder, because the casino is much more useful for the city than some old man. The foundations of market economy are impossible to resist.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So the old man had to resettle into a heating main, which lies straight under the city. Despite all its disadvantages, inhabitation in a heating main implies free water supply, heating and no rent at all. In short, the old man is going to live a worth old age. Thank the government and the President for such a great concern.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">No matter how gorgeous a life in the heating main is, it is necessary for the old man to get out from the heating main to the city and visit one of some important places. Sometimes he has to make sure that there are no free drugs at the clinic, provide himself with foodstuffs at the market dump, get a pension at the post-office or give this pension to the grandson - it is just enough to buy an ice cream!</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The heating main was build under Stalin, so it is a straight branchless tunnel. Each point of it is defined by its main offset. The main offset of the start point, which is located under the courthouse, is zero. The distance between any two points of the heating main equals to the absolute value of the difference between their main offsets.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It appeared that the heating main lies under all N places visited by the old man. For each gulley, which leads from the heating main straight to one of the places, the main offset P[i] was found. The old man can get out from the heating main through these gulleys only. If he tries to use another gulley, he would be immediately caught by watchful policemen as a dangerous vagrant.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The old man is rather old, and his effort to pass some distance is proportionate to the square of this distance. That is why the old man would like to live in some point of the heating main so that the arithmetic mean of the efforts to reach each of the places is minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number N (1 &le; N &le; 1000). The second line contains N integer numbers P[i] (0 &le; P[i] &le; 10<sup>6</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the main offset of the desired point. The offset should be printed with at least six digits after decimal point. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
7 4 5
</PRE></TD><TD><PRE CLASS="intable">5.333333
</PRE></TD></TR></TABLE>
______________________________________________________
1458||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One day the Minister of Defense of the Soviet Federation comrade Ivanov resolved to carry out large-scale war games for the military forces of the Federation. It was planned to perform a landing operation of unexampled complexity - to drop armored and rapid deployment forces directly onto the heads of imaginary terrorists. "That is how we crush the international terrorism", - the Minister explained.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">General Rascal was appointed to be responsible for the war games. To begin with he plundered the allocated funds. Then he decided to refuse the expensive landing operation and come back to a traditional war games scheme.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A square parade-ground N*N cells in size is usually used for war games. A cell at the intersection of i-th horizontal and j-th vertical of the parade-ground has coordinates (i, j). A soldier is positioned is each cell. Any soldier of the Soviet Army may be in either opposite state - "Recline" or "Port". War games commander (here it is Mr. Rascal himself) stands on the platform near the parade-ground and sometimes shouts: "Cell (i, j)!" At this command, all the soldiers positioned on i-th horizontal or on j-th vertical (by the way, there are exactly 2*N-1 such soldiers) change their states to the opposite ones.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the beginning of the war games each soldier will be in some initial state C[i, j], which will be determined by the Minister himself. And Mr. Rascal will have to turn all the soldiers to the same state (it does not matter in which of two) by means of some sequence of commands. It is written in the tactics manual, that this scheme allows to evaluate intellectual faculties and commander's skills of Soviet Army's supreme officers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The general has some doubt in his intellectual faculties (as well as in his commander's skills) and wants to accept an assistance of sergeant Filcher. Tempted by the bottle of pure alcohol, the sergeant is ready to find a correct sequence of commands for any initial state of the soldiers. More over, for an extra bottle Mr. Filcher has agreed to find a correct sequence which consists of minimal possible number of commands.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the even integer number N (2 &le; N &le; 1000). Each of the next N lines contains N characters C[i, j]. Character "W" corresponds to the state "Recline", and character "B" corresponds to the state "Port".</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the number of commands in the desired sequence. Then for each command you should output the coordinates of the cell, which is mentioned in this command. Each pair of the coordinates should be printed in a separate line. The coordinates themselves should be separated by single space. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
WBWB
BWWW
WWBW
WBWB
</PRE></TD><TD><PRE CLASS="intable">2
2 3
3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1459||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let an archer be a chessman that can move one square forward, back, to the left, or to the right. An archer is situated at the square (1, 1) 
of an <i>N</i> &times; <i>M</i> chessboard (the upper right square of the board is coded as (<i>N</i>, <i>M</i>)). The archer's goal is to travel through the board and return to the initial position in such a way that each square of the board is visited exactly once (the travel starts with the first move of the archer). It is required to determine the number of different ways to perform such a travel.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Integers <i>N</i> and <i>M</i> separated with a space. 2 &le; <i>N</i> &le; 5; 2 &le; <i>M</i> &le; 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of ways to travel through the board calculated modulo 10<sup>9</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1460||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Connoisseur of sound Vova decided to update his equipment. One of the ways to improve the sound is to use point-to-point wiring with heavy wires, and the wires must be as short as possible to diminish the resistance. It is clear how to connect two terminals, it is also easy to find an optimal wiring for three terminals. But what about four terminals?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are four terminals on a circuit board. You should connect them (there must be a contact between each pair of terminals). It is permitted to add at most three auxiliary terminals and to connect terminals with wire pieces. The goal is to minimize the total length of the wires.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><pre>
N is the number of tests
x1 y1  the first test
x2 y2 
x3 y3
x4 y4

x1 y1 the second test
x2 y2
x3 y3
x4 y4
…
</pre>

1 &le; <i>N</i> &le; 100, <i>xi</i>, <i>yi</i> are integers, −200 &le; <i>xi</i>, <i>yi</i> &le; 200, no two points coincide in each test.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test, you should output a line containing the minimal possible length of the wires. The number must be given with at least four fractional digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0
2 0
2 1
3 0

0 0
0 1
1 0
1 1</PRE></TD><TD><PRE CLASS="intable">3.9093
2.7321</PRE></TD></TR></TABLE>
______________________________________________________
1461||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Children in a kindergarten once decided to decorate the room with a garland for the Christmas Day. But this turned out to be a difficult task for them. Santa Claus Petrovich came to help them, and now each year he brings a garland and helps to hang it.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A garland is a plane broken line consisting of <i>N</i> segments. The garland starts at the point (0, 0), at the socket, and must end at the point (<i>N</i>, 0). The number <i>N</i> is called the length of the garland. Each segment can be either horizontal or lie at an angle 45&#176; to the axis <i>OX</i>. The length of horizontal projection of each segment equals 1. There are no vertices of the broken line with a negative <i>y</i> coordinate and no two successive vertices with zero <i>y</i> coordinates. Let us call a segment ascending (descending) if the <i>y</i> coordinate of its right end is greater (respectively, less) than the <i>y</i> coordinate of its left end. A segment with coinciding <i>y</i> coordinates of its left and right ends is called horizontal.
We denote an ascending segment by the letter 'u', a descending segment by the letter 'd', and a horizontal segment by the letter 'h'. Then a garland is coded as a string of <i>N</i> symbols.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Santa Claus Petrovich has a magical book, in which all garlands of length <i>N</i> are listed in the form of strings. Though the book is magical, the strings are arranged in the standard way, i.e., in the ascending lexicographical order. Santa Claus Petrovich ticked off on the margin the garland he hung last year. This year he wants to hang the garland that is next in the book. Try to find this garland without the magical book.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>N</i> (2 &le; <i>N</i> &le; 100000). The second line is a string containing <i>N</i> letters (each of them is 'u', 'd', or 'h'). This string describes last year's garland.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a string describing the garland that Santa Claus Petrovich should bring this Christmas or “No solution” if such a garland does not exist.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
uhduhd</PRE></TD><TD><PRE CLASS="intable">uhhdud</PRE></TD></TR></TABLE>
______________________________________________________
1462||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Uncle Scrooge manufactured many gold bars and numbered them with sequences of zeros and ones of length 2<i>N</i>-2 (each bar's number is stamped on it). It is known that

<ol>
<li> Any two bars have different numbers.</li>
<li> The number of any bar does not contain two successive zeros.</li>
<li> For any sequence with property 2, there is a bar with this 
number in Uncle Scrooge's collection.</li>
</ol>

Then Uncle Scrooge decided to put his gold bars to safes. The codes for the safes are selected similarly to the numbers of the bars. Namely, 

<ol>
<li> A code for a safe is a sequence of zeros and ones of length <i>N</i>-2.</li>
<li> Codes for any two safes are different.</li>
<li> The code for any safe does not contain two successive zeros.</li>
<li> For any code with properties 1 and 3, there is a safe with 
this number in Uncle Scrooge's depository.</li>
</ol>

Uncle Scrooge put in each of the safes the same number of gold bars. As for the remaining bars (there are less of them than the safes), he decided to give them for charity. You should find the number of gold bars in each of Uncle Scrooge's safes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The integer 3 &le; <i>N</i> &le; 70000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of bars in each of the safes.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1463||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every Santa Claus wants to surprise children with his presents. This year Santa Claus Petrovich wants to surprise children of remote Cuckooland. He is sure that in order to make a real impression he should choose a route without repeating towns. In order to bring as much happiness as possible, he plans to visit the most populated places. Petrovich took a map of 
Cuckooland and connected with lines some pairs of towns where, he's sure, people will wait for him. He decided not to fly between towns that are not connected. It turned out that if Petrovich 
can fly (using one or several flights) from town <i>i</i> to town <i>j</i>, then there is exactly one way to do this. Petrovich can start his 
trip in any of the towns.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petrovich knows that when he arrives in town <i>i</i>, the population feels happiness <i>A<sub>i</sub></i>. And when Petrovich flies 
from town <i>i</i> to town <i>j</i>, he bestows happiness <i>C<sub>ij</sub></i>. The same amount of happiness is bestowed if he flies from <i>j</i> to <i>i</i>. Help Santa Claus Petrovich to maximize the amount of happiness that he can bring to people.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> (1 &le; <i>N</i> &le; 50000) of towns in Cuckooland and the number <i>K</i> of pairs of towns that are connected. The second line contains numbers <i>A<sub>i</sub></i> (<i>i</i> = 1..<i>N</i>); <i>A<sub>i</sub></i> &le; 10000. Each of the following <i>K</i> lines contains
three numbers <i>a</i>, <i>b</i>, <i>c</i>, which mean that when Petrovich flies from town <i>a</i> to town <i>b</i> he brings happiness <i>c</i> (<i>a</i> &ne; <i>b</i>; <i>c</i> &le; 10000). All numbers in the input are whole and nonnegative.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output must contain the maximal amount of happiness felt by the people of Cuckooland. The second line must contain the length <i>L</i> of the optimal route of Santa Claus Petrovich. The third line must contain the optimal route (<i>L</i> numbers separated with a space). If there are several answers, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1
1 1
1 2 1
</PRE></TD><TD><PRE CLASS="intable">3
2
1 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">8 7
1 5 4 6 10 1 2 2
1 2 1
2 3 10
2 4 1
4 5 1
4 6 2
6 7 2
6 8 3
</PRE></TD><TD><PRE CLASS="intable">37
4
5 4 2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1464||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Santa Claus Petrovich moved to a new hut. It consists of only one room. Its floor has the form of a simple polygon (not necessarily convex) with <i>N</i> vertices. It was dark in the hut at first, but then Petrovich hung a lamp at the point with projection (<i>X<sub>0</sub></i>, <i>Y<sub>0</sub></i>). Which area of the room is illuminated by the lamp?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the coordinates of the lamp (<i>X<sub>0</sub></i>, <i>Y<sub>0</sub></i>). 
You may regard the lamp as a material point. 
The second line contains the integer 3 &le; <i>N</i> &le; 50000. In the next <i>N</i> lines there are coordinates (<i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>) of vertices of the <i>N</i>-gon. The vertices are given in the counter-clockwise order. All the coordinates are given as pairs of real numbers separated with a space, 0 &le; <i>X<sub>i</sub></i>,<i>Y<sub>i</sub></i> &le; 1000. The coordinates contain not more than four fractional digits. It is guaranteed that the lamp is strictly inside the room.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the area <i>S</i> of the illuminated part of the room. The area must be given with accuracy of at least two fractional digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.0 1.0
6
0 0 
3 0
3 2
2 2
2 3
0 3</PRE></TD><TD><PRE CLASS="intable">8.00</PRE></TD></TR></TABLE>
______________________________________________________
1465||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In their free time, Santa Claus Petrovich and Santa Claus Egorych play the following game. Pawns are arranged on a board 3&times;3 in the following way:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pawns move and attack according to the standard chess rules, and there is one additional rule: it is obligatory to attack. The one who cannot make a move loses. White moves first. For the last 100 years, Petrovich have been playing white and 
he always won. Once Egorych became tired of this and brought a board 3&times;5. But he again was losing constantly playing black. "What's the matter", he thought and decided to buy a board
3&times;<i>N</i>:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And here Petrovich has to think which color to play in order to win. Help him to decide.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The integer <i>N</i> (1 &le; <i>N</i> &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">"White" if Petrovich should play white, and "Black" if he should play black. Egorych and Petrovich always make moves according to their 
optimal strategies.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">White
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">Black
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">White
</PRE></TD></TR></TABLE>
______________________________________________________
1466||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya has drawn a square of size <i>N</i><sup>2</sup> &times; <i>N</i><sup>2</sup> on a piece of cross-section paper and divided it into <i>N</i><sup>2</sup> smaller squares
of size <i>N</i> &times; <i>N</i>. Vasya wants to write numbers from 0 to <i>N</i><sup>2</sup>&minus;1 in the squares of the paper (let's call them cells) in order to obtain a magic square. Namely, a magic square is a square in which:

<ol>
<li> There is zero in the left upper cell.</li>
<li> There are no repeating numbers in any column.</li>
<li> There are no repeating numbers in any row.</li>
<li> There are no repeating numbers in any of the smaller squares.</li>
<li> If we swap two smaller squares having a common side, then we obtain a square satisfying properties 2-4.</li>
</ol>

Vasya has already written several numbers. 
Determine if it is possible to fill the remaining cells and obtain a magic square.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers 1 &le; <i>N</i> &le; 3 and 0 &le; <i>K</i> &le; <i>N</i><sup>4</sup>. Each of the next <i>K</i> lines contains three numbers <i>a</i>, <i>b</i>, <i>c</i>, which mean that Vasya has written the number <i>c</i> in the cell (<i>a</i>, <i>b</i>). The left upper cell has coordinates (0, 0), 
the left lower cell is (0, <i>N</i><sup>2</sup>&minus;1), the right upper cell is (<i>N</i><sup>2</sup>&minus;1, 0), and the right lower cell is (<i>N</i><sup>2</sup>&minus;1, <i>N</i><sup>2</sup>&minus;1). 
0 &le; <i>с</i> &le; <i>N</i><sup>2</sup>&minus;1. 
For any two three-number lines (<i>a</i><sub>1</sub>, <i>b</i><sub>1</sub>, <i>c</i><sub>1</sub>) and (<i>a</i><sub>2</sub>, <i>b</i><sub>2</sub>, <i>c</i><sub>2</sub>) we have either <i>a</i><sub>1</sub> &ne; <i>a</i><sub>2</sub> or <i>b</i><sub>1</sub> &ne; <i>b</i><sub>2</sub>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output NO if Vasya cannot complete the construction of a magic square. Otherwise, output YES.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4
0 0 0
1 2 1
2 1 2
3 3 3
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 0
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR></TABLE>
______________________________________________________
1467||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On an exam:<br>
&mdash; Find the sum of the <i>k</i>-th degrees of the first <i>N</i> positive integers.<br>
&mdash; That's easy. What's <i>N</i>?<br>
&mdash; <i>N</i> is unknown, solve the problem in the general case.<br>
&mdash; So how can I find this sum if <i>N</i> is unknown?<br>
&mdash; We discussed it at the lectures. The sum 
1<sup><i>k</i></sup> + 2<sup><i>k</i></sup> + 3<sup><i>k</i></sup> + … + <i>N<sup>k</sup></i> 
for any <i>k</i> is a polynomial <i>P</i>(<i>N</i>) of degree <i>k</i>+1 with rational coefficients.
For example, 1 + &hellip; + <i>N</i> = <i>N</i>(<i>N</i>+1)/2. Given <i>k</i>,
find the coefficients of this polynomial.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Can you solve this problem?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An integer 0 &le; <i>k</i> &le; 30. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output coefficients of the polynomial
<i>P</i>(<i>N</i>) = <i>A</i><sub><i>k</i>+1</sub><i>N</i><sup><i>k</i>+1</sup> + <i>A<sub>k</sub>N<sup>k</sup></i> + &hellip; 
+<i>A</i><sub>1</sub><i>N</i> + <i>A</i><sub>0</sub>
in the form of <i>k</i>+2 irreducible fractions.
A fraction has the form "<i>a</i>/<i>b</i>" or "&minus;<i>a</i>/<i>b</i>", 
where <i>a</i> and <i>b</i> are integers, <i>b</i> &ge; 1, <i>a</i> &ge; 0. 
The coefficients must be given in the order of descending degrees
(from <i>A</i><sub><i>k</i>+1</sub> to <i>A</i><sub>0</sub>). 
It is not allowed to omit denominators of the fractions 
or leave out zero coefficients. 
Separate the fractions with a space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1</PRE></TD><TD><PRE CLASS="intable">1/2 1/2 0/1</PRE></TD></TR></TABLE>
______________________________________________________
1468||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two numbers, <i>a</i> and <i>b</i>. It is required to calculate the value <i>a</i>/<i>b</i> and write it in the <i>k</i>-based number system.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of several tests (not more than 100) separated by a line break. Each test consists of three integers 1 &le; <i>a</i> &le; 10000, 1 &le; <i>b</i> &le; 10000, 2 &le; <i>k</i> &le; 36. There are two zeros in the last line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test, output a line containing the representation of the number <i>a</i>/<i>b</i> in the <i>k</i>-based number system. The integer part must be separated from the fractional part by a point. If the number <i>a</i>/<i>b</i> is whole, then there should be no point. The output must not contain insignificant zeros. If the fraction <i>a</i>/<i>b</i> is periodic, then its period must be given in parentheses.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 5 2
1 2 8
8780 1 29
2794 6083 23
157 7 19
1 12 10
0 0
</PRE></TD><TD><PRE CLASS="intable">10
0.4
ACM
0.(ACM)
13.(82DAG5)
0.08(3)
</PRE></TD></TR></TABLE>
______________________________________________________
1469||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya is a good boy, but he has a bad habit: he smokes. All the time that Petya is Vasya's friend, he's been trying to cure Vasya of this habit. But he never succeeded, because Vasya doesn't want to leave off smoking.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Recently Petya invented a new way to cure his friend. Vasya is a sloven, so his cigarettes are not in a pack but lie scattered on a big table. Petya wants to take away one cigarette every day so that Vasya wouldn't notice it. Petya wants to take away a cigarette that intersect other cigarettes on the table. Help Petya to determine if he can start to implement his plan.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cigarette is a segment with non-zero length. The first line contains the number of cigarettes on Vasya's table <i>N</i> (1 &le; <i>N</i> &le; 50000). The next <i>N</i> lines describe the cigarettes: in the (<i>i</i> + 1)st line there are integers <i>x<sub>1</sub></i>, <i>y<sub>1</sub></i>, <i>x<sub>2</sub></i>, <i>y<sub>2</sub></i>, which are the coordinates of the ends of the <i>i</i>th cigarette (–10000 &le; <i>x<sub>1</sub></i>, <i>y<sub>1</sub></i>, <i>x<sub>2</sub></i>, <i>y<sub>2</sub></i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Petya can start to implement his plan, then in the first line you should output the word “YES”, and the second line should contain numbers <i>i</i> and <i>j</i>, where <i>i</i> is the number of the cigarette that must be taken away, and <i>j</i> is the number of the intersecting cigarette.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Petya can take away no cigarettes, then output “NO”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0 2 2
0 2 2 0
</PRE></TD><TD><PRE CLASS="intable">YES
1 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0 0 0 5
5 0 5 10
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1470||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya is a ufologist and his duties include
observing Unidentified Flying Objects (UFOs)
in the part of space bounded by a cube
<i>N</i> &times; <i>N</i> &times; <i>N</i>. 
The cube is divided into cubic sectors 1 &times; 1 &times; 1. 
During the observation, the following events may happen:
<ul>
<li>several new UFOs emerge in a certain sector;</li>
<li>several UFOs disappear in a certain sector;</li>
<li>Vasya's boss may ask him how many UFOs there
are in a part of space consisting of several sectors.</li>
</ul>

At the moment when Vasya starts his observations there are no 
UFOs in the whole space.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> (1 &le; <i>N</i> &le; 128). 
The coordinates of sectors are integers from 0 to <i>N</i>–1.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then there are entries describing events, one entry per line.
Each entry starts with a number <i>M</i>.
<ul>
<li> If <i>M</i> is 1, then this number is followed by four 
integers
<i>x</i> (0 &le; <i>x</i> &lt; <i>N</i>), <i>y</i> (0 &le; <i>y</i> &lt; <i>N</i>), 
<i>z</i> (0 &le; <i>z</i> &lt; <i>N</i>), <i>K</i> (–20000 &le; 
<i>K</i> &le; 20000), 
which are coordinates of a sector and the change
in the number of UFOs in this sector.
The number of UFOs in a sector cannot become negative.
</li>
<li> If <i>M</i> is 2, then this number is followed by 
six integers
<i>x<sub>1</sub></i>, <i>y<sub>1</sub></i>, <i>z<sub>1</sub></i>, 
<i>x<sub>2</sub></i>, <i>y<sub>2</sub></i>, <i>z<sub>2</sub></i> 
(0 &le; <i>x<sub>1</sub></i> &le; <i>x<sub>2</sub></i> &lt; <i>N</i>, 
0 &le; <i>y<sub>1</sub></i> &le; <i>y<sub>2</sub></i> &lt; <i>N</i>, 0 &le; 
<i>z<sub>1</sub></i> &le; <i>z<sub>2</sub></i> &lt; <i>N</i>), 
which mean that Vasya must compute the total number of UFOs
in sectors (<i>x</i>, <i>y</i>, <i>z</i>) belonging to the volume: 
<i>x<sub>1</sub></i> &le; <i>x</i> &le; <i>x<sub>2</sub></i>, 
<i>y<sub>1</sub></i> &le; <i>y</i> &le; <i>y<sub>2</sub></i>, 
<i>z<sub>1</sub></i> &le; <i>z</i> &le; <i>z<sub>2</sub></i>.</li>
<li>If <i>M</i> is 3, it means that Vasya is tired and goes to 
sleep. This entry is always the last one.</li>
</ul>
The number of entries does not exceed 100002.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each query, output in a separate line the required number of UFOs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
2 1 1 1 1 1 1
1 0 0 0 1
1 0 1 0 3
2 0 0 0 0 0 0
2 0 0 0 0 1 0
1 0 1 0 -2
2 0 0 0 1 1 1
3
</PRE></TD><TD><PRE CLASS="intable">0
1
4
2
</PRE></TD></TR></TABLE>
______________________________________________________
1471||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A weighted tree is given. You must find the distance between two given nodes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of nodes of the tree <i>n</i> (1 &le; <i>n</i> &le; 50000). The nodes are numbered from 0 to <i>n</i>&nbsp;–&nbsp;1.
Each of the next <i>n</i>&nbsp;–&nbsp;1 lines contains three integers 
<i>u</i>, <i>v</i>, <i>w</i>, which correspond to an edge
with weight <i>w</i> (0 &le; <i>w</i> &le; 1000) connecting nodes <i>u</i> and <i>v</i>.
The next line contains the number of queries <i>m</i> (1&nbsp;&le;&nbsp;<i>m</i>&nbsp;&le;&nbsp;75000).
In each of the next <i>m</i> lines there are two integers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each query, output the distance between the nodes with the given numbers.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 0 1
2 0 1
3
0 1
0 2
1 2
</PRE></TD><TD><PRE CLASS="intable">1
1
2
</PRE></TD></TR></TABLE>
______________________________________________________
1472||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Many centuries ago Martians switched to using huge robots
for military operations. During the current Moon conquest
campaign, all of the Martian army is located at the headquarters
on Mars, and each person is controlling the actions of his 
robot. There is a strict hierarchy in the Martian army: each
person excepting the general (there is only one general in the 
army) has a direct commander. According to the army regulations, 
communication is allowed only between a commander and his direct 
subordinate. The communication is carried out via the headquarters
local network. At the headquarters, each military person has 
his own computer, and computers are numbered from 1 to <i>N</i>, 
where <i>N</i> is the size of the Martian army. It is a tradition 
that a subordinate's computer has number that is greater than the 
number of his commander's computer. Each military person,
in addition to the number of his computer, is characterized by 
his reliability. This is a real number; the owner of the computer
<i>i</i> has reliability <i>A<sub>i</sub></i>. The general has 
reliability 1, and soldiers (soldiers and only they have no 
subordinates) have reliability 0.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The traffic in the headquarters network is not free
for the military. For every megabyte of traffic between
the <i>i</i>th computer and the computer of the commander
of the <i>i</i>th computer's owner, the central Martian
provider demands <i>C<sub>i</sub></i> Martian dollars in payment.
The complication is that the volume of traffic between any 
two headquarters computers is a state secret, and is unknown 
even to the provider. Every month the provider sends a bill, and 
the military write there the traffic (a whole number of 
megabytes) themselves. Let a commander and his subordinate
have computers with numbers <i>i</i> and <i>k</i> respectively.
According to the contract with the provider, the traffic 
between the computers <i>i</i> and <i>k</i> must be
not less than <i>A<sub>i</sub></i>–<i>A<sub>k</sub></i>. 
In the beginning of every month, the provider's representatives
know the hierarchy in the Martian army and costs of a megabyte of 
traffic, but they don't know the numbers <i>A<sub>i</sub></i> 
except for the general and soldiers, and of course they don't 
know beforehand the amounts of traffic that the military will 
write in the bill. It is interesting to know the guaranteed
amount of money that the provider will receive from the military.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the size of the army
2 &le; <i>N</i> &le; 100000. 
Each of the next <i>N</i>–1 lines contains
integers <i>K<sub>i</sub></i> and <i>C<sub>i</sub></i>,
which are the number of the computer of the commander
of the <i>i</i>th computer's owner and the cost of a megabyte 
of traffic between the computers <i>i</i> and 
<i>K<sub>i</sub></i>
(1 &le; <i>K<sub>i</sub></i> &lt; <i>i</i> &le; <i>N</i>,
0 &le; <i>C<sub>i</sub></i> &le; 1000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal guaranteed amount of payment to the provider in Martian dollars.
This amount must be a real number given with exactly two decimal digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
1 10
2 5
2 3
3 1
3 2
3 3
</PRE></TD><TD><PRE CLASS="intable">8.00
</PRE></TD></TR></TABLE>
______________________________________________________
1473||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is a farm. A farmer breeds camels, sheep, and green cockroaches. When a new 
animal is born on the farm, the farmer has to know which kind it is.
He can recognize cockroaches from other animals himself, but to 
distinguish a camel from a sheep he needs help in the form of a
commission of experts. The commission measures two parameters of 
a new-born animal: the hump's height and the horns' length.
Using this data, the experts determine the kind of the animal 
(camel or sheep).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The decision-making process is the following.
The <i>i</i>th expert chooses two integers <i>a<sub>i</sub></i> 
and <i>b<sub>i</sub></i> with absolute values not exceeding 2∙10<sup>9</sup>. 
For an animal with parameters (<i>A</i>, <i>B</i>), the expert 
calculates the value (<i>a<sub>i</sub>A</i> + <i>b<sub>i</sub>B</i>). 
If this value is positive, then the expert decides that this is a 
camel, if the value is negative, then the animal is a sheep, and 
if the value is zero, then the expert is at a loss and abstains 
from voting.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The commission makes a decision with respect to each animal by voting.
If strictly more than half of experts think that the animal is a camel, 
then the commission reports to the farmer that his new animal is a camel.
A similar rule applies to the case when strictly more than half of experts 
believe that the animal is a sheep. And if the commission cannot identify 
the animal as a camel or a sheep, then the farmer judges that he has 
one more green cockroach.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once the farmer decided that it is too expensive to pay so many 
experts. Indeed, if, for example, the commission consists of four 
people, and the first expert fully agrees with the third one, and 
the second expert makes the same decisions as the fourth expert, 
then there is no sense to keep the third and the fourth experts.
There are <i>N</i> confirmed camels and sheep on the farm 
already. The farmer wants to determine the minimal <i>K</i>
such that the commission of <i>K</i> experts can recognize 
all the camels as camels, and all the sheep as sheep
(i.e., there exist pairs of numbers <i>a<sub>i</sub></i> 
and <i>b<sub>i</sub></i> such that all the animals on the farm 
are recognized by the commission correctly).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the total number of camels and sheep 
on the farm <i>N</i> (1 &le; <i>N</i> &le; 10000). 
Each of the next <i>N</i> lines contains three integers, which 
describe the <i>j</i>th animal: <i>A<sub>j</sub></i> is the hump's height,
<i>B<sub>j</sub></i> is the horns' length, and 
<i>C<sub>j</sub></i> is the kind of the animal (1 denotes a camel and 
2 denotes a sheep). 
0 &le; <i>A<sub>j</sub></i>, <i>B<sub>j</sub></i> &le; 10000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no commission satisfying the farmer's requirements, 
then output the number –1. Otherwise, in the first line output
the minimal number of experts <i>K</i>, and in the next <i>K</i> 
lines output the numbers <i>a<sub>i</sub></i> and
<i>b<sub>i</sub></i> separated by a space.
You may output any coefficients such that an expert 
commission using them will make a correct decision with respect 
to each of the <i>N</i> animals.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
10 0 1
0 10 2
</PRE></TD><TD><PRE CLASS="intable">1
1 -1
</PRE></TD></TR></TABLE>
______________________________________________________
1474||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once <i>N</i> white and <i>N</i> black frogs decided to play a game.
They found 2<i>N</i>+1 tussocks and numbered them from 0 to 2<i>N</i>.
Then the frogs occupied the tussocks in such a way that 
the white frogs sit on the tussocks with numbers 0 .. <i>N</i>–1,
the black frogs sit on the tussocks with numbers <i>N</i>+1 .. 2<i>N</i>,
and the tussock <i>N</i> is empty. The goal is to swap the white 
and black frogs, i.e., in the end of the game the first <i>N</i> 
tussocks must be occupied by the black frogs, and the last <i>N</i> 
tussocks must be occupied by the white frogs. In this game, the following 
moves are allowed. Frogs may jump only to empty tussocks.
A black frog may jump from a tussock numbered <i>i</i> &gt; 0 
to the tussock <i>i</i>–1, or it may jump from a tussock <i>j</i> &gt; 1 
to the tussock <i>j</i>–2 if there is a white frog on the tussock <i>j</i>–1.
Similarly, a white frog may jump from a tussock <i>i</i> &lt; 2<i>N</i> 
to the tussock <i>i</i>+1, or it may jump from a tussock <i>j</i> &lt; 2<i>N</i>-1 
to the tussock <i>j</i>+2 if there is a black frog on the tussock <i>j</i>+1. 
Usually in games white and black make moves by turns, but here white and black 
frogs have the same goal, so they may make moves in any order, and the total number 
of moves of white frogs may differ from the total number of moves of black 
frogs. If after one million moves the frogs still have not swapped, 
they become bored of the game and jump into the water.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given <i>N</i>, determine if the frogs can achieve their goal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input is a single integer <i>N</i> in the range from 1 to 499.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the frogs cannot swap, then output the number –1. 
Otherwise, in the first line output the number of moves
<i>K</i> needed for the fulfillment of the task, and in the second 
line output the sequence of numbers <i>С<sub>i</sub></i> 
separated by a space (1 &le; <i>i</i> &le; <i>K</i>),
where <i>С<sub>i</sub></i> is the number of the tussock 
from which a jump is performed at the <i>i</i>th move.
If there are many solutions, you may output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">3
2 0 1
</PRE></TD></TR></TABLE>
______________________________________________________
1475||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ryaba Hen has laid an egg; not a simple egg, but a titanium one. The old man hit and hit the egg, but couldn't crack it. The old woman hit and hit the egg, but couldn't crack it. The mouse hit and hit the egg, but couldn't crack it either.
Then the mouse got angry and rolled the egg upon the roof, in order to drop it down and crack. The sideview of the roof 
is shown at the picture.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The left lower vertex of the isosceles triangle on the picture has coordinates (0, 0). The mouse climbed along the slope up
to the point (<i>l</i>, <i>H</i>), lifted the egg to the height <i>h</i> from this point and dropped the egg. The egg hit the roof, bounced, flew a certain distance, bounced again, and so on, until it fell down to the ground. The egg never cracked, but it has got a dent from each collision with the roof. How many dents will the mouse find when it gets down from the roof?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Though the mouse didn't study at a technical university, it knows that the gravitational acceleration is 10, that collisions of the egg and the roof are absolutely elastic (and the incidence angle equals the reflection angle) even if the egg hits the lowest point of the roof, and that the size of the egg may be neglected in calculations. Also, the point (<i>l</i>, <i>H</i>) is not the uppermost point of the roof.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of tests <i>N</i> &le; 1000. Each of the next <i>N</i> lines contains three integers
<i>H</i>, <i>l</i>, and <i>h</i>; 1 &le; <i>H</i>, <i>l</i> &le; 10<sup>100</sup>, 1 &le; <i>h</i> &le; 10.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test, output in a separate line the number of dents on the egg.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 2 1
1 2 10
</PRE></TD><TD><PRE CLASS="intable">1
1
</PRE></TD></TR></TABLE>
______________________________________________________
1476||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the defense war against Martians, lunar programmers
invented a new method of information encoding. The data are 
represented in the form of a matrix <i>M</i> &times; <i>N</i>
containing ones and zeros. To avoid distortions during 
information transfer, an interesting mechanism was devised.
Namely, a transferred matrix <i>A</i> must satisfy the following 
condition: for any <i>i</i> from 1 to <i>N</i> &minus; 1, the set
{<i>j</i> | (<i>A</i>[<i>j</i>][<i>i</i>]=0 and <i>A</i>[<i>j</i>][<i>i</i>+1]=1)} 
must contain not more than <i>K</i> elements. If a received matrix 
does not satisfy this condition, then the information 
cannot be trusted. This mechanism became widespread 
and got the name "Lunar check condition".
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains integers <i>M</i>, <i>N</i>, and <i>K</i>
(1 &le; <i>M</i>, <i>N</i> &le; 40. 0 &le; <i>K</i> &le; <i>M</i>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the number of different matrices satisfying the Lunar check condition.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1 0
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2 1
</PRE></TD><TD><PRE CLASS="intable">15
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Below are matrices corresponding to sample 2:</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">10   11   10   11   10   10   11   11   00   01   00   01   00   01   00
10   10   11   11   00   01   00   01   10   10   11   11   00   00   01
</PRE></DIV>
______________________________________________________
1477||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Probably, you visited airports in which airplanes take off every minute or even more frequently. And did you ever imagine how many airplanes there are in the air simultaneously? And what about the whole globe?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that the Earth is an ideal ball with center at (0, 0, 0) and radius 6370 kilometers.
Most passenger planes fly at a height not more than 15 
kilometers. If you could look at the Earth from the outside,
the planes would look as points on its surface. Suppose that at 
some moment there are <i>N</i> planes in the air. A plane number
<i>i</i> is at the point of intersection of the Earth sphere
with the ray starting at the origin and having directing vector
(<i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>, <i>Z<sub>i</sub></i>). 
There is not more than one plane at each point of the Earth's 
surface. You task is to determine the maximal number of planes 
that can be seen simultaneously from a very large distance from 
the Earth. From this distance, an open hemisphere of the Earth's surface can be observed.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> (1 &le; <i>N</i> &le; 200). 
The next <i>N</i> lines contain triples of integers <i>X<sub>i</sub></i>, 
<i>Y<sub>i</sub></i>, <i>Z<sub>i</sub></i>, which are directing vectors
of the rays passing through the planes. The absolute values of 
these numbers do not exceed 600, and each triple contains at least one nonzero number. 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the maximal number of planes that can be seen simultaneously from a very large distance from the Earth.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
0 0 1
0 0 -1
0 1 0
0 -1 0
1 0 0
-1 0 0
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1478||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Martian spy satellites have taken a photo of an area on the dark 
side of the Moon. In this photo, only a lot of light points are 
seen in the dark. The Martian general suggests that the points are secret 
objects at lunar military bases. He wants to know how many 
bases there are on the Moon. The Martians suppose that the bases 
are seen at the photo as clusters of light points and satisfy the following property:
the distance between any two objects at the same base is strictly less
than the distance from any object at this base to any object at any other base.
The area on the photo can be assumed flat, and the distance 
between objects having in the photo coordinates (<i>A</i>, <i>B</i>) and 
(<i>С</i>, <i>D</i>) is assumed to be 
sqrt((<i>A</i> – <i>C</i>)<sup>2</sup> + (<i>B</i> – <i>D</i>)<sup>2</sup>).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains several tests separated by an empty line.
The first line of each test contains the number of objects on the 
photo <i>N</i>. The next <i>N</i> lines contain coordinates of 
the objects, two integers separated by a space per line. Absolute values 
of all coordinates do not exceed 10<sup>4</sup>. 
After the last test there is an empty line and the number 0.
The sum of all <i>N</i> in the input does not exceed 5 000, 
the sum of all <i>N</i><sup>2</sup> does not exceed 400 000, 
and the sum of all <i>N</i><sup>3</sup> does not exceed 250 000 000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test, you should output all possible numbers of bases 
on the photo in the form of a line of length <i>N</i> consisting of zeros and ones. For example, the line 110 means that there may be one or two bases on the photo, and the line 011 means that there may be two or three bases.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
-1 -1
1 1
1 -1
-1 1

4
1 0
2 4
1 1
0 1

0
</PRE></TD><TD><PRE CLASS="intable">1001
1101
</PRE></TD></TR></TABLE>
______________________________________________________
1479||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The mayor of ACMburg decided to reorganize the work of the city
public transport. There are <i>N</i> bus stops in ACMburg, and 
some of them are connected by roads. If two bus stop are 
connected by a road, then a bus may go without additional stops
from the first stop to the second stop as well as from the second 
stop to the first stop. No two stops are connected by more than 
one road, and no road connects a stop with itself.
A bus must stop at every stop along its route.
After the reform, there are only circular routes with at least 
three different stops, and on each route the stops do not repeat.
Any two routes differ in at least one road. For the convenience 
of citizens, there are as many different routes (satisfying the 
above conditions) as possible. The routes are numbered from 1 to
<i>K</i>. On each route there is exactly one bus, and the buses 
are numbered according to their routes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to the mayor's regulation, inspectors must examine
passengers' tickets according to a certain schedule, which 
must be arranged by city officials. The schedule must be 
in the form of a table with columns corresponding to bus routes
and rows corresponding to time moments at which checks are 
performed.  

If there is a number <i>X</i> in a cell [<i>T</i>, <i>I</i>], 
then the bus <i>I</i> stops for a ticket check at the stop 
<i>X</i> at the moment <i>T</i>. There may be empty cells in the 
table. During a day, each bus must undergo a check at each stop 
exactly once, i.e., the number of nonempty cells in each column 
equals the number of stops on the corresponding route.
Two buses cannot be checked at the same stop simultaneously.
And, of course , a bus cannot be at two different stops at 
the same moment.
It is required to find the minimal number of lines in this table.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the numbers of stops and roads in the 
city: <i>N</i> and <i>M</i> (3 &le; <i>N</i> &le; 14). 
In the next <i>M</i> lines there are pairs of stops
connected by roads.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of lines in the schedule.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
1 2
2 3
1 3
1 4
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1480||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the first day of the Petrozavodsk Training Camp,
every participant is given meal coupons, which can be used  
in the dining-hall of the Petrozavodsk State University.
This year the camp lasts for <i>N</i><sup>2</sup> days,
and there is a separate coupon for each day.
In order to make the coupons, the organizers have printed  
tables <i>N</i> &times; <i>N</i> on sheets of green paper.
Each table contains numbers from 1 to <i>N</i><sup>2</sup>,
which are numbers of days for which coupons apply.
Participants must cut their tables into <i>N</i><sup>2</sup> cells in order to obtain <i>N</i><sup>2</sup> coupons: one coupon per one day of the camp.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This year, when Dima received his sheet with coupons, he noticed that in the <i>i</i>th row and <i>j</i>th column of the printed table there was the number <i>N</i>(<i>i</i> – 1) + <i>j</i> (rows and columns are numbered from 1). Cells of the table are adjacent if they have a common side. Dima is a mathematician, so he quickly found two adjacent cells with the maximal sum of numbers in them. It turned out that the maximal sum was 2<i>N</i><sup>2</sup> – 1.
Now Dima wants to find an order of coupons in the table such that the maximal sum of numbers in two adjacent cells is minimal. Dima has <i>N</i><sup>2</sup> days to find such a table. Can you do it in five hours?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the integer 2 &le; <i>N</i> &le; 50.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the required minimal value. 
Then output a table that provides this minimum by giving 
<i>N</i> numbers in each of the next <i>N</i> lines. 
If several answers are possible, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">6
1 4
3 2
</PRE></TD></TR></TABLE>
______________________________________________________
1481||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Before the start of a contest at the Petrozavodsk Training Camp, 
Dima and Artyom weighed the winning chances for the Ural SU T34 team using a pan balance. The balance is complemented with a collection of <i>N</i> weights of masses <i>a<sub>1</sub></i>, <i>a<sub>2</sub></i>, …, <i>a<sub>N</sub></i>. No two weights have the same mass. Dima put weights only on the left pan and Artyom put weights only on the right pan. It is unknown by whom and in which order the weights were put, but after putting each weight on the balance a record was made
on a sheet of paper: if the left pan outweighed, then the letter 
L was written; if the right pan outweighed, then the letter R was 
written; and in the case of equilibrium the letter E was written.
During this procedure, all weights from the collection were put 
on the balance one by one. Having thus weighed their winning 
chances, the team went to the contest.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the contest, the sheet of paper with records of positions of the balance caught Sasha's eye. There was a sequence of <i>N</i> letters on the sheet, and for some reason there were no letters E. Knowing masses of the weights, Sasha wants to determine the order in which the weights were put on the balance.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer 1 &le; <i>N</i> &le; 50.
In the second line, masses of all weights are given. These are 
different positive integer numbers not exceeding 1000. The third line contains the list obtained by Sasha in the form of <i>N</i> symbols L and R.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the order in which the weights were put on the balance in 
the form of <i>N</i> lines. Each line must contain the mass of a 
weight and, after a space, a symbol L or R depending on who 
(Dima or Artyom) put this weight on the balance. If no such order 
can be found, output “I'm too stupid to solve this problem”. If there are many solutions, you may 
output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
10 20 30
LRL
</PRE></TD><TD><PRE CLASS="intable">10 L
20 R
30 L
</PRE></TD></TR></TABLE>
______________________________________________________
1482||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vova and Sergey play a game. Vova has the map of Petrozavodsk
on his table, and three strategic points are marked on the map: (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) is the 
Petrozavodsk State University, 
(<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>) is the Aquatika 
Swimming-Pool, and (<i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>) is the Bowling Center, where Vova and Sergey play table football. These points and the segments that connect them form a nondegenerate triangle. Vova and Sergey play with a triangular chip cut out from a sheet with a problem statement. The goal of the game is to transfer the chip in several moves to the marked triangle, i.e., in the end the vertices of the chip must exactly coincide with the vertices of the triangle. During a move, it is allowed to apply to the chip either a parallel translation or rotation. It is not allowed to turn the chip over. You may assume that during the game the chip always stays within the bounds of the map. Vova has one move left. Can he win with this move?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains six integers: <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>, <i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>. The second line contains the coordinates of the chip before Vova's last move:
<i>X</i><sub>1</sub>, <i>Y</i><sub>1</sub>, <i>X</i><sub>2</sub>, <i>Y</i><sub>2</sub>, <i>X</i><sub>3</sub>, <i>Y</i><sub>3</sub>.
The absolute values of all numbers in the input do not exceed 2000. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Vova cannot transfer the chip to the desired position in one move by parallel translation or rotation, then output 0. If he can do it by parallel translation along a vector (<i>dx</i>,&nbsp;<i>dy</i>), then output 1 <i>dx</i> <i>dy</i>. If he cannot do it by parallel translation, but can do it by rotation about a point (<i>x</i><sub>0</sub>,&nbsp;<i>y</i><sub>0</sub>) 
by an angle <i>A</i> degrees couter-clockwise
(0 &le; <i>A</i> &lt; 360), then output 
2 <i>x</i><sub>0</sub> <i>y</i><sub>0</sub> <i>A</i>. 
The numbers <i>dx</i>, <i>dy</i>, <i>x</i><sub>0</sub>, <i>y</i><sub>0</sub> and <i>A</i> must contain not less than 10 fractional digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 10 0 0 -10
0 0 10 0 0 10
</PRE></TD><TD><PRE CLASS="intable">2 0.0000000000 0.0000000000 270.0000000000
</PRE></TD></TR></TABLE>
______________________________________________________
1483||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the Petrozavodsk Training Camp, a round-robin table-football tournament was held among <i>N</i> teams participating in the camp. In the course of the tournament, each team played with each team exactly once. If a teams wins a match, it earns 3 points; a draw brings 1 point to a team; and for a defeat a team gets 0 points. It is known that the Ural&nbsp;SU&nbsp;Osliki team took the first place,
and the Ural&nbsp;SU&nbsp;T34 team took the last place. It is required to determine the maximal possible number of points of the Ural&nbsp;SU&nbsp;T34 team and the minimal possible number of points of the Ural&nbsp;SU&nbsp;Osliki
team. If several teams earned the same number of points during the tournament, then they share the same place. The difference between scored and missed goals and results of previous encounters are not taken into account.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the integer 1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two integers separated with a space: the minimal possible number of points of the Ural&nbsp;SU&nbsp;Osliki team and the maximal possible number of points of the Ural&nbsp;SU&nbsp;T34 team.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">1 1
</PRE></TD></TR></TABLE>
______________________________________________________
1484||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis is an expert film fan. He goes to a cinema to watch all films which get high rating at his favorite film-fan Web site. Usually he is satisfied with films, but today, after yet another contest at the Petrozavodsk Training Camp, he has watched a film narrating the hard lot of narfs, scrunts, and tartutics. Denis didn't like the film at all. Now he wants to lower the rating of this film at the Web site, so that other film fans won't go to a cinema to watch such a dreadful film.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rating of a film is determined as follows: each site visitor may estimate a film and give it a mark, which is an integer from 1 to 10. A film's rating is the arithmetic average of the marks given by visitors rounded to one fractional digit (for example, 7.54 is rounded to 7.5, and 7.55 and 7.58 are rounded to 7.6). Denis can see that now the film has been estimated by <i>N</i> visitors and its rating is <i>X</i>. He wants the rating to become not greater than <i>Y</i>. It remains to determine how 
many times Denis must estimate the film in order to achieve 
this goal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the numbers <i>X</i>, <i>Y</i>, and <i>N</i>. The numbers <i>X</i> and <i>Y</i> are given with one fractional digit. 
1&nbsp;&le;&nbsp;<i>X</i>,&nbsp;<i>Y</i>&nbsp;&le;&nbsp;10. 
1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>6</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of votes that is needed to guarantee that the rating becomes not greater than <i>Y</i>. If it is impossible to do this, then output “Impossible”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9.5 2.0 12
</PRE></TD><TD><PRE CLASS="intable">86
</PRE></TD></TR></TABLE>
______________________________________________________
1485||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us remind that the number of teams participating 
in the table-football tournament among programmers 
in the city of Petrozavodsk was <i>N</i>. 
In the course of the tournament, each team played with each team exactly once. For each win a team earned 3 points, for a draw it earned 1 point, and for a defeat a team got 0 points. After the tournament, each team's captain made several declarations of the type: “We earned points in the match with team X”, or “We didn't earn points in the match with team X”. It is not necessary that each captain made declarations concerning all other teams. The camp's organizers understood that some captains always lied and others always told the truth.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Using this information, restore the results of the
tournament.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number of teams 
1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100. Then there is the matrix of declarations <i>A</i> in the following form. There are <i>N</i> lines containing <i>N</i> numbers each, and these numbers are 0, 1, or <nobr>–1</nobr>.
If <nobr><i>A<sub>ij</sub></i> = 1</nobr>, then the captain of the <i>i</i>-th team declared that his team had earned points 
in the match against the <i>j</i>-th team.
If <nobr><i>A<sub>ij</sub></i> = 0</nobr>, then the captain of the <i>i</i>-th team declared that his team had not earned points in the match against the <i>j</i>-th team.
And if <nobr><i>A<sub>ij</sub></i> = –1</nobr>, it means that the captain of the <i>i</i>-th team abstained from a declaration concerning the match against the <i>j</i>-th team. It is guaranteed that <nobr><i>A<sub>ii</sub></i> = –1</nobr> for each <i>i</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there exists a solution, then output a matrix <i>B</i> of size <i>N</i> &times; <i>N</i> in which <i>B<sub>ij</sub></i> is the number of points awarded to the <i>i</i>-th team for the match against the <i>j</i>-th team. If there are many solutions, you may output any of them. If there is no solution, then output “Impossible”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
-1 1 0
1 -1 -1
0 1 -1
</PRE></TD><TD><PRE CLASS="intable">0 0 1
3 0 3
1 0 0
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
-1  1  1  0  0
 0 -1  1 -1 -1
 1  0 -1 -1 -1
 0 -1 -1 -1  1
 1 -1 -1  0 -1
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1486||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During a discussion of problems at the Petrozavodsk Training 
Camp, Vova and Sasha argued about who of them could in 300 
minutes find a pair of equal squares of the maximal size
in a matrix of size <i>N</i> &times; <i>M</i> containing lowercase English letters. Squares could overlap each other but could not coincide. He who had found a pair of greater size won. Petr walked by, looked at the matrix, said that the optimal pair of squares had sides <i>K</i>, and walked on. Vova and Sasha still cannot find this pair. Can you help them?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i> and <i>M</i> separated with a space. 1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;500.
In the next <i>N</i> lines there is a matrix consisting of
lowercase English letters, <i>M</i> symbols per line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the integer <i>K</i> which Petr said. In the next two lines, give coordinates of upper left corners of maximal equal squares. If there exist more than one pair of equal squares of size <i>K</i>, than you may output any of them. The upper left cell of the matrix has coordinates (1,&nbsp;1), and the lower right cell has coordinates (<i>N</i>,&nbsp;<i>M</i>). If there are no equal squares in the matrix, then output 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 10
ljkfghdfas
isdfjksiye
pgljkijlgp
eyisdafdsi
lnpglkfkjl
</PRE></TD><TD><PRE CLASS="intable">3
1 1
3 3
</PRE></TD></TR></TABLE>
______________________________________________________
1487||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sergey and Denis have decided that when they are free from contests, table-football matches, and watching movies, they will visit one of the many sport bars of Petrozavodsk. The point is that just during the work of the training camp a round of the Chinese Football Championship is held. Sergey and Denis want to watch the most interesting matches of the championship. There are <i>N</i> teams playing in the Chinese Football Championship. Each team will play with each exactly once. Despite roaring passions on the stands, the championship is rather dull: if a team <i>A</i> has beaten a team <i>B</i>, and the team <i>B</i> has beaten a team <i>C</i>, then either <i>A</i> has already beaten <i>C</i> or <i>A</i> will necessarily beat <i>C</i>. In this case we say that the team <i>A</i> is stronger than the teams <i>B</i> and <i>C</i> (more formally, <i>A</i> is stronger than <i>B</i> if <i>A</i> has beaten <i>B</i> or if <i>A</i> has beaten a team <i>C</i> which is stronger than <i>B</i>). There are no draws in the championship.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis and Sergey have an argument about which of two Chinese teams plays football better. Denis claims that the “Katraps” team plays better than the “Kolomotiv” team, namely, that “Katraps” is not weaker than any team which is stronger than “Komolotiv”. Help them to resolve this argument. Your task is to determine for a given pair of teams whether the first team plays better than the second one. Here the term “plays better” is understood in the same way as Denis understands it. It is assumed that a team <i>A</i> is not weaker that a team <i>B</i> if at the moment it cannot be said that <i>B</i> is stronger than <i>A</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of teams participating in the championship <i>N</i> (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000).
The teams are numbered from 1 to <i>N</i>. In the next <i>N</i> 
lines, results of matches are given. Each of these lines contains <i>N</i> symbols. If the <i>i</i>th and <i>j</i>th teams have already played with each other and the <i>i</i>th team has won, then there is the number 1 in the <i>j</i>th position of the <i>i</i>th line. In other cases, there are zeros. The next line contains the number of queries <i>Q</i>&nbsp;&le;&nbsp;50000. The queries are given in the following <i>Q</i> lines in the form <i>A</i>&nbsp;<i>B</i> (1&nbsp;&le;&nbsp;<i>A</i>,&nbsp;<i>B</i>&nbsp;&le;&nbsp;<i>N</i>; <i>A</i>&nbsp;&ne;&nbsp;<i>B</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each query, output “YES” if the team <i>A</i> plays better than the team <i>B</i>, otherwise output “No”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
011
000
000
2
2 3
1 3
</PRE></TD><TD><PRE CLASS="intable">No
YES
</PRE></TD></TR></TABLE>
______________________________________________________
1488||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the train back from Petrozavodsk, Dima and Sasha decided to play poker. Artyom came from a neighboring compartment and volunteered to be the dealer. The most popular type of poker among students of the Department of Mathematics and Mechanics is the ACM poker, which is similar to the three-card poker. The rules are very simple. A pack of 52 cards is used. The players receive from the dealer three cards each and make bets according to their estimates of their winning chances. After that, they open the cards. The player with the best combination of cards wins.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sasha plays fairly and Dima, of course, cheats. He sits on 
an upper berth and can see Sasha's cards. Also, he has 
in his sleeve two additional cards and can replace one or two of his cards by the cards in the sleeve without anybody seeing it. Naturally, he will not use for the replacement a card that he or Sasha already have, otherwise suspicions may arise when two identical cards are discovered. Before making a bet, Dima tries to imagine all possible cases and determine precisely whether he can win. You should try to do this for him.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Combinations of cards (or <i>hands</i>) are ranked as follows. A combination of three 3s is the best. Then there go (in the descending order) “straight flush”, which contains three cards of the same suit in sequence (for example, 9, 10, and Jack of Spades); “three of a kind”, which contains three cards of the same rank; “straight”, which contains cards of sequential rank; “flush”, in which the cards are of the same suit; and “two of a kind”, which contains two cards of the same rank. If the players have equal hands or if no player has any of the above-listed combinations, then the hands are compared according
to the ranks of their best cards. Individual cards are ranked as follows (in the descending order): Ace, King, Queen, Jack, 10, 9, …, 2.  If the best cards are equal, then the next highest ranking cards are compared; if those are equal, then the third cards are compared; if they are equal, then there is a tie and the pot goes to the dealer. If both players have “two of a kind”, then the ranks of paired cards are compared first, and if they are 
equal, then the ranks of the thirds cards are compared.
Hands containing A, 2, and 3 or K, A and 2 are not considered to be straights. If Dima cannot win, he prefers a tie to a defeat.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains several tests separated by an empty line.
The first line of each test describes Sasha's cards, the second line describes Dima's cards, and the third line describes the two cards in Dima's sleeve. Artyom has fairly dealt out cards from one pack, so the first six cards are different. Each card is described by its rank and suit given together. The suits are denoted by the letters S for Spades, C for Clubs, D for Diamonds, and H for Hearts. There are no Jokers in this game.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Dima can win, then output “Dima”. If he cannot win, but can arrange a tie, then output “Artyom”. Otherwise, output “Sasha”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4C AC 2C
4S KD 6H
5C KH

JS 8H JC
8C 8D 10H
8H 10H

10D 8D 9D
3D 3C 3H
AH AS

2C 3D 4H
2D 3H 4S
AH AH
</PRE></TD><TD><PRE CLASS="intable">Dima
Sasha
Dima
Artyom
</PRE></TD></TR></TABLE>
______________________________________________________
1489||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petya wants to make a paper parallelepiped with dimensions
<i>A</i>&nbsp;&times;&nbsp;<i>B</i>&nbsp;&times;&nbsp;<i>C</i>.
He has already produced a surface map of the parallelepiped
(see figure): </DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On this surface map Petya has marked two points with coordinates
(<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>) and
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>). 
Can you find the distance between these points after the 
parallelepiped is assembled?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>A</i>,&nbsp;<i>B</i>,&nbsp;<i>C</i> 
(1&nbsp;&le;&nbsp;<i>A</i>,&nbsp;<i>B</i>,&nbsp;<i>C</i>&nbsp;&le;&nbsp;1000). 
In the second line there are the coordinates of the first point
(<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>), 
and in the third line there are the coordinates of the second point
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>). 
The numbers <i>x</i><sub>1</sub>, <i>x</i><sub>2</sub>, 
<i>y</i><sub>1</sub>, <i>y</i><sub>2</sub> 
are given with two fractional digits.
The points (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>) and
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>) are different and
belong to the surface map.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the distance between the marked points after the 
parallelepiped is assembled, with accuracy to 10<sup>&minus;6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2 2
3.00 3.00
5.00 5.00</PRE></TD><TD><PRE CLASS="intable">1.4142135623730950</PRE></TD></TR></TABLE>
______________________________________________________
1490||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lich Sandro investigates the magic of fire. He is standing in the 
center of a huge square hall with floor space one million square kilometers.
The floor of the hall is paved with square 1&nbsp;&times;&nbsp;1
meter stone slabs. When Sandro waves his staff, a fire circle
of radius <i>R</i> meters springs up around him. The center of
the circle coincides with the center of the hall and is located 
at the point of contact of four slabs. Sandro wants to calculate
the number of slabs damaged by the fire. A slab is assumed to be damaged
if it has at least two common points with the fire circle. The figure 
shows as an example the slabs damaged by the fire circle of radius&nbsp;4:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the radius of the fire circle <i>R</i> &gt; 0.
This is an integer not exceeding 10<sup>5</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of damaged slabs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">16
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">60
</PRE></TD></TR></TABLE>
______________________________________________________
1491||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You won't believe it, but once, in ancient times, there happened 
the following story. At a meeting of the Round Table, King Arthur 
stood up and said: “Let each knight sitting on my right not 
farther than <i>b</i> places and not nearer than <i>a</i> places
receive from me <i>c</i> gold coins.” If we number the knights 
from 1 to <i>N</i> counter-clockwise so that the knight sitting 
on Arthur's right is numbered 1 and the knight sitting on Arthur's 
left is numbered <i>N</i>, then we have that the king gave <i>c</i> 
gold coins to the knights with numbers <i>a</i>, <i>a</i> + 1, …, 
<i>b</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having looked at Arthur's generous deed, the noble knights 
started to stand up one after another and tell their three 
numbers <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>, <i>c<sub>i</sub></i> 
(1 &le; <i>i</i> &le; <i>N</i>). After each of these utterances, 
the knights with numbers from <i>a<sub>i</sub></i> to <i>b<sub>i</sub></i>
received <i>c<sub>i</sub></i> gold coins each from the king.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since each knight was very noble, either
<i>a<sub>i</sub></i> &gt; <i>i</i> or <i>b<sub>i</sub></i> &lt; <i>i</i>. 
You task is to help the knights to learn how many gold coins each 
of them received.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of King Arthur's knights <i>N</i> 
(2 &le; <i>N</i> &le; 100000). In the next line, there are 
integers <i>a</i>, <i>b</i>, and <i>c</i>, which the king said
(1 &le; <i>a</i> &le; <i>b</i> &le; <i>N</i>;
1 &le; <i>c</i> &le; 10000). Each of the next <i>N</i> lines 
contains three integers <i>a<sub>i</sub></i>, 
<i>b<sub>i</sub></i>, <i>c<sub>i</sub></i>, which the <i>i</i>th 
knight said (1 &le; <i>a<sub>i</sub></i> &le; <i>b<sub>i</sub></i> &le; <i>N</i>;
1 &le; <i>c<sub>i</sub></i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> numbers separated with a space. The <i>i</i>th number
is the number of gold coins received by the <i>i</i>th knight.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
2 3 2
2 4 1
3 4 1
1 2 1
1 1 1
</PRE></TD><TD><PRE CLASS="intable">2 4 4 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">7
1 7 1
2 3 4
3 5 3
1 2 1
5 7 4
2 4 10
3 4 2
1 6 3
</PRE></TD><TD><PRE CLASS="intable">5 19 23 19 11 8 5
</PRE></TD></TR></TABLE>
______________________________________________________
1492||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya is a young mathematician. Sometimes it happens that Vasya's
homework includes many complicated mathematical problems, but 
Vasya is not upset about it. Why is it so? The fact is that Vasya's father 
is good at mathematics.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In one of the problems Vasya asked his father to solve, the 
notion of a piecewise linear function is introduced. A piecewise
linear function is a function <nobr><i>y</i> = <i>f</i>(<i>x</i>)</nobr>
whose graph in the coordinate system (<i>x</i>,&nbsp;<i>y</i>) 
is a broken line with vertices (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>), 
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>),&nbsp;&#133;,
(<i>x<sub>N</sub></i>,&nbsp;<i>y<sub>N</sub></i>). 
The following conditions must hold: no three successive vertices 
belong to the same line; 
<i>x<sub>i</sub></i>&nbsp;&gt;&nbsp;<i>x</i><sub><i>i</i>&minus;1</sub> 
for i&nbsp;&gt;&nbsp;1; and <i>x</i><sub>1</sub>&nbsp;=&nbsp;&minus;<i>x<sub>N</sub></i>. 
In Vasya's textbook, vertices of this broken line are called 
breakpoints of the function. A piecewise linear function is 
called even if for each <i>x</i> from
[<i>x</i><sub>1</sub>,&nbsp;<i>x<sub>N</sub></i>] it holds
<nobr><i>f</i>(&minus;<i>x</i>) = <i>f</i>(<i>x</i>)</nobr>, 
and a function is called odd if for each <i>x</i> from
[<i>x</i><sub>1</sub>,&nbsp;<i>x<sub>N</sub></i>] it holds
<nobr><i>f</i>(&minus;<i>x</i>) = &minus;<i>f</i>(<i>x</i>)</nobr>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya's task is to determine for a given piecewise linear function
if it can be represented as a sum of an even piecewise linear function 
and odd piecewise linear function.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> 
(2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;30000).
The next <i>N</i> lines contain the coordinates of the breakpoints
of a piecewise linear function (<i>x<sub>i</sub></i>,&nbsp;<i>y<sub>i</sub></i>).
These are integers in the range from &minus;15000 to 15000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output "Yes" if the given function can be represented as a sum of 
an even piecewise linear function and an odd piecewise linear 
function. Then output the coordinates of the breakpoints of the 
even function, and after that output the coordinates of the 
breakpoints of the odd function. The coordinates of each 
breakpoint must be given in a separate line. Each coordinate must
contain at least four fractional digits. If the given function 
cannot be represented in such a form, then output "No".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2              
-1 0
1 0</PRE></TD><TD><PRE CLASS="intable">Yes
-1.0000 0.0000
1.0000 0.0000
-1.0000 0.0000
1.0000 0.0000</PRE></TD></TR></TABLE>
______________________________________________________
1493||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vova bought a ticket in a tram of the 13th route and 
counted the sums of the first three and the last three digits of 
the ticket's number (the number has six digits). It turned out 
that the sums differed by one exactly. "I'm one step from happiness,"
Vova thought, "either the previous or the next ticket is lucky."
Is he right?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the number of the ticket. The number consists of six digits, 
some of which can be zeros. It is guaranteed that Vova counted correctly, i.e., 
that the sum of the first three digits differs from the sum of the last three digits
by one exactly.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output "Yes" if Vova is right and "No" otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">715068
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR><TR><TD><PRE CLASS="intable">445219
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR><TR><TD><PRE CLASS="intable">012200
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A ticket is considered lucky if the sum of its first three digits 
equals the sum of its last three digits.</DIV></DIV>
______________________________________________________
1494||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A monobilliards table set up in a gaming house of a town N
turned out to be a very profitable investment, but only till 
the day the famous Mr.&nbsp;Chichikov came to the town.
Chichikov was winning again and again, and the owner was counting 
his losses suspecting that something was wrong. But he couldn't 
prove the cheating until an inspector from Petersburg arrived in the town.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The rules of monobilliards are very simple. One has to pocket 
successively the balls with numbers 1,&nbsp;2,&nbsp;&#133;,&nbsp;<i>N</i> 
into the only pocket (exactly in this order). While 
Mr.&nbsp;Chichikov was playing, the inspector several times came 
up to the table and took out from the table's pocket the last 
of the pocketed balls. In the end it turned out that Chichikov 
had pocketed all the balls and the inspector had taken out and 
inspected them. The cheater claimed that he had pocketed the 
balls in the right order! The owner understood that this was his 
chance, because the inspector had to remember the order in which 
he had taken out the balls. But would it be so easy to prove
the cheating?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of billiard balls <i>N</i>
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100000). In the next <i>N</i> lines
there are the numbers of the balls in the order in which the inspector took them out
from the pocket. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the word "Cheater" if Chichikov could not pocket all 
the <i>N</i> balls in the right order, otherwise output 
"Not&nbsp;a&nbsp;proof".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
2
1
</PRE></TD><TD><PRE CLASS="intable">Not a proof

</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
3
1
2
</PRE></TD><TD><PRE CLASS="intable">Cheater
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first sample, Chichikov could pocket the balls in the 
right order if the inspector took them out after Chichikov 
pocketed the second ball. In the second sample, Chichikov could
pocket the balls in any order excepting the right one&nbsp;1-2-3.</DIV></DIV>
______________________________________________________
1495||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A year ago the famous gangster Vito Maretti woke up in the 
morning and realized that he was bored of robbing banks of 
round sums. And for the last year he has been taking from 
banks sums that have only digits 1 and 2 in their decimal notation.
After each robbery, Vito divides the money between <i>N</i> 
members of his gang. Your task is to determine the minimal 
stolen sum which is a multiple of <i>N</i>. </DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the number <i>N</i> 
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>6</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number which is a multiple of <i>N</i> and whose decimal notation contains only digits 1 and 2. If it contains more than 30 digits or if there are no such numbers, then output "Impossible". 

</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR><TR><TD><PRE CLASS="intable">8
</PRE></TD><TD><PRE CLASS="intable">112
</PRE></TD></TR></TABLE>
______________________________________________________
1496||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a famous spammer among our friends. In the end of every 
contest he is submitting his incorrect solutions at the speed of 
a machine-gun. In addition, he cheats by means of using several 
accounts for debugging. The judges eventually decided to 
disqualify the spammer. For that, they first want to discover all 
of his debugging accounts. The judges know which teams submitted 
their solutions in the last ten minutes of a contest. They regard 
as the spammer's debugging accounts all accounts which submitted 
solutions at least twice during the last ten minutes of the 
contest. Your task is to find these accounts.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> of submissions 
in the last 10 minutes (0&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100).
The next <i>N</i> lines contain the names of teams which 
submitted their solutions in this period. The names contain only
digits and lowercase English letters. Each name is not longer than 
30 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output in an arbitrary order all accounts which, 
in the judges' opinion, are used by the spammer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11
naucoder
iceman
abikbaev
abikbaev
petr
abikbaev
abikbaev
x
abikbaev
acrush
x</PRE></TD><TD><PRE CLASS="intable">x
abikbaev</PRE></TD></TR></TABLE>
______________________________________________________
1497||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After Vasya has finished his homework, he devotes himself to the following puzzle. He takes a white sheet of squared paper of size <i>N</i>&nbsp;&times;&nbsp;<i>N</i> cells,
selects a non-empty connected subset of cells, and paints this subset black. When he has cut out the black piece, exactly one white piece is left. Then Vasya reunites the pieces into the original square and puts it onto an infinite table. Now his task is to
disjoin the pieces by moving one of them along the table surface far from another in such a way that both pieces always stay in total contact with the table. For example, in the figure there are squares 5&nbsp;&times;&nbsp;5. In the first case the pieces 
can be separated and in the second case this is impossible.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once Petr came to visit Vasya. He saw Vasya's occupation and wanted to help his best friend by writing a program that determines if the black and white pieces can be separated.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>N</i> 
(3&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000). In the next <i>N</i> lines containing <i>N</i> symbols each, the colors of the square's cells are given. Symbols 0 denote white and symbols 1 denote black. It is guaranteed that both pieces are connected with respect to cells' sides (for example, two cells with a common vertex but without common sides are not considered to be a connected piece).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “Yes” if the pieces can be separated, and “No” otherwise.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
10001
10001
10001
11111
11111
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
11011
11011
10001
11111
11111
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR></TABLE>
______________________________________________________
1498||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Probably, most of you have heard about the step-by-step strategy 
game Losers-V produced by the company Lavin Interactive. 
If you are a fan of this game, you simply must help a knight
to get out of a difficult situation.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the course of a battle, the knight noticed a horned demon on 
the horizon. Without doubt, the knight had to attack the demon.
It would seem to be very easy, just gallop and strike! But the knight 
is a special unit: the force of his stroke depends on the length of the run-up,
which has limits. Help the knight to solve this tactical problem.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The battlefield is a rectangle <i>N</i>&nbsp;&times;&nbsp;<i>M</i>. 
At the start of the move the knight stands on the cell with 
coordinates (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>), 
and the horned demon is at the cell 
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>).
In one move, the knight can go to a cell that has a common side 
with the cell on which he stands at the moment. The knight is 
allowed to make not more than <i>L</i> moves in total (the stroke is 
not regarded as a move). It is not allowed to leave the battlefield 
(this would be regarded as a desertion) and to step on the cell 
with the horned demon. After the run-up, the knight may strike 
the demon from a cell which has a common side with the demon's cell.
The stroke force is <i>K</i>&nbsp;+&nbsp;1, where <i>K</i> is the 
length of the straight segment which the knight went immediately 
before the stroke. It is allowed to strike only once.
The knight begs you to determine the maximal damage he can 
inflict on the horned demon. We assume that the damage equals the 
stroke force.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three integers: <i>N</i>, <i>M</i>, and <i>L</i> 
(<nobr>1 &le; <i>N</i>, <i>M</i> &le; 100;</nobr> 
<nobr>1 &le; <i>L</i> &le; 1000</nobr>). 
The second line contains the knight's coordinates 
(<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>). 
In the third line there are the horned demon's coordinates
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>), 
1&nbsp;&le;&nbsp;<i>x</i><sub>1</sub>,&nbsp;<i>x</i><sub>2</sub>&nbsp;&le;&nbsp;<i>N</i>; 
1&nbsp;&le;&nbsp;<i>y</i><sub>1</sub>,&nbsp;<i>y</i><sub>2</sub>&nbsp;&le;&nbsp;<i>M</i>. 
The knight and the horned demon are in different cells.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal damage to the demon which the knight can 
cause.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4 4
1 1
3 4</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The knight moves to the cell (2,&nbsp;1), then to (2,&nbsp;4), and strikes.
The length of the run-up is&nbsp;3 and the corresponding stroke force is&nbsp;4.</DIV></DIV>
______________________________________________________
1499||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The French Empress Josephine was proud of her collection of triangular kerchiefs. But one day she was completely upset when she found out that her collection had been stolen. What's more, this happened just a few hours before the arrival of the Austrian Emperor's delegation.
Josephine couldn't confess that she was powerless against thieves, so she decided to make new kerchiefs herself.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Josephine took a piece of cloth in the form of a regular <i>N</i>-gon
and numbered its vertices from 1 to <i>N</i> in the counter-clockwise order. She decided to cut the cloth into triangles along some of the <i>N</i>-gon's diagonals in such a way that no two cuts intersect. The empress made <i>K</i> cuts and hesitated. She didn't know how to continue. Can you help the French Empress?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of the <i>N</i>-gon's vertices
<i>N</i> (3&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50000). 
In the second line, there is the integer <i>K</i> 
(0&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;<i>N</i>&nbsp;&minus;&nbsp;3). Each of the next <i>K</i> lines contains two integers
<i>A</i> and <i>B</i>
(1&nbsp;&le;&nbsp;<i>A</i>,&nbsp;<i>B</i>&nbsp;&le;&nbsp;<i>N</i>);
they are the numbers of vertices between which a cut has been made (of course, these vertices are not adjacent). It is guaranteed that the cuts do not intersect.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the number <i>P</i> of additional cuts
needed to cut the cloth into triangles. In the next <i>P</i> lines, 
output these cuts in the same format as in the input.
If there are several ways to cut the cloth, you may output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1
1 4</PRE></TD><TD><PRE CLASS="intable">1
3 1</PRE></TD></TR></TABLE>
______________________________________________________
1500||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A New Russian Kolyan believes that to spend his time in traffic jams is below his dignity. This is why he had put an emergency flashlight upon the roof of his Hummer and had no problems until a recent decision of the city administration. Now each street of the city belongs to one or several categories, and a driver must have a separate license in order to use an emergency flashlight in the streets of each category. If a street belongs to several categories, it is sufficient to have a license only for one of these categories. For each category, a license is issued by a separate city official. Although these officials are different, they accept bribes of the same amount for giving a license. Help Kolyan to find a way from his home to work such that he can go this way with his flashlight turned on and having spent the minimal amount of money for bribes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the street plan in the following format. There are integers <i>K</i>, <i>N</i>, and <i>M</i> in the first line, where <i>K</i> is the number of street categories (1 &le; <i>K</i> &le; 20), <i>N</i> is the number of crossroads (2 &le; <i>N</i> &le; 30), and <i>M</i> is the number of descriptions of street segments between crossroads.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the next <i>M</i> lines describes a street segment by three integers <i>V<sub>1</sub></i> <i>V<sub>2</sub></i> <i>C</i>, where <i>V<sub>1</sub></i> and <i>V<sub>2</sub></i> are the numbers of the crossroads limiting this segment, and <i>C</i> is its category. Crossroads are numbered from 0 to <i>N</i> – 1, categories are numbered from 0 to <i>K</i> – 1.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output in the first line the minimal number of licenses necessary for going from the crossroad 0 (Kolyan's home) to the crossroad 1 (Kolyan's work) with an emergency flashlight turned on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the second line, give the list of categories for which licenses must be obtained. The numbers should be separated with spaces. It is guaranteed that such list is always exist.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3 3
0 2 0
0 2 1
1 2 2
</PRE></TD><TD><PRE CLASS="intable">2
0 2
</PRE></TD></TR></TABLE>
______________________________________________________
1501||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The owner of a casino for New Russians has a very refined sense of beauty. For example, after a game there remain two piles with the same number of cards on the table, and the owner likes the cards to be arranged into two piles according to the color: one pile with red cards and the other with black cards. Of course, this is done not by the owner himself, but by a croupier. The owner just likes to watch the process. The croupier takes a card from the top of one of the initial piles and puts it into one of the new piles; this is repeated until all the cards from the initial piles are transferred. The owner doesn't like it if one of the resulting piles grows faster than the other. At each moment the resulting piles must not differ in size by more than one card; a bigger difference would contradict the owner's sense of beauty. Help the croupier to arrange the cards according to the tastes of his owner.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number <i>N</i> of cards in each of the piles (4 &le; <i>N</i> &le; 1000). Each of the next two lines contains <i>N</i> digits 0 or 1 describing the piles: 1 denotes a red-suit card and 0 denotes a black-suit card. The cards in a pile 
are described from the top to the bottom. There are in total <i>N</i> red and <i>N</i> black cards in the two piles.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a line containing 2<i>N</i> digits 1 or 2, which describes the process of transferring the cards. Each number shows the number of the pile from which a card is taken. If it is impossible to perform this task according to the given rules, output "Impossible".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0011
0110
</PRE></TD><TD><PRE CLASS="intable">22121112
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
1100
1100
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1502||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to run huge capitals, New Russians need exceptional brains. Of course, 
with such workload, they also need peculiar relaxation methods. In casinos there 
are special domino sets for New Russians. In these sets, the number of dots on each 
end varies not from zero to six, as in sets for ordinary people, but from zero to a 
certain number that is proportional to the intellectual level of the player. To make 
special sets, the same principle as for standard domino sets is used: each bone has 
two ends; on each end there are several dots (from zero up to a given number); a set 
contains bones with all possible combinations of ends; there are no two equal bones 
(there is no distinction with respect to left or right ends, so, for example, bones 
2-5 and 5-2 are considered equal). But, unlike ordinary dominoes, special bones are 
marked with dots that are not just strokes of paint but real 10-carat diamonds.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">How many diamonds are needed to produce one special domino set?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the maximal number of dots on one end of a domino bone (1 &le; <i>N</i> &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of diamonds used for producing the domino set.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2</PRE></TD><TD><PRE CLASS="intable">12</PRE></TD></TR></TABLE>
______________________________________________________
1503||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every New Russian wants to give his children all the best. The best education, 
in particular. For example, Kolyan has asked the math teacher to teach his son 
to solve not only quadratic equations, but also cubic ones, and quaternary ones, 
and altogether all the equations there are. The teacher knows that equations of 
degrees higher than five cannot be solved in radicals in the general form. But to 
solve equations up to the fifth degree is also very hard. It is better to check solutions using a computer. Here your help is needed.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the degree of a polynomial <i>N</i> (1 &le; <i>N</i> &le; 5). In the next <i>N</i> + 1 lines there are integers (-100 &le; <i>a<sub>i</sub></i> &le; 100, <i>a<sub>0</sub></i> &ne; 0). The <i>i</i>+2<sup>nd</sup> line contains the <i>i</i><sup>th</sup> coefficient of the polynomial <i>a<sub>0</sub>x<sup>n</sup> + a<sub>1</sub>x<sup>n–1</sup> + … + a<sub>n</sub></i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output all real roots of the polynomial taking into account their multiplicity. The
roots must be given in the ascending order. The accuracy must be not less than 10<sup>–6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1
-2
1</PRE></TD><TD><PRE CLASS="intable">1
1</PRE></TD></TR></TABLE>
______________________________________________________
1504||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Although Vovan is a New Russian, he tries to learn good manners. His new image-maker teaches Vovan that a well-bred person would choose from several cake pieces on a table either the smallest or the nearest one. Vovan wants to appear a well-bred person at his oncoming birthday, but he also wants to get a big piece of cake. Fortunately, as a host, Vovan can himself seat his guests at his big round table. Help Vovan to choose a place at the table such that the piece of cake nearest to him is as big as possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the radius of the table <i>R</i> in meters and the number <i>K</i> of cake pieces on the table (1 &le; <i>R</i> &le; 100, 2 &le; K &le; 1000). Each of the next <i>K</i> lines contains three numbers describing a piece of cake: its coordinates in meters and weight in grams (an integer from 1 to 10000). The center of the table is the coordinate origin. All the pieces have distinct coordinates and lie on a table.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the coordinates of a place at the table (a point on the table's circumference) such that in this place Vovan would get the biggest possible piece, at the same time looking as a well-bred person (if there are several pieces nearest to this point, then Vovan can take the biggest of them). Coordinates should be precise up to 7 digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 3
1 -1 100
2 2 200
-2.5 -2.56 1
</PRE></TD><TD><PRE CLASS="intable">6 8
</PRE></TD></TR></TABLE>
______________________________________________________
1505||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A New Russian Kolyan wants an oil delivery to foreign partners to become his main source of income. His company owns a number of pumping stations with network of pipelines connecting them. First, Kolyan wants to increase the amount of the transferred oil by 1 million barrels per day. Help Kolyan to achieve this goal spending the minimal amount of money.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>, which is the number of pumping stations between which there are pipelines (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10000). The stations are numbered from 1 to <i>N</i>. The next <i>N</i> lines describe the stations.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The <i>i<sup>th</sup></i> line contains quadruples of integers <i>a</i> <i>b</i> <i>c</i> <i>d</i> (1 &le; <i>a</i> &le; <i>N</i>; 0 &le; <i>c</i> &le; <i>b</i> &le; 10000;
0 &le; <i>d</i> &le; 10<sup>6</sup>), where<br>
<i>a</i> is the number of a station to which a pipeline from the station <i>i</i> exists,<br>
<i>b</i> is the flow capacity of the pipeline from <i>i</i> to <i>a</i> in millions of barrels per day,<br>
<i>c</i> is the present oil flow from <i>i</i> to <i>a</i> in millions of barrels per day,<br>
<i>d</i> is the amount of money (in roubles) necessary for the increase in the flow capacity of the pipeline from <i>i</i> to <i>a</i> by 1 million barrels per day.
There can be at most 1 pipeline from station <i>i</i> to station <i>a</i> and no pipeline connects a station with itself.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">These quadruples in the line are separated with commas, and there is a period after the last quadruple. If oil is not transported anywhere from the <i>i<SUP>th</sup></i> station, then the corresponding line contains only one symbol ".". It is guaranteed that there are no more than 100000 quadruples describing pipelines in the input.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Oil is transferred to foreign partners at only one pumping station with the number <i>N</i>. The cross-border oil flow is equal to the incoming flow at this station. From this station, oil is not transported to other pumping stations in the described pipeline network. Pumping stations with numbers less than <i>N</i> are transit stations. It is known that for each transit station the incoming oil flow is not more than the outgoing flow. If the incoming flow is less than the outgoing flow, then there is an oil-producing well nearby, whose oil production can easily be increased by 1 million barrels per day. </DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal cost <i>K</i> of reconstructing the pipeline network in such a way that the oil transfer to foreign partners is increased by 1 million barrels per day. Then output <i>N</i> lines describing the oil flow in the pipelines after the reconstruction, in the following format: the <i>i<sup>th</sup></i> of these lines must contain a list of pairs <i>a b</i> separated with commas; <i>a</i> is the number of a station to which oil is transported from the station <i>i</i>, and <i>b</i> is the number of the transported oil in millions of barrels per day. Each of these lines must end with a period.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it's impossible to reach Kolyan's goal then output single word "Impossible".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
2 1 1 1, 3 1 1 3.
3 1 0 2, 4 1 1 2.
4 1 1 1.
.
</PRE></TD><TD><PRE CLASS="intable">2
2 2, 3 1.
3 1, 4 1.
4 2.
.
</PRE></TD></TR></TABLE>
______________________________________________________
1506||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every New Russian has to look through long columns of numbers for analyzing market trends and planning his investments. Psychologists assure that the longer is a column of numbers, the more difficult it is to perceive it. Therefore, it is better to print numbers not in one long column, but in several columns so that their height would be minimal. Transform a given sequence of numbers to a format that is psychologically more convenient for perception.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers: <i>N</i> (1 &le; <i>N</i> &le; 100), which shows how many numbers must be analyzed, and <i>K</i> (1 &le; K &le; N), which is the desired number of columns. The second line contains <i>N</i> integer numbers in the range from 0 to 999.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the <i>N</i> numbers given in the input in <i>K</i> columns in such a way that the number of lines is minimal and the columns have the same height with the possible exception of the last column, which may be shorter. The width of each column must be 4 symbols; the numbers must be aligned to the right edge and padded with spaces to the required width. The numbers must be given in the same order as in the input, but in columns: the first column from the top to the bottom, then the second column from the top to the bottom, and so on. All nonempty lines must end with a line break; there must be no end spaces in the lines. It is guaranteed that solution is always exist.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 3
1 2 30 40 50 600 700
</PRE></TD><TD><PRE CLASS="intable">   1  40 700
   2  50
  30 600
</PRE></TD></TR></TABLE>
______________________________________________________
1507||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Often, when a decision about investing in a new business must be taken, a New Russian has to estimate quickly whether a certain project will be a success or not. Leading economists have recently discovered a new algorithm for forecasting the success of a project.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First, one has to form an <i>n</i> &times; <i>n</i> matrix of risks. Let us denote this matrix by <i>A</i>. Then, in order to take into account the interdependencies of the parameters inside the matrix, the matrix</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">must be computed. If at least one of the elements of the matrix <i>B</i> is zero, then there is a considerable probability that the project will fail. Otherwise, if there are no zero elements in the matrix <i>B</i>, the new business will grow and flourish.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help New Russians to make use of this algorithm. Your task is to write a program that determines the probability of the success of a project given the matrix of its risks.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the dimension <i>n</i> of the matrix <i>A</i> (2 &le; <i>n</i> &le; 50). Each of the next <i>n</i> lines contains <i>n</i> numbers that forms the matrix <i>A</i>. Each element is a whole number in the range from 0 to 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output "No" if there is at least one zero element in the matrix <i>B</i> (so it is better not to invest in the new business). Otherwise, output "Yes".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 7
15 30
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
100 35 40
0 22 0
10 11 0
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR></TABLE>
______________________________________________________
1508||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Solving Japanese puzzles (or Paint by numbers, as they are often called) is a very popular pastime among New Russians. In this kind of puzzle, cells in a grid have to be painted black or left blank according to numbers given at the sides of the grid. If this is done correctly, a hidden picture is revealed. The numbers are the lengths of continuous segments of painted cells in any given row or column. For example, a clue of "4 8 3" would mean there are segments of four, eight, and three filled cells, in that order, with at least one blank cell between successive groups. Of course, programmers are not as clever as New Russians, so we don't ask you to solve the whole puzzle. Your task will be to write a program that yields as much information about each cell of one row of a puzzle as possible, given some data about this row.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the length of the row <i>L</i> and the number of groups of consecutive cells that must be painted (1&nbsp;&le;&nbsp;<i>L</i>&nbsp;&le;&nbsp;400). The second line contains <i>K</i> integers (0&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;<i>L</i>), which are the lengths of these groups. The third line contains <i>L</i> symbols describing the current information about the cells of the row (this information could be obtained by means of analyzing the data for columns and other rows):<br>
'.' denotes a cell that is definitely blank,<br>
'X' denotes a cell that must definitely be painted,<br>
'?' means that there is no information about this cell.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a line containing <i>L</i> symbols describing the most complete information about the cells of the row in the same format as in the input, or the word Impossible if the input information is inconsistent and there is no row satisfying the input data.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 2
4 2
?????.?X??
</PRE></TD><TD><PRE CLASS="intable">?XXX?.?X?.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9 0
??????.X?
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1509||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In Vovan's casino, all croupiers are robots. Once a thought occurred to Vovan that it would be useful if robots that play dominoes with clients could recognize the type of a bone before it is turned over, that is, when a bone lies on a table with its face down. Fortunately, it is possible since the dots on bones are diamonds, and diamonds can be seen in X-rays. Moving a manipulator over a bone, a robot can direct X-rays through it to a camera located in the robot's leg. Using the obtained photo, a special program must recognize the type of the bone. Now try to guess who will write this program.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A bone is a rectangle of size <i>L &times; 2L</i> (1 &le; <i>L</i> &le; 100) composed of two squares. In each of the squares, there are from 0 to 6 dots arranged in the classical way. In order to describe the arrangements of dots on a square, we consider a smaller square with the same center whose sides are twice shorter than the sides of the bigger square and parallel to them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">1 dot is put at the center of the square<br>
2 dots are situated at the lower left and upper right corners of the smaller square (we assume that a bone is oriented vertically)<br>
3 dots are arranged in the same way as 2 dots plus a dot at the center of the square<br>
4 dots are at the four corners of the smaller square<br>
5 dots are arranged in the same way as 4 dots plus a dot at the center of the square<br>
6 dots: four dots are put at the corners of the smaller square and two dots are at the middles of the sides of the smaller square that are parallel to the long sides of the bone.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to analyze a photo of a bone. It is known that the photo shows all dots of exactly one bone. The plane of the camera's receiver is parallel to the table's surface; there are no perspective or other distortions, but the bone may be arbitrarily rotated in the plane of the table. Don't forget that the bone on the table is turned over.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of dots seen in the photo <i>N</i> (1 &le; <i>N</i> &le; 12). The next <i>N</i> lines contain the coordinates of these dots. The coordinates are accurate to 0.0001. Absolute values of coordinates do not exceed 2000. The photo shows the real size of the bone.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output integers <i>A</i> and <i>B</i> (<i>A</i> &le; <i>B</i>), which are the numbers of dots in the two squares of the bone. If several answers are possible, they should be given in the lexicographical order. It is guaranteed that the input is correct.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1.12 2.2
7 -3.0001
</PRE></TD><TD><PRE CLASS="intable">0 2
1 1
</PRE></TD></TR></TABLE>
______________________________________________________
1510||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A New Russian Kolyan likes two things: money and order. Kolyan has lots of money, but there is no order in it. One beautiful morning Kolyan understood that he couldn't stand this any longer and decided to establish order in his money. He told his faithful mates to fetch the money from an underground depository, and soon his big room was filled up with red, green, and blue banknotes. Kolyan looked with disgust at
this terrible mess. Now he wants to leave in his depository only banknotes of the same value and to give the rest of the money to the poor. He knows exactly that more than half banknotes have the same value. But in this mess it is impossible to understand which banknote is the most common.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of Kolyan's banknotes <i>N</i> (1 &le; <i>N</i> &le; 500000). In the next <i>N</i> lines, the values <i>K</i> of these banknotes are given (0 &le; <i>K</i> &le; 10<sup>9</sup>). 
More than half of them are the same.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the most common value.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
3
2
2
3
3</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1511||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Whether it sounds banal or not, but the world has changed. Many years have passed since the famous four of cheaters were shaking on the dance floor of the transitional economics (these stores are fully described in the problems <A href="/problem.aspx?space=1&num=1421">"Credit operations"</A> and <A href="/problem.aspx?space=1&num=1449">"Credit operations 2"</A>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The modern world is not a place for shady financial intrigues. Former police general Ivan Crowbar and tax police chief Peter Bullman retired long ago and now spend most of their free time in drugstores and hospitals. Meanwhile, old friends businessman Vladimir Bludgeon and banker Alexander Ironfist became honest persons and now go to church every Sunday and even pay taxes properly.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the basis of "Industrial Trust Ltd.", controlled by Vladimir, and "Financial Holding Company", owned by Alexander, a corporation "United Russian Corporation" was established. Since then a summarized income statement is submitted on behalf of the corporation every month.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once Mr. Bludgeon and Mr. Ironfist sent a regular income statement to the tax police. It was declared in the document, that during last month a clear profit of "Industrial Trust Ltd." was equal to <B>A</B> dollars, a clear profit of "Financial Holding Company" was equal to <B>B</B> dollars, and an overall profit of "United Russian Corporation" was equal to <B>C</B> dollars. Unfortunately, while filling the statement, some crucial errors were made, so a condition <B>A</B> + <B>B</B> = <B>C</B> was not satisfied. Of course, these errors should be corrected at once.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Paragraph "h" of 113-th article of federal law "Legal Entities Taxation Act" instructs: "...Each digit of the number should be corrected separately. A correction procedure means a replacing an erroneous digit with a correct one. At that it is prohibited to replace the first digit of the number with zero and to add or remove decimal positions (i.e. to change the length of the number). A special penalty is imposed for each correction procedure and equals to an absolute value of the difference between the erroneous digit and the correct one. A total penalty for the correction of the number is calculated as a sum of all penalties for the corrections of its digits. An overall penalty for the correction of the whole income statement is computed as a sum of all penalties for the corrections of the numbers mentioned in it..."</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It goes without saying, that Vladimir and Alexander are going to correct the numbers <B>A</B>, <B>B</B> and <B>C</B> so that an overall penalty would be minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number <B>A</B> (1 &le; <B>A</B> &lt; 10<SUP>1000</SUP>). The second line contains the integer number <B>B</B> (1 &le; <B>B</B> &lt; 10<SUP>1000</SUP>). The third line contains the integer number <B>C</B> (1 &le; <B>C</B> &lt; 10<SUP>1000</SUP>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the income statement could be corrected according to the rules given, you should output the minimal overall penalty. Otherwise you should output "-1".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">123
554
345
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, let us correct the number <B>A</B> (123) to 121, the number <B>B</B> (554) to 324 and the number <B>C</B> (345) to 445. Then a total penalty for the correction of the number <B>A</B> is abs(3-1) = 2 dollars, for the correction of the number <B>B</B>: abs(5-3) + abs(5-2) = 5 dollars, and for the correction of the number <B>C</B>: abs(3-4) = 1 dollar. So an overall penalty will be equal to 2 + 5 + 1 = 8 dollars.</DIV></DIV>
______________________________________________________
1512||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Zinium is a miracle of our world - and probably of all the worlds. Found at the close of the XIX-th century during archeological dig on the territory of modern Albania, Zinium belonged to Caesar himself and was lost in his last campaign.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The artifact is a chessboard of <B>N</B>*<B>N</B> cells in size. A cell in its left-bottom corner has coordinates (1, 1) and a cell in its right-top corner has coordinates (<B>N</B>, <B>N</B>). The legend says if one could place <B>N</B> queens onto the board in such a way, that none of them attacks the other, released energy of Zinium will change the world beyond recognition. Rivers will turn back, the sky will fall onto the earth, people will learn to call things by their proper names... Petr the Gorgeous himself will probably participate in the Fourth Challenge of Timus Top Coders... Or will not. So, it is high time to check it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer number <B>N</B> (4 &le; <B>N</B> &le; 100000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each queen you should output the coordinates of its cell on a separate line. The coordinates should be separated by single spaces. The queens may be listed in any order. If the problem has several solutions, you should output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
</PRE></TD><TD><PRE CLASS="intable">1 5
2 1
3 8
4 4
5 2
6 7
7 3
8 6
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two queens attack themselves, if they are placed in the cells positioned on the same horizontal, vertical or diagonal line.</DIV></DIV>
______________________________________________________
1513||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each programmer a point comes when the last contest is lost, and it is time to retire. Even Three Programmers themselves could not escape the common lot. But the Programmers also wanted to keep a good memory about themselves. For this noble purpose they created problems and organized extremely popular programming contests from time to time. Of course, this work was not well paid, but for true programmers a glory was more important than money.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However it is only the first half of a job to think out a brilliant problem. The second one is to create a politically correct statement for it.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The matter is the statement of some problem for the upcoming contest was written by the Third Programmer, who knew nothing about political correctness. He just wrote a story about citrus plants growing. As a result a word "lemon" was mentioned <B>N</B> times in the statement.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Besides, the problem is to be looked through by famous censor Alexander K. right before the contest. And it is a known fact, that lemons remind him of oranges he hates furiously. It worries the First and the Second Programmers greatly - they know exactly, that if a word "lemon" occurs more than <B>K</B> times successively, the problem will be immediately disqualified from the contest.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">That is why the First and the Second Programmers connived secretly to login to the server at the eve of the contest and replace some "lemons" with much more politically correct "bananas" so that the problem could not be disqualified. How many ways are there to do it?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer numbers <B>N</B> (1 &le; <B>N</B> &le; 10000) and <B>K</B> (0 &le; <B>K</B> &le; <B>N</B>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired number of ways.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 2</PRE></TD><TD><PRE CLASS="intable">24</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us denote a word "lemon" by a letter "L" and a word "banana" by a letter "B". So in the sample the initial sequence of words "LLLLL" might be transformed into the following politically correct sequences: "LLBLL", "LLBLB", "LLBBL", "LLBBB", "LBLLB", "LBLBL", "LBLBB", "LBBLL", "LBBLB", "LBBBL", "LBBBB", "BLLBL", "BLLBB", "BLBLL", "BLBLB", "BLBBL", "BLBBB", "BBLLB", "BBLBL", "BBLBB", "BBBLL", "BBBLB", "BBBBL" and "BBBBB".</DIV></DIV>
______________________________________________________
1514||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sergey Flayer, a mayor of Tmutarakan, likes two things: animals and hunting. Once at a session of the City Council he claimed, that the voters lacked very much for some zone, where city chiefs may hunt in comfort conditions. The deputies considered the voters' opinion and issued an edict about an establishment of the National Park of Tmutarakan at the territory of local forest. A duty to draw the border of the future Park was imposed on the Government Committee of Nature Management, which in its turn delegated it to the City Forestry in the person of ranger Kuzmitch.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kuzmitch equipped with a barbwire reel and went into the forest. On arrival he revealed, that there were <B>N</B> trees in the forest numbered from 1 to <B>N</B>, and calculated their cartesian coordinates (<B>X<SUB>i</SUB></B>, <B>Y<SUB>i</SUB></B>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kuzmitch knew, that the easiest way was to connect any three trees (with different numbers, of course) with barbwire segments, and the triangle they formed would be the border of the National Park. But he also knew, that the barbwire was rather expensive. So Kuzmitch decided to choose these three trees so that the perimeter of the Park would be minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number <B>N</B> (3 &le; <B>N</B> &le; 50000). Each of the next <B>N</B> lines contains the integer numbers <B>X<SUB>i</SUB></B> and <B>Y<SUB>i</SUB></B> (-10<sup>6</sup> &le; <B>X<SUB>i</SUB></B>, <B>Y<SUB>i</SUB></B> &le; 10<sup>6</sup>) for the corresponding tree.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain the minimal perimeter of the National Park printed with at least four digits after decimal point. The second line should contain the numbers of three trees, which should be connected with barbwire. The numbers may be listed in any order and should be separated by single spaces. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
0 0
1 1
3 0
0 3
3 3
</PRE></TD><TD><PRE CLASS="intable">6.6503
1 2 3
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Strange things happen in Tmutarakan forest&mdash;the coordinates of some trees may coincide with each other, and a triangle of zero area is considered as a triangle nevertheless.</DIV></DIV>
______________________________________________________
1515||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time former petty bureaucrat, nowadays the Minister of Finance of the Soviet Federation, Victor Thiefton considered, that he had stolen so much money during the first half of his life, that it will be enough for the last half also (this story is fully described in the problem <A href="/problem.aspx?space=1&num=1430">"Crime and punishment"</A>). As a result of this conclusion Victor intended to devote himself to immortalizing of his good name in national opinion.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Being the Minister of Finance, Mr. Thiefton knew perfectly, that the most gratifying thing to the human eye was a banknote. So he decided to print his noble face on the banknotes issued by his Ministry.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But even Victor grasped, that it would be wrong to print his face on the banknotes, which had been already issued. Therefore a propitious occasion was given to Mr. Thiefton to carry out a financial reform - to issue a banknote of some new denomination with his face on the both sides of it.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The time came to define a denomination of the new banknote, i.e. a positive integer, which should be printed on it. For a start, Victor took all the banknotes of different denominations, which had been already issued till that moment, and put them in ascending order. It appeared, that there were exactly <B>N</B> such banknotes, and a denomination of each of them was <B>D<SUB>i</SUB></B> dollars. It seemed he might take any of still unused denomination. But ambitious Mr. Thiefton did not want the new banknote's denomination to be presented as a sum of the denominations of the banknotes, which are already issued...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And here Victor realized, that he had nearly failed to bear one extremely important thing in mind. The point was that the planned emission (i.e. an issue of a new batch of money) would inevitably cause inflation growth, which, in its turn, might lead to a devaluation of Mr. Thiefton capital, that was plundered with such a great effort. Therefore the desired denomination should be minimized.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number <B>N</B> (1 &le; <B>N</B> &le; 100). The second line contains <B>N</B> integer numbers <B>D<SUB>i</SUB></B> (1 &le; <B>D<SUB>i</SUB></B> &le; 10<sup>6</sup>; <B>D<SUB>i</SUB></B> &lt; <B>D<SUB>i+1</SUB></B>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired denomination of the new banknote.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1 2 4 9 100</PRE></TD><TD><PRE CLASS="intable">8</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, the denominations 3, 5, 6 and 7 may be presented as sums of the denominations of the banknotes, which are already issued (3 = 1 + 2, 5 = 1 + 4, 6 = 2 + 4, 7 = 1 + 2 + 4), whereas the denomination 8 can not be present as such sum.</DIV></DIV>
______________________________________________________
1516||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In nice city Uryupinsk on account of the grand opening of the new Culture Palace "Кolkhoznik" it was decided to organize an international draughts tournament. The best players from Berdichev, Zhmerinka and Tmurarakan as well as famous grand master O. Bender from Albania attended the tournament.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A game between Mr. Bender and the president of local kolkhoz "Lenin's way" Veniamin Goatman was recognized as the most interesting event of the tournament. The grand master played white, and the president played black. After his opponent's regular move, Mr. Bender declared, that he will win the game by taking all black draughts in one move. Mr. Goatman examined the position carefully and offered to bet the grand master a bottle of mineral water "Essentuki", that it was impossible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The president did not expect Mr. Bender to be a master of some unique technique, which was an ability to filch secretly any number of draughts of any color from the board. To the grand master's credit, it should be noticed, that he tries to play fair and square and always filches the minimal number of draughts. How many draughts should Mr. Bender filch this time?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of 8 lines contains 8 characters, which are the corresponding cells of the board.  Character "W" means a white draught, character "B" means a black draught, and character "." (full stop) means an empty cell. There are not less than one and not more than twelve draughts of each color on the board. All the draughts are situated in the cells of the same color. White draughts, that reached the eighth horizontal, as well as black draughts, that reached the first horizontal, are considered as draughts anyway, i.e. there are no kings here.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired number of draughts.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">W.......
.W......
..B...B.
.....W..
..B.B...
........
........
........
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A draught-board is a black-and-white board 8*8 cells in size. A cell in its left-bottom corner has coordinates (1, 1) and a cell in its right-top corner has coordinates (8, 8). A cell with coordinates (x, y) is white if (x+y) modulo 2 = 1, otherwise it is black.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In one move, a draught may take any number of opponent's draughts one after another. A draught located in a cell with coordinates (x<SUB>i</SUB>, y<SUB>i</SUB>) may take an opponent's draught located in a cell with coordinates (x<SUB>j</SUB>, y<SUB>j</SUB>), if abs(x<SUB>j</SUB>-x<SUB>i</SUB>) = abs(y<SUB>j</SUB>-y<SUB>i</SUB>) = 1, and 2 &le; x<SUB>j</SUB> &le; 7, 2 &le; y<SUB>j</SUB> &le; 7, and a cell with coordinates (2*x<SUB>j</SUB>-x<SUB>i</SUB>, 2*y<SUB>j</SUB>-y<SUB>i</SUB>) is empty. At that the draught moves from a cell with coordinates (x<SUB>i</SUB>, y<SUB>i</SUB>) into a cell with coordinates (2*x<SUB>j</SUB>-x<SUB>i</SUB>, 2*y<SUB>j</SUB>-y<SUB>i</SUB>), and taken opponent's draught leaves the board.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, Mr. Bender should secretly filch a black draught located in a cell with coordinates (7, 6) from the board. Then a white draught located in a cell with coordinates (6, 5) will eat the others black draughts located in cells with coordinates (5, 4), (3, 4) and (3, 6) one after another.</DIV></DIV>
______________________________________________________
1517||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Before Albanian people could bear with the freedom of speech (this story is fully described in the problem <A href="/problem.aspx?space=1&num=1455">"Freedom of speech"</A>), another freedom - the freedom of choice - came down on them. In the near future, the inhabitants will have to face the first democratic Presidential election in the history of their country.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Outstanding Albanian politicians liberal Mohammed Tahir-ogly and his old rival conservative Ahmed Kasym-bey declared their intention to compete for the high post.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to democratic traditions, both candidates entertain with digging dirt upon each other to the cheers of their voters' approval. When occasion offers, each candidate makes an election speech, which is devoted to blaming his opponent for corruption, disrespect for the elders and terrorism affiliation. As a result the speeches of Mohammed and Ahmed have become nearly the same, and now it does not matter for the voters for whom to vote.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The third candidate, a chairman of Albanian socialist party comrade Ktulhu wants to make use of this situation. He has been lazy to write his own election speech, but noticed, that some fragments of the speeches of Mr. Tahir-ogly and Mr. Kasym-bey are completely identical. Then Mr. Ktulhu decided to take the longest identical fragment and use it as his election speech.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer number <B>N</B> (1 &le; <B>N</B> &le; 100000). The second line contains the speech of Mr. Tahir-ogly. The third line contains the speech of Mr. Kasym-bey. Each speech consists of <B>N</B> capital latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the speech of Mr. Ktulhu. If the problem has several solutions, you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">28
VOTEFORTHEGREATALBANIAFORYOU
CHOOSETHEGREATALBANIANFUTURE
</PRE></TD><TD><PRE CLASS="intable">THEGREATALBANIA
</PRE></TD></TR></TABLE>
______________________________________________________
1518||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The death is a funny thing. It is discussed only by the ones, who never died, while those, who are already dead, prefer keeping silence. That is why few people know, what exactly happens with a human after his death. A body is undoubtedly remains under ground forever... But the way of a soul was discovered only by Anton Hamster, who was a disciple of legendary Vasily Slipman (you may look through the problems <A href="/problem.aspx?space=1&num=1428">"Jedi riddle"</A> and <A href="/problem.aspx?space=1&num=1456">"Jedi riddle 2"</A> for more information about Mr. Slipman).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. Hamster carried out a sequence of experiments and found out, that, however it sounds pity, a soul neither soars into the sky nor falls under ground. It just finds oneself at one of the countless levels of the Twilight, where it is condemned to stay till the end of time. In theory, a soul may be returned into the Real World and resurrected in a new body. The only question is how to do it...</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Surely, Anton knew, that it was possible to get to any level of the Twilight straight from the Real World. You should only know a Key - and the Gates of the Twilight will open before you. Inter vivos, Mr. Slipman himself visited <B>N</B> first levels using <B>N</B> Keys <B>K<SUB>i</SUB></B> he found by brute force. But Vasily failed to find the Key to the (<B>N</B>+1)-th and the following levels. He just made a remark, that one had to use <B>N</B> Shift Numbers <B>C<SUB>i</SUB></B> and the Modular Number <B>Y</B>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But Mr. Hamster could excel his Teacher and succeeded in finding a universal formula for the Key <B>K<SUB>i</SUB></B> to the Gates of any level of the Twilight. Here is the formula: <B>K<SUB>i</SUB></B> = (<B>K<SUB>i-1</SUB></B>*<B>C<SUB>N</SUB></B> + <B>K<SUB>i-2</SUB>*C<SUB>N-1</SUB></B> + <B>K<SUB>i-3</SUB>*C<SUB>N-2</SUB></B> + ... + <B>K<SUB>i-N</SUB>*C<SUB>1</SUB></B>) modulo <B>Y</B>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And now Anton wants to organize the second coming of Mr. Slipman into our sinful world. The only thing he needs is to calculate the Key to the Gates of the Twilight's <B>X</B>-th level, where the Teacher's soul is concealed in expectation of freedom.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers <B>N</B> (1 &le; <B>N</B> &le; 100), <B>X</B> (<B>N</B> &lt; <B>X</B> &lt; 2<SUP>28</SUP>) and <B>Y</B> (2 &le; <B>Y</B> &lt; 2<SUP>28</SUP>). The second line contains <B>N</B> integer Keys <B>K<SUB>i</SUB></B> (0 &le; <B>K<SUB>i</SUB></B> &le; 100). The third line contains <B>N</B> integer Shift Numbers <B>C<SUB>i</SUB></B> (0 &le; <B>C<SUB>i</SUB></B> &le; 1).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired Key <B>K<SUB>X</SUB></B>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 6 73
12 91 65
1 1 0
</PRE></TD><TD><PRE CLASS="intable">22
</PRE></TD></TR></TABLE>
______________________________________________________
1519||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Regardless of the fact, that Vologda could not get rights to hold the Winter Olympic games of 20**, it is well-known, that the city will conduct one of the Formula 1 events. Surely, for such an important thing a new race circuit should be built as well as hotels, restaurants, international airport - everything for Formula 1 fans, who will flood the city soon. But when all the hotels and a half of the restaurants were built, it appeared, that at the site for the future circuit a lot of gophers lived in their holes. Since we like animals very much, ecologists will never allow to build the race circuit over the holes. So now the mayor is sitting sadly in his office and looking at the map of the circuit with all the holes plotted on it.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Who will be smart enough to draw a plan of the circuit and keep the city from inevitable disgrace? Of course, only true professionals - battle-hardened programmers from the first team of local technical university!.. But our heroes were not looking for easy life and set much more difficult problem: "Certainly, our mayor will be glad, if we find how many ways of building the circuit are there!" - they said.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It should be said, that the circuit in Vologda is going to be rather simple. It will be a rectangle <B>N</B>*<B>M</B> cells in size with a single circuit segment built through each cell. Each segment should be parallel to one of rectangle's sides, so only right-angled bends may be on the circuit. At the picture below two samples are given for <B>N</B> = <B>M</B> = 4 (gray squares mean gopher holes, and the bold black line means the race circuit). There are no other ways to build the circuit here.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers <B>N</B> and <B>M</B> (2 &le; <B>N</B>, <B>M</B> &le; 12). Each of the next <B>N</B> lines contains <B>M</B> characters, which are the corresponding cells of the rectangle. Character "." (full stop) means a cell, where a segment of the race circuit should be built, and character "*" (asterisk) - a cell, where a gopher hole is located.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired number of ways. It is guaranteed, that it does not exceed 2<SUP>63</SUP>-1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
**..
....
....
....
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 4
....
....
....
....
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1520||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Many years have passed since the good and wise emperor George II the Great began to rule the cultural and civilized Empire. Oh, the world he created is so mighty and beautiful! Under his rule majestic cities of marble and steel are being turned into the sky, and huge fields are being scattering with seeds. The children play, the old men laugh, while the workpeople and the peasants forge the common weal...</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But once George got to know, that fearful danger threatened the mankind. Malicious and cruel dictator Saddam III the Terrible, who ruled much less cultural and civilized Republic, intends to create the newest chemical weapon and seize the power over the planet.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to a secret service report, Saddam constructed <B>N</B> chemical weapon factories within the Republic frontier, which is a circle of radius <B>R</B> with its center at the point (0, 0). Each factory is skillfully disguised as a hospital, a school or an old people's home and located at the point with cartesian coordinates (<B>X<SUB>i</SUB></B>, <B>Y<SUB>i</SUB></B>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Saddam's vile intentions did not please George at all. So he decided to destroy all the factories by bombing. All bombs should have the same effective casualty radius and be dropped precisely onto the corresponding factory.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each bomb transforms any object within its effective casualty radius into a scorching gas cloud. This very fact prompted George to a funny thought, that it would be great to kill two birds with one stone and transform Saddam himself into such cloud. Unfortunately, the secret service failed to define exact whereabouts of the villain. That is why George wants to calculate the effective casualty radius of the bombs so that, being dropped precisely onto the factories, they would destroy Saddam regardless of his location within the Republic. By the way, it needs a lot of very expensive polonium-210 to create a high-power bomb, so the effective casualty radius should be minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer numbers <B>N</B> (1 &le; <B>N</B> &le; 300) and <B>R</B> (1 &le; <B>R</B> &le; 1000). Each of the next <B>N</B> lines contains the integer numbers <B>X<SUB>i</SUB></B> and <B>Y<SUB>i</SUB></B> (<B>X<SUB>i</SUB></B><SUP>2</SUP> + <B>Y<SUB>i</SUB></B><SUP>2</SUP> &le; <B>R</B><SUP>2</SUP>) for the corresponding factory.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the desired effective casualty radius. The radius should be printed with at least five digits after decimal point.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
0 2
0 -2
2 0
-2 0
</PRE></TD><TD><PRE CLASS="intable">2.94725152
</PRE></TD></TR></TABLE>
______________________________________________________
1521||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the latest war games (this story is fully described in the problem <A href="/problem.aspx?space=1&num=1458">"War games"</A>) the Minister of Defense of the Soviet Federation comrade Ivanov had a good chance to make sure personally, that an alertness of the Soviet Army under his command is just brilliant. But there was a thing, that continued to worry him. Being an outstanding commander, he realized, that only physical conditions of the soldiers were demonstrated. So the time came to organize one more war games and examine their mental capacity.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">General Rascal was appointed to be responsible for the war games again. The general donated the allocated funds to the poor and went to bed free-hearted. In his dream, the tactics manual appeared to him and described a scheme, that allows to organize the war games absolutely free of charge.</DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In accordance with this scheme, the war games are divided into <B>N</B> phases; and <B>N</B> soldiers, successively numbered from 1 to <B>N</B>, are marching round a circle one after another, i.e. the first follows the second, the second follows the third, ..., the (<B>N</B>-1)-th follows the <B>N</B>-th, and the <B>N</B>-th follows the first. At each phase, a single soldier leaves the circle and goes to clean the WC, while the others continue to march. At some phase, the circle is left by a soldier, who is marching <B>K</B> positions before the one, who left the circle at the previous phase. A soldier, whose number is <B>K</B>, leaves the circle at the first phase.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Surely, Mr. Rascal cherished no hope about his soldiers' abilities to determine an order of leaving the circle. "These fools can not even paint the grass properly", - he sniffed scornfully and went to sergeant Filcher for an assistance.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer numbers <B>N</B> (1 &le; <B>N</B> &le; 100000) and <B>K</B> (1 &le; <B>K</B> &le; <B>N</B>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output the numbers of soldiers as they leave the circle. The numbers should be separated by single spaces.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
</PRE></TD><TD><PRE CLASS="intable">3 1 5 2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1522||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are three machines on the new toy factory: A, B and C. The factory makes
toys by processing each toy on these machines in order A, B, C. Your task
is to create <i>N</i> toys as soon as possible. You know the time to process
each toy on each machine: <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> and <i>c<sub>i</sub></i>. You can select
an arbitrary order of processing toys. The second machine is so fast that at least one of the following two statements
holds: max(<i>b<sub>i</sub></i>)&nbsp;&le;&nbsp;min(<i>a<sub>i</sub></i>) or max(<i>b<sub>i</sub></i>)&nbsp;&le;&nbsp;min(<i>c<sub>i</sub></i>).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains the number of toys <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>5</sup>). The next
<i>N</i> lines contain three integers each: <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> and <i>c<sub>i</sub></i>
(1&nbsp;&le;&nbsp;<i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>, <i>c<sub>i</sub></i>&nbsp;&le;&nbsp;10<sup>6</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible processing time on the first line.
The second line must contain an example of optimal processing order&nbsp;—
a permutation of toy numbers from 1 to <i>N</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5      
3 1 6   
1 1 2   
5 2 5   
7 1 4   
10 2 8  
</PRE></TD><TD><PRE CLASS="intable">33
2 1 3 5 4 
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1      
5 4 7   
</PRE></TD><TD><PRE CLASS="intable">16
1
</PRE></TD></TR></TABLE>
______________________________________________________
1523||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider a permutation <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, &#133;, <i>a<sub>n</sub></i> (all
<i>a<sub>i</sub></i> are different integers in range from 1 to <i>n</i>). Let us call <i>k-inversion</i>
a sequence of numbers <i>i</i><sub>1</sub>, <i>i</i><sub>2</sub>, &#133;, <i>i<sub>k</sub></i> such that 
1&nbsp;&le;&nbsp;<i>i</i><sub>1</sub>&nbsp;&lt;&nbsp;<i>i</i><sub>2</sub>&nbsp;&lt;&nbsp;&#133;&nbsp;&lt;&nbsp;<i>i<sub>k</sub></i>&nbsp;&le;&nbsp;<i>n</i>
and <i>a<sub>i</i><sub>1</sub></sub>&nbsp;&gt;&nbsp;<i>a<sub>i</i><sub>2</sub></sub>&nbsp;&gt;&nbsp;&#133;&nbsp;&gt;&nbsp;<i>a<sub>i<sub>k</sub></sub></i>. Your task is to evaluate
the number of different <i>k</i>-inversions in a given permutation.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains two integers <i>n</i> and <i>k</i>
(1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;20000, 2&nbsp;&le;&nbsp;<i>k</i>&nbsp;&le;&nbsp;10).
The second line is filled with <i>n</i> numbers <i>a<sub>i</sub></i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single number&nbsp;— the number of <i>k</i>-inversions in a given permutation.
The number must be taken modulo 10<sup>9</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2
3 1 2
</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 3
5 4 3 2 1
</PRE></TD><TD><PRE CLASS="intable">10
</PRE></TD></TR></TABLE>
______________________________________________________
1524||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everybody knows that men in black protect our Earth from alien cockroaches 
and other vermin. The track all movements of our alien foes and friends
and control their actions. But recently the government has learned
about men in black and decided to track all their movements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are several agents. Each agent has several characteristics:
accuracy, intelligence, walking speed, experience, driving skill.
All characteristics are real numbers ranging from 0 to 1. 
Also each agent has a code letter "A" to "Z", since his name
is top secret. When the new agent comes to the organization
he is assigned a letter closest to first letter of the agent name,
that is not assigned to any agent. If
there are several such letters, the one which goes first lexicographically
is chosen. For example, if there are already agents "J", "K" and "L"
in the organization, and the agent with the name "Killer"
comes, he gets letter "I".
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Men in black have several cars that agents use in their work.
The speed of the agent when driving is equal to his driving skill.
But some cars require the agent that drives it to have a
driving skill greater or equal to some predefined value.
Each car has some distance that it can pass before it can
no longer be used.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are several kinds of alien monsters in the universe that 
men in black fight with. The agent can kill monster if
his experience and his intelligence are greater or equal
to some predefine values for this kind of monsters. Each 
kind of monsters has evasiveness, and depending on
agent's accuracy it can take different time to kill a monster.
A killed monster gives the agent who has killed him
some experience.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are four types of quests that men in black perform.

<ol>
<li> 
 Delivery quest&nbsp;— get from the office to the 
 destination point and back. For such quests the distance
 from the office to the destination point is given.
</li>
<li>
 Kill the monster quest&nbsp;— get to the monster, kill him,
 get back. For such quest you are given a distance to the
 monster and its kind. The time that an agent with accuracy
 <i>a</i> needs to kill a monster with evasiveness <i>e</i> is equal to <i>e</i>/<i>a</i>.
 The agent gets (1&minus;<i>x</i>)·<i>m</i>/<i>maxx</i> experience,
 here <i>x</i> is the experience of the agent, 
 <i>m</i> is some experience value that is associated with this
 kind of monsters, and <i>maxx</i> is the theoretically 
 maximal experience value. Agent's
 accuracy increases by (1&minus;<i>a</i>)·<i>e</i>/<i>maxe</i> where <i>maxe</i>
 is the maximal theoretically possible evasiveness of monsters.
</li>
<li>
 Investigation&nbsp;— get to the point where the investigation
 is needed, perform it, get back. For such quest you are
 given a distance to the investigation point, and the minimal
 intelligence required to perform the investigation.
 The time needed to perform investigation by an agent
 with intelligence <i>i</i> is <i>mint</i>/<i>i</i> where <i>mint</i> is the minimal
 time required to perform this investigation. After completing
 the investigation the agent gets (1&minus;<i>x</i>)·<i>i</i>/<i>mint</i> experience,
 where <i>x</i> is agent's experience before the operation.
 His intelligence increases by (1&minus;<i>i</i>)·<i>i</i>/<i>mint</i>.
</li>
<li>
 Negotiations&nbsp;— get to the point of negotiations, discuss
 hot issues, get back. You are given the distance from the office
 to the negotiations point, and the minimal experience of an
 agent that can take part in negotiations. The time needed
 for an agent with experience <i>x</i> 
 to complete the discussion is equal <i>mint</i>/<i>x</i>
 where <i>mint</i> is the minimal time needed. After the negotiations
 the agent gets (1&minus;<i>x</i>)·<i>x</i>/<i>mint</i> additional experience.
</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each quest can be performed by one or two agents. If two agents
perform the same quest, after it their characteristics change as if each
of them completed this quest by himself. Agent can walk to the location
where the quest must be performed, or drive there. If the car
breaks while the agent is driving, he must continue to walk
to the location he was driving to. If the quest is performed
by two agents, they can use the same car to get to its location.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following algorithm is used to choose an agent or a pair of 
agents to perform the quest. An agent (a pair of agents) is chosen
that would perform the quest in smallest time. If there are
several possibilities, the following tie breaking rules are used.
If it is possible to choose one agent or a pair of agents, one
agent is chosen. If there are two candidate agents, the one who has 
the smaller letter assigned is chosen (for pairs of agents
the ordered pairs of letters are compared). <b>Agents always choose a car 
in such a way to perform their quest in smallest time.</b> If the quest
is completed without using a car in the same time, the car
is not used. If there are several cars available 
<b>with the same quest performing time</b>, the car with
the lexicographically smaller id is chosen.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All quests are performed as soon as they can be performed.
If there are several quests available, the one that was
received earlier is performed first.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the agent completed the quest where he had to walk,
his walking speed increases by (1&minus;<i>s</i>)·<i>d</i>/<i>maxd</i> where
<i>s</i> is his walking speed before the quest, <i>d</i> is the distance
he walked while performing the quest, <i>maxd</i> is the maximal
possible walking distance. If the agent was driving
a car for some distance, his driving skill increases by 
(1&minus;<i>z</i>)·<i>d</i>/<i>maxd</i> where <i>z</i> is the driving skill of the agent
before the quest, <b><i>d</i> is the distance he driven while performing the quest</b>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the pair of agents perform the quest, the characteristics
of the pair are calculated using the following algorithm.
Pair's walking speed is minimum of agents' walking speeds, 
pair's driving skill is maximum of agents' driving skills,
pair's accuracy is (<i>a</i><sub>1</sub>+<i>a</i><sub>2</sub>)/2,
pair's experience is 1&minus;(1&minus;<i>e</i><sub>1</sub>)·(1&minus;<i>e</i><sub>2</sub>), pair's
intelligence is 1&minus;(1&minus;<i>i</i><sub>1</sub>)·(1&minus;<i>i</i><sub>2</sub>).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following events can happen: new quest can be received,
new agent can come, new car can be bought.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the agent's experience becomes greater or equal to 
some predefined value called retirement experience,
agent gets tired and leaves the organization 
<b>immediately after finishing his last quest</b>.
<b>His letter becomes free, new agent can get it since that moment.
It is guaranteed that at each moment there are no more than 26 agents in the agency.</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All time intervals in this problem are measured in minutes,
all time interval lengths are rounded to closest minute, standard
rounding rules are used. <b>For example, the intervals when 
the agent drive a car, when he walk after the car was broken, 
when he kill a monster must be rounded separately.</b></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All numbers and words in the input are separated by 
spaces and/or line feeds.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains:

<ul>
<li>
 The number of agents (at most 26) followed by
 the description of agents. Each agent is described by
 his name, accuracy, walking speed, intelligence,
 experience, driving skill, and the letter he is assigned.
 All assigned letters are different. Experience
 of each agent is less than the retirement experience.
</li>
<li>
 The number of car types (at most 50), after that
 for each car type: the minimal required driving skill to
 drive the car of this type, the distance the car of this
 type can run before breaking, the name of the type.
</li>
<li>
 The number of cars (at most 50), after that for each car:
 its type, current distance passed (not exceeding the maximal
 distance for cars of this type), its id.
</li>
<li>
 The number of monster kinds (at most 50), after that for
 each monster kind: the minimal experience needed to kill
 a monster of this kind, minimal intelligence needed to kill
 a monster of this kind, evasiveness of monsters of this kind,
 experience value associated with monsters of this kind,
 and the name of this kind.
</li>
<li>
 Maximal walking distance, maximal monsters evasiveness,
 maximal experience for monster killing, retirement experience.
</li>
<li>
 The number of events in the organization (at most 2000).
 After that for each event the time it occurs and:
 <ul>
  <li>
   For a new agent coming to the organization:
   "newagent", followed by agent's name, his
   accuracy, walking speed, intelligence, experience, driving
   skill. The number of agents never exceeds 26.
  </li><li>
   For a new car bought: 
   "newcar" followed by the type of the car,
   its current distance passed, its id.
  </li><li>
   For a delivery quest: 
   "quest run" followed by the distance from the office
   to the destination point.
  </li><li>
   For a kill the monster quest: 
   "quest kill" followed by the distance from the office
   to the monster and the monster type.
  </li><li>
   For an investigation quest: 
   "quest findout" followed by the distance from the office,
   the minimal required intelligence and the minimal investigation 
   time.
  </li><li>
   For a negotiations quest: 
   "quest talk" followed by the distance from the office,
   the minimal required experience and the minimal discussion
   time.
  </li>
 </ul>
</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All characteristics are floating point numbers ranging from 0 to 1 (not inclusive) <b>with no more than 2 digits after decimal point</b>.
All other numbers are positive integers and do not exceed 10<sup>6</sup>.
All agent names, car type names, monster kind names, and car ids
contain only letters of the English alphabet <b>and digits</b>, <b>the lengths of</b> the names
do not exceed 10. All names and ids are different. All events
are sorted by the time of occurrence, all times are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output all interesting moments to the output in the following format:
"dddd:hh:mm&nbsp;&nbsp;&nbsp;&lt;description&gt;", where "dddd:hh:mm" are day, hour and 
minute when the interesting event occurs.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following moments are interesting <b>(pay attention to the order)</b>:

<ul>
<li> "MIB bought a car of class &lt;car type&gt;." </li>
<li> "Car &lt;id&gt; was broken." </li>
<li> "Agent &lt;letter1&gt;[ and agent &lt;letter2&gt;] killed monster &lt;monster kind&gt;." </li>
<li> "Agent &lt;letter1&gt;[ and agent &lt;letter2&gt;] finished quest &lt;number&gt;." </li>
<li> "Agent &lt;letter&gt; has tired." </li>
<li> "New agent &lt;name&gt; got a letter &lt;letter&gt;." </li>
<li> "Agent &lt;letter1&gt;[ and agent &lt;letter2&gt;] started quest &lt;number&gt;[ using car &lt;car id&gt;]." </li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All quests are numbered starting from 1 in order they are received.
If several interesting events occur simultaneously, they
must be listed in the same order they are described above.
<b>If several interesting events of the same type occur 
simultaneously, they must be listed in lexicographic order.</b>
<b>If two agents perform the quest they must be listed in the 
messages in the order of their code letters.</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>It is guaranteed that all quests can be performed by men in black before 10000 day since beginnig.</b></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
James 0.8 0.7 0.75 0.5 0.85 J

1
0.4 100 mibLexus

2
mibLexus 0 pq123bu
mibLexus 12 ab891ah

1
0.2 0.3 18 100 cockroach

200 20 200 0.95

4
10 newagent Klint 0.9 0.8 0.5 0.7 0.86
20 quest run 48
30 newcar mibLexus 47 aa890bu
43 quest kill 100 cockroach
</PRE></TD><TD><PRE CLASS="intable">0000:00:10    New agent Klint got a letter K.
0000:00:20    Agent J started quest 1 using car pq123bu.
0000:00:30    MIB bought a car of class mibLexus.
0000:00:43    Agent K started quest 2 using car ab891ah.
0000:02:12    Agent J finished quest 1.
0000:02:25    Car ab891ah was broken.
0000:03:00    Agent K killed monster cockroach.
0000:05:05    Agent K finished quest 2.
</PRE></TD></TR></TABLE>
______________________________________________________
1525||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new robot "PTZ07" is now in the testing room. The testing room
is a parallelepiped <i>n</i>&nbsp;&times;&nbsp;<i>m</i>&nbsp;&times;&nbsp;<i>k</i>. The robot knows a sequence
of instructions to execute. The instructions are:
'u'&nbsp;— one position up, 'd'&nbsp;— one position down,
'l'&nbsp;— one position left, 'r'&nbsp;— one position right,
'f'&nbsp;— one position forward, 'b'&nbsp;— one position backward.
Robot executes its program one by one. If the instruction
tells the robot to go outside the room, the robot ignores this instruction.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a sequence of instructions, but you don't know the initial
location of the robot. Your task is to find the number of
positions in which the robot may finish its trip.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains three integers
<i>n</i>, <i>m</i> and <i>k</i> (1&nbsp;&le;&nbsp;<i>n</i>, <i>m</i>, <i>k</i>&nbsp;&le;&nbsp;10<sup>5</sup>)&nbsp;— 
width (left-right dimension), height (up-down dimension) and length
(forward-backward dimension). The second line
contains the sequence of instructions. There will be no more than 10<sup>5</sup>
instructions.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of positions where robot may finish its trip after
executing the given program.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1 1
uuuur
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2 2
ulf
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">13 14 15
uudlbdrruffbr
</PRE></TD><TD><PRE CLASS="intable">1560
</PRE></TD></TR></TABLE>
______________________________________________________
1526||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a martian restaurant, there is a choice of <i>n</i> dishes, and a holiday
dinner consists of <i>l</i> dishes. Some of the dishes could appear more than
once at the holiday dinner, while some other ones could never appear.
During the dinner, plates are placed one above another. The waiter
sometimes brings next dishes or takes the empty plates away. However, an
empty plate could not be taken away until all the plates from the next
delivered dishes are also taken away. Moreover, for some ordered pairs of
dishes there is a Martian custom: first of these dishes can not be brought
while the plate from the second dish stands on the table; such pairs are
called <i>uncommon</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's call a <i>time-table</i> of the waiter the order of bringing dishes
and taking away plates. Thus, there are 2<i>l</i> items in a time-table.
Your task will be to count how many different time-tables exist for a holiday
dinner of <i>l</i> dishes modulo <i>p</i>.

</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains <i>p</i> (2&nbsp;&le;&nbsp;<i>p</i>&nbsp;&le;&nbsp;10<sup>4</sup>), <i>t</i>
(1 &le; <i>t</i>&nbsp;&le;&nbsp;200) which is the number of items in a time table,
<i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;10) which is the number of dishes at the restaurant
and <i>m</i> (1&nbsp;&le;&nbsp;<i>m</i> &le; 100)&nbsp;— the number of uncommon pairs.
The next <i>m</i> lines each contain an ordered pair of numbers <i>i</i> and <i>j</i>
which means that the dish <i>j</i> could not be brought while the plate from
the dish <i>i</i> stands on the table. Note that the number <i>t</i> is even.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different time-tables modulo <i>p</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10000 4 2 1
1 2
</PRE></TD><TD><PRE CLASS="intable">7
</PRE></TD></TR><TR><TD><PRE CLASS="intable">9999 6 10 2
2 3
6 7
</PRE></TD><TD><PRE CLASS="intable">4866
</PRE></TD></TR></TABLE>
______________________________________________________
1527||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a country, there is a number of cities connected by roads. Due to
insufficient budget, some roads are covered with pot-holes, so certain
cars cannot use certain roads. Thus each road has the height number
associated with it&nbsp;— that is the minimal height of the bottom of a car
that can drive through that road. On the other hand, some roads are private,
and one should pay for using them. Luckily, the amount to be paid is
standartized and equals one standard unit. Finally, for each road, the time
required to drive through it is known.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given that you have to drive from city <i>s</i> to city <i>t</i> using no more than
<i>maxtime</i> minutes of time, no more than <i>money</i> standard units, find the
minimal height of the bottom of the car which makes it possible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of cities <i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;100), the number of roads <i>m</i>
(1&nbsp;&le;&nbsp;<i>m</i>&nbsp;&le;&nbsp;10<sup>4</sup>), and the numbers of starting and ending cities <i>s</i>
and <i>t</i> (1&nbsp;&le;&nbsp;<i>s</i>, <i>t</i>&nbsp;&le;&nbsp;<i>n</i>) are given on the first line of the input.
The second line contains <i>money</i> (0&nbsp;&le;&nbsp;<i>money</i>&nbsp;&le;&nbsp;10<sup>6</sup>) and <i>maxtime</i>
(0&nbsp;&le;&nbsp;<i>maxtime</i>&nbsp;&le;&nbsp;10<sup>6</sup>).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the next <i>m</i> lines has the form <i>u<sub>i</sub> v<sub>i</sub> c<sub>i</sub> t<sub>i</sub> h<sub>i</sub></i>.
Here, <i>u<sub>i</sub></i> is the starting city for <i>i</i>-th road, <i>v<sub>i</sub></i> is the ending city,
<i>c<sub>i</sub></i> is 1 if it is a private road and 0 otherwise, <i>t<sub>i</sub></i> is the time
required to drive through that road, and <i>h<sub>i</sub></i> is the height of the car
required to pass (1&nbsp;&le;&nbsp;<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>&nbsp;&le;&nbsp;<i>n</i>, 0&nbsp;&le;&nbsp;<i>t<sub>i</sub></i>&nbsp;&le;&nbsp;10<sup>4</sup> and
0&nbsp;&le;&nbsp;<i>h<sub>i</sub></i>&nbsp;&le;&nbsp;10<sup>6</sup>). Note that the roads are unidirectional. All the
numbers in the input are integers.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no way to drive from <i>s</i> to <i>t</i> under given restrictions,
output "&minus;1". Otherwise write on the first line the minimal height
of the car; the second line should contain the number of roads used to travel
from <i>s</i> to <i>t</i>; and the third line must be filled by the numbers of the roads
you used in the order of usage. Roads are numbered from 1 to <i>m</i>; the
order is the same as in input.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2 1 2     
1 100       
1 2 1 100 77
1 2 1 100 66
</PRE></TD><TD><PRE CLASS="intable">66
1
2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2 1 2     
0 100       
1 2 0 101 77
1 2 1 100 66
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR></TABLE>
______________________________________________________
1528||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a recurrent formula for a sequence <i>f</i>:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>f</i>(<i>n</i>) = 1 + <i>f</i>(1)<i>g</i>(1) + <i>f</i>(2)<i>g</i>(2) + &#133; + <i>f</i>(<i>n</i>&minus;1)<i>g</i>(<i>n</i>&minus;1), 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>g</i> is also a recurrent sequence given by formula
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>g</i>(<i>n</i>) = 1 + 2<i>g</i>(1) + 2<i>g</i>(2) + 2<i>g</i>(3) + &#133; + 2<i>g</i>(<i>n</i>&minus;1) &minus; <i>g</i>(<i>n</i>&minus;1)<i>g</i>(<i>n</i>&minus;1).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that <i>f</i>(1)&nbsp;=&nbsp;1, <i>g</i>(1)&nbsp;=&nbsp;1. 
Your task is to find <i>f</i>(<i>n</i>)&nbsp;mod&nbsp;<i>p</i>.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of several cases. Each case contains two
numbers on a single line. These numbers are <i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;10000) and
<i>p</i> (2&nbsp;&le;&nbsp;<i>p</i>&nbsp;&le;&nbsp;2·10<sup>9</sup>).
The input is terminated by the case with <i>n</i> = <i>p</i> = 0 which should not be
processed. The number of cases in the input does not exceed 5000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output for each case the answer to the task on a separate line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2
2 11
0 0
</PRE></TD><TD><PRE CLASS="intable">1
2
</PRE></TD></TR></TABLE>
______________________________________________________
1529||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alice and Bob are playing with <i>k</i>-dimensional rectangular parallelepiped
consisting of <i>n</i><sub>1</sub> &times; <i>n</i><sub>2</sub> &times; &#133; &times; <i>n<sub>k</sub></i> unit hypercubes.
They make moves in turn. Alice chooses some unit hypercube, and cuts
the parallelepiped through the center of this hypercube with all possible
planes that are parallel to its sides. All unit hypercubes that were
cut by at least one plane are removed, and what remains is a series of smaller
rectangular parallelepipeds. It is required that at least one of those
small parts has edge lengths that are pairwise relatively prime with 
the corresponding edge lengths of the original parallelepiped. It is also allowed
to cut the parallelepiped in such way that no parts remain.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Afterwards, each player chooses any of remaining parallelepipeds, and cuts
it as described above. After a cut every parallelepiped is left,
and making the turn the player can choose any of them.
The player who can't move loses. Assuming
both players play optimally, who will win?
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's consider an example. Assume that  <i>k</i> = 2, and we have a 6 &times; 5
rectangle. By cutting the hypercube at (1, 4) we get two parts:
5 &times; 1 and 5 &times; 3. As the second part's (as well as first part's,
but that's not important) edge lengths are relatively prime with
the edge lengths of the original rectangle (5 is relatively prime with 6 and
3 is relatively prime with 5), this is a possible move. However,
cutting the hypercube at (3, 2) is not a possible move, because each of the remaining
parts (2 &times; 1, 3 &times; 1, 2 &times; 3, 3 &times; 3) doesn't satisfy
the condition above.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains an integer <i>k</i> (1&nbsp;&le;&nbsp;<i>k</i>&nbsp;&le;&nbsp;8), 
the second line contains <i>k</i> integers <i>n</i><sub>1</sub>, <i>n</i><sub>2</sub>, &#133; <i>n<sub>k</sub></i>, 
1&nbsp;&le;&nbsp;(<i>n</i><sub>1</sub>+1) &times; (<i>n</i><sub>2</sub>+1) &times; &#133; &times; (<i>n<sub>k</sub></i>+1)&nbsp;&le;&nbsp;10000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of the winning player to the first line of output 
(1 for Alice, 2 for Bob). In case Alice wins the game, output the
first move that leads her to the win to the second line of output.
The move is described by <i>k</i> numbers, 1-based coordinates of the
cut hypercube. In case there're several possible moves that lead her
to the win, output the lexicographically smallest one.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 
2 2
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
3 4 5
</PRE></TD><TD><PRE CLASS="intable">1
1 1 3
</PRE></TD></TR></TABLE>
______________________________________________________
1530||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider two binary sequences <i>A</i> and <i>B</i> of length <i>n</i> each.
Let us call these sequences <i>compatible</i> if <i>A</i> XOR <i>B</i> = <i>A + B</i>
where XOR is the element-wise exclusive OR operation.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given an integer <i>n</i> and a pair of binary sequences <i>p</i> and <i>q</i>,
find the pair of compatible binary sequences <i>a</i> and <i>b</i> which comes
first after the pair (<i>p</i>, <i>q</i>). Pair (<i>a</i>, <i>b</i>) is said to be
lexicographically less that (<i>c</i>, <i>d</i>) if <i>a</i> is lexicographically less
than <i>c</i>, or <i>a</i> and <i>c</i> are equal and <i>b</i> is lexicographically less than <i>d</i>.
If there is no pair of compatible binary sequences lexicographically greater
than (<i>p</i>, <i>q</i>), output the lexicographically first compatible pair.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a single integer <i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;100000) on the first line of
the input. The sequence <i>p</i> is given on the second line, and the sequence
<i>q</i> is on the third one. There are no spaces or other delimiters inside the
sequences; however, there could be trailing whitespace on these two lines.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the sequences <i>a</i> and <i>b</i> on the first two lines of the output,
correspondingly. Use the same format as the input.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1  
0 
0 
</PRE></TD><TD><PRE CLASS="intable">0
1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2   
01 
10 
</PRE></TD><TD><PRE CLASS="intable">10
00
</PRE></TD></TR></TABLE>
______________________________________________________
1531||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider zones <i>z<sub>i</sub></i> on a plane which consist of triangles. Zone <i>z</i><sub>1</sub>
consists of two right-angled isosceles triangles, forming a square. Zone
<i>z</i><sub><i>n</i> + 1</sub> is produced from zone <i>z<sub>n</sub></i> in the following way. For each
triangle from the previous zone, construct two isosceles right-angled
triangles on each of its two legs as a hypotenuse. Then, remove every
triangle that is a part of a zone with lower number. The remaining triangles
constitute the zone <i>z</i><sub><i>n</i> + 1</sub>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given an integer number <i>n</i>, find how many simple polygons constitute
the zone <i>z<sub>n</sub></i>.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a single integer <i>n</i> (1&nbsp;&le;&nbsp;<i>n</i>&nbsp;&le;&nbsp;2000) on the first line
of the input.

</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single number&nbsp;— the number of simple polygons zone <i>z<sub>n</sub></i>
consists of.

</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">2</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">8</PRE></TD></TR><TR><TD><PRE CLASS="intable">4</PRE></TD><TD><PRE CLASS="intable">12</PRE></TD></TR></TABLE>
______________________________________________________
1532||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During his travels in Middle-earth, Bilbo had to study many 
languages. The most difficult to learn was the ancient Elvish 
language Quenya. Bilbo had even acquired a parchment to which he 
carefully wrote down Quenya words. By the way, Bilbo could have made mistakes when writing down the words, but he 
knew exactly that there were no more than two mistakes in each word.
There could be the following mistakes: a letter was missing, an extra 
letter was inserted, a letter was replaced by another letter.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When his travels were over, Bilbo decided to compile a Quenya-Westron dictionary for hobbits. He looked through his records and discovered that the same word could be written down in its correct form as well as in one or several incorrect forms, so it had possibly been put down several times.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Bilbo to find all possible repetitions of words in his 
parchment. We know that for each word from Bilbo's parchment
its correct form is also there.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of words <i>K</i>, 
1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;5000.
In the next <i>K</i> lines there are the words from Bilbo's 
parchment. Each word is a nonempty line containing no more than 15 symbols, which are lowercase English letters. All the words in the list are different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You must find all the words (together with their incorrect forms) that can be present in the list more than once.
In the first line output their number. Then output these words in the lexicographical order, one in a line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
lomba
pella
palpa
papa
moina
morna
sin</PRE></TD><TD><PRE CLASS="intable">5
moina
morna
palpa
papa
pella</PRE></TD></TR></TABLE>
______________________________________________________
1533||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">None of the hobbits can fight Mordor's army on his own.
Gandalf have chosen <i>N</i> hobbits from Shire to form a platoon that will go on a new campaign against Mordor. 
But some of the hobbits refuse to go because they are afraid 
that other hobbits in the platoon will call them fat. 
More exactly, each hobbit refuses to go on the campaign
if there will be at least one hobbit with smaller weight in the platoon. Fortunately, hobbits don't know their exact weights. They can only compare their weights using a pan balance, and there is only one pan balance in Shire. Some pairs of hobbits used it to determine which of them was heavier. All hobbits know the results of all weighings. Gandalf is sure that there are no two hobbits with the same weight. Help Gandalf to choose from the <i>N</i> hobbits as many hobbits as possible provided that they will agree to go on the campaign together. Remember that hobbits are clever creatures and know that if, for example, Sam is heavier than Pippin and Pippin is heavier than Frodo, then Sam is heavier than Frodo.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> of hobbits which were primarily chosen by Gandalf (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100). 
The hobbits are numbered from 1 to <i>N</i>. In the next <i>N</i> lines there is a matrix <i>N</i>&nbsp;&times;&nbsp;<i>N</i>,
which shows the results of weighings. If hobbits with numbers <i>i</i> and <i>j</i> weighed themselves against each other and it turned out that hobbit <i>i</i> was heavier, then there is 1 at the intersection of row <i>i</i> and column <i>j</i>. All other elements are zeros.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal number of hobbits in the platoon. In the second line, give their numbers.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 1
0 0
</PRE></TD><TD><PRE CLASS="intable">1
2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
0 0 0
0 0 0
0 0 0
</PRE></TD><TD><PRE CLASS="intable">3
1 2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1534||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Gondor Football Championship is in full swing. Unfortunately, Gandalf 
missed the beginning of the championship (he had to visit the Mines of Moria because a sleeping dragon was found there). Upon his return, he learned from the omnipresent hobbits that his favorite team Dinamo had already scored <i>K</i> balls
and missed <i>L</i> balls. Help Gandalf to determine the maximal and minimal numbers of points that Dinamo could earn. In Gondor, if a team wins a match, it gets 3 points, for a draw it gets 1 point, and in the case of defeat the team gets 0 points.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are three integers in one line separated with a space:
<i>K</i>, <i>L</i>, and <i>N</i>. Here <i>K</i> is the number of scored balls, <i>L</i> is the number of missed balls, and <i>N</i> is the number of matches that have been played by Dinamo (0&nbsp;&le;&nbsp;<i>K</i>,&nbsp;<i>L</i>&nbsp;&le;&nbsp;10<sup>9</sup>, 1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal and minimal numbers of points that Dinamo could 
earn. The numbers must be separated with a space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2 2
</PRE></TD><TD><PRE CLASS="intable">4 3</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 1 2
</PRE></TD><TD><PRE CLASS="intable">6 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 0 4
</PRE></TD><TD><PRE CLASS="intable">10 6
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 0 1
</PRE></TD><TD><PRE CLASS="intable">3 3
</PRE></TD></TR></TABLE>
______________________________________________________
1535||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Old Bilbo collects songs and sagas of all races of Middle-earth. That is why he wants to leave Rivendell for a year, travel through <i>N</i> cities of Middle-earth, and return to Rivendell after that. The cities are numbered from 1 to <i>N</i> (Rivendell has number 1). At the entrance to each city there is a warder who asks travellers from which city they have come and requires an entrance fare depending on that. Wise Elvish King Elrond told Bilbo that if a traveller had come to city <i>P</i> from city <i>Q</i> then the warder would require to pay <i>PQ</i> golden coins. Before the start of the travel Bilbo wants to find an order of 
visiting the cities for which the money paid to the warders is minimal and an order for which it is maximal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains the number of cities <i>N</i>, 2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output <i>N</i> integers that show the order of visiting the cities that minimizes the total entrance fare. In the second line output the order of visiting the cities that maximizes the fare. Remember that Bilbo starts his travel from the city with number 1, visits each city exactly once and returns to the city with number 1 in the end. If there are several solutions, you may output any one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">1 4 2 3
1 3 4 2
</PRE></TD></TR></TABLE>
______________________________________________________
1536||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The pipe-weed of Shire is famous for its befuddling effect.
But you don't know probably that hobbits use it to educate their 
offsprings. They roll pipe-weed into sticks and let children play with them.
A child may even study arithmetics if the parents make digits and 
signs of operations using such sticks. The plus sign is obtained 
by putting a stick over another stick crosswise and the sign of equality 
is two parallel sticks. The picture shows how to make 
digits from 0 to 9 using pipe-weed sticks.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little hobbits spend half of their education 
time to learn the addition, so we couldn't obtain information about how to 
make other signs of operations. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sam once told that as a child he had liked to make fun of his father by 
moving sticks in an equality in such a way that it had become 
invalid. And now Sam invented a new entertainment for his own 
children. He arranges sticks on a table so that they make up an
arithmetic equality of the form
<i>X</i>&nbsp;+&nbsp;<i>Y</i>&nbsp;=&nbsp;<i>Z</i>
and asks the children to make it valid by moving no more than <i>K</i> sticks.
Each of the numbers <i>X</i>, <i>Y</i> and <i>Z</i> must have less than 9 digits and must not have any leading zeroes (but it can be equal to zero). It is forbidden to change the number of signs and digits
as well as throw out sticks or add new sticks. Help Sam to determine 
if his problem can be solved.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an expression of the form
<i>a</i><sub>1</sub>&nbsp;+&nbsp;<i>a</i><sub>2</sub>&nbsp;=&nbsp;<i>b</i>
(0&nbsp;&le;&nbsp;<i>a</i><sub>1</sub>,&nbsp;<i>a</i><sub>2</sub>,&nbsp;<i>b</i>&nbsp;&lt;&nbsp;10<sup>8</sup>). The second line contains the integer <i>K</i> (0&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;100).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to make the expression valid by moving no more than
<i>K</i> sticks, then output one of the valid expressions that can be obtained this way.
Otherwise, output &laquo;Impossible&raquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">33+88=127
2
</PRE></TD><TD><PRE CLASS="intable">33+88=121
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3+3=7
1
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1537||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ents are a very old race that appeared in Middle-earth when the Elves did. They were apparently created by Eru Iluvatar at the behest of Yavanna after she learned of Aule's children, the Dwarves, knowing that they would want to fell trees. Ents were envisioned as immortal Shepherds of the Trees, to protect the forests from Orcs, Dwarves and 
other perils. Although the Ents were sentient beings at the time of their awakening, they did not know how to speak until the Elves taught them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Elves elaborated an effective technique of teaching Ents their language. The first Ent that was taught by the Elves learned two words only. They were &laquo;tancave&raquo; (yes) and &laquo;la&raquo; (no). Then this Ent chose one old Ent and one young Ent and taught them these words. After that these two Ents were taught further by the Elves.
Then the process went as follows.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each Ent who had finished his training with the Elves chose one old Ent and one young Ent that had not yet been taught and taught them all the words that he knew; after that these two Ents were trained further by the Elves. Each young Ent learned from the Elves as many new words as he had learned from the Ent who had taught him before. And each old Ent 
could enlarge his vocabulary with only one new word.
After being trained by the Elves, Ents never learned any new words.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The total number of Ents in Middle-earth is greater than you think it is. Try to determine how many of them know exactly <i>K</i> words. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains positive integers <i>K</i> and <i>P</i> separated with a space. 
<i>K</i>&nbsp;&le;&nbsp;10<sup>7</sup>, <i>P</i>&nbsp;&le;&nbsp;10<sup>9</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We understand that the number of Ents who know exactly <i>K</i> words can be too large, therefore we ask you to output this number modulo <i>P</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 10
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1538||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Gondor is a land of hills. King of Gondor decided to 
build towers of guard on some of the hills for the protection of the kingdom. It turned out that the money available from the treasury was enough for constructing five towers only. The towers must be built at the vertices of a convex pentagon so that the wardens of the towers have a better view of the land. Gondor's King has a map of Gondor on which <i>N</i> hills are marked. Help King to choose five hills on which towers should be built.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> of hills on the map of Gondor, 5&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;5000. In the next 
<i>N</i> lines the coordinates of the hills are given: 
(<i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>). These are integers with absolute values not exceeding 10<sup>8</sup>. No three hills belong to the same straight line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &laquo;No&raquo; in the first line if you cannot choose five hills on which towers should be constructed. Otherwise, in the first line output &laquo;Yes&raquo; and in the second line give five different integers in the range from 1 to <i>N</i>, which are the numbers of the chosen hills in the counter-clockwise order. Separate the numbers with a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
1 0
0 1
1 2
2 0
2 2
3 1
</PRE></TD><TD><PRE CLASS="intable">Yes
2 1 4 5 3
</PRE></TD></TR></TABLE>
______________________________________________________
1539||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is a common conception that goblins are scary, filthy, unshaven, and hairy creatures. But it may come as a surprise to you that goblins love accuracy in everything. For example, if a goblin commander wants to know the average number of children of his subordinates, he will be given this number with any accuracy he wants. By the way, it is from goblins that Men took over the use of decimal 
fractions and the method of rounding numbers.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Brave Elvish scouts intercepted a report to the Chief goblin
about the equipment of goblins' army. When Aragorn saw that 
there were 0.667 gold helmets, 1.444 charmed silver swords, and 0.778 mithril armours per one general, he understood at once that goblins had not eight (as it had been believed before), but at least nine generals.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The same report contained data about how many shields, boots, cauldrons, legs, and so on there were in the army per one soldier, per one brigadier, per one captain, etc. Using this information, Aragorn wants to determine the minimal possible numbers of soldiers, brigadiers, and goblins of other ranks in goblins' army.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the accuracy <i>d</i> 
(1&nbsp;&le;&nbsp;<i>d</i>&nbsp;&le;&nbsp;5) of data in the report and the number <i>N</i> of different averages given in the report for a certain group of goblins
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100).
The next <i>N</i> lines contain these averages. All the averages are positive and do not exceed one thousand;
each of them is a fraction rounded exactly to <i>d</i> decimal digits.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible number of goblins in the given group.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
52.29
0.71
170.86
</PRE></TD><TD><PRE CLASS="intable">7
</PRE></TD></TR></TABLE>
______________________________________________________
1540||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Saruman the White and Gandalf the Grey play a game. The winner will get the Master-ring. There are rings joined into <i>K</i> chains lying in front of the players. For each ring, the percentage of gold is known; it is an integer in the range from 1 to 100. Saruman and Gandalf make moves by turns. In each move a player chooses a ring and dematerializes it together with all the rings from the same chain that contain no more gold than the chosen ring. As a result, the chain may break up into several smaller chains,
and the game is continued with the remaining chains. He who 
dematerializes the last ring is a winner. Gandalf moves first. Your task is to determine if Gandalf can win and if he can which ring he must choose for his first move.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>K</i>,
1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;50.
Each of the next <i>K</i> lines describes the corresponding chain in the following format: the first number is the length of the chain, which is an integer from 1 to 100, then there go the percentages of gold in the rings of this chain. The numbers in the line are separated with a space.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &laquo;S&raquo; if Saruman will win the Master-ring.
Otherwise, in the first line output &laquo;G&raquo;
and in the second line output two integers that describe Gandalf's first move: the number of the chain and the number of the ring in it. The chains and rings in them are numbered from 1. If there are several first moves that guarantee Gandalf's win, output the move with the minimal number of the chain, and if there are several such moves, output the move with the minimal number of the ring.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
3 1 2 1
1 1
</PRE></TD><TD><PRE CLASS="intable">G
1 1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
3 2 1 2
1 1
</PRE></TD><TD><PRE CLASS="intable">S
</PRE></TD></TR></TABLE>
______________________________________________________
1541||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Aragorn, Legolas, and Gimli chase a squadron of Uruks sent by Saruman. The friends have already went <i>K</i> leagues (<i>K</i>&nbsp;&lt;&nbsp;20). On the <i>i</i>th segment of length 1 league of their path
(1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<i>K</i>),
their average velocity was <i>V<sub>i</sub></i> leagues per hour; 
<i>V<sub>i</sub></i>&nbsp;&lt;&nbsp;<i>V<sub>j</sub></i> for 
<i>i</i>&nbsp;&gt;&nbsp;<i>j</i>.
Gimli notes that <i>M</i>/<i>N</i> hours have passed since the start of the chase, and it's time to overtake the Uruks at last. Find <i>K</i> if it is known that all <i>V<sub>i</sub></i>&nbsp; are integers.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains coprime integers <i>M</i> and <i>N</i>,
1&nbsp;&le;&nbsp;<i>M</i>,&nbsp;<i>N</i>&nbsp;&le;&nbsp;50; <i>M</i>/<i>N</i>&nbsp;&le;&nbsp;3.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number <i>K</i> and in the second line output the numbers <i>V<sub>i</sub></i> (1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<i>K</i>) separated with a space. Note that nobody in Middle-earth can move faster than 100000 leagues per hour. If there are many solutions, then output any of them. If there is no solution, then output &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
</PRE></TD><TD><PRE CLASS="intable">2
6 2
</PRE></TD></TR></TABLE>
______________________________________________________
1542||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Japanese are infinitely in love with machinery that surrounds them.
They follow closely all technical innovations and try to use the most modern
and clever of them. Den and Sergey have an ingenious plan: they want to
create a text editor that will win the Japanese over. The most important
feature of the editor will be the autocompletion function. If a user has typed
first several letters of a word, then the editor will automatically suggest
the most probable endings.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Den and Sergey have collected a lot of Japanese texts. For each Japanese word
they counted the number of times it was found in the texts. For the first
several letters entered by a user, the editor must show no more than ten words
starting with these letters that are most commonly used. These words will be
arranged in the order of decreasing encounter frequencies.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Sergey and Den to turn over the market of text editors.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of words found in the texts <i>N</i>
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>5</sup>). Each of the following <i>N</i> lines contains a
word <i>w<sub>i</sub></i> and an integer <i>n<sub>i</sub></i> separated with a space, where <i>w<sub>i</sub></i> is a nonempty
sequence of lowercase Latin letters no longer than 15 symbols, and <i>n<sub>i</sub></i>
(1&nbsp;&le;&nbsp;<i>n<sub>i</sub></i>&nbsp;&le;&nbsp;10<sup>6</sup>) is the number of times this word is
encountered in the texts. The (<i>N</i>&nbsp;+&nbsp;2)th line contains a number <i>M</i>
(1&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;15000). In each of the next <i>M</i> lines there is a
word <i>u<sub>i</sub></i> (a nonempty sequence of lowercase Latin letters no longer than 15
symbols), which is the beginning of a word entered by a user.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of the <i>M</i> lines, output the most commonly used Japanese words
starting with <i>u<sub>i</sub></i> in the order of decreasing encounter frequency. If
some words have equal frequencies, sort them lexicographically. If there are
more than ten different words starting with the given sequence,
output the first ten of them. The lists of words
for each <i>u<sub>i</sub></i> must be separated by an empty line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
kare 10
kanojo 20
karetachi 1
korosu 7
sakura 3
3
k
ka
kar
</PRE></TD><TD><PRE CLASS="intable">kanojo
kare
korosu
karetachi

kanojo
kare
karetachi

kare
karetachi
</PRE></TD></TR></TABLE>
______________________________________________________
1543||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dance Dance Revolution, or DDR (known as Dancing Stage in Europe) is
a music video games series produced by Konami. As of 2005, over 90
official versions have been produced, including those for home video
game consoles. The game is played on a dance pad with four arrow
panels: left, down, up, and right. These panels are pressed using the
player's feet, in response to arrows that appear on the screen in
front of the player. The arrows are synchronized to the general
rhythm or beat of a chosen song, and success is dependent on the
player's ability to time and position his or her steps accordingly.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_right">From Wikipedia, the Free Encyclopedia.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">DDR machines are extremely popular in Japan. Gradually they have
won hearts and feet of admirers all over the world and have already
appeared in Ekaterinburg. Especially for severe Ural conditions,
the project Dance Dance Revolution Ural Mix (or, simply, DDRUMix)
based on DDR 5th Mix, which is widespread only in Japan, has been developed.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">DDRUMix operates similarly to other Dance Dance Revolution games:
a player must move his or her feet to the beat of a song
following instructions on the screen. During a game, arrows scroll
upwards from the bottom of the screen. When the scrolling arrows
reach the top of the screen, the player must step on the corresponding
arrow panels on the dance platform. The actions of the player are estimated
by the machine and, after the song, the player is taken to the results screen,
which shows the score and bonus points.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since DDRUMix is a joint project, the Japanese entrusted leading Ural
programmers with developing the software for the machine. Your task will be
to create the scoring system. For that, you have to know the scoring algorithm.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each song in DDRUMix has one of the 3 difficulty levels: Easy, Medium, or Hard
depending on its rhythm (Easy for 1 beat per second, Medium for 2 beats per
second, and Hard for 4 beats per second). A period between two consecutive beats
is called a <i>beat-period</i>, for example, a beat-period for the Medium level is
500 milliseconds. Beat-periods during which the player should step on an
arrow panel are called <i>step-periods</i>, and there may also be empty beat-periods
during which the player isn't expected to make any steps. Each beat-period of
a song is assigned a letter: <b>N</b> if it is empty, and <b>U</b>, <b>D</b>, <b>L</b>, or <b>R</b> if
the player should step on the “Up”, “Down”, “Left”, or “Right” arrow panel during
this beat-period.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The actions of the player during an empty period are not estimated.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The actions of the player during a step-period are estimated as follows:
<ol>
<li>All non-first steps are not estimated.</li>
<li>If the player has not pressed any panel during the period, then he or she gets “BOO”.</li>
<li>If the first step was wrong, then the player gets “MISS”.</li>
<li>If the first step was correct (i.e., the player has pressed the arrow panel
corresponding to this beat-period), then the estimate depends on
the time between the start of the step-period and the first step: “PERFECT” if
it is less than 40% of the length of the period, “GREAT” if it is no less than
40% but less than 70%, and “GOOD” if it is no less than 70%.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The total score for a game is the sum of the <i>Stage Score</i>,
<i>Combo Bonus</i>, and <i>Dance Level Bonus</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>How to calculate the Stage Score:</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let B = 10<sup>6</sup> * Diff, where Diff = 1 for the Easy level, 2
for the Medium level, and 3 for the Hard level.<br>
Denote by N the total number of step-periods and let S = (N*(N+1))/2.<br>
Let n be the number of the current step-period (from 1 to N),
then the number of points for this step-period
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">StepScore = p * n * (B div S),
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where B div S is the integer part of B/S, and
the score multiplier p depends on the estimate of the player's actions in this
step-period: p = 10 for “PERFECT”, p = 5 for “GREAT”, and p = 0 in other cases.<br>
The Stage Score is the sum of Step Scores for all step-periods of the song.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>How to calculate the Combo Bonus:</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>Combo</i> is a series of consecutive step-periods consisting of
“PERFECT”, “GREAT”, or “GOOD” step-periods only (of course, there can be
empty beat-periods inside a combo, but they are not taken into account and
do not increase the length of the combo).<br>
For each step-period in a combo, the player scores q * c combo points, where
the step multiplier q = 55 for “PERFECT”, q = 33 for “GREAT”, and q = 0 in other cases,
and c is the number of the step-period in the current combo.<br>
The Combo Bonus is the sum of combo points for all step-periods in all combos.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>How to calculate the Dance Level Bonus:</b>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The player begins a game with zero Dance Points. Each step-period can add or
subtract Dance Points: a “PERFECT” step-period adds 2 Dance Points, a “GREAT”
step-period adds 1 Dance Point, a “GOOD” step-period does nothing, a “BOO”
step-period subtracts 4 Dance Points, and a “MISS” step-period subtracts 5 Dance
Points.<br>
The player is given one of the following Dance Level Bonuses:<br>
AAA = 10,000,000 (all step-periods are “PERFECT”);<br>
AA = 1,000,000 (all step-periods are “PERFECT” or “GREAT”);<br>
A = 100,000 (the player's Dance Points are at least 80% of maximum Dance
Points);<br>
B = 10,000 (at least 64% of maximum Dance Points);<br>
C = 1,000 (at least 50% of maximum Dance Points);<br>
D = 100 (less than 50% of maximum Dance Points);<br>
E = 0 (the player's Dance Points went below zero during the game).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given information about one game, you must calculate the total score and
output the game statistics.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the duration of the song in the format
<b>m:ss</b> (each song is at least 10 seconds and is shorter than 10 minutes)
and the difficulty level of the song: <b>Easy</b>, <b>Medium</b>, or <b>Hard</b>.
The second line describes beat-periods. There is at least one step-period in
the song. The remaining lines of the input contain the log of the player's
actions. Each line corresponds to one pressing of an arrow panel and has
the following form:<br>
<b>&lt;time&gt; &lt;action&gt;</b><br>
where <b>&lt;time&gt;</b> is the time in milliseconds from the start of the song,
and <b>&lt;action&gt;</b> denotes the panel pressed: <b>U</b>, <b>D</b>, <b>L</b>, or <b>R</b>.
Note that it is impossible for any human to press panels more often that one
time in 50 milliseconds.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the player's statistics. In the first line output the number of
“PERFECT” step-periods, in the second line output the number of “GREAT”
step-periods, and so on. The sixth line is a separator consisting of 20
hyphens (<b>-</b>). In the next lines output the Stage Score, the Combo Bonus, the
Dance Level Bonus, and the total score. For details, see the sample.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0:30 Easy
NNNNNLNNRNUNNUNNNDDDNNUNNNNRNU
5201 L
8475 R
8735 L
10000 U
13200 U
17284 D
18355 D
19124 D
22222 U
27543 R
29923 U
</PRE></TD><TD><PRE CLASS="intable">Perfect: 7
Great: 2
Good: 1
Boo: 0
Miss: 0
--------------------
Stage Score: 7181495
Combo Bonus: 2233
Dance Level Bonus: 100000
Total Score: 7283728
</PRE></TD></TR></TABLE>
______________________________________________________
1544||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tanya (see problems <A href="problem.aspx?space=1&num=1323">Classmates</A>
and <A href="problem.aspx?space=1&num=1362">Classmates 2</A>) has grown up and
works as a computer science teacher at school. New Japanese software has been
installed in her classroom recently. Now each computer can communicate with
other computers in the classroom using a Japanese protocol or a European
protocol and can switch between these protocols. When a computer gets a
command to change protocol, it sends this command automatically to the
computers to which it is connected and then switches itself immediately
to the new protocol. Unfortunately, the protocols are incompatible,
so a command to change protocol can be sent only to computers
that use the same protocol as the computer that sends the command.
Note that each of the computers that has received the command will send it
back to the computer from which it was received, but that computer will
not understand it because it will already use the new protocol.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the start of a lesson Tanya has discovered that after the installation of
the new software each computer was assigned at random one of the two available
protocols. In order to conduct the lesson, Tanya has to switch all the computers
to the same protocol as soon as possible.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tanya can ask one of the pupils to change protocol at his or her computer,
for example, from Japanese to European. Then this computer and all computers
that use the Japanese protocol and are connected to that computer directly
or via computers with the Japanese protocol will switch to the European protocol.
All other computers will be unaffected. In the case when one of the computers is
switched from the European protocol to the Japanese protocol, the result will
be similar. Help Tanya to switch all the computers to the same protocol by
means of the minimal number of requests to her pupils.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of computers in the class <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50)
and the number of connections between them <i>M</i>.
In the next line there are <i>N</i> letters <b>E</b> or <b>J</b>.
If the <i>i</i>-th computer is using the European protocol, then the <i>i</i>-th letter is <b>E</b>,
otherwise it is <b>J</b>. The letters in the line are separated with a space.
Each of the next <i>M</i> lines contains two different integers 
<i>a<sub>i</sub></i> and <i>b<sub>i</sub></i>
(1&nbsp;&le;&nbsp;<i>a<sub>i</sub></i>,&nbsp;<i>b<sub>i</sub></i>&nbsp;&le;&nbsp;<i>N</i>), 
which are the numbers of computers that have
a direct connection. It is known that all computers in the class are connected
to each other directly or via other computers.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output an integer <i>K</i>, which is the minimal number of requests
to switch protocol that Tanya should make to her pupils in order to switch
all the computers to the same protocol. Then output <i>K</i> lines describing
the requests. A request to switch the <i>i</i>-th computer to the European protocol
must be written as “<i>i</i>&nbsp;<b>E</b>”, and the request to switch it to the Japanese
protocol must be written as “<i>i</i>&nbsp;<b>J</b>”. If there are several solutions,
output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 5
E E E J J
1 2
1 3
1 4
4 2
5 2
</PRE></TD><TD><PRE CLASS="intable">1
1 J
</PRE></TD></TR></TABLE>
______________________________________________________
1545||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vova is fond of anime. He is so enthusiastic about this art that he
learned to communicate with his Japanese friends using their native language.
However, for writing email messages Vova has to use Latin letters. He wants to
type hieroglyphs from his keyboard. His team-mate Sergey, in order to help
Vova, created an applet that makes it possible to write hieroglyphs by means of
typing Latin letters on the keyboard. Each hieroglyph is represented by a
sequence of two Latin letters. This correspondence is given in a special
reference book compiled by Sergey. When the applet realizes that a sequence of
Latin letters corresponding to a hieroglyph has been typed, it replaces the
sequence with this hieroglyph.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When Vova started using Sergey's program, he quickly became bored of looking
into the reference book so often. Help Sergey to upgrade the applet in such a
way that for each typed Latin letter it would automatically supply a prompt
helping to continue this letter to a sequence representing a hieroglyph.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of hieroglyphs in Sergey's reference
book <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000). Each of the next <i>N</i> lines contains
a sequence of two lowercase Latin letters corresponding to a hieroglyph.
The next line contains a lowercase Latin letter entered by Vova.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output sequences from the reference book that start with the given letter,
one sequence per line, in an arbitrary order. If there are no such sequences,
then output nothing.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
na
no
ni
ki
ka
ku
k
</PRE></TD><TD><PRE CLASS="intable">ka
ki
ku
</PRE></TD></TR></TABLE>
______________________________________________________
1546||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Japanese like to take photos. But photos taken with a digital
camera are not always sorted correctly on a computer. For example, a file
<code>photo12.jpg</code> is for some reason put between files <code>photo1.jpg</code> and <code>photo2.jpg</code>,
and hence the photos are viewed in the wrong order. Some Japanese use a system
that sorts lines according to different, Japanese, rules, and in this case numbers
are sorted in the natural way.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table border="1" cellpadding="3" cellspacing="0"><tr>
<td>Lexicographic order</td><td>Japanese order</td>
</tr><tr>
<td><code>photo2</code><br><code>photox1</code><br><code>photox10</code><br><code>photox2</code><br></td>
<td><code>photo2</code><br><code>photox1</code><br><code>photox2</code><br><code>photox10</code><br></td>
</tr></table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We will not give the Japanese rules in details here. They are rather simple and
logical. In order to determine these rules, just fill yourself with
the spirit of Japan.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of several lines, which contain lowercase Latin letters and
digits only. The total amount of the input does not exceed 100 KB.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the same lines sorted according to the Japanese rules.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to eliminate all ambiguities with respect to the Japanese rules,
you may use a reference program, which sorts according to these rules but has
some limitations: it sorts no more than 15 lines each of which is no longer than 30
symbols. The program is available <A HREF="/Supplement/BlackBox/BlackBox.aspx">here</A>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">photox10
photox1
photo2
photox2
</PRE></TD><TD><PRE CLASS="intable">photo2
photox1
photox2
photox10
</PRE></TD></TR></TABLE>
______________________________________________________
1547||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After his trip to Japan, Vova has forgotten his password to Timus Online Judge.
Fortunately, students of the Ural State University have access to a powerful
multiprocessor computer MVS-1000, and Vova can be allowed to use <i>M</i> processors
for solving complex mathematical problems. Vova wants to use the supercomputer
for a simple search of passwords. He remembers that his password is no longer
than <i>N</i> symbols and consists of lowercase Latin letters.
First he wants to check all words of length 1 in the lexicographic order
(that is, <b>a</b>, <b>b</b>, …, <b>z</b>), then all words of length 2 in the same order
(that is, <b>aa</b>, <b>ab</b>, …, <b>zz</b>), and so on.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to use the supercomputer with maximal efficiency, the search must be
distributed equally between all processors: the first portion of words is
checked by the first processor, the second portion is checked by the second
processor, and so on. If it is impossible to distribute the work equally, let
the first several processors check one word more than the remaining processors.
Vova wants to know the range of words for each processor.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains the integers <i>N</i> and <i>M</i> 
(1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;50). It is guaranteed that 
the number of words to be checked is no less than the number of processors.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>M</i> lines. Each line must contain the range of words that will be
checked by the corresponding processor. See the required format in the sample.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
</PRE></TD><TD><PRE CLASS="intable">a-fssst
fsssu-mmmmn
mmmmo-tgggg
tgggh-zzzzz
</PRE></TD></TR></TABLE>
______________________________________________________
1548||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In Tokyo, Denis met a Japanese gardener. The gardener told Denis that
on some mornings one of the branches of his sakura straightened out, but in the
evening it was always bent again. The branch straightens no more often than once
a day, but the time when it will straighten or bend back is almost impossible
to predict. The gardener has installed an automated observation system, which
records the state of the branch every second. The statistics are collected and
published at the gardener's web-site in the form of a picture: a white pixel
denotes a bent branch and a black pixel denotes a straight branch. The
observations during one day are shown in a vertical column. The picture obtained
is rather strange: it's a set of vertical segments, with no more than one
segment in each column. Denis said that it was unpractical to draw this picture
pixel-wise. It will be more efficient to draw it by means of rectangles, for
example, in JavaScript. Naturally, the gardener asked Denis to write a program
that would draw the picture showing the statistics. Denis will cope with the
JavaScript program himself, you only have to find the minimal set of rectangles
whose union coincides with the initial picture.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the vertical and horizontal dimensions of the picture: <i>N</i>
and <i>M</i> (1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;50). The following lines contain the
picture itself: in each of <i>N</i> lines there are <i>M</i> symbols.
A black pixel is denoted by <b>1</b> and a white pixel is denoted by <b>0</b>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number of the rectangles.
Then output the coordinates of their opposite corners.
Assume that the <i>OX</i> axis is directed downward and the <i>OY</i> axis
is directed to the right. If there are several solutions with the minimal
number of rectangles, then output any of the solutions.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
010
111
010
</PRE></TD><TD><PRE CLASS="intable">2
1 2 3 2
2 1 2 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 5
00000
11100
11010
10000
</PRE></TD><TD><PRE CLASS="intable">4
2 1 2 3
3 1 3 2
2 1 4 1
3 4 3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1549||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A lecturer of the Ural State University has bought an amusing toy
in Tokyo: a small airplane and a set of plastic plates. The plates can be
put together to form a path for the plane the same way as a puzzle
can be assembled from pieces. There are many ways to put together the
plates, but if one makes it the right way, a map of Japan is
assembled, and the plane will go along a closed path visiting all
major Japan's sights. Try to guess what the lecturer's wife said when she
saw the toy—“Thank you!” or “Was it necessary to spend so much
money on such rubbish?” No, she said: “What a pity that you haven't
bought several sets! We could assemble a much longer path!”
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine that you have many plates with path segments. What is the
longest closed path that you can assemble?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The plates can be assumed to be squares of equal size, and the path
always connects the centers of two sides of a square. It means that
there are two kinds of plates: with straight lines and with turns.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains two integers: the number of plates with
straight segments <i>S</i> and the number of plates with turns <i>T</i>
(0&nbsp;&le;&nbsp;<i>S</i>,&nbsp;<i>T</i>&nbsp;&le;&nbsp;1000, 
<i>S</i>&nbsp;+&nbsp;<i>T</i>&nbsp;&gt;&nbsp;0).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal number of plates <i>N</i> that can be
used to assemble a path for the plane. In the second line output the
path in the following format: a line of length <i>N</i> consisting of
letters <b>F</b>, <b>L</b>, and <b>R</b>. Here <b>F</b> means that the
corresponding segment of the path is straight, <b>L</b> denotes a left
turn, and <b>R</b> denotes a right turn. The total number of letters <b>F</b>
must not exceed <i>S</i>, and the total number of letters <b>L</b> and <b>R</b>
must not exceed <i>T</i>. The path must be closed (the last square must
join the first square) and the squares can't overlap. If it is impossible to
assemble a closed path from the available plates, then output
“Atawazu” (“Impossible”, Jap.).
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 6
</PRE></TD><TD><PRE CLASS="intable">10
FLLFRLLFLF
</PRE></TD></TR><TR><TD><PRE CLASS="intable">49 3
</PRE></TD><TD><PRE CLASS="intable">Atawazu
</PRE></TD></TR></TABLE>
______________________________________________________
1550||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Not long ago, at the world's finals in Tokyo, Bill Poucher asked Dean of the
Department of Mathematics and Mechanics of the Ural State University:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“How are Ural students getting on? Aren't tired of rolling over your pyramid?”
Poucher was referring to problems
<A href="problem.aspx?space=1&num=1308">Dean's Pyramid</A>
and <A href="problem.aspx?space=1&num=1376">Dean's Pyramid 2</A>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“Then won't get tired, the pyramid is very light,” Dean answered.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“It isn't light, it has some liquid inside,” Denis, who was translating, retorted.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“And what is the volume of your pyramid?” asked Poucher.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today you will answer Poucher's question.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that the pyramid is in fact a pen holder with a cylindrical hole going through
it. If the pyramid is put on its base, then the axis of the hole is strictly
vertical.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains numbers <i>H</i> and <i>W</i>, which are the height of the pyramid
and the length of a side of the base (as you remember, Dean's pyramid is a
regular quadrangular pyramid). The second line contains numbers <i>X</i> and <i>Y</i>,
which are the coordinates of the center of the hole (we assume that the axes
are parallel to the sides of the base and the origin is at the center of the
base). The third line contains the radius of the hole <i>R</i>.
It is known that the hole does not intersect the edges of the pyramid
(0 &lt; <i>H</i>, <i>W</i> &lt; 10<sup>4</sup>, 
|<i>X</i>| &lt; <i>W</i>/2, 
|<i>Y</i>| &lt; <i>W</i>/2, 
0 &lt; <i>R</i> &lt; <i>W</i>/2).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the volume of the pyramid accurate to 10<sup>–3</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3.0 3.0
-1.0 -0.7
0.1
</PRE></TD><TD><PRE CLASS="intable">8.96858
</PRE></TD></TR></TABLE>
______________________________________________________
1551||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A sumo tournament is held in Tokyo, in which 2<sup><i>N</i></sup> sportsmen take part.
In each encounter there is a winner, and the loser drops out of the tournament.
Thus, in order to determine the winner of the tournament, it is necessary to
conduct <i>N</i> rounds.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The organizers wish that in as many rounds as possible all encounters
would be held between sumoists from different prefectures of Japan.
For that they can forge the drawing results arbitrarily.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10).
Each of the next 2<sup><i>N</i></sup> lines contains the name of a sumouist and
the prefecture which he presents. The name and prefecture are sequences of
Latin letters of length not exceeding 30.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal number of rounds in which sumoists from the same prefecture
will not fight each other regardless of the outcomes of encounters (that is,
find the maximal possible <i>K</i> such that in at least <i>K</i> rounds all encounters
will be between sumoists from different prefectures). The organizers can control
the initial arrangement of sportsmen but can't control results of encounters.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
Homasho Ishikawa
Tamakasuga Tokyo
Futeno Tochigi
Takekaze Tokyo
Kasugao Yamaguchi
Kotoshogiku Ishikawa
Kotomitsuki Tokyo
Miyabiyama Shizuoka
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1552||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Chairman of "Horns and hoofs" company, Mr. Phunt, decided to start
advertising campaign. First of all, he wants to install an indicator
panel on the main square of the city that will show advertisements of
the company. So he charged the manager of the company, Mr. Balaganov,
to do this job.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After analyzing offers of indicator panels, Balaganov ordered one
at a price of only $19999.99. But when it was delivered, a little
problem was found. The panel was programmable, but the instruction
set of the processor was a subset of brainfuck language commands.
The commands that processor was capable to execute were 
'&gt;', '&lt;', '+', '&minus;' and '.', which are described in the table below.
Moreover, this panel had very little memory for the program,
so not every program typing a particular string will fit into memory.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now Balaganov wants to know the minimal program that will output the
given string. But because he is not very good at programming,
he asks you to solve this problem. The brainfuck program is a
sequence of commands executed sequentially (there are some
exceptions, but panel processor cannot execute such commands).
The brainfuck machine has, besides the program, an array of 30000
byte cells initialized to zeros and a pointer into this array.
The pointer is initialized to point to the leftmost byte of the array.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table width="100%" border="1">
<tr><th width="10%">Command</th>
<th width="90%">Description</th></tr>

<tr>
<td align="center"> &gt; </td>
<td>
Increment the pointer (to point to the next cell to the right). If the pointer 
before increment points to the rightmost byte of the array, then after 
increment it points to the leftmost byte.
</td></tr>

<tr>
<td align="center"> &lt; </td>
<td>
Decrement the pointer (to point to the next cell to the left). If the pointer 
before decrement points to the leftmost byte of the array, then after increment 
it points to the rightmost byte.
</td></tr>

<tr><td align="center"> + </td>
<td>
Increment (increase by one) the byte at the pointer. If the value of the cell 
before increment is 255 then it becomes 0.
</td></tr>

<tr><td align="center"> &minus; </td>
<td> 
Decrement (decrease by one) the byte at the pointer. If the value of the cell 
before decrement is 0 then it becomes 255.
</td></tr>

<tr><td align="center"> . </td>
<td>
Output the value of the byte at the pointer.
</td></tr>
</table>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input has one line containing the string brainfuck program must output.
Every character of the string is a small English letter ('a'&ndash;'z'). The length
of the string is not greater than 50. You may assume that optimal program will
not have to modify more than four memory cells.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one line with minimal brainfuck program. Any characters except 
'&gt;', '&lt;', '+', '&minus;' and '.' are not allowed (quotes for clarity only). 
If there are several solutions any will be acceptable.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">a</PRE></TD><TD><PRE CLASS="intable">+++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++.
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Please note that the sample output is divided into several lines only for
convenience. In the real output whole program must be printed on a single line.
</DIV></DIV>
______________________________________________________
1553||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After landing on Mars surface, scientists found a strange system of caves connected by
tunnels. So they began to research it using remote controlled robots. It was found out that 
there exists exactly one route between every pair of caves. But then scientists faced a
particular problem. Sometimes in the caves faint explosions happen. They cause emission
of radioactive isotopes and increase radiation level in the cave. Unfortunately robots
don't stand radiation well. But for the research purposes they must travel from one cave
to another. So scientists placed sensors in every cave to monitor radiation level in the
caves. And now every time they move robots they want to know the maximal radiation level
the robot will have to face during its relocation. So they asked you to write a program that
will solve their problem. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains one integer <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;100000)&nbsp;&mdash; the 
number of caves. Next <i>N</i>&nbsp;&minus;&nbsp;1 lines describe tunnels. Each of these lines contains a pair of integers 
<i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> (1&nbsp;&le;&nbsp;<i>a<sub>i</sub></i>,&nbsp;<i>b<sub>i</sub></i>&nbsp;&le;&nbsp;<i>N</i>)
specifying the numbers of the caves connected by corresponding tunnel. The next line has an integer <i>Q</i>
(<i>Q</i>&nbsp;&le;&nbsp;100000) representing the number of queries. The <i>Q</i> queries follow on a single line each. Every query has
a form of "<i>C&nbsp;U&nbsp;V</i>", where <i>C</i> is a single character and can be either 'I' or 'G' representing the type of the query (quotes
for clarity only). In the case of an 'I' query radiation level in <i>U</i>-th cave (1&nbsp;&le;&nbsp;<i>U</i>&nbsp;&le;&nbsp;<i>N</i>) is incremented by <i>V</i> (0&nbsp;&le;&nbsp;<i>V</i>&nbsp;&le;&nbsp;10000).
In the case of a 'G' query your program must output the maximal level of radiation on the way between caves with
numbers <i>U</i> and <i>V</i> (1&nbsp;&le;&nbsp;<i>U</i>,&nbsp;<i>V</i>&nbsp;&le;&nbsp;<i>N</i>) after all increases of radiation ('I' queries) specified before current query.
It is assumed that initially radiation level is 0 in all caves, and it never decreases with time (because isotopes'
half-life time is much larger than the time of observations).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For every 'G' query output one line containing the maximal radiation level by itself.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1 2
2 3
2 4
6
I 1 1
G 1 1
G 3 4
I 2 3
G 1 1
G 3 4 
</PRE></TD><TD><PRE CLASS="intable">1
0
1
3
</PRE></TD></TR></TABLE>
______________________________________________________
1554||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In number theory, a multiplicative function is an arithmetic function <i>F</i>(<i>n</i>)
of the positive integer <i>n</i> with property that <i>F</i>(1) = 1 and whenever <i>a</i> and <i>b</i>
are coprime <nobr>(gcd(<i>a</i>, <i>b</i>) = 1),</nobr> then <i>F</i>(<i>ab</i>) = <i>F</i>(<i>a</i>)<i>F</i>(<i>b</i>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The function <i>E</i>(<i>n</i>) defined by <i>E</i>(<i>n</i>) = 1 if <i>n</i> = 1 and = 0 if <i>n</i> > 1, is sometimes
called <i>multiplication unit</i> for Dirichlet convolution or simply the unit function.
If <i>F</i> and <i>G</i> are two multiplicative functions, one defines a new multiplicative
function <i>F</i> <code>*</code> <i>G</i>, the Dirichlet convolution of <i>F</i> and <i>G</i>, by
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where the sum extends over all positive divisors <i>d</i> of <i>n</i>. With this operation,
the set of all multiplicative functions turns into an abelian group; the identity element is <i>E</i>.
<BR>
<div align="right">from <i>Wikipedia</i>, the free encyclopedia</div>

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In this task you have to find the inverse of a multiplicative function.
To cope with overflow problem, we define arithmetic functions as:
<i>F</i>: <strong>N</strong> <nobr>&mdash;&gt;</nobr> <strong>Z</strong><sub>2007</sub>
where <strong>N</strong> is the set of positive integers, and <strong>Z</strong><sub>2007</sub>
is a residue ring (ring of integers 0&ndash;2006, where arithmetic operations + and &times; are performed
modulo 2007). Function <i>G</i> is called the inverse of function <i>F</i> if and only if <i>F</i> <code>*</code> <i>G</i> = <i>G</i> <code>*</code> <i>F</i> = <i>E</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the first <i>N</i> values of function <i>F</i>, you need to find the first <i>N</i> values of 
the inverse function <i>G</i>.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line of the input one number <i>N</i> is written (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10<sup>4</sup>).
In the second line values <i>F</i>(1), <i>F</i>(2), <i>F</i>(3), &hellip;, <i>F</i>(<i>N</i>) are listed. Numbers are
separated by spaces. (Each value is nonnegative and doesn't exceed 2006.)
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line of the output print first <i>N</i> values of inverse function <i>G</i>,
separated by spaces: <i>G</i>(1), <i>G</i>(2), &hellip;, <i>G</i>(<i>N</i>).
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">16
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
</PRE></TD><TD><PRE CLASS="intable">1 2006 2006 0 2006 1 2006 0 0 1 2006 0 2006 1 1 0
</PRE></TD></TR></TABLE>
______________________________________________________
1555||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya and Petya play the following board turn-based game. It is played
in the maze formed by the square board with <i>N</i>&nbsp;&times;&nbsp;<i>N</i> 
cells. Every cell can have a wall on each of four sides, so between two adjacent 
cells two walls can exist. Also each player has bazooka loaded with one rocket.
If player has a rocket she can launch it into five directions (north, east,
south, west and downwards). If rocket is fired downwards, the player who
launched it dies. In the other case rocket flies until it leaves the maze
or hits  the wall or another player. In the case of hitting a wall it is
destroyed and in the case of hitting a player she dies. On each turn corresponding
player can move to adjacent cell (if it is not occupied by another player and
there is no wall between cells), pass move or fire a rocket if she has it. If one player dies the other wins the game. Another way to win is to take a chest with a treasure
placed in the maze and step outside the board. To take a chest player has to
just move to the cell containing it. Player cannot step outside the board if she has no chest.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After playing this game many times with different mazes Vasya noted that
Petya always wins. Now he wishes to find optimal strategy for the game to
figure out wherever he can beat Petya. So he asked you to write a program to
solve this problem. Consider both players use optimal strategy.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains single integer <i>N</i> (2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;6).
Next 3<i>N</i> lines contain 3<i>N</i> characters each. They describe the maze in such
a way that every cell is described by the 3&nbsp;&times;&nbsp;3 square. On the picture
below the cell surrounded by 4 walls is depicted. The question mark is
replaced by either space or digit '1' or '2' or asterisk ('*'; ASCII 42) in the
input. The digit stands for corresponding player, asterisk&nbsp;&mdash; for the chest and
space&nbsp;&mdash; for empty cell. The horizontal wall is <nobr>'-'</nobr> (ASCII 45) and the vertical
wall is '|' (ASCII 124). North is on top.

<table width="15%" border="1">
<tr><td align="center"> </td>
<td align="center">-</td>
<td align="center"> </td></tr>
<tr><td align="center">|</td>
<td align="center">?</td>
<td align="center">|</td></tr>
<tr><td align="center"> </td>
<td align="center">-</td>
<td align="center"> </td></tr>
</table>

It is guaranteed that '1', '2' and '*' will appear in the input only once. The
total number of walls in the input will not exceed 30.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the case of tie output must contain single line containing "Draw". In the
other case the first line of the output must contain the result of the game for
the first player ("Win" or "Lose") and the minimal number of turns necessary to get
corresponding result of the game (the second player tries to maximize this number)
separated by single space. The second line must contain the first move for the first
player. Moves are described by two characters. First of them can be either 'M' which
stands for moving and 'S' which stands for shooting. The second character can be one
of the '2', '4', '8', '6', '5' where '2' is south, '4' is west, '8' is north, '6' is
east. In the case of moving '5' means passing move and in the other case '5' means suicide.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
.-..-..-.
|1....|2|
.........
.........
|*|.....|
.........
.........
|.......|
.-..-..-.
</PRE></TD><TD><PRE CLASS="intable">Win 5
M2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
.-..-.
|2..*|
.-....
.-....
|1||.|
.-..-.
</PRE></TD><TD><PRE CLASS="intable">Lose 1
S5
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Please note that in the sample input all spaces were replaced by full stop symbols
'.' for clarity only.
</DIV></DIV>
______________________________________________________
1556||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The well-known game development company "Clissard Entertainment" has released
new Action-RPG game named "Angel VII". Vasya has bought this game and played
a lot until he entered the "The Secret Cow Level". This secret was covered by
Clissard for a long time, but eventually fans has guessed the mysterious notes
like "Moo" strings appearing in the game chat.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The cow level is infinite in all directions plane with Vasya (a point) and
<i>N</i> cows (circles of equal radius <i>R</i>). Vasya is playing as a bowazon&nbsp;&mdash; amazon with a bow.
His character knows a useful skill called "Multiple shot". It is used in the
following way: Vasya chooses a direction which we will call the main direction.
The bow splits one arrow into <i>K</i> arrows and shoots them. The <i>i</i>-th arrow (counting from zero)
subtend the angle <i>A<sub>i</sub></i> with the main direction equal to:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each arrow flies along a straight line (arrow is also a point). Crossing or touching
a cow is considered as a hit. Thanks to a passive skill "Pierce" an arrow after the hit
has a chance <i>P</i> to pierce target and continue its path and a chance 100%&nbsp;&minus;&nbsp;<i>P</i> 
to get stuck in the cow or just break. However, there is a cap on this skill: each arrow can't hit
more than five targets. After hitting fifth target it disappears for sure. Vasya is
surrounded by cows now and he has to shoot immediately without moving. Help Vasya to
choose the main direction to maximize the expectation value of number of hits!
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The cows don't move and are very tough so every hit to a single cow should be counted.
Cows and Vasya don't intersect or touch each other (cows also can't lie one in the other).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line four numbers are written:
<i>N</i> (integer number of cows), <i>K</i> (integer number of arrows),
<i>P</i> (integer pierce probability in percent), <i>R</i> (real radius of cows)
In the second line two coordinates of Vasya are written (both real).
Then <i>N</i> lines follow: each line consists of two real numbers&nbsp;&mdash; coordinates of the cow 
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50000; 2&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;16; 0&nbsp;&le;&nbsp;<i>P</i>&nbsp;&le;&nbsp;100; 0.4&nbsp;&le;&nbsp;<i>R</i>&nbsp;&le;&nbsp;2.0). Absolute values of all coordinates don't exceed 25000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line must be the normalized direction (two coordinates with at least 10 digits, sum of their squares must be equal to 1.0)
and the expectation value with four digit precision. See output format in the example below.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">3 5 40 1.0
-2.0 1
0 2.0
3 2.0
4 -3
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">The best shot at (0.8944271910;0.4472135955) gives Vasya 5.8000 average hits.
</PRE></TD></TR></TABLE>
______________________________________________________
1557||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In some computer company, Mouse Inc., there is very complicated network structure.
There are a lot of branches in different countries, so the only way to communicate
with each other is the Internet. And it's worth to say that interaction is the key
to the popularity and success of the Mouse Inc.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The CEO of this company is interested now to figure out whether there is a way to
attack and devastate whole structure. Only two hackers are capable to perpetrate
such an outrage&nbsp;&mdash; Vasya and Petya, who can destroy any two channels. 
If after that there are at least two servers without connection between them, then 
they succeed.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In other words, the company is a set of servers, some of them connected with
bidirectional channels. It's guaranteed that all the servers are connected directly or
indirectly. The hackers' goal is to divide network into at least two parts without any
connection between them. Each hacker can destroy exactly one channel. And they can't
destroy the same channel together. You are asked to count the number of ways for hackers to win.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are two integer numbers (<i>N</i>, <i>M</i>) in the first line of input: the number
of servers and channels respectively (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;2000;
 0&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;100000). In the each of the next <i>M</i> lines 
there are exactly two numbers&nbsp;&mdash; the indices of servers connected by channel. Channels 
can connect a server to itself. There can be multiple channels between one pair of servers. 
The servers are numbered from 1 to <i>N</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There must be exactly one integer&nbsp;&mdash; the answer to the question described in the problem.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2
2 3
3 1
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1558||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little Tom likes amusing mathematical tasks a lot. After studying ordinary periodical
numbers he wondered, what if period will be before decimal point. Generally speaking,
such a "number" will have infinite number of digits before decimal point, and it will
not be even a number, but it is possible to apply some operations to them. But after
trying to sum up this numbers for a while, he found this task a bit complicated, even
when numbers have periods of the same length and don't have unperiodical part. So he decided
to write a program that will solve this problem. But he is not very good at programming,
so asked you to help him and write it.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Periodical numbers can be written in form
(<i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>k</sub></i>)<i>b</i><sub>1</sub><i>b</i><sub>2</sub>&hellip;<i>b<sub>m</sub></i> = &hellip;<nobr><i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>k</sub></i> <i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>k</sub></i> <i>a</i><sub>1</sub><i>a</i><sub>2</sub>&hellip;<i>a<sub>k</sub></i> <i>b</i><sub>1</sub><i>b</i><sub>2</sub>&hellip;<i>b<sub>m</sub></i></nobr>, 
where <i>a<sub>i</sub></i> and <i>b<sub>j</sub></i> are digits. The summation process 
starts from the less significant digit and going on like in addition of normal numbers, 
but never finishes. Your task is to sum up two periodical infinite numbers.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input has two lines containing two infinite periodical numbers each.
It is guaranteed that the given numbers will not have unperiodical part
(i.e. will be given in form "(<i>a</i><sub>1</sub><i>a</i><sub>2</sub> &hellip; <i>a<sub>k</sub></i>)") and the given periods of
numbers will be the same length not greater than nine.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The output must have one line containing desired number itself. It must be 
printed in the representation with minimal period length. Among such 
representations the one having the least unperiodical part's length must 
be chosen.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">(234)
(342)
</PRE></TD><TD><PRE CLASS="intable">(576)
</PRE></TD></TR></TABLE>
______________________________________________________
1559||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Several months ago our team thought that it would be quite good if we knew language of
TruCoders, creatures that founded the first civilization on the Earth. (How, you haven't
heard about them yet?!) But because they were much more intellectual beings than humans,
their language (maybe) consisted of very many words and we doubt that we will be able to
remember all of them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that every NSU2 teammate can memorize at most 10<sup>100000</sup> words. For example,
if TruCoders' language consists of 4000 words, one of them can learn 2000 words and every
of two others will learn 1000 words. And so NSU2 will be able to read all of TruCoders' texts.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And now we want you to write a program that can determine whether the team can read all of TruCoders' texts or not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">TruCoders' language is based on English lowercase letters. Overall set of TruCoders' words
can be described as a string expression, giving the set of words. All TruCoders' words are
strings (possibly empty) of letters. So:

<ol>
<li>Letter 'a'..'z' means the set consisting of one word consisting of this letter.</li>

<li>Symbol '0' (zero) means an empty set of words.</li>

<li>(&lt;<i>expression</i>&gt;) means the same set of words as &lt;<i>expression</i>&gt;.</li>

<li>&lt;<i>symbol</i>&gt; is either a lowercase letter or '0' or an expression in parentheses&nbsp;&mdash; (&lt;<i>expression</i>&gt;).</li>

<li>&lt;<i>expression</i>&gt; is &lt;<i>concatenation</i>&gt; or &lt;<i>concatenation</i><sub>1</sub>&gt;|&lt;<i>concatenation</i><sub>2</sub>&gt;|&hellip;</li>|&lt;<i>concatenation<sub>n</sub></i>&gt; and it means union of sets of words from all &lt;<i>concatenation<sub>i</sub></i>&gt;.

<li>&lt;<i>concatenation</i>&gt; is &lt;<i>closure</i>&gt; or &lt;<i>closure</i><sub>1</sub>&gt;&lt;<i>closure</i><sub>2</sub>&gt;&hellip;&lt;<i>closure<sub>n</sub></i>&gt;
and it means set of all words that are concatenations of a word from &lt;<i>closure</i><sub>1</sub>&gt;, a word from &lt;<i>closure</i><sub>2</sub>&gt; and so on.</li>

<li>&lt;<i>closure</i>&gt; is &lt;<i>symbol</i>&gt; or &lt;<i>symbol</i>&gt;* or &lt;<i>closure</i>&gt;* and it means
(if there is '*') &lt;<i>symbol</i>&gt;<sup>0</sup>|&lt;<i>symbol</i>&gt;<sup>1</sup>|&hellip;|&lt;<i>symbol</i>&gt;<sup><i>n</i></sup>|&hellip; (arbitrarily many times)
where &lt;<i>symbol</i>&gt;<sup><i>i</i></sup> means &lt;<i>symbol</i>&gt;&lt;<i>symbol</i>&gt;&hellip;&lt;<i>symbol</i>&gt; (<i>i</i> times) and &lt;<i>symbol</i>&gt;<sup>0</sup>
means the set consisting of one empty word. And if &lt;<i>closure</i>&gt; is &lt;<i>symbol</i>&gt; it means the same set of words as
&lt;<i>symbol</i>&gt; of course.</li>
</ol>

For example, if language is described as "((a|b)(c|d))", it consists of four words:
"ac", "bc", "ad" and "bd".
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the input there is one nonempty string with maximal length of 10000 describing TruCoders' language.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If our team will be able to remember all words of TruCoders' language write 'F'.
In the other case write 'N'.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">((a|b)(c|d))
</PRE></TD><TD><PRE CLASS="intable">F</PRE></TD></TR></TABLE>
______________________________________________________
1560||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In this task, you are to read an array of integer numbers (<i>A</i>[1..<i>N</i>]) and a sequence
of <i>M</i> queries of two types:

<ol>
<li>Increase <i>A</i>[<i>i</i>] by <i>D</i>.</li>

<li>Calculate first <i>K</i>&nbsp;+&nbsp;1 elementary symmetric polynomials of the numbers of
the interval [<i>L</i>..<i>R</i>] (<i>S</i>(0), <i>S</i>(1), <i>S</i>(2), &hellip;, <i>S</i>(<i>K</i>)).</li>
</ol>

Elementary symmetric polynomials of the interval [<i>L</i>..<i>R</i>] are given by:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should compute their values modulo prime&nbsp;<i>P</i>. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line consists of three integer numbers: <i>N</i> (size of the array), <i>M</i> (number of queries) and <i>P</i> (prime number)
(1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;80000; 1&nbsp;&le;&nbsp;<i>M</i>&nbsp;&le;&nbsp;100000; 1000&nbsp;&le;&nbsp;<i>P</i>&nbsp;&le;&nbsp;10<sup>9</sup> (prime)).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The second line contains <i>N</i> integer numbers not exceeding 10<sup>5</sup> by absolute value (the initial values in the array).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next <i>M</i> lines contain queries. Each query can be either increase or calculation query.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">I <i>index  delta</i>&nbsp;&mdash; increase <i>index</i>-th value by <i>delta</i> (1&nbsp;&le;&nbsp;<i>index</i>&nbsp;&le;&nbsp;<i>N</i>; &minus;10<sup>5</sup>&nbsp;&le;&nbsp;<i>delta</i>&nbsp;&le;&nbsp;10<sup>5</sup>).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">C  <i>left  right  K</i>&nbsp;&mdash; compute <i>S</i>(0), &hellip;, <i>S</i>(<i>K</i>) for the interval [<i>left</i>..<i>right</i>] (1&nbsp;&le;&nbsp;<i>left</i>&nbsp;&le;&nbsp;<i>right</i>&nbsp;&le;&nbsp;<i>N</i>;
1&nbsp;&le;&nbsp;<i>K</i>&nbsp;&le;&nbsp;4; <i>K</i>&nbsp;&le;&nbsp;<i>right</i>&nbsp;&minus;&nbsp;<i>left</i>&nbsp;+&nbsp;1).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All fields in each line are separated by spaces.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each calculation query print a line consisting of <i>K</i>&nbsp;+&nbsp;1 numbers&nbsp;&mdash; <i>S</i>(0) <i>S</i>(1) &hellip; <i>S</i>(<i>K</i>). 
These numbers must be nonnegative and less than <i>P</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 6 1237
0 0 1 1 1 1 1
C 3 3 1
C 1 6 4
I 1 -1235
C 1 7 3
I 4 1
C 2 5 4
</PRE></TD><TD><PRE CLASS="intable">1 1
1 4 6 4 1
1 7 20 30
1 4 5 2 0
</PRE></TD></TR></TABLE>
______________________________________________________
1561||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Winnie the Pooh likes honey a lot. But many sorts of honey exist in the world. 
Winnie eats a barrel of honey in an integral number of days. Two barrels of 
honey of the same sort need the same number of days to be eaten. Any event that 
corresponds to the problem is one of the following:

<ol>
<li>New sort of honey appears. It is assigned the smallest non-negative number not assigned yet.
No other information about this sort is provided.</li>

<li>Winnie investigated (empirically maybe&hellip;), that if he has to eat <i>A</i><sub>0</sub> barrels
of honey of 0th sort, <i>A</i><sub>1</sub> of the 1st, &hellip;, <i>A<sub>k</sub></i> of the <i>k</i>-th sort, 
starting at weekday <i>S</i>, the first weekday after eating will be <i>E</i> (0, &hellip;, <i>k</i>&nbsp;&mdash; 
sorts that are already known to exist; <i>A<sub>i</sub></i> are integers, 
0&nbsp;&le;&nbsp;<i>A<sub>i</sub></i>&nbsp;&le;&nbsp;10<sup>6</sup>).</li>

<li>Winnie plans to eat <i>A</i><sub>0</sub> barrels of honey of the 0th sort, <i>A</i><sub>1</sub> of the 1st, 
&hellip; <i>A<sub>k</sub></i> of the <i>k</i>-th sort, starting at weekday <i>S</i>, where 0, &hellip;, <i>k</i> 
are sorts that are already known to exist. You have to find the first day after eating according to the information 
from preceding queries.</li>
</ol>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains <i>N</i>&nbsp;&mdash; number of queries (0&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000).
Events of type 1, 2, 3 are given as follows respectively:

<ul>
<li><b>Add</b></li>

<li><b>Learn</b> <i>A</i><sub>0</sub>&nbsp;<i>A</i><sub>1</sub>&nbsp;<i>A</i><sub>2</sub>&nbsp;&hellip;&nbsp;<i>A<sub>k</sub>&nbsp;S&nbsp;E</i></li>

<li><b>Eat</b> <i>A</i><sub>0</sub>&nbsp;<i>A</i><sub>1</sub>&nbsp;<i>A</i><sub>2</sub>&nbsp;&hellip;&nbsp;<i>A<sub>k</sub>&nbsp;S</i></li>
</ul>

The queries are given one per line.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If you can determine the weekday output it. If there is more than one
possibility output "Don't know" without quotes. If  you determined some contradiction 
before this <b>Eat</b> query, output "Already crazy" without quotes.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9
Add
Add
Learn 5 2 Saturday Monday
Eat 3 3 Tuesday
Add
Learn 0 9 4 Friday Thursday
Eat 3 0 6 Sunday
Learn 3 2 10 Saturday Friday
Eat 3 4 11 Monday</PRE></TD><TD><PRE CLASS="intable">Don't know
Saturday
Already crazy
</PRE></TD></TR></TABLE>
______________________________________________________
1562||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you know, Ravshan's and Jhamshud's team is now building one of the “Ural Guards” towers.
On a Skyscraper Builder's Day (yes, there is such a holiday) their foreman
bought his workers a pineapple as a present. Not an usual pineapple, 
but a genetically modified one.

The builders wanted to divide the pineapple as fairly as they could. The
problem was pondered on for quite a long time, and eventually the men came 
up with a solution. 

They put the pineapple on its side, then used measuring tape and a circular saw
to cut the fruit into <i>n</i> flat discs of equal thickness. Ravshan (yes, that's you)
is recognized as the wisest one among the workers, so they made you give out the
pieces fairly to everyone in the group. You (that is, Ravshan, as you remember) 
aren't born yesterday, so you told fellow builders that you will hand out the pieces
as soon as you determine the weight of each piece. But what an ill luck &mdash; 
there are no scales in workers' toolboxes.

Nevertheless, it's known that GM-pineapples all have the
shape of ellipsoid of revolution. This particular pineapple is <i>a</i> centimeters
wide and <i>b</i> centimeters long (<i>b</i> &gt; <i>a</i>), and 1 cubic centimeter
of a GM-pineapple weighs exactly 1 gram. You understood this knowledge is enough to 
determine the weight of each piece.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single line of input contains 3 decimal numbers: <i>a</i> and <i>b</i> &mdash;
width and length of the pineapple (in centimeters, measured exactly with slide gauge; 
1 &le; <i>a</i> &lt; <i>b</i> &le; 100), followed by <i>n</i> &mdash; number of pieces 
(1 &le; <i>n</i> &le; 100).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the weight of each piece in grams with microgram precision, in
order of cutting.
Place each number on a separate line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">15 20.5 8
</PRE></TD><TD><PRE CLASS="intable">103.773800
273.585474
386.793256
443.397147
443.397147
386.793256
273.585474
103.773800
</PRE></TD></TR></TABLE>
______________________________________________________
1563||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As everybody knows, there are a lot of stores in skyscrapers, it's the 
favourite place of glamorous girls. Blonde Cindy loves only one thing — 
the shopping. Today is one of the best days, she's going shopping to the new 
skyscraper “Prisma”. At first she decided to visit all the stores. But 
actually the “Prisma” is so large that you can find not just one store of 
each brand. Every time when Cindy found the brand, she has visited before, 
she told “Bayan”, and went on shopping.  
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Cindy saw all the stores in the “Prisma”. So how many times did she tell “Bayan”? 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains single integer <i>N</i> representing the number of stores in 
the “Prisma” (1 &le; <i>N</i> &le; 1000). 
In each of next <i>N</i> lines the brand of store is written. The brands are the strings of 
Latin letters and blanks. The length of the string is from 1 to 30. 
There are no brands, that differ only in register.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Print the number of stores, Cindy didn't visit.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12
ESPRIT
Nice Connection
Camelot
Adilisik
Lady and Gentleman City
MEXX
Camelot
Sultanna Frantsuzova
Camaieu
MEXX
Axara
Camelot
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1564||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr likes to climb to the top floor of the skyscraper
“Antey” by stairs. While going upstairs Petr looks at the floor numbers and
counts how many digits “1” he comes across. Unfortunately,
last time Petr failed to climb to the top: he fainted
somewhere in the middle.
At hospital he could only recall the
number of ones he had counted.
Help Petr to find out the number of the floor he reached, or, at least, 
the number of the floor where the last 
of the ones was counted.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of ones Petr has counted (an integer not less than 1 and not greater than 
10<sup>18</sup>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the floor number where the last of ones has been sighted.
If Petr has recalled an incorrect number, then output
“<tt>Petr lies</tt>”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">Petr lies
</PRE></TD></TR></TABLE>
______________________________________________________
1565||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are lots of building companies in Ekaterinburg, and quite a few
new skyscrapers are projected. So there is a kind of a competition between
builders, and sometimes it is held not in a civilized way.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Three companies are competing for becoming a new contractor of “Antey” tower.
All peaceful ways of negotiation were
exhausted long ago. Now the heads of these companies are going to duel.
The only survival will sign a contract to build “Antey”.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Duel rules are prescribed by the investor. First, participants draw lots
to determine the order of shots. Each duelist in his turn makes one shot.
Each time a duelist may aim at any other alive duelist or purposely shoot in the air.
After the shot of the last (by the order) participant,
survivals must shoot again in the same order.
The duel goes on until all except one are dead. All wounds are considered to be mortal,
but sometimes duelists miss (of course, not the times when they shoot in the air).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Thanks to the vast history of Urals skyscraper building we know 
the shot accuracies and strategies of each participant
(naturally, they know all this as well).
The first one (let's call him <b>A</b>) always hits his target and
always aims at the best of the living rivals. Others (let's call them <b>B</b>
and <b>C</b>) can be not such a good shooters, but always act the best way to stay
alive. If there are several ways to act with equal probabilities to
survive, they will prefer shooting at the better rival first.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Investor wants to know the probabilities of survival for each duelist.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single input line contains three real numbers &mdash; shot
accuracies of <b>A</b>, <b>B</b>, and <b>C</b> 
(a shot accuracy is the probability of hitting the target). 
The accuracy of <b>A</b> is equal to 1, and the accuracies of <b>B</b> and
<b>C</b> are different. The draw to determine the order of the shots is considered to be fair, 
that is, the order of the shots is unknown in advance and any order is equally possible.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output in a single line the survival probabilities for the duelists with 
at least 5 decimal digits. Separate the numbers with a space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.0 0.8 0.5
</PRE></TD><TD><PRE CLASS="intable">0.30000 0.17778 0.52222
</PRE></TD></TR></TABLE>
______________________________________________________
1566||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The “Iset” tower owners want to amaze guests invited to the opening ceremony. They 
decided to send out some unusual postcards, so lots of triangular postcards and envelopes
were ordered at a local print shop. These postcards and envelopes vary in size and
shape, and the “Iset” office workers are now working hard to sort all the postcards
into matching envelopes. They tried to do this in a very simple way: a worker took one
postcard and one envelope from the heap, and then checked if they matched each other. 
If he couldn't put the card into the envelope, he just picked another pair, 
checked again, and so on.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Eventually the head of the office realized they weren't going to send out all the cards
in time if they kept sorting the cards manually. He handed out scanners, so his employees
could scan cards and envelopes and use some special software to automatically detect whether
the pair matched and how the card should have been placed into the envelope.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to help these poor office workers. Write a program that, given the sizes of
the card and the envelope (i.e., lengths of two triangles' sides), decides whether the card
can be fitted into the envelope.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains 3 integers &mdash; lengths of the envelope's edges,
in millimeters. The second line contains another 3 integers for the postcard's edges; 
format is the same. All the edge's lengths never exceed 1 meter. 
After the postcard is placed inside, the envelope is sealed at 2 edges.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “<code>YES</code>” if the card fits into the envelope. Output “<code>NO</code>” otherwise.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">30 40 50
50 36 27
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">200 200 200
210 110 110
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1567||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr, a student, decided to start his own business. He offers SMS advertising
services to the business owners renting offices in the newly built “Prisma” tower.
If an office owner wants to use the service, he devises a slogan and Petr
texts it from his personal phone to thousands of Ekaterinburg citizens (he
already bought the pirated list of mobile phone numbers).
The cost of each slogan sent is a sum of costs of each character typed. Cost of 
an individual character is determined according to a very simple scheme: 
each tap at the phone's keyboard costs 1 rouble.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr's phone doesn't support sophisticated text input technologies, such as T9,
and only the english alphabet can be used.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><style>
<!--
TABLE.PetrMobile
{
 border-collapse: collapse;
 border: 1px solid Black;
}
TABLE.PetrMobile TR TD
{
 border: 1px solid Black;
 padding: 4px;
 text-align: center;
 font-family: monospace;
}
-->
</style>

<table class="PetrMobile" align="center">
<tr>
<td>1<br>abc</td>
<td>2<br>def</td>
<td>3<br>ghi</td>
</tr>
<tr>
<td>4<br>jkl</td>
<td>5<br>mno</td>
<td>6<br>pqr</td>
</tr>
<tr>
<td>7<br>stu</td>
<td>8<br>vwx</td>
<td>9<br>yz</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>0<br>.,!</td>
<td>#<br>_</td>
</tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The “<code>_</code>” character in the table denotes whitespace.
If you want to, for example, type “<code>a</code>”, you need to press the “<code>1</code>” button once.
To type “<code>k</code>”, you press “<code>4</code>” twice. To type “<code>!</code>”, press “<code>0</code>” three times.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr has to apply this simple algorithm to calculate the cost of every slogan he sends.
However, Petr is a very busy man (and, as a matter of fact, doesn't bother to learn arithmetics, 
because he's a Philosophy student). You just have to help Petr, you are his best friend 
after all.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single line of input contains the slogan. Slogan consists of words,
spaces, commas, full stops and exclamation marks. All the words consist
of lowercase english letters. Slogan can't be longer than 1000 characters.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single number representing the cost of the given slogan, according to Petr's pricing.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">pokupaite gvozdi tolko v kompanii gvozdederov i tovarischi!
</PRE></TD><TD><PRE CLASS="intable">114
</PRE></TD></TR></TABLE>
______________________________________________________
1568||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are several towers being built simultaneously in the city of Ekaterinburg.
A lot of high quality hardware and materials is needed for the construction, 
and most materials are being shipped to the city via railroad.
Railroad delivery isn't always as fast as contractors would like it to be.
Trains spend too much time at the intermediate stations,
being sorted and directed to different regions of the country.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you know, freight train cars are sorted in the following way:
the train is driven to a two-way switch, where each individual car 
can follow either left or right track. After that, the cars are
joined back together.
For example, if the order of the cars in the train is “1 2 3 4 5 6 7”,
they can be split in two parts: “1 3 5” (left track) and “2 4 6 7” (right track),
and then joined: “1 3 5 2 4 6 7”.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help railroad workers speed up the sorting process. Write
a program to rearrange cars according to the given order 
using the minimum number of join operations.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of input contains a single integer <i>N</i> &mdash; the number of cars
in the train (1 &le; <i>N</i> &le; 10000).
The second line contains <i>N</i> numbers &mdash; the initial ordering of the cars.
Each car has an unique number from 1 to <i>N</i>. The cars have to be reordered
so their numbers are increasing, starting from 1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of ouput shall contain the integer <i>K</i> &mdash; minimum number of
times the join must be done.
The following <i>K</i> + 1 lines shall contain <i>N</i> numbers each. Output the initial
ordering of the cars on the first of these lines; each following line 
shall contain the ordering achieved with the next join operation.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
5 1 3 2 4
</PRE></TD><TD><PRE CLASS="intable">2
5 1 3 2 4
1 2 5 3 4
1 2 3 4 5
</PRE></TD></TR><TR><TD><PRE CLASS="intable">6
6 5 2 4 1 3
</PRE></TD><TD><PRE CLASS="intable">3
6 5 2 4 1 3
6 4 1 5 2 3
6 1 2 3 4 5
1 2 3 4 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1569||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There’s not much time left until the “Iset” tower opens for business,
but a computer network is not yet installed in the building.
The network is expected to be very robust and should 
have lots of branches. There are <i>N</i> nodes in the tower that should be
connected with this network. These nodes were planned to be connected
with <i>M</i> direct links, with no more than one direct link between
each pair of nodes.
To save some time, it was decided that only the links that are required
to make a connected network will be installed; all the remaining wires 
are going to be laid after the opening ceremony.
In order to be efficient network should have satisfy one more requirement: 
the maximal distance between it’s nodes must be as small as posible.
Distance between
a pair of nodes A and B is defined as the number of intermediate nodes on
the path from the node A to the node B.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>N</i> (2 &le; <i>N</i> &le; 100) and 
<i>M</i> (1 &le; <i>M</i> &le; 10000).
The following <i>M</i> lines describe the initial planned network layout. Each
of these lines contains a pair of integers &mdash; numbers of nodes that are 
connected with a direct link. Nodes are numbered from 1 to <i>N</i>.
This network layout is guaranteed to be connected, and there are no links
connecting a node with itself.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The new network layout (in the same format).
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
1 2
2 3
2 4
3 4
</PRE></TD><TD><PRE CLASS="intable">1 2
2 3
2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1570||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr and his mates decided to visit fashionable restaurant at the top floor of “Antey” tower.
The picture of the city you can see beyond it windows is really astonishing but all good things in a world cost a lot.
Including yummy food no doubt. Frankly speaking Petr is just a student and do not have a lot of money and his friends ain’t rich too,
so they settled to order less expensive dishes possible, but they do not want to leave restaurant in hunger also.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Menu was very handy &mdash; there was not only price for each dish but “filling value” too. This value tells how much people can satisfy their hunger
with one portion of the dish. For example stuffed turkey could fulfill four men and beetroot salad will leave you in a half-hunger.
As you know Petr was really smart and he instantly noticed that if he will order some substantial but quite expensive dishes he can
spend less money compared with ordering a lot of cheap but light of those. 
Petr at once calculated what exactly he could order to satisfy his and his friends’ hunger fully and spend less money possible.
There was more then one way to do so and Petr was not so foolish to order 10 portions of the same kind. Therefore he chose order with maximal
number of various dishes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After coming home Petr decided to help other people in a same situation (he was not only smart but kind also)
and to write a program for PDA to perform rapid “best order” calculation. Of course they have to get menu first, but Internet helps a lot nowadays.
Yet Petr became drowsy after solid meal and eventually felt asleep. So it’s up to you to finish his work.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line of an input contains two numbers <i>N</i> and <i>M</i>. First stands for the number of dishes in a menu and second for
the total number of eaters (1 &le; <i>N</i> &le; 100; 1 &le; <i>M</i> &le; 20).
Next <i>N</i> lines contain descriptions for dishes &mdash; one description per line.
Description is made of dish name, dish price and “filling value”. These parts are separated with spaces. Dish name is a sequence of small
Latin letters with a length between 1 and 30. Price is a integer number between 1 and 10000. “Filling value” is a number between 0.1 and 10.0
with no more then 3 decimal places.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to output optimal order description. First line should contain total cost of the order.
Next lines should contain ordered dishes &mdash; one dish per line.
Each line should contain the dish name and the number of portions separated with space.
You must not output different lines with same dish name.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 6
pizza 320 2.4
turkey 1050 3.5
lasagna 150 0.9
pasta 75 0.45
</PRE></TD><TD><PRE CLASS="intable">865
pizza 2
lasagna 1
pasta 1
</PRE></TD></TR></TABLE>
______________________________________________________
1571||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To construct “Ural Guards” towers cheaply and rapidly building crews from many countries were invited.
Of course developers were aware of the well-known tower of Babel fate and decided to hire some professional interpreters so
building crews could communicate one another. Developers also settled if two crews are communicating then other crews
must not understand a word because in that case other crew will listen instead of work and towers will not be constructed by the time.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each crew speaks only one native language, but fortunately for any two languages it is possible to hire an interpreter who speaks them both.
Unfortunately there is no interpreter who knows more then two languages, and so developers have to hire some of them. Your task is to determine
the least number of interpreters to hire to allow any crew to communicate with any other.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains total number of building crews <i>N</i> (1 &le; <i>N</i> &le; 100). 
Following <i>N</i> lines contain languages each crew speaks &mdash; one language per line.
Language is a non-empty sequence of small Latin letters and this sequence length does not exceed 10.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you should print minimal number of interpreters. 
Following lines should contain languages they know in a form of “<b>language1-language2</b>”.
If you cannot find a way to hire interpreters and to guarantee that no crews will waste time listening 
other crews communication then print the only word “<b>Impossible</b>”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
russian
french
german
</PRE></TD><TD><PRE CLASS="intable">3
russian-english
english-german
english-french
</PRE></TD></TR></TABLE>
______________________________________________________
1572||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">About a month ago two teams of the Ural State University returned from the Yekaterinozavodsk training 
camp. This northern city impressed them so much that they decided to return there by any means. 
A well-known city legend says that the more covers of sewerage manholes you throw into the famous Great Well, the earlier you return to Yekaterinozavodsk. The programmers have already collected a lot of manhole covers from city streets and now they want to know how many of them can be thrown into the Well.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that the Well's aperture and all manhole covers in Yekaterinozavodsk are circles,
squares, or equilateral triangles. The covers can be regarded as absolutely flat, and you may
rotate and move them in space in any way.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us denote a circle by 1, a square by 2, and a triangle by 3. This number will be the type of the figure.
The size of a circle is its radius, the size of a square or triangle is the length of its side (the sides have equal lengths).
The first line contains two numbers: the type and the size of the Great Well's aperture. The second line contains an integer 
<i>N</i>, which is the number of manhole covers collected by the programmers, <nobr>1 &le; <i>N</i> &le; 100</nobr>. These covers are described in the next <i>N</i> lines: each of them contains the type and the size of a cover; the numbers are separated with a  space. Sizes of all figures 
are integers in the range from 1 to 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of covers that are small enough to be thrown into the Well.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 10
3
3 20
1 5
2 11
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 5
2
2 10
1 6
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1573||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lich Sandro recently became an expert in alchemy and is very glad because of it.
Sure enough, because this skill allows to mix simple potions to obtain more complex ones.
Any character (even not skilled in alchemy) is able to make 3 simple potions: red, blue, and yellow. 
A single reagent is sufficient to make any of them, but the same reagent cannot be used to make potions 
of different colors. All reagents can be divided into 3 groups according to this rule: 
yellow (sulphur, unicorn's horn, a poppy boll&hellip;), blue (a piece of a meteor, a fang
of a dragon turtle&hellip;) and red (dragon's eye, ruby, gog's blood&hellip;).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every character would like to prepare other potions. In order to achieve that it is
necessary to learn alchemy and to upgrade this skill. A novice alchemist
is able to mix the basic potions: yellow and red, red and blue, or blue and yellow 
to obtain an orange, violet or green potion, respectively. These potions are 
called composite. An expert alchemist is also able to mix basic and 
composite potions without messing up their layers (this may lead to an explosion!).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sandro has 3 bags of reagents, and each bag contains reagents of only one color.
There are <i>B</i> blue, <i>R</i> red, and <i>Y</i> yellow reagents. Sandro's 
collection of reagents is extraordinary, since all the reagents are different! 
<i>K</i> reagents of different colors are required to make a potion that makes it posssible to breathe under water. The recipe of this potion is known, and
now Sandro would like to know the number of possible ways to prepare it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>B</i>, <i>R</i>, and <i>Y</i>;
<nobr>1 &le; <i>B</i>, <i>R</i>, <i>Y</i> &le; 100</nobr>. Then the recipe
of the potion is given: the second line contains a positive integer <i>K</i>; the
next <i>K</i> lines contain the colors of the required reagents (&ldquo;Blue&rdquo;, &ldquo;Red&rdquo;, or &ldquo;Yellow&rdquo;).
Each word occurs at most once.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of possible ways to choose a set of reagents to make 
the potion (sets differing in one or more reagent are considered different; the
order of reagents in a set doesn't matter).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3 5
3
Red
Yellow
Blue
</PRE></TD><TD><PRE CLASS="intable">30
</PRE></TD></TR></TABLE>
______________________________________________________
1574||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time three mathematicians met&hellip;
<ul>
<li>The first of them wrote a sequence of brackets on a chalkboard.</li>
<li>The second one wondered if there was a cyclic shift turning that sequence into a regular one.</li>
<li>After thinking for a while, the third mathematician told the number of such shifts.</li>
</ul>
You are given the sequence of brackets written by the first mathematician and you are to find the number
told by the third mathematician. A regular sequence of brackets is defined as follows.
<ol>
<li>An empty string is a regular sequence of brackets.</li>
<li>If a string <i>a</i> is a regular sequence of brackets, then the string (<i>a</i>) is also a regular sequence of brackets.
<li>If strings <i>a</i> and <i>b</i> are regular sequences of brackets, then the string <i>ab</i> is also a regular sequence of brackets.
<li>There are no other regular sequences of brackets.
</ol>
A string <i>a</i> is a cyclic shift of a string <i>b</i> if <i>a</i> and <i>b</i> have
the same lengths and <i>a</i> consists of some (possibly empty) suffix from <i>b</i>
followed by a prefix from <i>b</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains the sequence of brackets written by the first mathematician.
The sequence is non-empty and its length doesn't exceed 10<sup>5</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of cyclic shifts turning the given sequence into a regular one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">)(()
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">)()(
</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR><TR><TD><PRE CLASS="intable">()
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR></TABLE>
______________________________________________________
1575||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you all know, Yekaterinburg Subway has only one line. All stations of our 
subway are genuine architectural masterpieces. Yekaterinburg's citizens
are not very happy, though, as they have to travel from home to work and then back 
home every day. Traffic jams are ubiquitous in Yekaterinburg, hence every citizen dreams 
of new subway stations near his house and work.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Yekaterinburg's municipal government decided to take into account the wishes of the citizens. 
The Strategic Plan Of Subway Development (up to the year 2523) was approved 
at a conference organized by Yekaterinburg's Mayor. By the eight-hundredth 
anniversary of Yekaterinburg the Subway will consist of 70 stations!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Somehow you managed to get a map 
of Yekaterinburg Subway as of 2523 (see the picture).
The map contains 8 lines formed by 70 stations; many stations are transit ones.
From 2 to 4 different underground lines can intersect at transit stations.
You are to find the amount of time required to get from one given station to another.
Trains of the future will travel between any two adjacent stations in 1 minute.
Moreover, line-to-line transfer at any transit station is considered to take
no time (after all, you don't have to examine stations carefully as opposed to
tourists who will arrive in Yekaterinburg only to admire the Subway).
The time of waiting for a train at a station shouldn't be taken into account.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains an integer <i>N</i>, which is 
the number of tests <nobr>(1 &le; <i>N</i> &le; 4900)</nobr>.
The next <i>N</i> lines contain tests. Each test consists of two station names
separated by exactly one space. The names contain only uppercase and lowercase
latin letters and underscores. Every station name, except for &ldquo;Prospekt_Kosmonavtov&rdquo; 
and &ldquo;Kamennye_palatki&rdquo;, is given exactly as on the map.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test you are to output the minimal number of minutes required to
travel from the first station to the second station. The answer for each test should be written in a separate line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
Prospekt_Kosmonavtov Geologicheskaya
Shevchenko Vilonovskaya
Koltsovo Zelyony_ostrov
Teatralnaya Kamennye_palatki
China_town Italyanskaya
1905_year_square 1905_year_square
</PRE></TD><TD><PRE CLASS="intable">6
3
11
3
9
0
</PRE></TD></TR></TABLE>
______________________________________________________
1576||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you know, there are three telephone 
tariffs in Yekaterinburg now: basic, combined
and unlimited. Every subscriber is free to choose the tariff that is most
suitable for him. Talkative people would select the unlimited tariff as they
would have to pay only a monthly fee of <i>N</i><sub>3</sub> rubles. The basic
tariff might be the best option for people who are not that talkative;
they would pay a very low monthly fee of <i>N</i><sub>1</sub> rubles and
the additional price of <i>C</i><sub>1</sub> rubles for each minute of 
conversation. The combined tariff (as the name suggests) combines the
advantages of the above tariffs. It works like this:
you pay a monthly fee of <i>N</i><sub>2</sub> rubles and you are allowed
to talk up to <i>T</i> minutes per month for free. If you exceed this 
limit, you will be charged <i>C</i><sub>2</sub> rubles for each
extra minute.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The phone company has started to offer a new service recently. 
A subscriber can
provide the head office with a list of phone calls he made during a month, 
and, for a small fee, the most appropriate tariff will be chosen for him.
You are to automate this process by writing a program processing the
list of calls and calculating the amount of money the subscriber would pay if he used
the basic, combined or unlimited tariff. Note that the calls that last 6 seconds or less 
are to be ignored. The number of minutes in a call is rounded up (i.e., a call with duration 
of 8:10 is charged the same as a call with duration of 9:00).</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers separated by a space: 
<i>N</i><sub>1</sub>, <i>C</i><sub>1</sub>,
defining the basic tariff. The second line contains the data for the combined tariff:
<i>N</i><sub>2</sub>, <i>T</i>, <i>C</i><sub>2</sub>, 
and the third line contains the data 
defining the unlimited tariff: the integer <i>N</i><sub>3</sub>. The numbers <nobr><i>N</i><sub>1</sub>, <i>N</i><sub>2</sub>, 
<i>N</i><sub>3</sub>, <i>T</i>, <i>C</i><sub>1</sub>, and
<i>C</i><sub>2</sub></nobr> are integers
in the range from 1 to 1000. The fourth line contains <i>K</i>, which is the 
number of phone calls made <nobr>(1 &le; <i>K</i> &le; 1000)</nobr>.
Each of the next <i>K</i> lines contains the duration of a single phone call in the
<i>mm</i>:<i>ss</i> format <nobr>(0 &le; <i>mm</i>, 
<i>ss</i> &le; 59)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output 3 lines: the
amount of money the subscriber would pay if he used the basic, 
combined and unlimited tariffs. The output format is shown in the sample output.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">135 1
220 10 1
300
5
00:05
00:10
09:59
07:00
01:01
</PRE></TD><TD><PRE CLASS="intable">Basic:     155
Combined:  230
Unlimited: 300
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 2
100 1 1
1000
1
03:00
</PRE></TD><TD><PRE CLASS="intable">Basic:     16
Combined:  102
Unlimited: 1000
</PRE></TD></TR></TABLE>
______________________________________________________
1577||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya started to use the Internet not so long ago, so he has
only two e-mail accounts at two different servers. For each of them he has a password, which is a
non-empty string consisting of only lowercase latin letters. Both mail servers accept a string as a password if and only if the real password is its subsequence.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya has a hard time memorizing both passwords, so he would like to come up
with a single universal password, which both servers would accept. Vasya can't
remember too long passwords, hence he is interested in a universal password
of a minimal length. You are to help Vasya to find the number of such passwords.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of 2 lines, each of them containing the real password for one of the servers. 
The length of each password doesn't exceed 2000 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of universal passwords of minimal length modulo 10<sup>9</sup>&nbsp;+&nbsp;7.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">b
ab
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">abcab
cba
</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the second sample, the passwords of minimal length are the following: <b>abcaba, abcbab, acbcab, cabcab</b>.</DIV></DIV>
______________________________________________________
1578||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The very last mammoth runs away from a group of primeval hunters.
The hunters are fierce, hungry and are armed with bludgeons and stone axes.
In order to escape from his pursuers, the mammoth tries to foul the trail.
Its path is a polyline (not necessarily simple). Besides, all the pairs
of adjacent segments of the polyline form acute angles (an angle of 0 degrees
is also considered acute).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the mammoth vanished, it turned out that it had made exactly <i>N</i> turns 
while running away. The points where the mammoth turned, as well as the points 
where the pursuit started and where the pursuit ended, are known. 
You are to determine one if the possible paths of the mammoth.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a positive integer <i>N</i> not exceeding 2000.
The next <i>N</i>&nbsp;+&nbsp;2 lines contain the coordinates of polyline
vertices (this polyline is the mammoth's path). All the coordinates are integers
between &minus;2000 and 2000. No two vertices of the polyline coincide.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output NO if no polyline with vertices in the given points can be the mammoth's path.
Otherwise, output YES in the first line, and the mammoth's path in the second line.
The path is to be output as a sequence of point numbers (the points are numbered
from 1 to <i>N</i>&nbsp;+&nbsp;2 in the same order they were given in the input).
If there are many solutions, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0
1 1
1 2
2 0
</PRE></TD><TD><PRE CLASS="intable">YES
1 3 4 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0 0
0 1
0 2
0 3
</PRE></TD><TD><PRE CLASS="intable">YES
1 3 2 4
</PRE></TD></TR></TABLE>
______________________________________________________
1579||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The famous fraud Vovan decided to steal some fur coats for the winter. He went to the nearest winter clothes shop and saw that there were <i>N</i> mink coats on sale. Vovan liked all of them so much that he decided to steal them all. To avoid any suspicion, he decided to put on the fur coats and then carry them out of the shop. Furthermore, Vovan noticed he could carry out more than one fur coat 
at a time by putting on several coats one over another. A larger coat can be put on over a smaller one if the size of the larger coat exceeds the size of the smaller coat by more than <i>R</i>.
Usually Vovan wears a T-shirt, so he can put on a fur coat of any size as the first one.
Vovan wants to carry out all the coats in a minimal number of trips to the shop. 
You are to help Vovan with his evil plan.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>N</i> and <i>R</i> separated by a space
<nobr>(1 &le; <i>N</i> &le; 10<sup>5</sup>; 0 &le; <i>R</i> &le; 10<sup>9</sup>)</nobr>.
The second line contains <i>N</i> non-negative integers representing the sizes of the coats in the shop. 
The sizes are given in non-decreasing order. The numbers are separated by spaces and don't exceed 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal number of trips to the shop <i>K</i>. 
Each of the next <i>K</i> lines should contain the description of a trip:
the number of coats Vovan should carry out during this trip, followed by
the numbers of these coats in increasing order. The coats are numbered from 
1 to <i>N</i> in the same order they are given in the input. Separate numbers by a single space.
If there are many solutions, you may output any one of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 3
1 2 3 5 7 10 12 13
</PRE></TD><TD><PRE CLASS="intable">3
2 3 6
3 1 4 7
3 2 5 8
</PRE></TD></TR></TABLE>
______________________________________________________
1580||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> students of one university took part 
in the Yekaterinozavodsk training camp.
When they returned home, it turned out that they had spent much of their own money for the
tickets to Yekaterinozavosk and back, for their lodgings, food and registration fees.
The students came to the dean of their department and asked him to compensate the costs of the trip.
The dean listened to them carefully and gave some amounts of money (possibly different) to all of them.
The next day two of these students came to the dean and told that 
the two of them had been given <i>A</i><sub>1</sub> rubles
less than they had spent jointly. On the next day, the situation repeated itself:
a pair of students claimed that the dean owed them <i>A</i><sub>2</sub> rubles. 
The situation repeated itself for a few days more. Finally, on the 
<i>M</i>-th day a pair of students told the dean that 
they two had spent together <i>A<sub>M</sub></i> rubles more than
the dean had paid them. After that, the students lost any hope and stopped visiting the dean.
Then the dean took the notes with the students' demands and decided to calculate 
how much he owed each of them.
But it turned out to be not so easy!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i> and <i>M</i> separated by a space <nobr>(2 &le; <i>N</i> &le; 1000; 1 &le; <i>M</i> &le; 100000)</nobr>.
The following <i>M</i> lines contain the demands of pairs of students who visited the dean. The (<i>i</i>&nbsp;+&nbsp;1)-st line 
contains three integers separated by spaces: the numbers of two students who visited the dean on the <i>i</i>-th day and 
the amount of money <i>A</i><sub>i</sub> they asked for. The students are numbered from 1 to <i>N</i>.
The number <i>A<sub>i</sub></i> is an integer in range from &minus;10000 to 10000. A negative number neans that the students got from 
the dean more that they spent. It is known that no pair of students visited the dean more than once.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the dean can determine uniquely how much money he owes each of the students, write these sums with two digits
after the decimal point: in the <i>i</i>-th line output the amount he owes the <i>i</i>-th student. The numbers can 
be negative; this means that the student owes the dean (sometimes it happens!). If it is impossible to 
find these amounts, output &ldquo;IMPOSSIBLE&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2 2
2 3 4
3 1 6
</PRE></TD><TD><PRE CLASS="intable">2.00
0.00
4.00
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 3
1 2 2
1 3 4
1 4 6
</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE
</PRE></TD></TR></TABLE>
______________________________________________________
1581||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya and Petya are going to participate in a team olympiad in informatics.
They have listened to the stories told by the gurus of olympiad programming 
and now they are aware that teamwork is of crucial importance for outstanding 
performance. Therefore they decided to develop their teamwork skills.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya wrote a sequence of integers on a sheet of paper and started
to read it to Petya number by number. For the sake of brevity he tells it in the following way: 
first he tells the quantity of consecutive identical numbers and then tells this 
number. For instance, the sequence &ldquo;1 1 2 3 3 3 10 10&rdquo; will be told by Vasya as 
&ldquo;<i>two ones, one two, three threes, two tens</i>&rdquo;. Petya also wants to be concise, 
so he writes down the numbers pronounced by Vasya instead of the whole words. For the 
example above, Petya would write: &ldquo;2 1 1 2 3 3 2 10&rdquo;.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After some teamwork practice, Vasya and Petya also decided to develop programming 
skills and to write a computer program to convert Vasya's sequence to Petya's one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>, which is the quantity
of numbers written down by Vasya <nobr>(1 &le; <i>N</i> &le; 1000)</nobr>.
The second line contains these numbers separated by spaces.
All the numbers are positive integers not greater than 10.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the numbers Petya would write down separated by space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
1 1 2 3 3 3 10 10
</PRE></TD><TD><PRE CLASS="intable">2 1 1 2 3 3 2 10
</PRE></TD></TR></TABLE>
______________________________________________________
1582||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Sergey visited the homeland of football this summer. On his first
day in England, he discovered that there were more bookmakers near the Wembley
Stadium than football fans. The bookmakers were taking bets at a wide range of
payout odds. As a programmer, Sergey found it easier to operate with betting
coefficients instead of odds, and he easily converted odds into these coefficients:
if the odds for some outcome of a match are <nobr><i>m</i> : <i>n</i></nobr>, then the betting
coefficient <i>k</i> is <nobr>(<i>m</i> + <i>n</i>) / <i>n</i></nobr>. This means that if Sergey placed a bet of <i>x</i>
pounds and guessed the outcome correctly, he is paid <nobr><i>k · x</i></nobr> pounds by the
bookmaker (and gets nothing if he was wrong). 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having walked around the stadium,
Sergey found out that the best coefficients for the three possible outcomes
were 3.5, 3.5, and 3.5 (of course, they were offered by different bookmakers).
Sergey placed a bet of 330 pounds on each outcome and was not a bit upset about
losing two of the three bets because the third bet brought him 1155 pounds,
which was more than he had paid to the three bookmakers altogether.
In order to cover his travel expenses, Sergey decided to place bets every day
distributing them in such a way that he would win as much as possible in the
worst case. Write a program that will help Sergey to place bets optimally.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the best coefficients <i>k</i><sub>1</sub>, 
<i>k</i><sub>2</sub>, and <i>k</i><sub>3</sub> for the three possible
outcomes of a match. Find the maximal sum of money that Sergey will receive in
the worst case if the total amount of the bets he places is 1000 pounds.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single line of the input contains the numbers <i>k</i><sub>1</sub>, 
<i>k</i><sub>2</sub>, and <i>k</i><sub>3</sub> separated
by a space. The numbers are in the range from 0.01 to 100.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the single line of the output, give the maximal amount of money that Sergey
gets back in the worst case. You may assume that bets and payouts can be fractional
numbers. Round the answer to an integer according to the standard mathematical rule.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3.5 3.5 3.5
</PRE></TD><TD><PRE CLASS="intable">1167
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1.25 10.0 5.75
</PRE></TD><TD><PRE CLASS="intable">931
</PRE></TD></TR></TABLE>
______________________________________________________
1583||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><div style="text-align:right;">Plus il y a de fromage, plus il y a de trous<br>
or plus il y a de trous, moins il y a de fromage<br>
donc plus il y a de fromage, moins il y a de fromage<br>
<i>Paradoxe de l'emmental</i></div>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Sasha went downhill skiing in the Swiss Alps this summer.
Switzerland is famous for its banks and cheese. Sasha was not interested in
banks, but he visited a cheese factory. He learned there that Swiss people
treated cheese even more seriously than money. For example, they put cheese
into vacuum packs in pieces of exactly 500 grams. If you think that it is very
easy to cut off such pieces, then you are mistaken: there are holes in Swiss
cheese, which must be taken into account. Fortunately, modern technologies make it
possible to determine exactly the size and location of all cavities in a
piece of cheese.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Cheese is fed to a cutting machine as a long bar of square section
10&times;10 cm and length 1 m. Assume that all cavities are spherical and
do not intersect each other and the borders of the bar. The machine can cut
the bar at right angle to the long edges using a micrometer scale (that is,
a grid of size 1 &mu;m). A special computer determines the value the coordinate
along the long edge of the bar at which a cut should be made so that the weight
of the next piece be exactly 500 grams. This value is rounded to micrometers
and the machine cuts the bar. Then the computer determines where the next cut
should be made, and so on, until the weight of the remaining piece is less than
500 grams. If it turns out that the last cut should be made at the coordinate
of exactly 1 meter, then, of course, this cut is not made.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program that determines the coordinates of the cuts exactly as the
Swiss computer does.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of cavities in a bar of cheese 
(0 &le; <i>n</i> &le; 100).
The next <i>n</i> lines describe these cavities in the format
<i>x<sub>i</sub></i> <i>y<sub>i</sub></i> <i>z<sub>i</sub></i> <i>r<sub>i</sub></i>,
where (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>, <i>z<sub>i</sub></i>)
are the coordinates of the center of a cavity and <i>r<sub>i</sub></i>
is its radius. The size of the bar is 10&times;100&times;10 along the
<i>x</i>, <i>y</i>, and <i>z</i> axes, respectively. The coordinate origin is
one of the corners of the bar; the unit of measure is 1 cm. It is known that
1 cm<sup>3</sup> of Swiss cheese weighs 1 gram.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the coordinates of the cuts on the scale of the cutting machine.
In the first line output the number of cuts, and in the following lines give
the coordinates of the cuts in micrometers measured from the beginning of the
bar.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
3.2 37.2 1.8 1
4.2 66.6 5.5 2.5
</PRE></TD><TD><PRE CLASS="intable">19
50000
100000
150000
200000
250000
300000
350000
400419
450419
500419
550419
600419
651114
706964
756964
806964
856964
906964
956964
</PRE></TD></TR></TABLE>
______________________________________________________
1584||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When programmer Alex was in Egypt, he not only swam in the Red Sea and
went sightseeing, but also studied history. When Alex visited the place where
an archeological dig of an ancient temple was carried out, an excavation worker
complained to him that they had to drag very heavy statues from place to place
every day. This was because some Egyptologist had read in an ancient papyrus
that if the statues were arranged in a special order, then some ancient
hiding-place would open. When the temple had been dug out, these statues had
stood as soldiers, forming a rectangle. Some statues were identical, so there were
several types of statues. They were to be arranged into
a rectangle of the same dimensions on the same place with all rows and columns
symmetric with respect to their middles. This meant that the statues standing
in the same row or column at equal distances to its ends had to be of the same type.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alex offered his help. He wants to find the way to transform the rectangle
into a symmetric one by means of the minimal number of moves.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the dimensions of the rectangle <i>n</i> and <i>m</i>
(<nobr>2 &le; <i>n</i>, <i>m</i> &le; 20</nobr>). These integers are even. Each of the next
<i>n</i> lines contains <i>m</i> lowercase English letters. Each letter denotes
the type of the statue that stands in the rectangle at this position.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of statues that should be moved in order to
make a symmetric rectangle. It is guaranteed that this is possible.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
abxa
xyyb
xyyx
abba
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The arrangement in the example can be transformed to a symmetric one in only
two moves: first the statue of the type <strong>x</strong> from the upper row
should be moved to the place in the rightmost column where there is the statue
of the type <strong>b</strong>, and this statue then should moved to the place
where the first statue stood. After all moves each place must be occupied by
exactly one statue, but during the moving process there can be several
statues at the same place.
</DIV></DIV>
______________________________________________________
1585||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Denis has been dreaming of visiting Antarctica since his childhood.
However, there are no regular flights to Antarctica from his city. That is 
why Denis has been studying the continent for the whole summer 
using a local cinema. Now he knows that there are several kinds of 
penguins:
<ul>
<li>Emperor Penguins, which are fond of singing;</li>
<li>Little Penguins, which enjoy dancing;</li>
<li>Macaroni Penguins, which like to go surfing.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, it was not said in the cartoons which kind of 
penguins was largest in number. Petya decided to clarify this. He 
watched the cartoons once more and every time he saw a penguin he 
jotted down its kind in his notebook. Then he gave his notebook to 
you and asked you to determine the most numerous kind of penguins.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of entries in the 
notebook (<nobr>1 &le; <i>n</i> &le; 1000</nobr>). In each of the next <i>n</i> 
lines, there is the name of a kind of penguins, which is one of the 
following: “Emperor Penguin,” “Little Penguin,” and “Macaroni Penguin.”
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the most numerous kind of penguins. It is guaranteed that 
there is only one such kind.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
Emperor Penguin
Macaroni Penguin
Little Penguin
Emperor Penguin
Macaroni Penguin
Macaroni Penguin
Little Penguin
</PRE></TD><TD><PRE CLASS="intable">Macaroni Penguin
</PRE></TD></TR></TABLE>
______________________________________________________
1586||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Rest at the sea is wonderful! However, programmer Pasha became awfully 
bored of lying on a beach in Turkey; so bored that he decided to count the 
quantity of three-digit prime numbers. This turned out to be so 
interesting that he then started to study threeprime numbers. Pasha 
calls an integer a threeprime number if any three consecutive digits of this integer
form a three-digit prime number. Pasha had already started working 
on the theory of the divine origin of such numbers when some vandals 
poured water on Pasha and cried some incomprehensible words like 
“Sonnenstich!”, “Colpo di sole!”, and “Coup de soleil!”
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to continue Pasha’s work and find out how often (or rare) 
threeprime numbers are.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains an integer <i>n</i> (3 &le; <i>n</i> &le; 10000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the quantity of <i>n</i>-digit threeprime numbers calculated
modulo 10<sup>9</sup> + 9.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">204
</PRE></TD></TR></TABLE>
______________________________________________________
1587||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Eugene visited Australia this summer. It turned out that in this 
wonderful country one could not only watch kangaroos and emus, visit the world-famous 
opera house, and swim in the warm sea, but also enjoy the unique
“Flying Pig Show,” which took place not far from Sidney. No wonder the show
attracts crowds of people: flying pigs with visible pleasure flop into a
pool. Before plunging into the water, they take a run and jump from a
platform fixed at a height of almost four meters above the water level. In
order to gape at the amazing pigs, the crowd gathers about an hour before the
start of the show.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the performance, the organizers choose the most popular pig and present
a symbolic prize to it. The popularity of a pig is calculated on the basis of the
audience’s likings: each guest gives a mark (an integer not exceeding 3 in
absolute value) to each pig. Each pig’s marks are written as a sequence and then a
nonempty subsequence of consecutive numbers
is chosen in which the product of numbers is maximal. This
product is taken by the organizers as the popularity of the pig.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The show became so popular that the number of guests is very large.
That is why it is not always easy to choose the best pig. Eugene offered the organizers
his help in automating the process of calculating the popularities of pigs.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of guests <i>n</i> at the “Flying Pig Show”
(<nobr>1 &le; <i>n</i> &le; 50000</nobr>).
The next line contains <i>n</i> integers, which are the guests’ marks for a pig,
in the order the organizers write them down.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the popularity of the pig.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2 -1
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1588||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Andrey is very lucky. The Governor-General of Jamaica invited him 
to visit this wonderful island. The whole trip, including plenty of entertainment, 
will be completely free for Andrey. He will only have to help the Jamaican 
Ministry of Transport and write a small program.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The point is that the Jamaican government decided to construct 
a new network of expressways, in order to boost the economic 
growth of the country. Each two cities are to be connected 
by a road going along a straight line. One road may connect several 
cities if they lie on the same straight line.
Jamaican economists are sure that the new network will minimize 
transportation expenses. In order to estimate the cost of the 
project, it is required to determine the total length of the roads 
to be constructed, and this is the job for Andrey.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of cities in Jamaica
(<nobr>1 &le; <i>n</i> &le; 300</nobr>). The next <i>n</i> lines contain the 
coordinates of the cities. In each of these lines, there are two 
integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> separated by a 
space (<nobr>0 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 10000</nobr>).
There are no cities with coinciding coordinates.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the total length of the roads rounded to the nearest integer.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
0 100
100 0
50 50
</PRE></TD><TD><PRE CLASS="intable">412
</PRE></TD></TR></TABLE>
______________________________________________________
1589||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For the period of his vacation, programmer Stas found a job with the Japanese
computer company <i>Thinking Rabbit</i>. At first glance, the idea seemed
marvelous: he would go abroad, earn some money, and learn from his Japanese
colleagues. However, it turned out that the company did not want programmers
without good knowledge of Japanese. Therefore, Stas was sent to work as a
storekeeper (in Japanese, this profession was called <i>soko-ban</i>).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Stas had to put the storehouse to order. Every morning he was given a sheet of
paper with a scheme of the room in the storehouse where he had to work that day.
The scheme showed the places where he had to put containers. For some reason,
the management of the company did not bother about which container would be
put to which place; they only wanted all containers to be put to the places
marked on the scheme.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The task was not easy. The containers were large and heavy; it was only
possible to move them by pushing along the floor, and they were too heavy to
push more than one of them at a time. In addition, the containers were so
smooth that Stas could not pull or turn them; all he could do was to push them
forward in front of him. The dimensions of the room corresponded to the size of
containers exactly, so Stas could not clime over a container, squeeze himself
between containers, or wriggle himself between a container and a wall. He could
only move through unoccupied space. Thus, putting containers in order was a
tricky puzzle. And if Stas could not solve it or put incidentally one of the
containers into some corner from which it could not be extracted, then Stas was
in real trouble. The point was that the walls of the room were solid, with no
exits. In the morning, Stas got to the room through one of the hatches in the
ceiling. He could not leave the room until the task was completed. When all
containers were on their places, the smart control system opened a hatch with
a rope-ladder for Stas right over him.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Stas to make a plan of moving the containers.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a scheme of the storeroom. This is a table of size
<i>n</i> &times; <i>m</i> <nobr>(3 &le; <i>n</i>, <i>m</i> &le; 8)</nobr>.
An empty cell is shown by a space, and objects are denoted as follows:
<ul>
<li><code><b>#</b></code> is a piece of wall</li>
<li><code><b>.</b></code> is an empty cell where a container must be put (an aim cell)</li>
<li><code><b>@</b></code> is the cell from which Stas starts his work if it is not an aim cell</li>
<li><code><b>+</b></code> is the cell from which Stas starts his work if it is an aim cell</li>
<li><code><b>$</b></code> is a container on a cell which is not an aim cell</li>
<li><code><b>*</b></code> is a container on an aim cell</li>
</ul>
It is guaranteed that the scheme of the room is correct, that is, Stas cannot
go out of the room. The number of containers is equal to the number of aim
cells.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a plan of work for Stas. In a single line, you should
specify his movements by letters <b>r</b>, <b>l</b>, <b>u</b>, and <b>d</b>,
which correspond to the four possible directions of moves. If during a move a
container is pushed, then the letters should be capital (<b>R</b>, <b>L</b>, <b>U</b>, and <b>D</b>, 
respectively). The string should be no longer than 10000
symbols. You may assume that there is a solution.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">########
#@  $ .#
########
</PRE></TD><TD><PRE CLASS="intable">rrRR
</PRE></TD></TR><TR><TD><PRE CLASS="intable"> ######
##   .#
#@  ###
#   * #
#   $ #
#     #
#######
</PRE></TD><TD><PRE CLASS="intable">dddrrrruLdlUUUluRR
</PRE></TD></TR></TABLE>
______________________________________________________
1590||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Programmer Vasya was down on his luck. Instead of a vacation, he was
sent to a scientific conference.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“It is necessary to increase your competence,” his boss said,
“it’s an important conference on cryptography, and it’s held in France, where
they used encryption in the days of de Richelieu and cracked codes in the days
of Viete.”
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the talks at the conference was about the attempts to solve Bacon’s
ciphers. The speaker proposed a hypothesis that the key to Bacon’s secrets
could be found if all possible substrings of Bacon’s works were analyzed.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“But there are too many of them!” Vasya expressed his astonishment.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">“Not as many as you think,” the speaker answered, “count them all and you’ll see it
yourself.”
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">That evening Vasya found on the Web the complete set of Bacon’s works. He wrote
a program that converted the texts into one long string by removing all
linebreaks, spaces, and punctuation marks. And now Vasya is confused because he
doesn’t know how to calculate the number of different substrings of this
string.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given a nonempty string consisting of lowercase English letters.
The string is no longer than 5000 symbols.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different substrings of this string.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">aaba
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR></TABLE>
______________________________________________________
1591||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This summer programmer Dima wanted to take a rest from programming because he felt that the
level of abstraction his profession required was driving him mad.
He decided to go to Greece. But he forgot that Greece was the homeland
of geometry where famous Euclid lived and worked.
In geometry, instead of real figures, abstract notions are studied, and
the proofs are based not on intuition, but on axioms and formal definitions.
Even shepherds in Greece have well-developed abstract thinking skills.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, consider the following problem, which will show the level of
your abstract thinking abilities. Imagine a circle, then put mentally
<i>n</i> points on its periphery at equal distances. After that connect (again
mentally!) these points pairwise by straight segments (of course, you
remember that such segments are called chords).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now consider any three different chords from this set that intersect pairwise.
If at least one of their intersection points lies inside the circle,
we will call the figure formed by these chords an interesting triangle.
If you can count the number of interesting triangles correctly, then
you can go to Greece and not be ashamed of yourself there.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the number <i>n</i> of points on the periphery of a circle
(<nobr>3 &le; <i>n</i> &le; 2000</nobr>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of interesting triangles.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">25
</PRE></TD></TR></TABLE>
______________________________________________________
1592||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When programmer Vova was in China he discovered that Russian watches “Zarya” were sold
there ten times cheaper than in Russia. Vova decided to make some money and bought a lot of watches. He wanted to sell them at home at half-price (that would be five times more expensive than he had paid for them). But when he returned he found out that the watches showed different times; moreover, from a slightest push they stopped (or started to work again). Obviously, they were not real “Zarya” watches, but their exact copies. In order to sell the whole lot as quickly as possible, Vova wants to set them
all at the same time. He then will be able to say that this is the time at the producing plant. Of course, before opening the suitcase he will have to push it a bit to make the watches start to work simultaneously.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to set a time on a watch, Vova must rotate the winder. He can make one turn of the winder in one second; as he does so, the second-hand makes a complete circle. When Vova turns the winder, the minute-hand rotates 60 times slower than the second-hand,
and the hour-hand rotates 12 times slower than the minute-hand. For example, to set time six hours ahead it takes six minutes. The hands of the watches can be rotated clockwise only. Help Vova to prepare the watches for sale. Choose a time that should be set on all watches so that the total time Vova spends setting it is minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of watches Vova bought
<nobr>(1 &le; <i>n</i> &le; 50000)</nobr>. Then there are <i>n</i> lines. The (<i>i</i>+1)th line of the input contains the time that the <i>i</i>th watch shows, in the format <b>h:mm:ss</b>. Here the integer <i>h</i> <nobr>(1 &le; <i>h</i> &le; 12)</nobr> is the hour and the two-digit integers <i>mm</i> and <i>ss</i>
<nobr>(00 &le; <i>mm</i>, <i>ss</i> &le; 59)</nobr> are the minutes and seconds,
respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the time that should be set on all watches in the format given above.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
11:30:00
12:10:01
6:10:18
</PRE></TD><TD><PRE CLASS="intable">12:10:01
</PRE></TD></TR></TABLE>
______________________________________________________
1593||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There live square people in a square country. Everything in this country is square also. Thus, the Square Parliament has passed a law about a land. According to the law each citizen of the country has a right to buy land. A land is sold in squares, surely. Moreover, a length of a square side must be a positive integer amount of meters. Buying a square of land with a side <I>a</I> one pays <I>a</I><SUP>2</SUP> quadrics (a local currency) and gets a square certificate of a landowner.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One citizen of the country has decided to invest all of his <i>N</i> quadrics into the land. He can, surely, do it, buying square pieces 1&nbsp;&times;&nbsp;1 meters. At the same time the citizen has requested to minimize an amount of pieces he buys: "It will be easier for me to pay taxes,"&nbsp;— he has said. He has bought the land successfully.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find out a number of certificates he has gotten.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains a positive integer <i>N</i>&nbsp;&le;&nbsp;10<sup>15</sup>&nbsp;, that is a number of quadrics that the citizen has invested.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains a number of certificates that he has gotten.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">344</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This problem is the same as “<A HREF="/problem.aspx?space=1&num=1073">Square country</A>” but with bigger limitations.
</DIV></DIV>
______________________________________________________
1594||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During the recent excavations in Teotihuacan archeologists found a strange casket, the contents of which was probably used during the legendary corbans held by Montezuma, and a lot of equal rectangular bone pieces of size 1&nbsp;&times;&nbsp;2.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Archeologists found out that in order to open the casket you should tile the rectangular covering of this casket with bone pieces in a specific way. Pieces cannot overlap and intersect the border of the covering. Archeologists are afraid to break the casket, so they just want to try all possible ways of tiling. Your task is to calculate the number of such ways.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains two space-separated integers <i>l</i> and <i>w</i>, the length and the width of the casket's covering (1&nbsp;&le;&nbsp;<i>l</i>,&nbsp;<i>w</i>&nbsp;&le;&nbsp;100). 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of ways of tiling modulo 10<sup>9</sup> + 7.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR></TABLE>
______________________________________________________
1595||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let’s call the sequence of positive integers <I>N-perfect</I>, if the following conditions are satisfied:
<UL>
<LI>the sequence contains all the numbers 1, 2, &hellip;, <I>N</I>; 
<LI>its length does not exceed 2<I>N</I>; 
<LI>all the numbers in the sequence are different; 
<LI>the sum of any of its first <I>k</I> members is divisible by <I>k</I>. 
</UL> 
For example, the sequence 1, 3, 2, 6, 8 is 3-perfect.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains integer <I>N</I> (1 &le; <I>N</I> &le; 250000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <I>N</I>-perfect sequence in a single line. Its members must not exceed 10<SUP>13</SUP>. Separate numbers with spaces. At least one such sequence always exists. If several answers are possible, output any one of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">1 3 2 6 8
</PRE></TD></TR></TABLE>
______________________________________________________
1600||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A new system for preventing airplane collisions is installed at
the Koltsovo airport. The system traces all flying objects within
a certain radius of action: airplanes, helicopters, parachutists, etc.
It is assumed that objects move in straight lines with
constant speeds, and their motions are calculated according to this
model. If the distance between two objects becomes equal to some
critical value&nbsp;<i>d</i>, the system gives an alarm. You are given
coordinates and velocities of objects. Determine the pair that will first
cause an alarm.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the number&nbsp;<i>n</i> (at most&nbsp;500)
of objects within the range of the system and the critical
distance&nbsp;<i>d</i> (from&nbsp;0.1 to&nbsp;10000).
Each of the following <i>n</i> lines contains the current coordinates
(<i>x</i>, <i>y</i>, <i>z</i>) and the velocity components
(<i>v<sub>x</sub></i>, <i>v<sub>y</sub></i>, <i>v<sub>z</sub></i>) of a flying object.
The absolute values of coordinates do not exceed 10000, and the absolute
values of velocity do not exceed 100. At the initial moment, the
objects are at safe distances from each other.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there will be an alarm, then output "ALARM!" in the first line.
The second line must contain the time&nbsp;<i>t</i> of the first alarm (up to
the third fractional digit) and the numbers of the objects at the critical distance
from each other at that moment <i>a</i> and <i>b</i>;
the initial time moment is&nbsp;0.
If at the moment <i>t</i> there are several pairs of objects at the
critical distance, then output any of them.
The objects are enumerated from 1 to <i>n</i> in the order in which they are given in
the input. If there are no alarms, output "OK".
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1.0
1.0 1.0 -1.0 0.0 0.0 10.0
0.0 0.0 4.0 2.0 0.0 0.0
</PRE></TD><TD><PRE CLASS="intable">ALARM!
0.500 1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1601||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The blonde Angela has a new whim: internet chats. Of course, as any blonde, she
writes her messages using the upper case. You are the moderator of Angela's
favorite chat and you're fed up with her upper-case messages. The problem
is that Angela does not respond to your warnings. You decided to write a simple
antiCAPS corrector, which would make Angela's messages readable.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The correction rules are very simple:
<ol>
<li>Sentences in a message consist of words, spaces and punctuation marks.
<li>Words consist of English letters.
<li>Sentences end with a full stop, exclamation mark, or question mark.
<li>The first word of each sentence must start with a capital letter, and all other
letters of the sentence must be lowercase.
</ol>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given Angela's message, which consists of uppercase English letters,
spaces, line breaks and punctuation marks: full stops, commas, dashes, colons, exclamation
and question marks. Total length of message is not exceeding 10000 symbols.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the corrected message.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">HI THERE!
HOW DID YOU KNOW I AM A BLONDE?</PRE></TD><TD><PRE CLASS="intable">Hi there!
How did you know i am a blonde?</PRE></TD></TR></TABLE>
______________________________________________________
1602||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr is at the upper (<i>n</i>th) floor of a skyscraper, and he wants to go
down to the first floor. The indicator above the elevator door shows that
the elevator is now going down to the first floor and is at the level of the
<i>k</i>th floor. Petr understands that if he goes down several flights of
stairs and calls for the elevator from there he may get to the first floor faster.
Help Petr to determine how many flights of stairs he should go.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The elevator goes up or down one floor in <i>v</i> seconds, and Petr goes down
one flight of stairs in <i>u</i> seconds. When the elevator has reached the
first floor, it has to remain there for 15 seconds; then it can go up.
You may assume that nobody else will call for the elevator. Boarding the
elevator takes 5 seconds. All other delays shouldn't be taken into account.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single input line contains the numbers <i>n</i>, <i>k</i>, <i>u</i>, and
<i>v</i> <nobr>(1 &lt; <i>k</i> &lt; <i>n</i> &lt; 100;
0.1 &lt; <i>v</i> &lt; <i>u</i> &lt; 100)</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of the floor which Petr should descend to. If there are
several equivalent variants, output such one in which Petr will go by foot the
smaller distance.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">50 49 4.8 0.2</PRE></TD><TD><PRE CLASS="intable">45</PRE></TD></TR></TABLE>
______________________________________________________
1603||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr likes to solve crossword puzzles and other conundrums. Once he found in a newspaper
a new puzzle called "Erudite". There was a square table 4 &times; 4 filled with
letters. It was required to find in the table as many words as possible;
the words could go up, down, to the right, or to the left and
break at right angles any number of times but they could not have self-intersections.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr's friend Vasya told him that it was very silly to spend time solving this
puzzle. He told it was much easier to write a program that would search for
the required words in a dictionary. Petr was offended and told Vasya: "If
you are that clever, write the program yourself. I will cope with the puzzle
myself, the way I like." Help Vasya to get out of the situation.
You should write this program.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first four lines of the input contain a table 4 &times; 4 consisting of
lowercase English letters. In the next line there is the number <i>n</i>
(<i>n</i> &le; 100) of words in the dictionary. These words are given in the
following <i>n</i> lines, one word per line. Each word consists of
lowercase English letters and has length from 1 to 16.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each word from the dictionary output "YES" if this word can be found in
the table and "NO" otherwise. Use the format given in the sample.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">abra
adac
babr
arca
3
abracadabra
ababaab
ababaaba</PRE></TD><TD><PRE CLASS="intable">abracadabra: YES
ababaab: YES
ababaaba: NO
</PRE></TD></TR></TABLE>
______________________________________________________
1604||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> The chief traffic policeman of the Country of Fools wants to impose a speed
limit on the motorway going from the Field of Wonders to the City of Simple Simons.
He ordered <i>n</i> speed limit signs. When the order arrived it turned out
that the signs had different numbers on them, which showed limits in
kilometers per hour. There were <i>k</i> different limits: <i>n</i><sub>1</sub>
signs with the first limit, <i>n</i><sub>2</sub> signs with the second limit,
etc.; <nobr><i>n</i><sub>1</sub> + &hellip; + <i>n<sub>k</sub></i> =
<i>n</i></nobr>. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To make the life of drivers not so easy, the chief policeman decided to place
the signs on the motorway in such a way that a driver would have to change
speed as many times as possible. According to the traffic regulations in the
Country of Fools, a speed limitation is valid until the following speed limit
sign, and the speed shown in the sign must be observed exactly. For example, if
there is the number 60 on the sign, then a car must go until the following sign
with the speed of exactly 60 kilometers per hour.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>k</i> of different types of speed limit
signs; 1 &le; <i>k</i> &le; 10000. The second line contains positive integers
<i>n</i><sub>1</sub>, &hellip;, <i>n<sub>k</sub></i> separated with a space.
The sum of all <i>n<sub>i</sub></i> does not exceed 10000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the order in which the signs must be place on the motorway, in the form
of <i>n</i> integers in the range from 1 to <i>k</i>. Assume that a driver must
change speed when the car passes by the first sign, irrespective of the
initial speed. If there are several solutions, you may output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
2 2</PRE></TD><TD><PRE CLASS="intable">1 2 1 2
</PRE></TD></TR></TABLE>
______________________________________________________
1605||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Robodevil likes to do some mathematics between rehearsals of his orchestra.
Today he invented devilish sequence No.&nbsp;1729:
<ul>
<li><i>x</i><sub>0</sub> = 0,
<li><i>x</i><sub>1</sub> = 1,
<li><i>x<sub>n</sub></i> = (<i>x</i><sub><i>n</i> &minus; 1</sub> + <i>x</i><sub><i>n</i> &minus; 2</sub>) / 2.
</ul>
For example, <i>x</i><sub>10</sub> = 0.666015625. Robodevil became interested
at once how many sixes there were at the beginning of an arbitrary <i>x<sub>n</sub></i>.
In 6 nanoseconds, he had a formula. Can you do the same?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given an integer <i>n</i>; 2 &le; <i>n</i> &le; 100000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of sixes at the beginning of <i>x<sub>n</sub></i> in decimal notation.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1606||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> Each weekend Petr goes mountain skiing with his friends. He has learned
recently that Winter Olympic Games will be held in his city in several years'
time. Now Petr dreams of winning a gold Olympic medal in slalom. In this
sport, a sportsman must go downhill performing sharp turns, and he mustn't miss
the gates placed on the mountain slope. </DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr started training at once because it was not much time left until the Games.
He created a training piste for himself by placing <i>n</i> poles on a slope.
Then he decided to calculate his downhill trajectory. For this, he plotted the
slope in the coordinate system shown in the picture. Petr can begin his
descent at any point on the start line (in the scheme, it is the line
<i>y</i>&nbsp;=&nbsp;100000) and end it at any point of the finish line
(the line <i>y</i>&nbsp;=&nbsp;0). His trajectory must be a broken line
with vertices at poles. The <i>y</i> coordinate must be decreasing at each moment.
Petr wants to ski downhill touching as many poles as possible and changing his
direction every time he touches a pole (i.e., if was going rightwards, he
must start going leftwards). He also may go through a pole in a straight line
without touching it. A possible trajectory is shown in the picture.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Calculate an optimal trajectory for Petr.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of poles <i>n</i> (no more than 50000).
The following <i>n</i> lines contain coordinates of poles in the form of
pairs of integers (<i>x<sub>i</sub></i>,&nbsp;<i>y<sub>i</sub></i>) separated
with a space; <nobr>1 &le; <i>i</i> &le; <i>n</i></nobr>. All <i>x<sub>i</sub></i> and all
<i>y<sub>i</sub></i> are different and are in the range from 1 to 99999.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the maximal number of poles that Petr can touch when
he skis down the slope. In the second line, give the numbers of the poles in
the order of touching.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
5 2
6 5
1 1
4 3
2 4</PRE></TD><TD><PRE CLASS="intable">4
2 5 4 3</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
1 6
3 4
5 2
4 1</PRE></TD><TD><PRE CLASS="intable">3
1 3 4</PRE></TD></TR></TABLE>
______________________________________________________
1607||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr likes going by taxi. For him, it is not only the pleasure of a fast and
comfortable ride, but also the opportunity to bargain with the driver over the
fare. The bargaining between Petr and taxi drivers always follows the same
scheme:<br>
&mdash; To the airport! I pay 150 roubles.<br>
&mdash; No, I won't take you for 150. Let's go for 1000.<br>
&mdash; Are you crazy? I haven't got that much on me! Ok, let it be 200.<br>
&mdash; Are you laughing? I agree to 900.<br>
&mdash; Well, I'll give 250.<br>
&mdash; Guy, do you know how much gas is? Pay 800 and off we go!<br>
&hellip;<br>
Such a dialog continues until they agree on the fare. Petr always increases
his amount by the same number, and the taxi driver decreases it in the same
way. The driver would not ask a sum that is less than that offered by Petr. In
this case, he will agree with Petr's offer. Petr will act similarly.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The single input line contains four integer numbers: the initial Petr's offer <i>a</i>,
Petr's raise to his offer <i>b</i>, the initial fare required by the driver
<i>c</i>, and the driver's reduction of his fare <i>d</i>;
<nobr>1 &le; <i>a</i>, <i>b</i>, <i>c</i>, <i>d</i> &le; 10000</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the amount of money that Petr will pay for the ride.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">150 50 1000 100</PRE></TD><TD><PRE CLASS="intable">450</PRE></TD></TR></TABLE>
______________________________________________________
1608||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">New tickets were introduced in Yekaterinburg trams. Their numbers don't have
leading zeroes; they just go one after another, starting from number one. Some
passengers were embarrassed at hearing this news: now they didn't know how to
determine whether a ticket was lucky. New versions of the luckiness criterion
were discussed in trams, at tram stops, and, of course, at the tram forum on
the Web. According to one of the versions, a ticket was considered lucky if no
two opposite digits of its number coincided; i.e., <nobr><i>d<sub>i</sub></i>
&ne; <i>d</i><sub><i>n</i>+1&minus;<i>i</i></sub></nobr> for <nobr><i>i</i>
&ne; <i>n</i> + 1 &minus; <i>i</i></nobr>, where
<i>d</i><sub>1</sub><i>d</i><sub>2</sub>&hellip;<i>d</i><sub><i>n</i></sub> was
the number of the ticket.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the addicts of the tram forum was a programmer, and he decided to
calculate the amount of lucky tickets in a conductor's roll if the number of
the first ticket in the roll was <i>a</i>, and the number of the last ticket
was <i>b</i>; the tickets in the roll are numbered consecutively.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input line contains the integers <i>a</i> and
<i>b</i> separated by a space <nobr>(1 &le; <i>a</i> &le; <i>b</i> &le;
10<sup>18</sup>)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the amount of lucky tickets in the roll.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 10
</PRE></TD><TD><PRE CLASS="intable">10
</PRE></TD></TR><TR><TD><PRE CLASS="intable">100 2000
</PRE></TD><TD><PRE CLASS="intable">1620
</PRE></TD></TR></TABLE>
______________________________________________________
1609||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Public transportation is burgeoning in Yekaterinburg. The municipal
authorities have imminent plans to repair about 20 kilometers of tram lines
using a new technology involving specially-designed bricks. Implementation of
the new method of repairing pavement between rails started last summer, and the
first results can already be seen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, Ravshan and Dzhamshud's brigade has paved with new bricks
almost two crossroads in the city center. This amazing work speed is explained
by a trick used by their master. Before the start of repair work, he arranges
several bricks between rails in such a way that there is only one way to
continue the paving. As a result, the time is saved that is usually spent for
designing brick arrangements, for which other brigades spend the most part of
their workdays.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each brick has size 1&nbsp;&times;&nbsp;2. It is required to pave with
bricks a rectangular domain of size <i>n</i>&nbsp;&times;&nbsp;<i>m</i>.
Determine the minimal number of bricks the master should arrange so that the
final arrangement (i.e., a complete pavement of the rectangle) is determined
uniquely. Two arrangements are considered equal if all positions of all their
bricks coincide.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integers <i>n</i> and
<i>m</i> (<nobr>1 &le; <i>n</i>, <i>m</i> &le; 10;</nobr> the product <i>nm</i>
is even).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the minimal number of bricks
the master should arrange. The following <i>n</i> lines contain <i>m</i>
symbols each and describe one of the possible initial arrangements. The symbol
&ldquo;1&rdquo; denotes a cell occupied by a brick, and the symbol
&ldquo;0&rdquo; denotes an empty cell.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
</PRE></TD><TD><PRE CLASS="intable">2
1100
0110
0000
0000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 5
</PRE></TD><TD><PRE CLASS="intable">2
11110
00000
</PRE></TD></TR></TABLE>
______________________________________________________
1610||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is no doubt that Yekaterinburg trams are the best in the world.
Nevertheless, it is Saint-Petersburg that has the largest tram network in
Russia. Not long ago, the Saint-Petersburg tram network was included into the
Guinness Book of Records as the largest in the world.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two fans of the tram forum from Yekaterinburg decided to make a trip to
Saint-Petersburg to visit the centenary celebration of the tram launch in that
city. From their Saint-Petersburg friends they learned that in the previous 15
years the amount of tram service had been constantly decreasing. In many
avenues, tram lines were dismantled. Tram service in the city center was
minimized, and the city tram network was divided into three fragments, so that
it was no longer possible to get by tram from any part of Saint-Petersburg to
any other part.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Another thing the travelers learned was that cactuses were in fashion in
Saint-Petersburg. Upon their return to Yekaterinburg, they decided to plant a
cactus at their office. A cactus is a connected undirected graph such that each
of its edges belongs to at most one simple cycle. One vertex of a cactus
touches the ground and is called its root.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, it soon turned out that cactuses became too popular, and all fans
of the tram forum already had them. Then the friends decided to get rid of
their cactus by a very unusual method: they by turns choose some edge of the
cactus and chop it up. This edge is removed, and if the cactus breaks into two
parts, then the part that is not connected to the root anymore is thrown out.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The friends have bet a monthly tram ticket on who will chop the last edge
growing from the root. Determine who will win if they both play optimally.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Along with the vogue of cactuses, the friends follow
the Saint-Petersburg vogue to describe the set of edges of a cactus by a family
of paths such that in each path all edges are different. The first line
contains the amount <i>n</i> of vertices of the cactus, the amount <i>m</i> of
paths, and the number <i>r</i> of the root vertex; 1 &le; <i>r</i> &le;
<i>n</i> &le; 50000</nobr>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">lines describes a path in the form of a
sequence of its vertices. Each description starts with the length of the
sequence <i>n<sub>i</sub></i> (2 &le; <i>n<sub>i</sub></i> &le; 100000). Then
there are <i>n<sub>i</sub></i> integers, which are the numbers of vertices of
the path, in the order in which they are on the path. Adjacent vertices of any
path are different. There can be at most one edge between any two vertices of
the cactus. Each edge of the cactus is given in the input only once.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;First&rdquo; if the person who makes
the first move wins a monthly ticket assuming that both play optimally.
Otherwise, output &ldquo;Second&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">17 2 1
15 3 4 5 6 7 8 3 2 9 10 11 12 13 14 9
6 2 1 15 16 17 15
</PRE></TD><TD><PRE CLASS="intable">First
</PRE></TD></TR><TR><TD><PRE CLASS="intable">16 2 1
15 3 4 5 6 7 8 3 2 9 10 11 12 13 14 9
5 2 1 15 16 1
</PRE></TD><TD><PRE CLASS="intable">Second
</PRE></TD></TR></TABLE>
______________________________________________________
1611||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><div align="right"><i>Decimation was a form of extreme military discipline used
<br> in the Roman Army, when every tenth soldier was executed.</i></div></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Do you think it is easy to work as a conductor in a tram? Persistent fare
dodgers always try to ride free of charge, and ticket inspectors fine without
remorse not only fare dodgers but also tram conductors because they don't cope
with their duties.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the course of operation <i>Fare Dodger 2008</i>, which was carried out
recently by the Yekaterinburg Association of Ticket Inspectors, it turned out
that in every tram there was at least one fare dodger at the moment of
inspection. Chief Ticket Inspector of Yekaterinburg became furious and decided
to punish conductors. He ordered to line them up in a column and to fine every
tenth conductor a sum equal to an average conductor's salary.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Chief Fare Dodger of Yekaterinburg felt sorry for poor conductors and
decided to help them, because he knew that some of the conductors were good and
coped with their duties. Before conductors are fined, Chief Fare Dodger can
place into the column some of his friends, who are also fare dodgers. Chief
Ticket Inspector doesn't suspect this and will fine every person whose number
in the column is a multiple of&nbsp;10 (the number of the first person in the
column is&nbsp;1). Help Chief Fare Dodger to place his friends in the column so
that the total number of fined fare dodgers and good conductors be minimal.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>n</i> <nobr>(1 &le;
<i>n</i> &le; 10000)</nobr> and <i>k</i> (0 &le; <i>k</i> &le; 50) separated by
a space; they are the number of conductors in the column and the number of
Chief Fare Dodger's friends who are ready to help the conductors. The second
line consists of <i>n</i> symbols; the <i>i</i>th symbol is &ldquo;1&rdquo; if
the <i>i</i>th place in the column is initially occupied by a good conductor,
and &ldquo;0&rdquo; if the conductor is bad.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line, output the minimal total number of
fined fare dodgers and good conductors. In the second line, output the number
<i>m</i> of fare dodgers that should be placed in the column, and then output
<i>m</i> integers, which are their numbers in the resulting column. The numbers
must be separated by a space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 2
0000000001
</PRE></TD><TD><PRE CLASS="intable">0
2 5 12
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 2
1111111111
</PRE></TD><TD><PRE CLASS="intable">1
0
</PRE></TD></TR></TABLE>
______________________________________________________
1612||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tram, trolleybus, and bus drivers talk at the tram forum. We have read all
messages posted at the forum during last month and discovered an interesting
rule. Users in whose messages the word &ldquo;tram&rdquo; occurs more often
than the word &ldquo;trolleybus&rdquo; are tram drivers. Similarly, users in
whose messages the word &ldquo;trolleybus&rdquo; is more frequent than the word
&ldquo;tram&rdquo; are trolleybus drivers. All other users of the tram forum
are bus drivers. Given this information, can you determine who has posted the
latest message at the tram forum?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the latest message at the tram forum. The
message consists of lowercase English letters, spaces, line breaks, and
punctuation marks: periods, commas, dashes, colons, and exclamation and
question marks. The total length of the message is at most 10000 symbols. Words
consist of letters and can be separated by spaces, line breaks, and punctuation
marks.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;Tram driver&rdquo; if the user who has
posted the latest message is a tram driver; output &ldquo;Trolleybus
driver&rdquo; if she is a trolleybus driver; and output &ldquo;Bus
driver&rdquo; if she is a bus driver.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">of course, tram is the best transport
in the world!
</PRE></TD><TD><PRE CLASS="intable">Tram driver
</PRE></TD></TR><TR><TD><PRE CLASS="intable">yes, yekaterinburg trams are the
best trams in the world, but
i like my trolleybus too.
</PRE></TD><TD><PRE CLASS="intable">Trolleybus driver
</PRE></TD></TR><TR><TD><PRE CLASS="intable">read forum.tr.ru every day!
you can learn much about tram 
drivers and trolleybus drivers.
</PRE></TD><TD><PRE CLASS="intable">Bus driver
</PRE></TD></TR></TABLE>
______________________________________________________
1613||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Have you ever thought about how many people are transported by trams every
year in a city with a ten-million population where one in three citizens uses
tram twice a day?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that there are <i>n</i> cities with trams on the planet Earth.
Statisticians counted for each of them the number of people transported by
trams during last year. They compiled a table, in which cities were sorted
alphabetically. Since city names were inessential for statistics, they were
later replaced by numbers from 1 to <i>n</i>. A search engine that works with
these data must be able to answer quickly a query of the following type: is
there among the cities with numbers from <i>l</i> to <i>r</i> such that the
trams of this city transported exactly <i>x</i> people during last year. You
must implement this module of the system.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i>, 0 &lt;
<i>n</i> &lt; 70000. The second line contains statistic data in the form of a
list of integers separated with a space. In this list, the <i>i</i>th number is
the number of people transported by trams of the <i>i</i>th city during last
year. All numbers in the list are positive and do not exceed
10<sup>9</sup>&nbsp;&minus;&nbsp;1. In the third line, the number of queries
<i>q</i> is given, <nobr>0 &lt; <i>q</i> &lt; 70000.</nobr> The next <i>q</i>
lines contain the queries. Each of them is a triple of integers <i>l</i>,
<i>r</i>, and <i>x</i> separated with a space; <nobr>1 &le; <i>l</i> &le;
<i>r</i> &le; <i>n</i></nobr>; 0 &lt; <i>x</i> &lt; 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a string of length <i>q</i> in which the
<i>i</i>th symbol is &ldquo;1&rdquo; if the answer to the <i>i</i>th query is
affirmative, and &ldquo;0&rdquo; otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1234567 666666 3141593 666666 4343434
5
1 5 3141593
1 5 578202
2 4 666666
4 4 7135610
1 1 1234567
</PRE></TD><TD><PRE CLASS="intable">10101
</PRE></TD></TR></TABLE>
______________________________________________________
1614||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">President has declared the development of tram service a priority national
project. As a part of this project, Yekaterinburg will receive enough budget
funds to carry out a complete reconstruction of the city's tram network.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are 2<i>n</i> tram stops in Yekaterinburg. In the course of
reconstruction, the stops will be left in their places and no new stops will be
built, but new tram railways will be laid so that it will be possible to go by
tram from every tram stop to any other tram stop without any intermediate
stops.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having studied messages at the tram forum, the city authorities found out
that citizens would be satisfied with the reconstruction only if for every pair
of tram stops there would be a tram route connecting these stops without any
intermediate stops. It is clear that the network of
<i>n</i>(2<i>n</i>&nbsp;&minus;&nbsp;1) routes consisting of only two stops
each satisfies this requirement. However, Yekaterinburg Mayor wants exactly
<i>n</i> routes to be left after the reconstruction, and each tram must make
exactly 2<i>n</i> stops (including the final ones) on its route. Trams must go
along these routes in both directions. Suggest a plan of reconstruction that
will satisfy both citizens and Mayor.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integer <i>n</i>,
<nobr>1 &le; <i>n</i> &le; 100.</nobr></DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> lines describing tram routes. Each route
is a sequence of integers in the range from 1 to 2<i>n</i> separated by a
space. A route may go through a stop several times. If the problem has several
solutions, you may output any of them. If there is no solution, output one line
containing the number &minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">1 6 2 1 3 4
2 3 6 5 4 6
5 1 4 2 5 3
</PRE></TD></TR></TABLE>
______________________________________________________
1615||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It might seem that a traffic jam is not a problem for trams. However, if
tram rails are laid on the roadway, a tram is on equal terms with other
vehicles. In fact, a traffic jam is a greater problem for trams because they
can't drive around the difficult section of the road.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tram driver Zina can always find what to do while her car is stuck in a
traffic jam. She likes most to play a solitaire, in which a deck consisting of
cards of two suits (hearts and spades) is used. In each suit, there are
<i>n</i> cards of different values (so, there are 2<i>n</i> cards in total).
Zina takes cards from the deck one by one and puts them down in a row from left
to right face up. After putting down each card, Zina performs <i>sifting</i>:
if there are two cards of the same suit or of the same value separated by
exactly one card, then the leftmost of these cards is removed, and all the
cards that are to the right of it are shifted to the left by one place. If
there are several such pairs, then the pair is chosen that is nearer to the
beginning of the row. Sifting can be performed many times, as long as there are
such pairs in the row. Zina wins the game if after dealing the whole deck and
sifting there are only two cards in the row.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, if at some moment there were the cards &ldquo;H7 S5 S2
H4&rdquo; in the row (&ldquo;H&rdquo; denotes hearts and &ldquo;S&rdquo;
denotes spades), and the card &ldquo;S7&rdquo; was added, then after the first
sifting we get &ldquo;H7 S5 H4 S7.&rdquo; Then the first of the two pairs is
&ldquo;sifted,&rdquo; and the cards &ldquo;S5 H4 S7&rdquo; are left. Finally,
after sifting, we get &ldquo;H4 S7.&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Zina has always wanted to know the chances of winning the game. Can you
help her?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integer <i>n</i>,
2 &le; <i>n</i> &le; 10000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the probability of winning the game, in the form
of an irreducible fraction. Use the format given in the sample.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">2/3
</PRE></TD></TR></TABLE>
______________________________________________________
1616||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There had never been trams in Square Country. No doubt, this worried
citizens a lot. At a referendum, people decided that a tram network should be
built all over the country. They also wanted this network to be connected with
the tram network of adjacent Rectangular Country. However, when projecting
works started, it turned out  that there was a problem: Square Country and
Rectangular Country had different coordinate systems; moreover, their
coordinate axes were not parallel.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">President of Square Country held a meeting with Square Parliament and took a
historic decision to turn the coordinate system of the country by an angle
&alpha; about the point (0, 0). The decision turned out to be rather unpopular
because in Square Country all privately-owned plots of land were sets of
squares with sides parallel to the coordinate axes and with integer-coordinate
vertices. That meant that after the historic turn it would be necessary to
alter the boundaries of private estates. The rules of establishing new
boundaries was approved by President's decree. For each cell of unit size, a
new owner was to be established as follows. If there was a citizen who owned
more than a half of that cell, then this person was to become the new owner of
the whole cell. Otherwise, the whole cell was to become state property.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Square Government asked you to automatize the redistribution of private
property. You are given a map where all plots are shown. You must compile a new
map in which plots after the turn will be shown.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Plots located far from the center are not in demand
in Square country; that is why all private estates are situated inside the
square <nobr>[&minus;<i>n</i>, <i>n</i>] &times; [&minus;<i>n</i>,
<i>n</i>]</nobr>. The map is a square table in each cell of which there is a
lowercase English letter, which is a unique code of the owner of the
corresponding plot. If there is a dot in a cell, then the corresponding plot
belongs to the state. In the map, the <i>x</i> axis is directed to the right,
and the <i>y</i> axis is directed upward.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the numbers <i>n</i> and &alpha; separated by a
space; <nobr>1 &le; <i>n</i> &le; 30;</nobr> <nobr>0 &le; &alpha; &le;
90;</nobr> the angle &alpha; is given in degrees. The following 2<i>n</i> lines
contain 2<i>n</i> symbols each; they form the map of private estates inside the
square <nobr>[&minus;<i>n</i>, <i>n</i>] &times; [&minus;<i>n</i>,
<i>n</i>]</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the turn, some estates may fall out of the square
<nobr>[&minus;<i>n</i>, <i>n</i>] &times; [&minus;<i>n</i>, <i>n</i>]</nobr>.
Therefore, output the map of estates in the square <nobr>[&minus;2<i>n</i>,
2<i>n</i>] &times; [&minus;2<i>n</i>, 2<i>n</i>]</nobr> after the turn of
coordinates and property redistribution, in the same format.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 45.0
aaaa
aaaa
bb.x
bbx.
</PRE></TD><TD><PRE CLASS="intable">........
........
...aa...
..aa.x..
..a..x..
...bb...
........
........
</PRE></TD></TR></TABLE>
______________________________________________________
1617||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Yekaterinburg has an extensive network of tram routes. Trams of more than
ten routes go along some streets. It is clear that rails wear out quickly
because of such a load. Rails near tram stops sometimes are wavy. Many citizens
hold the city authorities responsible for such a poor state of tram railways:
repair works are carried out rarely, and even if rails are replaced, it is only
by cheapest ones&mdash;made of low-grade metal and with wooden ties.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, not only authorities are guilty of this situation. Some tram
drivers are fans of fast driving, and they damage both rails and their trams.
If a tram accelerates to a high speed, say 80 kilometers per hour, and then
brakes sharply before a stop, it goes some distance skidding. This leads not
only to rail spoilage, but also to wearing out wheels at the places where they
touch rails. Flat spots emerge on the wheels, which cause pounding of the
wheels, rattle of the car, and further rail spoilage.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The administration of the tram depot decided to improve the situation by
servicing all trams that have wheels with flat spots. To remove flat spots,
wheels will be turned on a special lathe. Wheels from the same pair will be
decreased to equal size, but wheels from different pairs may become different
in size. To equip a car with wheels, repairmen must choose four wheel pairs
with equal wheel diameters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Repairmen have finished turning all wheels. Some of them have become so
small that they can't be used anymore. Such wheels will be sent for remelting.
Instead of them, a stock of wheel pairs left from written-off cars can be used.
Repairmen have measured all wheel pairs that can be mounted to cars, and now
they need to know how many cars can be equipped.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"> The first line contains the number <i>n</i> of available
wheel pairs (1 &le; <i>n</i> &le; 150). In the following <i>n</i> lines,
diameters of wheels in millimeters are given (they are integers in the range
from 600 to&nbsp;700).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of cars that can be equipped with
wheels using the given set of wheel pairs.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9
689
690
690
689
689
690
689
688
688</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE>
______________________________________________________
1618||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Java language contains arrays as special classes. Since every class in Java derives from <code>java.lang.Object</code>, every array does, too. An array of objects can contain other arrays as elements. In this problem, we consider only arrays that contain other arrays as elements, or arrays that are empty.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sometimes we should print the given array as a string. To do this, we may use the dedicated method, <code>java.util.Arrays.deepToString</code>. This method returns a string representation of the "deep contents" of the specified array. If the array contains other arrays as elements, the string representation contains their contents and so on. This method is designed for converting multidimensional arrays to strings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The string representation consists of a list of the array's elements, enclosed in square brackets ("[]"). Adjacent elements are separated by the characters ",&nbsp;" (a comma followed by a space). All the elements are converted to strings by invoking this method recursively.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, we may take the array</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">Object[] A = new Object[2];
A[0] = new Object[0];
A[1] = new Object[0];</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">and the invocation of <code>deepToString</code> on it will return <code>[[],&nbsp;[]]</code>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Note that a variable of object type in Java is a reference. As a result, an array may contain the same object more than once, and two arrays may contain the same object as an element. So, different arrays may give the same string representation. For example, the array
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">Object[] B = new Object[2];
B[0] = new Object[0];
B[1] = B[0];</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">will have the same string representation as array <code>A</code> has.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let's determine the equality relation for array configurations. Two configurations <code>A</code> and <code>B</code> are considered equal if the following statements
<ul>
 <li><code>A[a<sub>1</sub>][a<sub>2</sub>]&hellip;[a<sub>k</sub>] == A[b<sub>1</sub>][b<sub>2</sub>]&hellip;[b<sub>k</sub>]</code></li>
 <li><code>B[a<sub>1</sub>][a<sub>2</sub>]&hellip;[a<sub>k</sub>] == B[b<sub>1</sub>][b<sub>2</sub>]&hellip;[b<sub>k</sub>]</code></li>
</ul>
 are equivalent for all possible sequences of <code>a<sub>i</sub></code> and <code>b<sub>j</sub></code>. Here, the relation "<code>==</code>" should be treated as "equal by reference".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the outcome of the invocation of <code>deepToString</code>, find the number of different array configurations that give the specified result. You may assume that the given string will be a string representation of multidimensional array with constant dimensions created with the construction 
<code>new Object[a<sub>1</sub>][a<sub>2</sub>]&hellip;[a<sub>n</sub>][0]</code>. Here <i>n</i> &le; 100; <i>a</i><sub>1</sub>, &hellip;, <i>a<sub>n</sub></i> are positive integers, <i>a</i><sub>1</sub> &middot; <i>a</i><sub>2</sub> &middot; &hellip; &middot; <i>a<sub>n</sub></i> &le; 512.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input will consist of a single non-empty string <i>S</i> with length not exceeding 10<sup>5</sup>. This string will be an outcome of calling <code>deepToString</code> on an array of the described type.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of array configurations with the given string representation modulo 10007. 
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">[[], []]</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR><TR><TD><PRE CLASS="intable">[[[[]]]]</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">[[[]], [[]]]</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The arrays in the third example were created by the following statements:

<ol>
<li>
<pre>
third = new Object[2][1][0];
</pre>
</li>

<li>
<pre>
Object level1 = new Object[1][0];
third = new Object[] { level1, level1 };
</pre>
</li>

<li>
<pre>
Object level2 = new Object[0];
third = new Object[] { new Object[] { level2 }, new Object[] { level2 } };
</pre>
</li>
</ol>
</DIV></DIV>
______________________________________________________
1619||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alex and Bob are brothers. Alex is the elder brother, and Bob is the younger one.
Since the last New Year Day, their parents started giving them pocket money as a fee for
household assistance or good marks in school. The children are in the seventh heaven. They became A-students, run to the shop one ahead of another to buy some bread and clean the room in the sake of making more money. Brothers do not spend their money but store them in two separate piggy-banks: Alex wants to buy a bicycle, and Bob aims to save a million.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alex is the elder brother, so he would become angry if at some moment the sum in the piggy-bank of the younger brother becomes greater than in his one. Certainly, he would break all the windows in the nearest house in such case. Bob is above all this&nbsp;&mdash; he has a great aim, so such an issue is not worth breaking nerves. </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poor brothers! They don't know that in fact not all their good deeds will be paid, and the sums to be given away for them are determined well ahead. Notably, during this year Alex will be given <i>K</i> euros, and Bob will be given <i>M</i> euros. A good deed is rewarded by giving 1 euro, and in no case the brothers would be paid simultaneously.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider <i>K</i> good deeds of Alex and <i>M</i> those of Bob which will be paid off and assume that every permutation of those deeds is equally probable. Find the probability for the window in the next house to remain unbroken during the year.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is the number of test cases <i>N</i>. <i>N</i> &le; 2004.
Each of the next <i>N</i> lines consists of two integers <i>K<sub>i</sub></i> and <i>M<sub>i</sub></i>&nbsp;&mdash; the amounts of money to be paid to elder and younger brother, respectively. 0 &le; <i>K<sub>i</sub></i>, <i>M<sub>i</sub></i> &le; 10<sup>4</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case, output the answer on a separate line with precision not less than 10<sup>&minus;6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 0
0 1
1 1</PRE></TD><TD><PRE CLASS="intable">1
0
0.5</PRE></TD></TR></TABLE>
______________________________________________________
1620||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little boy Vasya likes high-end technologies. Recently he read about "clever houses",
where everything is managed automatically, and decided to make his house "clever".
To begin with, he connected all <i>N</i> light-bulbs to his computer, which will help
to manage the lighting level and save the energy.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little hacker Petr, who lives nearby, decided to make a nasty thing to Vasya. He 
created a computer virus. The main action of this virus is to select a random 
light-bulb and change its state (to switch off if it was on, and vice versa). This
action is repeated for <i>K</i> times.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the beginning there were <i>M</i> light bulbs turned on. Now Petr wants to know how efficient his attack will be. More precisely, he wants to know how much light-bulbs in average will be on after the virus is activated (the mathematical expectation of this value). Help him in this complex task!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the only line there are three integers: <i>N</i> <nobr>(1 &le; <i>N</i> &le; 10<sup>9</sup>)</nobr>, <i>M</i> <nobr>(0 &le; <i>M</i> &le; <i>N</i>)</nobr>, <i>K</i> <nobr>(0 &le; <i>K</i> &le; 1000)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the answer as an irreducible fraction <i>p</i>/<i>q</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1 9</PRE></TD><TD><PRE CLASS="intable">0/1</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 4 3</PRE></TD><TD><PRE CLASS="intable">353/125</PRE></TD></TR></TABLE>
______________________________________________________
1621||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to evaluate the following definite integral:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>P</i>(<i>x</i>) = <i>a</i><sub>4</sub> &middot; <i>x</i><sup>4</sup> + <i>a</i><sub>3</sub> &middot; <i>x</i><sup>3</sup> + <i>a</i><sub>2</sub> &middot; <i>x</i><sup>2</sup> + <i>a</i><sub>1</sub> &middot; <i>x</i> + <i>a</i><sub>0</sub>. <i>P</i>(<i>x</i>) has no real roots and GCD(<i>P</i>(<i>x</i>), <i>P</i>'(<i>x</i>)) = <i>const</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains five integers: <i>a</i><sub>0</sub>, <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, <i>a</i><sub>3</sub> and <i>a</i><sub>4</sub> separated by whitespace. Each of these numbers does not exceed 10<sup>6</sup> by absolute value, <i>a</i><sub>4</sub> &ne; 0.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the value of the integral. Assume that the exact value is <i>A</i> and your answer is <i>B</i>. Your answer will be considered correct if and only if at least one of the following statements is true:
<ul>
<li> <i>A</i> &minus; 10<sup>&minus;9</sup> &le; <i>B</i> &le; <i>A</i> + 10<sup>&minus;9</sup></li>
<li> <i>A</i> &middot; (1 &minus; 10<sup>&minus;9</sup>) &le; <i>B</i> &le; <i>A</i> &middot; (1 + 10<sup>&minus;9</sup>)</li>
</ul></DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">16 0 0 0 1</PRE></TD><TD><PRE CLASS="intable">0.2776801836
</PRE></TD></TR></TABLE>
______________________________________________________
1622||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a game called "Yoga". On the game board there are 32 checkers, standing as shown on the picture. 
Each turn a checker jumps over another one and lands on a free cell&nbsp;&mdash; almost like in the
checker game, but vertically or horizontally, not diagonally. The checker which was jumped over is removed
from the board.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">We will look at endspiel, the last part of the game. Imagine that there is only one checker left.
Given its location, find a possible sequence of turns that leads to this endspiel.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us introduce a coordinate system similar to the one that is used in the game of chess. The columns are numbered by Latin letters from A to G, the rows are numbered from 1 to 7. For example, a cell with coordinates "D4" is the central cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the coordinates of the last checker
in the notation described above.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to reach the specified endspiel, output the sequence of turns leading to it. Each turn should be printed in the following format: &lt;<i>start&nbsp;cell</i>&gt;&ndash;&lt;<i>finish&nbsp;cell</i>&gt;, where
&lt;<i>start&nbsp;cell</i>&gt; is the coordinates of a cell where the moving checker is located before the turn, 
and &lt;<i>finish&nbsp;cell</i>&gt; is the coordinates of its destination cell. There will always be 31 turns.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to find the necessary sequence, output the word "Impossible".
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">D4</PRE></TD><TD><PRE CLASS="intable">B4-D4
C6-C4
A5-C5
...
C5-C3
B3-D3
D2-D4</PRE></TD></TR><TR><TD><PRE CLASS="intable">D3</PRE></TD><TD><PRE CLASS="intable">Impossible</PRE></TD></TR></TABLE>
______________________________________________________
1623||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Roman adores all kinds of labyrinths. He solves them since his early childhood.
Yesterday he found a new, extremely amazing sort of labyrinth. He called it a "fractal labyrinth".
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine a house with <i>N</i> doors. Inside it, there are <i>K</i> houses, each of them an entire copy of the "outer" one. Some doors are connected by roads. If you draw these roads, you get something like this:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Remembering that each "inner" house is a copy of the "outer house", you get the following picture 
as a result:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following picture is an example of a house with 2 inner houses:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For outer house, some door is defined as "input" and some door as "output", so we finally come up to a labyrinth. Assuming that length of each road is 1, find the length of the shortest path in such labyrinth.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there are numbers <i>N</i> <nobr>(2 &le; <i>N</i> &le; 20)</nobr> and <i>K</i> <nobr>(0 &le; <i>K</i> &le; 5)</nobr>. The next line contains <i>M</i>, the number of the roads. In the following <i>M</i> lines there are descriptions of the roads, one per line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each road description is formatted in the following way: </DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">&lt;house-number&gt;.&lt;door-number&gt; - &lt;house-number&gt;.&lt;door-number&gt;</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where left and right part of description specify the connected doors (a door is described by its number and
number of house it belongs to). Each road is bidirectional. The "outer" house has number 0, "inner" houses have numbers from 1 to <i>K</i>. Door numbers start with 0. No two roads connect the same pair of doors. No road connects a door to itself.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the last line there are numbers of input and output door <i>D<sub>i</sub></i> and <i>D<sub>o</sub></i>. These numbers may coincide.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there exists a path from input to output, print the minimal length of such path. Otherwise, print "no&nbsp;solution".</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12 1
11
0.0 - 1.1
0.1 - 0.2
1.2 - 1.3
0.3 - 0.4
1.4 - 1.5
0.5 - 0.6
1.6 - 1.7
0.7 - 0.8
1.8 - 1.9
0.9 - 0.10
1.10 - 0.11
0 11</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR><TR><TD><PRE CLASS="intable">8 0
8
0.0 - 0.2
0.1 - 0.3
0.2 - 0.4
0.3 - 0.5
0.4 - 0.6
0.5 - 0.7
0.6 - 0.0
0.7 - 0.1
2 5</PRE></TD><TD><PRE CLASS="intable">no solution</PRE></TD></TR></TABLE>
______________________________________________________
1624||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two scouts were sent on a top-secret mission. Unfortunately, they were captured and put in prison.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The plan of the prison is a rectangle divided into square cells with walls parallel to the North-to-South and East-to-West lines. There are doors between some pairs of neighbour cells and walls between the others. Surely, all the outer prison sides are walls&nbsp;&mdash; if not, what a sort of prison would it be?</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Scouts have to get out of the prison as soon as they could. However, there is an aggravating circumstance: they have been made blind (luckily, only temporarily) by special medicine. Still, both of them have transmitters embedded under their skin, so they could communicate with a base.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The problem is that the scouts didn't know their coordinates relative to the prison. Furthermore, they are unable neither to communicate, nor to see each other, even if occupy the same prison cell.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So the headquaters ordered to proceed as follows: scouts in turn try to move to the neighbour prison cell in one of the four directions (North, South, East or West&nbsp;&mdash; what sort of a scout you are if you can't find north with eyes closed!) and report the direction and whether the move was successful or not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The scouts should be located by their reports and helped to get out. You are given the records of reports of the scouts. Now, determine the minimal number of steps made by scouts after that it becomes possible to determine precisely the coordinates of the scouts.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the prison width <i>W</i> and height <i>H</i>, and the number of scouts' reports <i>K</i> (<nobr>2 &le; <i>W</i> &middot; <i>H</i> &le; 150;</nobr> <nobr>1 &le; <i>K</i> &le; 10<sup>5</sup></nobr>). <i>W</i>&nbsp;is the number of square cells in the direction from East to West, and <i>H</i>&nbsp;&mdash; from North to South.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The reports of the scouts are located in the following <i>K</i> lines. Each report consists of two symbols: ("N", "S", "E", "W")&nbsp;&mdash; the direction and ("+", "-")&nbsp;&mdash; whether the move was successful or not. The odd reports are of the first scout, the even are of the second one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a scout makes a successful move, he moves to the destination square. Otherwise, he remains in the same square.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to determine the coordinates of both scouts, output "The scouts are safe at step number" and the one-based number of report after which they become known.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to determine the coordinates, output "There is not enough data".</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are mistakes in the reports (not in the input format), output "A mistake has been made at step number" and the number of first report incompatible with some of the previous ones. Note that you should output this even if there is a mistake after the moment the coordinates are determined.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 1 4
E+ 
W-
N- 
S-
</PRE></TD><TD><PRE CLASS="intable">The scouts are safe at step number 2</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 1 4
N-
W-
N-
S-</PRE></TD><TD><PRE CLASS="intable">There is not enough data</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 1 4
N-
W-
N-
S+</PRE></TD><TD><PRE CLASS="intable">A mistake has been made at step number 4</PRE></TD></TR></TABLE>
______________________________________________________
1625||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>Hankel matrix</i> is a matrix of the following form:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find an integer Hankel matrix of the given size with all non-negative elements and with determinant equal to one. Moreover, all its square submatrices containing upper left cell must also have determinant equal to one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Input contains the size of the matrix <i>n</i>, 1 &le; <i>n</i> &le; 100.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output non-negative integers <i>&alpha;</i><sub>1</sub>, <i>&alpha;</i><sub>2</sub>, &hellip;, <i>&alpha;</i><sub>2<i>n</i>&minus;1</sub> from which the matrix is built, one per line. All <i>&alpha;<sub>i</sub></i> shouldn't have more than 300 decimal digits. You may assume that such numbers always exist.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">1
6
37
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">1
3
10
7
630
</PRE></TD></TR></TABLE>
______________________________________________________
1626||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>triangulation</i> of a polygon <i>P</i> is its partition into non-overlapping triangles whose union is <i>P</i>. In this problem, we put some restrictions on triangulations: all vertices of a triangle must coincide with some vertices of <i>P</i> and no vertex of <i>P</i> must lie on a boundary of a triangle (except for triangle's vertices). We call a segment <i>interfering</i> with a triangulation if it intersects (or touches) a boundary of some triangle of the triangulation.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is, given the polygon <i>P</i> and segment <i>S</i>, to determine whether there exists a triangulation that <i>S</i> does not interfere with. Since it is well-known that all simple polygons can be triangulated, you have only to output the triangle that belongs to some triangulation and contains <i>S</i> strictly inside.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is <i>N</i> <nobr>(3 &le; <i>N</i> &le; 800)</nobr>&nbsp;&mdash; the number of vertices in <i>P</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following <i>N</i> lines contain pairs of integers (<i>X<sub>i</sub></i>,&nbsp;<i>Y<sub>i</sub></i>)&nbsp;&mdash; the coordinates of vertices of <i>P</i> in the order of traversal. All points are distinct, and no three consecutive points lie on the same line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The last line contain four integers <i>X<sub>s</sub></i>, <i>Y<sub>s</sub></i>, <i>X<sub>f</sub></i>, <i>Y<sub>f</sub></i>&nbsp;&mdash; the coordinates of endpoints of <i>S</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All coordinates do not exceed 10<sup>4</sup> by absolute value. The segment <i>S</i> is guaranteed to lie strictly inside the polygon <i>P</i>. <i>S</i> is also guaranteed to have non-zero length.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the solution does exist, output the one-based indices of vertices of triangle that belongs to some triangulation and contains <i>S</i> strictly inside. The indices must be output in a single line and separated by single spaces.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the solution does not exist, output the word "Impossible" in a single line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0
0 3
4 3
1 2 2 2
</PRE></TD><TD><PRE CLASS="intable">1 2 3</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
0 0
2 0
2 3
0 3
1 1 1 2</PRE></TD><TD><PRE CLASS="intable">Impossible</PRE></TD></TR></TABLE>
______________________________________________________
1627||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Businessman Petya recently bought a new house. This house has one floor with <nobr><i>n</i> &times; <i>m</i></nobr> square rooms, placed in rectangular lattice. Some rooms are pantries and the other ones are bedrooms. Now he wants to join all bedrooms with doors in such a way that there will be exactly one way between any pair of them. He can make doors only between neighbouring bedrooms (i.e. bedrooms having a common wall). Now he wants to count the number of different ways he can do it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains two integers <i>n</i> and <i>m</i> <nobr>(1 &le; <i>n</i>, <i>m</i> &le; 9)</nobr>&nbsp;&mdash; the number of lines and columns in the lattice. Next <i>n</i> lines contain exactly <i>m</i> characters representing house map, where "." means bedroom and "*" means pantry. It is guaranteed that there is at least one bedroom in the house.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of ways to join bedrooms modulo 10<sup>9</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
..
..
</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2
*.
.*</PRE></TD><TD><PRE CLASS="intable">0</PRE></TD></TR></TABLE>
______________________________________________________
1628||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The life of every unlucky person has not only black but also white streaks. The Martian Vas-Vas has a calendar in the form of an <i>m</i>&nbsp;&times;&nbsp;<i>n</i> table; he marks in this calendar days when he had bad luck. If Vas-Vas had bad luck in the <i>j</i>th day of the <i>i</i>th week, he paints the cell (<i>i</i>, <i>j</i>) black. Initially, all cells are white.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let rectangles of the form 1&nbsp;&times;&nbsp;<i>l</i> or
<i>l</i>&nbsp;&times;&nbsp;1 be called segments of life. Maximal with respect
to inclusion white segments are called white streaks. Can you determine how
many white streaks there were in the life of Vas-Vas?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>m</i>, <i>n</i>, and <i>k</i>, which are the size of the calendar and the number of unlucky days in it <nobr>(1 &le; <i>m</i>, <i>n</i> &le; 30000;</nobr> <nobr>0 &le; <i>k</i> &le; 60000)</nobr>. In the following <i>k</i> lines, unlucky days are given in the form of pairs (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>), where <i>x<sub>i</sub></i> is the number of the week to which the unlucky day belongs and <i>y<sub>i</sub></i> is the number of the day within this week <nobr>(1 &le; <i>x<sub>i</sub></i> &le; <i>m</i>;</nobr> <nobr>1 &le;
<i>y<sub>i</sub></i> &le; <i>n</i>)</nobr>. Every unlucky day is given in the
input only once.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of white streaks in the life of
Vas-Vas.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 5 4
1 1
1 5
2 2
3 3
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 1 2
2 1
3 1
</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1629||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Son-of-Sam had to go a long way from Yekaterinozavodsk to the transoceanic
city Vas Legas, where an international contest in brick laying was to be held.
The airport of Yekaterinozavodsk was numbered&nbsp;1, and the airport of Vas
Legas was numbered&nbsp;<i>N</i>. Long-distance flights had been recognized as
dangerous, and there were only flights between cities whose numbers differed
by&nbsp;1. That meant that Son-of-Sam had to make <i>N</i>&nbsp;&minus;&nbsp;2
changes. He had downloaded schedules of all flights and determined which
flights he would take. However, when he came to the airport of Yekaterinozavodsk
exactly at midnight, he learned a disappointing news: because of
meteorological, economic, and geopolitical reasons, all flights would leave the
<i>i</i>th airport <i>D<sub>i</sub></i> minutes later than the time given in
the schedule. Son-of-Sam had to know in what time he would be in Vas Legas,
only to see that he was late for the contest because of his bad luck.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of
cities&nbsp;<i>N</i> in Son-of-Sam's route (2 &le; <i>N</i> &le; 100). Then the
airports with numbers 1, 2, &hellip;, <i>N</i>&nbsp;&minus;&nbsp;1 are
described successively. The first line of the description of the <i>i</i>th
airport contains integers <i>Q<sub>i</sub></i>, <i>D<sub>i</sub></i>, and
<i>T<sub>i</sub></i> separated with a space; they are the number of flights
leaving every day from the airport <i>i</i> to the airport
<i>i</i>&nbsp;+&nbsp;1, the delay in minutes in the departures from the
<i>i</i>th airport, and the time in minutes of flying from the airport <i>i</i>
to the airport <i>i</i>&nbsp;+&nbsp;1 <nobr>(1 &le; <i>Q<sub>i</sub></i> &le;
10;</nobr> <nobr>0 &le; <i>D<sub>i</sub></i>, <i>T<sub>i</sub></i> &lt;
1440</nobr>). In the second line of the description of an airport, there are
departure times, separated with a space, for all <i>Q<sub>i</sub></i> flights
in the format <i>HH:MM</i> <nobr>(0 &le; <i>HH</i> &le; 23;</nobr> <nobr>0 &le; <i>MM</i> &le; 59).</nobr> The flight schedule is the same every day, and Son-of-Sam can change flights instantly.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output time in minutes in which Son-of-Sam will be in Vas Legas.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2 60 1200
00:00 01:00
2 0 300
20:30 21:30
</PRE></TD><TD><PRE CLASS="intable">1590
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 0 600
10:00
1 60 60
19:00
</PRE></TD><TD><PRE CLASS="intable">1260
</PRE></TD></TR></TABLE>
______________________________________________________
1630||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Having surveyed his worktable once again, Petya suddenly understood the
cause of all his recent failures: of course, the talisman! His usual talisman,
the pink pig, apparently couldn't help him in the contest. Petya pondered over
this problem and came out with a set of conditions for a new talisman:

<ol> <li>The talisman must be a structure consisting of identical balls with a
radius of 1&nbsp;mm in 3-dimensional space; some of the balls must be connected
by 8&nbsp;mm long rods.</li> <li>If two balls are connected by a chain of rods,
then the minimal number of rods in a chain connecting these balls must be equal
to the distance in centimeters between the centers of the balls.</li> </ol>

Petya has developed a scheme describing the number of balls in his future
talisman and the pairs of balls that must be connected by rods. Now he wants to
write a program that will find if it is possible to construct a talisman
according to this scheme. However, as Petya still doesn't have a proper
talisman, he can't produce a working program. That is why Petya asks for your
help.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of balls&nbsp;<i>N</i> and the number of rods&nbsp;<i>M</i> in Petya's scheme (<nobr>1 &le; <i>N</i> &le; 100;</nobr> <nobr>0 &le; <i>M</i> &le; 10000</nobr>). In the following <i>M</i> lines, pairs of balls connected by rods are given. The balls are numbered from 1 to <i>N</i>. For any two balls in the scheme, there is at most one rod connecting them; no ball is connected by a rod with itself.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to construct a talisman by Petya's scheme, output &ldquo;Luck is possible&rdquo;; otherwise, output &ldquo;Unlucky Petr&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
1 2
1 3
2 3
</PRE></TD><TD><PRE CLASS="intable">Luck is possible
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 4
1 2
1 3
1 4
2 3
</PRE></TD><TD><PRE CLASS="intable">Unlucky Petr
</PRE></TD></TR></TABLE>
______________________________________________________
1631||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once upon a time King, Knight, and Bishop met each other on an
<i>m</i>&nbsp;&times;&nbsp;<i>n</i> chess board with odd lengths of sides. They
started speaking about traversals of the chess board. It turned out that each
of them had always been unlucky in this. Bishop complained that he couldn't
traverse the board visiting every cells exactly once because he was allowed to
step only on cells of the same color. Knight said that he could visit all cells
but couldn't do it in such a way as to return to the cell from which he had
started. And King said that he could traverse the board but the dream of his
life had always been to find a closed traversal with a length
of&nbsp;<i>mn</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Out of grief, the three friends drank and then continued their talk. King
said that recently he had found a closed
(<i>mn</i>&nbsp;&minus;&nbsp;1&nbsp;+&nbsp&radic;2) long traversal. Knight and
Bishop started laughing at him: &ldquo;You're drunk now! You can't traverse it
at all!&rdquo; Indeed, King was so drunk that he couldn't make two consecutive
moves in the same direction. However, King traversed the board in front of
their very eyes. Moreover, he said that the traversal was the shortest one.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To be sure that King hadn't cheated, Bishop and Knight wanted to know the
length of the shortest traversal of the drunk King. They couldn't calculate
this length, being drunk themselves, so they asked you to help them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Remember that a traversal of the board must satisfy the following
requirements:

<ul> <li>King starts and finishes the traversal in a corner of the board.</li>
<li>Every cell except for the first one is visited exactly once.</li> <li>King
can't make two consecutive moves in the same direction.</li> <li>King is not
allowed to cross his own route (otherwise, he may get confused and walk the
wrong way).</li> </ul></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the odd integers <i>m</i>
and <i>n</i> (<nobr>6 &lt; <i>m</i>, <i>n</i> &lt; 500</nobr>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the length of the shortest traversal of the drunk
King accurate to 10<sup>&minus;9</sup>. The existence of such a traversal is
guaranteed.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 7
</PRE></TD><TD><PRE CLASS="intable">55.213203435596425732025330863145
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Below is an example of a shortest traversal of the 7&nbsp;&times;&nbsp;7 chess
board satisfying the conditions of the problem:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>
______________________________________________________
1632||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Never before the special agent Ivan Okhotnichii had been so close to a failure. It had seemed that to get into a secret laboratory through a ventilation hole in the ceiling and hack the computer would be no trouble. However, from above Ivan noticed that the laboratory was pierced by <i>N</i> laser beams. Touching any of them would activate the alarm system. The <i>i</i>th beam was generated by an emitter located at the point
(<i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>, <i>Z<sub>i</sub></i>) and was directed along the vector (<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>w<sub>i</sub></i>). Ivan examined the room and determined the numbers <i>X<sub>i</sub></i> and <i>Y<sub>i</sub></i>. He also computed the vectors (<i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>,  <i>w<sub>i</sub></i>). However, in order to plan his further actions, Ivan had to know the Z coordinates of the emitters as well.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Luckily, for some pairs of laser beams Ivan managed to determine that the first beam in the pair was <i>above</i> the second (that meant that there existed <i>X</i>, <i>Y</i>, <i>Z</i><sub>1</sub>, <i>Z</i><sub>2</sub> such that the point <nobr>(<i>X</i>, <i>Y</i>, <i>Z</i><sub>1</sub>)</nobr> belonged to the first beam, the point <nobr>(<i>X</i>, <i>Y</i>, <i>Z</i><sub>2</sub>)</nobr> belonged to the second beam, and
<i>Z</i><sub>1</sub> was greater than <i>Z</i><sub>2</sub>). Help Ivan to find one of the possible arrangements of the lasers in space.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of lasers <i>N</i> <nobr>(1 &le; <i>N</i> &le; 100)</nobr>. In each of the following <i>N</i> lines, there are the integers <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>, <i>u<sub>i</sub></i>, <i>v<sub>i</sub></i>, <i>w<sub>i</sub></i>, which describe the <i>i</i>th laser; these numbers are in the range from &minus;100 to 100. In the next line, there is the number <i>M</i> of pairs of lasers for which their relative positions are known <nobr>(0 &le; <i>M</i> &le; 10000)</nobr>. Each of the following <i>M</i> lines contains two different integers <i>i</i> and <i>j</i>, which mean that the <i>i</i>th laser is above the <i>j</i>th
laser <nobr>(1 &le; <i>i</i>, <i>j</i> &le; <i>N</i>)</nobr>. None of the laser beams is parallel to the OZ axis, and no two beams lie in the same vertical plane.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> real numbers, one number per line, which are the coordinates <i>Z<sub>i</sub></i>. Their absolute values shouldn't exceed&nbsp;10<sup>6</sup>. The numbers must be given with the maximal possible accuracy. The existence of at least one arrangement of lasers complying with the input data is guaranteed.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0 1 0 0
1 0 0 1 0
1 1 -1 0 0
0 1 0 -1 0
3
1 2
2 3
3 4
</PRE></TD><TD><PRE CLASS="intable">4.000
3.000
2.000
1.000
</PRE></TD></TR></TABLE>
______________________________________________________
1633||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">About twenty years ago, the dispute concerning the danger of hippogriffs was over at last. The Ministry of Magic issued a decree ordering the calculation of a hippogriff's danger  according to the formula sqrt(<i>A</i><sup>2</sup> + <i>B</i><sup>2</sup>), where <i>A</i> is the length of the hippogriff's beak and <i>B</i> is the length of its claws.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One farmer in the north of England bred hunter hippogriffs, but always had trouble finding customers. A kind wizard advised the farmer to buy a mutation elixir, which could make hippogriffs look more dangerous (then the creature would be more suitable for hunting). The farmer bought the elixir at a local magic shop and used it on his stock. He found that if a hippogriff of nonzero danger whose beak was <i>A</i> in length and claws were <i>B</i> in length drank the elixir, the length of its beak became <i>a</i><sub>1</sub><i>A</i> + <i>b</i><sub>1</sub><i>B</i> and the length of its claws became <i>a</i><sub>2</sub><i>A</i> + <i>b</i><sub>2</sub><i>B</i>. The quality of an elixir is the maximal influence of this elixir on a hippogriff (any hippogriff, and not only those at the farm), and the influence of an elixir on a hippogriff is the factor by which the danger of this hippogriff increases after the
mutation. The farmer suspects that the salesman cheated him by selling an elixir of lower quality than usual. He wants to calculate the quality of an elixir using parameters <i>a</i><sub>1</sub>, <i>b</i><sub>1</sub>, <i>a</i><sub>2</sub>, <i>b</i><sub>2</sub>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>a</i><sub>1</sub> and <i>b</i><sub>1</sub>. The second line contains the integers <i>a</i><sub>2</sub> and <i>b</i><sub>2</sub>. The parameters are nonnegative and don't exceed&nbsp;10<sup>6</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the quality of the elixir with the given parameters accurate to 9 fractional digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2
3 4
</PRE></TD><TD><PRE CLASS="intable">5.4649857042190426504511884932842
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 2
2 4
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE>
______________________________________________________
1634||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The young botanist Vanya decided to grow house plants in his apartment. He bought <i>N</i> tubs with orange trees. Unfortunately, in the summer all his trees became infected with spider mites, which ate away all the leaves. Vanya was very upset. The next day he bought an insecticide and sprayed the trees with it. The mites were killed and new leaves grew on the trees.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After that Vanya opened his botany encyclopedia and read that it was not that easy to deal with spider mites. Even if all the mites on a plant died, there still remained their eggs in the soil, and new vermin would grow from these eggs in a certain period of time. To fight spider mites, the encyclopedia recommended to fix a permutation&nbsp;<i>P</i> and rearrange the tubs with plants according to the rule&nbsp;<i>P</i> after each spraying. It was claimed that all eggs would die as soon as all the tubs were returned to their original places for the first time.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vanya decided to calculate how many times he would need to spray the trees. Let <nobr><i>N</i> = 5</nobr> and <nobr><i>P</i> = (4, 1, 5, 2, 3)</nobr>. Denote the initial arrangement of the tubs with orange trees by <nobr>1, 2, 3, 4, 5</nobr>. Then the tubs will occupy the following places:

<ul> <li>after the first spraying: 2, 4, 5, 1, 3;</li> <li>after the second spraying: 4, 1, 3, 2, 5;</li> <li>after the third spraying: 1, 2, 5, 4, 3;</li> <li>after the fourth spraying: 2, 4, 3, 1, 5;</li> <li>after the fifth spraying: 4, 1, 5, 2, 3;</li> <li>after the sixth spraying: 1, 2, 3, 4, 5.</li> </ul>

In this example, all spider mite eggs will be killed after six sprayings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assuming that all possible permutations of an <i>N</i>-element set are
equiprobable, you must determine the average number of sprayings needed to kill
all eggs.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the number <i>N</i> of orange trees (<nobr>1 &le; <i>N</i> &le; 50</nobr>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Calculate the average number of sprayings necessary for the total extermination of spider mites and their eggs, and output the integer part of this number.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">1
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample there exist two permutations of orange trees: (1, 2) and (2, 1). If the first permutation is chosen, then the mites will die immediately after the first spraying; in the case of the second permutation, the mites will die after the second spraying. Thus, the average number of sprayings is&nbsp;1.5.</DIV></DIV>
______________________________________________________
1635||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The student Vasechkin was terribly unlucky at his oral examination. Of 42 examination questions, he didn't prepare only the last one, and he was asked exactly that question. Vasechkin was sitting in front of the professor and couldn't say anything. But the professor was in good mood and gave Vasechkin one last chance to pass the exam. He asked the poor student to name the subject in which the exam was being held. Unfortunately, Vasechkin couldn't recall the name, though he remembered that in that name there were such words as safety, programs, devices, and, possibly, informatics&hellip;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To get ready for the reexamination, Vasechkin decided to learn the name of the subject. To better remember that long string, he decided to decompose it into palindromes and learn each of the palindromes separately. Of course, the number of palindromes in the decomposition had to be as small as possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there is the name of the subject in which Vasechkin was examined. This is a nonempty line consisting of lowercase English letters. The length of the line is at most 4000 symbols.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal number of palindromes to which the name of the subject can be decomposed. In the second line output palindromes from the optimal decomposition separated by a space. If several answers are possible, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">pasoib
</PRE></TD><TD><PRE CLASS="intable">6
p a s o i b
</PRE></TD></TR><TR><TD><PRE CLASS="intable">zzzqxx
</PRE></TD><TD><PRE CLASS="intable">3
zzz q xx
</PRE></TD></TR><TR><TD><PRE CLASS="intable">wasitacatisaw
</PRE></TD><TD><PRE CLASS="intable">1
wasitacatisaw
</PRE></TD></TR></TABLE>
______________________________________________________
1636||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The ZZZ team failed once again. They took part in the contest in Yekaterinozavodsk and were the first to solve all the problems. They did it even before the monitor was frozen. However, in the table of final results they were only second, because the QXX team had a better total time. A member of the QXX team supposes that it happened because the participants were unpunctual and used dirty debug methods. However, the captain of the ZZZ team claims that their complicated tactics had to be blamed for the failure, because even if all their solutions had been accepted in the first run the team would still have taken the second place. Find out which of them is right.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the total times in minutes <i>T</i><sub>1</sub> and <i>T</i><sub>2</sub> of the teams QXX and ZZZ, respectively, separated by a space <nobr>(250 &le; <i>T</i><sub>1</sub> &le; <i>T</i><sub>2</sub> &le; 2400)</nobr>. In the second line there are 10 integers separated by a space; the <i>i</i>th integer is the number of rejected runs that the ZZZ team had when solving the <i>i</i>th problem. Recall that every rejected run increases the total time by 20 minutes.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;No chance.&rdquo; if the rejected runs had no impact on the final place of the ZZZ team. Otherwise, output &ldquo;Dirty debug :(&rdquo;. If total times are equal, the teams are sorted alphabetically, so in this case the ZZZ team is in the second place.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">290 420
0 0 0 2 1 0 2 0 1 0
</PRE></TD><TD><PRE CLASS="intable">No chance.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">300 719
0 0 0 0 0 0 21 0 0 0
</PRE></TD><TD><PRE CLASS="intable">Dirty debug :(
</PRE></TD></TR></TABLE>
______________________________________________________
1637||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Years have passed. Generations have changed. New students play the triangle game at all universities. But Dima and Sasha have been unlucky so many times that they still play this strange game.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dima has a map of Yekaterinozavodsk on his table, and three strategic points are marked on the map: (<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>) is the Yekaterinozavodsk State University, (<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>) is the sushi bar <i>Karelskaya Gornitsa</i>, and (<i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>) is the <i>T34</i> entertainment center, where Dima and Sasha play Russian billiards. These points and the segments that connect them form a nondegenerate triangle, and an equal triangular chip is cut out from a cardboard sheet. The goal of the players is to transfer the chip in several moves to the marked triangle. Each move consists in applying symmetry with
respect to some axis to the chip. You may assume that during the game the chip always remains within the bounds of the map. Sasha wants to determine the minimal number of moves needed for finishing the game.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>, <i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>. The second line contains the current coordinates of the chip: <i>X</i><sub>1</sub>,
<i>Y</i><sub>1</sub>, <i>X</i><sub>2</sub>, <i>Y</i><sub>2</sub>, <i>X</i><sub>3</sub>, <i>Y</i><sub>3</sub>. The absolute values of all numbers do not exceed 2000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to move the chip so that it would coincide with the triangle, output &ldquo;IMPOSSIBLE&rdquo;. Otherwise, output the minimal possible number of moves in which this can be done.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 0 6 3 7 0
0 0 2 3 3 0
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, the first symmetry applied to the chip can be the symmetry with respect to the line <i>x</i> = 2, and the second, with respect to the line <i>x</i> = 4.</DIV></DIV>
______________________________________________________
1638||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petya bought a 100-volume edition of <i>Advice of Veterans of Programming Contests</i> and hoped that the succession of his failures would come to an end. He mounted a bookshelf on the wall and put the volumes onto the shelf in increasing order from left to right closely to each other. But Petya didn't know that inside the first sheet of one of the volumes there lived a mathematical worm, which was infinitely small and very voracious. The worm started to gnaw its way through the volumes perpendicularly to the sheets. It stopped upon reaching the last sheet of another volume. The following day Petya discovered the damage and became interested in how many millimeters the worm had gnawed.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains 4 positive integers not exceeding 100 and separated by a space: the thickness of each volume (without the covers taken into account), the thickness of each book-cover, the number of the volume from which the worm started its route, and the number of the volume where it stopped.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the length of the worm's route.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 1 1 2
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR></TABLE>
______________________________________________________
1639||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little Boy is mad at Karlsson, who ate all the sweets in the flat and even went to the neighbours to eat their sweets too.
Now Little Boy's parents brought home a chocolate bar, and, sure enough, Karlsson is here already and wants to eat it.
However, this time Little Boy has firmly decided that not a single piece of chocolate will go to this glutton.
Little Boy wants to use Karlsson's addiction to the games of chance and suggests playing the following game.
A chocolate bar can be considered as a rectangle of square &ldquo;units&rdquo;
arranged in <i>m</i> rows and <i>n</i> columns and separated by &ldquo;lines&rdquo;.
Two players take alternate turns. At his turn, a player must take one piece
of chocolate and split it into two along one of the lines. If a player can't make a legal move (which happens when
all pieces of chocolate consist of a single unit square), he loses, and the winner takes
all the chocolate.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But Karlsson is smart enough! He immediately understood who should make the first turn in order
for Karlsson to win, assuming that players take optimal turns. Can you guess that?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains space-separated integers <i>m</i> and <i>n</i> 
<nobr>(1 &le; <i>m</i>, <i>n</i> &le; 50)</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Karlsson should start the game in order to win, output &ldquo;[:=[first]&rdquo;; otherwise, output &ldquo;[second]=:]&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4</PRE></TD><TD><PRE CLASS="intable">[:=[first]</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 3</PRE></TD><TD><PRE CLASS="intable">[second]=:]</PRE></TD></TR></TABLE>
______________________________________________________
1640||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lich Sandro declared war to the King of Hell, and now hordes of demons are fighting fiercely against Sandro's army of the undead. Sandro has mastered the Magic of Fire, but the creatures of Hell can't be damaged by fire. That's why Sandro decided to
use a &ldquo;Circle of Winter&rdquo; spell against them. This spell creates an indestructable circular-shaped ice wall. The demons who are touched by the circumference die immediately; the demons enclosed in a circle stay alive, but can't
participate in the fight anymore.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sandro can teleport to any point of the battlefield instantly and cast a &ldquo;Circle of Winter&rdquo; there. An ice wall centered in that point will appear in that case. Note that Sandro's magic skills allow him to cast a wall with a radius not exceeding 10000 metres. Now Sandro wants to choose a point to teleport to and a radius of a spell in such way that at least one demon would be killed and all the rest would be enclosed in a circle.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i>&nbsp;&mdash; the number of demons <nobr>(1 &le; <i>n</i> &le; 100)</nobr>.
Demons can be considered as points on the battlefield. The next <i>n</i> lines contain <i>n</i> pairs of space-separated
integers (<i>x</i>, <i>y</i>)&nbsp;&mdash; the coordinates of the demons relative to the point Sandro occupies
before teleportation. Coordinates are given in metres and don't exceed 1000 in absolute value. Each point
of the battlefield contains no more than one demon; also a demon can't occupy a point the Sandro occupies before teleportation.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output 3 real numbers precise up to 10<sup>&minus;9</sup> &mdash; the coordinates of a point Sandro should teleport to and the radius of a &ldquo;Circle of Winter&rdquo;
he should create. Sandro can't teleport to a point that is occupied by a demon. It is guaranteed that the solution always exists.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
1 1
1 5
3 6
5 3
8 0
9 5
5 9</PRE></TD><TD><PRE CLASS="intable">5 4 5</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0 2
2 0
</PRE></TD><TD><PRE CLASS="intable">1 1 1.41421356237309
</PRE></TD></TR></TABLE>
______________________________________________________
1641||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">School principal introduced a new system of duties to maintain order in all classrooms.
Each student is assigned one classroom he is responsible for. Each day two students responsible for
different classrooms should be on duty. These students should water the flowers
in their classrooms and ensure that the highlighters in computer classrooms are not dry.
The principal wants you to make a plan of the duties for the first <i>m</i> days of study. Each of the students
should be on duty at least once during these days. You are to determine for each student
the classroom he will be responsible for and the days this student will be on duty.
Of course, each classroom should be assigned to at least one student. In addition to that, the principal requires
that no pair of students should be on duty twice. To make your task easier, the principal
allows you to distribute the duties unevenly &mdash; the students who misbehave will have more duties
than those who are diligent.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains three space-separated integers: <i>n</i>&nbsp;&mdash; the number of students in the school,
<i>k</i>&nbsp;&mdash; the number of classrooms, and <i>m</i>&nbsp;&mdash; the number of days in the required plan of duties.
These numbers satisfy the constraint <nobr>2 &le; <i>k</i> &le; <i>n</i> &le; 100</nobr>.
You may assume that there is at least one correct plan of the duties for given <i>n</i>, <i>k</i> and <i>m</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let the students be numbered from 1 to <i>n</i>, and the classrooms numbered from 1 to <i>k</i>.
Output the assignments of the students to the classrooms on the first <i>n</i> lines: <i>i</i>-th
line should contain the number of classroom <i>i</i>-th student is responsible for. The next <i>m</i>
lines should contain the pairs of numbers of students who will be on duty on each of <i>m</i> days.
Remember that these pairs should be unique, and the students who are responsible for the same classroom
can't be paired.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3 4</PRE></TD><TD><PRE CLASS="intable">1
2
1
2
3
1 2
3 4
3 5
4 5
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 2 4</PRE></TD><TD><PRE CLASS="intable">1
2
1
2
1 2
3 4
1 4
2 3</PRE></TD></TR></TABLE>
______________________________________________________
1642||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">1D people lived in a 1D country. Everything in the country was one-dimensional, and everything
was simple and clear: just one axis and two directions &mdash; forward and backward.
Even a 1D world has problems, though; for instance, finding an exit from a maze. An idea of a 1D
maze might seem weird to us, but not to 1D people. Escaping from such a maze is a hard and vital task for them.
They solve this task in a following way.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A 1D person chooses a direction: backward (decreasing his coordinate) or forward (increasing it), and then
moves in this direction.  If he finds an exit, he escapes the maze immediately; if he encounters an
obstacle, he reverses his direction and continues walking.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to feel the hard life of 1D residents, try to implement a function that will compute a distance
a 1D person will walk before finding an exit, based on the initial direction.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i> and <i>x</i>&nbsp;&mdash; the number of obstacles and
the coordinate of an exit point <nobr>(0 &le; <i>n</i> &le; 100)</nobr>. 1D person is located at
the origin. The second line contains <i>n</i> different integers&nbsp;&mdash; the coordinates of the obstacles.
Each coordinate, including <i>x</i>, is non-zero and doesn't exceed 1000 in absolute value. No obstacle
is located at the exit point. It is guaranteed that 1D person will encounter either obstacle or exit point sooner or later regardless of the initial direction.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two space-separated integers &mdash; the distance a 1D person should walk before finding an
exit if his initial direction is forward or backward, respectively. If he can't find the exit
due to the obstacles, output &ldquo;Impossible&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 -2
-10 -4 2
</PRE></TD><TD><PRE CLASS="intable">6 2</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 -2
10 -1 2</PRE></TD><TD><PRE CLASS="intable">Impossible</PRE></TD></TR></TABLE>
______________________________________________________
1643||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Knowing that lich Sandro left to fight the King of Hell, Erathian commanders decided to take advantage
of his absence and take over the Dark Fortress. An army of crusaders led by Catherine Ironfist set out
from Steadwick. On the same day an army of elven snipers led by Gelu set out from the forests of AvLee. The commanders
realize that infantry is vulnerable to liches, and the elven arrows are ineffective against the skeletons,
hence the two armies should unite and attack the Fortress simultaneously. As Sandro may return any moment,
the Fortress should be attacked as soon as possible. As a court cartographer, you are to calculate
the number of days required to implement this plan.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Erathia is divided into square regions. Some of them are passable, some of them are not. On one day, each army can move to one of the adjacent (sharing a vertex with a current region) passable regions. Some of the Erathian passable regions have a teleport of one of 26 types inside. A type of a teleport is indicated by a capital Latin letter. If an army is located in a region with a teleport, it can move
to any region with a teleport of the same type instantly. When two armies are located in the same region, they unite and then start to move as a single army. No army can attack the Fortress (that is, make a move to the region the Fortress is located in) before the union.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i> and <i>m</i>&nbsp;&mdash; dimensions of the map of Erathia <nobr>(1 &le; <i>n</i>, <i>m</i> &le; 100)</nobr>. Then the map itself follows&nbsp;&mdash; <i>n</i> lines of <i>m</i> characters each. The meaning of the characters:<br>
'#' indicates impassable region.<br>
'.' indicates passable region.<br>
'A'&hellip;'Z' indicates a teleport of type corresponding to that letter.<br>
'$' indicates Catherine's army.<br>
'!' indicates Gelu's army.<br>
'*' indicates the Fortress.<br>
It is guaranteed that the characters '*', '$', '!' are encountered exactly once on the whole map.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single integer &mdash; the number of days that should pass before the united army can attack the Fortress. If the Fortress can't be attacked, output &ldquo;Impossible&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 8
....AA.#
.######!
.....*##
.#######
..B$...B</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 5
##*..
!#...
##..$</PRE></TD><TD><PRE CLASS="intable">Impossible</PRE></TD></TR></TABLE>
______________________________________________________
1644||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ten big walnuts is a whole lot of walnuts, that's for sure! Two walnuts is too little for anybody. How about six walnuts? Is it a small number of walnuts or a large one? The Parrot has already found an answer to this question: after eating a small amount of walnuts he wants to eat some more, while after eating a large amount of walnuts he feels satisfied. The Parrot enjoys eating and hates overeating; that's why
he wants to know a minimal number of walnuts that is enough to get satisfied.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to calculate this number, he conducted a series of experiments. Each experiment went like that:
the Parrot, being quite hungry, ate a number of walnuts and checked if this was enough to get himself satisfied.
Of course, if some number of walnuts is enough, any larger number will do either; vice versa, if
after eating a number of walnuts he is still hungry, no smaller number can get the parrot satisfied.
You should help the Parrot to process the results of the experiments.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the input contains an integer <i>n</i> &mdash; the number of experiments conducted by the parrot <nobr>(0 &le; <i>n</i> &le; 100)</nobr>.

The following <i>n</i> lines contain descriptions of these experiments.
A description of an experiment consists of a number of walnuts eaten by the parrot (an integer from 3 to 9) and an outcome: &ldquo;satisfied&rdquo; in case this number was enough to get the parrot satisfied or &ldquo;hungry&rdquo; otherwise. It is known as a fact, that ten walnuts is always enough and two walnuts are always not enough.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of walnuts that is enough to get the parrot satisfied. If the results of the experiments are inconsistent, output &ldquo;Inconsistent&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
4 hungry
7 satisfied
5 hungry
8 satisfied</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
6 hungry
5 satisfied</PRE></TD><TD><PRE CLASS="intable">Inconsistent</PRE></TD></TR></TABLE>
______________________________________________________
1645||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now you are asked for help by the organizers of the Winter Olympic Games 
2014, which, as you know, will be held in Yekaterinozavodsk. And although 
there are still 5 and a half years ahead, the first sport facility is already put 
into operation. It is the track for the ski race.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Although the track has modern and reliable equipment, the organizers want to know what to do in case it fails.
For instance, what will happen if the stopwatch on the finish breaks down and only the relative
order of the sportsmen is known? The rules of the ski race make things even worse: the participants
start the race one after another, with a 30 seconds delay, and therefore the sportsman who finishes first
doesn't have to be the first in the ranklist. For example, if the sportsman who started second
would finish 25 second after the sportsman who started first, it would mean that he passed the track
5 seconds faster than his rival and therefore should be placed higher in the final ranklist.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are to write a program that will determine for each sportsman the highest and the lowest place
he can possibly have in the final ranklist, given the relative order in which the sportsmen finished
the race.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i>&nbsp;&mdash; the number of the race participants <nobr>(1 &le; <i>n</i> &le; 2000)</nobr>.
The participants are numbered from 1 to <i>n</i> according to the order they started the race.
The second line contains a permutation of numbers from 1 to <i>n</i> &mdash; the order in which the skiers finished.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> lines; <i>i</i>-th line should contain a pair of space-separated integers &mdash;
the lowest and the highest possible place in the final ranklist for <i>i</i>-th race participant.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
3 5 1 4 2 6
</PRE></TD><TD><PRE CLASS="intable">3 6
4 6
1 4
2 5
1 3
1 6
</PRE></TD></TR></TABLE>
______________________________________________________
1646||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you all know, a DNA is a string over an alphabet <code>{'A', 'C', 'G', 'T'}</code>.

In 2567, scientists from the Cytology and Genetics Research Institute decided to create an extremely powerful giant pangolin
called Bugzilla. It is known that the height and the power of the pangolin is completely determined by its DNA.
The process of creating Bugzilla's DNA took <i>m</i> days.
The scientists had a bank of numbered DNAs, which initially contained 2 DNAs of some mutant pangolins. These DNAs
were numbered 1 and 2.

On day <i>k</i>, the scientists chose DNAs number <i>i</i> and <i>j</i> from the bank (<i>i</i> can be equal to <i>j</i>),
concatenated them to form a new DNA and added it to the bank, assigning number <i>k</i> + 2 to it.

Finally, after <i>m</i> days the desired DNA of a giant pangolin was formed (it had a number <i>m</i> + 2 in the bank). Somehow the newspapers found out about these experiments, and the citizens began to panic. What to expect from a new, more powerful monster, if its prototype, Godzilla, was bad enough to destroy the city completely?
To answer this question you should count the number of occurences of Godzilla's DNA in Bugzilla's one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains Godzilla's DNA from a museum of the Cytology and Genetics Research Institute. Its length doesn't
exceed 100.
The next two lines contain two DNAs of the mutant pangolins, which were initially in the bank. The length of each of these DNAs
is at most 10.
The forth line contains an integer <i>m</i> <nobr>(1 &le; <i>m</i> &le; 100)</nobr> &mdash; the day Bugzilla's
DNA was created on.
Then follow <i>m</i> lines. <i>k</i>-th line contains a pair of space-separated integers (from 1 to <i>k</i>&nbsp;+&nbsp;1)
&mdash; the numbers of DNAs from the bank which were concatenated by scientists on <i>k</i>-th day.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of occurences of Godzilla's DNA in Bugzilla's one modulo 10<sup>9</sup>&nbsp;+&nbsp;7.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">AGA
A
G
4
1 2
2 1
3 1
5 4
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">A
CT
AG
2
1 1
3 3
</PRE></TD><TD><PRE CLASS="intable">0</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first sample, the scientists consecutively obtained the following DNAs: <i>AG</i>, <i>GA</i>,
<i>AGA</i>, <i>AGAGA</i>. <i>AGA</i> occurs twice in <i>AGAGA</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the second sample, the following DNAs were obtained: <i>CTCT</i>, <i>CTCTCTCT</i>. <i>A</i>
doesn't occur in <i>CTCTCTCT</i>.
</DIV></DIV>
______________________________________________________
1647||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A desert island Robinson Crusoe and his companion Friday live on has a shape of a non-degenerate triangle
which vertices are points (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>), 
(<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>), (<i>x</i><sub>3</sub>,&nbsp;<i>y</i><sub>3</sub>).
Once Robinson and Friday fell aboard and decided to divide the island into two equal parts by choosing two points
on the island coast and connecting them with a line segment. These parts were to have the same area and shore length.
Robinson failed to choose these points. Can you do it for him?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line of the input contains space-separated integers <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>x</i><sub>2</sub>,
<i>y</i><sub>2</sub>, <i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>, not exceeding 2000 in absolute value.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is a line segment <i>ST</i>, which divides the island into two parts of the same area and shore length, output &ldquo;YES&rdquo; on the first line of the output, <i>S</i> coordinates on the second line, and <i>T</i> coordinates of the third line. <i>S</i> and <i>T</i> should be located on the island shore. Coordinates should be accurate within 10<sup>&minus;9</sup>. If there is no such line segment, output &ldquo;NO&rdquo; on a single line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 10 0 0 10
</PRE></TD><TD><PRE CLASS="intable">YES
0 0
5 5
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 3 4 0 3 4
</PRE></TD><TD><PRE CLASS="intable">YES
1.741248277008306 3.580416092336102
3.445803840397070 0.415647119702198
</PRE></TD></TR></TABLE>
______________________________________________________
1648||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everybody knows that the Yekaterinozavodsk Shipyard constructs the best yachts in the world. They are so popular
that when a manufacturer becomes a billionaire, he comes to the shipyard in the end of the same month to get a new yacht.
You bet! The yachts are hand-made and their interior is made from a valuable red-black tree. Unfortunately, there are
few workers at the shipyard, therefore, it can build no more than <i>d</i> new yachts per month. As a result,
the shipyard sometimes cannot produce enough yachts for their customers.
And those billionaires are quite impulsive people: if they come to the
shipyard and there is no yacht for them, they abandon the whole idea of buying a yacht. Of course,
the shipyard can produce yachts and store them somewhere for future use, but you should pay 1 golden bar to store
one yacht during one month.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The managers want to know the maximal number of yachts the shipyard can sell during the next <i>n</i> months, and the 
miminal number of golden bars which should be paid for the storage. The students from the Department of Economics
of the Yekaterinozavodsk University predicted the amount of future billionaires in each of these <i>n</i> months.
You should use this data to answer the managers' questions.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contain space-separated integers <i>n</i> and <i>d</i>
(<nobr>1 &le; <i>n</i> &le; 20000</nobr>; <nobr>1 &le; <i>d</i> &le; 100000</nobr>).
The second line contains space-separated integers <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, &hellip;, <i>a<sub>n</sub></i>.
<i>a<sub>i</sub></i> is the number of future billionaires in <i>i</i>-th month
<nobr>(0 &le; <i>a<sub>i</sub></i> &le; 100000)</nobr>. 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two integers separated by space &mdash; the maximal number of yachts the shipyard can sell
and the minimal number of golden bars required to pay for the storage.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 5
6 1 7
</PRE></TD><TD><PRE CLASS="intable">13 2
</PRE></TD></TR></TABLE>
______________________________________________________
1649||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">&ldquo;I will never paint again,&rdquo; Dunno answered. &ldquo;I paint
and paint,<BR> and nobody is ever thankful. Everybody keeps scolding
me.&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The great abstractionist artist Herman Brooks invented a new style in
painting&mdash;bactorgaphy. Of course, you want to know what kind of a style it
is. That's simple: every painting is live, quite literally. Herman paints with
bacteria.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Such a painting is a real work of art. It's a sight worth seeing&mdash;the
fascinating canvas plays with two or three hundred different shades. But how
could this wonder be shown to the people? Photography or video just can't
convey the entire range of colors, and Herman still doesn't have a museum
(modern art custodians don't like innovative ideas, and there's no point
arguing with them). In addition, the painting can be seen in detail only under
a microscope. Finally, it was decided to make several thousand copies of the
best paintings and sell them as souvenirs. However, there is a problem. Herman,
as a real creator, doesn't want to make copies himself, and the hired
bioengineers unanimously claim that a copy can only be made if the exact
sequence of populating the canvas with bacteria is known. Your task is to
restore this sequence.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To help you fulfill the task, the bioengineers provided you with the
following information.
<ul>
  <li> A finished painting is a rectangular canvas divided into equal square
  cells with bacteria.
  <li> Before the process of painting is started, the canvas is thoroughly
  disinfected. All its cells are empty and contain no bacteria.
  <li> In each cell of the canvas there can be at most four bacteria.
  <li> The painting process consists in settling successively one bacterium
  into a free cell of the canvas. When the bioengineers do this, the numbers of
  bacteria in the adjacent (top, bottom, left, and right) populated cells increase
  by one. If the number of bacteria in a certain cell becomes&nbsp;5, then 4 of them
  die because of overcrowding.
  <li> It is impossible to settle a bacterium into a cell that is already
  populated, because it leads to an unpredictable reaction that can damage the
  whole painting.
</ul>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the dimensions of the canvas
<i>n</i> and <i>m</i> (<nobr>1 &le; <i>n, m</i> &le; 20</nobr>). 
The description of the painting follows in the form of the table with 
<i>n</i> lines containing <i>m</i> integers each. In every cell of this 
table the number of bacteria in the corresponding cell of the painting is 
written. These numbers range from 1 to 4.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to obtain the described painting by means of the procedure
available to the bioengineers, output &ldquo;No&rdquo;. If you managed to find
a sequence that makes it possible to create a copy of Herman's masterpiece,
output &ldquo;Yes&rdquo; in the first line, and in the following lines give
this sequence. Each of these lines must contain two integers, which are the 
number of line and number of column of the next cell to be populated.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
2 2 1
3 1 3
1 2 2
</PRE></TD><TD><PRE CLASS="intable">Yes
2 2
2 1
1 1
1 2
2 3
1 3
3 3
3 2
3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1650||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You probably are aware that Moscow holds the first place in the world with
respect to the number of billionaires living there. However, the work of
billionaires is such that they have to travel a lot. That is why some other
city can be the first in such a list on certain days. Your friends from FSB,
FBI, MI5, and Shin Bet have provided you with information about movements of
billionaires during some period of time. Your employer asks you to determine
for each city the number of days during this period on which this city exceeded
all other cities in the total amount of money that billionaires staying in this
city have.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the number <i>n</i> of
billionaires <nobr>(1 &le; <i>n</i> &le; 10000)</nobr>. The following <i>n</i>
lines contain information about these people: their names, cities where they
were staying at the beginning of the period, and their fortunes. In the next
line you are given the number <i>m</i> of days in the period for which you have
the information <nobr>(1 &le; <i>m</i> &le; 50000)</nobr> and the number
<i>k</i> of travels of the billionaires <nobr>(0 &le; <i>k</i> &le;
50000)</nobr>. The following <i>k</i> lines contain the list of travels in the
following format: the number of the day (from&nbsp;1 to&nbsp;<i>m&minus;1</i>), the
name of the person, and the city of destination. You may assume that
billionaires depart late at night and arrive to the destination city on the 
next day's morning. They cannot make more
than one travel each day. The numbers of days in the list are not decreasing.
All names of people and cities consist of at most 20 English letters; you must
take into consideration the case of the symbols. The fortunes are in the 
range from 1 to 100 billions (one billion is a thousand million).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In each line of the output give the name of a city and,
after a space, the number of days during which this city was the first with
respect to the sum of fortunes of the billionaires staying there. Leave out
those cities for which there were no such days. The cities must be sorted
alphabetically (with the usual symbol order: ABC...Zabc...z).
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
Abramovich London 15000000000
Deripaska Moscow 10000000000
Potanin Moscow 5000000000
Berezovsky London 2500000000
Khodorkovsky Chita 1000000000
25 9
1 Abramovich Anadyr
5 Potanin Courchevel
10 Abramovich Moscow
11 Abramovich London
11 Deripaska StPetersburg
15 Potanin Norilsk
20 Berezovsky Tbilisi
21 Potanin StPetersburg
22 Berezovsky London
</PRE></TD><TD><PRE CLASS="intable">Anadyr 5
London 14
Moscow 1
</PRE></TD></TR></TABLE>
______________________________________________________
1651||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A chain <i>p</i> is given in a directed graph without loops or multiple edges.
It is required to specify its subchain <i>q</i> such that <ul> <li>the initial
and final vertices of the chains <i>p</i> and <i>q</i> coincide;</li> <li>the
edges in the chain <i>q</i> are in the same order as in the chain
<i>p</i>;</li> <li>the chain <i>q</i> has the minimal possible number of edges
under the given conditions.</li> </ul>
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The chain <i>p</i> is given by the list of its vertices.
The first line contains the number <i>n</i> of vertices in the list, 2 &le;
<i>n</i> &le; 100000 (thus, the length of the chain is <i>n</i>&minus;1). The
following lines contain <i>n</i> numbers of vertices (they are integers in the
range from 1 to 10000). The numbers are separated by spaces or linebreaks. No
two successive vertices in the list coincide.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the vertices of the chain <i>q</i> by giving their numbers separated by a space.
Chain <i>q</i> may consist of single a vertex.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9
1 2 7 3 2
8 4 8 5
</PRE></TD><TD><PRE CLASS="intable">1 2 8 5
</PRE></TD></TR></TABLE>
______________________________________________________
1652||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The interbank lending market has a great influence on the functioning of all
banks. This is where banks can obtain cheap short-term credits from other
banks. When this market was paralyzed, many banks became unable to discharge
their current liabilities. Central banks of all countries agreed upon
supporting the world's financial system by granting unlimited credits to
banks. However, all central banks pursued protectionist policies and undertook
to credit only those banks that were registered in their own countries.
Moreover, to avoid speculations, it was decided to credit &ldquo;responsible&rdquo;
banks only, i.e., those that credited other banks in the same country.
Wildcat banks found a way to obtain the required status: they bought some of
the debts of local banks incurred before the day of the announcement of the
plan.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the situation in the interbank market on that day, determine the maximal
number of banks that can obtain additional liquidity from central banks. 
You may assume that the
essential quality of every banker is greed; that is why a banker always
agrees to get money today even if he may lose greater money tomorrow because of
that. Every debt can only be bought as a whole.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the total number <i>n</i> of banks in the
interbank market <nobr>(2 &le; <i>n</i> &le; 1000)</nobr>. In the following
<i>n</i> lines the banks are described by pairs of numbers
<i>c<sub>i</sub></i>, <i>v<sub>i</sub></i>, where <i>c<sub>i</sub></i>
is the code of the country <nobr>(1 &le; <i>c<sub>i</sub></i> &le; 100)</nobr>
and <i>v<sub>i</sub></i> is the amount of the available funds of the 
<i>i</i>-th bank <nobr>(0 &le; <i>v<sub>i</sub></i> &le; 10<sup>9</sup>)</nobr>.
The next line contains the number <i>m</i> of active contracts in the interbank
market <nobr>(0 &le; <i>m</i> &le; 10000)</nobr>. The contracts are described
in the next <i>m</i> lines in the following format: the number of the
lending bank in the above list, the number of the debtor bank, and the amount
of the contract (the amounts satisfy the restriction for the available funds).
Banks may buy the debts using the available funds they have initially only,
banks may not use the funds they receive after selling their debts.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal number of banks satisfying the requirements of the economy
rescue plan.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1 100000
1 200000
1 300000
2 400000
2 500000
4
1 2 200000
1 3 200000
2 4 500000
3 5 500000
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the sample, initially only Bank&nbsp;1 is responsible.
Bank&nbsp;2 can buy the debt of Bank&nbsp;3 to Bank&nbsp;1; it has enough
money for that. As a result, Bank&nbsp;3 will owe 200000 to Bank&nbsp;2,
and Bank&nbsp;2 will owe 200000 to Bank&nbsp;1. 
Bank&nbsp;1 will remain responsible because it will remain a
creditor of Bank&nbsp;2. In addition, Bank&nbsp;5 can become
responsible; it has to buy the debt of Bank&nbsp;4 to Bank&nbsp;2.
</DIV></DIV>
______________________________________________________
1653||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Empire experienced a severe economic crisis. Enormous funds had been spent on
constructing Death Stars, but the Rebels had easily destroyed every single one of them.
In this situation, there were two possible courses of action: either start peace
negotiations with the Rebels and try to find a political solution to the
conflict (and Darth Vader was definitely against that), or substantially cheapen
the cost of constructing Death Stars. The second variant was chosen.
The production was transferred to a neighboring galaxy, where labor was
much cheaper. The industry there had long ago mastered the output of gigantic steel
beams with a length of 1 standard sidereal unit. The assemblage of Death Stars
from such beams was started. The Death Stars had the form of regular
polyhedra (Platonic solids). At each vertex of such a polyhedron, a megagun was
mounted; it could shoot along the ray originating from the center of the polyhedron
and passing through that vertex. When the early-warning station detected an
approaching Rebel ship, the whole Death Star turned so that the nearest megagun
was aimed exactly at the ship. The amount of fuel consumed for the turning was
proportional to the angle of rotation. The shot inevitably destroyed the Rebel's
ship, and the Death Star remained in that position until the next attack.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In spite of the overwhelming technical advantage of the Empire, the Rebels
continued attacking Death Stars, and the Empire continued spending huge sums on
fuel and ammunition. The Imperial Minister of Finance was in despair. He
planned to raise the issue of peace negotiations once again at the Emperor's audience.
However, to protect himself from Darth Vader's anger, he wanted to present a
clear economic justification. That is why he asked you to calculate the amount
of fuel spent on repelling the Rebels' attacks.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line specifies the Platonic solid in the form of which a Death Star is constructed. The names and main characteristics of these solids are given in the table below.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><table align="center">
<tr>
<th>Polyhedron</th>
<th>Vertices</th>
<th>Edges</th>
<th>Faces</th>
</tr>
<tr>
<td>tetrahedron</td>
<td>4</td>
<td>6</td>
<td>4</td>
</tr>
<tr>
<td>hexahedron</td>
<td>8</td>
<td>12</td>
<td>6</td>
</tr>
<tr>
<td>octahedron</td>
<td>6</td>
<td>12</td>
<td>8</td>
</tr>
<tr>
<td>dodecahedron</td>
<td>20</td>
<td>30</td>
<td>12</td>
</tr>
<tr>
<td>icosahedron</td>
<td>12</td>
<td>30</td>
<td>20</td>
</tr>
</table>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the following line you are given the number <i>n</i> of the Rebels' attacks
repelled by this Death Star <nobr>(1 &le; <i>n</i> &le; 100)</nobr>. Each of the following <i>n</i> lines contains the vector of the attack, which is accurate to five fractional digits. The vectors are given in the coordinate system that is fixed with respect to the surrounding space. The geometric center of the Death Star stayed at the center of this coordinate system. You may assume that initially one of the megaguns was aimed exactly along the <i>Oz</i> axis in a positive direction and one of edges adjacent to it lied in the <i>Oxz</i> plane (in the half-plane <i>x</i> &ge; 0). The early warning station detected only those ships that moved from the depths of the Universe exactly in the direction of the center of the Death Star. Attacks followed each other in the given order, and there were sufficient time intervals between them. In the history of the Imperial Fleet, there were no cases when it was impossible to decide which megagun had to be aimed at the attacking ship.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the cumulative angle of rotation in radians accurate to
five fractional digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">tetrahedron
5
0.00000 0.00000 -1.00000
-1.00000 0.00000 1.00000
0.00000 0.00000 -1.00000
-1.00000 0.00000 1.00000
0.00000 0.00000 -1.00000
</PRE></TD><TD><PRE CLASS="intable">1.78225
</PRE></TD></TR></TABLE>
______________________________________________________
1654||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M&uuml;ller tried to catch Stierlitz red-handed many times, but always
failed because Stierlitz could ever find some excuse. Once Stierlitz was
looking through his email messages. At that moment, M&uuml;ller entered
secretly and watched a meaningless sequence of symbols appear on the screen.
&ldquo;A cipher message,&rdquo; M&uuml;ller thought.
&ldquo;UTF-8,&rdquo; Stierlitz thought.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that Stierlitz ciphers messages by the following method.
<ol>
<li>He deletes all spaces and punctuation marks.</li>
<li>He replaces all successive identical letters by one such letter.</li>
<li>He inserts two identical letters at an arbitrary place many times.</li>
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Try to restore a message as it was after the second step. For that, remove from
the message all pairs of identical letters inserted at the third step.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains a message ciphered by Stierlitz. The message
consists of lowercase English letters and its length is at most 200000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the restored message.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">wwstdaadierfflitzzz</PRE></TD><TD><PRE CLASS="intable">stierlitz</PRE></TD></TR></TABLE>
______________________________________________________
1655||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">From the news: &ldquo;Somali pirates seized a Dutch ship with Russians and
Filipinos aboard. The ship was flying the Panama flag and sailing from
Kenya to Romania with a cargo of German oil derricks.&rdquo;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This time pirates caught sight of the Dutch ship <i>Lightning</i>
carrying the newest laser gun. Of course, they couldn't leave aside
such a valuable cargo. Pirate ships gathered round the Dutch vessel,
but the Russian seamen were not so easy to catch. They started
to shoot the pirate ships using their laser gun. The crew tried not to let
any of the pirate ships come to them closer than one nautical mile,
because otherwise it would be impossible to aim the laser gun at the
target and the pirates would capture the ship.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The laser gun can rotate
in any of the two directions with angular velocity of at most <i>w</i>
rotations per minute. The gun can fire instantaneously, without even
stopping its rotation. A ship on the firing line sinks immediately.
All pirate ships move strictly in the direction of the <i>Lightning</i>. Each of
them has its own constant velocity of <i>v<sub>i</sub></i> knots (1 knot is 1
nautical mile per hour). The azimuth of the <i>i</i>-th pirate ship with respect
to the Dutch ship is <i>b<sub>i</sub></i> (the azimuth is the clockwise deviation
from North in degrees). All pirate ships have different azimuths.
At the initial moment, the gun is directed along the azimuth <i>a</i>, and
the <i>i</i>-th pirate ship is at a distance of <i>d<sub>i</sub></i> nautical
miles from the Dutch ship. We assume that the <i>Lightning</i> stays at the
same position.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine the order in which the <i>Lightning</i> must shoot at the pirate
ships in order to sink them in the minimal time.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the numbers <i>a</i>, <i>w</i>, and <i>n</i>
(0 &le; <i>a</i> &lt; 360; 0.01 &le; <i>w</i> &le; 1;
1 &le; <i>n</i> &le; 500). In each of the following <i>n</i> lines
you are given the numbers <i>b<sub>i</sub></i>, <i>d<sub>i</sub></i>, and
<i>v<sub>i</sub></i> (0 &le; <i>b<sub>i</sub></i> &lt; 360;
1 &le; <i>d<sub>i</sub></i> &le; 1000; 0.01 &le; <i>v<sub>i</sub></i> &le; 100).
All numbers contain at most three fractional digits.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the <i>Lightning</i> can sink all pirate ships, then in the first line
output the minimal time necessary for that in minutes accurate to
10<sup>-3</sup>, and in the following <i>n</i> lines output the order in
which the ships should be shot (the pirate ships are numbered from 1 to
<i>n</i> in the
order in which they are given in the input). Output the only line
&ldquo;Impossible&rdquo; if it is impossible to shoot all pirates ships.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0.0 0.05 2
144.0 22.0 100.0
216.0 22.0 100.0
</PRE></TD><TD><PRE CLASS="intable">12.000
2
1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0.0 0.05 2
144.0 20.0 100.0
216.0 20.0 100.0
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1656||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Solovey-Razboynik invaded Far Away Kingdom, and nobody could be safe from
him. Then King called his Army Commander and ordered him to send his brave
soldiers against the foe, and not come back without the victory. Commander
went to Baba Yaga to ask for her advice.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&ldquo;To conquer the enemy, you need a special formation,&rdquo; she said.
&rdquo;Put your soldiers into squares, but remember that if two soldiers 
stand in the same row or column on the same side from the center of that 
row or column, then the soldier who is closer to the center must be at 
least as tall as the other. Only then will you be able to defeat Solovey. 
If you don't do as I say, he'll blow your army away.&rdquo;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Commander assigned the soldiers to several squares and measured their
height. However, to place them as Baba Yaga had said wasn't easy. Help him to
place the soldiers as required.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the size <i>n</i> of the square; it is an
odd number from 3 to 9. Each of the next <i>n</i><sup>2</sup> lines contains
the height of a soldier in centimeters. The army of Far Away Kingdom enrolls
men whose height is from 170 to 200 centimeters.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output an <i>n</i> &times; <i>n</i> table with cells showing the heights of
soldiers from the given list. In each row and in each column, the largest
number must be in the center, and the numbers mustn't increase in the directions
from the center to the ends.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
170
170
180
175
170
175
175
170
175
</PRE></TD><TD><PRE CLASS="intable">170 175 170
175 180 175
170 175 170
</PRE></TD></TR></TABLE>
______________________________________________________
1657||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Before the Quarterfinal contest, a team of programmers were given several
puzzles from the online shop <nobr><a href="http://www.ru-toys.ru">ru-toys.ru</a></nobr>.
The most insidious of them was the cube snake: once you take it incautiously,
it unfolds immediately, and to fold it back into a cube you have to waste the precious
contest time. That is why the programmers decided to quickly write a program
that would solve the problem in the general form. The program would determine
if it were possible to fold a snake of an arbitrary configuration into a cube. If
yes, it would find how to do it.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="LEFT" CLASS="problem_laimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A snake consists of 27 small cubes that are strung, as beads,
onto a strong thread. The thread is fixed inside the end cubes and goes through
each of the remaining cubes from the center of one face to the center of another face.
Though some of the cubes the thread goes straight, connecting opposite faces,
and inside other cubes it turns, going through the centers of adjacent faces.
The thread doesn't allow the cubes to move apart, but makes it possible to rotate
a part of the cubes with respect to the other part. It is required to fold the
snake into a <nobr>3 &times; 3 &times; 3</nobr> cube.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains 27 letters describing the snake as a sequence of
&ldquo;straight&rdquo; (denoted by the letter &ldquo;F&rdquo;) and
&ldquo;turning&rdquo; (denoted by the letter &ldquo;T&rdquo;) small cubes.
The end cubes are considered as straight.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If you can make a cube from the given snake, output
26 letters describing the sequence of folding. Each letter shows the
position of a small cube (starting from the second one) with respect to the
preceding small cube. This position can be at the front (&ldquo;F&rdquo;),
behind (&ldquo;B&rdquo;), on the right (&ldquo;R&rdquo;), on the left
(&ldquo;L&rdquo;), on top (&ldquo;U&rdquo;), or below (&ldquo;D&rdquo;).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to make a cube from the given snake, output
&ldquo;IMPOSSIBLE&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">FFTTTFTTFTTTFTFTTTTFTFTFTFF</PRE></TD><TD><PRE CLASS="intable">UURDFFRBBUFLLDDRBRFFLLUURR</PRE></TD></TR><TR><TD><PRE CLASS="intable">FFTFTFTFTTTTFFFTTTFTTFTTTFF</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE</PRE></TD></TR></TABLE>
______________________________________________________
1658||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petka thought of a positive integer <i>n</i> and reported to Chapaev the sum
of its digits and the sum of its squared digits. Chapaev scratched his head and
said: &ldquo;Well, Petka, I won't find just your number, but I can find the
smallest fitting number.&rdquo; Can you do the same?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of test cases <i>t</i> (no
more than 10000). In each of the following <i>t</i> lines there are numbers
<i>s</i><sub>1</sub> and <i>s</i><sub>2</sub>
(1&nbsp;&le;&nbsp;<i>s</i><sub>1</sub>,&nbsp;<i>s</i><sub>2</sub>&nbsp;&le;&nbsp;10000)
separated by a space. They are the sum of digits and the sum of squared digits
of the number <i>n</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case, output in a separate line the smallest
fitting number <i>n</i>, or &ldquo;No solution&rdquo; if there is no such
number or if it contains more than 100 digits.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
9 81
12 9
6 10
7 9
</PRE></TD><TD><PRE CLASS="intable">9
No solution
1122
111112
</PRE></TD></TR></TABLE>
______________________________________________________
1659||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A regular triangle is given in the plane by the coordinates of its vertices.
Add to the set of these vertices 6 other points so that there are at least 9 regular triangles
(including the given one) with vertices at these 9&nbsp;points.
Three of the new points must lie strictly inside the triangle, and the remaining
three must lie strictly outside.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The three input lines contain the coordinates of the vertices of the given
triangle. Their absolute values do not exceed&nbsp;100. The sides
of the triangle are no shorter than&nbsp;10.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first three lines output the coordinates of the points put inside the
triangle. In the following three lines output the coordinates of the points put
outside the triangle. The distance between any of the 9 points must be at
least&nbsp;1. The distance between any new point and given triangle sides
must be at least&nbsp;0.1. Two sides are considered equal if their lengths
differ by at most&nbsp;10<sup>&minus;6</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 30
-25.9807621135 -15
25.9807621135 -15
</PRE></TD><TD><PRE CLASS="intable">0.0000000000 20.0000000000
-17.3205080757 -10.0000000000
17.3205080757 -10.0000000000
0.0000000000 40.0000000000
-34.6410161514 -20.0000000000
34.6410161514 -20.0000000000
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The answer in the sample is incorrect. One can construct
only 3 triangles using the given 9&nbsp;points.
</DIV></DIV>
______________________________________________________
1660||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The natives of an island in the Pacific between 35 and 36 degrees 
of southern latitude have the following custom. The chief of the tribe draws 
a large circle with radius <i>R</i> on the sand, and inside it he draws another one 
with radius <i>r</i>. The distance between centers of the circles is equal to <i>d</i>. 
The chief's wife (let's call her victim) inscribes a circle in such a way, 
that it touches the bigger one from within and the smaller one from the 
outside. Then all of the tribe members come to the circles in turns and each 
of them tries to inscribe a circle in such a way, that it would touch both 
of the chief's circles and the circle, which was drawn the latest. The circle 
must not intersect any other circles, except touching the one, drawn by victim. 
If a native can inscribe his circle in several ways, he asks the victim for 
advice (remember, that as a chief's wife she has a great authority among 
natives). When no more circles can be inscribed, the distance between the first 
and the last inscribed circles is measured. This distance determines, whether 
the victim will be eaten. So, she really needs to know the least possible 
distance between these circles.
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">3 integers: <i>R</i>, <i>r</i> and <i>d</i>. 
0&nbsp;&lt;&nbsp;<i>r</i>&nbsp;&lt;&nbsp;<i>R</i>&nbsp;&minus;&nbsp;<i>d</i>. <i>d</i>&nbsp;&ge;&nbsp;0. 
Numbers don't exceed 100.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the required distance with not less than 5 digits after the decimal point.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 1 0
</PRE></TD><TD><PRE CLASS="intable">0.00000
</PRE></TD></TR></TABLE>
______________________________________________________
1661||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya has 30 rods of equal lengths. Each rod is painted in some color. 
He is going to construct a dodecahedron using these rods as its edges. 
He is interested in how many different dodecahedra he can obtain (Vasya 
calls two dodecahedra equal if one of them can be obtained from the other 
by a sequence of rotations).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">30 integers that are colors of the rods. The colors lie in range from 1 to 30. 
The numbers are delimited with whitespaces.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different dodecahedra Vasya can construct.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
2 2 2 2 2 2 2 2 2 2
</PRE></TD><TD><PRE CLASS="intable">11
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Dodecahedron is a regular polyhedron with 20 vertices and 12 pentagonal faces.
</DIV></DIV>
______________________________________________________
1662||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The war between neighbors Vasiliy Petrovich and Petr Vasilyevich was in 
progress for already seven years. Nobody remembers now, when it has started. 
Nobody can say for sure, who of the neighbors was the first to find a goat 
in his garden with cabbage. But since that, if any of them leaves for a moment, 
the other one immediately leads his goats to his neighbor's garden. Both 
Vasiliy Petrovich and Petr Vasilyevich became accustomed to this fact, and 
another ravaged cabbage bed doesn't surprise any of the neighbors.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivan Ivanovich decided to make use of this old enmity. Once Petr Vasilyevich 
didn't lend money to him, and it was time to take revenge for this nasty 
behavior. Ivan Ivanovich waited until Petr Vasilyevich left for the city on 
business and after that he led his goat to Petr Vasilyevich's garden (hoping, 
that when Petr Vasilyevich would notice the eaten cabbage, he would accuse 
Vasiliy Petrovich's goats).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When Ivan Ivanovich came to the garden, he found out that there was only one 
cabbage bed left, and a little goat kid of Vasiliy Petrovich was already 
grazing there. Ivan Ivanovich decided to put a peg into the ground and bound 
his goat and the kid of Vasiliy Petrovich to it in such a way, that his goat 
would be able to reach any point of the bed, and the kid wouldn't be able to 
reach any inner point of the bed. It is known, that the length of the rope 
for the goat is equal to <i>R</i>, and the length of the rope for the kid is equal 
to <i>r</i>. Help Ivan Ivanovich to find the necessary place for the peg.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The bed is a convex polygon with <i>N</i> vertices. The first line contains 
an integer <i>N</i> (3&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;50). The following 
<i>N</i> lines contain the coordinates of the vertices of the polygon (<i>X<sub>i</sub></i>,&nbsp;<i>Y<sub>i</sub></i>)&nbsp;&mdash; integers with absolute 
values not exceeding 1000. The vertices are listed in the order of traversal. 
The last line contains integers <i>r</i> and <i>R</i>. 1&nbsp;&le;&nbsp;<i>r</i>&nbsp;&lt;&nbsp;<i>R</i>&nbsp;&le;&nbsp;1000. 
The sizes of the peg, the goat, and the kid shouldn't be taken into account.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is a way to bind the goat and the kid, output a pair of numbers&nbsp;&mdash; coordinates of the place for a peg. The numbers should be rounded to 10<sup>&minus;6</sup>. If there is no such way, output &ldquo;No solution&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
0 1
1 1
1 0
1 3
</PRE></TD><TD><PRE CLASS="intable">0.500000 -1.000000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
0 0
0 14
2 7
8 10
</PRE></TD><TD><PRE CLASS="intable">No solution
</PRE></TD></TR></TABLE>
______________________________________________________
1663||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Old Bilbo collects songs and sagas of all races of Middle-earth. Every twenty 
years he leaves Rivendell for a year to travel through <i>N</i> cities of the 
Middle-earth, numbered from 1 to <i>N</i> (Rivendell has number 1), and comes back 
at the end of the journey. Nineteen years have passed since Bilbo's last 
journey, so he started to prepare for travelling. From his last journey Bilbo 
remembers that there is a warder at the entrance to each city. He asks the 
travelers what city they came from and requires an entrance fare depending 
on that. Time passed, and the entrance fee has changed since the last journey. 
From the King of Elves Elrond Bilbo has learnt that, if a traveler 
arrives to a city with number <i>A</i> from a city with number <i>B</i>, the warder will 
require exactly <i>P<sub>A</sub></i>&middot;[1000/<i>P<sub>B</sub></i>] gold coins, where 
<i>P<sub>i</sub></i> is the population of city with number <i>i</i> and [<i>X</i>] denotes 
the floor of <i>X</i>. Officials think that it will stimulate the population outflow from 
the bigger cities to the smaller ones. Bilbo knows a population of all cities of 
Middle-earth and supposes that it will not change during the year of his journey. 
As usual, before the journey he would like to know the order of visiting the cities
which will minimize the total amount of money paid.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>. 2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;1000. The second line contains 
<i>N</i> integers <i>P</i><sub>1</sub>, &hellip;, <i>P<sub>N</sub></i>, delimited with spaces&nbsp;&mdash; the 
populations of the cities of Middle-earth. All <i>P<sub>i</sub></i> lie in range from 1 to 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>N</i> integers&nbsp;&mdash; order of visiting <i>N</i> cities 
which minimizes the total entrance fee. Remember that Bilbo starts his travel 
from the city with number 1, visits each city exactly once and returns to the 
city with number 1 only in the end. If there are several solutions, you may 
output any one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
10 3 5 4
</PRE></TD><TD><PRE CLASS="intable">1 4 2 3
</PRE></TD></TR></TABLE>
______________________________________________________
1664||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An oligarch Vovan, as many other oligarchs, transports oil from West Cuckooland 
to East Cuckooland. He owns a huge oil-producing station in West Cuckooland, 
an equally huge oil-refining station in East Cuckooland and a system of oil 
pipelines to move oil from one country to another. Vovan has a map of these 
pipelines on his table. He would like to know, how much oil this system can 
transport.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each pipeline connects some pair of stations. All stations on the map are numbered: the producing station has number 1, the refining one has number <i>N</i> and the transit ones have numbers from 2 to <i>N</i>&nbsp;&minus;&nbsp;1, inclusive. Each pipeline can transport a limited quantity of oil, but in any direction. Vovan doesn't know that the Earth is round, so each station on his map has plane coordinates (<i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> are the coordinates of <i>i</i>-th station). The pipelines are represented as line segments. Any pair of pipelines on the map can intersect only at endpoints. It is known, that the oil-producing station has the smallest <i>x</i>-coordinate of all stations, and the oil-refining station has the largest <i>x</i>-coordinate.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>. 2&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;10000. Next <i>N</i> lines 
contain the coordinates of the stations (<i>x<sub>i</sub></i>,&nbsp;<i>y<sub>i</sub></i>) separated with a space. 
Coordinates are integers with absolute values no more than 10<sup>8</sup>. Next line 
contains an integer <i>M</i>&nbsp;&mdash; the number of oil pipelines. Next <i>M</i> lines contain specifications of pipelines: for each pipeline, the three numbers describe a pair of stations connected by it and its flow capacity&nbsp;&mdash; an integer from 1 to 10<sup>8</sup>. It is guaranteed that Vovan's system can transport some positive quantity of oil, and can't transport more than 2&middot;10<sup>9</sup> oil units.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal quantity of oil that the Vovan's system 
can transport. In the following <i>M</i> lines output the transportation plan&nbsp;&mdash; triples of numbers (<i>A</i>,&nbsp;<i>B</i>,&nbsp;<i>C</i>), denoting that <i>C</i> oil units should flow from station <i>A</i> to station <i>B</i>. All pipelines should be presented exactly once in this list (even those, in which the oil flow is equal to zero). The values of <i>C</i> should always be non-negative.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0
1 1
2 0
2
1 2 2
2 3 1
</PRE></TD><TD><PRE CLASS="intable">1
1 2 1
2 3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1665||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Dean of the Sports Programming Department in the Yekaterinozavosk State University was feeling strange.
A team of the department had won an honourable right of the tourist trip to Canada. On the other hand, the Yekaterinozavodsk State University never pays money to students for their trips. The Dean decided to use a scheme of student requests for financial support to solve this problem. Thus, at December, 1 he called a famous sixth-year Student and made him write the first request form in the accounts department of the university (and promised to take him to Canada as a co-coach). Next day the Student should make some of his friends visit the accounts department and write their requests. During each of the following days the Student with the help of his friends should find some other students and lead them to the accounts department. All of students' requests were stored in the accounts department.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, the accounts department pays money only on even days of the month. Moreover, the Head Accountant agreed to pay the money only if at the end of some day there will be exactly <i>N</i> requests on his table (this should be at the day of the payment). The financial support is paid simultaneously to all students who filled their requests. If <i>N</i> will be large enough, the money obtained by the students will be enough to send to Canada the team with the coach, the Student and even the Dean, who invented an ingenious scheme of getting money from the university.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, the Student can influence on the number of students writing the  requests for financial support. However, 
he knows that in any case the total number of written requests will increase in the integral number of times (which may be different each day). What is more, somewhy this number is either 2, or an odd number, greater than 1.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>T</i> &mdash; the number of test cases (1  &le; <i>T</i> &le; 100).
Each of the following <i>T</i> lines contains an integer <i>N</i> <nobr>(1 &le; <i>N</i> &le;  2<sup>25</sup> &minus; 1)</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of the test cases output &ldquo;YES&rdquo; if the Student can receive the money and &ldquo;NO&rdquo; in the other case.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
4
7
6
30</PRE></TD><TD><PRE CLASS="intable">NO
YES
NO
YES</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first case the Student can make the number of requests equal to 4 only at the end of the third day (there will be 1 request at the end of the first day, and 2 at the end of the second day). But December, 3rd is an odd day, so the money won't be paid. In the second case there will be 1 request at the end of the first day and 7 at the end of the second day. In the fourth case the Student should first increase the number of requests in 2 times, then in 3 times, then in 5 times, resulting in 30 requests at the end of December, 4th.</DIV></DIV>
______________________________________________________
1666||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya, nicknamed Ferrari, has to solve an equation of fourth degree with integer 
coefficients <i>x</i><sup>4</sup>+<i>ax</i><sup>3</sup>+<i>bx</i><sup>2</sup>+<i>cx</i>+<i>d</i> = 0. 
Vasya wants to factorize the polynomial in the left part of this equation to the 
maximal possible number of multipliers with integer coefficients to reduce the 
problem to solving several equations of lower degree.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">4 integers: <i>a</i>, <i>b</i>, <i>c</i>, <i>d</i>&nbsp;&mdash; the coefficients of the polynomial, 
with absolute values not exceeding 20000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the polynomial can't be factorized to multipliers with integer coefficients, 
you should output a single line &ldquo;Irreducible&rdquo;. In the other case output the factorization of the polynomial as a product of several polynomials with integer coefficients, enclosed in parentheses. You shouldn't delimit the multipliers with spaces and output monomials with zero coefficients. Coefficients and degrees equal to 1 should be omitted, except the monomial &ldquo;1&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 0 0
</PRE></TD><TD><PRE CLASS="intable">(x)(x)(x)(x)
</PRE></TD></TR><TR><TD><PRE CLASS="intable">-4 -3 24 45
</PRE></TD><TD><PRE CLASS="intable">(x2+3x+3)(x2-7x+15)
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 1 1 1
</PRE></TD><TD><PRE CLASS="intable">Irreducible
</PRE></TD></TR></TABLE>
______________________________________________________
1667||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The governor of Yekaterinozavodsk region had to deal with ambassadors from one 
of the nearby states&nbsp;&mdash; Square country. All square inhabitants of this country 
loved the squares of integers. So, they declared to the governor that 
they would build a square metropolitan from Yekaterinozavodsk to one of the 
suburbs only if he would be able to fill a rectangular table <i>N</i>&nbsp;&times;&nbsp;<i>M</i> with 
squares of different positive integers in such a way, that the sum of numbers 
in each row and in each column would also be a square. The governor wasn't a 
square man, and also he wasn't good in maths, so he asked for your help.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>T</i>&nbsp;&mdash; the number of test cases 
(1&nbsp;&le;&nbsp;<i>T</i>&nbsp;&le;&nbsp;20). The following <i>T</i> lines contain the pairs of integers <i>N</i> and <i>M</i> 
(1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;20).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output the required table: <i>N</i> lines with <i>M</i> numbers 
in each line. All numbers in the table shouldn't exceed 10<sup>17</sup>. If there is no 
such table, output &minus;1. Answers for different test cases should be delimited 
with an empty line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2
3 1
2 2
</PRE></TD><TD><PRE CLASS="intable">9 16

1024
25
274576

4761 8464
627264 1115136
</PRE></TD></TR></TABLE>
______________________________________________________
1668||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A long time ago in a galaxy far, far away&hellip;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The battle space station &ldquo;Death star&rdquo; was designed even before the Clone wars. 
Many years later, it was given to the Empire to control the Outer Rim Territories. The &ldquo;Death star&rdquo; was about 100 miles in diameter, was equipped 
with a graviton gun, capable of destroying whole planets, and could carry a few 
thousands of space fighters on board. The &ldquo;Death star&rdquo; was supposed to terrify 
the population and to absolutely exclude any possibility of resisting the power 
of the Empire.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the first &ldquo;Death star&rdquo; had been destroyed by the rebels, the construction 
of a new, even more deadly model started. The new model, as the first one, has 
a ball shape and can translationally move in <i>N</i>&#8209;dimensional space. It is 
equipped with <i>M</i> firmly anchored krypton engines. If the <i>i</i>&#8209;th engine is provided with <i>X</i> units of energy, its contribution to the <i>j</i>&#8209;th coordinate of the jet thrust vector will be equal to <i>A<sub>ij</sub></i>&nbsp;&middot;&nbsp;<i>X</i>. Note that the engines are bidirectional, so supplying a negative <i>X</i> just means using it to thrust in the opposite direction with |<i>X</i>| units of energy. The resulting jet thrust vector is equal to the sum of contributions of each of <i>M</i> engines.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Before the beginning of the movement a special navigational module calculates the required coordinates of the jet thrust vector (<i>b</i><sub>1</sub>,&nbsp;<i>b</i><sub>2</sub>,&nbsp;&hellip;,&nbsp;<i>b<sub>N</sub></i>).Your program should calculate how much units of energy should be provided to each of the engines in such a way, that the length of the vector of difference between the resulting jet thrust and the required jet thrust will be minimal. If the answer is ambiguous, the sum of squares of the quantity of energy, provided to the engines, should also be minimized.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two integers <i>N</i> and <i>M</i> separated with a space 
(1&nbsp;&le;&nbsp;<i>N</i>,&nbsp;<i>M</i>&nbsp;&le;&nbsp;100). The following <i>M</i> lines with <i>N</i> numbers in each line 
represent the matrix <i>A<sub>ij</sub></i>. The last line contains <i>N</i> numbers <i>b<sub>j</sub></i>&nbsp;&mdash; the 
coordinates of required jet thrust vector. All <i>A<sub>ij</sub></i> and <i>b<sub>j</sub></i> are integers 
with absolute values not exceeding 100.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>M</i> real numbers <i>X</i><sub>1</sub>, &hellip;, <i>X<sub>M</sub></i> precise up to 5 digits 
after the decimal point. <i>X<sub>i</sub></i> should be equal to the quantity of energy, provided 
to <i>i</i>&#8209;th engine. If there is more than one answer, you can output any one.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
2 3 -2 1
-1 2 1 3
4 2 3 -2
3 13 -9 13 
</PRE></TD><TD><PRE CLASS="intable">4.00000 2.00000 -1.00000
</PRE></TD></TR></TABLE>
______________________________________________________
1669||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now you are asked for help by the organizers of the Winter Olympic Games 2014, 
which, as you know, will be held in Yekaterinozavodsk. And although there are 
still 6 years ahead, the first sport facility is already put into operation. 
It is the track for the skiing race.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was decided to construct a huge screen near the tribunes, which would show 
the name of a current leader during the race. It is known, that only the first 
<i>N</i> letters of English alphabet are used to write the names of the sportsmen, and 
each of the <i>N</i> letters should appear in each name exactly once. Technically,
the screen looks like a word with letters from the English alphabet; each of these letters can either shine or stay dark. The organizers call the word 
&ldquo;universal&rdquo; if the screen based on it can display any possible name of a 
sportsman (possibly with some holes between neighboring letters). The governor 
proposed some word for the screen. You should tell whether this word is 
universal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> (1&nbsp;&le;&nbsp;<i>N</i>&nbsp;&le;&nbsp;26). The second line contains 
a word to check, consisting of lowercase English letters. The word can contain 
only first <i>N</i> letters of the alphabet. The length of the word doesn't exceed 300.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;YES&rdquo;, if the word, proposed by governor, is universal and &ldquo;NO&rdquo; otherwise.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
abacaba
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
abcba
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1670||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Recently Cuckooland mathematicians have invented a new binary operation &ldquo;asterisk&rdquo;, which uses sequences as its arguments. Operation just appends the first sequence to the second. For example <nobr>(2, 4) * (1, 3) = (1, 3, 2, 4)</nobr>. &ldquo;Asterisk&rdquo; operations in one expression are performed in order from the leftmost to the rightmost, but this order can be changed with brackets (operations in brackets are performed earlier). E. g. <nobr>(3) * ((1, 5) * (2, 7)) = (2, 7, 1, 5, 3)</nobr>. Notice that if a sequence element is represented by an expression, then this expression is calculated first and then all nested brackets in this sequence are removed. For example, <nobr>(1, ((2) * (3)), 4) = (1, (3, 2), 4) = (1, 3, 2, 4)</nobr>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now cuckoolanders want to use this operation for generating permutations. More precisely, they want to obtain a given permutation from permutation <nobr>(1, 2, &hellip;, <i>N</i>)</nobr> by adding brackets, commas and asterisks and evaluating the resulting expression.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The formal definition of <i>expression</i> follows.<br>
&lt;<i>expression</i>&gt; ::= &lt;<i>sequence</i>&gt;[*&lt;<i>sequence</i>&gt;&hellip;]<br>
&lt;<i>sequence</i>&gt; ::= (&lt;<i>sequence element</i>&gt;[,&lt;<i>sequence element</i>&gt;&hellip;])<br>
&lt;<i>sequence element</i>&gt; ::= &lt;<i>number</i>&gt; | &lt;<i>expression</i>&gt;<br>
&lt;<i>number</i>&gt; ::= 1|2|&hellip;|<i>N</i></DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> <nobr>(1 &le; <i>N</i> &le; 10000)</nobr>. The second line contains a permutation of numbers from 1 to <i>N</i>. These numbers are separated by spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a single line&nbsp;&mdash; correct expression, the result of which is the given permutation. Numbers from 1 to <i>N</i> should appear in ascending order. The length of the expression should not exceed 100000 symbols. In case there is no such expression output &ldquo;IMPOSSIBLE&rdquo;. Note that expression must not contain spaces and all sequences must be enclosed in brackets.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
3 4 2 1
</PRE></TD><TD><PRE CLASS="intable">(1)*(2)*(3,4)
</PRE></TD></TR><TR><TD><PRE CLASS="intable">6
5 1 2 6 4 3
</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE
</PRE></TD></TR></TABLE>
______________________________________________________
1671||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Usatiy-Polosatiy XIII decided to destroy Anansi's home&nbsp;&mdash; his cobweb.
The cobweb consists of <i>N</i> nodes, some of which are connected by threads.
Let us say that two nodes belong to the same piece if it is possible to get from one node to the other by threads. Usatiy-Polosatiy has already decided which threads and in what order he would tear and now wants to know the number of pieces in cobweb after each of his actions.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i> and <i>M</i>&nbsp;&mdash; the number of nodes and threads in the cobweb, respectively<nobr>(2 &le; <i>N</i> &le; 100000;</nobr> <nobr>1 &le; <i>M</i> &le; 100000)</nobr>. Each of the next <i>M</i> lines contains two different integers&nbsp;&mdash; the 1-based indices of nodes connected by current thread. The threads are numbered from 1 to <i>M</i> in the order of description. Next line contains an integer <i>Q</i> which denotes the quantity of threads Usatiy-Polosatiy wants to tear <nobr>(1 &le; <i>Q</i> &le; <i>M</i>)</nobr>. The last line contains numbers of these threads&nbsp;&mdash; different integers separated by spaces.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>Q</i> integers&nbsp;&mdash; the number of pieces in Anansi's cobweb after each of Usatiy-Polosatiy's action. Separate numbers with single spaces.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
1 2
2 3
1 3
3 4
3
2 4 3</PRE></TD><TD><PRE CLASS="intable">1 2 3</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 1
1 2
1
1
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1672||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Soon after the peace on Naboo planet had been restored, a gungan Dao-Dao decided to go hunting. However, he found a strange metal container with an emblem of the Trade Federation on it. Dao-Dao regarded it as trash and threw it into the forest.
But the very next moment poor gungan was attacked by the whistling hive of droid flies&nbsp;&mdash; the modern weapon constructed by the Federation. He had to immediately alarm all gungans! But Dao-Dao decided to defeat the flies himself and create an indestructible power field around them. For the maximal stability the power field created by Dao-Dao must have a cubic shape, moreover, there must be at least one droid fly on each of the faces of the field. Help gungan to position this power field in space.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i> <nobr>(2 &le; <i>N</i> &le; 100)</nobr>&nbsp;&mdash; the number of droid flies. The following <i>N</i> lines contain the coordinates of the flies <i>X<sub>i</sub></i>, <i>Y<sub>i</sub></i>, <i>Z<sub>i</sub></i>&mdash; integers with absolute values not exceeding 100. No two flies are located at the same point.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the coordinates of three normalized vectors collinear to the edges of the required cube. Output the answer as precisely as possible. You can assume that the required power field always exists.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
0 1 1
1 0 1
1 1 0
1 1 2
1 2 1
2 1 1
</PRE></TD><TD><PRE CLASS="intable">1 0 0
0 1 0
0 0 1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
1 0 0
-1 0 0
</PRE></TD><TD><PRE CLASS="intable">0.577350269 0.211324865 -0.788675135
0.577350269 0.577350269 0.577350269
0.577350269 -0.788675135 0.211324865
</PRE></TD></TR></TABLE>
______________________________________________________
1673||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the end of the previous semester the students of the Department of Mathematics and Mechanics of the Yekaterinozavodsk State University had to take an exam in network technologies. <i>N</i> professors discussed the curriculum and decided that there would be exactly <i>N</i><sup>2</sup> labs, the first professor would hold labs with numbers 1, <i>N</i>&nbsp;+&nbsp;1, 2<i>N</i>&nbsp;+&nbsp;1, &hellip;,
<nobr><i>N</i><sup>2</sup> &minus; <i>N</i> + 1</nobr>, the second one&nbsp;&mdash; labs with numbers 2, <i>N</i>&nbsp;+&nbsp;2, 2<i>N</i>&nbsp;+&nbsp;2, &hellip;, 
<nobr><i>N</i><sup>2</sup> &minus; <i>N</i> + 2</nobr>, etc. <i>N</i>-th professor would hold labs with numbers <i>N</i>, 2<i>N</i>, 3<i>N</i>, &hellip;, <i>N</i><sup>2</sup>. The professors remembered that during the last years lazy students didn't attend labs and as a result got bad marks at the exam. So they decided that a student would be admitted to the exam only if he would attend at least one lab of each professor.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>N</i> roommates didn't know the number of labs and professors in this semester. These students had different diligence: the first student attended all labs, the second one&nbsp;&mdash; only labs which numbers were a multiple of two, the third one&nbsp;&mdash; only labs which numbers were a multiple of three, etc&hellip; At the end of the semester it turned out that only <i>K</i> of these students were admitted to the exam. Find the minimal <i>N</i> which makes that possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An integer <i>K</i> <nobr>(1 &le; <i>K</i> &le; 2&middot;10<sup>9</sup>)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible <i>N</i> which satisfies the problem statement. If there is no <i>N</i> for which exactly <i>K</i> students would be admitted to the exam, output 0.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8
</PRE></TD><TD><PRE CLASS="intable">15</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">0</PRE></TD></TR></TABLE>
______________________________________________________
1674||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Drunk king is a piece which moves as a usual chess king (i. e. to one of eight adjacent cells), but cannot make two consecutive moves in the same direction. Drunk king stands in an upper-left corner of an <i>N</i>&nbsp;&times;&nbsp;<i>M</i> chessboard and wants to visit each cell exactly once and return to initial position. His path must have no self-intersections.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here are the examples of correct tours:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help the king to find the required tour.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains 2 integers: <i>N</i> and <i>M</i>
(<nobr>2 &le; <i>N</i>, <i>M</i> &le; 500</nobr>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output “Yes” or “No” depending on whether the required tour exists. If the tour exists, output it in the next 2<i>N</i>&nbsp;&minus;&nbsp;1 lines with symbols “o” (ASCII code 111), “|” (code 124), <nobr>“-”</nobr> (code 45), “/” (code 47), “\” (code 92) and spaces. Each of these lines should contain exactly 2<i>M</i>&nbsp;&minus;&nbsp;1 symbols. Use the format shown in the sample below. If there are many tours, you can output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 8
</PRE></TD><TD><PRE CLASS="intable">Yes
o-o o-o o-o o-o
|  \| |/  |/  |
o-o o o o o o-o
  |    / \   \ 
o-o o-o o-o o-o
|    \   \   \ 
o-o o-o o-o o-o
  |  \   \   \ 
o-o o o o-o o o
|  /| | |  /| |
o-o o-o o-o o-o
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 5
</PRE></TD><TD><PRE CLASS="intable">No</PRE></TD></TR></TABLE>
______________________________________________________
1675||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One may recall that a method of data encoding now known as lunar code was
invented by lunar programmers during the defensive war against Martians.
Even nowadays its slightly modified version is used by the Lunars in the data transmission. The data is represented in the form of matrix <i>M</i>&nbsp;&times;&nbsp;<i>N</i> containing ones and zeroes. The transferred matrix must satisfy the following check condition: exactly <i>K</i> of its rows and exactly <i>L</i> of its columns should contain zeroes only. If the received matrix does not satisfy this condition, then the data is considered to be corrupted during the transmission.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Minister of Communications proposed to change the lunar code in his report for the President of the Lunar Federation. He claimed that the number of different messages that can be transmitted is not big enough. The president ordered the Ministry and the Lunar Academy of Sciences to research this question and to decide whether the code should be changed. It turned out that the minister was wrong because the number of binary matrices <i>M</i>&nbsp;&times;&nbsp;<i>N</i> satisfying the check condition is huge for big enough <i>M</i> and <i>N</i>. Can you calculate this number?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains 4 integers separated with space: <i>M</i>, <i>N</i>, <i>K</i>, <i>L</i>
(<nobr>1 &le; <i>M</i>, <i>N</i> &le; 100000</nobr>; <nobr>0 &le; <i>K</i> &le; <i>M</i></nobr>; <nobr>0 &le; <i>L</i> &le; <i>N</i></nobr>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of matrices modulo 10<sup>9</sup>&nbsp;+&nbsp;7.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2 0 0
</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 3 1 1
</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE>
______________________________________________________
1676||||||true||||||
<H3 CLASS="problem_subtitle">Background</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once every generation, there is a tournament known as Mortal Kombat, which was designed by the Elder Gods for&nbsp;the main purpose to save Earthrealm from the dark forces of Outworld. If the forces of Outworld win the&nbsp;tournament ten consecutive times, the Emperor will be able to invade and conquer Earthrealm. Thus far, Outworld&nbsp;has won nine straight victories, making the upcoming tournament the tenth, and possibly final one, for&nbsp;the&nbsp;Earthrealm.
<BR>
<BR><i>From Wikipedia, the free encyclopedia</i></DIV></DIV><H3 CLASS="problem_subtitle">Problem</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>N</i> monsters and <i>M</i> best human fighters participating in the Mortal Kombat. According to the tournament rules, each monster should fight one of the humans (different monsters should fight different humans). If at least one monster wins, the Eathrealm will be conquered by the Emperor of the Outworld. However, the humans can choose the competitors and the order of battles.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The thunder god Raiden, protector of the Earthrealm, should choose the fighters in such a way that all Earth warriors will win their battles. For each monster and each Earth warrior it is known whether the Earth warrior can win the monster. First of all, the fighters for the first battle should be chosen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, suppose that Liu Kang wants to fight Goro, but he is the only warrior able to defeat Shang Tsung, while Goro can be defeated by other warriors, such as Johnny Cage. So, even if Liu Kang will defeat Goro in the first battle, it will inevitably
lead to the conquest of the Earth, because later Shang Tsung will defeat his opponent.
This means that the pair Liu Kang vs. Goro should not be selected for the first fight.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find out which pairs cannot be chosen by Raiden if he wants to save the freedom of humanity.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i> and <i>M</i> (<nobr>1 &le; <i>N</i> &le; 300;</nobr> <nobr><i>N</i> &le; <i>M</i> &le; 1500</nobr>). Next lines contain the binary matrix <i>A</i> with <i>N</i> rows and <i>M</i> columns. <i>A<sub>ij</sub></i>&nbsp;=&nbsp;1 if and only if <i>j</i>-th Earth warrior can defeat <i>i</i>-th monster.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output matrix <i>B</i> with <i>N</i> rows and <i>M</i> columns. <i>B<sub>ij</sub></i> should be equal to one if the first battle cannot be held between <i>i</i>-th monster and <nobr><i>j</i>-th</nobr> human, and zero otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 4
1111
1000
1111
1111
</PRE></TD><TD><PRE CLASS="intable">1000
0111
1000
1000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 5
10000
10000
10000
10000
</PRE></TD><TD><PRE CLASS="intable">11111
11111
11111
11111
</PRE></TD></TR></TABLE>
______________________________________________________
1677||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The &ldquo;Entertaining math&rdquo; showmen decided to ensure their audience in the well-known fact that a monkey randomly pressing keyboard buttons will sooner or later type the required word according to the probability theory.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The monkey taken to the shooting from the city zoo already can type&nbsp;&mdash; every second she types one of <i>N</i> first letters of English alphabet with equal probability. Fortunately, the word prepared by the showmen also contains some of these <i>N</i> letters only.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, prior to giving a keyboard to the monkey, the showmen want to calculate the time it would take her to finish the job. More precisely, after how many seconds the given word will appear in the typed string for the first time?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>N</i>&nbsp;&mdash; the number of letters the monkey can type <nobr>(1 &le; <i>N</i> &le; 26)</nobr>. The second line contains a word proposed by the showmen. The word can contain only the first <i>N</i> lowercase Latin letters. Its length is positive and doesn't exceed 30000. 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the expected time the monkey will need to type a word, rounded down to the nearest integer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
aa
</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
ba
</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR></TABLE>
______________________________________________________
1678||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Space poker. A legendary game, first version of which was introduced as far as in year 1284 of Alien era. Even nowadays its rules are known only to small group of professional players. Fortunately, the developers of the first program in the world playing space poker asked for your help.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>N</i> extraterrestial players in space poker. At the beginning of the round, each player gets <i>M</i> cards (we call them <i>hole cards</i>). Players don't know hole cards of their opponents. Then <i>K</i> <i>community</i> cards are consecutively dealt face-up. So, community cards are known to all players. Player's <i>hand</i> consists of his hole cards and all community cards&nbsp;&mdash; <i>M</i>&nbsp;+&nbsp;<i>K</i> cards in total. There are no suits, cards differ only in their values. There are 13 different values: "2", "3", "4", &hellip;,  "9", "T", "J", "Q", "K" and "A". The card deck is infinite, and the probability of the event that the next card will have a given value is equal to 1/13. The combinations in space poker are represented in the form: <nobr>(<i>v</i><sub>1</sub>, &hellip;, <i>v<sub>L</sub></i>)</nobr>, where <i>L</i> is the number of different values in the combination. The hand satisfies the combination <nobr>(<i>v</i><sub>1</sub>, &hellip;, <i>v<sub>L</sub></i>)</nobr> in case it contains <i>v</i><sub>1</sub> cards of one value, <i>v</i><sub>2</sub> cards of another value, &hellip;, <i>v<sub>L</sub></i> cards of <i>L</i>-th value. For example, combination (2,&nbsp;2) is satisfied by hands "2JA2A" and "22233". Combination (2,&nbsp;3) is satisfied by hand "KQKQKQ" but is not satisfied by hand "AAAAAA". All combinations have different strength. The winner of the round is a player whose hand satisfies the combination of the maximal strength among all combinations in hands of all players. If there is more than one such player, the round ends in a draw.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Suppose you know the hole cards of the first player and partly dealt community cards. Calculate the probability the first player will be the only winner of this round.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>N</i>, <i>M</i> and <i>K</i> separated by spaces (<nobr>2 &le; <i>N</i>, <i>M</i> &le; 10;</nobr> <nobr>1 &le; <i>K</i> &le; 5</nobr>). The second line contains <i>M</i> symbols&nbsp;&mdash; hole cards of the first player. The third line contains at most <i>K</i> symbols&nbsp;&mdash; dealt community cards. The fourth line contains integer <i>C</i>&nbsp;&mdash; the number of combinations in space poker <nobr>(1 &le; <i>C</i> &le; 100)</nobr>. The following <i>C</i> lines contain combinations in order of increasing strength. Each description has the form <nobr><i>L</i> <i>v</i><sub>1</sub> <i>v</i><sub>2</sub> &hellip; <i>v<sub>L</sub></i></nobr>. <i>L</i> and <i>v<sub>i</sub></i> are positive integers, sum of all <i>v<sub>i</sub></i> doesn't exceed <i>M</i>&nbsp;+&nbsp;<i>K</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the probability of winning for the first player with absolute error not exceeding 10<sup>&minus;5</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 5 2
23456

1
1 2</PRE></TD><TD><PRE CLASS="intable">0.0883526857</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 5 2
23456
78
2
7 1 1 1 1 1 1 1
1 4</PRE></TD><TD><PRE CLASS="intable">0.8407915043</PRE></TD></TR></TABLE>
______________________________________________________
1679||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Scrooge McDuck owns a circular island of radius <i>R</i> centered at the origin.
He wants to build a square tower there to keep all his wealth.
The wealth is quite huge, so the square of the foundation should be inscribed in the circle of the island. After reading a lot of popular magazines, Mrs. Beakley claimed
that according to feng shui, the entrance to the tower should be situated at the point (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>), and the exit should be at the point (<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>). Of course, entrance and exit points should lie on the border of tower's foundation. Scrooge told you all these numbers and wants to know if it is possible to satisfy Mrs. Beakley's requirements.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>T</i>&nbsp;&mdash; the number of test cases <nobr>(1 &le; <i>T</i> &le; 1000)</nobr>. Each of the next <i>T</i> lines contains five integers separated by spaces: <i>R</i>, <i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>.
1&nbsp;&le;&nbsp;<i>R</i>&nbsp;&le;&nbsp;10000. Points (<i>x</i><sub>1</sub>,&nbsp;<i>y</i><sub>1</sub>) and (<i>x</i><sub>2</sub>,&nbsp;<i>y</i><sub>2</sub>) are situated inside the circle.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of the <i>T</i> cases output &ldquo;YES&rdquo; if the tower can be built,
and &ldquo;NO&rdquo; otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2 1 1 1 -1
2 1 1 0 0
1 1 0 -1 0
</PRE></TD><TD><PRE CLASS="intable">YES
NO
YES
</PRE></TD></TR></TABLE>
______________________________________________________
1680||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Any participant of an ACM ICPC Regional contest knows that it is very annoying
to take the place that is the first nonqualifying for the World Finals. It often
happens that a team falls very short of getting into the Finals.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, in 1999 a team of the Ural State University took the tenth place
at the Northeastern European Regional Contest, and only 6 minutes of penalty
time kept it from getting into the Finals. The last qualifying ninth place was
then taken by a team of the St. Petersburg Institute of Fine Mechanics and
Optics. In 2006 the distance between the last qualifying and the first
nonqualifying places was as small as 4 minutes of penalty time. However,
between teams of the Kazakh National University and the St. Petersburg
Polytechnical University there was the third team of the Saratov State
University, which could not go to the Finals because the second team of the
same university had 2 more solved problems.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Northeastern European Region, which holds Regional contests in which all
Russian teams take part, is given every year some quota <i>q</i> for representing this
region in the World Finals. According to the ACM ICPC rules, no two teams of the same
university may take part in the Finals. That is why, when it is decided who
goes to the Finals, any team that has worse results than some other team of the
same university is excluded from the protocol. The (<i>q</i>&nbsp;+&nbsp;1)th
place in the resulting list is called the first nonqualifying. If the regional quota
were increased by one place, then the team that took that place would get into
the Finals.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the year <i>y</i> when a  Northeastern European Regional
Contest was held (an integer from 1996 to 2008), the number of participating
teams <i>n</i> &le; 201, and the quota <i>q</i> for the World Finals (an integer
from 3 to 12). The numbers are separated with a space. In the following <i>n</i>
lines you are given the resulting protocol in the form of a list of the names of
teams in the order of places they took at the contest. The name of each team
consists of the name of its university and the number of the team separated from
the name of the university by a space and symbol '#'. If a university was presented
by only one team, then its name may consists of the name of the university
only. The names of universities consist of English letters, spaces, symbols
'.', '-', and '&'; they are no longer than 36 symbols. The names of two
universities can't differ by the case of the letters only. The number of a
team is an integer from 1 to 8.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the name of the team that took the first nonqualifying place at this
semi-final. It is guaranteed that such a team exists.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1999 10 6
St Petersburg SU #1
Belarusian SU #1
Moscow SU #4
Southern Ural SU
Moscow SU #1
Novosibirsk SU #1
St Petersburg SU #3
Belarusian SU #3
St Petersburg IFMO #1
Ural SU #3
</PRE></TD><TD><PRE CLASS="intable">Ural SU #3
</PRE></TD></TR></TABLE>
______________________________________________________
1681||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Brother Rabbit fell into the habit of stealing dates from Brother Bear's
garden. He was stealing and stealing, and nothing could be done about that.
In order to save his dates, Brother Bear put <i>n</i> poles around the garden.
Then he walked around the garden several times with barbed wire making a fence.
But the next day there were Brother Rabbit's footprints in the garden again
and date stones were strewn everywhere. Then Brother Bear asked for Brother
Wolf's advice. Brother Wolf recommended to stretch ropes with bells
across the garden. He said: &ldquo;Brother Rabbit will come for dates,
touch a rope, and you will hear the noise at once.&rdquo;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Brother Bear took the advice and they started stretching ropes between the
poles. Brother Wolf would stand near a pole and tie a rope end to it, and Brother
Bear would count off <nobr><i>k</i> &minus; 1</nobr> poles counter-clockwise
and tie the other end of the rope to the <i>k</i>-th pole. After that Brother
Wolf would come to another pole and so on, till ropes were stretched from
every pole. Satisfied, they went away to their homes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">That night Brother Bear slept light but didn't hear anything. In the morning he
went out into the garden and what did he saw? Brother Rabbit wasn't such a
fool. He noticed the ropes and didn't jump them over. He stole dates only from those
trees to which he could come without jumping over the ropes. Brother Bear
became upset at first, but then he rejoiced that a half of the garden had been
saved. Or less than a half? He couldn't calculate. Help Brother Bear.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the numbers <i>n</i> and <i>k</i> (<nobr>3 &le; <i>n</i> &le; 300;</nobr>
<nobr>1 &le; <i>k</i> &lt; <i>n</i></nobr>). In the following <i>n</i> lines
you are given the coordinates of all the poles in the counter-clockwise order.
They are integers with absolute values not exceeding 10000. The garden is
convex; i.e., every straight segment connecting two points on different sides of
the fence lies inside the garden and may touch the fence at these two points
only.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the ratio of the area saved by the ropes to the whole area inside the
fence accurate to 10<sup>&minus;4</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
0 0
20 0
20 20
10 30
0 20
</PRE></TD><TD><PRE CLASS="intable">0.466666667
</PRE></TD></TR><TR><TD><PRE CLASS="intable">6 2
0 2
-2 1
-2 -1
0 -2
2 -1
2 1
</PRE></TD><TD><PRE CLASS="intable">0.666666667
</PRE></TD></TR></TABLE>
______________________________________________________
1682||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor Nathan Mathan is crazy about mathematics. For an unknown reason,
he started to write on the blackboard all positive integers starting from 1. After
writing a new number <i>a</i>, Professor draws lines connecting it with all the
numbers <i>b</i> that are already on the blackboard and satisfy at least one of
the conditions: 
<ul>
<li> <i>b</i> + <i>a</i> &middot; <i>a</i> &equiv; 0 (mod <i>k</i>),</li>
<li> <i>a</i> + <i>b</i> &middot; <i>b</i> &equiv; 0 (mod <i>k</i>),</li>
</ul>
where <i>k</i> is some parameter.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nobody can persuade him to stop this meaningless procedure. Professor says that
he will stop as soon as there appears a cycle in the graph of the numbers on
the blackboard. But only Professor knows when that will happen and whether it will happen at
all. Help his colleagues determine after which number he will stop.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the integer <i>k</i> (1 &le; <i>k</i> &le; 100000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number after which the first cycle will appear in the graph. If it
never happens, output &minus;1.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In example after Professor had written all integers from 1 to 4 the graph contained edges 
(1, 3) and (2, 4). After writing number 5, Professor connects it with numbers 1 and 3,
so the cycle 1-5-3-1 appears in the graph.
</DIV></DIV>
______________________________________________________
1683||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once Ivanushka was lying on the stove as usually and meditating. And he came up
with an idea: he should buy a fridge. So he bought a fridge and placed it near
the stove. But the fridge was unsteady, because the floor in the house was
wooden. Ivanushka found a way out. He decided to put something under a leg of
the fridge so that it would become steady.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivanushka took a 1 cm wide and <i>n</i> cm long paper strip and started to fold it
so as to obtain a paper square with a side of 1 cm consisting of <i>n</i>
layers. It is exactly this thickness that was needed to make the fridge steady.
Ivanushka folds the strip according to the following algorithm: he applies a
ruler to measure off a whole number of centimeters from the left edge of the
strip and folds the left part to the right (as a result, the left edge shifts
to the right by the measured number of centimeters). Then he again measures off
some number of centimeters from the new left edge and folds them to the right.
He repeats this operation until the strip becomes 1 cm long.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine the minimal number of foldings Ivanushka has to do.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the integer <i>n</i>
(1 &le; <i>n</i> &le; 10<sup>9</sup>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal number of paper foldings necessary to
obtain the required number of layers. In the second line output the sequence
of lengths in centimeters that Ivanushka measured off before each folding.
Separate the numbers with a space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12
</PRE></TD><TD><PRE CLASS="intable">4
5 3 2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1684||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Not long ago Jack read on a fence a word that was new and amusing for him. Jack
liked it so much that he wanted to invent another amusing word, but no matter
how hard he tried he couldn't do it. All the words he could invent consisted of
prefixes of the initial word and therefore didn't please Jack. He continued to
invent words that were longer and longer, but none of them was pleasing.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And now the time has come for Jack to have his last word.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the amusing word that was written on the fence. The
second line contains Jack's last word. The words are nonempty, consist of
lower-case English letters, and are no longer than 75000 symbols.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Jack didn't invent a new amusing word, output &ldquo;No&rdquo; in the first
line. In this case, show Jack how to decompose his last word into several parts
each of which is either the initial word or its nonempty prefix. Output these
parts in the second line separating them with a space. If there is no such
decomposition, output &ldquo;Yes&rdquo; in the only output line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">abracadabra
abrabracada
</PRE></TD><TD><PRE CLASS="intable">No
abr abracad a
</PRE></TD></TR><TR><TD><PRE CLASS="intable">abracadabra
arbadacarba
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR></TABLE>
______________________________________________________
1685||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasya's father is good not only at mathematics but also at orthography. But the father
doesn't like that Vasya gets good grades only because he copies homework assignments
prepared by his father. That is why the father decided to alter the
scheme of preparing his son's English assignments.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now the father doesn't just give a ready text to his son. He modifies it as
follows. First he writes the middle symbol of the text (if the symbols in the
text are numbered from 1 to <i>n</i>, then the middle symbol has the number (1 + <i>n</i>) div
2). After that he writes according to this rule the left part of the text and then the
right part. For example, if we apply the procedure to the word <code>orthography</code>,
we get <code>gtorhoprahy</code>. Poor Vasya has to solve these &ldquo;riddles&rdquo;.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To understand Vasya's plight, try to solve the following riddle:
&ldquo;one eye, one horn, but not a rhino&rdquo;.
Or decode the answer: 
&ldquo;<code>reo&nbsp;ac&nbsp;wpeosr&nbsp;tu&nbsp;fdbmo&nbsp;heinoa&nbsp;&nbsp;cnrer</code>&rdquo;.
Will you help Vasya now?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the text of Vasya's homework that his father has
written for him. The text is no longer than 20000 symbols: English letters,
spaces, and punctuation marks.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a single line output the decoded text of the homework. The line must end
with the line end character.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">kyaVs alisse uop.
</PRE></TD><TD><PRE CLASS="intable">Vasya likes soup.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">gtorhoprahy
</PRE></TD><TD><PRE CLASS="intable">orthography
</PRE></TD></TR></TABLE>
______________________________________________________
1686||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Empire is not safe. Because of the lingering economic crisis,
people's discontent is growing in central sectors. On the outskirts of
the Galaxy, the Rebels' activity has sharply increased. The Imperial Fleet has to
repel attacks on strategically important stellar systems almost every day. The
hostilities have led to the drastic increase in fuel consumption. The situation
is aggravated by the fact that local facilities for helium-3 production are
scarce and fuel has to be brought from the center of the Galaxy. The Rebels
are well-informed about that and regularly carry out raids upon main logistics hubs, which leads to the permanent fuel shortage.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Darth Vader charged Commander of the Fleet with the task of improving this
situation as soon as possible. A group of officers proposed a plan based on the
constant change of supply routes with a simultaneous increase in the number of
patrols. But Head of Advanced Defense Technology Department came forth with a
more radical proposal. He suggested decreasing the dependence of the Fleet on
the fuel supply by using alternative energy sources. In his opinion, the most
promising technology was the use of photovoltaic cells. He proposed to cover all
spaceships with solar panels which would absorb the energy of stars. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The officers were shocked by this plan, because any competent specialist
understands that even if every square meter of the surface of a spaceship were
covered with solar batteries their power would be insufficient for the
supply of the hyperdrive. The worst of it was that Commander of the Fleet liked
the idea. In the course of the ensuing bureaucratic struggle it turned out that
the owner of the largest supplier of solar panels was the son of Head of Advanced
Defense Technology Department. In order to discredit the proposal still
further, the officers asked you to calculate the power provided by solar
panels for a typical spaceship in that sector of the Galaxy.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you were working on this task, an unknown man dressed in all black came into your
cabin. He was quite friendly and offered his assistance. He promised you a rapid
career advancement if you inflated the result twofold. And if you refused, he
wouldn't be able to guarantee your family's safety. After some thought, you
agreed.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A typical spaceship is a tetrahedron. In the first four lines you are given the
coordinates of its vertices. These are integers with absolute values not
exceeding 100; the unit of measure is meter. In the following line you are
given the number <i>n</i> of stars (1 &le; <i>n</i> &le; 10).
Each of the following <i>n</i> lines contains three integers, which are the
coordinates of the vector directed to the star. The length of this vector is
the light intensity of the star in watts per square meter. This is a positive
number not exceeding 2500&nbsp;W/m<sup>2</sup>, because typical spaceships don't
fly near stars. It is guaranteed that the directions to all stars are
different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the total power of the solar panels of the spaceship taking into
account the man in black's wish. Output this power in watts accurate to 10<sup>&minus;5</sup>.
The power of a solar panel with an area of 1&nbsp;m<sup>2</sup> illuminated
by light of intensity 1&nbsp;W/m<sup>2</sup> is the cosine of the incidence
angle of the light beams.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 -1 0
0 1 0
0 0 2
1 0 0
2
0 0 -1358
21 0 0
</PRE></TD><TD><PRE CLASS="intable">2800.00000
</PRE></TD></TR></TABLE>
______________________________________________________
1687||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">San Sanych was a famous numismatist. Every time he came to another country
he would find a shop for collectors at once and buy there all local coins missing
in his collection.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When he came to Japan and found such a shop, he
figured which Japanese coins were interesting to him. He was going to buy them
when he noticed that all the coins in that shop were packed in transparent
boxes, several coins in one box, and one could buy whole boxes only. The price
for all boxes was the same&mdash;200 yen. San Sanych was ready to buy some
extra coins if eventually every coin that he needed would cost him no more than
100 yen. He started to examine the boxes. The required coins were present in
many boxes in different combinations. It was not easy to make the choice.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Seeing the customer's confusion, the shopkeeper offered her help and asked
which coins he wanted. San Sanych named the coins and added that he would buy
several boxes if their total cost didn't exceed the value of the purchase. In
order to determine the value of a purchase, San Sanych counts the number of
different new coins in the purchase and multiplies the number by 100 yen.
The shopkeeper said that she would select a suitable set of
boxes and let San Sanych have it at half-price if he bought the whole set. Of
course, in this case he might have to buy some redundant boxes&mdash;those that
could be excluded without decreasing the value of the set. San Sanych couldn't
miss the chance to get a discount and agreed to buy a set with the total cost,
the discount taken into account, not exceeding its value. The shopkeeper was
very kind and promised not to include into the set boxes that contained none
of the required coins. Naturally, San Sanych left the shop with the largest set
satisfying the above conditions.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine which boxes the shopkeeper included in the set.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line there are two integers: the number <i>n</i> of kinds of Japanese
coins in the shop (1 &le; <i>n</i> &le; 100) and the number <i>k</i> of boxes
in the shop (1 &le; <i>k</i> &le; 50). The boxes are described in the following
<i>k</i> lines. Each of these lines starts with the number <i>k<sub>i</sub></i>
of coins in a box (1 &le; <i>k<sub>i</sub></i> &le; 100). Then there are
exactly <i>k<sub>i</sub></i> numbers denoting coins. The numbers are separated
with a space. The coins are numbered from 1 to <i>n</i>. All coins in each box
are different.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the last line you are given the list of coins that San Sanych wants to buy.
The first number in this line is the number <i>m</i> of coins in the list
(1 &le; <i>m</i> &le; 100). Then there are <i>m</i> numbers from 1 to <i>n</i>
separated with a space. All numbers in the list are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number of boxes San Sanych bought. In the next
line, give the numbers of these boxes separated with a space. The boxes are
numbered from 1 to <i>k</i> as they are given in the input. If there are
several possible answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 4
5 2 7 6 1 3
6 6 7 10 2 9 4
5 1 8 3 9 2
5 4 3 7 6 1
4 8 5 4 9
</PRE></TD><TD><PRE CLASS="intable">3
2 3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1688||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">All names in this problem are fictitious; the coincidences are accidental.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As a result of a strange set of circumstances, Ivan became a member of
the team named Ural SU Team.GOV. Vadim and Alex, being permanent members of the
team, declared to Ivan that nobody had yet left the team just so easily: the
charge for leaving the team was <i>n</i> rubles. As soon as Ivan bought for Vadim
and Alex beer for <i>n</i> rubles, he would be allowed to leave Team.GOV and
enter any other team.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At first Ivan was distressed with that news, but then he understood that it
was not so bad to be in Team.GOV. The point was that every time the team visited a restaurant,
Vadim paid for all three of them. After several such visits, Ivan realized
that he had already saved quite a sum of money. He decided to write down the
sums that the team paid in restaurants and leave the team as soon as the money
Vadim had paid for him exceeded <i>n</i> rubles. You may assume that the three
members of the team order the same set of dishes; it means that if each of them
paid for himself, they would have to divide the sum in the bill by 3.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the charge <i>n</i> for leaving Team.GOV and
the number <i>m</i> of visits to restaurants (<i>n</i> is integer; <nobr>1 &le;
<i>n</i> &le; 2 &middot; 10<sup>9</sup>;</nobr> <nobr>0 &le; <i>m</i> &le; 3000).</nobr>
In the following <i>m</i> lines you are given the sums spent in the
restaurants; these are integers in the range from 1 ruble to 2 million rubles.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Ivan can leave Team.GOV after <i>x</i> visits to restaurants, output
&ldquo;Free after x times.&rdquo; Otherwise, output &ldquo;Team.GOV!&rdquo;
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1666 5
2000
1024
900
1156
1200
</PRE></TD><TD><PRE CLASS="intable">Free after 4 times.
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3000 5
2000
1024
900
1156
1200
</PRE></TD><TD><PRE CLASS="intable">Team.GOV!
</PRE></TD></TR></TABLE>
______________________________________________________
1689||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fisherman Ivan likes to practice weightlifting when he is free from fishing.
He lifts the barbell, turns, twists, and spins it, and does everything he wants
with it. During these tricks the special semicircular groove in which
the barbell is usually kept stays free and worms crawl into it. Ivan doesn't want to
squash the worms because he will need them as a bait for fishing. That is why
he chooses the place to put the barbell in such way that it hurts as few worms as possible.
Can you find such a place?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a <i>p</i> cm wide plate on each side of the barbell. The distance
between the left edge of the left plate and the right edge of the right plate
is <i>b</i>&nbsp;cm. The length of the groove is <i>g</i>&nbsp;cm.
All worms have the same length <i>w</i>&nbsp;cm and lie along the groove on its
bottom without overlapping. If even a small part of a worm gets under a plate
of the barbell, it is considered squashed and is unfit for fishing.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the length of the groove <i>g</i>
and the length of a worm <i>w</i> (1 &le; <i>w</i> &le; <i>g</i> &le; 100000).
In the second line there are the characteristics of the barbell
<i>b</i> and <i>p</i> (1 &le; <i>p</i> &le; <i>b</i>/2 &le; <i>g</i>/2).
The third line contains the number of worms <i>n</i>
(1 &le; <i>n</i> &le; 100000).
In the fourth line you are given the coordinates of the worms
<i>x<sub>i</sub></i> separated with a space; they are in the range from 0
to <i>g</i>&nbsp;&minus;&nbsp;<i>w</i>. The coordinate of a worm is the distance from its
left end to the left end of the groove in centimeters.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All numbers in the input data are integers.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the integer distance from the left edge of the left plate of the barbell
to the left end of the groove in centimeters. The barbell should hurt the
minimal number of worms. In the case of equal number of the hurt worms, the
distance to the left end of the groove should be minimal.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1000 4
500 60
10
47 68 22 237 585 417 666 996 888 555
</PRE></TD><TD><PRE CLASS="intable">149
</PRE></TD></TR><TR><TD><PRE CLASS="intable">20 1
2 1
11
1 2 3 4 6 8 10 12 14 16 19
</PRE></TD><TD><PRE CLASS="intable">17
</PRE></TD></TR></TABLE>
______________________________________________________
1690||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everybody was silent. It became known that after the North battle all warriors of the great Coalition Army would stop defending their kingdom as battle mages and would serve as coaches. So it was the time to build a new powerful army. It was the wise Sandro who broke the silence and began to write down the names of the candidates. Finally, he wrote down 5<i>n</i> names. But only <i>n</i> best mages had to be chosen according to the law of the kingdom. After a long discussion it was decided to build an army in such a way that every two mages in this army would <i>respect</i> each other.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All mages in the kingdom live in their own houses, situated at the points on the plane with integer coordinates. Somewhy two mages respect each other if and only if a line segment connecting their houses contains at least one point with integer coordinates, different from endpoints of this segment. For example, if there are houses at points (1,1) and (5,5) then their inhabitants respect each other, because there is a point (2,2) on this segment. In the same time, inhabitants of the houses situated in (0,0) and (1,10) don't respect each other. Help the government to build an army!</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> <nobr>(1 &le; <i>n</i> &le; 5000)</nobr>.
The <i>i</i>-th of the next 5<i>n</i> lines contains a pair of integers <i>x</i> and <i>y</i>, not exceeding 10000 by their absolute values&mdash;coordinates of the house of the <i>i</i>-th candidate. All houses are situated at different points.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the required army can be built, output &ldquo;OK&rdquo; in the first line and in the second line output <i>n</i> space-separated numbers of the selected candidates in any order. If there are several possible answers, you can output any of them. If no army can be built, output &ldquo;IMPOSSIBLE&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 1
5 5
0 0
2 2
0 10
6 6
7 7
8 8
9 9
10 10
</PRE></TD><TD><PRE CLASS="intable">OK
2 1</PRE></TD></TR></TABLE>
______________________________________________________
1691||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr wants to use his own algorithm to solve a very important problem for a directed graph <i>G</i> with <i>n</i> vertices and <i>m</i> arcs. Unfortunately, Petr cannot calculate a complexity of his algorithm. He only knows that the complexity depends on the order of growth of value <i>F</i>(<i>N</i>) which denotes the number of walks of length <i>N</i> from vertex <i>s</i> to vertex <i>t</i> in <i>G</i>. Petr wants to bound <i>F</i>(<i>N</i>) with a polynomial of minimal degree, that is, to find the minimal non-negative integer <i>k</i> such that for some fixed number <i>C</i> inequality <nobr><i>F</i>(<i>N</i>) &le; <i>CN<sup>k</sup></i></nobr> holds for any positive <i>N</i>. Help him to do it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains 4 space-separated integers <i>n</i>, <i>m</i>, <i>s</i>, <i>t</i> <nobr>(1 &le; <i>n</i>, <i>m</i> &le; 100000)</nobr>. The vertices are numbered 1 to <i>n</i>. Each of the next <i>m</i> lines contains two space-separated integers&mdash;numbers of starting and ending vertices of the current arc. The graph doesn't contain multiple arcs but may contain loops.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal integer <i>k</i> which satisfies the problem statement.
If there are no such numbers, output &ldquo;−1&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3 1 2
1 1
1 2
2 2
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 6 1 2
1 2
2 1
1 3
3 1
2 3
3 2
</PRE></TD><TD><PRE CLASS="intable">-1</PRE></TD></TR></TABLE>
______________________________________________________
1692||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The government of Cuckooland decided that each province of such a huge country should have its own flag. A famous painter Cuckooshkin was told to create all flags. It is known that Cuckooshkin uses only <i>n</i> different colors in his paintings. According to the government's plan, every two flags of provinces should have at least one common color, which will symbolize integrity of the country. On the other hand, the painter wants to make these flags as varicoloured as possible, so he doesn't want any colour to occur in three or more flags. What is the maximal number of flags Cuckooshkin can create without breaking neither his own nor government's requirements?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the only integer <i>n</i> <nobr>(3 &le; <i>n</i> &le; 1000)</nobr>, the number of colors the painter can use. The colors are numbered 1 to <i>n</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the integer <i>k</i>, the maximal number of flags the painter can create. Each of the next <i>k</i> lines should contain description of the next flag: first, the number of colors used in it and then the numbers of these colors. All integers in this line should be separated by single space. In case there are many correct answers, you can output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4</PRE></TD><TD><PRE CLASS="intable">3
2 1 2
2 1 3
2 2 3</PRE></TD></TR></TABLE>
______________________________________________________
1693||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sam Loyd is a famous american puzzle creator. One of his most famous puzzles is &ldquo;The 15 puzzle&rdquo;. Also he is an author of many chess puzzles and cutting problems. Now you can try to solve his problem about cutting a chessboard.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given an <i>n</i> &times; <i>n</i> chessboard. Your goal is to cut it into the maximal number of different pieces. Each piece must consist of one or more cells and represent a side-connected region. If one piece can be obtained from another by a sequence of rotations then these pieces are considered equal. For example, there are two one-cell pieces: black cell and white cell and only one two-cell piece.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here is one of possible solutions of the original Loyd's problem about cutting an 8 &times; 8 chessboard in 18 different pieces:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the only integer <i>n</i>, the length of the chessboard side <nobr>(1 &le; <i>n</i> &le; 30)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal number of different pieces the chessboard can be cut into. Then output the required cutting: <i>n</i> lines with <i>n</i> lowercase latin letters in each of them. Each piece must consist of the same letters, one letter can be used for representing several pieces, but every two pieces sharing a common side must be represented by different letters (see example for further clarification).
If there are several optimal cuttings, you can output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8</PRE></TD><TD><PRE CLASS="intable">18
aaaacaaa
bbbcccba
baddabbb
aacdacba
accdacaa
babdccbb
baaadbba
babbaaaa
</PRE></TD></TR></TABLE>
______________________________________________________
1694||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Federal Security Agency is extremely interested in the loyalty of its special agents. To provide this loyalty they developed a <i>killer words</i> technology: if an agent doesn't execute orders anymore, it is enough to pronounce a special word to activate a bomb in the brain of the agent and eliminate him.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The bomb should not be activated accidentally, so the killer word should be quite special:
it should contain only first <i>m</i> letters of english alphabet and should be a
<i>k-repetition</i>, that is, it should be possible to represent it as a concatenation
of <i>k</i> equal words. Moreover, to exclude the possibility of killing unnessecary agents, no proper substring of a killer word can be a <i>k</i>-repetition. Your task is to calculate the number of words which can be used as killer words and consist of at most <i>n</i> letters.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>m</i>, <i>k</i>, <i>n</i> <nobr>(1 &le; <i>m</i> &le; 18; 2 &le; <i>k</i> &le; 5; 1 &le; <i>n</i> &le; 22)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the required number of killer words.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2 4</PRE></TD><TD><PRE CLASS="intable">9</PRE></TD></TR></TABLE>
______________________________________________________
1695||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> robots on planet PTZZZ. Some of the robots are friends, and some of them are not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once a day some of the robots go to work and all the other robots go to a theme park and have fun. At least one robot should go to work. An administrator-robot decides who should go to work and who should have fun. The work is so important for robots that the first day when the administrator-robot made his decision was named the First day of the World.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it turns out that the group of robots that goes to work is the same as the group in any day before, the administrator-robot will rust of sadness. Moreover, the law doesn't allow the administrator-robot to form a working group in such a way that there will be a pair of robots in this group that are not friends.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The administrator-robot doesn't want to rust, so since the first day he tries to form a different working group. However, the administrator-robot will rust sooner or later. Your task is to calculate the day number when this will happen.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i>, the number of robots on PTZZZ <nobr>(1 &le; <i>n</i> &le; 50)</nobr>. Each of the next <i>n</i> lines contains <i>n</i> digits. <i>j</i>-th digit in <i>i</i>-th line is 1 if <i>i</i>-th and <i>j</i>-th robots are friends, and 0 otherwise. It is guaranteed that <i>i</i>-th digit in <i>i</i>-th line is equal to zero, and <i>j</i>-th digit in <i>i</i>-th line is equal to <i>i</i>-th digit in <i>j</i>-th line.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the day number the administrator-robot will rust in.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
011100
101100
110100
111000
000001
000010
</PRE></TD><TD><PRE CLASS="intable">19</PRE></TD></TR></TABLE>
______________________________________________________
1696||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> robots on planet PTZZZ. Each robot has its own unique rank&mdash;an integer from 1 to <i>n</i>, and should execute all orders from robots with a higher rank.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once a month all robots get their salary: a positive integer number of credits, not exceeding <i>k</i>. The salary is paid by an accountant-robot. Salary is so important for robots that the first month when all the robots got their salary was named the First month of the First year. There are <i>p</i> months in the year on PTZZZ, so the robots get their salary <i>p</i> times a year.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The salary paid to each robot can be different in different months. If it turns out
that all the robots get exactly the same salary as in any month earlier, the accountant-robot will rust of sadness. What is more, the law doesn't allow the accountant-robot to pay salary in such a way that there will be a triple of robots (<i>a</i>, <i>b</i>, <i>c</i>) with rank of <i>a</i> higher than rank of <i>b</i>, rank of <i>b</i> higher than rank of <i>c</i> and the salary of <i>a</i> less than the salary of <i>b</i> and the salary of <i>b</i> less than the salary of <i>c</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The accountant-robot doesn't want to rust, so since the First month of the First year he tries to pay salary in different ways. However, the accountant-robot will rust sooner or later. Your task is to calculate the month number when this will happen.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains three space-separated integers <i>n</i>, <i>k</i> and <i>p</i>&mdash;the number of robots on PTZZZ, the maximal possible salary and the number of months in a year, respectively <nobr>(1 &le; <i>n</i> &le; 1000; 1 &le; <i>k</i> &le; 200; 2 &le; <i>p</i> &le; 10<sup>9</sup>)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the month number the accountant-robot will rust in. Months are numerated 1 to <i>p</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3 20</PRE></TD><TD><PRE CLASS="intable">7</PRE></TD></TR></TABLE>
______________________________________________________
1697||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a sniper at point <i>S</i>. His mission is to eliminate an enemy of the state, who rides his bicycle along a straight line from point <i>A</i> to point <i>B</i>. The bullet flies along a striaght line with infinite speed. There are <i>n</i> rectangular parallelepiped-shaped skyscrapers in the city. The bullet can't fly through the skyscraper but can touch its border. Of course, the sniper will make a deadly shot as soon as possible. Your task is to calculate the coordinates of the enemy at the moment of the shot.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated coordinates of <i>S</i>: <i>s<sub>x</sub></i>, <i>s<sub>y</sub></i>, <i>s<sub>z</sub></i> <nobr>(<i>s<sub>z</sub></i> &ge; 0)</nobr>. The second line contains space-separated coordinates of points <i>A</i> and <i>B</i>: <i>a<sub>x</sub></i>, <i>a<sub>y</sub></i>, <i>b<sub>x</sub></i>, <i>b<sub>y</sub></i>. The enemy of the state moves on the surface of earth, so his <i>z</i>-coordinate is always equal to zero. The third line containts an integer <i>n</i> <nobr>(0 &le; <i>n</i> &le; 100)</nobr>. Each of the following <i>n</i> lines contains space-separated numbers <i>l<sub>x</sub></i>, <i>l<sub>y</sub></i>, <i>r<sub>x</sub></i>, <i>r<sub>y</sub></i>, <i>h</i> <nobr>(<i>l<sub>x</sub></i> &lt; <i>r<sub>x</sub></i>; <i>l<sub>y</sub></i> &lt; <i>r<sub>y</sub></i>; <i>h</i> &gt; 0)</nobr>&mdash;coordinates of the opposite corners of the bottom of the current skyscraper and its height. The sides of the skyscrapers are parallel to the corrdinate axes. All coordinates and heights are integers and don't exceed 100 by their absolute values.
It is guaranteed that no two skyscrapers have common points, the point <i>S</i> doesn't lie inside or on the border of the skyscraper and the segment <i>AB</i> doesn't have common points with any of the skyscrapers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the enemy of the state cannot be eliminated, output &ldquo;Impossible&rdquo;. In the other case output the coordinates of the enemy of the state precise up to 10<sup>−7</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0 2
-4 4 4 4
2
-3 2 -1 3 10
1 -1 4 2 20
</PRE></TD><TD><PRE CLASS="intable">-1.3333333333 4.0000000000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 0 2
4 1 4 -1
1
1 -1 3 1 10
</PRE></TD><TD><PRE CLASS="intable">Impossible
</PRE></TD></TR></TABLE>
______________________________________________________
1698||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first arithmetical operation taught to the children of the Square country is the calculation of squares of positive integers. At the first lesson the children are provided with &ldquo;easy&rdquo; numbers, calculating a square of which can be done by writing a few digits in front of them (i.e. 76 is an easy number because 76<sup>2</sup> = 5776). Of course, the numbers cannot contain leading zeroes. The task shouldn't be too difficult, so the easy numbers shouldn't contain more than <i>n</i> digits. How many different easy numbers can teachers prepare for the first lesson?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains an integer <i>n</i> <nobr>(1 &le; <i>n</i> &le; 2000)</nobr>, the maximal length of the easy number the children can be provided with.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different easy numbers consisting of at most <i>n</i> digits.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1699||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Military built a rectangular training ground of <i>w</i> &times; <i>h</i> cells to train battle turtles. Some of the cells are passable for turtles, and some of them are not. Turtles can move only parallel to the sides of the training ground. The ground is constructed in such a way that there is exactly one way to get from one passable cell to another passable cell without visiting any cell twice. It is known that turtles can run very fast along a straight line, but it is difficult for them to turn 90 degrees. So the complexity of the route is caluclated as the number of turns the turtle will make on its way from the initial to the final cell of the route. Your task is to write a program which will calculate the complexity of the route knowing its initial and final cell.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two space-separated integers <i>h</i> and <i>w</i>, the lengths of the ground sides <nobr>(1 &le; <i>w</i> &middot; <i>h</i> &le; 100000)</nobr>. Then follows the map of the polygon&mdash;<i>h</i> lines with <i>w</i> symbols in each. Symbol &ldquo;#&rdquo; stays for a passable cell and &ldquo;.&rdquo; stays for a non-passable cell. Line number <i>h</i> + 2 contains an integer <i>q</i>, the number of routes you have to calculate the complexity for <nobr>(1 &le; <i>q</i> &le; 50000)</nobr>. Each of the next <i>q</i> lines contains four space-separated integers: the number of row and the number of column of the initial cell of the route, the number of row and the number of column of the final cell of the route, respectively. It is guaranteed that the initial and the final cells of the route are passable. Rows are numerated 1 to <i>h</i> from top to bottom, columns are numerated 1 to <i>w</i> from left to right.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each route output its complexity in a separate line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
.#..
###.
..##
.##.
....
4
1 2 2 1
2 3 4 3
4 2 3 4
1 2 4 2</PRE></TD><TD><PRE CLASS="intable">1
0
2
3</PRE></TD></TR></TABLE>
______________________________________________________
1700||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikolai was commuting home from work on the train. He preferred to walk on foot,
staring at the Earth hanging just above the horizon, but today he was in a hurry.
The train silently slid over magnetic rail, moving people on the ring route
along the Dome wall. If you look out one window, you can see majestic skyscrapers
and multilevel highways of a huge city; in the opposite window all you can see
is a desert, desolate lunar desert all the way to the horizon. It was crowded
in the railcar. The majority of passengers were similar to Nikolai in appearance &mdash; inexpensive-looking gray suit, slim briefcase and a fancy communicator on the left wrist. That was very typical for a working bee of the Moon's information society.
Some of them idly chatted, others wearily looked out the windows. Yet another few
stood frozen, with deadpans and glass eyes. One could notice that each of them
had a thin white cable running from the communicator to the head, ending somewhere
behind the left ear.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the next stop a seat near Nikolai become empty. He took the seat, stretched out
comfortably and pulled the same thin white cable out of his pocket. He connected
one end to the communicator and the other one to his neuroport behind the ear.
Immediately, standard desktop interface appeared. Everything his eyes saw was contained
in a window titled &ldquo;Real World&rdquo;. Nikolai switched to that window and turned off the sound button. The noise of the railcar and passengers faded out. Nothing
could distract him from reading mail. Unfortunately, there were only spam messages
in his mailbox. But one of these letters has drawn his attention. It was an
advertisement of some exclusive club for succeessful young men. A man in
a picture glowed with joy and incessantly repeated: &ldquo;I am happy to be here!&rdquo;
Nikolai highlighted the address of the club and copied it to his address book.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikolai disconnected from the communicator when the train approached his station.
He got off the rail and hurried to his apartment building. His apartment was on
the seventeenth floor. It was cramped, but had windows on the sunny side, which
was highly valued. Inside, it was clean, almost void of any traces of a living
being. If a spy infiltrated the apartment, he'd fail to find any object that
bears the traits of Nikolai's personality. To tell the truth, Nikolai himself
didn't know what kind of man was he.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It didn't take him long time before he left the apartment. He put on different
clothes, now he looked like unemployeed dweller of the lower levels &mdash; long
sleeves hid his communicator and the hood hid his neuroport. Nikolai has
gone directly to one of the three huge elevators which connected the domed
city with the underground levels, where all industry and life-support systems
were concentrated and where majority of the population lived. The elevator
operated similiar to terrestrial ferries &mdash; cars drove in and parked in rows,
passengers bought tickets and took their seats. Finally, the bell ringed,
red lights flashed out and the machine started to creep downwards. For some,
it was an adventurous journey in search of forbidden pleasures; for others,
it was a one-way trip home accompanied by shattered dreams and ruined plans.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It wasn't the first time Nikolai visited the lower levels. He quickly figured
out where the exclusive club from the ad was located. It was in old mines,
where the first colonists mined for water ice. The web of tunnels spread for
many miles and was considered one of the most dangerous places for the surface
folk. But Nikolai knew how to merge with the crowd and move around without
attracting needless attention. The crowd carried him to the front of a
dilapidated mansion. Nikolai just stood there in hesitation, then he had
checked the address and came in.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The inside of the club was very different. A visitor found himself in a large,
fully illuminated hall with high ceiling. The interior was laid out with
simplicity and style, which gave an impression of enormous wealth. There was
a reception desk on the other end of the hall. A beautiful, exquisite girl
sat behind it. When Nikolai approached the desk, she smiled wide and softly
asked:<br>
&ldquo;Good day to you, sir. Can I have your membership card, please?&rdquo;<br>
Nikolai had lost his concentration for a moment, but braced himself and
confidently said:<br>
&ldquo;I am happy to be here.&rdquo;<br>
The girl smiled even more wide, stood up and said:<br>
&ldquo;We're glad to see you too. Please follow me.&rdquo;<br>
They walked down through the twisting corridor past numerous doors, until
the girl had stopped in front of a red curtain. She invited him to come inside.
Nikolai moved the curtain aside and entered the room.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">А rather large room was partitioned into small cabins by red translucent veils.
There were a couch and a small table inside every cabin. Although the room was
poorly illuminated, Nikolai could see that some of the couches were occupied
by people. Thin smoke curled up at the ceiling, the air was filled with
intoxicating and sweet aroma. A lit lamp was standing on the table in one of
the cabins. Nikolai moved there and sat on the couch.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Less than 5 minutes later, a man entered the neighbouring cabin. Nikolai couldn't
see his face, but there was enough light from the lamp for the man to see Nikolai's
face. He sat down on the couch and asked in a hoarse voice:<br>
&ldquo;Have you brought the money?&rdquo;<br>
Nikolai opened his pocket and pulled a small piece of plastic out of it. He put
the card on the floor under the veil. The man took the card and passed it over
the reader device. The device displayed a number which, apparently, satisfied
the man. He hid the card in one pocket and took something from the other. He put
the thing on the floor and moved it to Nikolai with his foot.<br>
&ldquo;Do not forget two rules,&rdquo; said the man. &ldquo;First, the Moon
has the death penalty for possession of such a device. Second, there are things
worse than death penalty for those, who can't keep their mouths shut.&rdquo;<br>
Without waiting for a reply, the man stood up and left the room.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikolai picked up the device from the floor. It was a polished blue cube with
two neuroports on opposite sides. Nikolai was amazed how simple this notorious
device looked. The official name of the device was &ldquo;Associations Control
Module (ACM)&rdquo;, also known as &ldquo;Brainwasher&rdquo;. Using it, one
could force the creditor to forgive debt, or force arrogant supermodel to fall
in love with a hobo. But Nikolai wasn't planning to use it on other people.
All that he wanted was to know himself. He wanted to remember more than the last
three years of his life.</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikolai came back home in the middle of the night. He decided not to waste any
time and plugged himself to the cube. Using his personal terminal, he started
to explore his own brain. Memories of the last three years were easy to locate.
But when he tried to go deeper, he was puzzled. The memory was not wiped out,
but it surely didn't look like a memory of a human being. Meaningless chains
of associations running for absurd lengths, branching and merging, but
inevitably ending in one of the five vivid images. Those images were a whale,
a penguin, a piano, a jackboot, and a train.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Nikolai unplugged himself and began to think. Someone (maybe himself) had
messed with his head. Chains of associations were thoroughly mixed on all
levels. But these five objects had to mean something. Quite possible, it
was a code and he had to find a key. Maybe, the key was something that
connected them together. Nikolai decided to write a program searching
for common associations of a set of objects.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <i>n</i> of objects <nobr>(2
&le; <i>n</i> &le; 1000)</nobr>. Each of the following <i>n</i> lines
contains a name of an object, a colon, a space, and a space-separated set
of associations for this object. All object names and associations
contains Latin lowercase letters only. The next line contains a number <i>m</i> of object sets <nobr>(1 &le; <i>m</i> &le; 1000)</nobr>.
You are to find common associations for each of these sets. Each of the
following <i>m</i> lines describing sets contains space-separated object names. Each
set contains two or more objects. Each line in the input is no longer than
250 characters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each object set, put all common associations for this set on a single
line, space-separated and sorted in lexicographic order. If the objects
in the set have no common association, output a line containing &ldquo;No
solution.&rdquo;</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
whale: big black water animal
penguin: black white ice beak
piano: keyboard black white wire
jackboot: leather heel black
train: rail wheel black
rose: red green thorn
3
whale penguin piano jackboot train
penguin piano
jackboot rose
</PRE></TD><TD><PRE CLASS="intable">black
black white
No solution.
</PRE></TD></TR></TABLE>
______________________________________________________
1701||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Workman Ivan lost his job. Not because of truancy or being late, and not because the
plant where he had been working was left without orders. The reason for
dismissal was the stale aspic he had presented to his boss for his birthday.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After one more day of fruitless job search he dropped in a supermarket near his
home. He had a little money left, so he visited the liquor department. Waiting
in the line to the cashier's desk, he recognized the man buying a bottle of
expensive brandy. That was his old acquaintance Vassily. After loud greetings
and an argument about the best variety of brandy, they went out into the street at last.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&ldquo;Well, how are you, my friend?&rdquo; Vassily asked.
<br>
&ldquo;Looking for a job,&rdquo; Ivan answered wearily.
<br>
&ldquo;You know, I was also looking for a job not so long ago, and I found an
excellent one!&rdquo; Vassily was excited. &ldquo;It's nearby and they
promised to pay well! And you can join us too!&rdquo;
<br>
&ldquo;What's that job like?&rdquo; no wonder, jobless Ivan became interested.
<br>
&ldquo;Have you heard about the company <i>Ostap and Partners</i>? They've
been producing horns and hoofs for a number of years already. And now I'm a
hoof picker of the third class with them!&rdquo; answered Vassily proudly.
<br>
&ldquo;How much do they pay you?&rdquo; Ivan wanted to know.
<br>
&ldquo;They don't pay me yet,&rdquo; answered his friend with disappointment.
&ldquo;It's the first month I work there and I'm a probationer. And the guys in the brigade
don't tell me their wages, it's the company's policy.&rdquo; He paused and lowered his voice to a whisper.
&ldquo;But I know that our foreman drives a Mercedes!&rdquo;
<br>
&ldquo;Ah, I would like to know how much money they get,&rdquo; Ivan said dreamily
imagining himself driving a Merc.
<br>
&ldquo;I can learn it after all!&rdquo; Vassily had a sudden inspiration. 
&ldquo;The guys like to brag at smoking breaks that their wages are greater than
someone else's. For example, Stepan said recently that he was getting 1200
rubles more than Fyodor. And Fyodor once complained that he was getting
5500 rubles less than the foreman.&rdquo;
<br>
&ldquo;Collect then as many such comparisons as you can, and we will know all
the wages!&rdquo; Ivan rejoiced.
<br>
&ldquo;OK, I'll do that!&rdquo;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a week, Vassily brought a notebook with a number of records about the
comparisons of the workmen's wages. So they started calculations&hellip;
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of the workmen in the brigade and
the number <i>m</i> of records in the notebook (1 &le; <i>n</i>, <i>m</i> &le; 50000).
Each of the following <i>m</i> lines contains three integers: <i>i</i>, <i>j</i>, and <i>d</i>,
which mean that the wage of the <i>i</i>-th workman is greater than the wage of the
<i>j</i>-th workman by <i>d</i> rubles
(0 &le; <i>i</i>, <i>j</i> &le; <i>n</i>&minus;1; |<i>d</i>| &le; 20000).
The workmen are enumerated from 0 to <i>n</i>&minus;1 starting from Vassily,
whose wage is zero. It is known that no workman gets more than 10<sup>9</sup> rubles.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to find amounts of wages that lie in the given range and
satisfy all the comparisons from the notebook, output
&ldquo;Possible&rdquo; in the first line and then output <i>n</i> integers 
each in the separate line which are 
the possible amounts in the ascending order of the workmen's numbers.
If several answers are possible, output any one of them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no answer, output the only line with the words
&ldquo;Impossible after <i>i</i> statements&rdquo;, where the number <i>i</i>
is the number of the first record in the notebook such that considering only the
preceding records it is possible to find an answer and with the addition of
this record it becomes impossible. The records are enumerated starting from the
number one in the order in which they are given.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 6
3 4 1200
4 1 -5500
2 3 4300
3 0 8200
0 4 -7000
2 1 0
</PRE></TD><TD><PRE CLASS="intable">Possible
0
12500
12500
8200
7000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 5
1 2 5
0 2 0
1 0 -5
1 2 5
2 2 0
</PRE></TD><TD><PRE CLASS="intable">Impossible after 3 statements
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 2
1 0 871
1 2 903
</PRE></TD><TD><PRE CLASS="intable">Impossible after 2 statements
</PRE></TD></TR></TABLE>
______________________________________________________
1702||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The crossroad of the Lenina Prospect and the 8th of March Street is in the
very center of Yekaterinburg. There is no surprise that traffic jams are quite
common there. In this problem you will help the city to relieve the situation.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The cars approaching the crossroad from one of the four sides divide into
three flows: those turning left, turning right, and going straight. Each of the
12 flows is regulated by a separate traffic light. The traffic lights work in
coordination and can change their states once a minute. Their signals should
not contradict each other. This means that the flows of cars passing the
crossroad according to the traffic light signals should not intersect each
other.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, if the straight motion is allowed in the north direction, then the
straight motion from the west side of the crossroad must be forbidden because
it would not be safe. However, the right turn from the west side can be
allowed. Two flows of cars passing the crossroad are considered intersecting
if they have the same final direction or if their trajectories intersect.
In the picture the flows shown by solid lines (numbered 1, 2, 3, and 10)
do not intersect, and each of the remaining flows intersects at least one of
those shown by solid lines.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that 12 integers <i>n</i><sub><i>i</i></sub> are known that are the
numbers of the cars wishing to pass the crossroad in each of the directions
(which are enumerated from 1 to 12 as shown in the picture). The 12 speeds <i>v</i><sub><i>i</i></sub>
of passing the crossroad are also known; they are the numbers of cars
that can pass the crossroad in one minute if the passage is allowed. Assume
that new cars don't arrive. Your task is to unload the crossroad in ten
minutes by controlling the traffic lights. The aim is to minimize the maximal
number of cars remaining in one of the 12 flows.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains 12 integers <i>n</i><sub><i>i</i></sub>, 0 &le; <i>n</i><sub><i>i</i></sub> &le; 1000.
The second line contains 12 integers <i>v</i><sub><i>i</i></sub>, 1 &le; <i>v</i><sub><i>i</i></sub> &le; 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of cars remaining in the largest flow in ten minutes
if the traffic lights are controlled optimally.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 0 0 14 13 0 20 0 0 0 60 7
1 1 1 1 3 1 2 1 1 1 5 1
</PRE></TD><TD><PRE CLASS="intable">10
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The largest number of cars are going from the west to the east
(flow 11), and they should be allowed to move during all 10 minutes. In the
first 4 minutes, the cars arriving from the east can be allowed to move (flows 4 and 5)
because none of them turns the south. In the remaining six minutes, the flow from
the north to the west should be let through (7).
</DIV></DIV>
______________________________________________________
1703||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A robotic arm, like a human arm, consists of an upper arm and forearm.
The upper arm is attached to the shoulder joint and can rotate at the joint
in any direction. The forearm is attached to the upper arm at the elbow joint.
The forearm can turn with respect to the upper arm about the axis that passes
through the elbow joint and is perpendicular to both upper arm and forearm.
The angle at which the arm is bent at the elbow can't be acute. At the end of
the forearm there is a claw consisting of two equal parts. The claw can open
and close. When the claw is completely closed, it can hold a cylinder of a unit diameter.
In this position the axis of the cylinder is parallel to the axis of the elbow
joint.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a cylindrical rail of a unit diameter and infinite length near the robot.
The robot wants to grip the rail. The claw is now open and in the end it
must be completely closed around the rail. Determine the final position of the
robot's arm.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the length of the upper
arm <i>a</i> and the length of the forearm <i>b</i>. In the second and the third lines
there are the coordinates of two different points on the axis of the rail. The origin of the coordinate system is the shoulder joint. The rail does not pass through the shoulder. All the numbers are integer and their absolute values do not exceed 100; <i>a</i>, <i>b</i> &ge; 4. The thickness of the upper arm and forearm is negligible.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no position of the robotic arm in which the claw can be closed on
the rail, output &ldquo;No solution.&rdquo; Otherwise, output the coordinates
of the elbow joint and the angle at which the arm is bent in radians with the
maximal possible accuracy. The value of the angle must be in the range [&pi;/2, &pi;].
If there are several variants of the solution, output any one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">8 6
-10 10 0
10 10 0
</PRE></TD><TD><PRE CLASS="intable">0 6.4 4.8 1.5707963267948966
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 10
-10 10 0
10 10 0
</PRE></TD><TD><PRE CLASS="intable">No solution.
</PRE></TD></TR></TABLE>
______________________________________________________
1704||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You woke up in the morning, turned on your computer and started reading your
mail. Instead of usual two or three letters there were several dozen new messages.
It was a bad omen. Most probably, something unpleasant had happened. Indeed,
having read a couple of letters, you found out that the nomads had robbed another
caravan going to a neighboring town. The caravan had been following a completely new route,
but nevertheless the nomads had managed to track it down and had laid an ambush.
Either they had a lot more people that it had been assumed or someone from the town
was supplying them with information.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your meditated on it. It was not that easy to pass information outside the
town. Radiation shields protected the town form the surrounding desert and
didn't transmit radio waves. Automatic surveillance systems had not
fixed anyone or anything attempting to approach the town walls. And of course
nobody had visited the desert alone. Only one variant remained, the fiber-optic
cable used for communication with other towns. You were responsible for all
communication systems in the town, and you decided to carry out your own
investigation.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You spent a whole day designing filters that would analyze traffic and reveal
suspicious activity. In a week, the filters responded and intercepted a strange
data flow. The content of the message was incomprehensible, but it was not very
hard to track down the source. You informed the authorities and started waiting.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The seizure operation ended up in a failure. The betrayer noticed the
approaching troops, barricaded in his house and started firing. Eventually,
the house was taken by assault in which the betrayer suffered a mortal wound.
When his computer was found, the hard disk had been half formatted already.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You spent a lot of time analyzing the vestiges of the information and found
several interesting fragments. One of them contained the following code.
</DIV></DIV><DIV CLASS="problem_par_pre"><PRE CLASS="intable">procedure Encode(string text, int t)
begin
   int len = GetLength(text);
   int n = 8*t*len;
   Write(n)
   Write(t)
   for i = 1 to len
      for j = 0 to 7
         for k = 0 to t-1
         begin
            double sample = ZERO_LEVEL
            if (GetBit(text[i], j) == 1)
               sample += sin(2*k*PI/t)*AMP
            else
               sample += sin(4*k*PI/t)*AMP
            sample += Noise()
            Write(sample)
         end
end
</PRE></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You decided to decode the intercepted message to learn the information the
betrayer had wanted to pass. Unfortunately, you couldn't find the values
of the constants ZERO_LEVEL and AMP as well as the description of the function
Noise(). But even without that it would be easy to write a decoder.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the integers <i>n</i> and
<i>t</i>, <nobr>0 &lt; <i>n</i> &le; 10000</nobr>, <nobr>5 &le; <i>t</i> &le;
1000</nobr>, <i>n</i> is a multiple of 8&middot;<i>t</i>. Then in one or
several lines there are <i>n</i> real numbers in the range from 0 to 1. The
number are given with at most five fractional digits.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a line containing the decoded text. It is known that the text consists
of English letters, punctuation signs, and spaces. It is guaranteed that the
text is decoded uniquely.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">40 5
0.3 0.8 0.6 0.4 0.2
0.5 0.6 0.3 0.9 0.4
0.4 0.8 0.3 0.8 0.2
0.3 0.6 0.1 0.7 0.2
0.7 0.7 0.1 0.7 0.1
0.5 0.8 0.7 0.3 0.2
0.4 0.8 0.2 0.8 0.2
0.5 0.8 0.3 0.8 0.2
</PRE></TD><TD><PRE CLASS="intable">!
</PRE></TD></TR></TABLE>
______________________________________________________
1705||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right"></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A gang of <i>k</i> hares robbed a vegetable storehouse and stole <i>n</i> heads of cabbage.
At that time, a fox was running by and offered to divide the cabbage among the
gangsters. The hares agreed, but their condition was that they would get equal
numbers of heads and the fox could take the remainder of less than <i>k</i>
heads as a payment for his service.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Meanwhile, as the fox was dividing the cabbage, one more hare joined the gang,
who didn't take part in the robbery. He got the same share as other gangsters
but remained unnoticed. How could that happen? The reason was that each hare
got the same number of heads as if the newcomer hare had not been present.
Find the minimal number of hares in the gang for which that could happen.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given several test cases. The first line contains the number of cases <i>t</i>,
1 &le; <i>t</i> &le; 30000. In each of the next <i>t</i> lines you are given
the integer <i>n</i> for the corresponding case,
1 &le; <i>n</i> &le; 10<sup>18</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case, output in a separate line the minimal possible number of hares
in the gang&nbsp;<i>k</i>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
9
11
18
</PRE></TD><TD><PRE CLASS="intable">5
4
5
</PRE></TD></TR></TABLE>
______________________________________________________
1706||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">M&uuml;ller had been suspecting for a long time that Stierlitz had been sending
cipher messages to the USSR from time to time. And now M&uuml;ller almost
got the proof of that. Rummaging through Stierlitz's papers, he found a strange
sequence of digits written on a clean sheet of paper. He guessed that it was a cipher
message and called Stierlitz for questioning. But Stierlitz calmly answered
that the digits were the number of a lottery-ticket that he had written in
order not to forget it. Stierlitz had never been so close to a failure: there
were the coordinates of Hitler's bunker on the sheet.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For transmitting the data to the center, Stierlitz used the following
algorithm:
<UL>
<LI>The input is a string <i>s</i> =
<i>s</i><sub>1</sub><i>s</i><sub>2</sub>&hellip;<i>s</i><sub><i>n</i></sub>.
<LI>A key <i>k</i> is chosen; it is a positive integer smaller than <i>n</i>.
<LI>For every symbol <i>s</i><sub><i>i</i></sub> of the string, the following procedure is applied:
<OL>
<LI>The string <i>q</i><sub><i>i</i></sub> is considered consisting of
<i>k</i> consecutive symbols of the string <i>s</i> starting from the <i>i</i>th:
<i>q</i><sub><i>i</i></sub> = <i>s</i><sub><i>i</i></sub><i>s</i><sub><i>i</i>&nbsp;+&nbsp;1</sub>&hellip;<i>s</i><sub><i>i</i>&nbsp;+&nbsp;<i>k</i>&nbsp;&minus;&nbsp;1</sub>.
If there are less than <i>k</i> symbols till the end of the string, then the remaining symbols
are taken from the beginning of the string:
<i>q</i><sub><i>i</i></sub> = <i>s</i><sub><i>i</i></sub>&hellip;<i>s</i><sub><i>n</i></sub><i>s</i><sub>1</sub>&hellip;<i>s</i><sub><i>i</i>&nbsp;+&nbsp;<i>k</i>&nbsp;&minus;&nbsp;1&nbsp;&minus;&nbsp;<i>n</i></sub>.
<LI>For the string <i>q</i><sub><i>i</i></sub>, the number of its different nonempty substrings
<i>m</i><sub><i>i</i></sub> is calculated.
</OL>
<LI>The sequence <i>m</i><sub>1</sub>, <i>m</i><sub>2</sub>, &hellip;,
<i>m</i><sub><i>n</i></sub> is the output of the algorithm.
</UL>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is not easy to cipher with this algorithm, and how to decode the messages
only the Soviet intelligence service knows. You are given a chance to feel
yourself the famous Stierlitz for several minutes.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the key <i>k</i>, 1 &le; <i>k</i> &le; 1000.
The second line contains the string <i>s</i> you are supposed to cipher.
The string consists of lowercase English letters, and its length is strictly
greater than <i>k</i> and does not exceed&nbsp;4000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the numbers <i>m</i><sub>1</sub>, <i>m</i><sub>2</sub>, &hellip;,
<i>m</i><sub><i>n</i></sub> separated with spaces.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
abaccc
</PRE></TD><TD><PRE CLASS="intable">5 6 5 3 5 6
</PRE></TD></TR></TABLE>
______________________________________________________
1707||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Everybody loves Hypnotoad! Its show is one of the most popular on TV!
It is true that after the show nobody remembers what it was about and even what
they have been doing during all that time. However, this does not prevent
the numerous fans of Hypnotoad from enjoying their favorite show.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to study the amazing properties of Hypnotoad, Professor Farnsworth
constructed a special device, which trapped and scanned its waves. He found out
that at each time moment Hypnotoad's eyes could be in one of <i>n</i> states.
Professor denoted those states by the numbers 0, 1, &hellip;, <i>n</i>&minus;1
for simplicity. The states of the eyes changed according to one of several
linear laws. There were <i>m</i> such laws and each of them could be specified by
five integers:
<i>s</i><sub>0</sub>, <i>t</i><sub>0</sub>, &Delta;<i>s</i>, &Delta;<i>t</i>, <i>k</i>.
When Hypnotoad &ldquo;worked&rdquo; according to such a law, its left eye switched to
the state&nbsp;<i>s</i><sub><i>i</i></sub> and its right eye switched to
the state&nbsp;<i>t</i><sub><i>i</i></sub> successively
for all integers&nbsp;<i>i</i> from 0 to <i>k</i>&minus;1, where</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>s</i><sub><i>i</i></sub> = (<i>s</i><sub>0</sub> + <i>i</i> &Delta;<i>s</i>) mod <i>n</i>,<br>
<i>t</i><sub><i>i</i></sub> = (<i>t</i><sub>0</sub> + <i>i</i> &Delta;<i>t</i>) mod <i>n</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After several weeks of research, Farnsworth understood that Hypnotoad's waves
could be used to learn many secrets of the Universe. For example, Hypnotoad could
see the dark matter and extract information from black holes. In order to see
the same way Hypnotoad saw, Professor constructed another device that emulated
&ldquo;hypnosight&rdquo;: each of its four oculars could stay in one of the <i>n</i>
states changing according to linear laws. Farnsworth carried out a series of
experiments and decided to draw a diagram in which he would mark for every possible state
of the device whether Hypnotoad's eyes could be in states similar to the states of
the oculars. Help Professor automate this process.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One experiment is described by nine integers:
<i>a</i><sub>0</sub>, <i>b</i><sub>0</sub>, <i>c</i><sub>0</sub>, <i>d</i><sub>0</sub>,
&Delta;<i>a</i>, &Delta;<i>b</i>, &Delta;<i>c</i>, &Delta;<i>d</i>, <i>q</i>.
For all integer values of <i>j</i> from 0 to <i>q</i>&minus;1, the oculars successively switch to
the following states:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>a</i><sub><i>j</i></sub> = (<i>a</i><sub>0</sub> + <i>j</i> &Delta;<i>a</i>) mod <i>n</i>,<br>
<i>b</i><sub><i>j</i></sub> = (<i>b</i><sub>0</sub> + <i>j</i> &Delta;<i>b</i>) mod <i>n</i>,<br>
<i>c</i><sub><i>j</i></sub> = (<i>c</i><sub>0</sub> + <i>j</i> &Delta;<i>c</i>) mod <i>n</i>,<br>
<i>d</i><sub><i>j</i></sub> = (<i>d</i><sub>0</sub> + <i>j</i> &Delta;<i>d</i>) mod <i>n</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For every state of the device (<i>a</i><sub><i>j</i></sub>, <i>b</i><sub><i>j</i></sub>,
<i>c</i><sub><i>j</i></sub>, <i>d</i><sub><i>j</i></sub>), it is required to determine
whether Hypnotoad's eyes can be in a state
(<i>s</i><sub><i>i</i></sub>, <i>t</i><sub><i>i</i></sub>) such that
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">min(<i>a</i><sub><i>j</i></sub>, <i>b</i><sub><i>j</i></sub>) &le;
<i>s</i><sub><i>i</i></sub> &le;
max(<i>a</i><sub><i>j</i></sub>, <i>b</i><sub><i>j</i></sub>),<br>
min(<i>c</i><sub><i>j</i></sub>, <i>d</i><sub><i>j</i></sub>) &le;
<i>t</i><sub><i>i</i></sub> &le;
max(<i>c</i><sub><i>j</i></sub>, <i>d</i><sub><i>j</i></sub>).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the number <i>n</i> of states of Hypnotoad's eyes
and the number <i>m</i> of laws of their behavior
(1 &le; <i>n</i> &le; 5000, 1 &le; <i>m</i> &le; 1000).
Each of the following <i>m</i> lines contains the integers
<i>s</i><sub>0</sub>, <i>t</i><sub>0</sub>, &Delta;<i>s</i>, &Delta;<i>t</i>, <i>k</i>,
which specify the law according to which the states of the eyes are switched
(0 &le; <i>s</i><sub>0</sub>, <i>t</i><sub>0</sub>, |&Delta;<i>s</i>|,
|&Delta;<i>t</i>| &le; <i>n</i>&minus;1; 1 &le; <i>k</i> &le; 567).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the next line you are given the number <i>p</i> of experiments
(1 &le; <i>p</i> &le; 345). Each of the following <i>p</i> lines contains the integers
a<sub>0</sub>, <i>b</i><sub>0</sub>, <i>c</i><sub>0</sub>, <i>d</i><sub>0</sub>,
&Delta;<i>a</i>, &Delta;<i>b</i>, &Delta;<i>c</i>, &Delta;<i>d</i>, <i>q</i>,
which describe the experiment
(0 &le; <i>a</i><sub>0</sub>, <i>b</i><sub>0</sub>, <i>c</i><sub>0</sub>,
<i>d</i><sub>0</sub>, |&Delta;<i>a</i>|, |&Delta;<i>b</i>|, |&Delta;<i>c</i>|,
|&Delta;<i>d</i>| &le; <i>n</i>&minus;1; 1 &le; <i>q</i> &le; 345).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>p</i> lines, one line per experiment. For each experiment, determine
its result: the set of numbers <i>x</i><sub><i>j</i></sub> for <i>j</i> = 0, 1, &hellip;, <i>q</i>&minus;1.
In this set, <i>x</i><sub><i>j</i></sub> = 1 if Hypnotoad's eyes can be in a state complying
with the corresponding state of the device and <i>x</i><sub><i>j</i></sub> = 0 otherwise.
If <i>q</i> &le; 20, output all <i>x</i><sub><i>j</i></sub> in a row without spaces.
If <i>q</i> &gt; 20, output one number equal to
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
0 1 0 0 1
1 2 0 0 1
2 0 0 0 1
5
0 0 1 1 0 0 0 0 5
1 1 0 0 0 0 0 0 3
0 1 0 0 0 0 0 0 345
1 2 1 1 0 0 0 1 4
1 2 1 1 0 0 0 1 3 </PRE></TD><TD><PRE CLASS="intable">11111
000
0
0110
011
</PRE></TD></TR></TABLE>
______________________________________________________
1708||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that Petka is fond of arithmetic. Many times he thought of
a positive integer and gave Chapaev the sum of its digits and the sum of
its squared digits, and Chapaev could always find the smallest number with
these properties very quickly. But Chapaev's answer never was the number
Petka had in mind. What could be done about that? What number should
Petka think of so that Chapaev would find just it?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petka asked Furmanov to teach him how to determine whether a number was the smallest
one with the given sums of digits and squared digits. Furmanov was interested in
the problem. After some thought, he understood that the sums didn't depend on
the order of digits. Therefore, the digits in a &ldquo;smallest&rdquo; number
were always in ascending order, and there could be no zeros in such numbers.
Taking the problem seriously, he found out the following property: if some
digits were deleted from a &ldquo;smallest&rdquo; number, one that was left was
also a &ldquo;smallest&rdquo; number.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Then Furmanov understood that he could write several patterns that would
specify all the numbers Petka was interested in. It was sufficient to use
such patterns in which there would be asterisks in addition to digits, each
asterisk meaning that the preceding digit could appear in this place
an arbitrary number of times (including the case when it would be absent).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Furmanov took yesterday's copy of the <i>Pravda</i> and wrote a list of patterns on
the margins. His list was such that for any &ldquo;smallest&rdquo; number there
was a pattern matching it and any number matching any pattern was &ldquo;smallest&rdquo;.
Moreover, the list was the shortest possible. Can you repeat
Furmanov's heroic deed?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the base of the number system for which it is required to make
the list (the base is in the range from 2 to 36).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the list of patterns sorted in the usual ascending order.
Each pattern may contain only digits of the given number system
(1, 2, &hellip;, 9, A, B, &hellip;) and an asterisk.
The patterns should not
contain unnecessary elements: instead of the pattern &ldquo;12*2*3&rdquo;
you should output &ldquo;12*3&rdquo;.
It is allowed that the empty string matches several patterns.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">1*2*
112*3*
12*3*
2*3*
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The numbers 222 and 1113 have the same sum of digits and the sum of squared
digits. That is why any number containing three ones and one three can be
&ldquo;lessened&rdquo; with the sums of digits and of squared digits preserved.
</DIV></DIV>
______________________________________________________
1709||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Penguin-Avia airline, along with other Antarctic airlines, experiences
financial difficulties because of the world's economic crisis. People of
Antarctica economize on flights and use trains or prefer to stay at home.
The airline's management hopes that the number of their clients will increase
in the summer due to the tourists visiting the coastal resorts. In order to
hold out till the summer, it was decided to optimize the flight scheme by
cancelling some flights and introducing some new flights.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Director of Penguin-Avia assumes that after the optimization the flight scheme
must have the following properties:
<ol>
<li>Using one or more Penguin-Avia flights, one can get from any Antarctic airport to any
other.
<li>The scheme must contain the minimal number of flights among all the schemes
satisfying the first property.
</ol>
However, not everything is that easy in Antarctica. For cancelling a flight,
the airline must pay a one-time forfeit of <i>d</i> Antarctic dollars. To
obtain slots for a new flight, the company must spend <i>a</i> Antarctic
dollars to grease the palm of the godfather of the Antarctic mafia nicknamed Walrus.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Director of Penguin-Avia transform the existing flight scheme spending as
little money as possible. For doing that, you will be presented with a travel card
for all flights of the airline.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given the number <i>n</i> of airports in Antarctica, 2 &le; <i>n</i> &le; 100.
In the second line you are given the integers <i>d</i> and <i>a</i>, 1 &le; <i>d</i>, <i>a</i> &le; 10<sup>6</sup>.
The following <i>n</i> lines describe the existing scheme of Penguin-Avia
flights in the form of an <i>n</i> &times; <i>n</i> matrix. There is &ldquo;1&rdquo; in a cell (<i>i</i>,
<i>j</i>) of the matrix if the airline has flights between the airports <i>i</i> and <i>j</i>.
Otherwise, there is &ldquo;0&rdquo; in the cell. It is guaranteed that the matrix is symmetric
and there are only zeros on its diagonal.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal amount of money necessary for the
optimization of the existing flight scheme. In the next <i>n</i> lines give the
plan of changing the scheme in the form of an <i>n</i> &times; <i>n</i> matrix.
A cell (<i>i</i>, <i>j</i>) of this matrix contains the symbol
&ldquo;d&rdquo; if the flights between the airports <i>i</i> and <i>j</i>
should be cancelled. In the case when a new flight should be introduced between
these airports, the cell contains the symbol &ldquo;a&rdquo;. The remaining
cells contain the symbol &ldquo;0&rdquo;. The matrix must be symmetric.
If there are several optimal schemes, output any one of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
2 3
011000
101000
110000
000011
000101
000110
</PRE></TD><TD><PRE CLASS="intable">7
0d0000
d00000
000a00
00a0d0
000d00
000000
</PRE></TD></TR></TABLE>
______________________________________________________
1710||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Recently Boris has invented a new triangle congruence criteria.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Theorem.</b>
Triangles A<sub>1</sub>B<sub>1</sub>C<sub>1</sub> and A<sub>2</sub>B<sub>2</sub>C<sub>2</sub> are congruent
if two sides and the angle opposite to one of them in one triangle are equal to
the corresponding sides and angle of another triangle:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ul>
<li>A<sub>1</sub>B<sub>1</sub> = A<sub>2</sub>B<sub>2</sub>,
<li>B<sub>1</sub>C<sub>1</sub> = B<sub>2</sub>C<sub>2</sub>,
<li>&ang; B<sub>1</sub>A<sub>1</sub>C<sub>1</sub> = &ang; B<sub>2</sub>A<sub>2</sub>C<sub>2</sub>.
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Show Boris that he is wrong. Given a triangle A<sub>1</sub>B<sub>1</sub>C<sub>1</sub>,
construct a triangle A<sub>2</sub>B<sub>2</sub>C<sub>2</sub> that is congruent
to the given triangle according to Boris's theorem, but in fact the triangles
are incongruent.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the coordinates of the points A<sub>1</sub>, B<sub>1</sub>, and C<sub>1</sub> in three lines.
All the numbers are integers and their modules do not exceed 100.
The triangle A<sub>1</sub>B<sub>1</sub>C<sub>1</sub> is nondegenerate.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;YES&rdquo; in the first line if the theorem works for this
triangle. Otherwise, if there exists a triangle
A<sub>2</sub>B<sub>2</sub>C<sub>2</sub> congruent to the given one according
to the theorem but actually incongruent, output &ldquo;NO&rdquo; in the first line
and in the following three lines give the coordinates of A<sub>2</sub>, B<sub>2</sub>,
and C<sub>2</sub> with the maximal possible accuracy. The absolute values of the
coordinates should not exceed 1000 and the triangle should be nondegenerate.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 0
-1 4
4 0
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">0 0
4 3
6 0
</PRE></TD><TD><PRE CLASS="intable">NO
0.0000000000 0.0000000000
-3.0000000000 4.0000000000
0.0000000000 2.0000000000
</PRE></TD></TR></TABLE>
______________________________________________________
1711||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Imagine that you have to prepare a problem set for the forthcoming programming
contest and you have already chosen the problems you will use in it.
Before you start writing problem statements, preparing tests, and writing
author solutions, you must give <i>code names</i> to all the problems.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A code name is a string that uniquely identifies the problem. For example,
instead of saying &ldquo;problem about the cipher grille&rdquo;, you can simply say
&ldquo;problem grille.&rdquo;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The problems in a problem set are arranged according to the lexicographical order of their code names. However, the program committee wants to get a fixed order of the problems. For example, the easiest problem should be put on the first place so that all
the teams will be able to find it, or the letter&nbsp;D can be assigned to a really Difficult problem. Therefore, to obtain some predefined order of the problems in the problem set, the program committee needs to carefully choose the code names. This is just what you have to do.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To make your task easier, the program committee proposed three variants of the code name for each of the&nbsp;<i>n</i> problems in the problem set. You only have to choose an appropriate variant for each problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of problems in the problem set
(1 &le; <i>n</i> &le; 16). The <i>i</i>-th of the following <i>n</i> lines contains
three possible code names for the <i>i</i>-th problem. The variants are separated
with a space. The last line contains a permutation of the numbers
from 1 to <i>n</i>. This is the order in which the problems must be arranged in the
problem set. Each code name consists of lowercase Latin letters and its
length is at most 20. All the code names are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> lines. The <i>i</i>-th line should contain the code name of the
problem that will have number <i>i</i> in the problem set. If there are several
possible answers, output any of them. If it is impossible to choose the code
names as required, output &ldquo;IMPOSSIBLE&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11
cipher grille kamkohob
names codenames codes
newtests rejudge timus
size volume summit
watchmen braineater twosides
solution random yesorno
keywords subversion commands
bosses shooting shaitan
game strategy playgame
mnemonic palindromes bestname
eligibility rectangle rules
2 1 7 10 9 6 11 3 8 4 5</PRE></TD><TD><PRE CLASS="intable">codenames
grille
keywords
mnemonic
playgame
random
rectangle
rejudge
shaitan
volume
watchmen</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
problems in the
first sample are
ordered not randomly
1 2 3</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE
</PRE></TD></TR></TABLE>
______________________________________________________
1712||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Our program committee uses different tools for problem development: a mailing list, a version control system, an administration system of the <i>Timus Online Judge</i> website, and many others. Chairman of the program committee must constantly keep the passwords for these systems in his head. Of course, the passwords must be kept secret from the contestants, otherwise the problems may become known to them before the contest
starts.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Not trusting his memory, the chairman wants to write down one of the passwords in a ciphered form. To do this, he plans to use a cipher grille he read about in one entertaining book.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cipher grille is a 4 &times; 4 paper square in which four windows are cut out. Putting the grille on a paper sheet of the same size, the chairman writes down the first four symbols of his password in the windows (see fig. below). After that the chairman turns the grille clockwise by 90 degrees. The symbols written earlier become hidden under the grille and clean paper appears in the windows. He writes down the next four symbols of the password in the windows and again turns the grille by 90 degrees. Then he writes down the following four symbols and turns the grille once more. After that he writes down the last four symbols of the password. Now, without the same cipher grille, it is very difficult to restore the password from the resulting square with 16 symbols. Thus, the chairman is sure that no contestant will get access to the problems too early.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that you obtained the grille used by the chairman and the resulting square with 16 symbols. Your task is to recover the chairman's password.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first four lines contain the chairman's cipher grille. The window in it is denoted by the symbol &ldquo;X&rdquo; and the paper is denoted by &ldquo;.&rdquo;. The position
of this grille corresponds to the position from which the chairman starts writing down his password. It is guaranteed that the grille is correct, which means that in the process of ciphering only empty cells appear in the windows. It is also known that the grille is connected, i.e. it is a single piece of paper.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next four lines contain the square with the ciphered password. All the symbols in the square are lowercase or uppercase Latin letters.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the password of the chairman of the program committee as a string consisting of 16 symbols.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">....
X..X
.X..
...X
Pwoo
Khaa
smrs
odbk
</PRE></TD><TD><PRE CLASS="intable">KamkohobPassword</PRE></TD></TR></TABLE>
______________________________________________________
1713||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Although the program committee works as one team, heated debates arise frequently enough. For example, there is no agreement upon which client of the version control system is more convenient to use: a graphic interface program or a console client.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider some command of a console client. A substring of this command that is not a substring of any other command of this client can be called a <i>key</i> substring because it uniquely identifies the command. In the latest versions of the client, it is not necessary to type the whole command; it is sufficient to type any of its key substrings.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A supporter of the console client wants to convince the program committee to use it. In order to show how fast and convenient the work with this client is, he wants to find a key substring of minimal length for each command. Help him do it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of commands in the console client
(2 &le; <i>n</i> &le; 1000). Each of the following <i>n</i> lines contains one command of the client. Each command is a nonempty string consisting of lowercase Latin letters and its length is at most 100. No command is a substring of another command.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> lines. The <i>i</i>-th line should contain any of the shortest
key substrings of the <i>i</i>-th command (the commands are numbered in the order
they are given in the input).</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
abcm
acm
bcd</PRE></TD><TD><PRE CLASS="intable">ab
ac
d</PRE></TD></TR></TABLE>
______________________________________________________
1714||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At last, Vasechkin had graduated from the university and it was the time to choose his
future. Vasechkin recalled all the inadequate outcomes, unsolvable problems, and
incomprehensible problem statements that he encountered at programming contests, so he decided to join a program committee. Soon he was asked to prepare a problem for the forthcoming student contest, which would be dedicated to binary alphabets. The problem had to fall under that topic. However, Vasechkin wanted the participants to remember his problem for a long time, so he decided to give the problem an unusual and complicated name.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasechkin decided that the name had to consist of the letters &ldquo;a&rdquo; and &ldquo;b&rdquo; only and contain exactly <i>n</i> letters. In addition, the name had to be as <i>complex</i> as possible. The <i>complexity</i> of a name is defined as the minimal number of palindromes into which it can be decomposed. Help Vasechkin to invent the most complex name for his problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 1000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the required name of length <i>n</i> consisting of the letters &ldquo;a&rdquo; and &ldquo;b&rdquo; only. If there are several such names, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6</PRE></TD><TD><PRE CLASS="intable">aababb</PRE></TD></TR></TABLE>
______________________________________________________
1715||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Contestants often wonder what jury members do during a contest. Someone thinks that they spend all the contest fixing bugs in tests. Others say that the jury members
watch the contest excitedly and even bet on who will win. However, in reality, the jury members prefer to play computer games, giving a complete control of the contest to heartless machines.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Another Ball Killer is one of the favorite games of the jury. Its rules are
very simple:

<ol>
<li>The game is played by one person on a rectangular field of size <i>n</i> &times; <i>m</i>. At the initial moment, each cell of the field contains a ball of one of
five colors: blue, green, red, white, or yellow.</li>
<li>At each move, the player chooses some <i>figure</i> (a connected group of two or more balls of the same color; balls are called connected if their cells have a common side) and removes it from the field. After that the balls that were above the removed balls fall down. If a column without the balls appears, then all the columns on its right are shifted to the left.
<br>
The image below shows how the field changes after the removal of the largest figure.
<br>
The player is awarded  <i>k</i> &times; (<i>k</i> &minus; 1) points for his move, where <i>k</i> is the size of the removed figure, i.e. the number of balls in it.</li>

<li>The game is finished when there are no figures left on the field. The goal is to get as many points as possible by the end of the game.</li>
</ol></DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lazy jury members play Another Ball Killer using the following algorithm:

<pre style="line-height: 1.4em;">
01  Choose the color of one of the balls in the field as the main color.
02  While there is at least one figure:
03      While there is at least one figure of a color different from the main color:
04          Remove the largest figure of a color different from the main color.
05      If there is a figure of the main color:
06          Remove the largest figure of the main color.
</pre>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are several ways to remove the figure in lines 04 and 06, one should choose the largest figure containing the bottommost ball (if there are several such figures, then one should choose among them the figure that contains the leftmost of such
balls).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Chairman is the laziest person in the jury. He doesn't even think about which color he should choose as the main one. By pressing one key, he launches a program that calculates for every color present in the field the number of points that will be awarded if this color is chosen as the main one. Your task is to write such a
program.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the dimensions of the field <i>n</i> and <i>m</i> (1 &le; <i>n</i>, <i>m</i> &le; 50). Each of the following <i>n</i> lines contains <i>m</i> letters denoting the color of the ball in the corresponding cell of the field (B for blue, G for green, R for red, W for white, and Y for yellow). The rows of the playing field are given in the order from the top row to the bottom row.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one line for each color present in the field: first output the letter denoting the color, then a colon, a space, and the number of points the chairman of the jury will get if he chooses this color as the main one. The colors must be considered in the following order: blue, green, red, white, yellow.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 6
WWWGBG
WBGGGB
GGGGBB</PRE></TD><TD><PRE CLASS="intable">B: 74
G: 92
W: 74</PRE></TD></TR></TABLE>
______________________________________________________
1716||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Valentine is a veteran of programming contests and he's been working in the program committee for many years. He is very busy this week: the bike is under repair, some problems with Indian colleagues have to be solved, and five student groups are to be examined in philosophical problems of mathematics at the university. To crown it all, the new chairman of the program committee asked Valentine to write an alternative solution for one of the problems of the forthcoming contest.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Valentine was so busy that he had no time to read the problem statement. He only glanced at the output format and understood that it was required to output either &ldquo;YES&rdquo;, or &ldquo;NO&rdquo;.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fortunately, Valentine was well acquainted with the testing system used in the
contest. The system successively runs a solution on all tests of a problem, and for each test the checking process goes as follows. The input is copied to the file input.txt. Then the solution is launched. It reads the input from the file input.txt and writes the result to the file output.txt. When it finishes, the correct answer is copied to the file answer.txt. If the contents of the files answer.txt and output.txt match, the test is assumed to be passed; otherwise, the test is not passed.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Valentine decided to write a program that would operate as follows. If the folder containing the program doesn't contain the file answer.txt (i.e. the program is run on the first test), then the program outputs &ldquo;YES&rdquo;. Otherwise, the program outputs the contents of the file answer.txt.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Valentine plans to tell the chairman of the program committee that there is a
nontrivial mistake in his program, and this mistake, fortunately, shows itself when the program is run on the excellent hard tests prepared by the author of the problem. However, first Valentine has to estimate the number of tests that his solution won't pass. Valentine doesn't have access to the tests, but he knows the number of tests and the total size of the files with answers. He also knows that the size of the file with the answer &ldquo;YES&rdquo; is 3 bytes, the size of the file with the answer &ldquo;NO&rdquo; is 2 bytes, and all the variants of the order of tests are equally probable. Help Valentine to calculate the average number of tests that his solution won't pass.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains two integers <i>n</i> and <i>s</i> (1 &le; n &le; 5000; 2<i>n</i> &le; <i>s</i> &le; 3<i>n</i>) which are the number of tests and the total size of the files with answers, respectively. The numbers are separated with a space.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the average number of tests that Valentine's solution won't pass, accurate to 10<sup>&minus;5</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 7</PRE></TD><TD><PRE CLASS="intable">2.0000000</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the three answers is &ldquo;YES&rdquo; and two answers are &ldquo;NO&rdquo;. If
the order of tests is &ldquo;YES-NO-NO&rdquo;, then Valentine's solution won't pass
the second test only; if the order is &ldquo;NO-YES-NO&rdquo;, then it will pass none of
the tests; if the order is &ldquo;NO-NO-YES&rdquo;, the solution won't pass the first and the third tests.</DIV></DIV>
______________________________________________________
1717||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program committee must be able to correctly estimate the level of teams that will participate in the forthcoming contest and choose the problems according to that level. It is not always easy to prepare a problem set that will please both school teams and the most experienced veterans of the programming contests, who won dozens of them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In order to make his job easier, the chairman of the program committee asked the chairman of the jury to make the eligibility rules stricter and forbid too young or too experienced teams to participate in the contest.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each team that had applied for participation, the jury calculated the average age of its members and the number of official contests this team participated in. In addition, the program committee estimated the satisfaction that each team would get from the problem set.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The jury decided to state the eligibility rules as follows: a team is eligible to participate if and only if its average age and the number of contests it participated in
fall in certain ranges of values. It only remained to set the boundaries of these ranges so that the sum of satisfactions of the eligible teams would be as large as possible. Of course, there had to be at least two eligible teams, otherwise there would have been no sense in holding the contest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of teams that want to participate in the contest (2 &le; <i>n</i> &le; 1500). Each of the following <i>n</i> lines contains three space-separated integers <i>a</i>, <i>f</i> and <i>s</i> (4&middot;10<sup>8</sup> &le; <i>a</i> &le; 10<sup>9</sup>; 0 &le; <i>f</i>, |<i>s</i>| &le; 10<sup>9</sup>). They are the average age of participants (in seconds), the number of official contests the team participated in, and the satisfaction that the team will get from the problem set, respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal and maximal admissible average age of participants. In the second line output the minimal and maximal admissible number of contests. All these numbers must be nonnegative integers and must not exceed 10<sup>9</sup>. If there are several possible answers, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
500000000 1 1
510000000 3 -10
600000000 3 2
700000000 4 3</PRE></TD><TD><PRE CLASS="intable">550000000 750000000
2 5</PRE></TD></TR></TABLE>
______________________________________________________
1718||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At three o’clock in the morning Sasha (aka <i>Sandro</i>) discovered that there were
only seven tests for one of the problems in the first volume of the <i>Timus Online Judge</i>. &ldquo;That won’t do,&rdquo; Sasha thought and added ten new tests for that problem. At four o’clock in the morning, Vova (aka <i>Vladimir Yakovlev</i>) discovered that the sixth test in the same problem was incorrect. &ldquo;That won’t do,&rdquo; Vova thought and deleted the sixth test.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next day Sasha and Vova came to work at two o’clock in the afternoon. After some discussion they decided to rejudge all the solutions for that problem that had been
submitted before the moment Sasha added new tests.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the rejudge each author receives an e-mail with the list of all her solutions for which the outcome has changed. If that list is empty the e-mail is not sent. Help Sasha and Vova determine the minimal possible and maximal possible number of authors who will receive an e-mail with the rejudge results.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of solutions <i>n</i> that Sasha and Vova want to
rejudge (1 &le; <i>n</i> &le; 1000). Each of the following <i>n</i> lines describes one solution and contains the name of its author and the previous outcome.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The name of the author is a nonempty string of length not exceeding 30. It may contain Latin letters, digits, the underscore character, parentheses and square brackets. It is guaranteed that no two different authors have names which differ only in case of the letters.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The possible outcomes are: AC, CE, ML X, TL X, and WA X, where X is an integer from 1 to 7. The outcome AC means that the solution passed all the tests. The outcome CE means that the solution failed to compile and, therefore, was not launched on any of the tests. The outcomes ML X, TL X, and WA X mean that the solution passed the tests with numbers less than X but failed to pass the test X because it exceeded the memory limit or the time limit or because it produced a wrong answer. The outcomes which differ only in test number are considered different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible and maximal possible number of authors who will receive e-mails with the rejudge results.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
[SPbSU_ITMO]_WiNGeR TL 6
Milanin_(TNU) WA 6
Vladimir_Yakovlev_(USU) AC
Sandro_(USU) WA 1
Sandro_(USU) ML 3</PRE></TD><TD><PRE CLASS="intable">0 3</PRE></TD></TR></TABLE>
______________________________________________________
1719||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the meeting where Maximilian and other members of the program committee were
discussing problems for the forthcoming subregional contest, it turned out that the problem set lacked a geometrical problem. The chairman of the program committee asked Maximilian to invent such a problem before September 1.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On the night from August 30 to August 31, Maximilian was sitting in front of his computer trying to pass the final level of the &ldquo;Kill the Shaitan-Boss&rdquo;
game. Maximilian was attacked by a horde of shaitan-bosses, but he was armed with a shaitan-tube and managed to shoot down almost all the bosses. Only four bosses were left. Maximilian froze them with a spell and was getting ready to kill them when he noticed that only three charges left in his shaitan-tube. &ldquo;It doesn’t matter,&rdquo; Maximilian thought. &ldquo;I will kill two shaitan-bosses by two shots and after that I will reach the straight line passing through the two remaining bosses and kill them both with one shot. The main thing is not to miss.&rdquo; We must note here that the shaitan-tube shoots from both its ends at once and kills all the shaitan-bosses on the shooting line.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Maximilian aimed at the first shaitan-boss and was ready to press the &ldquo;fire&rdquo;
button, when suddenly his mobile phone rang. Frightened Maximilian shot in the air, then cursed himself and the person who called him. After that he answered the call.
<br>
&ldquo;Hello, how are you doing? Have you invented a geometrical problem?&rdquo;
<br>
Of course, it was the chairman of the program committee.
<br>
&ldquo;Oh yes, it’s almost ready, there’s very little left to do. I’ll send you the
statement tomorrow night.&rdquo;
<br>
&ldquo;OK, remember that we have a lot to do, we’ll have no time to think later
on.&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">&ldquo;Ah,&rdquo; Maximilian thought switching off. &ldquo;Such a game lost! Almost all
shaitan-bosses have been killed&hellip;&rdquo; But there was still a chance to kill the remaining four bosses with two shots. For that he just needed to carefully calculate his movement and shooting directions. &ldquo;After I finish the game, I will start thinking about the problem,&rdquo; Maximilian decided. Of course, he didn't even start inventing the problem. &ldquo;I only need to shoot down these shaitan-bosses as soon as possible&hellip;&rdquo;</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Assume that Maximilian and the shaitan-bosses are points on a plane. Let us introduce a coordinate system and denote the point where Maximilian stands as its origin. Then the <i>i</i>-th shaitan-boss will have coordinates (<i>x<sub>i</sub></i>, <i>y<sub>i</sub></i>). No three shaitan-bosses stand in the same straight line. Maximilian can stand in the same point with the shaitan-boss and he will kill this boss if he shoots from this point.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input contains four lines, each containing two space-separated integers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> (|<i>x<sub>i</sub></i>|, |<i>y<sub>i</sub></i>| &le; 10000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal distance Maximilian must walk in order to kill all the shaitan-bosses, accurate to 10<sup>&minus;5</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-2 0
2 0
-2 4
2 4</PRE></TD><TD><PRE CLASS="intable">2.0000000000</PRE></TD></TR></TABLE>
______________________________________________________
1720||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program committee of Yekaterinozavodsk programming contests decided to create a new website. In honor of the recent summit of the Harbin Cooperation Organization, they decided to name this website <i>Summit Online Judge</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The website will contain a problem archive, which will be regularly extended with problems from contests held at this website. According to the current rules, the problem set of any contest must contain at least <i>x</i> and at most <i>y</i> problems.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The contests at the <i>Summit Online Judge</i> will be held often enough, which means
that the number of problems in the archive will increase fast. For convenience, it
was decided to divide the archive into volumes of equal size. The size of the volume is called <i>correct</i> if there is at least one way to hold several contests so that the total number of problems in these contests would be equal to the size of the volume. In addition, the size must be in the range from <i>l</i> to <i>r</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to find the number of ways to choose a correct size of the volume.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains four space-separated integers <i>x</i>, <i>y</i>, <i>l</i>, <i>r</i> (1 &le; <i>x</i>, <i>y</i>, <i>l</i>, <i>r</i> &le; 10<sup>18</sup>; <i>x</i> &le; <i>y</i>; <i>l</i> &le; <i>r</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of ways to choose a correct size of the volume.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 5 7 13</PRE></TD><TD><PRE CLASS="intable">5</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the example above, the size of the volume can be equal to 8, 9, 10, 12, or 13.</DIV></DIV>
______________________________________________________
1721||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Side one</b></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll flew above the City. Bright street lights flashed by below. He was winding his way around needle-sharp spires of communication towers and wicker grid radiators of thermonuclear power plants. Express mail helicopters rushed past him. Suddenly, the neat layout of the streets below was broken. The streets, which used to be straight and parallel, had started to twist and twirl like a bunch of glowing tentacles. Poll soared upwards. Looking down from above, Poll no longer saw streets. Instead, he saw a neural network &mdash; live and pulsating with energy. One of the neurons flashed and faded to black. Its neighbours were saturated with energy and burst too. With each impulse, a neuron would reach its neighbour and turn it into light. The wave of flashes was propagating through the neural tissue, consuming and annihilating it. Soon, Poll found himself alone in the dark. The darkness surrounded him, filled his eye sockets and mouth, squeezed his chest. Poll couldn't breath, couldn't think and the only thing he felt was absolute, total terror&hellip;
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll woke up screaming. His dreams had turned for the worse that week. Vivid, detailed, indistinguishable from reality, but at the same time incoherent and perplexed. Actually, it was a well-known symptom, one of those that were featured prominently in the sermons of street preachers from doomsday cults. Poll was in a state of denial for a month, but his condition had become too obvious to ignore. He typed &ldquo;neurointerface autoinduction
syndrome&rdquo; in his favourite search engine and in a short time found a specialized clinic nearby. He registered on its site and booked an appointment that evening.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll went to work on foot. Private vehicles were forbidden in the City, and he didn't want to suffocate in overcrowded carriages. But the streets were far from deserted either. The buzzing of the crowd was complemented by the screaming ads running on huge screens which were profusely hanged above the pavement. Poll noticed painfully familiar logo on one of the screens, and a pleasant female voice informed him that &ldquo;Subregional Programming Contest will be held in the City in less than a week. Make sure you're registered!&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll had entered a high-rise building and went up to floor 70. The floor housed the jury of the contest mentioned in the advertisement, and Poll was the chairman of the jury. Several people were sitting behind their desktops in a big room. Most of them were using neurointerfaces, so no clacking of keyboards could be heard. Those people were Poll's hand-picked team, they were preparing the problems for the contest. All of them were professionally licensed problemsetters with a rank of 3 or higher. Nevertheless, Poll always verified and approved every problem by himself before a contest. He trusted his team, but the stakes were high &mdash; and a second pair of eyes couldn't hurt.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll went to his office, got connected to the internal network via his neurointerface and plunged into the work. The day passed by. Poll noticed that it got dark outside only when headlights of a fire helicopter flying by his window illuminated the room. He looked at his watch, and realized that he was late for the doctor's appointment. He logged off and hurried to the clinic.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A nice nurse greeted Poll at the reception and directed him to the doctor Wasat's office. Dr. Wasat turned out to be a friendly, sympathetic aged physician, who could easily gain the confidence of his patients. He listened carefully and immediately went to the heart of the problem. After some consideration, he suggested for Poll to undergo brain scanning immediately, to confirm or deny any issues with the neurointerface. Poll felt relieved that his case had been in the hands of a specialist, and he agreed to the procedure. They went to the neighbouring room, where there was a sophisticated device resembling an electric chair. Poll sat down on it. The doctor fixed his head between two hemispheres and stepped away to the control panel. Poll saw nothing but a plain white wall in front of him. He sensed that something was connected to his neurointerface.
<br>
&ldquo;Don't resist it,&rdquo; the doctor said gently.
<br>
Poll relaxed. The device hummed to life, sending warm waves through Poll's body. Nothing happened for a while, but then suddenly Poll noticed thin sharp spikes extending from the white wall. They were slowly growing, coming closer and closer to him. All of them were aimed at his heart. He tried to break free, to dodge, but to no avail. Thousands of white spikes penetrated his chest, pierced his heart, and started to pump bright white light into him. The light displaced blood in his arteries, reached all corners of his body, flooded his mouth, poured out of his eyes. Poll shut his eyes tight and violently writhed.
<br>
&ldquo;Poll! Poll! Calm down! It's OK, it's over now!&rdquo; the doctor's voice sounded concerned.
<br>
Poll opened his eyes. Doctor Wasat was holding his shoulders and watching him closely. There were neither spikes nor light around.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A nurse took Poll back to the office and brought him hot tea. He was sitting there alone for a long time, until doctor Wasat finally returned. The doctor was gloomy. He sat behind his desk and categorically stated:
<br>
&ldquo;I don't want to scare you, but your condition is very serious indeed. I'm sure you understand it too. It'll get worse. You'll experience visions not only when you're sleeping, but when you're awake too. To be precise, you won't be able to distinguish dreams and reality.&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">They talked for a couple of hours. The doctor promised to help in any way possible, but he couldn't guarantee anything. Modern medical science still wasn't able to treat such conditions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll left the clinic very depressed. The doctor suggested to lift him home in a medical helicopter, but Poll declined. He didn't want to go home. He went straight to the local council building, which was the tallest in the neighbourhood. Although its roof was off-limits to the public, Poll happened to know the access code. He climbed the roof, walked up to the edge, and breathed the cool night air. He could see the City up to the horizon. Not the twisted city from his dreams, but the usual bustling city of real people. The Reality. With all its flaws, Poll didn't want to get detached from it. Better to be dead than to end up in a straitjacket inside an asylum.
<br>
&ldquo;Gonna jump?&rdquo; A female voice from behind caught Poll by surprise.
<br>
Poll turned back. A girl, mid-20's, was sitting on an air duct. She grinned and looked down at him.
<br>
&ldquo;Don't know,&rdquo; said Poll with a smile.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The girl jumped off the duct and walked up to Poll. She stepped on the edge near him and looked down in awe.
<br>
&ldquo;So high&hellip; I'm Alhena. You?&rdquo;
<br>
&ldquo;Poll.&rdquo;
<br>
They were standing shoulder to shoulder for a few minutes. Poll started to feel a little self-conscious. Alhena broke the silence first:
<br>
&ldquo;So, Poll. Gonna invite me for a date? But not tonight,&rdquo; she added hastily.
<br>
&ldquo;All right, how about tomorrow?&rdquo; Poll replied captivatedly.
<br>
&ldquo;That'd be great.&rdquo;
<br>
They exchanged their numbers and went down to the street together. Poll tried to follow her, but soon lost her in the crowd.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Next morning Poll was late for work. When he finally arrived, he found his old friend Castor waiting for him in the office. They had been arranging contests together for a long time. But Castor wasn't a problemsetter. From a young age he was passionate about protection of everything. He was responsible for physical and information security
of the contests. People called him &ldquo;Castor-hound&rdquo; behind his back, but Poll liked him. Maybe because Castor helped Poll deal with several delicate situations and difficult people, earning his deep trust and respect.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">From time to time, Castor came to each employee to personally update the access codes through the neurointerface. The employees called this &ldquo;Castor eating our brains.&rdquo; And when the codes weren't updated for some time, someone always asked &ldquo;When will Castor eat our brains again?&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Today was the day. Castor got connected to Poll's neurointerface and while the codes were being uploaded, they chatted randomly. When Castor left, Poll was feeling much better. A chat with a friend calmed him down and he was ready to get into gear.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">He worked hard all day. In the evening he called Alhena and invited her for dinner. They went to the best restaurant in the neighbourhood. Alhena turned out to be very sociable, able to find common ground even with such an extreme introvert as Poll. They talked about a range of things, and Poll felt he really got to know her. The only thing that troubled him was that he couldn't figure out what she was doing on the roof, and he didn't know how to ask.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the restaurant they went to her place. She lived alone in a small, tidy apartment. Poll settled on a couch while Alhena poured out two glasses of wine. They toasted the evening and sipped a little. She leaned forward to kiss him&hellip;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><b>Side two</b></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">She leaned forward to kiss him, when suddenly her head jerked up and she gave a shrill scream. Her whole body was shaking with convulsions and she tumbled down to the floor.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a moment, mayhem broke out in the apartment. The main door was pulled out, windows were broken, and a dozen of armed men wearing masks and body armor poured inside. Four of them grabbed Alhena and dragged her away. Two were holding Poll down tight. But Poll didn't even try to struggle, he was dumbfounded by the unexpected twist of the story.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A man in the same body armor but without a mask entered the room. Poll, to his utter surprise, recognized his buddy Castor. Castor sat down opposite Poll and grinned. By then, the initial shock was wearing off, and Poll burst out on him:
<br>
&ldquo;Castor, what the hell? What's going on here?&rdquo;
<br>
&ldquo;Me saving your ass again is going on here,&rdquo; said Castor favorably and in a commanding voice ordered, &ldquo;Release him.&rdquo;
<br>
The two let Poll off and stepped out. Poll rubbed his left shoulder and asked, frowning:
<br>
&ldquo;What's up with Alhena?&rdquo;
<br>
&ldquo;She was smashed by the virus I planted into your head today.&rdquo;
<br>
&ldquo;I don't understand.&rdquo;
<br>
&ldquo;It's really easy,&rdquo; said Castor, making himself comfortable. &ldquo;As
a matter of fact, you're not ill. They somehow managed to hack your brain and infect it with a virus which made you believe you've got a syndrome. Besides, the virus allowed them to make a copy of your memory via the neurointerface without you even noticing it. She just tried to do this very thing. She tried to download your today's memories, memories of all the problems you worked on. But she didn't know that I erased their virus from your system and planted mine. I call it Castor-hound,&rdquo; and he winked at Poll. &ldquo;Whenever someone tries to connect to the backdoor
in your head, Castor-hound starts to eat his brain. You saw the result.&rdquo;
<br>
Poll started to connect the dots.
<br>
&ldquo;And doctor Wasat&hellip;&rdquo;
<br>
&ldquo;&hellip; is not a doctor at all. You were his first and last patient. He downloaded a good chunk of information from your head, all the work you did this month. We eventually captured him, but it was too late, he already sold the data. There is no way we can stop the leak now. I'm afraid the contest should be canceled.&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Poll was fuming. He was tricked like a big silly. He stared at Castor and said categorically:
<br>
&ldquo;No, we won't cancel the contest. We'll prepare new problems.&rdquo;
<br>
&ldquo;Do you have enough time? How many problems can you prepare simultaneously?&rdquo;
<br>
That was a good question. The contest rules state that every problem should be prepared by two persons exactly: one should write a statement, the other one should prepare a set of tests. Generally, professional problemsetters have license for only one of the tasks, but some of them can do both. Besides, to eliminate a possibility of conflicts between the problemsetters working on the same problem, the difference of their ranks should be equal to 2.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">They had not much time left, so each of them could prepare only one problem. Poll urgently needed to answer the question: how many problems would the jury be able to prepare for the contest?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of problemsetters in the program committee
(2 &le; <i>n</i> &le; 1000). Each of the following <i>n</i> lines contains a problemsetter's name, his specialization and his rank separated with spaces. The name consists of up to 20 Latin letters. There are no two problemsetters with the same name.
Specialization is denoted by one of the three words: &ldquo;statements&rdquo;,
&ldquo;testdata&rdquo;, or &ldquo;anything&rdquo;, corresponding to the people able to write statements, people able to prepare the tests and to the people able to do both.
The rank is an integer in range from 3 to 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal number of problems that can be prepared for the contest. For each of these problems output a line containing the name of a person writing the statement, a space, and the name of a person preparing the tests. If there are several ways to prepare such an amount of problems output any one.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
Poll anything 8
Tejat statements 6
Mebsuta testdata 6
Propus testdata 4
Alzir anything 7
Mekbuda anything 3
Dirah testdata 9</PRE></TD><TD><PRE CLASS="intable">3
Poll Mebsuta
Tejat Propus
Alzir Dirah</PRE></TD></TR></TABLE>
______________________________________________________
1722||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Would you like to enjoy a bird's-eye panoramic view of Yekaterinburg?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Antei business, entertainment, and shopping center is situated in the very
center of Yekaterinburg. It includes two high-rise buildings, 19- and 50-storey
high. Since the new 50-storey building is still under construction, it is not used
yet. The older 19-storey building has an observation deck at its rooftop.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, you won't be able to see the whole Yekaterinburg from this
observation deck because the huge unfinished new Antei building stands nearby.
At first sight, you may think that it blocks the view of a half of the city,
but this is not so. Calculate which part of the city is actually blocked by
the new Antei building from visitors on the observation deck.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Yekaterinburg has the form of a circle of radius <i>R</i> centered at the point (0, 0).
You can assume that the whole city except for the towering Antei buildings is
situated in the horizontal plane. Both high-rise Antei buildings have the form of a cylinder. The foundation of the old building is a circle of radius <i>r<sub>old</sub></i> meters centered at the point (0, 0) and the foundation of the new building is a circle of radius <i>r<sub>new</sub></i> meters centered at the point (<i>x</i>, <i>y</i>). Both buildings lie entirely inside Yekaterinburg and have no common points. Visitors can walk around the observation deck and watch the city from any point of the deck. A point of the city <i>can't be seen</i> by a visitor if the segment connecting it with the position of the visitor on the observation deck has at least one common point with the new Antei building. A point of the city is <i>blocked</i> from a visitor if it can't be seen from any point on the observation deck.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>R</i>, <i>r<sub>old</sub></i>,
and <i>r<sub>new</sub></i> (1 &le; <i>r<sub>old</sub></i> &lt; <i>r<sub>new</sub></i> &lt; <i>R</i> &le; 1000). The second line contains space-separated integers <i>x</i> and <i>y</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the part of the city blocked from a visitor by the 50-storey Antei building as a percentage of the whole city's area precise up to 10<sup>&minus;6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 1 3
-1 4</PRE></TD><TD><PRE CLASS="intable">20.9346176061</PRE></TD></TR></TABLE>
______________________________________________________
1723||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It's been quite a number of years since Lich Sandro retired. Sometimes in the evenings, when he feels especially lonely, he takes a book that was presented to him by his student magicians on the occasion of his retirement.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This evening the great magician is also reading the book. One of the chapters describes Sandro's famous discovery: he invented a universal spell many years ago. Any substring (a few consecutive symbols of the string) of the universal spell is also a spell, and its power is equal to the number of times this spell is encountered in the universal spell (for example, the string &ldquo;ue&rdquo; encounters in the string &ldquo;queue&rdquo; twice, and the string &ldquo;aba&rdquo; encounters in the string &ldquo;abababa&rdquo; three times).</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sandro has a lot of free time now and he wants to find the most powerful spell.
Help Sandro do it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the universal spell invented by Sandro. The spell is a non-empty string consisting of lowercase English letters with length at most&nbsp;50.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output any of the most powerful spells, according to Sandro's definition.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">tebidohtebidoh</PRE></TD><TD><PRE CLASS="intable">tebidoh</PRE></TD></TR></TABLE>
______________________________________________________
1724||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A conference of British scientists in the city of Bash ended with a sensation. Professor D.&nbsp;Cheatillo presented a talk that changed the modern idea of the world.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was assumed earlier that DNA molecules of humans and animals consisted of four nucleotides only, which were denoted by the symbols “A”, “C”, “G”, and “T”. However, Professor Cheatillo proved that for each nucleotide there was the matching antinucleotide, which could also be present in a DNA molecule. Professor denoted the antinucleotides by the symbols “a”, “c”, “g”, and “t”, where “a” was the antinucleotide for “A”, “c” was the antinucleotide for “C”, and so on.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Moreover, the investigation carried out by Cheatillo showed that human DNA
strands had special structure. Professor believes that each <i>human</i> DNA strand is either an empty string, or the concatenation of two human strands (i.e. a human strand followed by a human strand), or a human strand preceded by some nucleotide and followed by the matching antinucleotide. For example, the strands “CcAaGg” and “ACca” are human and the strands “cC” and “GTgt” are not.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor Cheatillo conjectures that the degree of the affinity between a human and an animal can be established by checking whether some substrings of a DNA strand of this animal are human. In order to develop an efficient method of performing such checks, British scientists invited the best programmers, which means you.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a DNA strand of some animal. The line consists of the symbols “A”, “C”, “G”, “T”, “a”, “c”, “g”, “t” and has length <i>L</i> (1 &le; <i>L</i> &le; 100000). The second line contains the number <i>q</i> of substrings of this line that must be checked <nobr>(1 &le; <i>q</i> &le; 50000)</nobr>. The <i>i</i>-th of the following <i>q</i> lines contains space-separated integers <i>l<sub>i</sub></i> and <i>r<sub>i</sub></i>, which are the numbers of the first and the last symbols of
the substring that must be checked (1 &le; <i>l<sub>i</sub></i> &le; <i>r<sub>i</sub></i> &le; <i>L</i>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a string of length <i>q</i> consisting of symbols “0” and “1”. The <i>i</i>-th symbol must be “1” if the substring starting at position <i>l<sub>i</sub></i> and ending at position <i>r<sub>i</sub></i> is human. Otherwise, this symbol must be “0”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">caAgtGTtgAacCc
5
2 3
6 9
10 11
1 14
13 14
</PRE></TD><TD><PRE CLASS="intable">01101</PRE></TD></TR></TABLE>
______________________________________________________
1725||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every fall, all movies are shown to a full house at one of the most popular cinema theatres in Yekaterinburg because students like to spend their time sitting in a cosy
chair and watching a movie instead of attending lectures and seminars. Unfortunately, the distance between the rows of seats in the cinema hall is small, and people constantly stumble over other people's feet as they get to their seats before the film exhibition. Entering the hall, a visitor chooses from which end of the row (left or right) he will make his way to his seat. He chooses it in such a way that the number of people over whose feet he will stumble will be minimal. If these numbers are equal for the left and right ends, the visitor chooses the end of the row which is closer to his seat.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Student of the Department of Philosophy Vasya is an enthusiastic movie-goer and an equally enthusiastic hater of mathematics. He was the first to buy a ticket to the first exhibition of a new movie. When Vasya entered the hall and sat down in his seat, he saw that other seats in the row were still unoccupied. Vasya knew that by the time the exhibition started the hall would be full. Therefore, quite a number of other visitors would stumble over his feet while getting to their seats. Despite his hatred for mathematics, Vasya was able to instantly estimate the maximal number of people that would stumble over his feet before the exhibition. Can you do the same?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the total number of seats <i>n</i> in the row where
Vasya is sitting and the number of his seat <i>k</i> (1 &le; <i>k</i> &le; <i>n</i> &le; 50; <i>n</i> is even). These integers are separated with a space. The seats in the row are numbered starting with one.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal number of people who would stumble over Vasya's feet.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 1
</PRE></TD><TD><PRE CLASS="intable">1</PRE></TD></TR></TABLE>
______________________________________________________
1726||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The program committee of the school programming contests, which are often held
at the Ural State University, is a big, joyful, and united team. In fact, they are so
united that the time spent together at the university is not enough for them,
so they often visit each other at their homes. In addition, they are quite
athletic and like walking.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once the guardian of the traditions of the sports programming at the Ural State University decided that the members of the program committee spent too much time walking from home to home. They could have spent that time inventing and preparing new problems instead. To prove that, he wanted to calculate the average distance that the members of the program committee walked when they visited each other. The guardian took a map of Yekaterinburg, marked the houses of all the members of the program committee there, and wrote down their coordinates. However, there were so many coordinates that he wasn't able to solve that problem and asked for your help.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The city of Yekaterinburg is a rectangle with the sides parallel to the coordinate axes. All the streets stretch from east to west or from north to south through the whole city, from one end to the other. The house of each member of the program committee is located strictly at the intersection of two orthogonal streets. It is known that all the members of the program committee walk only along the streets, because it is more pleasant to walk on sidewalks than on small courtyard paths. Of course, when walking from one house to another, they always choose the shortest way. All the members of the program committee visit each other equally often.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of members of the program committee (2 &le; <i>n</i> &le; 10<sup>5</sup>). The <i>i</i>-th of the following <i>n</i> lines contains space-separated coordinates <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> of the house of the <i>i</i>-th member of the program committee <nobr>(1 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 10<sup>6</sup>).</nobr> All coordinates are integers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the average distance, rounded down to an integer, that a member of the program committee walks from his house to the house of his colleague.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
10 10
20 20
10 20</PRE></TD><TD><PRE CLASS="intable">13</PRE></TD></TR></TABLE>
______________________________________________________
1727||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Znaika has many interests. For example, now he is investigating the properties of number sets. Znaika writes down some set consisting of different positive integers (he calls this set a <i>generating</i> set), calculates the sum of all the written digits, and writes down the result in a special notebook. For example, for a generating set
7, 12, 43, he will write down the number <nobr>17 = 7 + 1 + 2 + 4 + 3</nobr>. Znaika is sure that only <i>magic</i> numbers can appear as a result of this operation.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Neznaika laughs at Znaika. He thinks that there is a generating set for every number, and he even made a bet with Znaika that he would be able to construct such a set.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Neznaika win the bet and construct a generating set for a given number.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains an integer <i>n</i> (0 &lt; <i>n</i> &lt; 10<sup>5</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to construct a generating set for the number <i>n</i>, output the number of elements in this set in the first line. In the second line output
a space-separated list of these elements. The elements of the set must be different positive integers strictly less than 10<sup>5</sup>. If there are several generating sets, output any of them. If there are no generating sets, output&nbsp;&minus;1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">17</PRE></TD><TD><PRE CLASS="intable">3
7 12 43</PRE></TD></TR></TABLE>
______________________________________________________
1728||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">All the names in this problem are fictitious; the coincidences are accidental.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Long ago there was the Alarm team at the Ural State University. Its members Lyosha, Vadik, and Misha enjoyed going to programming contests instead of studying. In this composition the team participated in contests for a whole year. But once, after a conflict at a contest in Kazan, Lyosha and Vadik expelled Misha from the team and changed its name to Team.GOV.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After that, Lyosha and Vadik decided that the third member of the team would be Sasha. But he didn't come to the Ural SU Championship and said that he was very busy. Lyosha and Vadik had to participate in that contest without the third programmer. However, Sasha was not expelled from the team and took part in a subregional contest, which they lost. After that, the team &ldquo;Lyosha, Vadik, Sasha&rdquo; suddenly turned into the team &ldquo;Vanya, Lyosha, Vadik&rdquo; and went to the regional contest, which they also lost.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is rumored that Team.GOV is cursed. After Alarm's break-up, the team composition is different at each contest.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An ICPC subregional contest is approaching, and the organizing committee obliged
Lyosha and Vadik to find the third member of the team. Lyosha and Vadik compiled a list of candidates and calculated the rating of each candidate according to a secret formula. The power of the team is equal to the sum of the ratings of its members. Lyosha and Vadik want their team to be as powerful as possible. But the team is cursed&hellip; As the fates decree, if the team composition repeats a composition that once participated in some contest, Lyosha won't be able to come to the contest (and the power of the team will decrease by his rating). Even in this case, if this team composition (without Lyosha) participated in some contest earlier, Team.GOV will suddenly be disqualified during the practice session and won't take part in the contest. Help the permanent members of Team.GOV choose the third member so that the team will be as powerful as possible in the subregional contest.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of contests <i>n</i> Team.GOV participated in (1 &le; <i>n</i> &le; 100). Each of the following <i>n</i> lines describes one contest. The line starts with the number of the team's members that participated in the contest (an integer in the range from one to three). This number is followed by the space-separated list of last names of these members given in the alphabetical order. The names are different nonempty strings consisting of lowercase and uppercase English letters. The length of each name is at most&nbsp;50. Lyosha's last name is Efremov and Vadik's last name is Kantorov. It is guaranteed that Vadik is present in all the compositions, and Lyosha is present in all the compositions consisting of three people. All the given compositions are different.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following line contains space-separated integers <i>r<sub>e</sub></i> and <i>r<sub>k</sub></i> <nobr>(1 &le; <i>r<sub>e</sub></i>, <i>r<sub>k</sub></i> &le; 666)</nobr>. They are Lyosha's and Vadik's ratings, respectively. The following line contains the number <i>m</i> of candidates who want to enter the team (1 &le; <i>m</i> &le; 100). Each of the following <i>m</i> lines contains the last name and the rating of a candidate separated with a space. All the ratings are integers in the range from 1 to 666. All the last names are different. The list of candidates contains neither Lyosha nor Vadik.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If, for any choice of the third member, Team.GOV will be disqualified, output the only line &ldquo;Fail&rdquo;. Otherwise, in the first line output &ldquo;Win&rdquo; and in the second line output the last name of the candidate who will become the third member of Team.GOV. If there are several possible answers, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
3 Efremov Kantorov Rubinchik
2 Efremov Kantorov
3 Efremov Kantorov Kokovin
3 Burmistrov Efremov Kantorov
3 Efremov Kantorov Pervukhin
2 Kantorov Pervukhin
100 10
6
Fominykh 200
Komarov 34
Pervukhin 250
Golubev 23
Soboleva 50
Gein 50
</PRE></TD><TD><PRE CLASS="intable">Win
Fominykh</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
3 Efremov Fominykh Kantorov
2 Fominykh Kantorov
99 666
1
Fominykh 100</PRE></TD><TD><PRE CLASS="intable">Fail</PRE></TD></TR></TABLE>
______________________________________________________
1729||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Captain Jack Sparrow was heading his Black Pearl full sail to a small island in the Caribbean. On that island, the Dead Man's Chest containing Davy Jones' heart was buried, and whoever possessed the heart could control the oceans of the world. Jack was in a hurry because he knew that his enemies, who also wanted to get hold of the valuable
artifact, were rushing to the same island.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the Pearl approached the island, captain Jack Sparrow lowered a boat and rowed to the shore. Upon reaching the island, he went through the thick jungle straight to its center, where the chest was hidden. Half an hour later, Jack dug it out and hold Davy Jones' still-beating heart in his hands. It was the time to get back to the ship. Jack leaped to his feet but then understood that he had been so eager to get the heart that he had not remembered where he had come from to that place. Therefore, he didn't know which way to go to return to the boat. Jack was struck with panic, because the enemies could appear any moment. He'd better get away as soon as possible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fortunately, Jack took with him a compass and a map of the island, so he could take any route through the island. Help Jack choose a route so that he would see his boat as soon as possible.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The island is a circle of radius <i>r</i> and the chest was buried at its center. Since the island is completely covered with jungle, Jack can observe the sea only when he is on the shore line. The boat is in the water near the shore so that it can only be seen from those points on the shore that are at most <i>a</i> degrees from the point on the shore line closest to the boat. It is known that Jack will not see the ship until he locates the boat.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated real numbers <i>r</i> and <i>a</i>
<nobr>(1 &le; <i>r</i> &le; 1000; 0.001 &le; <i>a</i> &le; 45)</nobr>. The numbers contain at most three fractional digits.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the distance, precise up to 10<sup>&minus;6</sup>, that Jack has to walk in the worst case before he will be able to see the boat, assuming that he chooses an optimal route.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1.000 30.000
</PRE></TD><TD><PRE CLASS="intable">6.0000000</PRE></TD></TR></TABLE>
______________________________________________________
1730||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It was an early winter morning at South Park. As usual, adults were hurrying to work and children were hurrying to school. Stan, Kyle, Kenny, and Eric stood at a bus stop
waiting for the school bus. The day promised to be dull and boring.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The boys didn't know that they would meet an interesting person that day. It all started when the school counselor gathered the children in the gymnasium and announced: &ldquo;Attention, students, we have a very special guest speaker today. Who can tell me the name of our country's last vice-president?&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, none of the children knew that his name was Al Gore. It turned out a bit later that, possibly, it was for the better.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The man mounted the platform and said: &ldquo;Thanks, Mr. Mackey, and good morning to South Park Elementary! I am here to tell you about the single biggest threat to our planet. You see, there is something out there which threatens our very existence and may be the end to the human race as we know it. I'm talking, of course, about &lsquo;ManBearPig.&rsquo; It is a creature which roams the Earth alone. It is half man, half bear, and half pig. Some people say that ManBearPig isn't real. Well, I'm here to tell you now, ManBearPig is very real. ManBearPig doesn't care who you are and what you've done. ManBearPig just wants to get you. But have no fear, because I am here to save you. And someday, when the world is rid of ManBearPig, everyone will say, &lsquo;Thank you, Al Gore!&rsquo;&rdquo;</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, nobody paid attention to Gore's words. Everybody just shrugged their
shoulders and went to their classes. But in the evening Eric Cartman suddenly understood that Al Gore had said complete nonsense.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Judge for yourself, how could one creature consist of three halves of other creatures? Eric told that to Kenny, but Kenny dismissed it by saying that Gore, evidently, had meant one third of each creature. However, Eric was right. Indeed, there is no lineage that could lead to ManBearPig containing equal parts of pig, bear, and man.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>lineage</i> of a creature is a sequence of interbreedings of creatures that leads to the birth of this creature. When creature <i>A</i> is interbreeded with creature <i>B</i>, a new creature is born, which consists of <i>A</i> and <i>B</i>. If creature <i>A</i> contained <i>a</i> percent of some animal and creature <i>B</i> contained <i>b</i> percent of the same animal, then the new creature contains <nobr>(<i>a</i> + <i>b</i>) / 2 </nobr> percent of that animal.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Now Eric wants to construct a possible lineage of a creature by the information on which animals and in which proportions are contained in this creature.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the name of a creature. It consists of lowercase English letters and hyphens and has length in the range from 1 to 200. The hyphens in this name separate the names of animals. Each animal has a nonempty name and appears in the name of the creature at most once. The creature consists of at least one and at most ten different animals. The second line contains a space-separated list of fractions of the form <i>a</i>/<i>b</i> <nobr>(1 &le; <i>a</i> &le; <i>b</i> &le; 1500)</nobr>. The <i>i</i>-th fraction in this list is the part of the creature that the <i>i</i>-th animal makes up. The sum of the fractions is equal to one.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a lineage of the creature in the form of a consecutive description of how its ancestors and the creature itself were born. In the first line output the number <i>n</i> of lines in the lineage (1 &le; <i>n</i> &le; 10000). After that output <nobr><i>n</i> &minus; 1</nobr> lines. The <i>k</i>-th of these lines must describe the <i>k</i>-th ancestor of the creature. If the <i>k</i>-th ancestor is an animal, then the line must contain its name only. If this ancestor was born as a result of interbreeding of two of the earlier-described ancestors, then the line must contain a pair of integers in the range from 1 to <nobr><i>k</i> &minus; 1</nobr>. The integers are the numbers of lines in the lineage where these ancestors are described. In the last line output, in the same format, how the creature given in the input was born.
All the described ancestors of the creature must appear in at least one interbreeding.
If there are several possible lineages, output any of them. If it is impossible to construct the required lineage, output the line &ldquo;No solution&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">man-bear-pig
1/2 1/4 1/4
</PRE></TD><TD><PRE CLASS="intable">7
man
pig
1 2
bear
man
4 5
3 6</PRE></TD></TR><TR><TD><PRE CLASS="intable">man
1/1</PRE></TD><TD><PRE CLASS="intable">1
man</PRE></TD></TR><TR><TD><PRE CLASS="intable">man-bear-pig
1/3 1/3 1/3</PRE></TD><TD><PRE CLASS="intable">No solution</PRE></TD></TR></TABLE>
______________________________________________________
1731||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Ivan Vasil'evich likes to work in his garden. Once he heard that dill was a very beautiful and healthy crop and planted his whole garden with two varieties of it.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the dill was ripe, Ivan Vasil'evich harvested it and put it into boxes. He filled <i>n</i> boxes with dill of the first variety and <i>m</i> boxes with dill of the second variety. The weight of each box with dill in kilograms was an integer and all the weights were different. In order to please his neighbors Ivan Ivanovich and Ivan Nikiforovich, Ivan Vasil'evich decided to give each of them two boxes with dill, one box of each variety. Ivan Vasil'evich didn't want Ivan Ivanovich and Ivan Nikiforovich to quarrel, so he decided that the total weight of the boxes given to each of the
neighbors should be equal. Ivan Vasil'evich considered all the possible variants and saw that this was impossible. Find the weights of all the boxes with dill stocked
by Ivan Vasil'evich.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated integers <i>n</i> and <i>m</i> (2 &le; <i>n</i>, <i>m</i> &le; 50).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output <i>n</i> space-separated integers.
These must be the weights of the boxes with the first variety of dill.
In the second line output <i>m</i> space-separated integers, which
are the weights of the boxes with the second variety of dill. The integers
must be positive, different, and should not exceed 10<sup>9</sup>. If there are
several solutions, output any of them. If there is no solution, output the line
&ldquo;It is a lie!&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3</PRE></TD><TD><PRE CLASS="intable">1 2
5 10 12</PRE></TD></TR></TABLE>
______________________________________________________
1732||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In whiteblack on blackwhite is written the utterance that has been
censored by the Ministry of Truth. Its author has already disappeared along
with his whole history, and now, while Big Brother is watching somebody else,
you, as an ordinary official of the Minitrue, have to delete some letters from
the utterance so that another utterance will appear, which has been approved of
by the Ministry.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Ministry of Truth defines a <i>word</i> as a nonempty sequence of English letters
and an <i>utterance</i> as a sequence of one or more words
separated with one or more spaces. There can also be spaces before the first word
and after the last word of an utterance. In order to compare two utterances,
one should delete all the leading and trailing spaces and replace each block of
consecutive spaces with one space. If the resulting strings coincide, then the
utterances are considered to be equal. When the official deletes a letter from the utterance, this letter turns into a space.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the original utterance and the second line contains
the utterance that must be obtained. The length of each utterance
is at most 100000 symbols. The words in both utterances are separated with
exactly one space; there are no leading or trailing spaces in each line.
The original and the required utterances are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If you can't carry out your order, output “I HAVE FAILED!!!” in
the only line. Otherwise, output the original utterance replacing the letters
that are to be deleted with the underscore character.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">Preved to Medved
Preved Me
</PRE></TD><TD><PRE CLASS="intable">Preved __ Me____
</PRE></TD></TR><TR><TD><PRE CLASS="intable">this is impossible
im possible
</PRE></TD><TD><PRE CLASS="intable">I HAVE FAILED!!!
</PRE></TD></TR></TABLE>
______________________________________________________
1733||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Winter. End of December. Snowing. The shrill wind catches snowflakes
and carries them among the stone buildings. The monastery looks
deserted—doors are blocked by snow drifts, shutters are closed.
Only the windows of the scriptorium—the largest ones in the monastery—are 
wide open. Dim winter light illuminates the room. A few monks
sit there in complete silence. The room is so cold that monks' fingers
go numb and white, but they continue to quickly write with quill pens,
trying to do as much as possible during the short December day.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A sacred rite is being performed in the scriptorium—information
is being copied.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One scribe, not long ago promoted from an apprentice, is writing
his first book. His lips are moving, he mumbles every word he's
copying to ensure against mistakes. Another one has copied dozens
of books, every letter he writes is indistinguishable
from the original. He devoted all his life to writing,
and he has no other skills.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A monk, called corrector, is sitting in the adjacent room.
His duty is no less important—he's leaving notes and
corrections in the margins of a book. Also, binders and
illuminators are working in the scriptorium. They add
final touches to a book before it ends up in rich layman's
hands. Hard work of all these monks is essential for survival
of the monastery.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But daylight fades, scribes put quills aside and go away
to their cells. The day is drawing to a close. The year 1439
is drawing to a close. The epoch of monk scribes is drawing to a close.
Next year, 1440, Johannes Gutenberg will print his first book.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">***</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Autumn. Mid-November. Raining. Young woman is sitting at the diner
on the corner of Broadway and 112th Street. She looks out the window
at the dark clouds hanging over the city. Maybe it's just the weather,
but all the morning she feels strange emptiness in her soul. She
feels like apathetic observer, like nothing concerns her.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The waiter comes to her and fills her cup with coffee halfway.
She tries to argue, but he doesn't look at her anymore. He's
looking at a woman entering the diner and shaking her umbrella.
He smiles and greets her. Young woman turns her head away from
them and pours milk in her coffee.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Feeling bored, she picks the newspaper. Nothing interesting in it,
except a story about an actor who drank too much, slipped in his
apartment and died. However, his name doesn't sound familiar to her.
She turns the pages looking for the horoscope and comic strips.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">She thinks someone is watching her. She turns her head and sees a woman
behind the window, looking inside. In a moment, she realizes that the woman is
just looking at her reflection, fixing her stockings.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">And the rain goes on and on. She hears the bells of the Cathedral
of Saint John the Divine, located opposite the end of the street.
The bells ringing remind her of an old friend, with whom she once
had a little picnic on the steps of the cathedral at midnight.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">She finishes her coffee and leaves the diner. The diner's name
is “Tom's”. Young woman's name is Suzanne Vega. In a few
months she'll write a song about this morning.  And in a decade
audio engineer from Germany will use the song to fine-tune
his compression algorithm. He'll listen to it thousands of times,
before final version of the compression scheme known as MP3
will be ready.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center">***</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the Museum of Science History, in the “Forgotten Technology”
section, there is an exhibit called “Mass Copy Victims”.
Under the glass, a 15th century hand-written book lies on the velvet
cloth. A 20th century compact disk lies on top of the book.
These technologies have been forgotten with the advent of new ways
to copy and distribute information. Hand-written books lost competition
with cheap output of printing presses, while compact disks were forced
out by pervasive digital networks. And now you can find them only
in private collections and this museum.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Also, a little mouse lives in the museum. She lives there because
she's curious and adores museums. She gnawed through the bottom of
the showcase, and now she wants to bite a bit of the disk and
take it away to her hole. But she's afraid that the alarm will
set off before she makes it. Help her to find the shortest path
to the disk.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The book is a rectangle. The disk is lying on the book,
so its center is either inside the rectangle or on its border.
The mouse can run only on the cloth, her own dimensions are negligible.
In her initial position, there is a non-zero distance between her
and the book/the disk. To bite the disk, the mouse has to run to
a point where the disk hangs over her, that is the point should
be strictly outside the rectangle.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the coordinates of the vertices of the rectangle,
listed in the counter-clockwise order. The next line contains the coordinates
of the center of the disc and its radius. The third line contains the coordinates
of the initial position of the mouse. All numbers are integers and don't exceed 1000
in absolute value. The radius of the disc is equal or greater than 1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the length of the shortest path to the disc, accurate to at least 10<sup>–5</sup>. It is guaranteed
that the required path exists.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">-4 -3 8 6 5 10 -7 1
1 7 5
7 -1
</PRE></TD><TD><PRE CLASS="intable">12.07107
</PRE></TD></TR></TABLE>
______________________________________________________
1734||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For many years programmer Starostin had been writing a checkers-playing program
for the <i>n</i> &times; <i>n</i> board. The triumph moment was very near—he was going to
issue the final version soon and enjoy the glory of the creator of the best checkers program in
the world. The program was almost invincible already, and with
the new big endgame database there would be no equals to it. It only remained
to generate that database...
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When he finished writing the generator of moves in assembler, Starostin found out
that there was no empty space left on his hard disk. The endgame database would
require a huge amount of memory. In order to estimate the number of hard disks
he would have to buy, Starostin decided to compute in advance the number of
positions in his database.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The database must contain only those positions in which there are exactly <i>k</i>
pieces on the board. Each piece is characterized by its color (white or black)
and type (a man or a king). There must be at least one piece of each color on
the board, all pieces must occupy black squares, and men mustn't stand on their
crowning squares (this means that white men can't be in the last rank and black
men can't be in the first rank).
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated integers <i>n</i> and <i>k</i> 
(4 &le; <i>n</i> &le; 1000; 2 &le; <i>k</i> &le; <i>n</i><sup>2</sup>/4; <i>n</i> is even).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of positions in the endgame database computed
modulo 10<sup>9</sup> + 7.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 2
</PRE></TD><TD><PRE CLASS="intable">172
</PRE></TD></TR></TABLE>
______________________________________________________
1735||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An evil-doer got into a depository where gold and platinum bars were stored and
took out <i>n</i> sacks with bars. In each sack there were <i>k</i> bars and all the bars
in each sack were made of the same metal. To arouse less suspicions, the
criminal painted all the bars black, which made gold bars and platinum bars
look the same.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Soon he found a buyer for the platinum bars. However, it turned out that the
thief didn't know which bars were in which sack. Still, he kept his head
and decided to find that out using a balance that could show exact weights. The
thief knew that the mass of a gold bar was <i>x</i> kilograms and the mass of a
platinum bar was <i>y</i> kilograms. Help the thief determine in one weighing in
which sacks there are gold bars and in which sacks there are platinum bars.
Tell him how many bars from each sack he should put on the balance in order to
determine which sacks contain platinum bars.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated integers <i>n</i>, <i>k</i>, <i>x</i>, and <i>y</i> 
(3 &le; <i>n</i> &le; 20; 1 &le; <i>k</i> &le; 10<sup>6</sup>; 1 &le; <i>x</i> &lt; <i>y</i> &le; 10).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to determine in which sacks there are platinum bars
in one weighing, output “YES” in the first line and output <i>n</i> space-separated integers in
the second line. These numbers must describe how many bars from each sack
should be put on the balance. If there are
several solutions, output any of them. If there is no solution, output
“NO” in the only line.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 8 9 10
</PRE></TD><TD><PRE CLASS="intable">YES
4 5 6 8
</PRE></TD></TR></TABLE>
______________________________________________________
1736||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Sergey and Denis closely followed the Chinese Football Championship, which has
just come to an end. They supported the <i>Katraps</i> and <i>Komolotiv</i>
teams, but, unfortunately, these teams tied for last place in the championship.
Sergey was so disappointed that he suggested Denis that they change to hockey
fans.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> teams competing in the Chinese Ice Hockey Championship. During
the season, each team must play with each other team exactly one game. If a
team wins in the regulation time, it gets 3 points and the losing team gets 0
points. If the regulation time is ended in a draw, then the overtime is played.
The team that wins in the overtime gets 2 points and the team that loses gets 1
point. A game can't end in a draw in ice hockey.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis wants to determine which team he will support. In order to make the
choice, he has found a table on the Web in which it is shown for each team how
many points it scored in the last year's season. Sergey suspects that there is
a mistake in this table because no all-play-all tournament could end with such
results. Is Sergey right?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (2 &le; <i>n</i> &le; 200).
The second line contains <i>n</i> space-separated non-negative integers;
they are the scores of the teams in the previous championship. The
scores are given in the non-increasing order. The sum of all the scores is
<nobr>3<i>n</i>(<i>n</i>–1)/2</nobr>. None of the teams scored more than
<nobr>3(<i>n</i>–1)</nobr> points.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Sergey is right and there is a mistake in the table, output
“INCORRECT” in the only line. Otherwise, in the first line output “CORRECT”
and in the following <nobr><i>n</i>(<i>n</i>–1)/2</nobr> lines output the
results of the games. Each result must have the form “<code><i>i</i> ? <i>j</i></code>”, where <i>i</i>
and <i>j</i> are the numbers of the teams that played the game and <code>?</code> can be
<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, or <code>&gt;</code>, which means that the first team lost in the
regulation time, lost in the overtime, won in the overtime, and won in the
regulation time, respectively. The teams are numbered from 1 to <i>n</i> in the
order in which they are given in the input.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
8 7 2 1
</PRE></TD><TD><PRE CLASS="intable">CORRECT
2 &lt;= 1
3 &gt;= 4
1 &gt; 3
4 &lt; 2
1 &gt; 4
2 &gt; 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
8 8 1 1
</PRE></TD><TD><PRE CLASS="intable">INCORRECT
</PRE></TD></TR></TABLE>
______________________________________________________
1737||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you remember, when Vasechkin was preparing a problem for the latest student
contest, he spent a lot of time trying to invent an unusual and complex name
for this problem. The name that Vasechkin had invented was so complex that none
of the participants of that contest even started reading the statement of his
problem.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the contest, Chairman of the program committee announced that he refused
to take part in the preparation of contests as long as such inappropriate
people as Vasechkin worked on the program committee. That was how Vasechkin
became the new Chairman of the program committee, and now he is preparing the
next programming contest.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vasechkin has decided that this time the names of all the problems will consist
of the letters <code>a</code>, <code>b</code>, and <code>c</code> only and the length of each name will
be equal to <i>n</i>. In addition, the names must be <i>extremely complex</i>. A name is
extremely complex if none of its substrings consisting of at least two symbols
is a palindrome. Help Vasechkin find all extremely complex names for the
problems of the contest.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integer <i>n</i> (1 &le; <i>n</i> &le; 20000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output all different extremely complex names of length <i>n</i>
consisting of the letters <code>a</code>, <code>b</code>, and <code>c</code> only. The names should be given in
the alphabetical order, one per line. If the total length of the names exceeds
100000 letters, output the only line “TOO LONG”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">ab
ac
ba
bc
ca
cb
</PRE></TD></TR></TABLE>
______________________________________________________
1738||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There was an emergency at <i>ZZZ Inc.</i>—its secret developments became
known to a competing company! Of course, the primary suspects were the
employees of <i>ZZZ Inc.</i> System administrator Zhuchkov was asked to report who
of the employees had downloaded secret information from the server during the
week preceding the incident. Zhuchkov looked through the logs and found the
personal number and the data access code of the person who had done that. The
administrator gave this information to the company's management, and the same
evening the guilty employee disappeared without a trace and Zhuchkov was given
a bonus.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, it soon turned out that Zhuchkov had mixed up some symbols both in the
personal number and in the data access code and the sacked employee had in fact
been innocent. To avoid such annoying mistakes in the future, Zhuchkov had
decided to find all the pairs of employees with similar numbers and check how
much their data access codes were similar.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Zhuckov considers two personal numbers <i>similar</i> if one of them can be
obtained from the other by inserting, deleting, or replacing one digit.
Personal numbers do not contain leading zeros. The employees of <i>ZZZ Inc.</i>
are numbered by consecutive integers starting from 1, and their data access codes are lines consisting of
four hexadecimal digits. For each pair of employees with similar personal
numbers, Zhuchkov wants to calculate the number of positions in which their
data access codes differ. Help Zhuchkov.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of employees in <i>ZZZ Inc.</i>
(2 &le; <i>n</i> &le; 65536). The <i>i</i>-th of the following <i>n</i> lines
contains the data access code of the employee whose personal number is <i>i</i>. The
data access codes consist of digits and lowercase English letters; they are
different for different employees.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output four space-separated integers. The <i>i</i>-th integer
should be the number of pairs of employees whose personal numbers are similar
and whose data access codes differ in <i>i</i> positions.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
dead
beef
f00d
</PRE></TD><TD><PRE CLASS="intable">0 0 2 1
</PRE></TD></TR></TABLE>
______________________________________________________
1739||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You want to make your Christmas table special and that's why you've gotten into
a plantation of faryuks, which is the only one in the world. You want to take
home some of this mysterious fruit. However, it's not that easy to steal
faryuks. The plantation is surrounded by a high fence, and the only way to get
in or out is through the checkpoint. You can bring as many faryuks as you want
to the plantation, but it is strictly forbidden to take them out. This fruit
has a very strong aroma, and the automatic aroma sensor at the checkpoint will
raise an alarm if the aroma of faryuks is detected. Fortunately, you know that
there is an error in the aroma-detecting software. Because of the use of
one-byte variables, it does not raise an alarm if the total aroma strength of
all the faryuks being taken out is an integer divisible by 256.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You have a bottle of scent and a can of deodorant with you. When a faryuk is
sprayed upon with the deodorant, its aroma strength decreases by 25 percent.
When a faryuk is scented, its aroma strength increases by 10 percent. (In both
cases, the aroma strength can become fractional). The amount of each of the
substances you have is enough for treating only one faryuk. A faryuk can be
treated first with one substance and then with the other. The effects of the
deodorant and of the scent are short. After you take a faryuk through the
checkpoint, its aroma strength restores to the initial value.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You've come to the plantation empty-handed and you want to take out the <i>n</i>
faryuks you like most of all. Will you be able to do that?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of faryuks you want to take out 
(1 &le; <i>n</i> &le; 12). The second line contains <i>n</i> integers in
the range from 1 to 1000, which are their aroma strengths.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to take out from the plantation all the faryuks
that you want, output “IMPOSSIBLE”.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Otherwise, output in the first line the number of actions necessary for
carrying out your plan. Then output the sequence of actions, one action per
line. If you want to take out from the plantation <i>k</i> &gt; 0 faryuks with the
numbers <i>a</i><sub>1</sub>, …, <i>a</i><sub><i>k</i></sub>, output the line “<code>take <i>k</i> <i>a</i><sub>1</sub> <i>a</i><sub>2</sub> … <i>a</i><sub><i>k</i></sub></code>”.
Similarly, if you want to return to the plantation <i>s</i> &gt; 0 faryuks with the
numbers <i>b</i><sub>1</sub>, …, <i>b</i><sub><i>s</i></sub>, output the line “<code>return <i>s</i> <i>b</i><sub>1</sub> <i>b</i><sub>2</sub> … <i>b</i><sub><i>s</i></sub></code>”.
If you want to spray the deodorant on the faryuk with the number <i>p</i>, output the line
“<code>dearomatize <i>p</i></code>”. If you want to scent the faryuk with the number <i>q</i>,
output the line “<code>aromatize <i>q</i></code>”. The faryuks are numbered from 1 to <i>n</i> in
the order in which they are given in the input.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The number of actions in the sequence can't exceed 20000. If there are
several ways to take out all the faryuks, output any of them such that the number
of exiting the checkpoint with faryuks is minimal.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
36 56 200
</PRE></TD><TD><PRE CLASS="intable">4
take 2 2 3
return 1 3
aromatize 3
take 2 1 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1
100
</PRE></TD><TD><PRE CLASS="intable">IMPOSSIBLE
</PRE></TD></TR></TABLE>
______________________________________________________
1740||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><i>A crow is sitting on a branch with a piece of cheese in its mouth.<br>
A fox is running by:<br>
“Crow, are you going to the election?”<br>
“No!”<br>
The cheese falls down. The crow sits thinking:<br>
“Would anything have changed had I said yes?”</i></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A Chukcha set out to go to the election. There are <i>l</i> kilometers between his
yaranga and the polling station. His deer run so that they cover every <i>k</i>-kilometer
segment of the way in exactly <i>h</i> hours. What is the minimal and maximal time
in which the Chukcha will be able to perform his civic duty?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated integers <i>l</i>, <i>k</i>, and <i>h</i>
(1 &le; <i>k</i> &le; <i>l</i> &le; 1000; 1 &le; <i>h</i> &le; 1000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal and maximal time in which Chukcha can get from his
yaranga to the polling station, accurate to at least 10<sup>–5</sup>. The
numbers must be separated with a space.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">30 10 1
</PRE></TD><TD><PRE CLASS="intable">3.00000000 3.00000000
</PRE></TD></TR></TABLE>
______________________________________________________
1741||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kolya has returned from a summer camp and now he's a real <i>communication
fiend</i>. He spends all his free time on the Web chatting with his friends via
ICQ. However, lately the protocol of this service was changed once again, and
Kolya's client stopped working. Now, in order to communicate with his friends
again, Kolya has to upgrade his client from version 1 to version <i>n</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kolya has found <i>m</i> upgrade programs on the Web. The <i>i</i>-th program upgrades
the client from version <i>x</i><sub><i>i</i></sub> to version <i>y</i><sub><i>i</i></sub> and its size is <i>d</i><sub><i>i</i></sub> megabytes. Each
program can be installed on the corresponding version of the client only; it
can't be installed on either earlier or later versions.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first version, which is currently installed on Kolya's computer, is
licensed, and many of the upgrade programs are pirate copies. If a pirate
upgrade program is used, the client will always be pirated after that, whatever
upgrade is used later. Some of the licensed upgrade programs can be installed
on a pirate version of the client, and some of them can't. All the pirate
upgrade programs can be installed on both licensed and pirate versions of the
client.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kolya is missing his friends very much, so he wants to download the necessary
upgrade programs as soon as possible. Unfortunately, his Web connection is not
very fast. Help Kolya determine the minimal total traffic volume necessary for
upgrading the client from version 1 to version <i>n</i>. Kolya doesn't care if the
final version <i>n</i> of his client is licensed or not.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i> and <i>m</i> (2 &le; <i>n</i> &le; 10<sup>4</sup>; 1 &le; <i>m</i> &le; 10<sup>4</sup>).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the following <i>m</i> lines describes one upgrade program in the form
“<i>x</i><sub><i>i</i></sub> <i>y</i><sub><i>i</i></sub> <i>d</i><sub><i>i</i></sub> <i>s</i><sub><i>i</i></sub>”. Here, <i>s</i><sub><i>i</i></sub> is the type of the program: “Pirated”,
“Cracked”, or “Licensed”. A cracked upgrade program is a licensed program
that can be installed on a pirate version of the client, and a licensed program
can't be installed on a pirate version. The numbers <i>x</i><sub><i>i</i></sub> and <i>y</i><sub><i>i</i></sub> mean that
the program is installed on version <i>x</i><sub><i>i</i></sub> of the client and upgrades it to
version <i>y</i><sub><i>i</i></sub>. The number <i>d</i><sub><i>i</i></sub> is the size of the program in megabytes (1 &le; <i>x</i><sub><i>i</i></sub> &lt; <i>y</i><sub><i>i</i></sub> &le; <i>n</i>; 1 &le; <i>d</i><sub><i>i</i></sub> &le; 10<sup>6</sup>). The data
in each line are separated with exactly one space.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Kolya can upgrade the client from version 1 to version <i>n</i>,
output “Online” in the first line and the minimal necessary total incoming
traffic volume in the second line.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to upgrade the client, output “Offline”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4
1 3 10 Licensed
1 2 2 Pirated
2 3 3 Licensed
2 3 6 Cracked
</PRE></TD><TD><PRE CLASS="intable">Online
8
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 1
1 2 10 Licensed
</PRE></TD><TD><PRE CLASS="intable">Offline
</PRE></TD></TR></TABLE>
______________________________________________________
1742||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> programmers in the software development company. Each of them thinks that he is the greatest or the second greatest programmer in the company. In the latter case he can name the greatest programmer in his opinion.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The administration decided to divide all programmers into development teams using the following algorithm:

<ol>
<li>If there are programmers, who are not assigned to a development team, choose any of them and mark him as current one.</li>
<li>Create a new development team and assign it to the current programmer.</li>
<li>If the current programmer thinks that one of his colleagues is the greatest programmer and this colleague is not assigned to a development team, then this colleague is assigned to the same development team and is marked as current programmer. Then the step 3 is repeated. Otherwise, the team is formed, and the administration returns to the step 1.</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">What is the minimal and maximal number of teams which can be formed in this company according to the algorithm?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 10<sup>5</sup>).
The <i>i</i>-th of the following <i>n</i> lines
contains the number of the programmer, who is the greatest, according to the <i>i</i>-th programmer's opinion.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal and maximal number of development teams, separated with space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
2
3
4
2</PRE></TD><TD><PRE CLASS="intable">1 2</PRE></TD></TR></TABLE>
______________________________________________________
1743||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis received a set of dominoes as a birthday present and soon he invented a new game: he takes <i>n</i> dominoes from the set and makes the rectangle from them so that one domino piece forms one horizontal row.
The goal of the game is to swap and turn over some of the dominoes so that the numbers
in the left column would be sorted upside down in nondecreasing order and numbers
in the right column would be sorted in nonincreasing order. Denis called this game
&ldquo;domino sorting&rdquo;.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, this game takes a lot of time&hellip; Now Denis wants to write a program that will sort any suggested set of dominoes. But Denis is not a programmer yet, so he asked you to help him.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> (1 &le; <i>n</i> &le; 10<sup>5</sup>).
The <i>i</i>-th of the following <i>n</i> lines contains two space-separated
integers <i>a<sub>i</sub></i> and <i>b<sub>i</sub></i> <nobr>(0 &le; <i>a<sub>i</sub></i>, <i>b<sub>i</sub></i> &le; 10<sup>6</sup>)</nobr>. They correspond to the numbers on the <i>i</i>-th domino.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;YES&rdquo; if the given set of dominoes can be sorted as explained. Next <i>n</i> lines should describe the dominoes in the sorted order, two space-separated numbers in each line. Numbers in the first column should be nondecreasing and numbers in
the second column should be nonincreasing. If there is more than one solution, you may output any of them. In case there is no solution, output &ldquo;NO&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
5 2
6 1
3 4</PRE></TD><TD><PRE CLASS="intable">YES
1 6
2 5
3 4</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
1 5
7 1
3 8
5 6</PRE></TD><TD><PRE CLASS="intable">YES
1 7
1 5
6 5
8 3</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
1 2
3 4</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1744||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A squad consists of <i>n</i> soldiers. Every day exactly three of them must go on duty.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Captain Obvious started to form a duty chart. But suddenly he encountered with the obvious fact that any two soldiers who were on duty together begin to annoy each other. If two soldiers were on duty together for three times, then the fourth co-duty can make them so angry that obviously something really bad would happen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So the Captain wants to make a duty chart for the maximal possible number of days so that any two soldiers would have at most three co-duties. Unfortunately it's far from obvious to the Captain how to do it, so he hopes that you can help him.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an odd integer <i>n</i> (3 &le; <i>n</i> &le; 99).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line should contain one integer <i>k</i>, the maximal number of days in a duty chart. The <i>i</i>-th of the following <i>k</i> lines should contain three space-separated numbers of soldiers that should go on duty on the <i>i</i>-th day. Soldiers are numbered with integers from 1 to <i>n</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3</PRE></TD><TD><PRE CLASS="intable">3
1 2 3
2 3 1
3 1 2</PRE></TD></TR><TR><TD><PRE CLASS="intable">5</PRE></TD><TD><PRE CLASS="intable">10
1 2 3
1 2 4
1 2 5
1 3 4
1 3 5
1 4 5
2 3 4
2 3 5
2 4 5
3 4 5</PRE></TD></TR></TABLE>
______________________________________________________
1745||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Eventually, after running Yet Another Stupendous Supercomputer for &pi; million of years, hedgehogs happen to know Yet Another Answer. This time the Answer they got was quite surprising. Even for hedgehogs who didn't actually know what the Question was.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In fact, the Answer consists of <i>n</i> words. Each word is a nonempty sequence of left and right brackets.
Whilst most of the hedgehogs were rather frustrated with the Answer, Fluffy was happy, because Fluffy likes brackets so much. But most of all he likes regular bracket sequences.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>regular bracket sequence</i> is a sequence of brackets which satisfies the following conditions:
<el>
<li> The sequence contains an equal number of left and right brackets; </li>
<li> The number of right brackets in any prefix of the sequence doesn't exceed the number of left ones. </li>
</el></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fluffy is sure that it's vitally important for the hedgehogs to know what is the longest regular bracket sequence one can make by concatenating the words of the Answer under the following rules:
<el>
<li> Each word can be used at most once; </li>
<li> Words can be used in the arbitrary order. </li>
</el></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Because the Supercomputer is so busy designing its yet more powerful successor, Fluffy hopes you can help him to solve the problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of words in the Answer <i>n</i> (1 &le; <i>n</i> &le; 1000). Each of the next <i>n</i> lines contains one of these words. The total length of all words doesn't exceed 10000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line of the output should contain two space-separated integers <i>l</i> and <i>k</i>, where <i>l</i> is the length of the longest possible regular bracket sequence and <i>k</i> is the number of
words it consists of. The second line should contain <i>k</i> space-separated numbers of used words in the order they should be concatenated. Words are numbered from 1 to <i>n</i> in the order they are given in the input.
If there are several possible answers output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
(
(((
(
))
</PRE></TD><TD><PRE CLASS="intable">4 3
1 3 4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
()
(()
)
</PRE></TD><TD><PRE CLASS="intable">6 3
2 3 1
</PRE></TD></TR></TABLE>
______________________________________________________
1746||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">А point of <i>n</i>-dimensional space is called <i>valid</i> if all its coordinates are integers between 0 and <i>m</i>&nbsp;&minus;&nbsp;1, inclusive. Thus, there are <i>m<sup>n</sup></i> different valid points. A <i>hyperrook</i> can make a <i>move</i> from valid point <i>a</i> to valid point <i>b</i> if <i>a</i> and <i>b</i> differ in exactly one coordinate. For example, (0,2,1) → (2,2,1) → (2,2,0) → (2,1,0) represents a sequence of three moves in three-dimensional space.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A <i>route</i> of length <i>d</i> from point <i>t</i><sub>0</sub> to point <i>t<sub>d</sub></i> is a sequence of valid points <i>t</i><sub>0</sub>, <i>t</i><sub>1</sub>,&nbsp;&hellip;, <i>t<sub>d</sub></i> such that for any <i>i</i>
from {0, 1, &hellip;, <i>d</i>&nbsp;&minus;&nbsp;1} a hyperrook can make a move from point <i>t<sub>i</sub></i> to point <i>t</i><sub><i>i</i>&nbsp;+&nbsp;1</sub>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given integers <i>n</i>, <i>m</i>, <i>d</i>, <i>q</i> and valid points <i>t</i><sub>1</sub>, <i>t</i><sub>2</sub>, &hellip;, <i>t<sub>q</sub></i> you are to find the number of different routes of length <i>d</i>
from <i>t<sub>i</sub></i> to <i>t<sub>j</sub></i> for any pair (<i>i</i>,&nbsp;<i>j</i>) where 1 &le; <i>i</i>, <i>j</i> &le; <i>q</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains five space-separated integers <i>n</i> <nobr>(1 &le; <i>n</i> &le; 50)</nobr>, <i>m</i> <nobr>(2 &le; <i>m</i> &le; 10<sup>5</sup>)</nobr>, <i>d</i> <nobr>(0 &le; <i>d</i> &le; 10<sup>9</sup>)</nobr>, <i>p</i> <nobr>(1 &le; <i>p</i> &le; 10<sup>9</sup>)</nobr> and <i>q</i> <nobr>(2 &le; <i>q</i> &le; 50)</nobr>. Next <i>q</i> lines contain coordinates of points <i>t<sub>i</sub></i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>q</i> lines each containing <i>q</i> space-separated integers.
The <i>j</i>-th number in the <i>i</i>-th line should be equal to the number of different routes of length <i>d</i> from <i>t<sub>i</sub></i> to <i>t<sub>j</sub></i> modulo <i>p</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 8 4 10000000 4
3 5
0 5
3 7
0 0</PRE></TD><TD><PRE CLASS="intable">896 720 720 560
720 896 560 720
720 560 896 560
560 720 560 896</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3 4 10000000 3
0 2 2
1 1 1
1 2 2</PRE></TD><TD><PRE CLASS="intable">90 36 45
36 90 54
45 54 90</PRE></TD></TR></TABLE>
______________________________________________________
1747||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A long time ago there was a King in Three-binary Kingdom&hellip; He had a few years left to live and he decided to make one last journey around his kingdom to see what was going on there.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kingdom had <i>n</i> towns and each pair of them was connected by exactly one bidirectional road. One of the towns was a capital where the King lived.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The King was very old and his memory often played a bad joke with him. That was why the King decided to make a journey. He was going to visit each town exactly twice, just in case. His journey should begin and end at the capital.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">While the King had been choosing the best option for the journey, he encountered an interesting question: how many different routes for the journey exists so that each of the earlier mentioned conditions is met?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two space-separated integers <i>n</i> and <i>p</i> (3 &le; <i>n</i> &le; 10<sup>5</sup>; 1 &le; <i>p</i> &le; 10<sup>9</sup> + 7).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the answer for the King's question modulo <i>p</i>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 123</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 123</PRE></TD><TD><PRE CLASS="intable">30</PRE></TD></TR></TABLE>
______________________________________________________
1748||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us define a <i>complexity</i> of an integer as the number of its divisors. Your task is to find the most complex integer in range from 1 to <i>n</i>. If there are many such integers, you should find the minimal one.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of testcases <i>t</i> (1 &le; <i>t</i> &le; 100). The <i>i</i>-th of the following <i>t</i> lines contains one integer <i>n<sub>i</sub></i> <nobr>(1 &le; <i>n<sub>i</sub></i> &le; 10<sup>18</sup>)</nobr>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each testcase output the answer on a separate line. The <i>i</i>-th line should contain the most complex integer in range from 1 to <i>n<sub>i</sub></i> and its complexity, separated with space.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
1
10
100
1000
10000
</PRE></TD><TD><PRE CLASS="intable">1 1
6 4
60 12
840 32
7560 64
</PRE></TD></TR></TABLE>
______________________________________________________
1749||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let <i>S</i>(<i>t</i>) be the sum of integers represented by all substrings of the decimal representation of <i>t</i>.
For example, <i>S</i>(1205) = 1 + 2 + 0 + 5 + 12 + 20 + 05 + 120 + 205 + 1205 = 1575. 
Note that some substrings can have leading zeros. Let <i>F</i>(<i>t</i>,&nbsp;<i>k</i>) be the number which decimal representation is obtained by repeating 
the decimal representation of <i>t</i> <i>k</i> times.
For example, <i>F</i>(1205,&nbsp;3) = 120512051205.
Given numbers <i>p</i>, <i>k</i> and <i>m</i>, calculate <i>S</i>(<i>F</i>(<i>p</i>,&nbsp;<i>k</i>)) modulo <i>m</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains one integer <i>p</i> (1 &le; <i>p</i> &lt; 10<sup>100000</sup>). The second line contains two space-separated integers <i>k</i> and <i>m</i> (1 &le; <i>k</i>, <i>m</i> &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the answer on a single line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1205
3 999999999</PRE></TD><TD><PRE CLASS="intable">847123538</PRE></TD></TR></TABLE>
______________________________________________________
1750||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pakhom stands at the point <i>S</i> and wants to reach the point <i>T</i> to buy the land there. But he noticed a gully, which represents a polyline <i>ABC</i>. What is the length of the shortest path Pakhom should walk if he doesn't want to fall into the gully?</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of testcases <i>n</i> (1 &le; <i>n</i> &le; 5000). Each of the next <i>n</i> lines contains one testcase. Each testcase is written as 10 space-separated integers: <i>x<sub>S</sub></i>, <i>y<sub>S</sub></i>, <i>x<sub>T</sub></i>, <i>y<sub>T</sub></i>, <i>x<sub>A</sub></i>, <i>y<sub>A</sub></i>, <i>x<sub>B</sub></i>, <i>y<sub>B</sub></i>, <i>x<sub>C</sub></i>, <i>y<sub>C</sub></i>, the coordinates of the points <i>S</i>, <i>T</i>, <i>A</i>, <i>B</i>, and <i>C</i>, respectively. All points within the test case are different. Points <i>S</i> and <i>T</i> don't belong to the polyline <i>ABC</i>. All numbers in test cases don't exceed 10 by absolute value.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output the answer on a separate line. The answer should be precise up to 10<sup>&minus;6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
1 2 5 6 4 4 5 2 1 6
2 2 4 3 1 3 3 3 3 1
2 1 4 4 3 2 4 3 1 4</PRE></TD><TD><PRE CLASS="intable">8.000000
3.650282
3.828427</PRE></TD></TR></TABLE>
______________________________________________________
1751||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Prof. W. Booster, a famous Galactic Institute professor, continues his work on the Ultimate Improbability Theory. Currently, it consists of <i>n</i> hypotheses. Some of them are based on other hypotheses of the Theory. Like any other theory which deals with Improbability effects, Booster's one is extremely complicated so there's nothing surprising about the fact that cause-and-effect relations between the hypotheses can form cycles.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After several desperate, but still rather unsuccessful attempts to explain results of the very last experiment by means of the Theory, the professor began to suspect that something must be definitely wrong with some of the hypotheses.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To search for mistakes in the Improbability Theory Prof. Booster constructed a special computer which allows to determine in <i>t<sub>i</sub></i> seconds whether <i>i</i>-th hypothesis is <i>admissible</i>. The computer can check hypotheses in any order but no more than one at a time. The professor also managed to compute the probabilities <i>p<sub>i</sub></i> of the <i>i</i>-th hypothesis being admissible. It is known that the admissibility of any hypothesis doesn't depend in any way on the admissibility of any other hypothesis.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The professor considers a hyphothesis <i>correct</i> if it's admissible and all of the hypotheses it is (directly or indirectly) based upon are admissible too. Now Prof. Booster is going to positively identify which of hypotheses are correct and which are not. Help him to calculate the expected time it will take if the checking process would be organized in an optimal way.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of hypotheses in the Improbability Theory <i>n</i> <nobr>(1 &le; <i>n</i> &le; 500)</nobr>. Next <i>n</i> lines describe hypotheses. The <i>i</i>-th of these lines starts with three numbers <i>t<sub>i</sub></i> <nobr>(1 &le; <i>t<sub>i</sub></i> &le; 1000)</nobr>, <i>p<sub>i</sub></i> <nobr>(0.0001 &le; <i>p<sub>i</sub></i> &le; 0.9999)</nobr>, and <i>k<sub>i</sub></i> <nobr>(0 &le; <i>k<sub>i</sub></i> &lt; <i>n</i>)</nobr>, followed by <i>k<sub>i</sub></i> different numbers of hypotheses the <i>i</i>-th hypothesis is directly based upon. No hypothesis is directly based upon itself. Hypotheses are numbered with integers from 1 to <i>n</i>. All <i>t<sub>i</sub></i> are integers.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the expected time required to determine the correctness of every hypothesis. The answer must be accurate up to 10<sup>&minus;3</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
5 0.3 1 2
6 0.99 0
2 0.2 1 4
2 0.2 0</PRE></TD><TD><PRE CLASS="intable">13.350</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 0.5 1 2
2 0.5 1 3
3 0.5 1 1</PRE></TD><TD><PRE CLASS="intable">2.750</PRE></TD></TR></TABLE>
______________________________________________________
1752||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Consider a tree consisting of <i>n</i> vertices. A <i>distance</i> between two vertices is the minimal number of edges in a path connecting them. Given a vertex <i>v<sub>i</sub></i> and distance <i>d<sub>i</sub></i> find a vertex <i>u<sub>i</sub></i> such that distance between <i>v<sub>i</sub></i> and <i>u<sub>i</sub></i> equals to <i>d<sub>i</sub></i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of vertices <i>n</i> <nobr>(1 &le; <i>n</i> &le; 20000)</nobr> and the number of queries <i>q</i> <nobr>(1 &le; <i>q</i> &le; 50000)</nobr>.
Each of the following <i>n</i>&nbsp;&minus;&nbsp;1 lines describes an edge and contains the numbers of vertices connected by this edge. 
Vertices are numbered from 1 to <i>n</i>. The next <i>q</i> lines describe the queries. Each query is described by a line containing two numbers <i>v<sub>i</sub></i> <nobr>(1 &le; <i>v<sub>i</sub></i> &le; <i>n</i>)</nobr> and <i>d<sub>i</sub></i> <nobr>(0 &le; <i>d<sub>i</sub></i> &le; <i>n</i>)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should output <i>q</i> lines. The <i>i</i>-th line should contain a vertex number <i>u<sub>i</sub></i>, the answer to the <i>i</i>-th query. If there are several possible answers, output any of them. If there are no required vertices, output 0 instead.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9 10
1 8
1 5
1 4
2 7
2 5
3 6
5 9
6 9
5 4
8 1
4 3
2 4
9 3
1 1
5 2
3 5
6 4
7 3
</PRE></TD><TD><PRE CLASS="intable">0
1
2
3
4
5
6
7
8
9
</PRE></TD></TR></TABLE>
______________________________________________________
1753||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A bookshelf has length <i>L</i> and borders of height <i>h</i>. A book of
height <i>H</i> is standing vertically at its left side. Bibliophile gnomes
want to drop the book onto the shelf. For that, they pull the lower edge of the
book to the right along the surface of the shelf. The left side of the
book remains leaning on the left border of the shelf. The gnomes pull the book
until it lies horizontally on the shelf. However, the gravity may get in their
way: if the center of the book gets too far beyond the left edge of the shelf, the
book may overturn and fall to the floor.
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us assume that the book, shelf, and borders of the shelf have zero width.
It is required to find how far to the left the center of the book can get
in the process of the motion.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integers <i>h</i>, <i>H</i>, and <i>L</i>
(1 &le; <i>h</i> &lt; <i>H</i> &lt; <i>L</i> &le; 1000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the value of the maximal displacement to the left of the center of the
book with respect to the left side of the shelf
accurate up to at least 10<sup>&minus;5</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 120 200</PRE></TD><TD><PRE CLASS="intable">39.850361</PRE></TD></TR></TABLE>
______________________________________________________
1754||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lich Sandro is standing on the floor of a triangular pyramid at the point
(<i>x</i><sub>0</sub>, <i>y</i><sub>0</sub>, 0).
The vertices of the pyramid have coordinates
<nobr>(<i>x</i><sub>1</sub>, <i>y</i><sub>1</sub>, 0)</nobr>,
<nobr>(<i>x</i><sub>2</sub>, <i>y</i><sub>2</sub>, 0)</nobr>,
<nobr>(<i>x</i><sub>3</sub>, <i>y</i><sub>3</sub>, 0)</nobr>,
<nobr>(<i>x</i><sub>4</sub>, <i>y</i><sub>4</sub>, <i>H</i>)</nobr>.
He wants to fly to the point
(<i>x</i><sub>0</sub>, <i>y</i><sub>0</sub>, <i>h</i>)
and create a spherical force field centered at that point. A rise to the height
<i>z</i> takes <i>z</i> units of mana. Creating a field of radius <i>r</i> takes
<i>r</i> units of mana. If the force field has at least one common point with
the walls or floor, then the pyramid collapses. Initially Sandro has <i>m</i> units of mana.
Is this amount sufficient to break the pyramid with a force field?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>m</i>, <i>h</i>, <i>H</i>
(1 &le; <i>m</i>, <i>h</i>, <i>H</i> &le; 1000).
In the following five lines, you are given the integers
<i>x</i><sub><i>i</i></sub>, <i>y</i><sub><i>i</i></sub>,
where 0 &le; <i>i</i> &le; 4
(&minus;1000 &le; <i>x</i><sub><i>i</i></sub>, <i>y</i><sub><i>i</i></sub> &le; 1000).
The point (<i>x</i><sub>0</sub>, <i>y</i><sub>0</sub>, <i>h</i>)
lies strictly inside the pyramid.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output &ldquo;YES&rdquo; if Sandro can break the pyramid with a force field,
otherwise output &ldquo;NO&rdquo;.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">13 6 30
6 6
0 0
0 30
30 0
0 0</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">11 6 30
6 6
0 0
0 30
30 0
0 0</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1755||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Karlsson and Little Boy have found a cake in the fridge. It is written on the
box that the cake consists of <i>n</i> grams of cream, <i>m</i> grams of
chocolate, and other ingredients. The friends want to divide the cake between them
and eat it right there.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Little Boy is going to cut the cake into two pieces, and then Karlsson will
choose the piece that he thinks is more delicious. Little Boy agrees with this
method of dividing, because his and Karlsson's tastes differ and so he
can cut the cake in such a way that he would get a piece that is not so bad. In addition,
Karlsson is so kind that if the two pieces seem equally delicious to him then he
will let Little Boy choose.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a piece of cake contains <i>x</i> grams of cream and
<i>y</i> grams of chocolate, then Little Boy evaluates the deliciousness of this
cake by the number
<i>a</i><sub>1</sub>&middot;<i>x</i> + <i>b</i><sub>1</sub>&middot;<i>y</i>.
Karlsson evaluates the same piece by the number
<i>a</i><sub>2</sub>&middot;<i>x</i> + <i>b</i><sub>2</sub>&middot;<i>y</i>.
Given the coefficients <i>a</i><sub>1</sub>, <i>b</i><sub>1</sub>,
<i>a</i><sub>2</sub>, <i>b</i><sub>2</sub>, tell Little Boy how to cut the cake
so that he would get as delicious piece of cake as possible. Little Boy can cut off
a piece containing any amount of cream and any amount of chocolate
but, of course, no more than there is in the whole cake.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>a</i><sub>1</sub>,
<i>b</i><sub>1</sub>, <i>a</i><sub>2</sub>, <i>b</i><sub>2</sub>
(0 &le; <i>a</i><sub><i>i</i></sub>, <i>b</i><sub><i>i</i></sub> &le; 100).
The second line contains the integers
<i>n</i> and <i>m</i> (0 &le; <i>n</i>, <i>m</i> &le; 1000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the mass of cream and the mass of chocolate in one of the pieces
into which Little Boy should cut the cake accurate to 10<sup>&minus;8</sup>.
It does not matter who will get this piece. If there are several optimal
answers, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 2 3 2
400 300
</PRE></TD><TD><PRE CLASS="intable">300.00000000 0.00000000</PRE></TD></TR></TABLE>
______________________________________________________
1756||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vitya Perestukin is solving the following problem:
<i>Three diggers can dig a trench in exactly one day. How many diggers are
needed to dig the same trench in exactly two days?</i>
Vitya has concluded that one and a half diggers are needed. 
But there can't be such an answer.
Actually, two diggers are needed: on the first day only one digger will work,
and on the second day they both will work.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that <i>m</i> diggers can dig a trench in exactly <i>d</i><sub>1</sub>
days if they all work every day. Help Vitya compile a work schedule according to
which a minimal number of diggers can dig a trench in exactly <i>d</i><sub>2</sub> days.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integers
<i>m</i>, <i>d</i><sub>1</sub>, and <i>d</i><sub>2</sub>
(1 &le; <i>m</i>, <i>d</i><sub>1</sub>, <i>d</i><sub>2</sub> &le; 10&nbsp;000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the only line output <i>d</i><sub>2</sub> integers, which are the numbers of
diggers that should work on each of the days so that the trench will be dug in
time. It is possible that on some days (including the last day) nobody will work.
If there are several solutions, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 1 2</PRE></TD><TD><PRE CLASS="intable">1 2</PRE></TD></TR></TABLE>
______________________________________________________
1757||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mary is a storekeeper at a jewelry factory. Her computer keeps track of the
remainders of batches of gold bars. The weight and fineness (the content of gold
in 1 kilogram of alloy measured in grams) is known for each gold bar.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A foundry worker comes to Mary and tells that he needs to cast a bar of
fineness <i>p</i> and weight <i>m</i> grams. He can take from the storehouse
any part of any bar for his purpose.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write a program for automatizing this operation.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>n</i>, <i>m</i>, and <i>p</i> (1 &le; <i>n</i>
&le; 1000; 1 &le; <i>m</i> &le; 1&nbsp;000&nbsp;000; 0 &le; <i>p</i>
&le; 1000). The following <i>n</i> lines describe the gold bars at the
storehouse, one bar per line. The description of a bar contains its weight
<i>m</i><sub><i>i</i></sub> in grams and its fineness <i>p</i><sub><i>i</i></sub>
(<nobr>1 &le; <i>m</i><sub><i>i</i></sub> &le; 1000;</nobr> <nobr>0 &le; <i>p</i><sub><i>i</i></sub> &le; 1000</nobr>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is possible to satisfy the worker's requirement, output 
&ldquo;YES&rdquo; in the first line. In the following <i>n</i> lines  
specify the numbers <i>x<sub>i</sub></i>, one per line, which are the 
weights in grams of the parts that should be taken from each bar. 
Output these numbers with the maximal possible accuracy. 
The answer will be considered correct if the following conditions will be 
satisfied:</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there are several ways to cast a required bar, output any of them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to satisfy the worker's requirement, output &ldquo;NO&rdquo;
in the only line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 150 750
100 1000
150 585
100 750
100 0
</PRE></TD><TD><PRE CLASS="intable">YES
75.000000000
0.000000000
50.000000000
25.000000000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 100 1000
200 0</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1758||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Travis wanted to relax and took a walk round the town's pubs.
Sitting at the first pubs, he realized that walking round the pubs one
after another was not interesting at all, so he numbered all the pubs
in the town from 1 to <i>n</i> starting from the pub he was sitting in
and decided to move from one pub to another only if the number of one of them
divided the number of the other. Naturally, Travis wanted to know how many pubs
he could visit if he followed this rule and didn't visit any pub more than
once.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Why would Travis be up to such a strange amusement? The point is that he
is a louse living on the head of the eccentric mathematician Professor Pilgarlic.
Help Professor and his little friend answer the intriguing question.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the number <i>n</i>&nbsp; of pubs in the town
(2 &le; <i>n</i> &le; 50).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the maximal number of pubs Travis can visit. In the
second line, output the numbers of these pubs separated with a space
in the order of visiting. Remember that the route must start at the first pub.
If there are several solutions, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">9</PRE></TD><TD><PRE CLASS="intable">7
1 9 3 6 2 4 8</PRE></TD></TR></TABLE>
______________________________________________________
1759||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">British scientists have compiled a list of holders of the title
&ldquo;the oldest person currently alive.&rdquo; For each of the long-livers,
this list contains their date of birth and the period during which they were
the oldest person alive in the world. Unfortunately, the list does not mention
which of the long-livers lived the longest life, but it is not so difficult
to determine such a person by the given data.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of
long-livers in the list (1 &le; <i>n</i> &le; 100). The list is given in the
following <i>n</i> lines in the form of triples of dates <i>d</i><sub>1</sub>,
<i>d</i><sub>2</sub>, <i>d</i><sub>3</sub>, where <i>d</i><sub>1</sub> is the
date of birth of a long-liver, <i>d</i><sub>2</sub> is the date starting from
which this person was the oldest person alive in the world, and
<i>d</i><sub>3</sub> is the date of death of this person. All the dates are
given in the format &ldquo;dd.mm.yyyy&rdquo; and lie in the range from
01.01.1800 to 31.12.2009 (the British scientists use the Gregorian calendar).
The dates in one line are separated by exactly one space. It is known that the
date <i>d</i><sub>2</sub> is always greater than the date <i>d</i><sub>1</sub>,
and <i>d</i><sub>3</sub> is greater than <i>d</i><sub>2</sub>. The date
<i>d</i><sub>2</sub> always coincides with the date <i>d</i><sub>3</sub> from
the preceding line of the list. All the dates of birth and all the dates of
death are different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of the long-liver from the list who lived longer than the
others. The lifetime should be measured in days, including both the day of
birth and the day of death. The number of the long-liver must lie in the range
from 1 to <i>n</i>. If there are several long-livers holding the record, output
the number of the person who died earlier.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
10.10.1873 27.12.1987 11.01.1988
18.11.1874 11.01.1988 14.02.1991
21.02.1875 14.02.1991 04.08.1997
29.08.1880 04.08.1997 16.04.1998
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the Gregorian calendar, 
the length of a non-leap year is 365 days and the length of a leap year
is 366 days. Whether a year is a leap year is determined by the following rule:
<ul>
<li>A year with a number divisible by 4 is a leap year.</li>
<li>Further, a year with a number divisible by 100 is, by way of exception, a non-leap year.</li>
<li>Further, a year with a number divisible by 400 is still a leap year.</li>
</ul></DIV></DIV>
______________________________________________________
1760||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Railwaymen Vassily and Pyotr died and were sent to Hell. Their first punishment
was to perform a complete inspection of the Moscow&ndash;Vladivostok railroad.
They spent many weeks walking along the railroad together, one of them along the
left rail and the other along the right rail, writing the long serial numbers
of ties to their thick notebooks. As soon as they finished that infernal task,
they immediately got a new task, which was even more meaningless. Now they had
to count the number of pairs of ties that were written in Vassily's notebook on
the same page and in Pyotr's notebook on different pages.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The friends came to you in a dream and asked you to save them from that
terrible torment.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains integers <i>a</i>, <i>b</i>, <i>n</i>
(1 &le; <i>a</i>, <i>b</i> &le; <i>n</i> &le; 25&nbsp;000&nbsp;000).
One page in Vassily's notebook comprises <i>a</i> numbers of ties,
and one page in Pyotr's notebook comprises <i>b</i> numbers of ties.
They have written numbers of <i>n</i> ties. All these numbers are
different and are written in their notebooks in the same order.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one number, which is the answer to the problem.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 4 10</PRE></TD><TD><PRE CLASS="intable">4</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 4 10</PRE></TD><TD><PRE CLASS="intable">0</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let the ties in the first sample be numbered by the letters from A to&nbsp;J.
Then the following four pairs satisfy the condition:
(D,&nbsp;E), (D,&nbsp;F), (G,&nbsp;I), (H,&nbsp;I).
</DIV></DIV>
______________________________________________________
1761||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let an integer <i>n</i> be given. Write the integers from 1 to <i>n</i> in
binary notation successively from left to right. In the resulting string
consisting of zeros and ones, choose a palindrome substring of maximal length.
It is required to find the length of this substring.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integer <i>n</i> in binary notation
(1 &le; <i>n</i> &le; 2<sup>1&nbsp;000&nbsp;000</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one line containing the required length.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">101
</PRE></TD><TD><PRE CLASS="intable">5</PRE></TD></TR><TR><TD><PRE CLASS="intable">10100
</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first sample, the string 11<u>01110</u>0101
will be written (a variant of the longest palindrome is underlined).</DIV></DIV>
______________________________________________________
1762||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Scooby-Doo is fond of adventures. This time he wanted to find a hiding-place in
a vampire castle. After a long search, Scooby ended up in a huge rectangular
hall with four entrances, one in each corner, through one of which he had
entered. The floor was paved with white square tiles. Scooby thought that the
hiding-place was under one of these tiles. He started searching for it by
turning the tiles over, the grey side up. He began his search from a corner
moving at an angle of 45&deg; to the walls. Each time he came to a wall,
he made a 90&deg; turn. If he stepped on a grey tile, he turned it back the white
side up. The search went on until Scooby reached an entrance at one of the
corners. Then, not having found the hiding-place, the tired dog sighed and went
out to have a snack.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the dimensions of the hall, calculate the total
number of tiles that were turned the grey side up at the end of the search.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains integers <i>n</i> and <i>m</i> separated with a space.
They are the length and width of the hall measured in tiles
<nobr>(2 &le; <i>n</i>, <i>m</i> &le; 1&nbsp;000&nbsp;000)</nobr>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the only line output the number of grey tiles in the hall after Scooby-Doo's
search.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7 5
</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 3</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1763||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A flea has jumped onto a round table used in the popular quiz &ldquo;What? Where?
When?&rdquo; In this quiz, the questions are put inside envelopes lying on the
sectors of the round table. A panel of experts has to answer questions chosen
by a roulette pointer from those lying on the table. The flea wants to read all
the questions in advance and thus have more time to find the answers.
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The round table is divided into <i>n</i> sectors numbered clockwise from 1 to <i>n</i>.
The flea has jumped onto the first sector. From this sector it can either run
to an adjacent sector or jump across two sectors (for example, if the table is
divided into 12 sectors, then in one move the flea can get to sectors 2, 4, 10,
and 12). The flea wants to visit each sector exactly once and return to the
first sector, from which it will jump down to the floor and run away to think
about the questions. Find the number of ways in which the flea can complete its
journey.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the number <i>n</i> of the sectors of the round table
<nobr>(6 &le; <i>n</i> &le; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of ways to visit each of the sectors exactly once
and return to the first sector modulo 10<sup>9</sup>&nbsp;+&nbsp;9.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6</PRE></TD><TD><PRE CLASS="intable">12</PRE></TD></TR></TABLE>
______________________________________________________
1764||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The route of the Moscow&ndash;Vladivostok &ldquo;Rossiya&rdquo; passenger train is considered to be the main route of the Trans-Siberian Railway. Its itinerary includes
Nizhny Novgorod, Kirov, Perm, and Yekaterinburg. The train goes from Moscow to
Yekaterinburg in 25 h 41 min. The &ldquo;Ural&rdquo; train follows the southern line of
the Trans-Siberian Railway through Kazan and completes the journey in 25 h 25
min. It is impossible to go by train from Moscow to Yekaterinburg in a shorter
time.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This is the scheme of the railroads between Moscow (M) and
Yekaterinburg (Y). It is seen that the routes of the trains
&ldquo;Rossiya&rdquo; (the upper line in the scheme) and &ldquo;Ural&rdquo; (the lower line) are
crossed by major rivers: Volga, Vyatka, and Kama. The former train crosses them
at Nizhny Novgorod (1), Kotelnich (2), and Perm (3), respectively. The latter
train crosses the rivers in 35 km west of Kazan (4), in Vyatskie Polyany (5),
and in Sarapul (6). The scheme also shows direct lines connecting some of these
cities.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In addition to passenger trains, there are also goods trains following these
railroads. They can take one of the four routes:

<ol>
<li> Moscow &ndash; Nizhny Novgorod &ndash; Kotelnich &ndash; Sarapul &ndash; Yekaterinburg</li>
<li> Moscow &ndash; Kazan &ndash; Vyatskie Polyany &ndash; Sarapul &ndash; Yekaterinburg</li>
<li> Moscow &ndash; Kazan &ndash; Kotelnich &ndash; Perm &ndash; Yekaterinburg</li>
<li> Moscow &ndash; Nizhny Novgorod &ndash; Vyatskie Polyany &ndash; Perm &ndash; Yekaterinburg</li>
</ol></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Minister of Railway Transport wants to organize the goods train service in such
a way that the freight flow from Moscow to Yekaterinburg be as much as
possible. He knows that the bridges across the rivers shown in the scheme are
the &ldquo;bottlenecks&rdquo; for the trains. For each bridge, the carrying capacity is
known, i.e., the amount of freight that can be taken through the bridge in a
day. Help the minister solve the problem.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the carrying capacities of the bridges in Nizhny
Novgorod, in Kotelnich, in Perm, near Kazan, in Vyatskie Polyany, and in
Sarapul. These are integers in the range from 1 to 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the daily amount of freight sent from Moscow along each of the
routes specified above so that the total freight flow from Moscow to
Yekaterinburg be maximal. Output these four numbers accurate to 10<sup>&minus;3</sup>,
separating them with a space. If the problem has several solutions, output any
of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">70 30 60 100 20 50
</PRE></TD><TD><PRE CLASS="intable">20.000 10.000 10.000 10.000
</PRE></TD></TR></TABLE>
______________________________________________________
1765||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Experienced participants of the Ural Championship come to Yekaterinburg in
advance to get accustomed to the severe weather conditions, walk around the
city, and, of course, visit the &ldquo;Limpopo&rdquo; Water Park. Not many people know
that there is Plant No. 404 near the water park, and this plant is called
&ldquo;Error 404&rdquo; by the locals. The plant is not easy to find indeed, and it is
still more difficult to learn what is happening there. Fortunately, one can
watch the plant from a nearby pedestrian bridge. Because of the seeming
stillness and desolation of the plant, one may think that it is out of
operation, but this is not so. The main work area of the plant is the repair of
aviation engines.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Some time ago the plant received an order to repair a broken gas turbine
engine. It turned out that some blades were torn off, which resulted in an
excess load on the engine shaft. Experts at the plant have decided that the
engine could be repaired quickly by removing some of the intact blades so that
the center of masses of the remaining blades would be on the rotation axis once
again. To keep the engine power as large as possible, a minimum number of
blades should be removed. At least one blade must be left, otherwise the engine
would not work at all. The experts assert that when all the blades were intact
their endpoints formed a regular <nobr><i>n</i>-gon</nobr>. Tell them which blades should be
removed.
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the initial number of blades in the turbine <i>n</i>
and the number of torn blades <i>k</i> (<nobr>3 &le; <i>n</i> &le; 20000;</nobr> <nobr>1 &le; <i>k</i> &le; <i>n</i> &minus; 1</nobr>).
The integer <i>n</i> has at most two distinct prime divisors. The next line
contains <i>k</i> integers, which are the numbers of the torn blades in ascending
order. The blades are numbered from 1 to <i>n</i> clockwise.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimum number of blades that should
be removed. In the second line output the numbers of these blades in any order
separated with a space. If several answers are possible, output any of them. If
it is impossible to repair the engine by removing some of the blades,
output &ldquo;&minus;1&rdquo;.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12 3
3 4 12
</PRE></TD><TD><PRE CLASS="intable">2
8 9
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 1
1
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR></TABLE>
______________________________________________________
1766||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_right">'Twas brillig, and the slithy toves<br>
Did gyre and gimble in the wabe;<br>
All mimsy were the borogoves,<br>
And the mome raths outgrabe.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Humpty Dumpty is an unpredictable creature. As soon as he helped Alice
understand the poem about the Jabberwock, he ran away to chase borogoves. Alice
met him at the d6 square, and since that time she has come to the eighth rank
and become a queen, but Humpty Dumpty still hasn't been seen by anyone. As many
as 100<sup>100<sup>100</sup></sup> days passed since their talk (or, maybe, 100<sup>100<sup>100</sup></sup>
years&mdash;time flies very fast in the Looking-Glass world). Determine the
probabilities of Humpty Dumpty being on the squares of the Looking-Glass world.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that every second Humpty Dumpty moved from the square he was on to
one of the adjacent squares (squares are adjacent if they share at least one
vertex). The probability of Humpty Dumpty moving to a square is proportional to
the number of borogoves on it.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input data are eight lines containing eight integers each. The integers are
the numbers of borogoves on the squares of the Looking-Glass world. The first
line describes the first rank (squares from a1 to h1) and the last line
describes the last rank (squares from a8 to h8). There are at least one and at
most 1000 borogoves on each square of the Looking-Glass world.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output eight lines containing eight numbers each. The numbers should be the
probabilities of finding Humpty Dumpty on the squares of the Looking-Glass
world. The squares must be described in the order in which they are given in
the input. The numbers must be accurate to at least 10<sup>&minus;12</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
</PRE></TD><TD><PRE CLASS="intable">0.007 0.012 0.012 0.012 0.012 0.012 0.012 0.007
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.012 0.019 0.019 0.019 0.019 0.019 0.019 0.012
0.007 0.012 0.012 0.012 0.012 0.012 0.012 0.007
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The answer in the sample is incorrect, because the numbers in it are
given with insufficient accuracy.</DIV></DIV>
______________________________________________________
1767||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mr. X is very fond of the novel &ldquo;The House of Doctor Dee&rdquo;, which is set in
London in the 16th century and in the end of the 20th century. Rereading the
novel once again, Mr. X decided to draw a map of London with routes of the
protagonists Dr. Dee and Matthew Palmer. Dr.Dee, who lived in the 16th
century, often traveled from  his house to St. Paul's Cathedral, and Matthew,
who lived in the 20th century, regularly walked from the National Gallery to
the British Museum.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every time it turned out that the protagonists were at the same point in
London, Dr. Dee had visions about what was happening to Matthew at that moment.
Such moments were often enough, and Mr. X decided to draw the motion
trajectories of Dr. Dee and Matthew in such a way that their common part be as
long as possible. However, Mr. X is not very good at the topography of London.
He assumes that the city is built by a rectangular scheme—each street
stretches through the whole city either from west to east or from north to
south. The house of Dr. Dee, St. Paul's Cathedral, the National Gallery, and
the British Museum are located exactly at the intersections of two orthogonal
streets. Moreover, Mr. X is sure that Dr. Dee and Matthew always took one of
the shortest possible routes.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Though London is very big, Mr. X has already drawn its map. He has also marked
Dr. Dee's house, St. Paul's Cathedral, the National Gallery, and the British
Museum on the map. It now remains to draw the required routes.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains coordinates of Dr. Dee's house separated
with a space. The following lines contain the coordinates of St. Paul's
Cathedral, the National Gallery, and the British Museum in the same format. All
the coordinates are integers with absolute values not exceeding 10<sup>9</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximum length of the path that Dr. Dee and Matthew
Palmer's routes can have in common.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 2
4 4
5 5
3 3
</PRE></TD><TD><PRE CLASS="intable">2</PRE></TD></TR></TABLE>
______________________________________________________
1768||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A growing number of people accept nowadays the theory of strings and
superstrings and of the mirror world. One of the most interesting objects of
study within this theory is circular strings. They can be used for traveling
between worlds: flying through the ring of such a string, an observer finds
himself in the mirror world, which can have entirely different stars, galaxies,
and, possibly, life. The traveler can return to his world by flying backward
through the same or any other circular string. Unfortunately, superstrings are
unstable. Gradually losing their energy, they contract and eventually explode
when their diameter decreases to the diameter of an elementary particle. Which
means that a travel to the mirror world is potentially dangerous.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Circular strings also have a practical application. They can be used to draw
any regular polygon without ruler or compasses. For this, a string should be
made to oscillate exactly in a plane at one of its resonance frequencies. In
this situation, several points of the string stay fixed. According to the
theory, these points are vertices of the required polygon. Physicists have just
made such an experiment and now ask you to analyze the results.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given <i>n</i> pairs of real numbers. The physicists claim that these are
the coordinates of vertices of a nondegenerate <i>n</i>-gon written in the traversal
order.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (3 &le; <i>n</i> &le; 100). The <i>i</i>-th
of the following <i>n</i> lines contains real numbers <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i> separated with
a space (0 &le; <i>x<sub>i</sub></i>, <i>y<sub>i</sub></i> &le; 1); these numbers are the coordinates of the
<i>i</i>-th point. The coordinates of different points may coincide, but it is
guaranteed that there exists at least one pair of points at a distance of at
least 0.3. The coordinates are given with accuracy of at least 10<sup>&minus;10</sup>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the experiment didn't produce vertices of a regular <i>n</i>-gon in
the traversal order, output “NO”. Otherwise,
output “YES”. It is guaranteed that in the case of the negative
answer the coordinates of the points can't be changed by less than 10<sup>&minus;5</sup> so
that they become the coordinates of vertices of a regular <i>n</i>-gon written in
the traversal order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 0
1 0
1 1
0 1
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
0 0
1 0
0.5 1
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1769||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to a tale, in the sacred Indian city of Benares, beneath a temple
that marked the center of the world, Brahma put three diamond needles and
placed 64 gold disks on them. Priests of the temple are busy transferring the
disks from needle to needle. It is believed that the world will perish as soon
as the task is done.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Another legend is known in Ural. It is said that a monastery is lost in woods
at the boundary of Europe and Asia, where the mythical stone flower grew. The
monks who live there are doomed to write positive integers on parchment until
the Last Judgement. Nobody knows when and where they started this work. There
is a legend among monks that when the monastery had been built its first abbot
was visited in his dream by the Archangel Gabriel, who showed a stone on the
slopes of the Ural mountains where a string of digits was carved. Gabriel
ordered to write all the integers starting from the smallest integer that was
not a substring of that string. If this legend is true, which integer was
written by the monks first?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the nonempty string consisting of decimal digits carved on the
stone. The length of the string does not exceed 10<sup>5</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the positive integer that is the first number written by the
monks.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10123456789
</PRE></TD><TD><PRE CLASS="intable">11</PRE></TD></TR></TABLE>
______________________________________________________
1770||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Because of the coming election to the Regional Duma, all the billboards along
the roads in Yekaterinburg have been replaced. They are now agitating for the
Party of Ural Champions. There are <i>n</i> intersections in Yekaterinburg, and some
of them are connected by two-way roads. Any two intersections are connected by
a sequence of such roads. There can be at most one billboard on any road
connecting two intersections. Each billboard faces one side only, which means
that the agitation can be seen by drivers moving in only one of the two
directions.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Party of Ural Champions has presented a report to the election committee,
in which it has given information on the campaign materials. In particular, for
each pair of intersections the report specifies the minimum number of times a
car driver will see the agitation when driving from the first of these
intersection to the second regardless of the route he would take.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Chairman of the Regional Election Committee suspects that there is an error in
the report, because there is no configuration of roads and no arrangement of
billboards corresponding to the given data. Your task is to verify this
assertion.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (2 &le; <i>n</i> &le; 300). In each of the
following <i>n</i> lines you are given <i>n</i> integers separated with a space. The
number in the <i>i</i>-th line at the <i>j</i>-th position is equal to the minimum number of times a car driver will see the agitation when driving from the <i>i</i>-th
intersection to the <i>j</i>-th intersection. All the integers in this table are in
the range from 0 to <i>n</i>&nbsp;&minus;&nbsp;1. All the numbers on the main diagonal are zeros.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is a configuration of roads and billboards that
corresponds to the data in the report, then output “YES” in the
first line. Then output <i>n</i> lines containing <i>n</i> symbols each. In the <i>i</i>-th
line at the <i>j</i>-th position output
<ul>
<li> “0” if the <i>i</i>-th and the <i>j</i>-th intersections are not connected by a road;</li>
<li> “1” if the <i>i</i>-th and the <i>j</i>-th intersections are connected by a road
but there is no billboard on this road or there is a billboard but a car driver
will not see the agitation when driving from the <i>i</i>-th intersection to the
<i>j</i>-th intersection;</li>
<li> “2” if the <i>i</i>-th and the <i>j</i>-th intersections are connected by a road
and a car driver will see the agitation when driving from the <i>i</i>-th
intersection to the <i>j</i>-th intersection.</li>
</ul>
No intersection can be connected by a road with itself. If several answers are
possible, output any of them.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is no required configuration of roads and billboards, output “NO” in the only line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
0 1 1 1 1
1 0 1 0 1
0 0 0 0 0
2 1 2 0 2
0 0 0 0 0
</PRE></TD><TD><PRE CLASS="intable">YES
00202
00210
11001
02000
10100
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
0 1
1 0
</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1771||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are exactly <i>n</i> bus stops and <i>m</i> bus routes in Yekaterinburg. The
traffic system is designed so that the distance between two adjacent stops is
covered by any bus in exactly one minute. Each bus starts its journey no
earlier than 7 am at an integer number of minutes and lets the passengers in at
the first stop of its route. No two buses can go on the same route
simultaneously. When a bus reaches the last stop of its route, it does not turn
round and go back. There is no bus schedule in Yekaterinburg, and buses can go
arbitrarily allowing for the above constraints.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Deputy of the City Duma Leonid decided to set up a social control of the public
transportation system. At 06:50 he came out to the bus stop nearest to his home
with a notebook. He spoke to the people who were waiting there and they
explained him the way they usually used buses. Everybody who wants to get into
a bus comes to a bus stop in advance, no later than at 06:59. Boarding and
debussing take no time at all because people are in a hurry. Each passenger
chooses a bus by the following algorithm.

<ul>
<li> If a bus that will take the passenger to the required bus stop arrives to
the stop, the passenger takes this bus.</li>
<li> If several suitable buses come to the bus stop simultaneously, then the
passenger takes the bus that will take them to the required stop earlier.</li>
<li> If there are several such buses, then the passenger takes the bus with
the minimal route number.</li>
</ul></DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At exactly 7 am Leonid started writing the route numbers of the passing buses
and the times at which they arrived to the stop. The crowd at the stop was
gradually diminishing. Leonid was starting to enjoy the process when he
suddenly remembered that he had to attend a session of the Collegiate
Programming Committee. Then he got into the bus that came to the bus stop.
There were 42 people in the bus and 13 people entered the bus in addition to
Leonid. Help him determine the minimum and maximum number of those people that
would be in the bus when it arrived to the stop where Leonid had to get off.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>n</i> and <i>m</i> separated with a space (3 &le; <i>n</i>, <i>m</i> &le; 100). The <i>i</i>-th of the following <i>m</i> lines describes the route with number <i>i</i>. The description is a sequence of pairwise distinct numbers from 1 to <i>n</i>, which are the numbers of stops on the route. Each route contains at least two stops. The list ends with the number &minus;1. The numbers in the list are separated with a space. Leonid lives near the stop with number 1 and plans
to get off at the stop with number 2.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The next line contains the number of buses <i>k</i> that Leonid recorded in
his notebook (1 &le; <i>k</i> &le; 100). Each of the following <i>k</i> lines contains the time when the bus arrived to the stop in the format <i>hh</i>:<i>mm</i>
(07 &le; <i>hh</i> &le; 23; 00 &le; <i>mm</i> &le; 59) and, after a space, the route number of this bus. The records in the notebook are time-ordered. The last in the list is the bus that Leonid took. It is known that the notebook also contains information on
all the buses that arrived to the stop simultaneously with the last bus. It is
guaranteed that the bus Leonid took has stop 2 in its route and that stop 1 is
not the first stop of this route.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two integers separated with a space. These should be the
minimum and maximum numbers of people going with Leonid the whole way from
stop 1 to stop 2.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
1 4 -1
4 1 -1
3 1 4 2 -1
2
07:00 1
07:10 3
</PRE></TD><TD><PRE CLASS="intable">13 55
</PRE></TD></TR></TABLE>
______________________________________________________
1772||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the stages of the Robot Cross-Country World Cup was held at the Uktus
Ski Lodge in Yekaterinburg.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor Popov's laboratory sent its newest Robot NS6 to take part in the
race. The neural networks of this robot were well-trained in the classic style
skiing. The robot was not very lucky with the drawing: he was one of the last
racers to start and the trails had been already heaped up with the participants
who hadn't been able to make their way to the finish. This created a serious
problem, as the robot now had to keep switching between the ski trails in order
to skirt the obstacles. As a result, it lost the precious time because moving
to an adjacent trail each time took one second.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the places where the fallen robots lie, determine the optimal way to
skirt them all in the minimum time.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>n</i>, <i>s</i>, and <i>k</i> separated with a space (2 &le; <i>n</i> &le; 10<sup>5</sup>; 1 &le; <i>s</i> &le; <i>n</i>; 
0 &le; <i>k</i> &le; 10<sup>5</sup>). There are <i>n</i> parallel
ski trails that lead from start to finish. They are numbered successively from
1 to <i>n</i>. Robot NS6 starts along the trail with number <i>s</i>. The integer <i>k</i> is the number of robots which fell down on the trails.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The following <i>k</i> lines describe the lying robots in the order from start to
finish. In each line there are integers <i>l</i> and <i>r</i>, which mean that a robot
blocked the trails with numbers from <i>l</i> to <i>r</i> inclusive (1 &le; <i>l</i> &le; <i>r</i> &le; <i>n</i>). You can assume that all the fallen robots lie at a sufficient distance
from each other (and from the start) so that Robot NS6 can perform the
necessary maneuvers. If some robot blocks an outermost trail, it can be skirted
on one side only. No robot blocks all the trails simultaneously.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimum time in seconds that Robot NS6 spent for switching from
trail to trail in order to skirt all the fallen contestants and successfully
complete the race.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3 2
2 5
1 4
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1773||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Artem is a fan of Yekaterinburg Metro. He is now renovating his room. According
to his design, one of the walls of the room will be covered with white
wallpaper and a green straight line will stretch across the wall from left to
right. This line will remind him of the only metro line in Yekaterinburg.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Artem has prepared <i>n</i> wallpaper strips and drawn a green line on each strip
from its left edge to its right edge. In which order should he put these strips
onto the wall so that the green lines form one segment of a straight line
stretching from the left edge of the wall to its right edge?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each strip the distance from its lower edge to the left and right endpoints
of the segment drawn on it is known. All the strips are of the same width and
their height is equal to the height of the wall. The strips may be turned
upside down before being pasted to the wall.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>h</i> and <i>n</i> (1 &le; <i>h</i> &le; 100000; 
1 &le; <i>n</i> &le; 50000), which are the height of Artem's room and the number of
prepared wallpaper strips. The <i>i</i>-th of the following <i>n</i> lines contains
integers <i>l</i> and <i>r</i> (0 &le; <i>l</i>, <i>r</i> &le; <i>h</i>), which are the distances from the lower edge of the strip to the left and right endpoints of the green segment drawn on it.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> integers separated with a space. These should be numbers
of the strips as they should be pasted to the wall from left to right. If a
strip should be turned upside down before pasting, then its number should be
preceded with a minus. The strips are numbered from 1 to <i>n</i> as they are given
in the input. If there are several possible answers, output any of them. If it
is impossible to put the wallpaper as required, output “0”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
3 2
2 1
2 1
</PRE></TD><TD><PRE CLASS="intable">-3 1 2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 3
3 2
2 1
3 2
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR></TABLE>
______________________________________________________
1774||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr, elected as a warlord of the army of mages, faced a challenging problem.
All magicians recruited in the army had heavy beards, which were quite
unacceptable for soldiers. Therefore, Petr ordered all recruits to shave their
beards as soon as possible. Of course, all magicians refused to do it, referring
to the fact they don't know any shaving spell. Fortunately, a magician Barberian
agreed to shave all recruits.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Barberian can cast a “Fusion Power” spell which shaves beards of at most <i>k</i>
magicians in one minute. In order to achieve full effect every magician should
be shaved twice: the first spell shaves close, the second spell shaves even closer.
For each recruit Petr appointed a time when he should visit Barberian.
Unfortunately, the discipline in the new army is still far from perfect, so
every magician will come to Barberian in time, but everyone will wait for the shave
until his patience is exhausted and will disappear after that.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine whether Barberian will be able to shave beards of all magicians
before they disappear.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two space-separated integers <i>n</i> and <i>k</i>
<nobr>(1 ≤ <i>n</i>, <i>k</i> ≤ 100)</nobr>, which are the number of recruits
in the army and the number of magicians Barber can shave simultaneously.
The <i>i</i>-th of the following <i>n</i> lines contains space-separated
integers <i>t<sub>i</sub></i> and <i>s<sub>i</sub></i>
<nobr>(0 ≤ <i>t<sub>i</sub></i> ≤ 1000;</nobr>
<nobr>2 ≤ <i>s<sub>i</sub></i> ≤ 1000)</nobr>, which are
the time in minutes, at which the <i>i</i>-th magician must come to Barberian,
and the time in minutes he is ready to spend there, including shaving time.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Barberian is able to shave beards of all magicians,
output “Yes” in the first line. The <i>i</i>-th of the following <i>n</i>
lines should contain a pair of integers <i>p<sub>i</sub></i>,
<i>q<sub>i</sub></i>, which are the moments at which Barberian should cast
the spell on the <i>i</i>-th magician <nobr>(<i>t<sub>i</sub></i> ≤ <i>p<sub>i</sub></i> &lt;
<i>q<sub>i</sub></i> ≤ <i>t<sub>i</sub></i> + <i>s<sub>i</sub></i> − 1)</nobr>.
If at least one magician disappears before being completely shaved,
output a single word “No”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2
1 3
1 3
1 3

</PRE></TD><TD><PRE CLASS="intable">Yes
1 2
1 3
2 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 1
1 3
1 3
</PRE></TD><TD><PRE CLASS="intable">No</PRE></TD></TR></TABLE>
______________________________________________________
1775||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The inhabitants of planets orbiting around the pulsar PSR 2010+15
enjoy playing space bowling. A few cylindrical pins of unit diameter
are set on a huge field. A player chooses a certain point of the field
and rolls a ball from this point, trying to destroy as many pins as
possible. After the ball is released, it rolls in a straight line,
touching the surface all the time before rolling away from the field.
If the ball touches a pin, this pin dematerializes, and the ball doesn't change
direction. To score a <i>strike</i>, the player has to destroy at least
<i>k</i> pins in one shot.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, aliens haven't yet invented a machine that would return the
balls that rolled away from the field. Instead, they use a machine that
materializes a new ball from vacuum before each shot. A player enters the
diameter and in a second he obtains a ball of exactly the same diameter.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is time for an alien Vas-Vas to roll a ball. There are <i>n</i> pins
standing on the field at the moment. Help Vas-Vas to determine the minimal
diameter of a ball, he can score a strike with.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i> and <i>k</i>
<nobr>(1 ≤ <i>k</i> ≤ <i>n</i> ≤ 200)</nobr>. The <i>i</i>-th of following
<i>n</i> lines contains space-separated integers <i>x<sub>i</sub></i> and
<i>y<sub>i</sub></i> <nobr>(−10<sup>5</sup> ≤ <i>x<sub>i</sub></i>,
<i>y<sub>i</sub></i> ≤ 10<sup>5</sup>)</nobr>, which are the coordinates of the
centers of pins. All pins are situated at different points.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible diameter of a ball which can be used to score
a strike, with absolute or relative error not exceeding 10<sup>−6</sup>.
If a strike can be scored with a ball of arbitrarily small diameter, output
“0.000000”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
0 4
0 6
6 4
6 6
3 0
</PRE></TD><TD><PRE CLASS="intable">1.0000000000
</PRE></TD></TR></TABLE>
______________________________________________________
1776||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis has to prepare the Ural State University 90th anniversary firework.
He bought <i>n</i> rockets and started to think of the way he should
launch them. After a pair of sleepless nights he invented the following
algorithm.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">All <i>n</i> rockets are placed on the surface in a single line. The interval
between two consecutive salvos is ten seconds. The leftmost and the rightmost
rocket are launched in the first salvo. After <i>i</i> salvos are fired, all
non-empty segments between two neighboring launched rockets are considered.
One rocket is chosen randomly and uniformly at each of these segments.
All chosen rockets are launched in the (<i>i</i>&nbsp;+&nbsp;1)-st salvo. Algorithm runs
until all rockets are launched.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Calculate the average duration in seconds of such a firework.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains an integer <i>n</i> <nobr>(3 ≤ <i>n</i> ≤ 
400)</nobr>, which is the number of rockets bought by Denis.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the expected duration of the firework in seconds, with
absolute or relative error not exceeding 10<sup>−6</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
</PRE></TD><TD><PRE CLASS="intable">26.66666666666
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First, the rockets with numbers 1 and 5 are launched. 10 seconds later
the rocket 3 is launched with probability 1/3; in that case, 10 more
seconds later the rockets 2 and 4 are launched, and the firework is over after 20
seconds. In case the rocket 2 or rocket 4 is launched in the second salvo
(this happens with probability 2/3), the firework is over after 30 seconds.</DIV></DIV>
______________________________________________________
1777||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The language of Australian aborigines anindilyakwa has no numerals.
No anindilyakwa can say: “I've hooked eight fishes”. Instead, he says:
“I've hooked as many fishes as many stones are in this pile”.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor Brian Butterworth found a meadow with three piles of stones.
He decided to determine whether aborigines can count. Professor
asked one of the aborigines to point at two piles with the minimal
difference of numbers of stones in them and tell what this difference is.
The aborigine pointed correctly! He was unable to express the
difference with words, so he went to a shore and returned with a
pile of the corresponding number of stones.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Professor decided to continue his experiments with other aborigines,
until one of them points at two piles with equal number of stones.
All piles that aborigines bring from the shore are left at the meadow.
So, the second aborigine will have to deal with one more pile, the one
brought by the first aborigine.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains space-separated pairwise distinct integers
<i>x</i><sub>1</sub>, <i>x</i><sub>2</sub> and <i>x</i><sub>3</sub>
<nobr>(1 ≤ <i>x</i><sub>1</sub>, <i>x</i><sub>2</sub>, <i>x</i><sub>3</sub> ≤ 10<sup>18</sup>)</nobr>,
which are the numbers of stones in piles that were lying on the meadow
at the moment professor Butterworth asked the first aborigine.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of aborigines that will have to answer a stupid question by professor.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">11 5 9
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first aborigine will point at piles of 11 and 9 stones and will bring
a pile of two stones. The second aborigine will point at the same piles and
will bring another pile of two stones. The third aborigine will point at
two piles of two stones, and the experiments will be over.
</DIV></DIV>
______________________________________________________
1778||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Oh, these hockey fans! They attend all the games of their favorite team
and don't care about their money or spare time. Often fans of a hockey
team from a city of Harbin gather in a small group of several thousand
people to visit the next match of their idols.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Harbin fans are well-organized. Each of them has his own ID number
that is an integer from 1 to <i>n</i>. All <i>n</i> fans decided to visit the next
match, so the fanclub ordered <i>m</i> buses and assigned the fans to buses
in such a way, that there would be at least <i>a</i> and at most <i>b</i>
fans in each bus. To avoid the mess, the buses were numbered 1 through <i>m</i>,
and every fan got a tag with a number of his bus. It is known that fans with
larger IDs were assigned to buses with larger numbers.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An emigrant from Vietnam, Li Si Tsyn is not accustomed to the discipline of his
comrades yet. When he came to a boarding station, he realized he had forgotten
a tag with his bus number at home! Li Si Tsyn asked several friends for their IDs
and their bus numbers. He wants to use this information to calculate the
number of his bus.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i>, <i>m</i>, <i>a</i> and 
<i>b</i> (<nobr>2 ≤ <i>m</i> ≤ <i>n</i> ≤ 10<sup>5</sup>;</nobr> <nobr>1 ≤ <i>a</i> ≤ 
<i>b</i> ≤ <i>n</i>;</nobr>
<nobr><i>ma</i> ≤ <i>n</i> ≤ <i>mb</i></nobr>). The second line contains an
integer <i>r</i> (<nobr>1 ≤ <i>r</i> ≤ <i>n</i></nobr>), which is the
Li Si Tsyn's ID. The third line contains an integer <i>s</i> <nobr>(1 ≤ 
<i>s</i> ≤ <i>n</i> − 1)</nobr>, which is the number of fans asked by
Li Si Tsyn. The <i>i</i>-th of the next <i>s</i> lines contains space-separated 
integers <i>r<sub>i</sub></i> and <i>f<sub>i</sub></i> (<nobr>1 
≤ <i>r<sub>i</sub></i> ≤ <i>n</i>;</nobr> <nobr>1 ≤ <i>f<sub>i</sub></i> ≤ 
<i>m</i></nobr>), which are the ID of a fan and the number of his bus.
All <i>r<sub>i</sub></i> are distinct and none of them is equal to <i>r</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the information received from the fans is inconsistent, output a single word
“IMPOSSIBLE”. Otherwise, in the first line you should output the number of
options that could be written on the Li Si Tsyn's tag, and in the the second line
you should output a space-separated list of these options in ascending order.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">16 4 1 16
3
2
2 2
4 3
</PRE></TD><TD><PRE CLASS="intable">2
2 3</PRE></TD></TR></TABLE>
______________________________________________________
1779||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When a few students of the Ural State University finished their sport career,
the university encountered a lot of problems in team composition.
Veterans of sports programming decided to play their role and create
the most successful team in the history of the Ural&nbsp;SU.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Veterans assumed that success of a team strongly depends on the number
of friends in the ACM community the members of this team have. After
more discussions they developed the <i>criterion of success</i>: all
three members of the team should have the same number of friends.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, the veterans failed to compose a team, as it turned out
that there were no three programmers in the Ural SU that together satisfied
this criterion.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You should use this information to determine which students are friends
of each other.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a single integer <i>n</i>
<nobr>(3 ≤ <i>n</i> ≤ 200)</nobr>, which is the number of students
in the Ural SU participating in programming contests.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the veterans' calculations are correct, the first line should contain
an integer <i>k</i>, which is the number of pairs of students that are
friends of each other. The following <i>k</i> lines should contain these
pairs. Students should be numbered 1 through <i>n</i>. If a problem has
multiple correct answers, output any of them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the veterans are wrong and the problem has no solution, output
a single line containing a number −1.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">2
1 3
3 4</PRE></TD></TR></TABLE>
______________________________________________________
1780||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis, Vanya and Fedya gathered at their first team training. Fedya
told them that he knew the algorithm for constructing a <i>Gray code</i>.

<ol><li>
Create a 2-bit list: {0, 1}.

</li><li>
Reflect this list and concatenate it with the original list: {0, 1, 1, 0}.

</li><li>
Prefix old entries with 0, and prefix new entries with 1: {00, 01, 11, 10}.

</li><li>
Repeat steps 2 and 3 until the length of all elements is equal to <i>n</i>. 
</li></ol>

The number <i>n</i> is a <i>length</i> of a Gray code. For example, the code
of length 3 is: {000, 001, 011, 010, 110, 111, 101, 100}.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis ran the Fedya's algorithm and obtained a binary number <i>x</i>
at position <i>k</i> (positions are numbered starting from zero).
Vanya wrote down the numbers <i>k</i> and <i>x</i> in binary system.
This story happened many years ago and now you hold the paper sheet
with these numbers in your hands. Unfortunately, some digits are unreadable
now. Could you determine the values of these digits using the readable digits?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains a number <i>k</i> written in the binary system. 
Unreadable digits are denoted with symbol “?”. The second line contains
a number <i>x</i> in the same format. The lengths of these numbers are
equal and don't exceed 10<sup>5</sup>. The numbers may contain leading zeroes.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If there is a unique way to restore the numbers <i>k</i> and
<i>x</i>, output them, replacing the symbols “?” with “0” or “1”.
If there are multiple ways to restore them, output “Ambiguity”.
If Denis or Vanya certainly made a mistake in these numbers, output
“Impossible”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0?1
0?0
</PRE></TD><TD><PRE CLASS="intable">011
010
</PRE></TD></TR><TR><TD><PRE CLASS="intable">?00
??0
</PRE></TD><TD><PRE CLASS="intable">Ambiguity
</PRE></TD></TR><TR><TD><PRE CLASS="intable">100
100
</PRE></TD><TD><PRE CLASS="intable">Impossible</PRE></TD></TR></TABLE>
______________________________________________________
1781||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> computer classrooms at the Ural State University.
On Saturday, October 9, it was decided to hold <i>n</i> programming
contests in a row! Organizers have drawn a schedule—a table of
size <i>n&nbsp;×&nbsp;n</i> of zeroes and ones. The <i>j</i>-th number
in the <i>i</i>-th row is equal to one if the <i>j</i>-th classroom is occupied
during the <i>i</i>-th competition, in the other case it is equal to zero.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On Friday, a cleaning lady Zina reminded organizers that she needed to tidy up the
classrooms after the contests. She planned to tidy up the first computer
classroom immediately after the first contest, tidy up the second classroom
after the second contest, and so on. Of course, the contests can't be held
in the classroom neither while they are being tided up nor after that.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Chairman of the jury agreed with Zina. At one operation he can choose a pair of
distinct integers <i>i</i> and <i>j</i>
<nobr>(1 ≤ <i>i</i>, <i>j</i> ≤ <i>n</i>)</nobr>, swap the <i>i</i>-th and
<i>j</i>-th row in the schedule, and then immediately swap the <i>i</i>-th
and <i>j</i>-th column. The chairman is able to perform at most two hundred
such operations until the evening. Will he be able to make the schedule
acceptable to Zina?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> <nobr>(2 ≤ <i>n</i> ≤ 100)</nobr>.
The following <i>n</i> lines contain <i>n</i> numbers each and define the
schedule of contests.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the chairman does not have enough time to fix the schedule, output “−1”.
Otherwise, output the required number of operations <i>t</i> in the first row,
and then output <i>t</i> lines with two numbers in each, specifying the values of
<i>i</i> and <i>j</i> which should be chosen by the chairman for the next operation.
If there are many ways to fix the schedule you should output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0 0
1 1 0
1 1 0
</PRE></TD><TD><PRE CLASS="intable">1
1 3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 1 1
1 1 0
1 0 0
</PRE></TD><TD><PRE CLASS="intable">-1</PRE></TD></TR></TABLE>
______________________________________________________
1782||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Jack is very laconical. He doesn't like to repeat the same thing several
times. That is why the binary word which Jack has just written on a fence
has no non-empty substrings of the form <i>xyxyx</i>, where <i>x</i>
and <i>y</i> are (possibly empty) binary strings and the length of <i>y</i>
doesn't exceed the length of <i>x</i> multiplied by two. For example,
the Jack's word can't contain substrings <code>000</code> or
<code>1001001</code> but can contain substrings <code>1010</code> and
<code>001100110</code>.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fox Trot, who was passing by, asked Jack to describe the way he obtained
his new word. Jack told him that first there was an empty word on a
fence and then… The following story by Jack contains only phrases
of the form:

<ul><li>
“I prefixed the current word with <code>0</code> (or <code>1</code>)”;
</li><li>
“I suffixed the current word with <code>0</code> (or <code>1</code>)”;
</li><li>
“I replaced all zeroes with string <code>01</code>, and all ones with string <code>10</code>”.
</li></ul>

Fox Trot is interested in that, but he will get bored after one hundred
such phrases. Will Jack be able to finish his story?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains a Jack's new word. This word is non-empty,
consists of zeroes and ones and its length doesn't exceed 10<sup>5</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If Jack has to say more than one hundred phrases to describe his word,
output “−1”. In the other case output any possible description.
The first line should contain a number of phrases <i>k</i>
<nobr>(1 ≤ <i>k</i> ≤ 100)</nobr>. The following <i>k</i> lines should
describe these phrases in the order they should be pronounced.
If a word should be prefixed with symbol <i>c</i>, output “front <i>c</i>”.
If a word should be suffixed with symbol <i>c</i>, output “back <i>c</i>”.
If all <code>0</code> should be replaced with <code>01</code> and all
<code>1</code> should be replaced with <code>10</code>, output “double”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">011010011
</PRE></TD><TD><PRE CLASS="intable">5
back 1
front 0
double
double
back 1</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to the story from sample output, Jack consecutively obtained:
an empty string, “1”, “01”, “0110”, “01101001”, “011010011”.</DIV></DIV>
______________________________________________________
1783||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Western and Eastern Cuckooland are close to the outbreak of war.
Superpowers are competing for supremacy in nuclear warfare to
achieve dominance in the military sphere. Unfortunately, production and
stockpiling of nuclear warheads are very expensive and can easily
undermine the budgets of both countries.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Military analysts and economists of Western Cuckooland have provided
a report according to which the country will be safe and the budget
will be stable, if by the end of the <i>i</i>-th month there would
be exactly <i>a<sub>i</sub></i> warheads stockpiled in warehouses.
The president ordered to adhere to these figures, so the plants in Western
Cuckooland produce or dispose the necessary amount of warheads each month.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But the intelligence of Eastern Cuckooland is great! At the begining of the
<i>i</i>-th month the spies from Eastern Cuckooland get access to the plans
of Western Cuckooland for the next <i>m</i> months (that is, the numbers
<i>a<sub>i</sub></i>, <i>a</i><sub><i>i</i>&nbsp;+&nbsp;1</sub>, …, 
<i>a</i><nobr><sub><i>i</i> + <i>m</i> − 1</sub></nobr>) and send them home.
When dictator of Eastern Cuckooland receives this information, he immediately
gives the order to change the current number of warheads in warehouses in
Eastern Cuckooland by a number <i>x<sub>i</sub></i>. He chooses <i>x<sub>i</sub></i>,
in such a way that if Eastern Cuckooland would change the number of warheads by
<i>x<sub>i</sub></i> during <i>m</i> months, it would have not less warheads
than Western Cuckooland by the end of every month. The dictator also cares about
the country's budget, therefore, he chooses the minimal possible <i>x<sub>i</sub></i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Determine what orders the dictator of Eastern Cuckooland will give during the
first <i>n</i> months. You can assume that at the beginning of the first month,
neither Western nor Eastern Cuckooland posess nuclear arsenal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains space-separated integers <i>n</i> and <i>m</i>
(<nobr>1 ≤ <i>n</i> ≤ 10000;</nobr> <nobr>1 ≤ <i>m</i> ≤ 50</nobr>).
The second line contains space-separated integers <i>a</i><sub>1</sub>, …, 
<i>a</i><nobr><sub><i>n</i> + <i>m</i> − 1</sub></nobr>
<nobr>(0 ≤ <i>a<sub>i</sub></i> ≤ 10<sup>5</sup>)</nobr>, which are
the plans of the Western Cuckooland.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a list of space-separated integers <i>x</i><sub>1</sub>, …, <i>x<sub>n</sub></i>.
Number <i>x<sub>i</sub></i> corresponds to the order the dictator of Eastern Cuckooland
will give at the begining of the <i>i</i>-th month. </DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 3
0 0 4 2 1 0</PRE></TD><TD><PRE CLASS="intable">2 1 1 -1</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>
______________________________________________________
1784||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the shameful loss in the match against Jesus Quintana, The Dude, Donny
and Walter decided to turn to poker and become rounders. First of all,
they decided to learn to deal with cards.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Walter gave Donny a simple task—he should split a deck of 52 cards into
four piles in such a way that cards in each pile would be sorted in the order
of ascending value. Two should be the topmost card, three should be the next card
and so on. Ace should lie in the bottom. Walter wanted all decks to be comprised
of the cards of the same suit but he forgot to mention it. As a result, the
suits in piles were shuffled.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Dude decided to
save the day. But after five White Russians he poured into himself yesterday
he isn't in a good condition for thinking. In fact, he is able to perform only
the following actions:

<ul><li>
take a few cards of one suit from the top of a deck and create a new deck of them;
</li><li>
take a few cards of one suit from the top of a deck and put them onto a card which
value is greater by one than the value of the bottommost of the taken cards.
</li></ul>
The Dude doesn't change the order of cards while moving them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help The Dude to complete Walter's task before Walter get insane and
shoot both his best friends with Uzi.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of four lines describing the piles of cards.
Each line contains the description of 13 cards in a pile in order from top
to bottom (that is, in the order of ascending values). Each card is
denoted by its value and its suit. The value is one of the following:
2, 3, …, 9, T (ten), J (jack), Q (queen), K (king), A (ace),
the suit can be: S (spades), C (clubs), D (diamonds) or H (hearts). All cards
in the input are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of operations The Dude should perform in order to
obtain four piles consisting of cards with the same suit.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC AC
2S 3S 4S 5S 6S 7S 8D 9D TD JD QD KD AD
2D 3D 4D 5D 6D 7D 8S 9S TS JS QS KS AS
2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH AH
</PRE></TD><TD><PRE CLASS="intable">3</PRE></TD></TR></TABLE>
______________________________________________________
1785||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Lavin Interactive Company, which has developed the turn-based strategy Losers-V, is constantly
extending its target market by localizing the game to as many languages as it can. In particular,
they are interested in creating a version of the game in Anindilyakwa, which is one of the languages
spoken by indigenous Australians.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, the localization is complicated by the fact that Anindilyakwa has no numerals. How can a phrase
such as “You have seven black dragons and your enemy has forty black dragons” be translated into this language?
The localizers have decided to translate it as follows: “You have few black dragons and your enemy has lots of
black dragons.” They have compiled a table showing the rule of replacing numbers of monsters by Anindilyakwa words.

<table>

<tr>
<td>Number </td><td> Designation in Anindilyakwa</td>
</tr><tr>
<td>from 1 to 4 </td><td> few </td>
</tr><tr>
<td>from 5 to 9 </td><td> several </td>
</tr><tr>
<td>from 10 to 19 </td><td> pack </td>
</tr><tr>
<td>from 20 to 49 </td><td> lots</td>
</tr><tr>
<td>from 50 to 99 </td><td> horde </td>
</tr><tr>
<td>from 100 to 249 </td><td> throng </td>
</tr><tr>
<td>from 250 to 499 </td><td> swarm </td>
</tr><tr>
<td>from 500 to 999 </td><td> zounds </td>
</tr><tr>
<td>from 1000 </td><td> legion </td>
</tr>

</table>

Help the localizers automatize the process. Write a program that would output the appropriate word given the
number of monsters.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the number of monsters <i>n</i> (1 ≤ <i>n</i> ≤ 2000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the word corresponding to the given number of monsters in the Anindilyakwa language.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7</PRE></TD><TD><PRE CLASS="intable">several
</PRE></TD></TR><TR><TD><PRE CLASS="intable">40
</PRE></TD><TD><PRE CLASS="intable">lots</PRE></TD></TR></TABLE>
______________________________________________________
1786||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Leogius was searching in a library for a book recommended to him by the teacher of theoretical magic. Suddenly
he found an ancient chronicle written on several sheets of parchment. Having looked through it, Leogius
understood that it described the life and amazing adventures of a lich. Could it be the biography of Lich Sandro
that had been lost many centuries ago? If so, the manuscript had to be shown to the Supreme Council of Magicians
as soon as possible. But there was one problem: the text contained no mention of the name Sandro. What could be
done? The Council might not believe that the chronicle recounted Sandro's life. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Leogius decided to correct the manuscript. He found a magician who was willing to do it. But a good job had
to be paid well. The proofreader agreed to replace any letter by any other same-case letter (an uppercase letter
by an uppercase letter and a lowercase letter by a lowercase letter) for five gold coins. He also could change
the case of any letter for five gold coins. Help Leogius determine the minimal quantity of gold coins he had
to pay to make the string “Sandro” appear in the text.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the text of the manuscript. It consists of lowercase and uppercase English letters.
The number of letters in the text is at least six and at most 200.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal quantity of gold coins that must be paid to make the name Sandro appear in the text.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">MyNameIsAlexander
</PRE></TD><TD><PRE CLASS="intable">20
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the example the corrector will have to perform four operations after which the line will sequentially take
the following form: “MyNameIsAlesander”, “MyNameIsAlesandrr”, “MyNameIsAlesandro”, and “MyNameIsAleSandro”.</DIV></DIV>
______________________________________________________
1787||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A traffic light at the turn for the “MEGA” shopping center from the 
Novomoskovskiy highway works in such a way that <i>k</i> cars are able to
take a turn in one minute. At weekends all the residents of the city
drive to the mall to take a shopping, which results in a huge traffic
jam at the turn. Administration of the mall ordered to install a camera
at the nearby bridge, which is able to calculate the number of cars
approaching this turn from the city. The observation started <i>n</i> minutes ago.
You should use the data from the camera to determine the number of cars
currently standing in the traffic jam.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>k</i> and <i>n</i> (1 ≤ <i>k</i>, <i>n</i> ≤ 100), which
are the number of cars that can take a turn to “MEGA” in one minute
and the number of minutes passed from the beginning of observation.
The second line contains space-separated integers <i>a</i><sub>1</sub>, …, <i>a<sub>n</sub></i>
(0 ≤ <i>a<sub>i</sub></i> ≤ 100), where <i>a<sub>i</sub></i> is the number of cars that approached the turn 
during the <i>i</i>-th minute. The observation started at morning, when there
were no cars at the turn.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of cars currently standing in the traffic jam.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 3
6 7 2
</PRE></TD><TD><PRE CLASS="intable">0
</PRE></TD></TR><TR><TD><PRE CLASS="intable">5 3
20 0 0
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE>
______________________________________________________
1788||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A group of school leavers had their graduation party at an aquapark. They had a great time, but when they were
leaving the aquapark they were surprised by a suddenly cold weather and a heavy rain, which made it quite
a problem to get to the trolleybus stop.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It turned out that all the boys in the company had their umbrellas and all the girls were without umbrellas.
Of course, each boy, being a real gentleman, volunteered to accompany one of the girls to the trolleybus stop
under his umbrella.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the <i>i</i>th girl gets wet under the rain, she'll get upset by <i>g<sub>i</sub></i> units. If no girl accepts an
invitation from the <i>j</i>th boy, he'll get upset by <i>b<sub>j</sub></i> &middot; <i>k</i> units, where <i>k</i> is
the number of luckier boys who will accompany girls under their umbrellas. The girls who will go under umbrellas
and the accompanying boys will not get upset at all.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help the boys and girls keep their holiday mood as unspoiled as possible. Determine how they should proceed
to make the total upset minimal.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of girls <i>n</i> and boys <i>m</i> in the group (1 ≤ <i>n</i>, <i>m</i> ≤ 100).
The second line contains the girls' upsets <i>g</i><sub>1</sub>, …, <i>g<sub>n</sub></i> separated with a space. The third line
contains the boys' upset coefficients <i>b</i><sub>1</sub>, …, <i>b<sub>m</sub></i> separated with a space. The numbers in the second
and third lines are positive integers not exceeding 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal possible total upset.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 4
1 100
10 8 6 4
</PRE></TD><TD><PRE CLASS="intable">19</PRE></TD></TR></TABLE>
______________________________________________________
1789||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Great Dodecahedron is an ancient powerful artifact. It is kept at the Temple of Five Polyhedra together with
other magical artifacts. Many magicians tried to get it but to no avail, because a protection spell is put on
the Dodecahedron.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a row of <i>n</i> pedestals in the fourth hall of the Temple. The pedestals are numbered from left
to right starting from 1. The Great Dodecahedron is mounted on one of the pedestals, and the other pedestals
support its exact copies, which have no magical power.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a magician touches the real Dodecahedron, all the copies will disappear at once. If a magician touches a copy,
nothing will happen, but, as soon as he removes the hand, the Dodecahedron will shift to a neighboring left or
right pedestal and a copy will appear in its place.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Of course, the spell stops any unfair attempts to get the Dodecahedron, because any magician will die immediately
if he touches several dodecahedra simultaneously.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Theoretical magicians from all over the world have been trying to invent an algorithm for finding the Great
Dodecahedron for many centuries, but they have not succeeded yet. Can you help them?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the number <i>n</i> of pedestals in the fourth hall of the Temple of Five Polyhedra
(2 ≤ <i>n</i> ≤ 100).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number <i>m</i> (<i>m</i> ≤ 1000) of touches necessary to find the Dodecahedron.
In the second line output <i>m</i> integers separated with a space; these should be the numbers of pedestals
in the order in which the dodecahedra mounted on them should be touched.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The algorithm must achieve the goal for any initial position of the artifact and for any of its admissible
transitions. It is guaranteed that there exists at least one such algorithm in which at most one thousand
touches are made.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
</PRE></TD><TD><PRE CLASS="intable">2
2 2</PRE></TD></TR></TABLE>
______________________________________________________
1790||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Supreme Council of Magicians has been studying the recently found biography of Lich Sandro for many days.
At present they are investigating a mystic numerical sequence written on one of the pages. Most of the magicians
think that this sequence defines an algorithm for finding the Great Dodecahedron.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As you remember, the Great Dodecahedron is kept at the Temple of Five Polyhedra. Many magicians tried to get it
but to no avail, because a protection spell is put on the Dodecahedron.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a row of <i>n</i> pedestals in the fourth hall of the Temple. The pedestals are numbered from left
to right starting from 1. The Great Dodecahedron is mounted on one of the pedestals, and the other pedestals
support its exact copies, which have no magical power.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If a magician touches the real Dodecahedron, all the copies will disappear at once. If a magician touches a copy,
nothing will happen, but, as soon as he removes the hand, the Dodecahedron will shift to a neighboring left or
right pedestal and a copy will appear in its place.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Supreme Council of Magicians assumes that the numbers in the sequence correspond to the numbers of pedestals
and define the order in which the dodecahedra should be touched. Help the Council verify that this algorithm can
actually be used to find the artifact regardless of its initial position and for any of its admissible transitions.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of pedestals and the number <i>m</i> of integers in the sequence
(2 ≤ <i>n</i>, <i>m</i> ≤ 100000). The sequence itself is given in the second line, which contains <i>m</i>
positive integers not exceeding <i>n</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “YES” if the sequence defines a correct algorithm for finding the Great Dodecahedron and “NO” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2
2 2
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 3
1 2 3
</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1791||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The local government provided funds for repairing a section of the Big Vasyuki&ndash;Small Vasyuki motorway. This is
a two-lane road, so it was decided to close one lane for repairs at first and leave the other lane for traffic
in both directions.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The cars going in opposite directions have to take turns in passing this section of the road. Naturally, traffic
jams accumulated quickly at both ends of the section. Officer Uncle Styopa was assigned to control traffic here.
He was lucky to find a couple of decent country roads and put “Detour” signs where necessary. The problem seemed
to be solved.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, it turned out that country roads were not good enough for buses traveling between Big Vasyuki and Small
Vasyuki. Fortunately, buses run according to their schedule, so Uncle Styopa knows in advance when and from
which direction a bus will come. He also knows the maximal time each bus may spend passing the road section under
repair without being late for its destination. Help Uncle Styopa organize the process so that all the buses are
in time at their destinations.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A bus may enter the only free lane only if there are no other buses on it. It takes exactly one minute for any
bus to pass the road section under repair.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of buses <i>n</i> from Small Vasyuki to Big Vasyuki (1 ≤ <i>n</i> ≤ 100000).
These buses are described in the following <i>n</i> lines in the form of pairs of integers <i>t<sub>i</sub></i> and
<i>p<sub>i</sub></i> (1 ≤ <i>t<sub>i</sub></i>, <i>p<sub>i</sub></i> ≤ 10<sup>8</sup>), where <i>t<sub>i</sub></i> is the time in minutes when the arrival of the
<i>i</i>th bus is expected and <i>p<sub>i</sub></i> is the maximal number of minutes this bus may spend passing the road
section under repair. Then there is a line with the number of buses <i>m</i> going from Big Vasyuki to Small Vasyuki
(1 ≤ <i>m</i> ≤ 100000). The following <i>m</i> lines contain their description in the same format.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The buses are described in the order in which they come to the road section under repair. The buses running in one direction should pass the section under repair in the same order they approach it.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “YES” if Uncle Styopa can organize the traffic so that no bus is late and output “NO” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 1
1 2
1
2 2
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
1 1
1 2
1
2 1
</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1792||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us consider four disks intersecting as in the figure. Each of the three shapes formed by the intersection
of three disks will be called a <i>petal</i>.

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Write zero or one on each of the disks. Then write on each petal the remainder in the division by two of the sum
of integers on the disks that contain this petal. For example, if there were the integers 0, 1, 0, and 1 written
on the disks, then the integers written on the petals will be 0, 1, and 0 (the disks and petals are given in the
order shown in the figure).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This scheme is called a <i>Hamming code</i>. It has an interesting property: if you enemy changes secretely any
of the seven integers, you can determine uniquely which integer has been changed. Solve this problem and you will
know how this can be done.
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains seven integers separated with a space, each of them being zero or one. The first four
integers are those written on the disks in the order shown in the figure. The following three integers are those
written on the petals in the order shown in the figure 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output one line containing seven integers separated with a space. The integers must form a Hamming code. The set
of integers may differ from the input set by one integer at most. It is guaranteed that either the input set is
a Hamming code or a Hamming code can be obtained from it by changing exactly one integer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 1 0 1 1 0 1
</PRE></TD><TD><PRE CLASS="intable">0 1 0 0 1 0 1
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 1 1 1 1 1 1
</PRE></TD><TD><PRE CLASS="intable">1 1 1 1 1 1 1</PRE></TD></TR></TABLE>
______________________________________________________
1793||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">One of the organizers of the Ural Regional School Programming Contest came to the university cafeteria to have
lunch. He took a soup and a main course and tried to arrange them on a small rectangular tray, which was not so
easy. “Oops, that's a problem,” he thought. “Oh, yes, that's a problem! A nice problem for the contest!”

</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Ural State University's cafeteria has trays with a rectangular <i>a</i> × <i>b</i> bottom and vertical
borders of height <i>d</i>. Plates have the shape of a truncated cone. All the plates in the cafeteria have the
same height <i>h</i>. The organizer wants to put the plates on the tray so that their bottoms adjoin the bottom
of the tray completely. Can he do it?
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage">

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>a</i>, <i>b</i>, and <i>d</i> separated with a space. Each of the
following lines describes one of the plates and contains two integers. The former integer is the radius of
the plate's bottom and the latter integer is the radius of the circle formed by the edge of the plate. The last
line contains the height <i>h</i> of the plates. All the input integers are positive and do not exceed 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “YES” if the plates can be arranged on the tray and “NO” otherwise.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 10 10
1 2
1 2
5
</PRE></TD><TD><PRE CLASS="intable">YES
</PRE></TD></TR><TR><TD><PRE CLASS="intable">8 4 1
1 2
1 3
1
</PRE></TD><TD><PRE CLASS="intable">NO</PRE></TD></TR></TABLE>
______________________________________________________
1794||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Maria Ivanovna informed all of her fifth-graders that in a month they would have a class on the topic “Masterpieces
of World Architecture.” Each of the students had to prepare a short report about a famous architectural structure.
As always, the best students prepared their reports in advance and the worst students started preparing for the
class only several minutes before it.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The class has begun. According to the tradition, at such classes the children are sitting in a circle and speaking
one after another in clockwise order. The best students like to be the first to speak, while the worst students
want to be the last because they are trying to finish their reports right during the class.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Maria Ivanovna has asked each student which in turn they want to present their reports. Now she has to decide who
will be the first to speak so that as many children as possible will have their turn to speak exactly as they want.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of students in the class (2 ≤ <i>n</i> ≤ 10<sup>5</sup>).
Maria Ivanovna has numbered all the children from 1 to <i>n</i> clockwise in the order in
which they are sitting. The second line contains integers <i>a</i><sub>1</sub>, …, <i>a<sub>n</sub></i> (1 ≤ <i>a<sub>i</sub></i> ≤ <i>n</i>)
separated with a space, where <i>a<sub>i</sub></i> is the number told by the <i>i</i>th student.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of the student who should start the class “Masterpieces of World Architecture” by presenting
their report. If there are several possible answers, output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
4 1 2 3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 1 1
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1795||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mark comes home after a day of hard work. His wife, instead of feeding him, sends him to buy some bread. When
Mark comes to a local shop, there is a long line of equally unhappy husbands. Mark joins the line. Fortunately,
the line is moving rather quickly because each husband is asked to buy only one kind of a product.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When each husband comes to the counter, he asks for some amount of the product he needs to buy. If this amount
of the product is available, he buys it and leaves the shop. If he is told that this product is unavailable,
he gets terribly upset and also leaves the shop. If the available amount of the product is less than he needs,
he doesn't know what to do and calls his wife for advice. In order to make a call without delaying the line,
he lets one person come forward and calls his wife while standing second in line. The wife tell him to buy all the remaining products. After that he comes
to the counter once again and, if the amount of the product is still the same, buys it. Otherwise, he lets one
more person come forward and calls his wife again. If it happens so that the product is no longer available after
a call, the customer leaves the shop empty-handed.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Mark is eager to return home and have dinner at last. Your task is to determine how many minutes will pass before
he gets to the counter for the first time. Each customer spends exactly one minute at the counter and has enough
time to call his wife if necessary while the following in line customer speaks to the shopgirl. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>m</i> of different products sold at the shop (1 ≤ <i>m</i> ≤ 1000). Each
of the following <i>m</i> lines describes one product. The descriptions have the form “amount&nbsp;of&nbsp;name”,
where <i>name</i> is the name of the product (a nonempty string of length at most 20 consisting of lowercase
English letters) and <i>amount</i> is the amount of units of this product left by the moment Mark entered the shop
(it is a positive integer not exceeding 1000). All the products have distinct names.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the following line you are given the number <i>n</i> of customers standing in the line before Mark
(1 ≤ <i>n</i> ≤ 1000). The following <i>n</i> lines describe the products these customers want to buy in the same
format in which the products in the shop are described. There can be more than one customer who want to buy
the same product. Customers may want to buy a product that is not available at the shop. The information
on the customers is given in the order from the beginning of the line to its end.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of minutes that Mark will stand in line before he gets to the counter for the first time.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
2 of sweets
4 of milk
1 of sausage
4
2 of milk
3 of sweets
3 of milk
1 of cheese
</PRE></TD><TD><PRE CLASS="intable">6</PRE></TD></TR></TABLE>
______________________________________________________
1796||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On a sunny Sunday, a group of children headed by their teacher came to an amusement park. Aunt Frosya,
who was a very kind and quiet person, worked at the ticket window on that day. The teacher gave her
the money but didn't say how many tickets she wanted to buy. Could Aunt Frosya determine it knowing only
the numbers of different notes the teacher gave? It is assumed that the teacher didn't give extra notes,
which means that there would not be enough money for the tickets if any of the notes was taken away.

</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains six nonnegative integers separated with a space; these are the numbers of 10, 50, 100,
500, 1000, and 5000 rouble notes the teacher gave to Aunt Frosya. In the second line you are given the price
of one ticket; it is a positive integer. All the integers in the input data do not exceed 1000.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the number of tickets the teacher wanted to buy. Output the number of possible answers in the first line.
The variants in ascending order separated with a space must be given in the second line. It is guaranteed that
there is at least one variant of the answer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 2 0 0 0 0
10
</PRE></TD><TD><PRE CLASS="intable">5
6 7 8 9 10
</PRE></TD></TR><TR><TD><PRE CLASS="intable">1 2 0 0 0 0
10
</PRE></TD><TD><PRE CLASS="intable">1
11</PRE></TD></TR></TABLE>
______________________________________________________
1800||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Anka was awarded a medal and given a buttered toast for displaying heroism
in a combat. The toast was so narrow, flat, and thin that it could be
regarded as a straight-line segment of length <i>l</i>. On Commissar Matroskin's
advice, Anka turned the toast the buttered side down and, holding it parallel
to the ground, brought it to her mouth and was ready to bite,
when suddenly…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The toast slipped out of her hands and started falling under gravity. It was
rotating at a constant angular velocity about its center of mass in the
plane perpendicular to the ground, as shown in the picture.
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your task is to determine which side of the toast touched the ground first.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the length <i>l</i> of the toast in centimeters,
the distance <i>h</i> from Anka's mouth to the ground in centimeters,
and the angular velocity &omega; of the toast's rotation in revolutions
per minute (the toast makes one revolution when it turns 360 degrees).
1 ≤ <i>l</i>, <i>h</i>, &omega; ≤ 1000. These numbers are integers
separated with a space. The acceleration of gravity should be taken equal to
9.81 m/s<sup>2</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “butter” if the toast first touched the ground the buttered side
down and “bread” otherwise. It is guaranteed that at the moment the toast
touched the ground for the first time it wasn't orthogonal to it.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 400 15
</PRE></TD><TD><PRE CLASS="intable">butter
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 500 15
</PRE></TD><TD><PRE CLASS="intable">bread
</PRE></TD></TR></TABLE>
______________________________________________________
1801||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">At the first stage of the Revolution Football Cup, all the teams are divided
into groups and play according to the all-play-all system. The organizers of
the tournament ask you to help them form the groups.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The teams should be divided into <i>g</i> groups, <i>t</i> teams in each group. The
teams have been distributed to <i>t</i> pots, <i>g</i> teams in each pot. In the
first pot there are the strongest teams, in the second pot there are teams
that are a bit less stronger, and so on. In the last pot there are the
weakest teams. It is required to form groups so that there would be exactly
one team from each pot in each group. The organizers also want all <i>t</i> teams
in each group to represent different political parties.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>g</i> and <i>t</i> separated with a
space (2 ≤ <i>g</i>, <i>t</i> ≤ 100). The following lines describe the pots.
Each line contains the name of a team and the name of the party it represents.
These names are separated with a space. The descriptions of pots are separated
with an empty line. The names of teams and parties consist of lowercase English
letters, and their lengths are in the range from 1 to 10. The names of
all teams are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to divide the teams into groups as required, output one
line containing the word “No”. Otherwise, output “Yes” and then
the description of <i>g</i> groups. Each group is described by the names
of <i>t</i> teams that are in this group, each name in a separate line.
The description of each group should be preceded by an empty line.
If there are several answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
cavalry red
guard white

infantry red
guerilla green

czechs white
gunners latvia
</PRE></TD><TD><PRE CLASS="intable">Yes

cavalry
guerilla
czechs

guard
infantry
gunners
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2
cavalry red
guard white

czechs white
cossacks white
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR></TABLE>
______________________________________________________
1802||||||true||||||
<IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petka's birthday present for Anka was an interesting wooden puzzle, which
he had made himself. The puzzle consists of six flat <i>n</i> × <i>n</i> squares.
Each square is lacquered on one side and has the other side divided into
<i>n</i><sup>2</sup> square cells. There are columns with 1 × 1 sections on some
cells; the height of each column is at most <i>n</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Help Anka use these parts to assemble a lacquered <i>n</i> × <i>n</i> × <i>n</i> cube or
determine that this is impossible. The parts of the puzzle can be
rotated arbitrarily.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (2 ≤ <i>n</i> ≤ 20). Then the six
parts of the puzzle are described. Each part is described by <i>n</i> lines
consisting of <i>n</i> integers each. These integers are the heights of the
columns on this part. The integers in each line are separated with a space.
All heights are in the range from 0 to <i>n</i>. The sum of the heights of
columns on all parts of the puzzle is <i>n</i><sup>3</sup>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If it is impossible to assemble a lacquered cube from the described six parts,
output the only line “No”. Otherwise, output “Yes” in the first
line and then describe the scheme of assembling the cube. This
description should contain <i>n</i> blocks, each block containing <i>n</i> lines
with <i>n</i> integers in each line. The first block describes the lower
layer of the cube, the second block describes the layer lying
immediately on the lower layer, and so on. The last block describes
the upper layer. The first line in the description of a layer corresponds
to the back small cubes, the second line corresponds to the small
cubes located immediately in front of the back small cubes, and so on.
The last line describes the front small cubes. The small cubes in each
line are described from left to right. Each integer is in the range
from 1 to 6 and specifies the number of the part which the corresponding
small cube belongs to (the parts are numbered from 1 to 6 as they are given
in the input). If several schemes of assembling the cube are possible,
output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
0 0 0
1 0 1
1 2 0
1 0 0
1 1 1
0 0 0
0 2 1
1 0 0
0 0 0
0 1 0
0 0 0
0 2 1
1 0 0
0 0 1
0 2 1
0 0 1
0 2 1
1 0 0
</PRE></TD><TD><PRE CLASS="intable">Yes
3 4 4
1 4 1
1 1 5
3 3 2
5 6 2
5 1 2
6 4 2
3 6 6
5 5 6
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
0 0 0
0 3 0
0 0 0
2 0 0
0 0 0
0 0 0
0 0 2
0 0 0
0 0 0
2 0 0
0 0 0
0 0 0
0 0 2
0 0 0
0 0 0
2 1 2
2 1 2
2 2 2
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR></TABLE>
______________________________________________________
1803||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Czechoslovak Legion decided to stop the fierce fighting in Siberia
and return home. However, it was not so easy to leave Russia, because
they had too little money to pay for the sea voyage from Vladivostok to Europe.
The Czechs decided to get the necessary amount of money by
selling their rifles to the advancing Red troops. The total number of rifles
they could sell was <i>n</i>. The first two rifles were ordinary, so the Czechs
asked only one rouble for each of them. The <i>i</i>th rifle (<i>i</i> ≥ 3) costs
as much as the (<i>i</i>−1)th and (<i>i</i>−2)th rifles together.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The bank notes that circulated in Russia at that time had nominal values
equal to powers of an integer <i>k</i> (there were one-rouble, <i>k</i>-rouble,
<i>k</i><sup>2</sup>-rouble notes and so on). The Red troops had occupied enough printing
plants for printing the necessary amount of notes. They paid for each rifle
the exact amount of money the Czechs asked using the minimal possible
quantity of notes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the Red Army got hold of the rifles, Chapaev asked Anka to order them
according to the quantity of notes paid for each rifle. If the same quantity
of notes was paid for two rifles, then the rifle with the smallest number
should go first. Help Anka fulfill this request.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integers <i>k</i> and <i>n</i> separated with a space
(2 ≤ <i>k</i> ≤ 10; 3 ≤ <i>n</i> ≤ 50000).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the permutation of the integers from 1 to <i>n</i> corresponding
to the numbers of rifles in the required order.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 8
</PRE></TD><TD><PRE CLASS="intable">1 2 3 4 8 7 5 6
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After Anka fulfills Chapaev's request, the costs of the rifles in roubles
will be {1, 1, 2, 3, 21, 13, 5, 8}.
</DIV></DIV>
______________________________________________________
1804||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Machinegunners women's football team has advanced to the knockout stage
of the Revolution Cup. The Cavalry team is their opponent in the first round.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">According to the rules, the teams must play two games, one at the Machinegunners'
stadium and the other at the Cavalry's stadium. The team that scores more goals
in the two games will advance to the next round. If the teams score the same number
of goals, then the team that scores more goals at the opponent's stadium will advance.
If these numbers are also the same, then the winner will be chosen at random.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The teams have played their first game already. The Machinegunners want to
work out an adequate tactics for the return game, and for this they need
to know the following two values:
<ul>
<li>the minimal number of goals they must score to get a chance to advance
to the next round;</li>
<li>the maximal number of goals they may score which leaves a chance for their opponents to advance
to the next round.</li>
</ul>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that no team can score more than thirty goals in one game.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of several test cases. The first line contains the
number of test cases <i>t</i> (1 ≤ <i>t</i> ≤ 200). Each of the following
<i>t</i> lines describes one test case and
contains the result of the first game in the form:
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><tt>The Machinegunners played <i>where</i> game, scored <i>x</i> goals, and conceded <i>y</i> goals.</tt>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>where</i> is the string “home” or “away”; 0 ≤ <i>x</i>, <i>y</i> ≤ 30.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each of test cases output in a separate line
the minimal number of goals necessary to advance to the next round and
the maximal number of goals that does not guarantee this.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><TR><TH>input</TH></TR><TR><TD><PRE CLASS="intable">2
The Machinegunners played home game, scored 28 goals, and conceded 0 goals.
The Machinegunners played home game, scored 1 goals, and conceded 1 goals.
</PRE></TD></TR><TR><TH>output</TH></TR><TR><TD><PRE CLASS="intable">0 1
1 29
</PRE></TD></TR></TABLE>
______________________________________________________
1805||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When searching the Whites' deserted headquarters, Petka and Chapaev found
several <i>n</i> × <i>n</i> squares filled with letters. Chapaev supposed that
the Whites were communicating secretly by using a cipher grille and the
squares were ciphered messages.
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A cipher grille is an <i>n</i> × <i>n</i> paper square with windows made by cutting
out <i>n</i><sup>2</sup>/4 cells. Putting the grille on a paper sheet of the same size,
the coder writes the first <i>n</i><sup>2</sup>/4 symbols of a message in the windows.
After that he turns the grille clockwise by 90 degrees. He writes the next
<i>n</i><sup>2</sup>/4 symbols of the message in the windows and turns the grille by 90
degrees again. Then he writes the following <i>n</i><sup>2</sup>/4 symbols, turns the
grille one more time, and writes the last <i>n</i><sup>2</sup>/4 symbols of the message.
Each turn of the grille covers all the symbols written earlier and opens
empty cells.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Despite searching the headquarters thoroughly, Petka and Chapaev found no
cipher grilles. Evidently, the Whites had destroyed them before leaving
the premises. On the next day Anka noticed that there was an integer <i>k</i>
written on a wall of the headquarters. She informed Chapaev at once,
and he surmised that the Whites had used the <i>k</i>th cipher grille in the
lexicographic order. In order to decipher the messages, they had to
make such a grille.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Every <i>n</i> × <i>n</i> cipher grille can be coded as an <i>n</i> × <i>n</i> matrix
consisting of zeros and ones in which ones denote windows and zeros
denote other cells. We say that a matrix <i>a</i> is lexicographically smaller
that a matrix <i>b</i> (both matrices are of the size <i>n</i> × <i>n</i>) if there
exists a number <i>i</i> such that the first <i>i</i> cells of the matrices <i>a</i>
and <i>b</i> coincide, the (<i>i</i>+1)th cell of the matrix <i>a</i> contains zero,
and the (<i>i</i>+1)th cell of the matrix <i>b</i> contains one. The cells
of matrices are numbered as in the picture.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integers <i>n</i> and <i>k</i> (4 ≤ <i>n</i> ≤ 10;
<i>n</i> is even; 1 ≤ <i>k</i> ≤ 10<sup>18</sup>). It is guaranteed that 
<i>k</i> does not exceed the total number of cipher grilles
of size <i>n</i> × <i>n</i>.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the grille Chapaev had to make in order to read the Whites'
messages.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 15
</PRE></TD><TD><PRE CLASS="intable">0000
0000
1101
0001
</PRE></TD></TR></TABLE>
______________________________________________________
1806||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each fighter of the 25th Rifle Division has been given the newest communication
device—a mobile telegraph. It can be used for sending telegrams to the command
and to fellow fighters right at the battle field. Unfortunately, the design of
telegraphs is still far from being perfect, so messages can be sent only
between some pairs of telegraphs.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each device has a unique number, which is a string consisting of ten decimal digits.
A message can be sent from a telegraph <i>a</i> to a telegraph <i>b</i> only if the number <i>b</i>
can be obtained from the number <i>a</i> by changing exactly one digit or by swapping two
digits, and the time of sending a message from the telegraph <i>a</i> to the telegraph <i>b</i>
depends on the length of the longest common prefix of their numbers: the longer
the common prefix is, the faster the message is sent.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During a battle, Anka noticed from her well-camouflaged position the group of Whites
trying to bypass Red Army fighters in the rear. What minimal time is required
to deliver this information from Anka to Chapaev by telegraph, using, possibly,
telegraphs of other Red Army fighters?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of fighters in the division
(2 ≤ <i>n</i> ≤ 50000). The second line contains ten integers in the range
from 1 to 10000 separated with a space written in the nonascending order.
These are the times of sending a message from one telegraph to another if the
length of their common prefix is zero, one, two, …, nine. The next <i>n</i>
lines contain the numbers of telegraphs given to the fighters of the division.
The number of Anka's telegraph is described first, and the number of Chapaev's
telegraph is described last. All the numbers of telegraphs are different.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the only line “-1” if it is impossible to deliver the message to Chapaev.
Otherwise, in the first line output the minimal time required to deliver the message.
In the second line output the number of fighters in the delivery path,
and in the third line output their numbers separated with a space in the
order from Anka to Chapaev. The fighters of the 25th Division are numbered
from 1 to <i>n</i> in the order in which their mobile telegraphs are described in
the input. If there are several ways to deliver the message in minimal 
time, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5
100 10 10 10 1 1 1 1 1 1
9123493342
3123493942
9223433942
3223493942
9223433945
</PRE></TD><TD><PRE CLASS="intable">211
5
1 2 4 3 5
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
1 1 1 1 1 1 1 1 1 1
0123493342
0223433945
</PRE></TD><TD><PRE CLASS="intable">-1
</PRE></TD></TR></TABLE>
______________________________________________________
1807||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During a short break in a hot battle against Kappel's corps, Petka and
Chapaev brought boxes with cartridges for the Anka's Maxim gun.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Red Army men were exhausted because they had carried more than one
box with cartridges to the machine gun, and each box contained at least
one hundred cartridges. Anka noticed that there was the same number of
cartridges in all boxes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">She wanted to put all the cartridges in several pockets so that the
greatest common divisor of the numbers of cartridges in her pockets
would be as large as possible. Among all the variants of such an
arrangement, she wanted to choose the variant in which the least common
multiple of the numbers of cartridges in her pockets would be as
large as possible too. How could she do it?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the total number <i>n</i> of cartridges
Petka and Chapaev brought (200 ≤ <i>n</i> ≤ 10<sup>9</sup>).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only output line should contain integers <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, …, <i>a</i><sub><i>k</i></sub>
separated with a space (2 ≤ <i>k</i> ≤ <i>n</i>), where <i>a</i><sub><i>i</i></sub> is the number of
cartridges Anka should put in the <i>i</i>th pocket.
If there are several answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">200
</PRE></TD><TD><PRE CLASS="intable">100 100
</PRE></TD></TR><TR><TD><PRE CLASS="intable">625
</PRE></TD><TD><PRE CLASS="intable">375 250 
</PRE></TD></TR></TABLE>
______________________________________________________
1808||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Anka had a dream in which she and Petka were in the Flat World near a planet
called Ocean. This planet was a water disk centered at the origin. Looking at
the planet, each of them saw a silhouette of a man in the water. Was it possible
that they saw the same man? Could he be Chapaev, who needed their help?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains two numbers separated with a space. The first number is
the radius of the planet Ocean; it is an integer in the range from 1 to 1000.
The second number is the refractive index of the planet Ocean; it is a real number
in the range from 1 to 100 with at most two fractional digits. The second line
contains Anka's coordinates and the coordinates of the vector along which she looks
at the man in the water. The third line contains Petka's coordinates and
the coordinates of the vector along which he looks at the man in the water.
The numbers in the second and third lines are separated with a space;
they are integers with absolute values not exceeding 1000. It is guaranteed
that Petka and Anka are at distinct points outside the planet and the points
they see are strictly inside the planet. Petka, Anka, and the men they see
inside the planet Ocean must be regarded as points.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output “Yes” if Petka and Anka may see the same man inside the planet and
“No” otherwise. It is guaranteed that in the case of the answer “Yes” the
man they see is at a distance of at least 10<sup>−4</sup> from the boundary of the planet.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">10 2.0
5 10 0 -1
-5 10 0 -1
</PRE></TD><TD><PRE CLASS="intable">Yes
</PRE></TD></TR><TR><TD><PRE CLASS="intable">10 1.5
5 10 0 -1
-5 10 0 -1
</PRE></TD><TD><PRE CLASS="intable">No
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If &alpha; is the angle between an incident ray and the normal vector to the surface
at the incidence point and &beta; is the angle between the refracted ray and the
normal vector to the surface, then the refractive index equals sin&nbsp;&alpha;&nbsp;/&nbsp;sin&nbsp;&beta;.</DIV></DIV>
______________________________________________________
1809||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Anka and Petka were waiting for Chapaev and eating potatoes. Soon they were
full and decided to play the “Chapaev” game using the remaining four
potatoes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petka took a 20 × 20 board, put the potatoes on it, and declared
the following rules. No two potatoes could lie on the same square, and a
player could shoot at a potato and knock it off the board with another
potato only if the potatoes were in the same vertical or horizontal
line and there were no other potatoes between them.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Anka suggested to take some potatoes and put them on unoccupied squares of the board so that each potato
could be used to shoot at exactly one another potato. Help Petka do this
by changing the positions of as few potatoes as possible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The four input lines contain the coordinates <i>x</i><sub><i>i</i></sub>, 
<i>y</i><sub><i>i</i></sub> of the potatoes.
The coordinates are integers in the range from 1 to 20.
No two potatoes are on the same square. 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the new coordinates of the potatoes. The potatoes must be described
in the same order as in the input.
If there are several answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1
2 2
4 4
4 3
</PRE></TD><TD><PRE CLASS="intable">1 2
2 2
4 4
4 3
</PRE></TD></TR></TABLE>
______________________________________________________
1810||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There is a system of linear antiequations modulo 3:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>a</i><sub>11</sub> · <i>x</i><sub>1</sub> + <i>a</i><sub>12</sub> · <i>x</i><sub>2</sub> + &hellip; + <i>a</i><sub>1<i>n</i></sub> · <i>x<sub>n</sub></i> ≠ <i>b</i><sub>1</sub> mod 3<br>
<i>a</i><sub>21</sub> · <i>x</i><sub>1</sub> + <i>a</i><sub>22</sub> · <i>x</i><sub>2</sub> + &hellip; + <i>a</i><sub>2<i>n</i></sub> · <i>x<sub>n</sub></i> ≠ <i>b</i><sub>2</sub> mod 3<br>
&hellip;<br>
<i>a</i><sub><i>k</i>1</sub> · <i>x</i><sub>1</sub> + <i>a</i><sub><i>k</i>2</sub> · <i>x</i><sub>2</sub> + &hellip; + <i>a<sub>kn</sub></i> · <i>x<sub>n</sub></i> ≠ <i>b<sub>k</sub></i> mod 3<br>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the number of different solutions of this system assuming that <i>x<sub>i</sub></i> are
integers and 0 ≤ <i>x<sub>i</sub></i> ≤ 2.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">First line contains two integers: the amount of antiequations <i>k</i> and
the amount of variables <i>n</i> <nobr>(1 ≤ <i>k</i>, <i>n</i> ≤ 30)</nobr>. The <i>i</i>-th of the following <i>k</i> lines
contains integers <i>a</i><sub><i>i</i>1</sub>, <i>a</i><sub><i>i</i>2</sub>, &hellip;, <i>a<sub>in</sub></i>, <i>b<sub>i</sub></i> (0 ≤ <i>a<sub>ij</sub></i>, <i>b<sub>i</sub></i> ≤ 2).
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of solutions of the system.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 3
2 2 1 1
2 1 0 0
1 2 2 2
</PRE></TD><TD><PRE CLASS="intable">8
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4 3
2 2 1 1
2 1 0 0
1 2 2 2
1 0 1 2
</PRE></TD><TD><PRE CLASS="intable">6
</PRE></TD></TR></TABLE>
______________________________________________________
1811||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Petr, a student, wants to make money with SMS-spam. Of course he wants to spend as little money as possible for sending a message and send messages as quick as he can. Petr decided to buy a new Dual-SIM mobile phone, which can work with SIM-cards of two different mobile operators simultaneously. Now Petr can send a message to a certain phone number via one of two chosen operators which requests less money for that.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, not all mobile operators allow sending messages to numbers of all other operators via them. Help Petr choose a pair of operators in such a way that he would be able to send messages to numbers of all operators and the maximum cost of sending a message would be minimal possible.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>n</i> and <i>k</i>
(2 ≤ <i>n</i> ≤ 10<sup>4</sup>; 0 ≤ <i>k</i> ≤ 10<sup>5</sup>).
<i>n</i> is equal to the total number of mobile operators.
Each of the following <i>k</i> lines contains integers <i>x</i>, <i>y</i>
and <i>c</i> (1 ≤ <i>x</i>, <i>y</i> ≤ <i>n</i>; 1 ≤ <i>c</i> ≤ 10<sup>9</sup>), which means
that Petr can send an SMS via operator <i>x</i> to a phone number of operator <i>y</i> for cost <i>c</i>.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal cost of sending an SMS, which can be achieved by choosing an optimal pair of operators, or “No solution” if it is impossible to choose a required pair of operators.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 13
1 1 1
1 2 3
1 3 3
1 4 5
2 1 2
2 2 1
2 3 2
3 1 4
3 3 4
3 4 1
4 1 2
4 2 3
4 4 3
</PRE></TD><TD><PRE CLASS="intable">2
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2 2
1 1 3
2 1 4
</PRE></TD><TD><PRE CLASS="intable">No solution
</PRE></TD></TR></TABLE>
______________________________________________________
1812||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The natives of an island in the Pacific between 35 and 36 degrees of southern latitude have the following custom. The chief of the tribe draws a line <i>l</i> on the sand. After that all natives can only draw circles that touch the line <i>l</i>. All these circles should lie on the same side of <i>l</i> and no circle should lie inside another circle or have at least two common points with another circle. The natives call two such circles <i>neighbors</i> if and only if they externally touch each other, and there is no circle between them that also touches the line <i>l</i>.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the line <i>l</i> is drawn, the chief's daughter (let's call her victim) draws two neighboring circles with radii <i>r</i><sub>1</sub> and <i>r</i><sub>2</sub>. After that <i>n</i> natives come to the drawing in turns and each of them for each pair of neighboring circles inscribes a new circle that touches the line <i>l</i> and both circles in the pair. At the end all circles are numbered with consecutive integers starting from 1 in the same order as their touching points with line <i>l</i> are situated along line <i>l</i> (circle with radius <i>r</i><sub>1</sub> has number 1). The victim will be eaten if the radius of the <i>i</i>-th circle is rational. Help her find this radius and prepare for her fate in advance.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains integers <i>r</i><sub>1</sub>, <i>r</i><sub>2</sub>, <i>n</i> and <i>i</i>
(1 ≤ <i>r</i><sub>1</sub>, <i>r</i><sub>2</sub> ≤ 1000; 0 ≤ <i>n</i> ≤ 30; 1 ≤ <i>i</i> ≤ 2<sup><i>n</i></sup> + 1).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the radius is irrational, output a single line “Irrational”. Otherwise, output
in a single line a radius of the <i>i</i>-th circle in the form of irreducible fraction.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1 1 1 2
</PRE></TD><TD><PRE CLASS="intable">1/4
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3 5 2 4
</PRE></TD><TD><PRE CLASS="intable">Irrational
</PRE></TD></TR></TABLE>
______________________________________________________
1813||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once Sasha decided that a random shuffler in his favourite media player
should be replaced. Sasha wants to calculate the order of songs according
to the following rule:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_center"><i>x</i><sub>0</sub> = 0,<br>
<i>x<sub>i</sub></i> = (<i>x</i><sub><i>i</i> − 1</sub> · <i>a</i> + <i>b</i>) mod <i>m</i>,<br>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">where <i>m</i> is the total number of songs, <i>a</i> and <i>b</i> are integers in range from 0 to <i>m</i> − 1.
Generated sequence of song numbers should satisfy the following rules:
<ul>
<li> <i>x</i><sub>0</sub> &hellip; <i>x</i><sub><i>m</i> − 1</sub> should be a permutation of integers from 0 to <i>m</i> − 1,
<li> <i>x<sub>m</sub></i> should be equal to zero.
</ul>
Sasha wants to find all pairs (<i>a<sub>i</sub></i>, <i>b<sub>i</sub></i>), resulting in a valid sequences and calculate the average among all <i>a<sub>i</sub></i>. Help him do it.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The input consists of at most 100 test cases. Each test case is a single line containing an integer <i>m</i> (1 &lt; <i>m</i> &lt; 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output in a single line the average among <i>a<sub>i</sub></i>, rounded down.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
36
100
123
</PRE></TD><TD><PRE CLASS="intable">1
13
41
1
</PRE></TD></TR></TABLE>
______________________________________________________
1814||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is known that any irrational number <i>d</i> greater than 1 can
be represented as infinite continued fraction:
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Here <i>a<sub>i</sub></i> are positive integers. A <i>convergent fraction of order k</i> of number <i>d</i> is a rational number [<i>a</i><sub>0</sub>, <i>a</i><sub>1</sub>, &hellip;, <i>a<sub>k</sub></i>], that is a representation of <i>d</i> as a continued fraction, truncated to the first <i>k</i> + 1 elements.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given an integer <i>x</i>, find numerator and denominator
of convergent continued fraction of order <i>k</i> of the square root of <i>x</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains integers <i>x</i> and <i>k</i>
(2 ≤ <i>x</i> ≤ 10<sup>6</sup>; 0 ≤ <i>k</i> ≤ 10<sup>9</sup>). <i>x</i> is not a perfect square.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the value of the convergent continued fraction of order <i>k</i> of the square root of <i>x</i> as an irreducible fraction. Output numerator and denominator modulo 10<sup>9</sup> + 7.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 3
</PRE></TD><TD><PRE CLASS="intable">17/12
</PRE></TD></TR></TABLE>
______________________________________________________
1815||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Government of the cities Los Santos, San Fierro and Las Venturas, situated within the state San Andreas, decided to build a farm. Citizens of Los Santos claimed that they will travel to the farm by subway, citizens of San Fierro will travel by car and citizens of Las Venturas will travel by train.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You know the amount of money required to build one kilometer of subway line, one kilometer of highway and one kilometer of railroad. Help the government choose a place for the farm that would minimize the total amount of money required to build roads of all three types.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of test cases <i>t</i> (1 ≤ <i>t</i> ≤ 10<sup>4</sup>). Each test case consists of four lines. The first three lines contain the coordinates of Los Santos, San Fierro and Las Venturas, respectively. All coordinates are integers and don't exceed 1000 in their absolute value. The fourth line contains the costs of building a kilometer of subway line, highway and railroad. These costs are positive integers, not exceeding 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output in a single line the minimal amount of money required to build all roads from the cities to the farm, with absolute or relative error not exceeding 10<sup>−9</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
0 0
1 0
0 1
1 1 1
-3 0
3 5
0 -1
7 9 8
</PRE></TD><TD><PRE CLASS="intable">1.9318516526
81.1600672826
</PRE></TD></TR></TABLE>
______________________________________________________
1816||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Once Alexander decided to learn Pollard's method. However,
he didn't understand this method well enough, and as a result he
implemented the following algorithm which decomposes an integer <i>n</i>:</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal"><ol>
<li> If <i>n</i> is prime, return <i>n</i>.
<li> Otherwise, choose a random <i>r</i>
 in the range [1, 10<sup>18</sup>] and calculate <i>g</i>, the greatest common divisor
 of <i>n</i> and <i>r</i>.
<li> If <i>g</i> = 1 or <i>g</i> = <i>n</i>, repeat step 2, otherwise
 run the algorithm recursively for numbers <i>g</i> and <i>n/g</i> and
 return the union of the resulting divisor lists.
</ol>
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Alexander wants to know the number of times the greatest common divisor will
be calculated at step 2 for a given <i>n</i>. Help him find this number.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains an integer <i>n</i> (2 ≤ <i>n</i> ≤ 10<sup>9</sup>).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the expected number of times the greatest common divisor
will be calculated, with absolute or relative error not exceeding 10<sup>−6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">12
</PRE></TD><TD><PRE CLASS="intable">4.8571428571
</PRE></TD></TR><TR><TD><PRE CLASS="intable">8
</PRE></TD><TD><PRE CLASS="intable">6.6666666667
</PRE></TD></TR></TABLE>
______________________________________________________
1817||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">There are <i>n</i> horses on the platform of a merry-go-round at amusement park. Horses are installed evenly along the circle. Merry-go-round makes one full revolution in <i>n</i> seconds. When a kid wants to get on the merry-go-round, he approaches a random horse and tries to get on it. If it is occupied, the kid will wait until the horse near him is free. All kids who want to get on the merry-go-round use the described algorithm and no kid ever get off it.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Calculate the expected time a kid will have to wait at the merry-go-round, depending on
the number of kids that are riding the merry-go-round at the moment.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains an integer <i>n</i> (2 ≤ <i>n</i> ≤ 20).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output <i>n</i> lines. The <i>i</i>-th line should contain the only number, which is the expected
number of seconds a kid will have to wait near the merry-go-round if <i>i</i> − 1 kids are riding it. All
numbers should have absolute or relative error not exceeding 10<sup>−6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
</PRE></TD><TD><PRE CLASS="intable">0.000000
0.250000
0.687500
1.500000
</PRE></TD></TR></TABLE>
______________________________________________________
1818||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Fishermen caught a lot of fishes and, of course, they drank. In the morning it was the time to divide fishes.
The first who woke up counted the fishes and it happened that in order to divide fishes equally he should throw away <i>a</i><sub>1</sub> fishes. So he did that: threw away <i>a</i><sub>1</sub> fishes and took his part. The second who woke up didn't know that the first fisherman took his part. He behaved the same as the first one: threw away <i>a</i><sub>2</sub> excess fishes and took his part. The same story happened with the rest of the fishermen.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Given the amount of fishes thrown away by each fisherman, find the minimal possible number of fishes they caught. It is known that they caught at least one fish.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains an integer <i>n</i> (2 ≤ <i>n</i> ≤ 2000).
The second line contains integers <i>a</i><sub>1</sub>, &hellip;, <i>a<sub>n</sub></i> <nobr>(0 ≤ <i>a<sub>i</sub></i> ≤ <i>n</i> − 1)</nobr>, where <i>a<sub>i</sub></i> is the number of fishes thrown away by the <i>i</i>-th fisherman.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of fishes the fishermen had to catch.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
1 1
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR><TR><TD><PRE CLASS="intable">3
1 0 2
</PRE></TD><TD><PRE CLASS="intable">19
</PRE></TD></TR></TABLE>
______________________________________________________
1819||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Denis, Eugene and Misha take professional approach to ACM ICPC. They
don't have any common interests and communicate with each other only
during the competitions. Recently they arrived in Saint Petersburg to
participate in the regional contest and haven't seen each other yet.
At morning before the contest they will leave their hotel at different times
and will go to the contest site, Anichkov palace. Help them find out
if there are such three paths from the hotel to Anichkov palace, that
no two of them share a common road segment.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains integers <i>n</i> and <i>k</i> (2 ≤ <i>n</i> ≤ 50000;
1 ≤ <i>k</i> ≤ 50000), which are the number of crossroads and the number of road segments in Saint Petersburg,
respectively. Crossroads are numbered with integers from 1 to <i>n</i>.
Each of the following <i>k</i> lines contains two different integers, which are the
numbers of crossroads, connected by a road segment. All road segments are bidirectional.
There is at most one road segment between any
two crossroads. The next line contains the number of test cases <i>q</i>
(1 ≤ <i>q</i> ≤ 50000). Each of the following <i>q</i> lines contains
two different integers, which are the numbers of crossroads, where the hotel and
Anichkov palace are situated, respectively.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test case output “Yes” if there are three such paths that no two
of them share a common road segment. Otherwise, output “No”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 9
1 2
1 5
1 4
1 6
2 3
3 4
3 5
4 5
4 6
9
1 2
1 3
1 5
2 4
5 6
3 6
3 4
2 6
2 3
</PRE></TD><TD><PRE CLASS="intable">No
Yes
Yes
No
No
No
Yes
No
No
</PRE></TD></TR></TABLE>
______________________________________________________
1820||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the personal contest, happy but hungry programmers dropped into the 
restaurant “Ural Steaks” and ordered <i>n</i> specialty steaks. Each steak is 
cooked by frying each of its sides on a frying pan for one minute.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Unfortunately, the chef has only one frying pan, on which at most <i>k</i> steaks 
can be cooked simultaneously. Find the time the chef needs to cook the steaks.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains the integers <i>n</i> and <i>k</i> separated with a space 
(1 ≤ <i>n</i>, <i>k</i> ≤ 1000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal number of minutes in which the chef can cook <i>n</i> steaks.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3 2
</PRE></TD><TD><PRE CLASS="intable">3
</PRE></TD></TR></TABLE>
______________________________________________________
1821||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In a biathlon race with staggered starts the contestants start by turns with an 
interval of 30 seconds, that is why the contestant who finished first is not 
necessarily the first in the final results table. For example, if a biathlete 
who started second came to the finish 25 seconds later than the biathlete who 
started first, then she ran the race 5 seconds faster and would be placed 
higher in the results table.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Only three years remain until the 2014 Winter Olympic Games, which will be held 
in the city of Yekaterinozavodsk. A new biathlon course is almost complete, and 
the shooting range and stands have already been built.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">It is planned to mount an electronic scoreboard near the stands. During a race 
the scoreboard will show the name of the contestant with the current best 
result. You are asked to write a program to determine such a contestant. You 
have taken the final protocol of the recent Biathlon World Championships as 
initial data for testing your program. The protocol contains the names of 
biathletes and their running times. The names are given in the order of starts. 
To verify the correctness of the program, you should find all contestants whose 
names must appear on the scoreboard.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of biathletes participating in the race <i>n</i> 
(1 ≤ <i>n</i> ≤ 100). In the <i>i</i>-th of the following <i>n</i> lines you are given 
the name of the contestant who was <i>i</i>-th to start and, after a space, the 
contestant's running time in the format “mm:ss.d” given with an accuracy of 
tenths of a second. It is guaranteed that no two contestants finished 
simultaneously and no two contestants showed the same result. The name of a 
biathlete is a nonempty string consisting of English letters of length at 
most 20. The first letter of a name is capital and the other letters are small. 
The names of all the contestants are different.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the number of biathletes who were leaders of the race 
immediately after their finish. Then output the names of these contestants in 
the lexicographic order, one per line.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
Zaitseva 21:38.2
Hauswald 21:21.0
Boulygina 22:04.4
Henkel 22:06.1
Wilhelm 21:11.1
Jonsson 22:05.8
</PRE></TD><TD><PRE CLASS="intable">3
Hauswald
Wilhelm
Zaitseva
</PRE></TD></TR></TABLE>
______________________________________________________
1822||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The glorious King Hugo II has declared a war—a war that is holy, 
victorious, almost bloodless, but ruinous!</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Right after declaring the war the king has started summoning the army. He 
plans to send a recruitment order to all his immediate vassals, who will 
send the order to their vassals, and so on. In the end, every nobleman of 
the kingdom will be involved in the preparation for the war.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">As soon as a nobleman who has no vassals receives the order, he 
immediately begins recruiting soldiers and joins his overlord in a few 
days. If a nobleman has vassals, he waits until there are at least <i>x</i>% 
of his immediate vassals ready for the war, then summons his own troops 
and also joins his overlord. 
The glorious King Hugo II will go the war as soon as at least <i>x</i>% of his 
immediate vassals are ready.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">King Hugo II wants to state the number <i>x</i> in his recruitment order. The 
king needs as many soldiers as possible for his military campaign. 
However, if the recruitment takes more than <i>t</i> days, the enemy may learn 
about the imminent intrusion and strike first. Help Hugo II find the 
maximal possible value of <i>x</i>.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of noblemen in the kingdom and the 
maximal number of days <i>t</i> that can be spent for summoning the army
(1 ≤ <i>n</i> ≤ 10<sup>4</sup>; 0 ≤ <i>t</i> ≤ 10<sup>6</sup>). The 
noblemen are numbered from 1 to <i>n</i>. King Hugo II has number 1, and the 
noblemen with numbers from 2 to <i>n</i> are described in the following 
<i>n</i> − 1 lines. The <i>i</i>-th of these lines describes the nobleman 
with number <i>i</i> and contains integers <i>p<sub>i</sub></i> and 
<i>t<sub>i</sub></i>, where <i>p<sub>i</sub></i> is the number of his 
overlord and <i>t<sub>i</sub></i> is the number of days the <i>i</i>-th 
nobleman will need to summon his troops 
(1 ≤ <i>p<sub>i</sub></i> ≤ <i>n</i>; 0 ≤ <i>t<sub>i</sub></i> ≤ 100).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the maximal possible value of <i>x</i> with absolute error at most 10<sup>−4</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6 3
1 2
2 2
2 1
1 2
1 4
</PRE></TD><TD><PRE CLASS="intable">50.00000000
</PRE></TD></TR></TABLE>
______________________________________________________
1823||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Many of you know the universal method of solving simple physics problems: you 
have to find in a textbook an identity in which you know the values of all the 
quantities except for one, substitute the numbers into this identity, and 
calculate the unknown quantity.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">This problem is even easier. You know right away that the identity needed for 
its solution is the Clapeyron–Mendeleev equation for the state of an ideal 
gas. This equation relates the pressure of an ideal gas <i>p</i>, the amount of substance <i>n</i>, the volume 
occupied by the gas <i>V</i>, and the temperature <i>T</i>. 
Given three of these quantities, you have to find the fourth quantity. Note 
that the temperature of a gas and the volume occupied by it must always be 
positive.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each of the three input lines has the form “X = value”, where <i>X</i> is the 
symbol for a physical quantity and <i>value</i> is a nonnegative integer not 
exceeding 1000. The three lines specify the values of three different 
quantities. Pressure is specified in pascals, amount of 
substance in moles, volume in cubic meters, and temperature in kelvins. It is guaranteed that the 
temperature and volume are positive. The universal gas constant <i>R</i> should be 
taken equal to 8.314 J / (mol · K).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the input data are inconsistent, output the only line “error”. If the 
value of <i>X</i> can be determined uniquely, output it in the format “X = 
value” with an accuracy of 10<sup>−3</sup>. If it is impossible to uniquely determine 
the value of <i>X</i>, output the only line “undefined”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">p = 1
n = 1
V = 1
</PRE></TD><TD><PRE CLASS="intable">T = 0.120279
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Recall that Pa = N / m<sup>2</sup> and J = N · m.</DIV></DIV>
______________________________________________________
1824||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the six years that passed since the first experimental genie bombardments, 
Pitirim Schwartz has made considerable advance. His latest invention is an 
ifrit bottle, which has been developed especially for bombing large cities. 
Each ifrit from such a bottle ruins everything within a radius of <i>r</i> miles 
from the impact point. Only a few ifrit bottles are needed to demolish all <i>n</i> 
large cities of a neighboring country… Alas, Pitirim has very few ifrit 
bottles, so he has asked programmer Privalov to compute the minimal number of 
bottles needed for the destruction of all the cities.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For the convenience of aiming, the bottles can only be dropped exactly on 
cities. The radius of destruction is so large that cities can be regarded as 
points of the plane. When an ifrit bottle is dropped, any city within or on the 
border of the destruction zone is demolished.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line you are given integers <i>n</i> and <i>r</i> (1 ≤ <i>n</i> ≤ 30;
1 ≤ <i>r</i> ≤ 1000). The <i>i</i>-th of the following <i>n</i> lines contains the 
coordinates of the <i>i</i>-th city; these are two integers in the range from 0 
to 1000.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal number of bottles needed to demolish all 
the cities. In the following line give the numbers of the cities on which the 
bottles should be dropped. The numbers must be separated with a space. 
If there are many ways to drop the bottles you can output any of them.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 50
10 10
500 500
501 501
999 999
</PRE></TD><TD><PRE CLASS="intable">3
1 3 4
</PRE></TD></TR></TABLE>
______________________________________________________
1825||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The very first use of ifrit bottles caused mass protests from the world 
community. The UNESCO declared that ifrit bombardments were destroying the 
historical centers of large cities, which had a tremendous cultural importance.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Pitirim Schwartz corrected the behavior of ifrits so that the centers of the 
cities remained untouched. The destruction zone now was a ring instead of a 
disk: ifrits destroyed everything that was no closer than <i>r</i> and no farther 
than <i>R</i> from the impact point of the bottle.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To estimate the efficiency of carpet ifrit bombardments, Pitirim needs to be 
able to calculate the total area of the destruction zone in the case of 
dropping two ifrit bottles.</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only input line contains integers <i>d</i>, <i>r</i><sub>1</sub>, <i>R</i><sub>1</sub>,
<i>r</i><sub>2</sub>, and <i>R</i><sub>2</sub>, which are the distance between the impact
points of the bottles, the inner and outer radii of destruction of the first bottle,
and the inner and outer radii of destruction of the second bottle, respectively (0 ≤ <i>d</i> ≤ 15000;
1 ≤ <i>r<sub>i</sub></i> &lt; <i>R<sub>i</sub></i> ≤ 15000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the total destruction area with an absolute or relative error of at 
most 10<sup>−6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">200 100 300 200 300
</PRE></TD><TD><PRE CLASS="intable">353992.933435
</PRE></TD></TR></TABLE>
______________________________________________________
1826||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">To fulfill an assignment, a reconnaissance group of <i>n</i> people must cross the 
enemy's minefield. Since the group has only one mine detector, the following 
course of action is taken: two agents cross the field to the enemy's side and 
then one agent brings the mine detector back to the remaining group. This is 
repeated until only two agents remain. These two agents then cross the field 
together.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Each person gets across the field at their own speed. The speed of a pair is 
determined by the speed of its slower member.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Find the minimal time the whole group needs to get over the minefield.</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (2 ≤ <i>n</i> ≤ 100). The <i>i</i>-th of 
the following <i>n</i> lines specifies the time the <i>i</i>-th member of the group needs 
to get over the minefield (the time is an integer from 1 to 600).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimal total time the group needs to cross the minefield.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
1
10
5
2
</PRE></TD><TD><PRE CLASS="intable">17
</PRE></TD></TR></TABLE>
______________________________________________________
1827||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Indigenous tribes of an island country located in the Pacific Ocean 
between the 35th and 36th degrees of southern latitude are often at war 
with each other. Recently, scientists have found that the natives describe 
all internal conflicts in a special book. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since the aborigines have no calendar, they remember a day by the number 
of stars that can be seen in the sky in the evening. For each of the 
conflicts, the aborigines write in the book three integers: the number of 
stars in the sky that are seen on the first evening of the conflict <i>x</i>, 
the number of stars in the sky that are seen on the last evening of the 
conflict <i>y</i>, and the length <i>d</i> of the conflict in days including the 
first and the last days. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The scientists know how many stars the native could seen in the sky each 
of the last <i>n</i> evenings. Help the scientists to determine when the 
natives could be at war with each other using this information and the 
records in the book. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (2 ≤ <i>n</i> ≤ 10<sup>5</sup>). 
The second line contains integers <i>a</i><sub>1</sub>, …, 
<i>a</i><i><sub>n</sub></i> separated with a space, where  
<i>a<sub>i</sub></i> is the number of stars the natives could see in the 
sky <i>i</i> days ago (0 ≤ <i>a<sub>i</sub></i> ≤ 2 · 10<sup>8</sup>). In 
the third line you are given the number <i>m</i> of internal conflicts 
recorded in the book (1 ≤ <i>m</i> ≤ 10<sup>5</sup>). The <i>i</i>-th of 
the following <i>m</i> lines contains numbers <i>x<sub>i</sub></i>, 
<i>y<sub>i</sub></i>, and <i>d<sub>i</sub></i>, which describe the 
<i>i</i>-th internal conflict (0 ≤ <i>x<sub>i</sub></i>, 
<i>y<sub>i</sub></i> ≤ 2 · 10<sup>8</sup>; 2 ≤ <i>d<sub>i</sub></i> ≤ 50). 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a line of length <i>n</i> consisting of zeros and ones. If the 
aborigines could be at war <i>i</i> days ago, then there must be one in the 
<i>i</i>-th position of the line. 
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
6 5 4 3 2 1
3
2 4 3
4 5 2
1 6 5
</PRE></TD><TD><PRE CLASS="intable">011110
</PRE></TD></TR></TABLE>
______________________________________________________
1828||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Your are given a sequence of integers <i>a</i><sub>1</sub>, …, <i>a<sub>n</sub></i>. Find an arithmetic 
progression <i>b</i><sub>1</sub>, …, <i>b<sub>n</sub></i> for which the 
value ∑(<i>a<sub>i</sub></i> − <i>b<sub>i</sub></i>)<sup>2</sup> is minimal. The elements of the progression can be 
non-integral. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of elements in the sequence (2 ≤ <i>n</i> 
≤ 10<sup>4</sup>). In the second line you are given the integers <i>a</i><sub>1</sub>, …, <i>a<sub>n</sub></i>;
their absolute values do not exceed 10<sup>4</sup>. 
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output two numbers separated with a space: the first term of the required 
arithmetic progression and its difference, with an absolute or relative error 
of at most 10<sup>−6</sup>. It is guaranteed that the answer is unique for all input 
data. 
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
0 6 10 15
</PRE></TD><TD><PRE CLASS="intable">0.400 4.900
</PRE></TD></TR><TR><TD><PRE CLASS="intable">4
-2 -2 -2 -2
</PRE></TD><TD><PRE CLASS="intable">-2 0
</PRE></TD></TR></TABLE>
______________________________________________________
1829||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Routers are special devices used to forward data packets in modern computer 
networks. The behavior of a router is defined by a routing table. This table 
consists of several lines each of which contains the IP address of a 
destination network <i>d</i>, a mask <i>m</i>, and the IP address of a gateway <i>g</i>. For 
example, the line “192.168.24.0 255.255.255.0 192.168.14.1” means that a 
packet addressed to network 192.168.24.0 with mask 255.255.255.0 should 
be forwarded through gateway 192.168.14.1. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An IP address is a 32-bit integer, which is divided 
for convenience into four bytes. The value of each byte is written in decimal 
notation and these values are separated by dots. For example, the notation 
192.168.24.0 means the binary number 11000000101010000001100000000000. 
Masks are written similarly; moreover, the binary representation of a mask is 
started with ones only, which are followed by zeros only.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The algorithm of choosing a route is as follows. Consider a packet sent to 
address <i>a</i>. The router selects form the table all the lines satisfying the 
condition <i>d</i> and <i>m</i> = <i>a</i> and <i>m</i> (`and' is the bitwise AND operation). A line 
with the maximal number of ones in the mask is then chosen from these lines and 
the packet is sent to the gateway specified in this line. It is guaranteed that 
there is at most one such line for any destination address. 
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Two routing tables are equivalent if a packet with any destination address will be sent to 
the same gateway (or will not be sent at all) according to these tables. The following
routing tables are equivalent:
<table>
<td>
<pre>
192.168.0.0 255.255.255.0 192.168.14.1
192.168.1.0 255.255.255.0 192.168.14.1
192.168.2.0 255.255.255.0 192.168.14.2
192.168.3.0 255.255.255.0 192.168.14.2
<pre>
</td><td>
<pre>
192.168.0.0 255.255.252.0 192.168.14.1
192.168.2.0 255.255.254.0 192.168.14.2


</pre>
</td>
</table>
Write a program to check if two routing tables are equivalent. 
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of lines in the first routing table.
This table is given in the following lines in the 
format described above. Then follows the second routing table in the same format.
The total number of lines in these tables doesn't exceed 65536.</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">If the tables are equivalent, output “YES”. Otherwise, output “NO”.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4
192.168.0.0 255.255.255.0 192.168.14.1
192.168.1.0 255.255.255.0 192.168.14.1
192.168.2.0 255.255.255.0 192.168.14.2
192.168.3.0 255.255.255.0 192.168.14.2
2
192.168.0.0 255.255.252.0 192.168.14.1
192.168.2.0 255.255.254.0 192.168.14.2
</PRE></TD><TD><PRE CLASS="intable">YES

</PRE></TD></TR><TR><TD><PRE CLASS="intable">1
192.168.0.0 255.255.255.0 192.168.14.1
2
192.168.0.0 255.255.255.0 192.168.14.1
172.16.0.0 255.255.0.0 172.16.0.1</PRE></TD><TD><PRE CLASS="intable">NO
</PRE></TD></TR></TABLE>
______________________________________________________
1830||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Russian National Operating System (RNOS) is going to be released soon, and its help system is finished already. A user can open the front page of the help system by pressing the F1 button. If the front page is open, then pressing F1 will close it. This seems to be very simple, but the developers of the help system have applied some innovations…
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The help information is presented on several pages, and each following page describes the same issues as the preceding page but in more detail and in a smaller type. Each page except for the last one has two buttons: “Open next page” and “Close next page.” Of all the open pages, the user can see only the least detailed one, while all the other pages are inaccessible.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You want to learn using the help of the RNOS. Start with the simple task of changing the set of open help pages in a minimum number of operations.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number <i>n</i> of help pages in the RNOS (1 ≤ <i>n</i> ≤ 50). In the second line you are given the initial set of open pages in the form of a line consisting of <i>n</i> ones and zeros. The <i>i</i>-th symbol is 1 if the <i>i</i>-th page is open and 0 otherwise. In the third line you are given the required set of open pages in the same format.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimum number of operations (mouse clicks and keystrokes) necessary for changing the set of open pages.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">3
111
000
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The optimal sequence of operations: close the first page by pressing F1, close the third page using the button on the second page, open the first page by pressing F1, close the second page using the button on the first page, and close the first page by pressing F1.</DIV></DIV>
______________________________________________________
1831||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tsyfirkin's new student Feofan is much more intelligent and bright than Mitrofanushka. In the first three lessons, he has learned to add positive integers in columns, not very quickly but without mistakes. For this he uses the following algorithm.

<ol>
<li>Feofan adds numbers from right to left: first he adds units, then tens, and so on.
<li>He takes the pair of digit in each successive column and adds them.
<li>If a 1 is carried from the previous column, Feofan adds it to the obtained sum.
<li>He writes the rightmost digit of the sum in the answer line and, if necessary, makes a mark about carrying 1 to the next column.
<li>If there are no more columns and there is a 1 carried from the leftmost column, then Feofan writes 1 on the left of the answer.
</ol>

Feofan needs one second to write one digit or to make a mark about carrying a 1. If at least one of summands is 0 or 1, then Feofan spends one second adding them; if both numbers are greater than 1, then he adds them in two seconds. However, having added two numbers, Feofan remembers the result and can recall it afterwards in one second. If he needs to calculate <i>a</i> + <i>b</i> and he has calculated <i>b</i> + <i>a</i> before, then he also can use the result obtained earlier. Unfortunately, Feofan does not remember all the results at the next lesson and has to calculate and remember them anew.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For example, Feofan adds the numbers 526 and 625 in 12 seconds: he spends four seconds for writing the digits of the answer, two seconds for making marks about carrying over, two seconds for calculating each of the sums 6 + 5 and 2 + 2, and one second for calculating each of the sums 4 + 1 and 5 + 6 (since he remembers from the previous calculations that 6 + 5 = 11).
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the beginning of a new lesson Tsyfirkin writes on the blackboard two <i>k</i>-digit integers and gives Feofan the task of adding them. Tsyfirkin has chosen each of the integers with equal probabilities from the set of positive <i>k</i>-digit integers without leading zeros. Find the mathematical expectation of the time Feofan will need to add the integers.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the only line you are given the integer <i>k</i> (1 ≤ <i>k</i> ≤ 5000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the expected time of adding two positive <i>k</i>-digit integers with an absolute or relative error of at most 10<sup>−6</sup>.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
</PRE></TD><TD><PRE CLASS="intable">7.51530864
</PRE></TD></TR></TABLE>
______________________________________________________
1832||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Arirang Show is a magnificent performance given annually in the North Korean capital Pyongyang. The show is very popular, and the cost of tickets can be as high as 300 dollars.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Tens of thousands of dancers take part in the performance each year. In one of the episodes of the 2011 show <i>n</i> dancers line up and then divide into <i>d</i> groups (<i>d</i> is a proper divisor of <i>n</i>). In each of the groups the dancers make a circle holding each others' hands and circle around. There are dancers with numbers 1, <i>d</i> + 1, 2<i>d</i> + 1, …, <i>n</i> − <i>d</i> + 1 in the first circle, dancers with numbers 2, <i>d</i> + 2, <nobr>2<i>d</i> + 2</nobr>, …, <i>n</i> − <i>d</i> + 2 in the second circle, and so on. In the last circle there are dancers with numbers <i>d</i>, 2<i>d</i>, …, <i>n</i>.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Organizers of the show ask you to distribute the colors of the dancers' shirts so that in each circle any two neighbors wear shirts of different colors. You have been told the number <i>n</i>, but when you asked about the value of <i>d</i> the organizers said: “You are not allowed to know this number.” </DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The organizer can make shirts of only 26 different colors. Can you satisfy their request regardless of the choice of the number <i>d</i>?
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The only line contains the integer <i>n</i> (2 ≤ <i>n</i> ≤ 300000).</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output a line of length <i>n</i> consisting of lowercase English letters. The <i>i</i>-th symbol should denote the color of the <i>i</i>-th dancer's shirt (the colors are coded by letters from “a” to “z”). If there are several correct answers, output any of them. If it is impossible to arrange the colors as required, output “Impossible”.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
</PRE></TD><TD><PRE CLASS="intable">acacbdb
</PRE></TD></TR></TABLE>
______________________________________________________
1833||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On August 15, 2008, the rowers from Nizhny Tagil Mikhail Kuznetsov and Dmitry Larionov won a bronze Olympic medal in the men's slalom canoe double event.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After that, the regional administration decided to support the Canoe Slalom School “Polyus” in Nizhny Tagil, where the athletes had trained. There were <i>n</i> young canoeists training at the school at that time. The principal of the school reported that <i>m</i> crews of tandem canoes had won national competitions in the years preceding the Olympics. Some of the athletes had won more than once as members of different crews. The principal asked the administration to pay the athletes bonuses so that the total bonus of each of the winning crews would be at least <i>k</i> roubles.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">However, because of the financial crisis, officials from the Ministry for Physical Education and Sport tried to spend as little money as possible for granting the principal's wish. What bonuses were paid to the young athletes?</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>n</i>, <i>k</i>, and <i>m</i> (2 ≤ <i>n</i> ≤ 500;
1 ≤ <i>k</i> ≤ 10000; 0 ≤ <i>m</i> ≤ 100000). In each of the following <i>m</i> lines you are given two different integers separated with a space. These are the numbers of athletes from one of the winning crews. The students of the school are numbered from 1 to <i>n</i>. Each winning crew enters the list only once.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output in the <i>i</i>-th line the amount of the bonus paid to the <i>i</i>-th athlete with an absolute error of at most 10<sup>−6</sup>.
If there are several answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">4 1000 4
1 2
1 3
2 4
3 4
</PRE></TD><TD><PRE CLASS="intable">146.5
853.5
853.5
146.5
</PRE></TD></TR></TABLE>
______________________________________________________
1834||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">After the Battle of Stalingrad the divisions of the Soviet Army that participated in Operation Ring were re-equipped and sent to other sectors of the front by railway.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">When the first train with troops and tanks had been formed, it turned out that the railroaders hadn't thought of the order of the cars. It was decided to use a dead end near the Lazur chemical plant for sorting the cars. Because of its shape, and, perhaps, because of the dozens of German attacks repelled there in November 1942, the dead end was named by German dive-bombers the “Tennis Racket.”
</DIV></DIV><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration" ALIGN="RIGHT" CLASS="problem_raimage"><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The train is sorted as follows. It is driven tailfirst to the fork and the rear car is uncoupled and brought into the loop. The remaining cars are also uncoupled one by one and brought into the loop along one of the two tracks. They are connected either to the head or to the tail of the newly formed train. When all the cars have been put into the loop, the train is driven out of it headfirst.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The railroaders repeat this operation until the train is sorted. Help them do this task as quickly as possible.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of cars in the train <i>n</i> (2 ≤ <i>n</i> ≤ 10000). In the next line you are given a permutation of the integers from 1 to <i>n</i>, which describes the initial order of the cars from head to tail. The numbers are separated with a space. After the sorting the cars must be ordered according to their numbers starting from 1.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">In the first line output the minimal number of times <i>k</i> the train should be brought into the loop for sorting. In each of the following <i>k</i> lines output <i>n</i> integers describing the order of the cars in the train after the corresponding sorting. If there are several answers, output any of them.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">6
2 5 3 1 6 4
</PRE></TD><TD><PRE CLASS="intable">3
5 1 6 4 3 2 
1 2 3 4 6 5 
1 2 3 4 5 6 
</PRE></TD></TR></TABLE>
______________________________________________________
1835||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">During his recent trip to the center of the Zone, stalker Shtyr got into an earlier unknown anomaly. Things looked black&nbsp;— he started growing fangs and his eyes turned red. Now only the Swamp Doctor can save Shtyr from turning into a vampire…</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Shtyr does not know the Doctor's email address but suggests that the address is stored in the pocket PC of the dead stalker Semetsky, which Shtyr has found recently. But the problem is that the shrewd Semetsky didn't use an address book but hid all the addresses in the contents of a big text file. Though Shtyr can read this file, he doesn't know which segment of the file is the Doctor's address.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Shtyr wants to find all segments of the text that can be addresses and send an email to each of them. How many emails will he send?
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">An email address in the vicinity of the Zone consists of a username and domain separated by the “@” symbol. The username and domain are nonempty strings consisting of lowercase English letters and dots. They cannot start or end with a dot and cannot contain two consecutive dots.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">You are given the contents of the file from Semetsky's pocket PC. The file contains only symbols with ASCII codes from 32 to 126 and line breaks. The total size of the file is at most 10<sup>6</sup> bytes.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of different email addresses in Semetsky's file.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">a.b@c.d
b@c.de.
@qq
q@.q
</PRE></TD><TD><PRE CLASS="intable">5
</PRE></TD></TR></TABLE><H3 CLASS="problem_subtitle">Hint</H3><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The file contains the following addresses: “a.b@c”, “a.b@c.d”, “b@c”,
“b@c.d”, “b@c.de”.</DIV></DIV>
______________________________________________________
1836||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The Babel fish is a rare and very useful creature, which saved Arthur Dent in his travels around the Galaxy more than once. If you insert it into your ear, you'll be able to understand representatives of any race in the Galaxy as if they spoke your own language.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Upon his return to the Earth, Arthur took the fish out of his ear and decided to keep it in case his friend Ford Prefect arrived unexpectedly and dragged him off on a new travel. Arthur thought it would be best to keep the fish in the tank the intelligent dolphins had given him. Then he would be able to have the tank with him even if he went far away from home in his car.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The tank was a rectangular parallelepiped with a square base and open top. To control the amount of water in the tank, Arthur mounted a sensor for registering the water level at each of its four vertical edges.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since the state of British country roads was far from ideal, the car tilted often and the water surface was not always parallel to the bottom of the tank, which produced unequal readings of the sensors. Arthur had to invent some method of calculating the amount of water in the tank.
</DIV></DIV><DIV CLASS="problem_centered_picture"><IMG SRC="http://acm.timus.ru/images/usu-summer.jpg" BORDER="0" ALT="Problem illustration"></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of tests <i>t</i> (1 ≤ <i>t</i> ≤ 10<sup>4</sup>). In each of the following <i>t</i> lines you are given five integers: the length of the base square of the tank and the water levels at the vertical edges. All the integers are nonnegative and do not exceed 10<sup>6</sup>. The edges are described in the order shown in the figure.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each test output the volume of water in the tank if it is determined uniquely, “error” if the data are inconsistent, and “ambiguous” if the answer cannot be found uniquely. All the numbers should be given with absolute or relative error of at most 10<sup>−6</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2
10 2 3 4 3
10 2 3 3 3
</PRE></TD><TD><PRE CLASS="intable">300.000
error
</PRE></TD></TR></TABLE>
______________________________________________________
1837||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Vladislav Isenbaev is a two-time champion of Ural, vice champion of TopCoder Open 2009, and absolute champion of ACM ICPC 2009. In the time you will spend reading this problem statement Vladislav would have solved a problem. Maybe, even two…
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Since Vladislav Isenbaev graduated from the Specialized Educational and Scientific Center at Ural State University, many of the former and present contestants at USU have known him for quite a few years. Some of them are proud to say that they either played in the same team with him or played in the same team with one of his teammates…
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Let us define <i>Isenbaev's number</i> as follows. This number for Vladislav himself is 0. For people who played in the same team with him, the number is 1. For people who weren't his teammates but played in the same team with one or more of his teammates, the number is 2, and so on. Your task is to automate the process of calculating Isenbaev's numbers so that each contestant at USU would know their proximity to the ACM ICPC champion.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of teams <i>n</i> (1 ≤ <i>n</i> ≤ 100). In each of the following <i>n</i> lines you are given the names of the three members of the corresponding team. The names are separated with a space. Each name is a nonempty line consisting of English letters, and its length is at most 20 symbols. The first letter of a name is capital and the other letters are lowercase.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">For each contestant mentioned in the input data output a line with their name and Isenbaev's number. If the number is undefined, output “undefined” instead of it. The contestants must be ordered lexicographically.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">7
Isenbaev Oparin Toropov
Ayzenshteyn Oparin Samsonov
Ayzenshteyn Chevdar Samsonov
Fominykh Isenbaev Oparin
Dublennykh Fominykh Ivankov
Burmistrov Dublennykh Kurpilyanskiy
Cormen Leiserson Rivest
</PRE></TD><TD><PRE CLASS="intable">Ayzenshteyn 2
Burmistrov 3
Chevdar 3
Cormen undefined
Dublennykh 2
Fominykh 1
Isenbaev 0
Ivankov 2
Kurpilyanskiy 3
Leiserson undefined
Oparin 1
Rivest undefined
Samsonov 2
Toropov 1
</PRE></TD></TR></TABLE>
______________________________________________________
1838||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Kogan-sensei continues teaching young Gennosuke Fujiki the art of sword fighting. Kogan fixes a thin bamboo stem of length <i>l</i> horizontally on <i>n</i> props and orders Gennosuke to cut it into two pieces. Kogan says that a samurai's sword must be as sharp and the stroke must be as fast that both pieces of the stem don't move after the stroke.</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Gennosuke has noticed that not only samurai mastery is important but also the place where the sword cuts the stem. If the center of mass of a stem piece is not located between two props, the piece will fall. Gennosuke wants to paint some parts of the bamboo stem white so that if he cuts the stem at a white point at least one of the resulting pieces will fall. Help him calculate the total length of the stem parts he will have to paint.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integers <i>l</i> and <i>n</i> (3 ≤ <i>l</i> ≤ 10<sup>9</sup>;
2 ≤ <i>n</i> ≤ 10<sup>5</sup>). In the second line you are given <i>n</i> integers smaller than <i>l</i>. They are the distances from the left end of the bamboo stem to the supporting props given in the ascending order. It is guaranteed that the initial position of the stem is stable.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the total length of segments of the stem that Gennosuke should paint white. The answer should be rounded up to the nearest integer.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">5 4
1 2 3 4
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE>
______________________________________________________
1839||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">A serious man Larry, a professor of quantum physics at University of Minnesota, had a streak of bad luck. He learned that his wife wanted to ruin him, his daughter was stealing money from him for a plastic surgery, his son was having problems at school, and his university department was receiving libels upon him in anonymous letters.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">But that was not all. The police arrested Larry's brother Arthur, who had lived in Larry's house for several month working on a mysterious book “The Mentaculus.” When Larry wanted to read the Mentaculus he found out that the book was a collection of a lunatic's drawings&nbsp;— all the pages were filled with strange geometric shapes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">On one of the pages Larry saw a multitude of points and circular arcs. He thought for a moment that the points and arcs formed grinning faces. Could it be true that there were no warm feelings in Arthur's heart but only cold sarcasm? Larry wanted to calculate the number of smileys on the page. Being a scientist, he introduced a rigorous definition: a circular arc PQR and a pair of points A and B form a smiley if the following conditions hold:

<ol>
<li> the straight line PR separates the points A and B from the point Q;</li>
<li> the angles APR, ARP, BPR and BRP are acute;</li>
<li> the distance from the points A and B to the straight line PR is less than the doubled length of the segment PR;</li>
<li> the straight line AB has no common points with the segment PR.</li>
</ol>

Help Larry calculate the number of smileys on the page.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the number of arcs <i>n</i> and the number of points <i>m</i> (1 ≤ <i>n</i> ≤ 100; 1 ≤ <i>m</i> ≤ 10000). In each of the following <i>n</i> lines, an arc is described by the coordinates of three points in the order in which they are located on the arc. It is guaranteed that the three points describing an arc are distinct and do not lie in the same straight line. Each of the following <i>m</i> lines contains the coordinates of the points. All the coordinates are integers not exceeding 10000 in absolute value. All the arcs and all the points are distinct.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the number of smileys on the page of the Mentaculus.</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">2 7
-2 2 0 0 2 2
-2 -2 0 0 2 -2
-1 3
1 3
0 5
0 3
-1 -3
1 -3
2 -3
</PRE></TD><TD><PRE CLASS="intable">4
</PRE></TD></TR></TABLE>
______________________________________________________
1840||||||true||||||
<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Figure-skater Lev is preparing for his fifth Olympic Games. Together with his coach he is inventing a new free skating program, which will win the judges' hearts and guarantee Lev a gold medal if he performs it without mistakes.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lev practices twice a day, in the morning and in the evening. His wife is a well-known producer, and she wants to convert the time spent by her husband for practicing into money. She has signed a contract with the advertising agency “You See—You Buy,” which will shoot her husband at his training and make a cosmetics commercial with the use of this material.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">So, <i>n</i> cameramen have come to Lev's training. They plan to shoot Lev performing his free skating program: the first cameraman will start the shooting, the second will continue, and so on. Each of the cameramen wants Lev to skate along a segment of a straight line from some point to another (and each has specified his own pair of points). Lev has decided to skate along all the specified segments passing from a segment to a segment along a circular arc so that his trajectory has the shape of a smooth curve. If there is no arc connecting two consecutive directed segments without breaks, Lev can extend one of the segments so as to connect them by an arc.
</DIV></DIV><DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Lev has plotted a smooth curve passing through all the segments in the specified order, and now he is interested in finding the minimum time needed for skating along this curve. He knows that he cannot skate at a speed greater than 10 m/s or with a tangential acceleration greater than 1 m/s<sup>2</sup> in magnitude (a tangential acceleration is the acceleration directed along the trajectory). Moreover, Lev cannot skate along circular arcs with a centripetal acceleration greater than 1 m/s<sup>2</sup>. Recall that a centripetal acceleration is calculated as <i>v</i><sup>2</sup>/<i>R</i>, where <i>v</i> is the speed and <i>R</i> is the radius of the arc.
</DIV></DIV>

*******InputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">The first line contains the integer <i>n</i> (1 ≤ <i>n</i> ≤ 1000). In the <i>i</i>-th of the following <i>n</i> lines you are given the coordinates of the beginning and of the end of the directed segment of a straight line specified by the <i>i</i>-th operator. The coordinates are integers and do not exceed 1000 in absolute value. No two consecutive segments are parallel and co-oriented. It is guaranteed that Lev can plot a smooth curve passing through all the segments.
</DIV></DIV>

*******OutputConstraints*******

<DIV CLASS="problem_par"><DIV CLASS="problem_par_normal">Output the minimum time (in seconds) Lev needs to skate along the smooth curve passing through the segments specified by the cameramen. Lev must start moving at the beginning of the first segment and finish at the end of the <i>n</i>-th segment. Lev's speed at the starting and finishing moments is zero. You must output the time with an absolute or relative error of at most 10<sup>−6</sup>.
</DIV></DIV>

*******IOTestCases*******

<TABLE CLASS="sample"><COL WIDTH="350"><COL WIDTH="350"><TR><TH>input</TH><TH>output</TH></TR><TR><TD><PRE CLASS="intable">1
0 0 4 0
</PRE></TD><TD><PRE CLASS="intable">4.0000000000
</PRE></TD></TR><TR><TD><PRE CLASS="intable">2
-2 4 0 4
4 0 4 -2
</PRE></TD><TD><PRE CLASS="intable">7.1415926536
</PRE></TD></TR></TABLE>
______________________________________________________
